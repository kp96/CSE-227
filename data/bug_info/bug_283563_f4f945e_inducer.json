{"bug_id":283563,"commitHash":"f4f945e","commit_info":{"sha":"f4f945e14e8a8576915bed31cbf4ed06a8402c30","commit":{"author":{"name":"timeless%mozdev.org","email":"timeless%mozdev.org","date":"2005-07-13T19:31:14Z"},"committer":{"name":"timeless%mozdev.org","email":"timeless%mozdev.org","date":"2005-07-13T19:31:14Z"},"message":"Bug 283563 OOM crash [@ GetSlotWithMechanism][@ nsKeygenFormProcessor::GetPublicKey]\npatch by b.jacques@planet.nl r=kaie sr=darin a=bsmedberg","tree":{"sha":"c36111e945c58d1c147ca09008f964c34d9f8f25","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/c36111e945c58d1c147ca09008f964c34d9f8f25"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/f4f945e14e8a8576915bed31cbf4ed06a8402c30","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/f4f945e14e8a8576915bed31cbf4ed06a8402c30","html_url":"https://github.com/mozilla/gecko-dev/commit/f4f945e14e8a8576915bed31cbf4ed06a8402c30","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/f4f945e14e8a8576915bed31cbf4ed06a8402c30/comments","author":null,"committer":null,"parents":[{"sha":"30e1c51199c6d18e28035a3c6a3c9aab06cf5a55","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/30e1c51199c6d18e28035a3c6a3c9aab06cf5a55","html_url":"https://github.com/mozilla/gecko-dev/commit/30e1c51199c6d18e28035a3c6a3c9aab06cf5a55"}],"stats":{"total":47,"additions":41,"deletions":6},"files":[{"sha":"5f93cf9ad5bb682b7f5b22c1e5a0425270ead8c7","filename":"security/manager/ssl/src/nsKeygenHandler.cpp","status":"modified","additions":41,"deletions":6,"changes":47,"blob_url":"https://github.com/mozilla/gecko-dev/blob/f4f945e14e8a8576915bed31cbf4ed06a8402c30/security/manager/ssl/src/nsKeygenHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/f4f945e14e8a8576915bed31cbf4ed06a8402c30/security/manager/ssl/src/nsKeygenHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsKeygenHandler.cpp?ref=f4f945e14e8a8576915bed31cbf4ed06a8402c30","patch":"@@ -310,12 +310,24 @@ GetSlotWithMechanism(PRUint32 aMechanism,\n \n         // Allocate the slot name buffer //\n         tokenNameList = NS_STATIC_CAST(PRUnichar**, nsMemory::Alloc(sizeof(PRUnichar *) * numSlots));\n+        if (!tokenNameList) {\n+            rv = NS_ERROR_OUT_OF_MEMORY;\n+            goto loser;\n+        }\n+\n         i = 0;\n         slotElement = PK11_GetFirstSafe(slotList);\n         while (slotElement) {\n-\t\t\ttokenNameList[i] = ToNewUnicode(NS_ConvertUTF8toUCS2(PK11_GetTokenName(slotElement->slot)));\n+            tokenNameList[i] = UTF8ToNewUnicode(nsDependentCString(PK11_GetTokenName(slotElement->slot)));\n             slotElement = PK11_GetNextSafe(slotList, slotElement, PR_FALSE);\n-            i++;\n+            if (tokenNameList[i])\n+                i++;\n+            else {\n+                // OOM. adjust numSlots so we don't free unallocated memory. \n+                numSlots = i;\n+                rv = NS_ERROR_OUT_OF_MEMORY;\n+                goto loser;\n+            }\n         }\n \n \t\t/* Throw up the token list dialog and get back the token */\n@@ -327,7 +339,10 @@ GetSlotWithMechanism(PRUint32 aMechanism,\n \n     {\n       nsPSMUITracker tracker;\n-      if (tracker.isUIForbidden()) {\n+      if (!tokenNameList || !*tokenNameList) {\n+          rv = NS_ERROR_OUT_OF_MEMORY;\n+      }\n+      else if (tracker.isUIForbidden()) {\n         rv = NS_ERROR_NOT_AVAILABLE;\n       }\n       else {\n@@ -362,7 +377,7 @@ GetSlotWithMechanism(PRUint32 aMechanism,\n           PK11_FreeSlotList(slotList);\n       }\n       if (tokenNameList) {\n-          nsMemory::Free(tokenNameList);\n+          NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(numSlots, tokenNameList);\n       }\n       return rv;\n }\n@@ -394,6 +409,7 @@ nsKeygenFormProcessor::GetPublicKey(nsAString& aValue, nsAString& aChallenge,\n     SECItem pkacItem;\n     SECItem signedItem;\n     CERTPublicKeyAndChallenge pkac;\n+    pkac.challenge.data = nsnull;\n     SECKeySizeChoiceInfo *choice = SECKeySizeChoiceList;\n     nsIGeneratingKeypairInfoDialogs * dialogs;\n     nsKeygenThread *KeygenRunnable = 0;\n@@ -423,11 +439,16 @@ nsKeygenFormProcessor::GetPublicKey(nsAString& aValue, nsAString& aChallenge,\n     } else if (aKeyType.LowerCaseEqualsLiteral(\"dsa\")) {\n         char * end;\n         pqgString = ToNewCString(aPqg);\n+        if (!pqgString) {\n+            rv = NS_ERROR_OUT_OF_MEMORY;\n+            goto loser;\n+        }\n+\n         type = dsaKey;\n         keyGenMechanism = CKM_DSA_KEY_PAIR_GEN;\n         if (strcmp(pqgString, \"null\") == 0)\n             goto loser;\n-            str = pqgString;\n+        str = pqgString;\n         do {\n             end = strchr(str, ',');\n             if (end != nsnull)\n@@ -540,8 +561,12 @@ nsKeygenFormProcessor::GetPublicKey(nsAString& aValue, nsAString& aChallenge,\n      * set up the PublicKeyAndChallenge data structure, then DER encode it\n      */\n     pkac.spki = spkiItem;\n-\tpkac.challenge.len = aChallenge.Length();\n+    pkac.challenge.len = aChallenge.Length();\n     pkac.challenge.data = (unsigned char *)ToNewCString(aChallenge);\n+    if (!pkac.challenge.data) {\n+        rv = NS_ERROR_OUT_OF_MEMORY;\n+        goto loser;\n+    }\n     \n     sec_rv = DER_Encode(arena, &pkacItem, CERTPublicKeyAndChallengeTemplate, &pkac);\n     if ( sec_rv != SECSuccess ) {\n@@ -561,6 +586,10 @@ nsKeygenFormProcessor::GetPublicKey(nsAString& aValue, nsAString& aChallenge,\n      * Convert the signed public key and challenge into base64/ascii.\n      */\n     keystring = BTOA_DataToAscii(signedItem.data, signedItem.len);\n+    if (!keystring) {\n+        rv = NS_ERROR_OUT_OF_MEMORY;\n+        goto loser;\n+    }\n \n     CopyASCIItoUTF16(keystring, aOutPublicKey);\n     nsCRT::free(keystring);\n@@ -593,6 +622,12 @@ nsKeygenFormProcessor::GetPublicKey(nsAString& aValue, nsAString& aChallenge,\n     if (KeygenRunnable) {\n       NS_RELEASE(KeygenRunnable);\n     }\n+    if (pqgString) {\n+        nsMemory::Free(pqgString);\n+    }\n+    if (pkac.challenge.data) {\n+        nsMemory::Free(pkac.challenge.data);\n+    }\n     return rv;\n }\n "}]},"blames":["cc0f0366","ca619729","2c3a905f"]}