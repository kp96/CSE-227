Rewrap XOWs if the current XOW is from the wrong scope. bug 391497

diff --git a/js/src/xpconnect/src/XPCCrossOriginWrapper.cpp b/js/src/xpconnect/src/XPCCrossOriginWrapper.cpp
--- a/js/src/xpconnect/src/XPCCrossOriginWrapper.cpp
+++ b/js/src/xpconnect/src/XPCCrossOriginWrapper.cpp
@@ -342,9 +342,18 @@ WrapSameOriginProp(JSContext *cx, JSObje
     return XPC_XOW_WrapFunction(cx, outerObj, wrappedObj, vp);
   }
 
-  const char *name = JS_GET_CLASS(cx, wrappedObj)->name;
+  JSClass *clasp = JS_GET_CLASS(cx, wrappedObj);
+  const char *name = clasp->name;
   if (XPC_XOW_ClassNeedsXOW(name)) {
     return XPC_XOW_WrapObject(cx, GetGlobalObject(cx, outerObj), vp);
+  }
+
+  // Check if wrappedObj is an XOW. If so, verify that it's from the
+  // right scope.
+  if (clasp == &sXPC_XOW_JSClass.base &&
+      JS_GetParent(cx, wrappedObj) != JS_GetParent(cx, outerObj)) {
+    *vp = OBJECT_TO_JSVAL(GetWrappedObject(cx, wrappedObj));
+    return XPC_XOW_WrapObject(cx, JS_GetParent(cx, outerObj), vp);
   }
 
   return JS_TRUE;
@@ -394,9 +403,10 @@ XPC_XOW_RewrapIfNeeded(JSContext *cx, JS
     return XPC_XOW_WrapFunction(cx, outerObj, obj, vp);
   }
 
-  // Don't need to wrap non-C++-implemented objects.
-  // Note: This catches attempts to double-wrap cross origin wrappers.
-  if (!XPCWrappedNative::GetWrappedNativeOfJSObject(cx, obj)) {
+  if (JS_GET_CLASS(cx, obj) == &sXPC_XOW_JSClass.base &&
+      JS_GetParent(cx, outerObj) != JS_GetParent(cx, obj)) {
+    *vp = OBJECT_TO_JSVAL(GetWrappedObject(cx, obj));
+  } else if (!XPCWrappedNative::GetWrappedNativeOfJSObject(cx, obj)) {
     return JS_TRUE;
   }
 
