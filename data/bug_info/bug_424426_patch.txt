Index: content/base/src/nsScriptLoader.h
===================================================================
RCS file: /cvsroot/mozilla/content/base/src/nsScriptLoader.h,v
retrieving revision 1.22
diff -u -p -d -8 -r1.22 nsScriptLoader.h
--- content/base/src/nsScriptLoader.h	22 Mar 2008 05:03:57 -0000	1.22
+++ content/base/src/nsScriptLoader.h	23 Mar 2008 23:23:02 -0000
@@ -176,21 +176,21 @@ public:
                                  nsIDocument* aDocument, nsString& aString);
 
   /**
    * Processes any pending requests that are ready for processing.
    */
   void ProcessPendingRequests();
 
   /**
-   * If needed, downgrade the principal of aDocument based on the
-   * principal of aChannel.
+   * Check whether it's OK to execute a script loaded via aChannel in
+   * aDocument.
    */
-  static nsresult DowngradePrincipalIfNeeded(nsIDocument* aDocument,
-                                             nsIChannel* aChannel);
+  static PRBool ShouldExecuteScript(nsIDocument* aDocument,
+                                    nsIChannel* aChannel);
 
 protected:
   /**
    * Process any pending requests asyncronously (i.e. off an event) if there
    * are any. Note that this is a no-op if there aren't any currently pending
    * requests.
    */
   virtual void ProcessPendingRequestsAsync();
Index: content/base/src/nsScriptLoader.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/base/src/nsScriptLoader.cpp,v
retrieving revision 1.118
diff -u -p -d -8 -r1.118 nsScriptLoader.cpp
--- content/base/src/nsScriptLoader.cpp	22 Mar 2008 05:03:57 -0000	1.118
+++ content/base/src/nsScriptLoader.cpp	24 Mar 2008 01:35:36 -0000
@@ -845,74 +845,55 @@ nsScriptLoader::PrepareLoadedRequest(nsS
     aRequest->mElement->GetScriptCharset(hintCharset);
     rv = ConvertToUTF16(channel, aString, aStringLen, hintCharset, mDocument,
                         aRequest->mScriptText);
 
     NS_ASSERTION(NS_SUCCEEDED(rv),
                  "Could not convert external JavaScript to Unicode!");
     NS_ENSURE_SUCCESS(rv, rv);
 
-    // -- Merge the principal of the script file with that of the document; if
-    // the script has a non-cert principal, the document's principal should be
-    // downgraded.
-    rv = DowngradePrincipalIfNeeded(mDocument, channel);
-    NS_ENSURE_SUCCESS(rv, rv);
+    if (!ShouldExecuteScript(mDocument, channel)) {
+      return NS_ERROR_NOT_AVAILABLE;
+    }
   }
 
   // This assertion could fire errorously if we ran out of memory when
   // inserting the request in the array. However it's an unlikely case
   // so if you see this assertion it is likely something else that is
   // wrong, especially if you see it more than once.
   NS_ASSERTION(mPendingRequests.IndexOf(aRequest) >= 0,
                "aRequest should be pending!");
 
   // Mark this as loaded
   aRequest->mLoading = PR_FALSE;
 
   return NS_OK;
 }
 
 /* static */
-nsresult
-nsScriptLoader::DowngradePrincipalIfNeeded(nsIDocument* aDocument,
-                                           nsIChannel* aChannel)
+PRBool
+nsScriptLoader::ShouldExecuteScript(nsIDocument* aDocument,
+                                    nsIChannel* aChannel)
 {
   if (!aChannel) {
-    return NS_ERROR_UNEXPECTED;
+    return PR_FALSE;
   }
 
-  nsCOMPtr<nsIPrincipal> channelPrincipal;
-  nsresult rv = nsContentUtils::GetSecurityManager()->
-    GetChannelPrincipal(aChannel, getter_AddRefs(channelPrincipal));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  NS_ASSERTION(channelPrincipal, "Gotta have a principal here!");
-
-  // If the document principal is a cert principal and aNewPrincipal
-  // is not the same as the channel principal, downgrade the document
-  // principal to a codebase principal.
-
   PRBool hasCert;
   nsIPrincipal* docPrincipal = aDocument->NodePrincipal();
   docPrincipal->GetHasCertificate(&hasCert);
-  if (hasCert) {
-    PRBool equal;
-    docPrincipal->Equals(channelPrincipal, &equal);
-    if (!equal) {
-      nsCOMPtr<nsIURI> uri, domain;
-      docPrincipal->GetURI(getter_AddRefs(uri));
-      docPrincipal->GetDomain(getter_AddRefs(domain));
+  if (!hasCert) {
+    return PR_TRUE;
+  }
 
-      nsCOMPtr<nsIPrincipal> newPrincipal;
-      rv = nsContentUtils::GetSecurityManager()->
-        GetCodebasePrincipal(uri, getter_AddRefs(newPrincipal));
-      NS_ENSURE_SUCCESS(rv, rv);
+  nsCOMPtr<nsIPrincipal> channelPrincipal;
+  nsresult rv = nsContentUtils::GetSecurityManager()->
+    GetChannelPrincipal(aChannel, getter_AddRefs(channelPrincipal));
+  NS_ENSURE_SUCCESS(rv, PR_FALSE);
 
-      NS_ASSERTION(newPrincipal, "Gotta have a new principal");
-      if (domain) {
-        newPrincipal->SetDomain(domain);
-      }
-      aDocument->SetPrincipal(newPrincipal);
-    }
-  }
+  NS_ASSERTION(channelPrincipal, "Gotta have a principal here!");
 
-  return NS_OK;
+  // If the document principal is a cert principal and is not the same
+  // as the channel principal, then we don't execute the script.
+  PRBool equal;
+  rv = docPrincipal->Equals(channelPrincipal, &equal);
+  return NS_SUCCEEDED(rv) && equal;
 }
Index: content/xul/document/src/nsXULDocument.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xul/document/src/nsXULDocument.cpp,v
retrieving revision 1.820
diff -u -p -d -8 -r1.820 nsXULDocument.cpp
--- content/xul/document/src/nsXULDocument.cpp	22 Mar 2008 05:03:58 -0000	1.820
+++ content/xul/document/src/nsXULDocument.cpp	23 Mar 2008 23:26:57 -0000
@@ -3331,28 +3331,25 @@ nsXULDocument::OnStreamComplete(nsIStrea
         nsCOMPtr<nsIURI> uri = scriptProto->mSrcURI;
 
         // XXX should also check nsIHttpChannel::requestSucceeded
 
         nsString stringStr;
         rv = nsScriptLoader::ConvertToUTF16(channel, string, stringLen,
                                             EmptyString(), this, stringStr);
         if (NS_SUCCEEDED(rv)) {
-            // Downgrade _before_ compiling, since that's when the
-            // script saves its principal.
-            rv = nsScriptLoader::DowngradePrincipalIfNeeded(this, channel);
-            if (NS_SUCCEEDED(rv)) {
-                rv = scriptProto->Compile(stringStr.get(), stringStr.Length(),
-                                          uri, 1, this, mCurrentPrototype);
-            }
+            rv = scriptProto->Compile(stringStr.get(), stringStr.Length(),
+                                      uri, 1, this, mCurrentPrototype);
         }
 
         aStatus = rv;
         if (NS_SUCCEEDED(rv)) {
-            rv = ExecuteScript(scriptProto);
+            if (nsScriptLoader::ShouldExecuteScript(this, channel)) {
+                rv = ExecuteScript(scriptProto);
+            }
 
             // If the XUL cache is enabled, save the script object there in
             // case different XUL documents source the same script.
             //
             // But don't save the script in the cache unless the master XUL
             // document URL is a chrome: URL.  It is valid for a URL such as
             // about:config to translate into a master document URL, whose
             // prototype document nodes -- including prototype scripts that
@@ -3424,18 +3421,17 @@ nsXULDocument::OnStreamComplete(nsIStrea
         doc->mCurrentScriptProto = nsnull;
 
         // Unlink doc from scriptProto's list before executing and resuming
         *docp = doc->mNextSrcLoadWaiter;
         doc->mNextSrcLoadWaiter = nsnull;
 
         // Execute only if we loaded and compiled successfully, then resume
         if (NS_SUCCEEDED(aStatus) && scriptProto->mScriptObject.mObject &&
-            NS_SUCCEEDED(nsScriptLoader::DowngradePrincipalIfNeeded(doc,
-                                                                    channel))) {
+            nsScriptLoader::ShouldExecuteScript(doc, channel)) {
             doc->ExecuteScript(scriptProto);
         }
         doc->ResumeWalk();
         NS_RELEASE(doc);
     }
 
     return rv;
 }
