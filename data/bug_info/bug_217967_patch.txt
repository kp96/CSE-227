Index: caps/include/nsScriptSecurityManager.h
===================================================================
RCS file: /cvsroot/mozilla/caps/include/nsScriptSecurityManager.h,v
retrieving revision 1.78.20.2.2.3
diff -u -8 -p -d -r1.78.20.2.2.3 nsScriptSecurityManager.h
--- caps/include/nsScriptSecurityManager.h	7 Apr 2005 19:54:05 -0000	1.78.20.2.2.3
+++ caps/include/nsScriptSecurityManager.h	29 Jun 2005 11:45:41 -0000
@@ -256,16 +256,23 @@ InitClassPolicyEntry(PLDHashTable *table
 
 // Domain Policy
 class DomainPolicy : public PLDHashTable
 {
 public:
     DomainPolicy() : mWildcardPolicy(nsnull),
                      mRefCount(0)
     {
+        mGeneration = sGeneration;
+
+#ifdef DEBUG_CAPS_DomainPolicyLifeCycle
+        ++sObjects;
+        _printPopulationInfo();
+#endif
+
     }
 
     PRBool Init()
     {
         static const PLDHashTableOps domainPolicyOps =
         {
             PL_DHashAllocTable,
             PL_DHashFreeTable,
@@ -280,33 +287,57 @@ public:
 
         return PL_DHashTableInit(this, &domainPolicyOps, nsnull,
                                  sizeof(ClassPolicy), 16);
     }
 
     ~DomainPolicy()
     {
         PL_DHashTableFinish(this);
+
+#ifdef DEBUG_CAPS_DomainPolicyLifeCycle
+        --sObjects;
+        _printPopulationInfo();
+#endif
+
     }
 
     void Hold()
     {
         mRefCount++;
     }
 
     void Drop()
     {
         if (--mRefCount == 0)
             delete this;
     }
-
+    
+    static void InvalidateAll()
+    {
+        sGeneration++;
+    }
+    
+    PRBool IsInvalid()
+    {
+        return mGeneration != sGeneration; 
+    }
+    
     ClassPolicy* mWildcardPolicy;
 
 private:
     PRUint32 mRefCount;
+    PRUint32 mGeneration;
+    static PRUint32 sGeneration;
+    
+#ifdef DEBUG_CAPS_DomainPolicyLifeCycle
+    static PRUint32 sObjects;
+    static void _printPopulationInfo();
+#endif
+
 };
 
 /////////////////////////////
 // nsScriptSecurityManager //
 /////////////////////////////
 #define NS_SCRIPTSECURITYMANAGER_CID \
 { 0x7ee2a4c0, 0x4b93, 0x17d3, \
 { 0xba, 0x18, 0x00, 0x60, 0xb0, 0xf1, 0x99, 0xa2 }}
Index: caps/include/nsPrincipal.h
===================================================================
RCS file: /cvsroot/mozilla/caps/include/nsPrincipal.h,v
retrieving revision 1.14.20.1
diff -u -8 -p -d -r1.14.20.1 nsPrincipal.h
--- caps/include/nsPrincipal.h	24 Oct 2004 12:04:33 -0000	1.14.20.1
+++ caps/include/nsPrincipal.h	29 Jun 2005 11:45:41 -0000
@@ -117,17 +117,17 @@ protected:
 
   nsresult SetCertificate(const char* aCertID, const char* aName);
 
   // Keep this is a pointer, even though it may slightly increase the
   // cost of keeping a certificate, this is a good tradeoff though since
   // it is very rare that we actually have a certificate.
   nsAutoPtr<Certificate> mCert;
 
-  void* mSecurityPolicy;
+  DomainPolicy* mSecurityPolicy;
 
   nsCOMPtr<nsIURI> mCodebase;
   nsCOMPtr<nsIURI> mDomain;
   PRPackedBool mTrusted;
   PRPackedBool mInitialized;
 };
 
 
Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.229.6.6.2.7
diff -u -8 -p -d -r1.229.6.6.2.7 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	10 May 2005 23:14:33 -0000	1.229.6.6.2.7
+++ caps/src/nsScriptSecurityManager.cpp	29 Jun 2005 11:45:50 -0000
@@ -116,16 +116,27 @@ inline void SetPendingException(JSContex
 inline void SetPendingException(JSContext *cx, const PRUnichar *aMsg)
 {
     JSString *str = JS_NewUCStringCopyZ(cx,
                         NS_REINTERPRET_CAST(const jschar*, aMsg));
     if (str)
         JS_SetPendingException(cx, STRING_TO_JSVAL(str));
 }
 
+// DomainPolicy members
+#ifdef DEBUG_CAPS_DomainPolicyLifeCycle
+PRUint32 DomainPolicy::sObjects=0;
+void DomainPolicy::_printPopulationInfo()
+{
+    printf("CAPS.DomainPolicy: Gen. %d, %d DomainPolicy objects.\n",
+        sGeneration, sObjects);
+}
+#endif
+PRUint32 DomainPolicy::sGeneration = 0;
+
 // Helper class to get stuff from the ClassInfo and not waste extra time with
 // virtual method calls for things it has already gotten
 class ClassInfoData
 {
 public:
     ClassInfoData(nsIClassInfo *aClassInfo, const char *aName)
         : mClassInfo(aClassInfo),
           mName(NS_CONST_CAST(char *, aName)),
@@ -2986,35 +2997,46 @@ nsScriptSecurityManager::SystemPrincipal
     if (gScriptSecMan)
         gScriptSecMan->GetSystemPrincipal(&sysprin);
     return NS_STATIC_CAST(nsSystemPrincipal*, sysprin);
 }
 
 nsresult
 nsScriptSecurityManager::InitPolicies()
 {
-    // Reset the "dirty" flag
-    mPolicyPrefsChanged = PR_FALSE;
-
     // Clear any policies cached on XPConnect wrappers
     NS_ENSURE_STATE(sXPConnect);
     nsresult rv = sXPConnect->ClearAllWrappedNativeSecurityPolicies();
     if (NS_FAILED(rv)) return rv;
 
-    //-- Reset mOriginToPolicyMap
+    //-- Clear mOriginToPolicyMap: delete mapped DomainEntry items,
+    //-- whose dtor decrements refcount of stored DomainPolicy object
     delete mOriginToPolicyMap;
+    
+    //-- Marks all the survivor DomainPolicy objects (those cached
+    //-- by nsPrincipal objects) as invalid: they will be released
+    //-- on first nsPrincipal::GetSecurityPolicy() attempt.
+    DomainPolicy::InvalidateAll();
+    
+    //-- Release old default policy
+    if(mDefaultPolicy)
+        mDefaultPolicy->Drop();
+    
+    //-- Initialize a new mOriginToPolicyMap
     mOriginToPolicyMap =
       new nsObjectHashtable(nsnull, nsnull, DeleteDomainEntry, nsnull);
+    if (!mOriginToPolicyMap)
+        return NS_ERROR_OUT_OF_MEMORY;
 
-    //-- Reset and initialize the default policy
-    delete mDefaultPolicy;
+    //-- Create, refcount and initialize a new default policy 
     mDefaultPolicy = new DomainPolicy();
-    if (!mOriginToPolicyMap || !mDefaultPolicy)
+    if (!mDefaultPolicy)
         return NS_ERROR_OUT_OF_MEMORY;
 
+    mDefaultPolicy->Hold();
     if (!mDefaultPolicy->Init())
         return NS_ERROR_UNEXPECTED;
 
     //-- Initialize the table of security levels
     if (!mCapabilities)
     {
         mCapabilities = 
           new nsObjectHashtable(nsnull, nsnull, DeleteCapability, nsnull);
@@ -3135,16 +3157,19 @@ nsScriptSecurityManager::InitPolicies()
             domainCurrent++;
         }
 
         rv = InitDomainPolicy(cx, nameBegin, domainPolicy);
         if (NS_FAILED(rv))
             return rv;
     }
 
+    // Reset the "dirty" flag
+    mPolicyPrefsChanged = PR_FALSE;
+
 #ifdef DEBUG_CAPS_HACKER
     PrintPolicyDB();
 #endif
     return NS_OK;
 }
 
 
 nsresult
Index: caps/src/nsPrincipal.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsPrincipal.cpp,v
retrieving revision 1.32.16.1
diff -u -8 -p -d -r1.32.16.1 nsPrincipal.cpp
--- caps/src/nsPrincipal.cpp	24 Oct 2004 12:04:33 -0000	1.32.16.1
+++ caps/src/nsPrincipal.cpp	29 Jun 2005 11:45:51 -0000
@@ -140,16 +140,17 @@ deleteElement(void* aElement, void *aDat
   nsHashtable *ht = (nsHashtable *) aElement;
   delete ht;
   return PR_TRUE;
 }
 
 nsPrincipal::~nsPrincipal(void)
 {
   mAnnotations.EnumerateForwards(deleteElement, nsnull);
+  SetSecurityPolicy(nsnull); 
 }
 
 NS_IMETHODIMP
 nsPrincipal::GetJSPrincipals(JSContext *cx, JSPrincipals **jsprin)
 {
   NS_PRECONDITION(mJSPrincipals.nsIPrincipalPtr, "mJSPrincipals is uninitalized!");
 
   JSPRINCIPALS_HOLD(cx, &mJSPrincipals);
@@ -196,24 +197,35 @@ nsPrincipal::GetOrigin(char **aOrigin)
   }
 
   return *aOrigin ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
 }
 
 NS_IMETHODIMP
 nsPrincipal::GetSecurityPolicy(void** aSecurityPolicy)
 {
-  *aSecurityPolicy = mSecurityPolicy;
+  if (mSecurityPolicy && mSecurityPolicy->IsInvalid()) 
+    SetSecurityPolicy(nsnull);
+  
+  *aSecurityPolicy = (void *) mSecurityPolicy;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsPrincipal::SetSecurityPolicy(void* aSecurityPolicy)
 {
-  mSecurityPolicy = aSecurityPolicy;
+  DomainPolicy *newPolicy = NS_REINTERPRET_CAST(
+                              DomainPolicy *, aSecurityPolicy);
+  if (newPolicy)
+    newPolicy->Hold();
+ 
+  if (mSecurityPolicy)
+    mSecurityPolicy->Drop();
+  
+  mSecurityPolicy = newPolicy;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsPrincipal::Equals(nsIPrincipal *aOther, PRBool *aResult)
 {
   *aResult = PR_FALSE;
 
@@ -558,17 +570,17 @@ nsPrincipal::GetDomain(nsIURI** aDomain)
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsPrincipal::SetDomain(nsIURI* aDomain)
 {
   mDomain = aDomain;
   // Domain has changed, forget cached security policy
-  mSecurityPolicy = nsnull;
+  SetSecurityPolicy(nsnull);
 
   return NS_OK;
 }
 
 nsresult
 nsPrincipal::InitFromPersistent(const char* aPrefName,
                                 const char* aToken,
                                 const char* aGrantedList,
