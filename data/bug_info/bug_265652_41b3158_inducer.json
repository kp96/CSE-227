{"bug_id":265652,"commitHash":"41b3158","commit_info":{"sha":"41b3158e6dde2c29f97a6d959c2d167a93b55cbd","commit":{"author":{"name":"timeless%mozdev.org","email":"timeless%mozdev.org","date":"2004-11-05T15:23:35Z"},"committer":{"name":"timeless%mozdev.org","email":"timeless%mozdev.org","date":"2004-11-05T15:23:35Z"},"message":"Bug 265652 Possible code cleanup of nsNSSCertificateDB and nsPKCS12Blob\nr=biesi sr=darin","tree":{"sha":"c1107cce45dbaddabb437565aadcc67a1666d4f1","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/c1107cce45dbaddabb437565aadcc67a1666d4f1"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/41b3158e6dde2c29f97a6d959c2d167a93b55cbd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/41b3158e6dde2c29f97a6d959c2d167a93b55cbd","html_url":"https://github.com/mozilla/gecko-dev/commit/41b3158e6dde2c29f97a6d959c2d167a93b55cbd","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/41b3158e6dde2c29f97a6d959c2d167a93b55cbd/comments","author":null,"committer":null,"parents":[{"sha":"016195690f40eaff7130c2911a0b2eb31dfe3949","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/016195690f40eaff7130c2911a0b2eb31dfe3949","html_url":"https://github.com/mozilla/gecko-dev/commit/016195690f40eaff7130c2911a0b2eb31dfe3949"}],"stats":{"total":24,"additions":10,"deletions":14},"files":[{"sha":"e232c88638228214a902962b58fa907e52a1e2ff","filename":"security/manager/ssl/src/nsNSSCertificateDB.cpp","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/mozilla/gecko-dev/blob/41b3158e6dde2c29f97a6d959c2d167a93b55cbd/security/manager/ssl/src/nsNSSCertificateDB.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/41b3158e6dde2c29f97a6d959c2d167a93b55cbd/security/manager/ssl/src/nsNSSCertificateDB.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsNSSCertificateDB.cpp?ref=41b3158e6dde2c29f97a6d959c2d167a93b55cbd","patch":"@@ -1056,9 +1056,9 @@ nsNSSCertificateDB::ImportPKCS12File(nsISupports *aToken,\n {\n   NS_ENSURE_ARG(aFile);\n   nsPKCS12Blob blob;\n-  if (aToken) {\n-    nsCOMPtr<nsIPK11Token> t = do_QueryInterface(aToken);\n-    blob.SetToken(t);\n+  nsCOMPtr<nsIPK11Token> token = do_QueryInterface(aToken);\n+  if (token) {\n+    blob.SetToken(token);\n   }\n   return blob.ImportFromFile(aFile);\n }"},{"sha":"b445f1c11aca5b582045991088f27e81e1675e04","filename":"security/manager/ssl/src/nsPKCS12Blob.cpp","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/mozilla/gecko-dev/blob/41b3158e6dde2c29f97a6d959c2d167a93b55cbd/security/manager/ssl/src/nsPKCS12Blob.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/41b3158e6dde2c29f97a6d959c2d167a93b55cbd/security/manager/ssl/src/nsPKCS12Blob.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsPKCS12Blob.cpp?ref=41b3158e6dde2c29f97a6d959c2d167a93b55cbd","patch":"@@ -34,7 +34,7 @@\n  * the terms of any one of the MPL, the GPL or the LGPL.\n  *\n  * ***** END LICENSE BLOCK ***** */\n-/* $Id: nsPKCS12Blob.cpp,v 1.41 2004/06/17 00:13:16 roc+%cs.cmu.edu Exp $ */\n+/* $Id: nsPKCS12Blob.cpp,v 1.42 2004/11/05 15:23:35 timeless%mozdev.org Exp $ */\n \n #include \"prmem.h\"\n #include \"prprf.h\"\n@@ -172,8 +172,6 @@ nsPKCS12Blob::ImportFromFileHelper(nsILocalFile *file, PRBool &aWantRetry)\n \n   PK11SlotInfo *slot=nsnull;\n   nsXPIDLString tokenName;\n-  nsXPIDLCString tokenNameCString;\n-  const char *tokNameRef;\n   \n   aWantRetry = PR_FALSE;\n \n@@ -187,12 +185,10 @@ nsPKCS12Blob::ImportFromFileHelper(nsILocalFile *file, PRBool &aWantRetry)\n   }\n \n   mToken->GetTokenName(getter_Copies(tokenName));\n-  tokenNameCString.Adopt(ToNewUTF8String(tokenName));\n-  tokNameRef = tokenNameCString; //I do this here so that the\n-                                 //NS_CONST_CAST below doesn't\n-                                 //break the build on Win32\n-\n-  slot = PK11_FindSlotByName(NS_CONST_CAST(char*,tokNameRef));\n+  {\n+    NS_ConvertUTF16toUTF8 tokenNameCString(tokenName);\n+    slot = PK11_FindSlotByName(tokenNameCString.get());\n+  }\n   if (!slot) {\n     srv = SECFailure;\n     goto finish;\n@@ -606,6 +602,7 @@ nsPKCS12Blob::digest_open(void *arg, PRBool reading)\n     nsCAutoString pathBuf;\n     tmpFile->GetNativePath(pathBuf);\n     cx->mTmpFilePath = ToNewCString(pathBuf);\n+    if (!cx->mTmpFilePath) return SECFailure;\n #ifdef XP_MAC\n     char *unixPath = nsnull;\n     ConvertMacPathToUnixPath(cx->mTmpFilePath, &unixPath);\n@@ -672,8 +669,7 @@ nsPKCS12Blob::nickname_collision(SECItem *oldNick, PRBool *cancel, void *wincx)\n   nsCString nickname;\n   nsAutoString nickFromProp;\n   nssComponent->GetPIPNSSBundleString(\"P12DefaultNickname\", nickFromProp);\n-  nsXPIDLCString nickFromPropC;\n-  nickFromPropC.Adopt(ToNewUTF8String(nickFromProp));\n+  NS_ConvertUTF16toUTF8 nickFromPropC(nickFromProp);\n   // The user is trying to import a PKCS#12 file that doesn't have the\n   // attribute we use to set the nickname.  So in order to reduce the\n   // number of interactions we require with the user, we'll build a nickname"}]},"blames":["31db9b54","3634d4d9","d1493d11","54bf02e6","6b4a5557","9134754e","9ae17346","f447f56e","0b0563a0"]}