# HG changeset patch
# User Justin Lebar <justin.lebar@gmail.com>
# Date 1298054578 28800
# Node ID ec52cf596cd7cf0fa791611117807beebc32013a
# Parent  d50fdfb0426d3fa2a864e80e067abf24dd22ad57
Bug 634834

diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp
+++ b/docshell/base/nsDocShell.cpp
@@ -9585,37 +9585,64 @@ nsDocShell::AddState(nsIVariant *aData, 
     // active content viewer.  Since EvictContentViewers at the end of step 5
     // might run script, we can't just put a script blocker around the critical
     // section.
     //
     // Note that we completely ignore the aTitle parameter.
 
     nsresult rv;
 
-    nsCOMPtr<nsIDocument> document = do_GetInterface(GetAsSupports(this));
-    NS_ENSURE_TRUE(document, NS_ERROR_FAILURE);
-
-    // Step 1: Clone aData by getting its JSON representation
+    // Step 1: Clone aData by getting its JSON representation.
+    //
+    // StringifyJSValVariant might cause arbitrary JS to run, and this code
+    // might navigate the page we're on, potentially to a different origin! (bug
+    // 634834)  To protect against this, we abort if our principal changes due
+    // to the stringify call.
     nsString dataStr;
-    rv = StringifyJSValVariant(aData, dataStr);
-    NS_ENSURE_SUCCESS(rv, rv);
+    {
+        nsCOMPtr<nsIDocument> origDocument =
+            do_GetInterface(GetAsSupports(this));
+        nsCOMPtr<nsIScriptObjectPrincipal> origDocScriptObj =
+            do_QueryInterface(origDocument);
+        if (!origDocScriptObj)
+            return NS_ERROR_DOM_SECURITY_ERR;
+        nsCOMPtr<nsIPrincipal> origPrincipal = origDocScriptObj->GetPrincipal();
+
+        rv = StringifyJSValVariant(aData, dataStr);
+        NS_ENSURE_SUCCESS(rv, rv);
+
+        nsCOMPtr<nsIDocument> newDocument =
+            do_GetInterface(GetAsSupports(this));
+        nsCOMPtr<nsIScriptObjectPrincipal> newDocScriptObj =
+            do_QueryInterface(newDocument);
+        if (!newDocScriptObj)
+            return NS_ERROR_DOM_SECURITY_ERR;
+        nsCOMPtr<nsIPrincipal> newPrincipal = newDocScriptObj->GetPrincipal();
+
+        PRBool principalsEqual = PR_FALSE;
+        origPrincipal->Equals(newPrincipal, &principalsEqual);
+        NS_ENSURE_TRUE(principalsEqual, NS_ERROR_DOM_SECURITY_ERR);
+    }
 
     // Check that the state object isn't too long.
     // Default max length: 640k chars.
     PRInt32 maxStateObjSize = 0xA0000;
     if (mPrefs) {
         mPrefs->GetIntPref("browser.history.maxStateObjectSize",
                            &maxStateObjSize);
     }
     if (maxStateObjSize < 0) {
         maxStateObjSize = 0;
     }
     NS_ENSURE_TRUE(dataStr.Length() <= (PRUint32)maxStateObjSize,
                    NS_ERROR_ILLEGAL_VALUE);
 
+    nsCOMPtr<nsIDocument> document = do_GetInterface(GetAsSupports(this));
+    NS_ENSURE_TRUE(document, NS_ERROR_FAILURE);
+
     // Step 2: Resolve aURL
     PRBool equalURIs = PR_TRUE;
     nsCOMPtr<nsIURI> oldURI = mCurrentURI;
     nsCOMPtr<nsIURI> newURI;
     if (aURL.Length() == 0) {
         newURI = mCurrentURI;
     }
     else {
diff --git a/docshell/test/Makefile.in b/docshell/test/Makefile.in
--- a/docshell/test/Makefile.in
+++ b/docshell/test/Makefile.in
@@ -88,16 +88,18 @@ _TEST_FILES = \
 		test_bug540462.html \
 		file_bug540462.html \
 		test_bug580069.html \
 		file_bug580069_1.html \
 		file_bug580069_2.sjs \
 		test_bug590573.html \
 		file_bug590573_1.html \
 		file_bug590573_2.html \
+		test_bug634834.html \
+		file_bug634834.html \
 		$(NULL)
 
 ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
 _TEST_FILES += \
 		test_bug511449.html \
 		file_bug511449.html \
 		$(NULL)
 endif
diff --git a/docshell/test/file_bug634834.html b/docshell/test/file_bug634834.html
new file mode 100644
--- /dev/null
+++ b/docshell/test/file_bug634834.html
@@ -0,0 +1,5 @@
+<html>
+<body>
+Nothing to see here; just an empty page.
+</body>
+</html>
diff --git a/docshell/test/test_bug634834.html b/docshell/test/test_bug634834.html
new file mode 100644
--- /dev/null
+++ b/docshell/test/test_bug634834.html
@@ -0,0 +1,53 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=634834
+-->
+<head>
+  <title>Test for Bug 634834</title>
+  <script type="application/javascript" src="/MochiKit/packed.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/EventUtils.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=634834">Mozilla Bug 634834</a>
+
+<iframe id='iframe' src='file_bug634834.html' onload='iframe_loaded()'></iframe>
+
+<script type='application/javascript;version=1.7'>
+SimpleTest.waitForExplicitFinish();
+
+function iframe_loaded() {
+  var loadedAfterPushstate = false;
+  $('iframe').onload = function() {
+    loadedAfterPushstate = true;
+  }
+
+  var obj = { name: 'name' };
+  obj.__defineGetter__('a', function() {
+    $('iframe').contentWindow.location = 'http://example.com';
+
+    // Wait until we've loaded example.com.
+    do {
+        var r = new XMLHttpRequest();
+        r.open("GET", location.href, false);
+        r.overrideMimeType("text/plain");
+        try { r.send(null); }
+        catch (e) {}
+    } while (!loadedAfterPushstate);
+  });
+
+  try {
+    $('iframe').contentWindow.history.pushState(obj, '');
+    ok(false, 'pushState should throw exception.');
+  }
+  catch(e) {
+    ok(true, 'pushState threw an exception.');
+  }
+  SimpleTest.finish();
+}
+
+</script>
+</body>
+</html>
