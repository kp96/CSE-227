Bug 479560 - Use the callee's scope to create outparam objects.

diff --git a/js/src/xpconnect/src/xpcprivate.h b/js/src/xpconnect/src/xpcprivate.h
--- a/js/src/xpconnect/src/xpcprivate.h
+++ b/js/src/xpconnect/src/xpcprivate.h
@@ -2536,17 +2536,17 @@ public:
                                       const char * aPropertyName,
                                       const char * anInterfaceName,
                                       PRBool aForceReport);
 private:
     nsXPCWrappedJSClass();   // not implemented
     nsXPCWrappedJSClass(XPCCallContext& ccx, REFNSIID aIID,
                         nsIInterfaceInfo* aInfo);
 
-    JSObject*  NewOutObject(JSContext* cx);
+    JSObject*  NewOutObject(JSContext* cx, JSObject* scope);
 
     JSBool IsReflectable(uint16 i) const
         {return (JSBool)(mDescriptors[i/32] & (1 << (i%32)));}
     void SetReflectable(uint16 i, JSBool b)
         {if(b) mDescriptors[i/32] |= (1 << (i%32));
          else mDescriptors[i/32] &= ~(1 << (i%32));}
 
     enum SizeMode {GET_SIZE, GET_LENGTH};
diff --git a/js/src/xpconnect/src/xpcwrappedjsclass.cpp b/js/src/xpconnect/src/xpcwrappedjsclass.cpp
--- a/js/src/xpconnect/src/xpcwrappedjsclass.cpp
+++ b/js/src/xpconnect/src/xpcwrappedjsclass.cpp
@@ -1507,17 +1507,17 @@ nsXPCWrappedJSClass::CallMethod(nsXPCWra
                                               &param_iid, obj, nsnull))
                     goto pre_call_clean_up;
             }
         }
 
         if(param.IsOut())
         {
             // create an 'out' object
-            JSObject* out_obj = NewOutObject(cx);
+            JSObject* out_obj = NewOutObject(cx, obj);
             if(!out_obj)
             {
                 retval = NS_ERROR_OUT_OF_MEMORY;
                 goto pre_call_clean_up;
             }
 
             if(param.IsIn())
             {
@@ -1864,19 +1864,19 @@ const char*
 nsXPCWrappedJSClass::GetInterfaceName()
 {
     if(!mName)
         mInfo->GetName(&mName);
     return mName;
 }
 
 JSObject*
-nsXPCWrappedJSClass::NewOutObject(JSContext* cx)
+nsXPCWrappedJSClass::NewOutObject(JSContext* cx, JSObject* scope)
 {
-    return JS_NewObject(cx, nsnull, nsnull, nsnull);
+    return JS_NewObject(cx, nsnull, nsnull, JS_GetGlobalForObject(cx, scope));
 }
 
 
 NS_IMETHODIMP
 nsXPCWrappedJSClass::DebugDump(PRInt16 depth)
 {
 #ifdef DEBUG
     depth-- ;
