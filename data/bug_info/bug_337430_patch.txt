diff --git a/security/manager/ssl/src/nsNSSCertificateDB.cpp b/security/manager/ssl/src/nsNSSCertificateDB.cpp
--- a/security/manager/ssl/src/nsNSSCertificateDB.cpp
+++ b/security/manager/ssl/src/nsNSSCertificateDB.cpp
@@ -1378,38 +1378,46 @@ nsNSSCertificateDB::FindEmailEncryptionC
   *_retval = 0;
 
   if (aNickname.IsEmpty())
     return NS_OK;
 
   nsNSSShutDownPreventionLock locker;
   nsresult rv = NS_OK;
   CERTCertificate *cert = 0;
+  CERTCertificateCleaner certCleaner(cert);
   nsCOMPtr<nsIInterfaceRequestor> ctx = new PipUIContext();
   nsNSSCertificate *nssCert = nsnull;
   char *asciiname = NULL;
   NS_ConvertUTF16toUTF8 aUtf8Nickname(aNickname);
   asciiname = const_cast<char*>(aUtf8Nickname.get());
 
   /* Find a good cert in the user's database */
   cert = CERT_FindUserCertByUsage(CERT_GetDefaultCertDB(), asciiname, 
            certUsageEmailRecipient, PR_TRUE, ctx);
 
-  if (!cert) { goto loser; }  
+  if (!cert)
+  {
+    /* No user cert found, try to find a peer encryption cert */
+    cert = CERT_FindCertByNicknameOrEmailAddrByUsage(
+            CERT_GetDefaultCertDB(), asciiname, certUsageEmailRecipient);
+  }
+
+  if (!cert)
+    return rv;
 
   nssCert = new nsNSSCertificate(cert);
   if (nssCert == nsnull) {
     rv = NS_ERROR_OUT_OF_MEMORY;
   }
   NS_ADDREF(nssCert);
 
   *_retval = static_cast<nsIX509Cert*>(nssCert);
 
 loser:
-  if (cert) CERT_DestroyCertificate(cert);
   return rv;
 }
 
 /* nsIX509Cert getDefaultEmailSigningCert (); */
 NS_IMETHODIMP
 nsNSSCertificateDB::FindEmailSigningCert(const nsAString &aNickname, nsIX509Cert **_retval)
 {
   if (!_retval)
@@ -1418,38 +1426,46 @@ nsNSSCertificateDB::FindEmailSigningCert
   *_retval = 0;
 
   if (aNickname.IsEmpty())
     return NS_OK;
 
   nsNSSShutDownPreventionLock locker;
   nsresult rv = NS_OK;
   CERTCertificate *cert = 0;
+  CERTCertificateCleaner certCleaner(cert);
   nsCOMPtr<nsIInterfaceRequestor> ctx = new PipUIContext();
   nsNSSCertificate *nssCert = nsnull;
   char *asciiname = NULL;
   NS_ConvertUTF16toUTF8 aUtf8Nickname(aNickname);
   asciiname = const_cast<char*>(aUtf8Nickname.get());
 
   /* Find a good cert in the user's database */
   cert = CERT_FindUserCertByUsage(CERT_GetDefaultCertDB(), asciiname, 
            certUsageEmailSigner, PR_TRUE, ctx);
 
-  if (!cert) { goto loser; }  
+  if (!cert)
+  {
+    /* No user cert found, try to find a peer encryption cert */
+    cert = CERT_FindCertByNicknameOrEmailAddrByUsage(
+            CERT_GetDefaultCertDB(), asciiname, certUsageEmailSigner);
+  }
+
+  if (!cert)
+    return rv;
 
   nssCert = new nsNSSCertificate(cert);
   if (nssCert == nsnull) {
     rv = NS_ERROR_OUT_OF_MEMORY;
   }
   NS_ADDREF(nssCert);
 
   *_retval = static_cast<nsIX509Cert*>(nssCert);
 
 loser:
-  if (cert) CERT_DestroyCertificate(cert);
   return rv;
 }
 
 NS_IMETHODIMP
 nsNSSCertificateDB::FindCertByEmailAddress(nsISupports *aToken, const char *aEmailAddress, nsIX509Cert **_retval)
 {
   nsNSSShutDownPreventionLock locker;
   CERTCertificate *any_cert = CERT_FindCertByNicknameOrEmailAddr(CERT_GetDefaultCertDB(), (char*)aEmailAddress);
