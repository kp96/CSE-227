Index: mozilla/security/manager/ssl/src/nsNSSCallbacks.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsNSSCallbacks.cpp,v
retrieving revision 1.69
diff -u -u -1 -0 -p -r1.69 nsNSSCallbacks.cpp
--- mozilla/security/manager/ssl/src/nsNSSCallbacks.cpp	12 Apr 2008 04:47:24 -0000	1.69
+++ mozilla/security/manager/ssl/src/nsNSSCallbacks.cpp	22 Apr 2008 21:54:09 -0000
@@ -80,35 +80,37 @@ NSSCleanupAutoPtrClass(CERTCertificate, 
 extern PRLogModuleInfo* gPIPNSSLog;
 #endif
 
 class nsHTTPDownloadEvent : public nsRunnable {
 public:
   nsHTTPDownloadEvent();
   ~nsHTTPDownloadEvent();
 
   NS_IMETHOD Run();
 
-  nsNSSHttpRequestSession *mRequestSession; // no ownership
+  nsNSSHttpRequestSession *mRequestSession;
   
   nsCOMPtr<nsHTTPListener> mListener;
   PRBool mResponsibleForDoneSignal;
 };
 
 nsHTTPDownloadEvent::nsHTTPDownloadEvent()
 :mResponsibleForDoneSignal(PR_TRUE)
 {
 }
 
 nsHTTPDownloadEvent::~nsHTTPDownloadEvent()
 {
   if (mResponsibleForDoneSignal && mListener)
     mListener->send_done_signal();
+
+  mRequestSession->Release();
 }
 
 NS_IMETHODIMP
 nsHTTPDownloadEvent::Run()
 {
   if (!mListener)
     return NS_OK;
 
   nsresult rv;
 
@@ -318,20 +320,35 @@ SECStatus nsNSSHttpRequestSession::trySe
     else
       PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,
              ("nsNSSHttpRequestSession::trySendAndReceiveFcn - success at attempt %d\n",
               retry_count));
   }
 #endif
 
   return result_sec_status;
 }
 
+void
+nsNSSHttpRequestSession::AddRef()
+{
+  PR_AtomicIncrement(&mRefCount);
+}
+
+void
+nsNSSHttpRequestSession::Release()
+{
+  PRInt32 newRefCount = PR_AtomicDecrement(&mRefCount);
+  if (!newRefCount) {
+    delete this;
+  }
+}
+
 SECStatus
 nsNSSHttpRequestSession::internal_send_receive_attempt(PRBool &retryable_error,
                                                        PRPollDesc **pPollDesc,
                                                        PRUint16 *http_response_code,
                                                        const char **http_response_content_type,
                                                        const char **http_response_headers,
                                                        const char **http_response_data,
                                                        PRUint32 *http_response_data_len)
 {
   if (pPollDesc) *pPollDesc = nsnull;
@@ -357,20 +374,21 @@ nsNSSHttpRequestSession::internal_send_r
   PRLock *waitLock = mListener->mLock;
   PRCondVar *waitCondition = mListener->mCondition;
   volatile PRBool &waitFlag = mListener->mWaitFlag;
   waitFlag = PR_TRUE;
 
   nsRefPtr<nsHTTPDownloadEvent> event = new nsHTTPDownloadEvent;
   if (!event)
     return SECFailure;
 
   event->mListener = mListener;
+  this->AddRef();
   event->mRequestSession = this;
 
   nsresult rv = NS_DispatchToMainThread(event);
   if (NS_FAILED(rv))
   {
     event->mResponsibleForDoneSignal = PR_FALSE;
     return SECFailure;
   }
 
   PRBool request_canceled = PR_FALSE;
@@ -482,26 +500,27 @@ nsNSSHttpRequestSession::internal_send_r
 SECStatus nsNSSHttpRequestSession::cancelFcn()
 {
   // As of today, only the blocking variant of the http interface
   // has been implemented. Implementing cancelFcn will be necessary
   // as soon as we implement the nonblocking variant.
   return SECSuccess;
 }
 
 SECStatus nsNSSHttpRequestSession::freeFcn()
 {
-  delete this;
+  Release();
   return SECSuccess;
 }
 
 nsNSSHttpRequestSession::nsNSSHttpRequestSession()
-: mHasPostData(PR_FALSE),
+: mRefCount(1),
+  mHasPostData(PR_FALSE),
   mTimeoutInterval(0),
   mListener(new nsHTTPListener)
 {
 }
 
 nsNSSHttpRequestSession::~nsNSSHttpRequestSession()
 {
 }
 
 SEC_HttpClientFcn nsNSSHttpInterface::sNSSInterfaceTable;
Index: mozilla/security/manager/ssl/src/nsNSSCallbacks.h
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsNSSCallbacks.h,v
retrieving revision 1.16
diff -u -u -1 -0 -p -r1.16 nsNSSCallbacks.h
--- mozilla/security/manager/ssl/src/nsNSSCallbacks.h	12 Apr 2008 04:47:24 -0000	1.16
+++ mozilla/security/manager/ssl/src/nsNSSCallbacks.h	22 Apr 2008 21:54:09 -0000
@@ -102,20 +102,23 @@ public:
   nsCString mHost;
   PRUint16 mPort;  
 
   static SECStatus createSessionFcn(const char *host,
                                     PRUint16 portnum,
                                     SEC_HTTP_SERVER_SESSION *pSession);
 };
 
 class nsNSSHttpRequestSession
 {
+protected:
+  PRInt32 mRefCount;
+
 public:
   static SECStatus createFcn(SEC_HTTP_SERVER_SESSION session,
                              const char *http_protocol_variant,
                              const char *path_and_query_string,
                              const char *http_request_method, 
                              const PRIntervalTime timeout, 
                              SEC_HTTP_REQUEST_SESSION *pRequest);
 
   SECStatus setPostDataFcn(const char *http_data, 
                            const PRUint32 http_data_len,
@@ -127,20 +130,23 @@ public:
   SECStatus trySendAndReceiveFcn(PRPollDesc **pPollDesc,
                                  PRUint16 *http_response_code, 
                                  const char **http_response_content_type, 
                                  const char **http_response_headers, 
                                  const char **http_response_data, 
                                  PRUint32 *http_response_data_len);
 
   SECStatus cancelFcn();
   SECStatus freeFcn();
 
+  void AddRef();
+  void Release();
+
   nsCString mURL;
   nsCString mRequestMethod;
   
   PRBool mHasPostData;
   nsCString mPostData;
   nsCString mPostContentType;
   
   PRIntervalTime mTimeoutInterval;
   
   nsCOMPtr<nsHTTPListener> mListener;
