{"bug_id":299520,"commitHash":"8a396d6","commit_info":{"sha":"8a396d6673faf15ee8aca660e3e30af82b9630d9","commit":{"author":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2005-07-06T04:03:17Z"},"committer":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2005-07-06T04:03:17Z"},"message":"Juggle the proto chain for XPCNativeWrapper a bit.  Bug 299520, r=jst, sr+a=brendan","tree":{"sha":"971be82f79337755074eaeb26e589a0c634731b9","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/971be82f79337755074eaeb26e589a0c634731b9"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/8a396d6673faf15ee8aca660e3e30af82b9630d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/8a396d6673faf15ee8aca660e3e30af82b9630d9","html_url":"https://github.com/mozilla/gecko-dev/commit/8a396d6673faf15ee8aca660e3e30af82b9630d9","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/8a396d6673faf15ee8aca660e3e30af82b9630d9/comments","author":null,"committer":null,"parents":[{"sha":"2f532b789e042db651676d8cb693fb7b881b4120","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/2f532b789e042db651676d8cb693fb7b881b4120","html_url":"https://github.com/mozilla/gecko-dev/commit/2f532b789e042db651676d8cb693fb7b881b4120"}],"stats":{"total":46,"additions":26,"deletions":20},"files":[{"sha":"15b7475547c93e8d6f06394598cdbd1389f944e6","filename":"js/src/xpconnect/src/XPCNativeWrapper.cpp","status":"modified","additions":26,"deletions":20,"changes":46,"blob_url":"https://github.com/mozilla/gecko-dev/blob/8a396d6673faf15ee8aca660e3e30af82b9630d9/js/src/xpconnect/src/XPCNativeWrapper.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/8a396d6673faf15ee8aca660e3e30af82b9630d9/js/src/xpconnect/src/XPCNativeWrapper.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/js/src/xpconnect/src/XPCNativeWrapper.cpp?ref=8a396d6673faf15ee8aca660e3e30af82b9630d9","patch":"@@ -313,40 +313,38 @@ XPC_NW_GetOrSetProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp,\n     return JS_TRUE;\n   }\n \n+  // Be paranoid, don't let people use this as another object's\n+  // prototype or anything like that.\n+  if (!XPCNativeWrapper::IsNativeWrapper(cx, obj)) {\n+    return ThrowException(NS_ERROR_UNEXPECTED, cx);\n+  }\n+\n+  XPCWrappedNative *wrappedNative =\n+    XPCNativeWrapper::GetWrappedNative(cx, obj);\n+\n+  if (!wrappedNative) {\n+    return ThrowException(NS_ERROR_INVALID_ARG, cx);\n+  }\n+\n+  JSObject *nativeObj = wrappedNative->GetFlatJSObject();\n+\n   // We can't use XPC_NW_BYPASS here, because we need to do a full\n   // OBJ_SET_PROPERTY or OBJ_GET_PROPERTY on the wrapped native's\n   // object, in order to trigger reflection done by the underlying\n   // OBJ_LOOKUP_PROPERTY done by SET and GET.\n \n   if (ShouldBypassNativeWrapper(cx, obj)) {\n-    XPCWrappedNative *wn = XPCNativeWrapper::GetWrappedNative(cx, obj);\n     jsid interned_id;\n \n     if (!::JS_ValueToId(cx, id, &interned_id)) {\n       return JS_FALSE;\n     }\n \n-    JSObject *wn_obj = wn->GetFlatJSObject();\n     return aIsSet\n-           ? OBJ_SET_PROPERTY(cx, wn_obj, interned_id, vp)\n-           : OBJ_GET_PROPERTY(cx, wn_obj, interned_id, vp);\n+           ? OBJ_SET_PROPERTY(cx, nativeObj, interned_id, vp)\n+           : OBJ_GET_PROPERTY(cx, nativeObj, interned_id, vp);\n   }\n \n-  // Be paranoid, don't let people use this as another object's\n-  // prototype or anything like that.\n-  if (!XPCNativeWrapper::IsNativeWrapper(cx, obj)) {\n-    return ThrowException(NS_ERROR_UNEXPECTED, cx);\n-  }\n-\n-  XPCWrappedNative *wrappedNative =\n-    XPCNativeWrapper::GetWrappedNative(cx, obj);\n-\n-  if (!wrappedNative) {\n-    return ThrowException(NS_ERROR_UNEXPECTED, cx);\n-  }\n-\n-  JSObject *nativeObj = wrappedNative->GetFlatJSObject();\n-\n   if (!aIsSet &&\n       id == GetStringByIndex(cx, XPCJSRuntime::IDX_WRAPPED_JSOBJECT)) {\n     // Return the underlying native object, the XPConnect wrapped\n@@ -1125,7 +1123,15 @@ XPCNativeWrapper::AttachNewConstructorObject(XPCCallContext &ccx,\n                    nsnull, nsnull);\n   if (!class_obj) {\n     NS_WARNING(\"can't initialize the XPCNativeWrapper class\");\n-    return NS_ERROR_OUT_OF_MEMORY;\n+    return PR_FALSE;\n+  }\n+  \n+  // Make sure our prototype chain is empty and that people can't mess\n+  // with XPCNativeWrapper.prototype.\n+  ::JS_SetPrototype(ccx, class_obj, nsnull);\n+  if (!::JS_SealObject(ccx, class_obj, JS_FALSE)) {\n+    NS_WARNING(\"Failed to seal XPCNativeWrapper.prototype\");\n+    return PR_FALSE;\n   }\n \n   JSBool found;"}]},"blames":["c5ad16e0","742852d6"]}