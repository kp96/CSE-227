{"bug_id":299518,"commitHash":"846d21b","commit_info":{"sha":"846d21be79b6a7d1818025524d9d4f8249938bac","commit":{"author":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2005-08-26T14:47:35Z"},"committer":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2005-08-26T14:47:35Z"},"message":"Limit xbl:implements a tad.  Bug 299518, r=jst, sr=shaver","tree":{"sha":"72bdf5320b981e3d1d3c74e1c186421805e62287","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/72bdf5320b981e3d1d3c74e1c186421805e62287"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/846d21be79b6a7d1818025524d9d4f8249938bac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/846d21be79b6a7d1818025524d9d4f8249938bac","html_url":"https://github.com/mozilla/gecko-dev/commit/846d21be79b6a7d1818025524d9d4f8249938bac","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/846d21be79b6a7d1818025524d9d4f8249938bac/comments","author":null,"committer":null,"parents":[{"sha":"9a750e2331021cb88d2f295ebd7a9baa1b14170d","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/9a750e2331021cb88d2f295ebd7a9baa1b14170d","html_url":"https://github.com/mozilla/gecko-dev/commit/9a750e2331021cb88d2f295ebd7a9baa1b14170d"}],"stats":{"total":21,"additions":20,"deletions":1},"files":[{"sha":"8c3af6f5cdfcc601d3364e949b677c78bb97f1a0","filename":"content/xbl/src/nsXBLContentSink.cpp","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/mozilla/gecko-dev/blob/846d21be79b6a7d1818025524d9d4f8249938bac/content/xbl/src/nsXBLContentSink.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/846d21be79b6a7d1818025524d9d4f8249938bac/content/xbl/src/nsXBLContentSink.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/content/xbl/src/nsXBLContentSink.cpp?ref=846d21be79b6a7d1818025524d9d4f8249938bac","patch":"@@ -61,6 +61,7 @@\n #include \"nsIScriptError.h\"\n #include \"nsNodeInfoManager.h\"\n #include \"nsINodeInfo.h\"\n+#include \"nsIPrincipal.h\"\n \n nsresult\n NS_NewXBLContentSink(nsIXMLContentSink** aResult,\n@@ -714,7 +715,25 @@ nsXBLContentSink::ConstructImplementation(const PRUnichar **aAtts)\n       name = aAtts[1];\n     }\n     else if (localName == nsXBLAtoms::implements) {\n-      mBinding->ConstructInterfaceTable(nsDependentString(aAtts[1]));\n+      // Only allow implementation of interfaces via XBL if the principal of\n+      // our XBL document has UniversalXPConnect privileges.  No principal\n+      // means no privs!\n+      \n+      nsIPrincipal* principal = mDocument->GetPrincipal();\n+      if (principal) {\n+        // XXX this api is so badly tied to JS it's not even funny.  We don't\n+        // have a concept of enabling capabilities on a per-principal basis,\n+        // but only on a per-principal-and-JS-stackframe basis!  So for now\n+        // this is basically equivalent to testing that we have the system\n+        // principal, since there is no JS stackframe in sight here...\n+        PRBool hasUniversalXPConnect;\n+        nsresult rv = principal->IsCapabilityEnabled(\"UniversalXPConnect\",\n+                                                     nsnull,\n+                                                     &hasUniversalXPConnect);\n+        if (NS_SUCCEEDED(rv) && hasUniversalXPConnect) {\n+          mBinding->ConstructInterfaceTable(nsDependentString(aAtts[1]));\n+        }\n+      }\n     }\n   }\n "}]},"blames":["b05f4afa","a7908e75","565ae06d","0d3a2fa6","19490453","a7ac96fe","7c522efd"]}