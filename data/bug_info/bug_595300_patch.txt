diff --git a/security/coreconf/WIN32.mk b/security/coreconf/WIN32.mk
--- a/security/coreconf/WIN32.mk
+++ b/security/coreconf/WIN32.mk
@@ -58,19 +58,46 @@ else
 	LINK         = link
 	AR           = lib
 	AR          += -NOLOGO -OUT:"$@"
 	RANLIB       = echo
 	BSDECHO      = echo
 	RC           = rc.exe
 	MT           = mt.exe
 	# Determine compiler version
+	CC_VERSION  := $(shell $(CC) 2>&1 | sed -ne \
+		's|.* \([0-9]\+\.[0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?\).*|\1|p')
+	# Change the dots to spaces.
+	_CC_VERSION_WORDS := $(subst ., ,$(CC_VERSION))
+	_CC_VMAJOR  := $(word 1,$(_CC_VERSION_WORDS))
+	_CC_VMINOR  := $(word 2,$(_CC_VERSION_WORDS))
+	_CC_RELEASE := $(word 3,$(_CC_VERSION_WORDS))
+	_CC_BUILD   := $(word 4,$(_CC_VERSION_WORDS))
+	_MSC_VER     = $(_CC_VMAJOR)$(_CC_VMINOR)
 	_MSC_VER_6   = 1200
-	_MSC_VER    := $(shell $(CC) 2>&1 | sed -ne \
-                       's/.*[^0-9.]\([0-9]\{1,\}\)\.\([0-9]\{1,\}\).*/\1\2/p' )
+	ifeq ($(_CC_VMAJOR),14)
+	    # -DYNAMICBASE is only supported on VC8SP1 or newer,
+	    # so be very specific here!
+	    # VC8 is 14.00.50727.42, VC8SP1 is 14.00.50727.762
+	    ifeq ($(_CC_RELEASE).$(_CC_BUILD),50727.42)
+		USE_DYNAMICBASE =
+	    else
+	    ifeq ($(_CC_RELEASE).$(_CC_BUILD),50727.762)
+		USE_DYNAMICBASE = 1
+	    else
+		_LOSER := $(error Unknown compiler version $(CC_VERSION))
+	    endif
+	    endif
+	endif
+	# if $(_CC_VMAJOR) >= 15
+	# NOTE: 'sort' sorts the words in lexical order, so this test works
+	# only if $(_CC_VMAJOR) is two digits.
+	ifeq ($(firstword $(sort $(_CC_VMAJOR) 15)),15)
+	    USE_DYNAMICBASE = 1
+	endif
 endif
 
 ifdef BUILD_TREE
 NSINSTALL_DIR  = $(BUILD_TREE)/nss
 else
 NSINSTALL_DIR  = $(CORE_DEPTH)/coreconf/nsinstall
 endif
 NSINSTALL      = nsinstall
@@ -118,41 +145,44 @@ ifdef NS_USE_GCC
 else # !NS_USE_GCC
     OS_CFLAGS += -W3 -nologo -D_CRT_SECURE_NO_WARNINGS
     OS_DLLFLAGS += -nologo -DLL -SUBSYSTEM:WINDOWS
     ifeq ($(_MSC_VER),$(_MSC_VER_6))
     ifndef MOZ_DEBUG_SYMBOLS
 	OS_DLLFLAGS += -PDB:NONE
     endif
     endif
+    ifdef USE_DYNAMICBASE
+	OS_DLLFLAGS += -DYNAMICBASE
+    endif
     ifdef BUILD_OPT
 	OS_CFLAGS  += -MD
 	ifeq (11,$(ALLOW_OPT_CODE_SIZE)$(OPT_CODE_SIZE))
 		OPTIMIZER += -O1
 	else
 		OPTIMIZER += -O2
 	endif
 	DEFINES    += -UDEBUG -U_DEBUG -DNDEBUG
-	DLLFLAGS   += -DYNAMICBASE -OUT:"$@"
+	DLLFLAGS   += -OUT:"$@"
 	ifdef MOZ_DEBUG_SYMBOLS
 		ifdef MOZ_DEBUG_FLAGS
 			OPTIMIZER += $(MOZ_DEBUG_FLAGS) -Fd$(OBJDIR)/
 		else
 			OPTIMIZER += -Zi -Fd$(OBJDIR)/
 		endif
 		DLLFLAGS += -DEBUG -OPT:REF
 		LDFLAGS += -DEBUG -OPT:REF
 	endif
     else
 	#
 	# Define USE_DEBUG_RTL if you want to use the debug runtime library
 	# (RTL) in the debug build
 	#
 	ifdef USE_DEBUG_RTL
-		OS_CFLAGS += -MDd -DUSE_DEBUG_RTL -D_CRTDBG_MAP_ALLOC
+		OS_CFLAGS += -MDd -D_CRTDBG_MAP_ALLOC
 	else
 		OS_CFLAGS += -MD
 	endif
 	OPTIMIZER += -Zi -Fd$(OBJDIR)/ -Od
 	NULLSTRING :=
 	SPACE      := $(NULLSTRING) # end of the line
 	USERNAME   := $(subst $(SPACE),_,$(USERNAME))
 	USERNAME   := $(subst -,_,$(USERNAME))
diff --git a/security/coreconf/coreconf.dep b/security/coreconf/coreconf.dep
--- a/security/coreconf/coreconf.dep
+++ b/security/coreconf/coreconf.dep
@@ -37,8 +37,9 @@
 
 /*
  * A dummy header file that is a dependency for all the object files.
  * Used to force a full recompilation of NSS in Mozilla's Tinderbox
  * depend builds.  See comments in rules.mk.
  */
 
 #error "Do not include this header file."
+
diff --git a/security/nss/TAG-INFO b/security/nss/TAG-INFO
--- a/security/nss/TAG-INFO
+++ b/security/nss/TAG-INFO
@@ -1,1 +1,1 @@
-NSS_3_12_8_BETA2
+NSS_3_12_8_BETA3
diff --git a/security/nss/cmd/certutil/certutil.c b/security/nss/cmd/certutil/certutil.c
--- a/security/nss/cmd/certutil/certutil.c
+++ b/security/nss/cmd/certutil/certutil.c
@@ -280,30 +280,34 @@ CertReq(SECKEYPrivateKey *privk, SECKEYP
         return SECFailure;
     }
     CERT_FinishExtensions(extHandle);
     CERT_FinishCertificateRequestAttributes(cr);
 
     /* Der encode the request */
     encoding = SEC_ASN1EncodeItem(arena, NULL, cr,
                                   SEC_ASN1_GET(CERT_CertificateRequestTemplate));
+    CERT_DestroyCertificateRequest(cr);
     if (encoding == NULL) {
+	PORT_FreeArena (arena, PR_FALSE);
 	SECU_PrintError(progName, "der encoding of request failed");
 	return SECFailure;
     }
 
     /* Sign the request */
     signAlgTag = SEC_GetSignatureAlgorithmOidTag(keyType, hashAlgTag);
     if (signAlgTag == SEC_OID_UNKNOWN) {
+	PORT_FreeArena (arena, PR_FALSE);
 	SECU_PrintError(progName, "unknown Key or Hash type");
 	return SECFailure;
     }
     rv = SEC_DerSignData(arena, &result, encoding->data, encoding->len, 
 			 privk, signAlgTag);
     if (rv) {
+	PORT_FreeArena (arena, PR_FALSE);
 	SECU_PrintError(progName, "signing of data failed");
 	return SECFailure;
     }
 
     /* Encode request in specified format */
     if (ascii) {
 	char *obuf;
 	char *name, *email, *org, *state, *country;
@@ -312,61 +316,71 @@ CertReq(SECKEYPrivateKey *privk, SECKEYP
 
 	it = &result;
 
 	obuf = BTOA_ConvertItemToAscii(it);
 	total = PL_strlen(obuf);
 
 	name = CERT_GetCommonName(subject);
 	if (!name) {
-	    name = strdup("(not specified)");
+	    name = PORT_Strdup("(not specified)");
 	}
 
 	if (!phone)
 	    phone = strdup("(not specified)");
 
 	email = CERT_GetCertEmailAddress(subject);
 	if (!email)
-	    email = strdup("(not specified)");
+	    email = PORT_Strdup("(not specified)");
 
 	org = CERT_GetOrgName(subject);
 	if (!org)
-	    org = strdup("(not specified)");
+	    org = PORT_Strdup("(not specified)");
 
 	state = CERT_GetStateName(subject);
 	if (!state)
-	    state = strdup("(not specified)");
+	    state = PORT_Strdup("(not specified)");
 
 	country = CERT_GetCountryName(subject);
 	if (!country)
-	    country = strdup("(not specified)");
+	    country = PORT_Strdup("(not specified)");
 
 	PR_fprintf(outFile, 
 	           "\nCertificate request generated by Netscape certutil\n");
 	PR_fprintf(outFile, "Phone: %s\n\n", phone);
 	PR_fprintf(outFile, "Common Name: %s\n", name);
 	PR_fprintf(outFile, "Email: %s\n", email);
 	PR_fprintf(outFile, "Organization: %s\n", org);
 	PR_fprintf(outFile, "State: %s\n", state);
 	PR_fprintf(outFile, "Country: %s\n\n", country);
 
+	PORT_Free(name);
+	PORT_Free(email);
+	PORT_Free(org);
+	PORT_Free(state);
+	PORT_Free(country);
+
 	PR_fprintf(outFile, "%s\n", NS_CERTREQ_HEADER);
 	numBytes = PR_Write(outFile, obuf, total);
+	PORT_Free(obuf);
 	if (numBytes != total) {
+	    PORT_FreeArena (arena, PR_FALSE);
 	    SECU_PrintError(progName, "write error");
 	    return SECFailure;
 	}
 	PR_fprintf(outFile, "\n%s\n", NS_CERTREQ_TRAILER);
     } else {
 	numBytes = PR_Write(outFile, result.data, result.len);
 	if (numBytes != (int)result.len) {
+	    PORT_FreeArena (arena, PR_FALSE);
 	    SECU_PrintSystemError(progName, "write error");
 	    return SECFailure;
 	}
     }
+    PORT_FreeArena (arena, PR_FALSE);
     return SECSuccess;
 }
 
 static SECStatus 
 ChangeTrustAttributes(CERTCertDBHandle *handle, PK11SlotInfo *slot,
 			char *name, char *trusts, void *pwdata)
 {
     SECStatus rv;
@@ -414,22 +428,23 @@ ChangeTrustAttributes(CERTCertDBHandle *
 	}
     }
     CERT_DestroyCertificate(cert);
 
     return SECSuccess;
 }
 
 static SECStatus
-DumpChain(CERTCertDBHandle *handle, char *name)
+DumpChain(CERTCertDBHandle *handle, char *name, PRBool ascii)
 {
     CERTCertificate *the_cert;
     CERTCertificateList *chain;
     int i, j;
-    the_cert = PK11_FindCertFromNickname(name, NULL);
+    the_cert = SECU_FindCertByNicknameOrFilename(handle, name,
+                                                 ascii, NULL);
     if (!the_cert) {
 	SECU_PrintError(progName, "Could not find: %s\n", name);
 	return SECFailure;
     }
     chain = CERT_CertChainFromCert(the_cert, 0, PR_TRUE);
     CERT_DestroyCertificate(the_cert);
     if (!chain) {
 	SECU_PrintError(progName, "Could not obtain chain for: %s\n", name);
@@ -461,25 +476,22 @@ listCerts(CERTCertDBHandle *handle, char
         SECStatus newrv = PK11_Authenticate(slot, PR_TRUE, pwarg);
         if (newrv != SECSuccess) {
             SECU_PrintError(progName, "could not authenticate to token %s.",
                             PK11_GetTokenName(slot));
             return SECFailure;
         }
     }
     if (name) {
-	CERTCertificate *the_cert;
-	the_cert = CERT_FindCertByNicknameOrEmailAddr(handle, name);
-	if (!the_cert) {
-	    the_cert = PK11_FindCertFromNickname(name, NULL);
-	    if (!the_cert) {
-		SECU_PrintError(progName, "Could not find: %s\n", name);
-		return SECFailure;
-	    }
-	}
+	CERTCertificate *the_cert =
+            SECU_FindCertByNicknameOrFilename(handle, name, ascii, NULL);
+        if (!the_cert) {
+            SECU_PrintError(progName, "Could not find cert: %s\n", name);
+            return SECFailure;
+        }
 	/* Here, we have one cert with the desired nickname or email 
 	 * address.  Now, we will attempt to get a list of ALL certs 
 	 * with the same subject name as the cert we have.  That list 
 	 * should contain, at a minimum, the one cert we have already found.
 	 * If the list of certs is empty (NULL), the libraries have failed.
 	 */
 	certs = CERT_CreateSubjectCertList(NULL, handle, &the_cert->derSubject,
 		PR_Now(), PR_FALSE);
@@ -589,17 +601,18 @@ DeleteCert(CERTCertDBHandle *handle, cha
 	return SECFailure;
     }
 
     return SECSuccess;
 }
 
 static SECStatus
 ValidateCert(CERTCertDBHandle *handle, char *name, char *date,
-	     char *certUsage, PRBool checkSig, PRBool logit, secuPWData *pwdata)
+             char *certUsage, PRBool checkSig, PRBool logit,
+             PRBool ascii, secuPWData *pwdata)
 {
     SECStatus rv;
     CERTCertificate *cert = NULL;
     int64 timeBoundary;
     SECCertificateUsage usage;
     CERTVerifyLog reallog;
     CERTVerifyLog *log = NULL;
 
@@ -627,17 +640,18 @@ ValidateCert(CERTCertDBHandle *handle, c
 	case 'J':
 	    usage = certificateUsageObjectSigner;
 	    break;
 	default:
 	    PORT_SetError (SEC_ERROR_INVALID_ARGS);
 	    return (SECFailure);
     }
     do {
-	cert = CERT_FindCertByNicknameOrEmailAddr(handle, name);
+	cert = SECU_FindCertByNicknameOrFilename(handle, name, ascii,
+                                                 NULL);
 	if (!cert) {
 	    SECU_PrintError(progName, "could not find certificate named \"%s\"",
 			    name);
 	    GEN_BREAK (SECFailure)
 	}
 
 	if (date != NULL) {
 	    rv = DER_AsciiToTime(&timeBoundary, date);
@@ -979,21 +993,21 @@ Usage(char *progName)
     FPS "\t\t [-f targetPWfile] [-@ upgradePWFile]\n");
     FPS "\t%s --merge --source-dir sourceDBDir [-d targetDBdir]\n",
 	progName);
     FPS "\t\t [-P targetDBPrefix] [--source-prefix sourceDBPrefix]\n");
     FPS "\t\t [-f targetPWfile] [-@ sourcePWFile]\n");
     FPS "\t%s -L [-n cert-name] [-X] [-d certdir] [-P dbprefix] [-r] [-a]\n", progName);
     FPS "\t%s -M -n cert-name -t trustargs [-d certdir] [-P dbprefix]\n",
 	progName);
-    FPS "\t%s -O -n cert-name [-X] [-d certdir] [-P dbprefix]\n", progName);
+    FPS "\t%s -O -n cert-name [-X] [-d certdir] [-a] [-P dbprefix]\n", progName);
     FPS "\t%s -R -s subj -o cert-request-file [-d certdir] [-P dbprefix] [-p phone] [-a]\n"
 	"\t\t [-7 emailAddrs] [-k key-type-or-id] [-h token-name] [-f pwfile] [-g key-size]\n",
 	progName);
-    FPS "\t%s -V -n cert-name -u usage [-b time] [-e] \n"
+    FPS "\t%s -V -n cert-name -u usage [-b time] [-e] [-a]\n"
 	"\t\t[-X] [-d certdir] [-P dbprefix]\n",
 	progName);
     FPS "Usage:  %s -W [-d certdir] [-f pwfile] [-@newpwfile]\n",
 	progName);
     FPS "\t%s -S -n cert-name -s subj [-c issuer-name | -x]  -t trustargs\n"
 	"\t\t [-k key-type-or-id] [-q key-params] [-h token-name] [-g key-size]\n"
         "\t\t [-m serial-number] [-w warp-months] [-v months-valid]\n"
 	"\t\t [-f pwfile] [-d certdir] [-P dbprefix]\n"
@@ -1239,16 +1253,18 @@ static void LongUsage(char *progName)
 
     FPS "\n");
     FPS "%-15s Print the chain of a certificate\n",
 	"-O");
     FPS "%-20s The nickname of the cert to modify\n",
 	"   -n cert-name");
     FPS "%-20s Cert database directory (default is ~/.netscape)\n",
 	"   -d certdir");
+    FPS "%-20s Input the certificate in ASCII (RFC1113); default is binary\n",
+	"   -a");
     FPS "%-20s Cert & Key database prefix\n",
 	"   -P dbprefix");
     FPS "%-20s force the database to open R/W\n",
 	"   -X");
     FPS "\n");
 
     FPS "%-15s Generate a certificate request (stdout)\n",
 	"-R");
@@ -1302,16 +1318,18 @@ static void LongUsage(char *progName)
     FPS "%-25s C \t SSL Client\n", "");
     FPS "%-25s V \t SSL Server\n", "");
     FPS "%-25s S \t Email signer\n", "");
     FPS "%-25s R \t Email Recipient\n", "");   
     FPS "%-25s O \t OCSP status responder\n", "");   
     FPS "%-25s J \t Object signer\n", "");   
     FPS "%-20s Cert database directory (default is ~/.netscape)\n",
 	"   -d certdir");
+    FPS "%-20s Input the certificate in ASCII (RFC1113); default is binary\n",
+	"   -a");
     FPS "%-20s Cert & Key database prefix\n",
 	"   -P dbprefix");
     FPS "%-20s force the database to open R/W\n",
 	"   -X");
     FPS "\n");
 
     FPS "%-15s Change the key database password\n",
 	"-W");
@@ -2563,17 +2581,18 @@ merge_fail:
     if (certutil.commands[cmd_ListCerts].activated) {
 	rv = ListCerts(certHandle, name, slot,
 	               certutil.options[opt_BinaryDER].activated,
 	               certutil.options[opt_ASCIIForIO].activated, 
                        (outFile) ? outFile : PR_STDOUT, &pwdata);
 	goto shutdown;
     }
     if (certutil.commands[cmd_DumpChain].activated) {
-	rv = DumpChain(certHandle, name);
+	rv = DumpChain(certHandle, name,
+                       certutil.options[opt_ASCIIForIO].activated);
 	goto shutdown;
     }
     /*  XXX needs work  */
     /*  List keys (-K)  */
     if (certutil.commands[cmd_ListKeys].activated) {
 	rv = ListKeys(slot, name, 0 /*keyindex*/, keytype, PR_FALSE /*dopriv*/,
 	              &pwdata);
 	goto shutdown;
@@ -2629,16 +2648,17 @@ merge_fail:
                 }
             }
 	}
 	rv = ValidateCert(certHandle, name, 
 	                  certutil.options[opt_ValidityTime].arg,
 			  certutil.options[opt_Usage].arg,
 			  certutil.options[opt_VerifySig].activated,
 			  certutil.options[opt_DetailedInfo].activated,
+			  certutil.options[opt_ASCIIForIO].activated,
 	                  &pwdata);
 	if (rv != SECSuccess && PR_GetError() == SEC_ERROR_INVALID_ARGS)
             SECU_PrintError(progName, "validation failed");
 	goto shutdown;
     }
 
     /*
      *  Key generation
@@ -2796,16 +2816,17 @@ merge_fail:
 		     NULL,
 		     NULL,
                      nullextnlist,
                      outFile ? outFile : PR_STDOUT);
 	if (rv) 
 	    goto shutdown;
 	privkey->wincx = &pwdata;
 	PR_Close(outFile);
+	outFile = NULL;
 	inFile  = PR_Open(certreqfile, PR_RDONLY, 0);
 	if (!inFile) {
 	    PR_fprintf(PR_STDERR, "Failed to open file \"%s\" (%ld, %ld).\n",
                        certreqfile, PR_GetError(), PR_GetOSError());
 	    rv = SECFailure;
 	    goto shutdown;
 	}
 	outFile = PR_Open(certfile,
@@ -2837,16 +2858,17 @@ merge_fail:
     /* 
      * Adding a cert to the database (or slot)
      */
  
     if (certutil.commands[cmd_CreateAndAddCert].activated) { 
 	PORT_Assert(inFile != PR_STDIN);
 	PR_Close(inFile);
 	PR_Close(outFile);
+	outFile = NULL;
 	inFile = PR_Open(certfile, PR_RDONLY, 0);
 	if (!inFile) {
 	    PR_fprintf(PR_STDERR, "Failed to open file \"%s\" (%ld, %ld).\n",
                        certfile, PR_GetError(), PR_GetOSError());
 	    rv = SECFailure;
 	    goto shutdown;
 	}
     }
@@ -2876,16 +2898,29 @@ shutdown:
 	PK11_FreeSlot(slot);
     }
     if (privkey) {
 	SECKEY_DestroyPrivateKey(privkey);
     }
     if (pubkey) {
 	SECKEY_DestroyPublicKey(pubkey);
     }
+    if (subject) {
+	CERT_DestroyName(subject);
+    }
+    if (name) {
+	PL_strfree(name);
+    }
+    if (outFile) {
+	PR_Close(outFile);
+    }
+    if (pwdata.data && pwdata.source == PW_PLAINTEXT) {
+	/* Allocated by a PL_strdup call in SECU_GetModulePassword. */
+	PL_strfree(pwdata.data);
+    }
 
     /* Open the batch command file.
      *
      * - If -B <command line> option is specified, the contents in the
      * command file will be interpreted as subsequent certutil
      * commands to be executed in the current certutil process
      * context after the current certutil command has been executed.
      * - Each line in the command file consists of the command
@@ -3012,12 +3047,13 @@ shutdown:
 	return 255;
     }
 }
 
 int
 main(int argc, char **argv)
 {
     int rv = certutil_main(argc, argv, PR_TRUE);
+    PL_ArenaFinish();
     PR_Cleanup();
     return rv;
 }
 
diff --git a/security/nss/cmd/lib/SSLerrs.h b/security/nss/cmd/lib/SSLerrs.h
--- a/security/nss/cmd/lib/SSLerrs.h
+++ b/security/nss/cmd/lib/SSLerrs.h
@@ -397,8 +397,11 @@ ER3(SSL_ERROR_DECOMPRESSION_FAILURE,    
 ER3(SSL_ERROR_RENEGOTIATION_NOT_ALLOWED,       (SSL_ERROR_BASE + 112),
 "Renegotiation is not allowed on this SSL socket.")
 
 ER3(SSL_ERROR_UNSAFE_NEGOTIATION,              (SSL_ERROR_BASE + 113),
 "Peer attempted old style (potentially vulnerable) handshake.")
 
 ER3(SSL_ERROR_RX_UNEXPECTED_UNCOMPRESSED_RECORD, (SSL_ERROR_BASE + 114),
 "SSL received an unexpected uncompressed record.")
+
+ER3(SSL_ERROR_WEAK_SERVER_EPHEMERAL_DH_KEY,    (SSL_ERROR_BASE + 115),
+"SSL received a weak ephemeral Diffie-Hellman key in Server Key Exchange handshake message.")
diff --git a/security/nss/cmd/lib/secutil.c b/security/nss/cmd/lib/secutil.c
--- a/security/nss/cmd/lib/secutil.c
+++ b/security/nss/cmd/lib/secutil.c
@@ -4158,8 +4158,44 @@ SECU_SECItemHexStringToBinary(SECItem* s
     }
 
     /* adjust length */
     srcdest->len -= 2;
     srcdest->len /= 2;
     return SECSuccess;
 }
 
+CERTCertificate*
+SECU_FindCertByNicknameOrFilename(CERTCertDBHandle *handle,
+                                  char *name, PRBool ascii,
+                                  void *pwarg)
+{
+    CERTCertificate *the_cert;
+    the_cert = CERT_FindCertByNicknameOrEmailAddr(handle, name);
+    if (the_cert) {
+        return the_cert;
+    }
+    the_cert = PK11_FindCertFromNickname(name, pwarg);
+    if (!the_cert) {
+        /* Don't have a cert with name "name" in the DB. Try to
+         * open a file with such name and get the cert from there.*/
+        SECStatus rv;
+        SECItem item = {0, NULL, 0};
+        PRFileDesc* fd = PR_Open(name, PR_RDONLY, 0777); 
+        if (!fd) {
+            return NULL;
+        }
+        rv = SECU_ReadDERFromFile(&item, fd, ascii);
+        PR_Close(fd);
+        if (rv != SECSuccess || !item.len) {
+            PORT_Free(item.data);
+            return NULL;
+        }
+        the_cert = CERT_NewTempCertificate(handle, &item, 
+                                           NULL     /* nickname */, 
+                                           PR_FALSE /* isPerm */, 
+                                           PR_TRUE  /* copyDER */);
+        PORT_Free(item.data);
+    }
+    return the_cert;
+}
+
+
diff --git a/security/nss/cmd/lib/secutil.h b/security/nss/cmd/lib/secutil.h
--- a/security/nss/cmd/lib/secutil.h
+++ b/security/nss/cmd/lib/secutil.h
@@ -448,12 +448,18 @@ char *SECU_ErrorString(int16 err);
 char *SECU_ErrorStringRaw(int16 err);
 
 void printflags(char *trusts, unsigned int flags);
 
 #if !defined(XP_UNIX) && !defined(XP_OS2)
 extern int ffs(unsigned int i);
 #endif
 
+/* Finds certificate by searching it in the DB or by examinig file
+ * in the local directory. */
+CERTCertificate*
+SECU_FindCertByNicknameOrFilename(CERTCertDBHandle *handle,
+                                  char *name, PRBool ascii,
+                                  void *pwarg);
 #include "secerr.h"
 #include "sslerr.h"
 
 #endif /* _SEC_UTIL_H_ */
diff --git a/security/nss/cmd/pk12util/pk12util.c b/security/nss/cmd/pk12util/pk12util.c
--- a/security/nss/cmd/pk12util/pk12util.c
+++ b/security/nss/cmd/pk12util/pk12util.c
@@ -1129,12 +1129,12 @@ done:
 	PORT_ZFree(slotPw.data, PL_strlen(slotPw.data));
     if (p12FilePw.data != NULL)
 	PORT_ZFree(p12FilePw.data, PL_strlen(p12FilePw.data));
     if (slot) 
     	PK11_FreeSlot(slot);
     if (NSS_Shutdown() != SECSuccess) {
 	pk12uErrno = 1;
     }
+    PL_ArenaFinish();
     PR_Cleanup();
-    PL_ArenaFinish();
     return pk12uErrno;
 }
diff --git a/security/nss/lib/certdb/certdb.c b/security/nss/lib/certdb/certdb.c
--- a/security/nss/lib/certdb/certdb.c
+++ b/security/nss/lib/certdb/certdb.c
@@ -34,17 +34,17 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /*
  * Certificate handling code
  *
- * $Id: certdb.c,v 1.104 2010/04/25 00:44:55 nelson%bolyard.com Exp $
+ * $Id: certdb.c,v 1.104.2.2 2010/09/02 00:52:02 wtc%google.com Exp $
  */
 
 #include "nssilock.h"
 #include "prmon.h"
 #include "prtime.h"
 #include "cert.h"
 #include "certi.h"
 #include "secder.h"
@@ -1410,16 +1410,25 @@ sec_lower_string(char *s)
     while ( *s ) {
 	*s = PORT_Tolower(*s);
 	s++;
     }
     
     return;
 }
 
+static PRBool
+cert_IsIPAddr(const char *hn)
+{
+    PRBool            isIPaddr       = PR_FALSE;
+    PRNetAddr         netAddr;
+    isIPaddr = (PR_SUCCESS == PR_StringToNetAddr(hn, &netAddr));
+    return isIPaddr;
+}
+
 /*
 ** Add a domain name to the list of names that the user has explicitly
 ** allowed (despite cert name mismatches) for use with a server cert.
 */
 SECStatus
 CERT_AddOKDomainName(CERTCertificate *cert, const char *hn)
 {
     CERTOKDomainName *domainOK;
@@ -1875,17 +1884,27 @@ CERT_VerifyCertName(CERTCertificate *cer
     ** be used as the cert's identity.
     */
     rv = cert_VerifySubjectAltName(cert, hn);
     if (rv == SECSuccess || PORT_GetError() != SEC_ERROR_EXTENSION_NOT_FOUND)
     	return rv;
 
     cn = CERT_GetCommonName(&cert->subject);
     if ( cn ) {
-	rv = cert_TestHostName(cn, hn);
+        PRBool isIPaddr = cert_IsIPAddr(hn);
+        if (isIPaddr) {
+            if (PORT_Strcasecmp(hn, cn) == 0) {
+                rv =  SECSuccess;
+            } else {
+                PORT_SetError(SSL_ERROR_BAD_CERT_DOMAIN);
+                rv = SECFailure;
+            }
+        } else {
+            rv = cert_TestHostName(cn, hn);
+        }
 	PORT_Free(cn);
     } else 
 	PORT_SetError(SSL_ERROR_BAD_CERT_DOMAIN);
     return rv;
 }
 
 PRBool
 CERT_CompareCerts(CERTCertificate *c1, CERTCertificate *c2)
@@ -2105,17 +2124,17 @@ CERT_MakeCANickname(CERTCertificate *cer
 	    count++;
 	}
     }
 loser:
     if ( nickname ) {
 	PORT_Free(nickname);
     }
 
-    nickname = "";
+    nickname = NULL;
     
 done:
     if ( firstname ) {
 	PORT_Free(firstname);
     }
     if ( org ) {
 	PORT_Free(org);
     }
diff --git a/security/nss/lib/certhigh/certhtml.c b/security/nss/lib/certhigh/certhtml.c
--- a/security/nss/lib/certhigh/certhtml.c
+++ b/security/nss/lib/certhigh/certhtml.c
@@ -32,17 +32,17 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /*
  * certhtml.c --- convert a cert to html
  *
- * $Id: certhtml.c,v 1.8 2007/05/15 23:14:25 julien.pierre.bugs%sun.com Exp $
+ * $Id: certhtml.c,v 1.8.66.1 2010/08/28 19:49:28 nelson%bolyard.com Exp $
  */
 
 #include "seccomon.h"
 #include "secitem.h"
 #include "sechash.h"
 #include "cert.h"
 #include "keyhi.h"
 #include "secder.h"
@@ -121,51 +121,69 @@ char *CERT_FormatName (CERTName *name)
     /* Loop over name components and gather the interesting ones */
     rdns = name->rdns;
     while ((rdn = *rdns++) != 0) {
 	avas = rdn->avas;
 	while ((ava = *avas++) != 0) {
 	    tag = CERT_GetAVATag(ava);
 	    switch(tag) {
 	      case SEC_OID_AVA_COMMON_NAME:
+		if (cn) {
+			break;
+		}
 		cn = CERT_DecodeAVAValue(&ava->value);
 		if (!cn) {
  			goto loser;
 		}
 		len += cn->len;
 		break;
 	      case SEC_OID_AVA_COUNTRY_NAME:
+		if (country) {
+			break;
+		}
 		country = CERT_DecodeAVAValue(&ava->value);
 		if (!country) {
  			goto loser;
 		}
 		len += country->len;
 		break;
 	      case SEC_OID_AVA_LOCALITY:
+		if (loc) {
+			break;
+		}
 		loc = CERT_DecodeAVAValue(&ava->value);
 		if (!loc) {
  			goto loser;
 		}
 		len += loc->len;
 		break;
 	      case SEC_OID_AVA_STATE_OR_PROVINCE:
+		if (state) {
+			break;
+		}
 		state = CERT_DecodeAVAValue(&ava->value);
 		if (!state) {
  			goto loser;
 		}
 		len += state->len;
 		break;
 	      case SEC_OID_AVA_ORGANIZATION_NAME:
+		if (org) {
+			break;
+		}
 		org = CERT_DecodeAVAValue(&ava->value);
 		if (!org) {
  			goto loser;
 		}
 		len += org->len;
 		break;
 	      case SEC_OID_AVA_DN_QUALIFIER:
+		if (dq) {
+			break;
+		}
 		dq = CERT_DecodeAVAValue(&ava->value);
 		if (!dq) {
  			goto loser;
 		}
 		len += dq->len;
 		break;
 	      case SEC_OID_AVA_ORGANIZATIONAL_UNIT_NAME:
 		if (ou_count < MAX_OUS) {
@@ -182,16 +200,19 @@ char *CERT_FormatName (CERTName *name)
 			if (!dc[dc_count]) {
 				goto loser;
 			}
 			len += dc[dc_count++]->len;
 		}
 		break;
 	      case SEC_OID_PKCS9_EMAIL_ADDRESS:
 	      case SEC_OID_RFC1274_MAIL:
+		if (email) {
+			break;
+		}
 		email = CERT_DecodeAVAValue(&ava->value);
 		if (!email) {
 			goto loser;
 		}
 		len += email->len;
 		break;
 	      default:
 		break;
@@ -200,17 +221,17 @@ char *CERT_FormatName (CERTName *name)
     }
 
     /* XXX - add some for formatting */
     len += 128;
 
     /* allocate buffer */
     buf = (char *)PORT_Alloc(len);
     if ( !buf ) {
-	return(0);
+	goto loser;
     }
 
     tmpbuf = buf;
     
     if ( cn ) {
 	PORT_Memcpy(tmpbuf, cn->data, cn->len);
 	tmpbuf += cn->len;
 	PORT_Memcpy(tmpbuf, BREAK, BREAKLEN);
diff --git a/security/nss/lib/certhigh/certreq.c b/security/nss/lib/certhigh/certreq.c
--- a/security/nss/lib/certhigh/certreq.c
+++ b/security/nss/lib/certhigh/certreq.c
@@ -89,45 +89,49 @@ CERT_CreateCertificate(unsigned long ser
     arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);
     
     if ( !arena ) {
 	return(0);
     }
 
     c = (CERTCertificate *)PORT_ArenaZAlloc(arena, sizeof(CERTCertificate));
     
-    if (c) {
-	c->referenceCount = 1;
-	c->arena = arena;
+    if (!c) {
+	PORT_FreeArena(arena, PR_FALSE);
+	return 0;
+    }
 
-	/*
-	 * Default is a plain version 1.
-	 * If extensions are added, it will get changed as appropriate.
-	 */
-	rv = DER_SetUInteger(arena, &c->version, SEC_CERTIFICATE_VERSION_1);
-	if (rv) goto loser;
+    c->referenceCount = 1;
+    c->arena = arena;
 
-	rv = DER_SetUInteger(arena, &c->serialNumber, serialNumber);
-	if (rv) goto loser;
+    /*
+     * Default is a plain version 1.
+     * If extensions are added, it will get changed as appropriate.
+     */
+    rv = DER_SetUInteger(arena, &c->version, SEC_CERTIFICATE_VERSION_1);
+    if (rv) goto loser;
 
-	rv = CERT_CopyName(arena, &c->issuer, issuer);
-	if (rv) goto loser;
+    rv = DER_SetUInteger(arena, &c->serialNumber, serialNumber);
+    if (rv) goto loser;
 
-	rv = CERT_CopyValidity(arena, &c->validity, validity);
-	if (rv) goto loser;
+    rv = CERT_CopyName(arena, &c->issuer, issuer);
+    if (rv) goto loser;
 
-	rv = CERT_CopyName(arena, &c->subject, &req->subject);
-	if (rv) goto loser;
-	rv = SECKEY_CopySubjectPublicKeyInfo(arena, &c->subjectPublicKeyInfo,
-					  &req->subjectPublicKeyInfo);
-	if (rv) goto loser;
-    }
+    rv = CERT_CopyValidity(arena, &c->validity, validity);
+    if (rv) goto loser;
+
+    rv = CERT_CopyName(arena, &c->subject, &req->subject);
+    if (rv) goto loser;
+    rv = SECKEY_CopySubjectPublicKeyInfo(arena, &c->subjectPublicKeyInfo,
+					 &req->subjectPublicKeyInfo);
+    if (rv) goto loser;
+
     return c;
 
-  loser:
+ loser:
     CERT_DestroyCertificate(c);
     return 0;
 }
 
 /************************************************************************/
 /* It's clear from the comments that the original author of this 
  * function expected the template for certificate requests to treat
  * the attributes as a SET OF ANY.  This function expected to be 
diff --git a/security/nss/lib/ckfw/builtins/certdata.c b/security/nss/lib/ckfw/builtins/certdata.c
--- a/security/nss/lib/ckfw/builtins/certdata.c
+++ b/security/nss/lib/ckfw/builtins/certdata.c
@@ -30,17 +30,17 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 #ifdef DEBUG
-static const char CVS_ID[] = "@(#) $RCSfile: certdata.c,v $ $Revision: 1.67 $ $Date: 2010/04/08 14:28:58 $""; @(#) $RCSfile: certdata.c,v $ $Revision: 1.67 $ $Date: 2010/04/08 14:28:58 $";
+static const char CVS_ID[] = "@(#) $RCSfile: certdata.c,v $ $Revision: 1.67.2.1 $ $Date: 2010/08/27 15:46:44 $""; @(#) $RCSfile: certdata.c,v $ $Revision: 1.67.2.1 $ $Date: 2010/08/27 15:46:44 $";
 #endif /* DEBUG */
 
 #ifndef BUILTINS_H
 #include "builtins.h"
 #endif /* BUILTINS_H */
 
 static const CK_BBOOL ck_false = CK_FALSE;
 static const CK_BBOOL ck_true = CK_TRUE;
@@ -955,25 +955,55 @@ static const CK_ATTRIBUTE_TYPE nss_built
  CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
 };
 static const CK_ATTRIBUTE_TYPE nss_builtins_types_300 [] = {
  CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
 };
 static const CK_ATTRIBUTE_TYPE nss_builtins_types_301 [] = {
  CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
 };
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_302 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
+};
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_303 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
+};
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_304 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
+};
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_305 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
+};
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_306 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
+};
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_307 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
+};
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_308 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
+};
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_309 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
+};
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_310 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
+};
+static const CK_ATTRIBUTE_TYPE nss_builtins_types_311 [] = {
+ CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
+};
 #ifdef DEBUG
 static const NSSItem nss_builtins_items_0 [] = {
   { (void *)&cko_data, (PRUint32)sizeof(CK_OBJECT_CLASS) },
   { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
   { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
   { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
   { (void *)"CVS ID", (PRUint32)7 },
   { (void *)"NSS", (PRUint32)4 },
-  { (void *)"@(#) $RCSfile: certdata.c,v $ $Revision: 1.67 $ $Date: 2010/04/08 14:28:58 $""; @(#) $RCSfile: certdata.c,v $ $Revision: 1.67 $ $Date: 2010/04/08 14:28:58 $", (PRUint32)160 }
+  { (void *)"@(#) $RCSfile: certdata.c,v $ $Revision: 1.67.2.1 $ $Date: 2010/08/27 15:46:44 $""; @(#) $RCSfile: certdata.c,v $ $Revision: 1.67.2.1 $ $Date: 2010/08/27 15:46:44 $", (PRUint32)160 }
 };
 #endif /* DEBUG */
 static const NSSItem nss_builtins_items_1 [] = {
   { (void *)&cko_netscape_builtin_root_list, (PRUint32)sizeof(CK_OBJECT_CLASS) },
   { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
   { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
   { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
   { (void *)"Mozilla Builtin Roots", (PRUint32)22 }
@@ -20298,16 +20328,547 @@ static const NSSItem nss_builtins_items_
 , (PRUint32)70 },
   { (void *)"\002\010\141\215\307\206\073\001\202\005"
 , (PRUint32)10 },
   { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
   { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
   { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
   { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) }
 };
+static const NSSItem nss_builtins_items_302 [] = {
+  { (void *)&cko_certificate, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"Verisign Class 1 Public Primary Certification Authority", (PRUint32)56 },
+  { (void *)&ckc_x_509, (PRUint32)sizeof(CK_CERTIFICATE_TYPE) },
+  { (void *)"\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061"
+"\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151"
+"\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004"
+"\013\023\056\103\154\141\163\163\040\061\040\120\165\142\154\151"
+"\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146"
+"\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164"
+"\171"
+, (PRUint32)97 },
+  { (void *)"0", (PRUint32)2 },
+  { (void *)"\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061"
+"\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151"
+"\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004"
+"\013\023\056\103\154\141\163\163\040\061\040\120\165\142\154\151"
+"\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146"
+"\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164"
+"\171"
+, (PRUint32)97 },
+  { (void *)"\002\020\077\151\036\201\234\360\232\112\363\163\377\271\110\242"
+"\344\335"
+, (PRUint32)18 },
+  { (void *)"\060\202\002\074\060\202\001\245\002\020\077\151\036\201\234\360"
+"\232\112\363\163\377\271\110\242\344\335\060\015\006\011\052\206"
+"\110\206\367\015\001\001\005\005\000\060\137\061\013\060\011\006"
+"\003\125\004\006\023\002\125\123\061\027\060\025\006\003\125\004"
+"\012\023\016\126\145\162\151\123\151\147\156\054\040\111\156\143"
+"\056\061\067\060\065\006\003\125\004\013\023\056\103\154\141\163"
+"\163\040\061\040\120\165\142\154\151\143\040\120\162\151\155\141"
+"\162\171\040\103\145\162\164\151\146\151\143\141\164\151\157\156"
+"\040\101\165\164\150\157\162\151\164\171\060\036\027\015\071\066"
+"\060\061\062\071\060\060\060\060\060\060\132\027\015\062\070\060"
+"\070\060\062\062\063\065\071\065\071\132\060\137\061\013\060\011"
+"\006\003\125\004\006\023\002\125\123\061\027\060\025\006\003\125"
+"\004\012\023\016\126\145\162\151\123\151\147\156\054\040\111\156"
+"\143\056\061\067\060\065\006\003\125\004\013\023\056\103\154\141"
+"\163\163\040\061\040\120\165\142\154\151\143\040\120\162\151\155"
+"\141\162\171\040\103\145\162\164\151\146\151\143\141\164\151\157"
+"\156\040\101\165\164\150\157\162\151\164\171\060\201\237\060\015"
+"\006\011\052\206\110\206\367\015\001\001\001\005\000\003\201\215"
+"\000\060\201\211\002\201\201\000\345\031\277\155\243\126\141\055"
+"\231\110\161\366\147\336\271\215\353\267\236\206\200\012\221\016"
+"\372\070\045\257\106\210\202\345\163\250\240\233\044\135\015\037"
+"\314\145\156\014\260\320\126\204\030\207\232\006\233\020\241\163"
+"\337\264\130\071\153\156\301\366\025\325\250\250\077\252\022\006"
+"\215\061\254\177\260\064\327\217\064\147\210\011\315\024\021\342"
+"\116\105\126\151\037\170\002\200\332\334\107\221\051\273\066\311"
+"\143\134\305\340\327\055\207\173\241\267\062\260\173\060\272\052"
+"\057\061\252\356\243\147\332\333\002\003\001\000\001\060\015\006"
+"\011\052\206\110\206\367\015\001\001\005\005\000\003\201\201\000"
+"\130\025\051\071\074\167\243\332\134\045\003\174\140\372\356\011"
+"\231\074\047\020\160\310\014\011\346\263\207\317\012\342\030\226"
+"\065\142\314\277\233\047\171\211\137\311\304\011\364\316\265\035"
+"\337\052\275\345\333\206\234\150\045\345\060\174\266\211\025\376"
+"\147\321\255\341\120\254\074\174\142\113\217\272\204\327\022\025"
+"\033\037\312\135\017\301\122\224\052\021\231\332\173\317\014\066"
+"\023\325\065\334\020\031\131\352\224\301\000\277\165\217\331\372"
+"\375\166\004\333\142\273\220\152\003\331\106\065\331\370\174\133"
+, (PRUint32)576 }
+};
+static const NSSItem nss_builtins_items_303 [] = {
+  { (void *)&cko_netscape_trust, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"Verisign Class 1 Public Primary Certification Authority", (PRUint32)56 },
+  { (void *)"\316\152\144\243\011\344\057\273\331\205\034\105\076\144\011\352"
+"\350\175\140\361"
+, (PRUint32)20 },
+  { (void *)"\206\254\336\053\305\155\303\331\214\050\210\323\215\026\023\036"
+, (PRUint32)16 },
+  { (void *)"\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061"
+"\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151"
+"\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004"
+"\013\023\056\103\154\141\163\163\040\061\040\120\165\142\154\151"
+"\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146"
+"\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164"
+"\171"
+, (PRUint32)97 },
+  { (void *)"\002\020\077\151\036\201\234\360\232\112\363\163\377\271\110\242"
+"\344\335"
+, (PRUint32)18 },
+  { (void *)&ckt_netscape_trust_unknown, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trust_unknown, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) }
+};
+static const NSSItem nss_builtins_items_304 [] = {
+  { (void *)&cko_certificate, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"Verisign Class 3 Public Primary Certification Authority", (PRUint32)56 },
+  { (void *)&ckc_x_509, (PRUint32)sizeof(CK_CERTIFICATE_TYPE) },
+  { (void *)"\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061"
+"\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151"
+"\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004"
+"\013\023\056\103\154\141\163\163\040\063\040\120\165\142\154\151"
+"\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146"
+"\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164"
+"\171"
+, (PRUint32)97 },
+  { (void *)"0", (PRUint32)2 },
+  { (void *)"\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061"
+"\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151"
+"\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004"
+"\013\023\056\103\154\141\163\163\040\063\040\120\165\142\154\151"
+"\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146"
+"\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164"
+"\171"
+, (PRUint32)97 },
+  { (void *)"\002\020\074\221\061\313\037\366\320\033\016\232\270\320\104\277"
+"\022\276"
+, (PRUint32)18 },
+  { (void *)"\060\202\002\074\060\202\001\245\002\020\074\221\061\313\037\366"
+"\320\033\016\232\270\320\104\277\022\276\060\015\006\011\052\206"
+"\110\206\367\015\001\001\005\005\000\060\137\061\013\060\011\006"
+"\003\125\004\006\023\002\125\123\061\027\060\025\006\003\125\004"
+"\012\023\016\126\145\162\151\123\151\147\156\054\040\111\156\143"
+"\056\061\067\060\065\006\003\125\004\013\023\056\103\154\141\163"
+"\163\040\063\040\120\165\142\154\151\143\040\120\162\151\155\141"
+"\162\171\040\103\145\162\164\151\146\151\143\141\164\151\157\156"
+"\040\101\165\164\150\157\162\151\164\171\060\036\027\015\071\066"
+"\060\061\062\071\060\060\060\060\060\060\132\027\015\062\070\060"
+"\070\060\062\062\063\065\071\065\071\132\060\137\061\013\060\011"
+"\006\003\125\004\006\023\002\125\123\061\027\060\025\006\003\125"
+"\004\012\023\016\126\145\162\151\123\151\147\156\054\040\111\156"
+"\143\056\061\067\060\065\006\003\125\004\013\023\056\103\154\141"
+"\163\163\040\063\040\120\165\142\154\151\143\040\120\162\151\155"
+"\141\162\171\040\103\145\162\164\151\146\151\143\141\164\151\157"
+"\156\040\101\165\164\150\157\162\151\164\171\060\201\237\060\015"
+"\006\011\052\206\110\206\367\015\001\001\001\005\000\003\201\215"
+"\000\060\201\211\002\201\201\000\311\134\131\236\362\033\212\001"
+"\024\264\020\337\004\100\333\343\127\257\152\105\100\217\204\014"
+"\013\321\063\331\331\021\317\356\002\130\037\045\367\052\250\104"
+"\005\252\354\003\037\170\177\236\223\271\232\000\252\043\175\326"
+"\254\205\242\143\105\307\162\047\314\364\114\306\165\161\322\071"
+"\357\117\102\360\165\337\012\220\306\216\040\157\230\017\370\254"
+"\043\137\160\051\066\244\311\206\347\261\232\040\313\123\245\205"
+"\347\075\276\175\232\376\044\105\063\334\166\025\355\017\242\161"
+"\144\114\145\056\201\150\105\247\002\003\001\000\001\060\015\006"
+"\011\052\206\110\206\367\015\001\001\005\005\000\003\201\201\000"
+"\020\162\122\251\005\024\031\062\010\101\360\305\153\012\314\176"
+"\017\041\031\315\344\147\334\137\251\033\346\312\350\163\235\042"
+"\330\230\156\163\003\141\221\305\174\260\105\100\156\104\235\215"
+"\260\261\226\164\141\055\015\251\105\322\244\222\052\326\232\165"
+"\227\156\077\123\375\105\231\140\035\250\053\114\371\136\247\011"
+"\330\165\060\327\322\145\140\075\147\326\110\125\165\151\077\221"
+"\365\110\013\107\151\042\151\202\226\276\311\310\070\206\112\172"
+"\054\163\031\110\151\116\153\174\145\277\017\374\160\316\210\220"
+, (PRUint32)576 }
+};
+static const NSSItem nss_builtins_items_305 [] = {
+  { (void *)&cko_netscape_trust, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"Verisign Class 3 Public Primary Certification Authority", (PRUint32)56 },
+  { (void *)"\241\333\143\223\221\157\027\344\030\125\011\100\004\025\307\002"
+"\100\260\256\153"
+, (PRUint32)20 },
+  { (void *)"\357\132\361\063\357\361\315\273\121\002\356\022\024\113\226\304"
+, (PRUint32)16 },
+  { (void *)"\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061"
+"\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151"
+"\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004"
+"\013\023\056\103\154\141\163\163\040\063\040\120\165\142\154\151"
+"\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146"
+"\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164"
+"\171"
+, (PRUint32)97 },
+  { (void *)"\002\020\074\221\061\313\037\366\320\033\016\232\270\320\104\277"
+"\022\276"
+, (PRUint32)18 },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) }
+};
+static const NSSItem nss_builtins_items_306 [] = {
+  { (void *)&cko_certificate, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"Microsec e-Szigno Root CA 2009", (PRUint32)31 },
+  { (void *)&ckc_x_509, (PRUint32)sizeof(CK_CERTIFICATE_TYPE) },
+  { (void *)"\060\201\202\061\013\060\011\006\003\125\004\006\023\002\110\125"
+"\061\021\060\017\006\003\125\004\007\014\010\102\165\144\141\160"
+"\145\163\164\061\026\060\024\006\003\125\004\012\014\015\115\151"
+"\143\162\157\163\145\143\040\114\164\144\056\061\047\060\045\006"
+"\003\125\004\003\014\036\115\151\143\162\157\163\145\143\040\145"
+"\055\123\172\151\147\156\157\040\122\157\157\164\040\103\101\040"
+"\062\060\060\071\061\037\060\035\006\011\052\206\110\206\367\015"
+"\001\011\001\026\020\151\156\146\157\100\145\055\163\172\151\147"
+"\156\157\056\150\165"
+, (PRUint32)133 },
+  { (void *)"0", (PRUint32)2 },
+  { (void *)"\060\201\202\061\013\060\011\006\003\125\004\006\023\002\110\125"
+"\061\021\060\017\006\003\125\004\007\014\010\102\165\144\141\160"
+"\145\163\164\061\026\060\024\006\003\125\004\012\014\015\115\151"
+"\143\162\157\163\145\143\040\114\164\144\056\061\047\060\045\006"
+"\003\125\004\003\014\036\115\151\143\162\157\163\145\143\040\145"
+"\055\123\172\151\147\156\157\040\122\157\157\164\040\103\101\040"
+"\062\060\060\071\061\037\060\035\006\011\052\206\110\206\367\015"
+"\001\011\001\026\020\151\156\146\157\100\145\055\163\172\151\147"
+"\156\157\056\150\165"
+, (PRUint32)133 },
+  { (void *)"\002\011\000\302\176\103\004\116\107\077\031"
+, (PRUint32)11 },
+  { (void *)"\060\202\004\012\060\202\002\362\240\003\002\001\002\002\011\000"
+"\302\176\103\004\116\107\077\031\060\015\006\011\052\206\110\206"
+"\367\015\001\001\013\005\000\060\201\202\061\013\060\011\006\003"
+"\125\004\006\023\002\110\125\061\021\060\017\006\003\125\004\007"
+"\014\010\102\165\144\141\160\145\163\164\061\026\060\024\006\003"
+"\125\004\012\014\015\115\151\143\162\157\163\145\143\040\114\164"
+"\144\056\061\047\060\045\006\003\125\004\003\014\036\115\151\143"
+"\162\157\163\145\143\040\145\055\123\172\151\147\156\157\040\122"
+"\157\157\164\040\103\101\040\062\060\060\071\061\037\060\035\006"
+"\011\052\206\110\206\367\015\001\011\001\026\020\151\156\146\157"
+"\100\145\055\163\172\151\147\156\157\056\150\165\060\036\027\015"
+"\060\071\060\066\061\066\061\061\063\060\061\070\132\027\015\062"
+"\071\061\062\063\060\061\061\063\060\061\070\132\060\201\202\061"
+"\013\060\011\006\003\125\004\006\023\002\110\125\061\021\060\017"
+"\006\003\125\004\007\014\010\102\165\144\141\160\145\163\164\061"
+"\026\060\024\006\003\125\004\012\014\015\115\151\143\162\157\163"
+"\145\143\040\114\164\144\056\061\047\060\045\006\003\125\004\003"
+"\014\036\115\151\143\162\157\163\145\143\040\145\055\123\172\151"
+"\147\156\157\040\122\157\157\164\040\103\101\040\062\060\060\071"
+"\061\037\060\035\006\011\052\206\110\206\367\015\001\011\001\026"
+"\020\151\156\146\157\100\145\055\163\172\151\147\156\157\056\150"
+"\165\060\202\001\042\060\015\006\011\052\206\110\206\367\015\001"
+"\001\001\005\000\003\202\001\017\000\060\202\001\012\002\202\001"
+"\001\000\351\370\217\363\143\255\332\206\330\247\340\102\373\317"
+"\221\336\246\046\370\231\245\143\160\255\233\256\312\063\100\175"
+"\155\226\156\241\016\104\356\341\023\235\224\102\122\232\275\165"
+"\205\164\054\250\016\035\223\266\030\267\214\054\250\317\373\134"
+"\161\271\332\354\376\350\176\217\344\057\035\262\250\165\207\330"
+"\267\241\345\073\317\231\112\106\320\203\031\175\300\241\022\034"
+"\225\155\112\364\330\307\245\115\063\056\205\071\100\165\176\024"
+"\174\200\022\230\120\307\101\147\270\240\200\141\124\246\154\116"
+"\037\340\235\016\007\351\311\272\063\347\376\300\125\050\054\002"
+"\200\247\031\365\236\334\125\123\003\227\173\007\110\377\231\373"
+"\067\212\044\304\131\314\120\020\143\216\252\251\032\260\204\032"
+"\206\371\137\273\261\120\156\244\321\012\314\325\161\176\037\247"
+"\033\174\365\123\156\042\137\313\053\346\324\174\135\256\326\302"
+"\306\114\345\005\001\331\355\127\374\301\043\171\374\372\310\044"
+"\203\225\363\265\152\121\001\320\167\326\351\022\241\371\032\203"
+"\373\202\033\271\260\227\364\166\006\063\103\111\240\377\013\265"
+"\372\265\002\003\001\000\001\243\201\200\060\176\060\017\006\003"
+"\125\035\023\001\001\377\004\005\060\003\001\001\377\060\016\006"
+"\003\125\035\017\001\001\377\004\004\003\002\001\006\060\035\006"
+"\003\125\035\016\004\026\004\024\313\017\306\337\102\103\314\075"
+"\313\265\110\043\241\032\172\246\052\273\064\150\060\037\006\003"
+"\125\035\043\004\030\060\026\200\024\313\017\306\337\102\103\314"
+"\075\313\265\110\043\241\032\172\246\052\273\064\150\060\033\006"
+"\003\125\035\021\004\024\060\022\201\020\151\156\146\157\100\145"
+"\055\163\172\151\147\156\157\056\150\165\060\015\006\011\052\206"
+"\110\206\367\015\001\001\013\005\000\003\202\001\001\000\311\321"
+"\016\136\056\325\314\263\174\076\313\374\075\377\015\050\225\223"
+"\004\310\277\332\315\171\270\103\220\360\244\276\357\362\357\041"
+"\230\274\324\324\135\006\366\356\102\354\060\154\240\252\251\312"
+"\361\257\212\372\077\013\163\152\076\352\056\100\176\037\256\124"
+"\141\171\353\056\010\067\327\043\363\214\237\276\035\261\341\244"
+"\165\333\240\342\124\024\261\272\034\051\244\030\366\022\272\242"
+"\024\024\343\061\065\310\100\377\267\340\005\166\127\301\034\131"
+"\362\370\277\344\355\045\142\134\204\360\176\176\037\263\276\371"
+"\267\041\021\314\003\001\126\160\247\020\222\036\033\064\201\036"
+"\255\234\032\303\004\074\355\002\141\326\036\006\363\137\072\207"
+"\362\053\361\105\207\345\075\254\321\307\127\204\275\153\256\334"
+"\330\371\266\033\142\160\013\075\066\311\102\362\062\327\172\141"
+"\346\322\333\075\317\310\251\311\233\334\333\130\104\327\157\070"
+"\257\177\170\323\243\255\032\165\272\034\301\066\174\217\036\155"
+"\034\303\165\106\256\065\005\246\366\134\075\041\356\126\360\311"
+"\202\042\055\172\124\253\160\303\175\042\145\202\160\226"
+, (PRUint32)1038 }
+};
+static const NSSItem nss_builtins_items_307 [] = {
+  { (void *)&cko_netscape_trust, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"Microsec e-Szigno Root CA 2009", (PRUint32)31 },
+  { (void *)"\211\337\164\376\134\364\017\112\200\371\343\067\175\124\332\221"
+"\341\001\061\216"
+, (PRUint32)20 },
+  { (void *)"\370\111\364\003\274\104\055\203\276\110\151\175\051\144\374\261"
+, (PRUint32)16 },
+  { (void *)"\060\201\202\061\013\060\011\006\003\125\004\006\023\002\110\125"
+"\061\021\060\017\006\003\125\004\007\014\010\102\165\144\141\160"
+"\145\163\164\061\026\060\024\006\003\125\004\012\014\015\115\151"
+"\143\162\157\163\145\143\040\114\164\144\056\061\047\060\045\006"
+"\003\125\004\003\014\036\115\151\143\162\157\163\145\143\040\145"
+"\055\123\172\151\147\156\157\040\122\157\157\164\040\103\101\040"
+"\062\060\060\071\061\037\060\035\006\011\052\206\110\206\367\015"
+"\001\011\001\026\020\151\156\146\157\100\145\055\163\172\151\147"
+"\156\157\056\150\165"
+, (PRUint32)133 },
+  { (void *)"\002\011\000\302\176\103\004\116\107\077\031"
+, (PRUint32)11 },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) }
+};
+static const NSSItem nss_builtins_items_308 [] = {
+  { (void *)&cko_certificate, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"E-Guven Kok Elektronik Sertifika Hizmet Saglayicisi", (PRUint32)52 },
+  { (void *)&ckc_x_509, (PRUint32)sizeof(CK_CERTIFICATE_TYPE) },
+  { (void *)"\060\165\061\013\060\011\006\003\125\004\006\023\002\124\122\061"
+"\050\060\046\006\003\125\004\012\023\037\105\154\145\153\164\162"
+"\157\156\151\153\040\102\151\154\147\151\040\107\165\166\145\156"
+"\154\151\147\151\040\101\056\123\056\061\074\060\072\006\003\125"
+"\004\003\023\063\145\055\107\165\166\145\156\040\113\157\153\040"
+"\105\154\145\153\164\162\157\156\151\153\040\123\145\162\164\151"
+"\146\151\153\141\040\110\151\172\155\145\164\040\123\141\147\154"
+"\141\171\151\143\151\163\151"
+, (PRUint32)119 },
+  { (void *)"0", (PRUint32)2 },
+  { (void *)"\060\165\061\013\060\011\006\003\125\004\006\023\002\124\122\061"
+"\050\060\046\006\003\125\004\012\023\037\105\154\145\153\164\162"
+"\157\156\151\153\040\102\151\154\147\151\040\107\165\166\145\156"
+"\154\151\147\151\040\101\056\123\056\061\074\060\072\006\003\125"
+"\004\003\023\063\145\055\107\165\166\145\156\040\113\157\153\040"
+"\105\154\145\153\164\162\157\156\151\153\040\123\145\162\164\151"
+"\146\151\153\141\040\110\151\172\155\145\164\040\123\141\147\154"
+"\141\171\151\143\151\163\151"
+, (PRUint32)119 },
+  { (void *)"\002\020\104\231\215\074\300\003\047\275\234\166\225\271\352\333"
+"\254\265"
+, (PRUint32)18 },
+  { (void *)"\060\202\003\266\060\202\002\236\240\003\002\001\002\002\020\104"
+"\231\215\074\300\003\047\275\234\166\225\271\352\333\254\265\060"
+"\015\006\011\052\206\110\206\367\015\001\001\005\005\000\060\165"
+"\061\013\060\011\006\003\125\004\006\023\002\124\122\061\050\060"
+"\046\006\003\125\004\012\023\037\105\154\145\153\164\162\157\156"
+"\151\153\040\102\151\154\147\151\040\107\165\166\145\156\154\151"
+"\147\151\040\101\056\123\056\061\074\060\072\006\003\125\004\003"
+"\023\063\145\055\107\165\166\145\156\040\113\157\153\040\105\154"
+"\145\153\164\162\157\156\151\153\040\123\145\162\164\151\146\151"
+"\153\141\040\110\151\172\155\145\164\040\123\141\147\154\141\171"
+"\151\143\151\163\151\060\036\027\015\060\067\060\061\060\064\061"
+"\061\063\062\064\070\132\027\015\061\067\060\061\060\064\061\061"
+"\063\062\064\070\132\060\165\061\013\060\011\006\003\125\004\006"
+"\023\002\124\122\061\050\060\046\006\003\125\004\012\023\037\105"
+"\154\145\153\164\162\157\156\151\153\040\102\151\154\147\151\040"
+"\107\165\166\145\156\154\151\147\151\040\101\056\123\056\061\074"
+"\060\072\006\003\125\004\003\023\063\145\055\107\165\166\145\156"
+"\040\113\157\153\040\105\154\145\153\164\162\157\156\151\153\040"
+"\123\145\162\164\151\146\151\153\141\040\110\151\172\155\145\164"
+"\040\123\141\147\154\141\171\151\143\151\163\151\060\202\001\042"
+"\060\015\006\011\052\206\110\206\367\015\001\001\001\005\000\003"
+"\202\001\017\000\060\202\001\012\002\202\001\001\000\303\022\040"
+"\236\260\136\000\145\215\116\106\273\200\134\351\054\006\227\325"
+"\363\162\311\160\271\347\113\145\200\301\113\276\176\074\327\124"
+"\061\224\336\325\022\272\123\026\002\352\130\143\357\133\330\363"
+"\355\052\032\252\161\110\243\334\020\055\137\137\353\134\113\234"
+"\226\010\102\045\050\021\314\212\132\142\001\120\325\353\011\123"
+"\057\370\303\217\376\263\374\375\235\242\343\137\175\276\355\013"
+"\340\140\353\151\354\063\355\330\215\373\022\111\203\000\311\213"
+"\227\214\073\163\052\062\263\022\367\271\115\362\364\115\155\307"
+"\346\326\046\067\010\362\331\375\153\134\243\345\110\134\130\274"
+"\102\276\003\132\201\272\034\065\014\000\323\365\043\176\161\060"
+"\010\046\070\334\045\021\107\055\363\272\043\020\245\277\274\002"
+"\367\103\136\307\376\260\067\120\231\173\017\223\316\346\103\054"
+"\303\176\015\362\034\103\146\140\313\141\061\107\207\243\117\256"
+"\275\126\154\114\274\274\370\005\312\144\364\351\064\241\054\265"
+"\163\341\302\076\350\310\311\064\045\010\134\363\355\246\307\224"
+"\237\255\210\103\045\327\341\071\140\376\254\071\131\002\003\001"
+"\000\001\243\102\060\100\060\016\006\003\125\035\017\001\001\377"
+"\004\004\003\002\001\006\060\017\006\003\125\035\023\001\001\377"
+"\004\005\060\003\001\001\377\060\035\006\003\125\035\016\004\026"
+"\004\024\237\356\104\263\224\325\372\221\117\056\331\125\232\004"
+"\126\333\055\304\333\245\060\015\006\011\052\206\110\206\367\015"
+"\001\001\005\005\000\003\202\001\001\000\177\137\271\123\133\143"
+"\075\165\062\347\372\304\164\032\313\106\337\106\151\034\122\317"
+"\252\117\302\150\353\377\200\251\121\350\075\142\167\211\075\012"
+"\165\071\361\156\135\027\207\157\150\005\301\224\154\331\135\337"
+"\332\262\131\313\245\020\212\312\314\071\315\237\353\116\336\122"
+"\377\014\360\364\222\251\362\154\123\253\233\322\107\240\037\164"
+"\367\233\232\361\057\025\237\172\144\060\030\007\074\052\017\147"
+"\312\374\017\211\141\235\145\245\074\345\274\023\133\010\333\343"
+"\377\355\273\006\273\152\006\261\172\117\145\306\202\375\036\234"
+"\213\265\015\356\110\273\270\275\252\010\264\373\243\174\313\237"
+"\315\220\166\134\206\226\170\127\012\146\371\130\032\235\375\227"
+"\051\140\336\021\246\220\034\031\034\356\001\226\042\064\064\056"
+"\221\371\267\304\047\321\173\346\277\373\200\104\132\026\345\353"
+"\340\324\012\070\274\344\221\343\325\353\134\301\254\337\033\152"
+"\174\236\345\165\322\266\227\207\333\314\207\053\103\072\204\010"
+"\257\253\074\333\367\074\146\061\206\260\235\123\171\355\370\043"
+"\336\102\343\055\202\361\017\345\372\227"
+, (PRUint32)954 }
+};
+static const NSSItem nss_builtins_items_309 [] = {
+  { (void *)&cko_netscape_trust, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"E-Guven Kok Elektronik Sertifika Hizmet Saglayicisi", (PRUint32)52 },
+  { (void *)"\335\341\322\251\001\200\056\035\207\136\204\263\200\176\113\261"
+"\375\231\101\064"
+, (PRUint32)20 },
+  { (void *)"\075\101\051\313\036\252\021\164\315\135\260\142\257\260\103\133"
+, (PRUint32)16 },
+  { (void *)"\060\165\061\013\060\011\006\003\125\004\006\023\002\124\122\061"
+"\050\060\046\006\003\125\004\012\023\037\105\154\145\153\164\162"
+"\157\156\151\153\040\102\151\154\147\151\040\107\165\166\145\156"
+"\154\151\147\151\040\101\056\123\056\061\074\060\072\006\003\125"
+"\004\003\023\063\145\055\107\165\166\145\156\040\113\157\153\040"
+"\105\154\145\153\164\162\157\156\151\153\040\123\145\162\164\151"
+"\146\151\153\141\040\110\151\172\155\145\164\040\123\141\147\154"
+"\141\171\151\143\151\163\151"
+, (PRUint32)119 },
+  { (void *)"\002\020\104\231\215\074\300\003\047\275\234\166\225\271\352\333"
+"\254\265"
+, (PRUint32)18 },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trust_unknown, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) }
+};
+static const NSSItem nss_builtins_items_310 [] = {
+  { (void *)&cko_certificate, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"GlobalSign Root CA - R3", (PRUint32)24 },
+  { (void *)&ckc_x_509, (PRUint32)sizeof(CK_CERTIFICATE_TYPE) },
+  { (void *)"\060\114\061\040\060\036\006\003\125\004\013\023\027\107\154\157"
+"\142\141\154\123\151\147\156\040\122\157\157\164\040\103\101\040"
+"\055\040\122\063\061\023\060\021\006\003\125\004\012\023\012\107"
+"\154\157\142\141\154\123\151\147\156\061\023\060\021\006\003\125"
+"\004\003\023\012\107\154\157\142\141\154\123\151\147\156"
+, (PRUint32)78 },
+  { (void *)"0", (PRUint32)2 },
+  { (void *)"\060\114\061\040\060\036\006\003\125\004\013\023\027\107\154\157"
+"\142\141\154\123\151\147\156\040\122\157\157\164\040\103\101\040"
+"\055\040\122\063\061\023\060\021\006\003\125\004\012\023\012\107"
+"\154\157\142\141\154\123\151\147\156\061\023\060\021\006\003\125"
+"\004\003\023\012\107\154\157\142\141\154\123\151\147\156"
+, (PRUint32)78 },
+  { (void *)"\002\013\004\000\000\000\000\001\041\130\123\010\242"
+, (PRUint32)13 },
+  { (void *)"\060\202\003\137\060\202\002\107\240\003\002\001\002\002\013\004"
+"\000\000\000\000\001\041\130\123\010\242\060\015\006\011\052\206"
+"\110\206\367\015\001\001\013\005\000\060\114\061\040\060\036\006"
+"\003\125\004\013\023\027\107\154\157\142\141\154\123\151\147\156"
+"\040\122\157\157\164\040\103\101\040\055\040\122\063\061\023\060"
+"\021\006\003\125\004\012\023\012\107\154\157\142\141\154\123\151"
+"\147\156\061\023\060\021\006\003\125\004\003\023\012\107\154\157"
+"\142\141\154\123\151\147\156\060\036\027\015\060\071\060\063\061"
+"\070\061\060\060\060\060\060\132\027\015\062\071\060\063\061\070"
+"\061\060\060\060\060\060\132\060\114\061\040\060\036\006\003\125"
+"\004\013\023\027\107\154\157\142\141\154\123\151\147\156\040\122"
+"\157\157\164\040\103\101\040\055\040\122\063\061\023\060\021\006"
+"\003\125\004\012\023\012\107\154\157\142\141\154\123\151\147\156"
+"\061\023\060\021\006\003\125\004\003\023\012\107\154\157\142\141"
+"\154\123\151\147\156\060\202\001\042\060\015\006\011\052\206\110"
+"\206\367\015\001\001\001\005\000\003\202\001\017\000\060\202\001"
+"\012\002\202\001\001\000\314\045\166\220\171\006\170\042\026\365"
+"\300\203\266\204\312\050\236\375\005\166\021\305\255\210\162\374"
+"\106\002\103\307\262\212\235\004\137\044\313\056\113\341\140\202"
+"\106\341\122\253\014\201\107\160\154\335\144\321\353\365\054\243"
+"\017\202\075\014\053\256\227\327\266\024\206\020\171\273\073\023"
+"\200\167\214\010\341\111\322\152\142\057\037\136\372\226\150\337"
+"\211\047\225\070\237\006\327\076\311\313\046\131\015\163\336\260"
+"\310\351\046\016\203\025\306\357\133\213\322\004\140\312\111\246"
+"\050\366\151\073\366\313\310\050\221\345\235\212\141\127\067\254"
+"\164\024\334\164\340\072\356\162\057\056\234\373\320\273\277\365"
+"\075\000\341\006\063\350\202\053\256\123\246\072\026\163\214\335"
+"\101\016\040\072\300\264\247\241\351\262\117\220\056\062\140\351"
+"\127\313\271\004\222\150\150\345\070\046\140\165\262\237\167\377"
+"\221\024\357\256\040\111\374\255\100\025\110\321\002\061\141\031"
+"\136\270\227\357\255\167\267\144\232\172\277\137\301\023\357\233"
+"\142\373\015\154\340\124\151\026\251\003\332\156\351\203\223\161"
+"\166\306\151\205\202\027\002\003\001\000\001\243\102\060\100\060"
+"\016\006\003\125\035\017\001\001\377\004\004\003\002\001\006\060"
+"\017\006\003\125\035\023\001\001\377\004\005\060\003\001\001\377"
+"\060\035\006\003\125\035\016\004\026\004\024\217\360\113\177\250"
+"\056\105\044\256\115\120\372\143\232\213\336\342\335\033\274\060"
+"\015\006\011\052\206\110\206\367\015\001\001\013\005\000\003\202"
+"\001\001\000\113\100\333\300\120\252\376\310\014\357\367\226\124"
+"\105\111\273\226\000\011\101\254\263\023\206\206\050\007\063\312"
+"\153\346\164\271\272\000\055\256\244\012\323\365\361\361\017\212"
+"\277\163\147\112\203\307\104\173\170\340\257\156\154\157\003\051"
+"\216\063\071\105\303\216\344\271\127\154\252\374\022\226\354\123"
+"\306\055\344\044\154\271\224\143\373\334\123\150\147\126\076\203"
+"\270\317\065\041\303\311\150\376\316\332\302\123\252\314\220\212"
+"\351\360\135\106\214\225\335\172\130\050\032\057\035\336\315\000"
+"\067\101\217\355\104\155\327\123\050\227\176\363\147\004\036\025"
+"\327\212\226\264\323\336\114\047\244\114\033\163\163\166\364\027"
+"\231\302\037\172\016\343\055\010\255\012\034\054\377\074\253\125"
+"\016\017\221\176\066\353\303\127\111\276\341\056\055\174\140\213"
+"\303\101\121\023\043\235\316\367\062\153\224\001\250\231\347\054"
+"\063\037\072\073\045\322\206\100\316\073\054\206\170\311\141\057"
+"\024\272\356\333\125\157\337\204\356\005\011\115\275\050\330\162"
+"\316\323\142\120\145\036\353\222\227\203\061\331\263\265\312\107"
+"\130\077\137"
+, (PRUint32)867 }
+};
+static const NSSItem nss_builtins_items_311 [] = {
+  { (void *)&cko_netscape_trust, (PRUint32)sizeof(CK_OBJECT_CLASS) },
+  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
+  { (void *)"GlobalSign Root CA - R3", (PRUint32)24 },
+  { (void *)"\326\233\126\021\110\360\034\167\305\105\170\301\011\046\337\133"
+"\205\151\166\255"
+, (PRUint32)20 },
+  { (void *)"\305\337\270\111\312\005\023\125\356\055\272\032\303\076\260\050"
+, (PRUint32)16 },
+  { (void *)"\060\114\061\040\060\036\006\003\125\004\013\023\027\107\154\157"
+"\142\141\154\123\151\147\156\040\122\157\157\164\040\103\101\040"
+"\055\040\122\063\061\023\060\021\006\003\125\004\012\023\012\107"
+"\154\157\142\141\154\123\151\147\156\061\023\060\021\006\003\125"
+"\004\003\023\012\107\154\157\142\141\154\123\151\147\156"
+, (PRUint32)78 },
+  { (void *)"\002\013\004\000\000\000\000\001\041\130\123\010\242"
+, (PRUint32)13 },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ckt_netscape_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
+  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) }
+};
 
 builtinsInternalObject
 nss_builtins_data[] = {
 #ifdef DEBUG
   { 7, nss_builtins_types_0, nss_builtins_items_0, {NULL} },
 #endif /* DEBUG */
   { 5, nss_builtins_types_1, nss_builtins_items_1, {NULL} },
   { 11, nss_builtins_types_2, nss_builtins_items_2, {NULL} },
@@ -20604,16 +21165,26 @@ nss_builtins_data[] = {
   { 13, nss_builtins_types_293, nss_builtins_items_293, {NULL} },
   { 11, nss_builtins_types_294, nss_builtins_items_294, {NULL} },
   { 13, nss_builtins_types_295, nss_builtins_items_295, {NULL} },
   { 11, nss_builtins_types_296, nss_builtins_items_296, {NULL} },
   { 13, nss_builtins_types_297, nss_builtins_items_297, {NULL} },
   { 11, nss_builtins_types_298, nss_builtins_items_298, {NULL} },
   { 13, nss_builtins_types_299, nss_builtins_items_299, {NULL} },
   { 11, nss_builtins_types_300, nss_builtins_items_300, {NULL} },
-  { 13, nss_builtins_types_301, nss_builtins_items_301, {NULL} }
+  { 13, nss_builtins_types_301, nss_builtins_items_301, {NULL} },
+  { 11, nss_builtins_types_302, nss_builtins_items_302, {NULL} },
+  { 13, nss_builtins_types_303, nss_builtins_items_303, {NULL} },
+  { 11, nss_builtins_types_304, nss_builtins_items_304, {NULL} },
+  { 13, nss_builtins_types_305, nss_builtins_items_305, {NULL} },
+  { 11, nss_builtins_types_306, nss_builtins_items_306, {NULL} },
+  { 13, nss_builtins_types_307, nss_builtins_items_307, {NULL} },
+  { 11, nss_builtins_types_308, nss_builtins_items_308, {NULL} },
+  { 13, nss_builtins_types_309, nss_builtins_items_309, {NULL} },
+  { 11, nss_builtins_types_310, nss_builtins_items_310, {NULL} },
+  { 13, nss_builtins_types_311, nss_builtins_items_311, {NULL} }
 };
 const PRUint32
 #ifdef DEBUG
-  nss_builtins_nObjects = 301+1;
+  nss_builtins_nObjects = 311+1;
 #else
-  nss_builtins_nObjects = 301;
+  nss_builtins_nObjects = 311;
 #endif /* DEBUG */
diff --git a/security/nss/lib/ckfw/builtins/certdata.txt b/security/nss/lib/ckfw/builtins/certdata.txt
--- a/security/nss/lib/ckfw/builtins/certdata.txt
+++ b/security/nss/lib/ckfw/builtins/certdata.txt
@@ -29,17 +29,17 @@
 # under the terms of either the GPL or the LGPL, and not to allow others to
 # use your version of this file under the terms of the MPL, indicate your
 # decision by deleting the provisions above and replace them with the notice
 # and other provisions required by the GPL or the LGPL. If you do not delete
 # the provisions above, a recipient may use your version of this file under
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK *****
-CVS_ID "@(#) $RCSfile: certdata.txt,v $ $Revision: 1.64 $ $Date: 2010/04/08 14:28:59 $"
+CVS_ID "@(#) $RCSfile: certdata.txt,v $ $Revision: 1.64.2.1 $ $Date: 2010/08/27 15:46:44 $"
 
 #
 # certdata.txt
 #
 # This file contains the object definitions for the certs and other
 # information "built into" NSS.
 #
 # Object definitions:
@@ -20921,8 +20921,590 @@ CKA_ISSUER MULTILINE_OCTAL
 END
 CKA_SERIAL_NUMBER MULTILINE_OCTAL
 \002\010\141\215\307\206\073\001\202\005
 END
 CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
 CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
 CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
 CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
+
+
+#
+# Certificate "Verisign Class 1 Public Primary Certification Authority"
+#
+CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Verisign Class 1 Public Primary Certification Authority"
+CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
+CKA_SUBJECT MULTILINE_OCTAL
+\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151
+\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004
+\013\023\056\103\154\141\163\163\040\061\040\120\165\142\154\151
+\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146
+\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164
+\171
+END
+CKA_ID UTF8 "0"
+CKA_ISSUER MULTILINE_OCTAL
+\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151
+\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004
+\013\023\056\103\154\141\163\163\040\061\040\120\165\142\154\151
+\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146
+\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164
+\171
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\020\077\151\036\201\234\360\232\112\363\163\377\271\110\242
+\344\335
+END
+CKA_VALUE MULTILINE_OCTAL
+\060\202\002\074\060\202\001\245\002\020\077\151\036\201\234\360
+\232\112\363\163\377\271\110\242\344\335\060\015\006\011\052\206
+\110\206\367\015\001\001\005\005\000\060\137\061\013\060\011\006
+\003\125\004\006\023\002\125\123\061\027\060\025\006\003\125\004
+\012\023\016\126\145\162\151\123\151\147\156\054\040\111\156\143
+\056\061\067\060\065\006\003\125\004\013\023\056\103\154\141\163
+\163\040\061\040\120\165\142\154\151\143\040\120\162\151\155\141
+\162\171\040\103\145\162\164\151\146\151\143\141\164\151\157\156
+\040\101\165\164\150\157\162\151\164\171\060\036\027\015\071\066
+\060\061\062\071\060\060\060\060\060\060\132\027\015\062\070\060
+\070\060\062\062\063\065\071\065\071\132\060\137\061\013\060\011
+\006\003\125\004\006\023\002\125\123\061\027\060\025\006\003\125
+\004\012\023\016\126\145\162\151\123\151\147\156\054\040\111\156
+\143\056\061\067\060\065\006\003\125\004\013\023\056\103\154\141
+\163\163\040\061\040\120\165\142\154\151\143\040\120\162\151\155
+\141\162\171\040\103\145\162\164\151\146\151\143\141\164\151\157
+\156\040\101\165\164\150\157\162\151\164\171\060\201\237\060\015
+\006\011\052\206\110\206\367\015\001\001\001\005\000\003\201\215
+\000\060\201\211\002\201\201\000\345\031\277\155\243\126\141\055
+\231\110\161\366\147\336\271\215\353\267\236\206\200\012\221\016
+\372\070\045\257\106\210\202\345\163\250\240\233\044\135\015\037
+\314\145\156\014\260\320\126\204\030\207\232\006\233\020\241\163
+\337\264\130\071\153\156\301\366\025\325\250\250\077\252\022\006
+\215\061\254\177\260\064\327\217\064\147\210\011\315\024\021\342
+\116\105\126\151\037\170\002\200\332\334\107\221\051\273\066\311
+\143\134\305\340\327\055\207\173\241\267\062\260\173\060\272\052
+\057\061\252\356\243\147\332\333\002\003\001\000\001\060\015\006
+\011\052\206\110\206\367\015\001\001\005\005\000\003\201\201\000
+\130\025\051\071\074\167\243\332\134\045\003\174\140\372\356\011
+\231\074\047\020\160\310\014\011\346\263\207\317\012\342\030\226
+\065\142\314\277\233\047\171\211\137\311\304\011\364\316\265\035
+\337\052\275\345\333\206\234\150\045\345\060\174\266\211\025\376
+\147\321\255\341\120\254\074\174\142\113\217\272\204\327\022\025
+\033\037\312\135\017\301\122\224\052\021\231\332\173\317\014\066
+\023\325\065\334\020\031\131\352\224\301\000\277\165\217\331\372
+\375\166\004\333\142\273\220\152\003\331\106\065\331\370\174\133
+END
+
+# Trust for Certificate "Verisign Class 1 Public Primary Certification Authority"
+CKA_CLASS CK_OBJECT_CLASS CKO_NETSCAPE_TRUST
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Verisign Class 1 Public Primary Certification Authority"
+CKA_CERT_SHA1_HASH MULTILINE_OCTAL
+\316\152\144\243\011\344\057\273\331\205\034\105\076\144\011\352
+\350\175\140\361
+END
+CKA_CERT_MD5_HASH MULTILINE_OCTAL
+\206\254\336\053\305\155\303\331\214\050\210\323\215\026\023\036
+END
+CKA_ISSUER MULTILINE_OCTAL
+\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151
+\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004
+\013\023\056\103\154\141\163\163\040\061\040\120\165\142\154\151
+\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146
+\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164
+\171
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\020\077\151\036\201\234\360\232\112\363\163\377\271\110\242
+\344\335
+END
+CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_TRUST_UNKNOWN
+CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUST_UNKNOWN
+CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
+
+#
+# Certificate "Verisign Class 3 Public Primary Certification Authority"
+#
+CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Verisign Class 3 Public Primary Certification Authority"
+CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
+CKA_SUBJECT MULTILINE_OCTAL
+\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151
+\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004
+\013\023\056\103\154\141\163\163\040\063\040\120\165\142\154\151
+\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146
+\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164
+\171
+END
+CKA_ID UTF8 "0"
+CKA_ISSUER MULTILINE_OCTAL
+\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151
+\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004
+\013\023\056\103\154\141\163\163\040\063\040\120\165\142\154\151
+\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146
+\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164
+\171
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\020\074\221\061\313\037\366\320\033\016\232\270\320\104\277
+\022\276
+END
+CKA_VALUE MULTILINE_OCTAL
+\060\202\002\074\060\202\001\245\002\020\074\221\061\313\037\366
+\320\033\016\232\270\320\104\277\022\276\060\015\006\011\052\206
+\110\206\367\015\001\001\005\005\000\060\137\061\013\060\011\006
+\003\125\004\006\023\002\125\123\061\027\060\025\006\003\125\004
+\012\023\016\126\145\162\151\123\151\147\156\054\040\111\156\143
+\056\061\067\060\065\006\003\125\004\013\023\056\103\154\141\163
+\163\040\063\040\120\165\142\154\151\143\040\120\162\151\155\141
+\162\171\040\103\145\162\164\151\146\151\143\141\164\151\157\156
+\040\101\165\164\150\157\162\151\164\171\060\036\027\015\071\066
+\060\061\062\071\060\060\060\060\060\060\132\027\015\062\070\060
+\070\060\062\062\063\065\071\065\071\132\060\137\061\013\060\011
+\006\003\125\004\006\023\002\125\123\061\027\060\025\006\003\125
+\004\012\023\016\126\145\162\151\123\151\147\156\054\040\111\156
+\143\056\061\067\060\065\006\003\125\004\013\023\056\103\154\141
+\163\163\040\063\040\120\165\142\154\151\143\040\120\162\151\155
+\141\162\171\040\103\145\162\164\151\146\151\143\141\164\151\157
+\156\040\101\165\164\150\157\162\151\164\171\060\201\237\060\015
+\006\011\052\206\110\206\367\015\001\001\001\005\000\003\201\215
+\000\060\201\211\002\201\201\000\311\134\131\236\362\033\212\001
+\024\264\020\337\004\100\333\343\127\257\152\105\100\217\204\014
+\013\321\063\331\331\021\317\356\002\130\037\045\367\052\250\104
+\005\252\354\003\037\170\177\236\223\271\232\000\252\043\175\326
+\254\205\242\143\105\307\162\047\314\364\114\306\165\161\322\071
+\357\117\102\360\165\337\012\220\306\216\040\157\230\017\370\254
+\043\137\160\051\066\244\311\206\347\261\232\040\313\123\245\205
+\347\075\276\175\232\376\044\105\063\334\166\025\355\017\242\161
+\144\114\145\056\201\150\105\247\002\003\001\000\001\060\015\006
+\011\052\206\110\206\367\015\001\001\005\005\000\003\201\201\000
+\020\162\122\251\005\024\031\062\010\101\360\305\153\012\314\176
+\017\041\031\315\344\147\334\137\251\033\346\312\350\163\235\042
+\330\230\156\163\003\141\221\305\174\260\105\100\156\104\235\215
+\260\261\226\164\141\055\015\251\105\322\244\222\052\326\232\165
+\227\156\077\123\375\105\231\140\035\250\053\114\371\136\247\011
+\330\165\060\327\322\145\140\075\147\326\110\125\165\151\077\221
+\365\110\013\107\151\042\151\202\226\276\311\310\070\206\112\172
+\054\163\031\110\151\116\153\174\145\277\017\374\160\316\210\220
+END
+
+# Trust for Certificate "Verisign Class 3 Public Primary Certification Authority"
+CKA_CLASS CK_OBJECT_CLASS CKO_NETSCAPE_TRUST
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Verisign Class 3 Public Primary Certification Authority"
+CKA_CERT_SHA1_HASH MULTILINE_OCTAL
+\241\333\143\223\221\157\027\344\030\125\011\100\004\025\307\002
+\100\260\256\153
+END
+CKA_CERT_MD5_HASH MULTILINE_OCTAL
+\357\132\361\063\357\361\315\273\121\002\356\022\024\113\226\304
+END
+CKA_ISSUER MULTILINE_OCTAL
+\060\137\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\027\060\025\006\003\125\004\012\023\016\126\145\162\151\123\151
+\147\156\054\040\111\156\143\056\061\067\060\065\006\003\125\004
+\013\023\056\103\154\141\163\163\040\063\040\120\165\142\154\151
+\143\040\120\162\151\155\141\162\171\040\103\145\162\164\151\146
+\151\143\141\164\151\157\156\040\101\165\164\150\157\162\151\164
+\171
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\020\074\221\061\313\037\366\320\033\016\232\270\320\104\277
+\022\276
+END
+CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
+
+#
+# Certificate "Microsec e-Szigno Root CA 2009"
+#
+CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Microsec e-Szigno Root CA 2009"
+CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
+CKA_SUBJECT MULTILINE_OCTAL
+\060\201\202\061\013\060\011\006\003\125\004\006\023\002\110\125
+\061\021\060\017\006\003\125\004\007\014\010\102\165\144\141\160
+\145\163\164\061\026\060\024\006\003\125\004\012\014\015\115\151
+\143\162\157\163\145\143\040\114\164\144\056\061\047\060\045\006
+\003\125\004\003\014\036\115\151\143\162\157\163\145\143\040\145
+\055\123\172\151\147\156\157\040\122\157\157\164\040\103\101\040
+\062\060\060\071\061\037\060\035\006\011\052\206\110\206\367\015
+\001\011\001\026\020\151\156\146\157\100\145\055\163\172\151\147
+\156\157\056\150\165
+END
+CKA_ID UTF8 "0"
+CKA_ISSUER MULTILINE_OCTAL
+\060\201\202\061\013\060\011\006\003\125\004\006\023\002\110\125
+\061\021\060\017\006\003\125\004\007\014\010\102\165\144\141\160
+\145\163\164\061\026\060\024\006\003\125\004\012\014\015\115\151
+\143\162\157\163\145\143\040\114\164\144\056\061\047\060\045\006
+\003\125\004\003\014\036\115\151\143\162\157\163\145\143\040\145
+\055\123\172\151\147\156\157\040\122\157\157\164\040\103\101\040
+\062\060\060\071\061\037\060\035\006\011\052\206\110\206\367\015
+\001\011\001\026\020\151\156\146\157\100\145\055\163\172\151\147
+\156\157\056\150\165
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\011\000\302\176\103\004\116\107\077\031
+END
+CKA_VALUE MULTILINE_OCTAL
+\060\202\004\012\060\202\002\362\240\003\002\001\002\002\011\000
+\302\176\103\004\116\107\077\031\060\015\006\011\052\206\110\206
+\367\015\001\001\013\005\000\060\201\202\061\013\060\011\006\003
+\125\004\006\023\002\110\125\061\021\060\017\006\003\125\004\007
+\014\010\102\165\144\141\160\145\163\164\061\026\060\024\006\003
+\125\004\012\014\015\115\151\143\162\157\163\145\143\040\114\164
+\144\056\061\047\060\045\006\003\125\004\003\014\036\115\151\143
+\162\157\163\145\143\040\145\055\123\172\151\147\156\157\040\122
+\157\157\164\040\103\101\040\062\060\060\071\061\037\060\035\006
+\011\052\206\110\206\367\015\001\011\001\026\020\151\156\146\157
+\100\145\055\163\172\151\147\156\157\056\150\165\060\036\027\015
+\060\071\060\066\061\066\061\061\063\060\061\070\132\027\015\062
+\071\061\062\063\060\061\061\063\060\061\070\132\060\201\202\061
+\013\060\011\006\003\125\004\006\023\002\110\125\061\021\060\017
+\006\003\125\004\007\014\010\102\165\144\141\160\145\163\164\061
+\026\060\024\006\003\125\004\012\014\015\115\151\143\162\157\163
+\145\143\040\114\164\144\056\061\047\060\045\006\003\125\004\003
+\014\036\115\151\143\162\157\163\145\143\040\145\055\123\172\151
+\147\156\157\040\122\157\157\164\040\103\101\040\062\060\060\071
+\061\037\060\035\006\011\052\206\110\206\367\015\001\011\001\026
+\020\151\156\146\157\100\145\055\163\172\151\147\156\157\056\150
+\165\060\202\001\042\060\015\006\011\052\206\110\206\367\015\001
+\001\001\005\000\003\202\001\017\000\060\202\001\012\002\202\001
+\001\000\351\370\217\363\143\255\332\206\330\247\340\102\373\317
+\221\336\246\046\370\231\245\143\160\255\233\256\312\063\100\175
+\155\226\156\241\016\104\356\341\023\235\224\102\122\232\275\165
+\205\164\054\250\016\035\223\266\030\267\214\054\250\317\373\134
+\161\271\332\354\376\350\176\217\344\057\035\262\250\165\207\330
+\267\241\345\073\317\231\112\106\320\203\031\175\300\241\022\034
+\225\155\112\364\330\307\245\115\063\056\205\071\100\165\176\024
+\174\200\022\230\120\307\101\147\270\240\200\141\124\246\154\116
+\037\340\235\016\007\351\311\272\063\347\376\300\125\050\054\002
+\200\247\031\365\236\334\125\123\003\227\173\007\110\377\231\373
+\067\212\044\304\131\314\120\020\143\216\252\251\032\260\204\032
+\206\371\137\273\261\120\156\244\321\012\314\325\161\176\037\247
+\033\174\365\123\156\042\137\313\053\346\324\174\135\256\326\302
+\306\114\345\005\001\331\355\127\374\301\043\171\374\372\310\044
+\203\225\363\265\152\121\001\320\167\326\351\022\241\371\032\203
+\373\202\033\271\260\227\364\166\006\063\103\111\240\377\013\265
+\372\265\002\003\001\000\001\243\201\200\060\176\060\017\006\003
+\125\035\023\001\001\377\004\005\060\003\001\001\377\060\016\006
+\003\125\035\017\001\001\377\004\004\003\002\001\006\060\035\006
+\003\125\035\016\004\026\004\024\313\017\306\337\102\103\314\075
+\313\265\110\043\241\032\172\246\052\273\064\150\060\037\006\003
+\125\035\043\004\030\060\026\200\024\313\017\306\337\102\103\314
+\075\313\265\110\043\241\032\172\246\052\273\064\150\060\033\006
+\003\125\035\021\004\024\060\022\201\020\151\156\146\157\100\145
+\055\163\172\151\147\156\157\056\150\165\060\015\006\011\052\206
+\110\206\367\015\001\001\013\005\000\003\202\001\001\000\311\321
+\016\136\056\325\314\263\174\076\313\374\075\377\015\050\225\223
+\004\310\277\332\315\171\270\103\220\360\244\276\357\362\357\041
+\230\274\324\324\135\006\366\356\102\354\060\154\240\252\251\312
+\361\257\212\372\077\013\163\152\076\352\056\100\176\037\256\124
+\141\171\353\056\010\067\327\043\363\214\237\276\035\261\341\244
+\165\333\240\342\124\024\261\272\034\051\244\030\366\022\272\242
+\024\024\343\061\065\310\100\377\267\340\005\166\127\301\034\131
+\362\370\277\344\355\045\142\134\204\360\176\176\037\263\276\371
+\267\041\021\314\003\001\126\160\247\020\222\036\033\064\201\036
+\255\234\032\303\004\074\355\002\141\326\036\006\363\137\072\207
+\362\053\361\105\207\345\075\254\321\307\127\204\275\153\256\334
+\330\371\266\033\142\160\013\075\066\311\102\362\062\327\172\141
+\346\322\333\075\317\310\251\311\233\334\333\130\104\327\157\070
+\257\177\170\323\243\255\032\165\272\034\301\066\174\217\036\155
+\034\303\165\106\256\065\005\246\366\134\075\041\356\126\360\311
+\202\042\055\172\124\253\160\303\175\042\145\202\160\226
+END
+
+# Trust for Certificate "Microsec e-Szigno Root CA 2009"
+CKA_CLASS CK_OBJECT_CLASS CKO_NETSCAPE_TRUST
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Microsec e-Szigno Root CA 2009"
+CKA_CERT_SHA1_HASH MULTILINE_OCTAL
+\211\337\164\376\134\364\017\112\200\371\343\067\175\124\332\221
+\341\001\061\216
+END
+CKA_CERT_MD5_HASH MULTILINE_OCTAL
+\370\111\364\003\274\104\055\203\276\110\151\175\051\144\374\261
+END
+CKA_ISSUER MULTILINE_OCTAL
+\060\201\202\061\013\060\011\006\003\125\004\006\023\002\110\125
+\061\021\060\017\006\003\125\004\007\014\010\102\165\144\141\160
+\145\163\164\061\026\060\024\006\003\125\004\012\014\015\115\151
+\143\162\157\163\145\143\040\114\164\144\056\061\047\060\045\006
+\003\125\004\003\014\036\115\151\143\162\157\163\145\143\040\145
+\055\123\172\151\147\156\157\040\122\157\157\164\040\103\101\040
+\062\060\060\071\061\037\060\035\006\011\052\206\110\206\367\015
+\001\011\001\026\020\151\156\146\157\100\145\055\163\172\151\147
+\156\157\056\150\165
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\011\000\302\176\103\004\116\107\077\031
+END
+CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
+
+#
+# Certificate "E-Guven Kok Elektronik Sertifika Hizmet Saglayicisi"
+#
+CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "E-Guven Kok Elektronik Sertifika Hizmet Saglayicisi"
+CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
+CKA_SUBJECT MULTILINE_OCTAL
+\060\165\061\013\060\011\006\003\125\004\006\023\002\124\122\061
+\050\060\046\006\003\125\004\012\023\037\105\154\145\153\164\162
+\157\156\151\153\040\102\151\154\147\151\040\107\165\166\145\156
+\154\151\147\151\040\101\056\123\056\061\074\060\072\006\003\125
+\004\003\023\063\145\055\107\165\166\145\156\040\113\157\153\040
+\105\154\145\153\164\162\157\156\151\153\040\123\145\162\164\151
+\146\151\153\141\040\110\151\172\155\145\164\040\123\141\147\154
+\141\171\151\143\151\163\151
+END
+CKA_ID UTF8 "0"
+CKA_ISSUER MULTILINE_OCTAL
+\060\165\061\013\060\011\006\003\125\004\006\023\002\124\122\061
+\050\060\046\006\003\125\004\012\023\037\105\154\145\153\164\162
+\157\156\151\153\040\102\151\154\147\151\040\107\165\166\145\156
+\154\151\147\151\040\101\056\123\056\061\074\060\072\006\003\125
+\004\003\023\063\145\055\107\165\166\145\156\040\113\157\153\040
+\105\154\145\153\164\162\157\156\151\153\040\123\145\162\164\151
+\146\151\153\141\040\110\151\172\155\145\164\040\123\141\147\154
+\141\171\151\143\151\163\151
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\020\104\231\215\074\300\003\047\275\234\166\225\271\352\333
+\254\265
+END
+CKA_VALUE MULTILINE_OCTAL
+\060\202\003\266\060\202\002\236\240\003\002\001\002\002\020\104
+\231\215\074\300\003\047\275\234\166\225\271\352\333\254\265\060
+\015\006\011\052\206\110\206\367\015\001\001\005\005\000\060\165
+\061\013\060\011\006\003\125\004\006\023\002\124\122\061\050\060
+\046\006\003\125\004\012\023\037\105\154\145\153\164\162\157\156
+\151\153\040\102\151\154\147\151\040\107\165\166\145\156\154\151
+\147\151\040\101\056\123\056\061\074\060\072\006\003\125\004\003
+\023\063\145\055\107\165\166\145\156\040\113\157\153\040\105\154
+\145\153\164\162\157\156\151\153\040\123\145\162\164\151\146\151
+\153\141\040\110\151\172\155\145\164\040\123\141\147\154\141\171
+\151\143\151\163\151\060\036\027\015\060\067\060\061\060\064\061
+\061\063\062\064\070\132\027\015\061\067\060\061\060\064\061\061
+\063\062\064\070\132\060\165\061\013\060\011\006\003\125\004\006
+\023\002\124\122\061\050\060\046\006\003\125\004\012\023\037\105
+\154\145\153\164\162\157\156\151\153\040\102\151\154\147\151\040
+\107\165\166\145\156\154\151\147\151\040\101\056\123\056\061\074
+\060\072\006\003\125\004\003\023\063\145\055\107\165\166\145\156
+\040\113\157\153\040\105\154\145\153\164\162\157\156\151\153\040
+\123\145\162\164\151\146\151\153\141\040\110\151\172\155\145\164
+\040\123\141\147\154\141\171\151\143\151\163\151\060\202\001\042
+\060\015\006\011\052\206\110\206\367\015\001\001\001\005\000\003
+\202\001\017\000\060\202\001\012\002\202\001\001\000\303\022\040
+\236\260\136\000\145\215\116\106\273\200\134\351\054\006\227\325
+\363\162\311\160\271\347\113\145\200\301\113\276\176\074\327\124
+\061\224\336\325\022\272\123\026\002\352\130\143\357\133\330\363
+\355\052\032\252\161\110\243\334\020\055\137\137\353\134\113\234
+\226\010\102\045\050\021\314\212\132\142\001\120\325\353\011\123
+\057\370\303\217\376\263\374\375\235\242\343\137\175\276\355\013
+\340\140\353\151\354\063\355\330\215\373\022\111\203\000\311\213
+\227\214\073\163\052\062\263\022\367\271\115\362\364\115\155\307
+\346\326\046\067\010\362\331\375\153\134\243\345\110\134\130\274
+\102\276\003\132\201\272\034\065\014\000\323\365\043\176\161\060
+\010\046\070\334\045\021\107\055\363\272\043\020\245\277\274\002
+\367\103\136\307\376\260\067\120\231\173\017\223\316\346\103\054
+\303\176\015\362\034\103\146\140\313\141\061\107\207\243\117\256
+\275\126\154\114\274\274\370\005\312\144\364\351\064\241\054\265
+\163\341\302\076\350\310\311\064\045\010\134\363\355\246\307\224
+\237\255\210\103\045\327\341\071\140\376\254\071\131\002\003\001
+\000\001\243\102\060\100\060\016\006\003\125\035\017\001\001\377
+\004\004\003\002\001\006\060\017\006\003\125\035\023\001\001\377
+\004\005\060\003\001\001\377\060\035\006\003\125\035\016\004\026
+\004\024\237\356\104\263\224\325\372\221\117\056\331\125\232\004
+\126\333\055\304\333\245\060\015\006\011\052\206\110\206\367\015
+\001\001\005\005\000\003\202\001\001\000\177\137\271\123\133\143
+\075\165\062\347\372\304\164\032\313\106\337\106\151\034\122\317
+\252\117\302\150\353\377\200\251\121\350\075\142\167\211\075\012
+\165\071\361\156\135\027\207\157\150\005\301\224\154\331\135\337
+\332\262\131\313\245\020\212\312\314\071\315\237\353\116\336\122
+\377\014\360\364\222\251\362\154\123\253\233\322\107\240\037\164
+\367\233\232\361\057\025\237\172\144\060\030\007\074\052\017\147
+\312\374\017\211\141\235\145\245\074\345\274\023\133\010\333\343
+\377\355\273\006\273\152\006\261\172\117\145\306\202\375\036\234
+\213\265\015\356\110\273\270\275\252\010\264\373\243\174\313\237
+\315\220\166\134\206\226\170\127\012\146\371\130\032\235\375\227
+\051\140\336\021\246\220\034\031\034\356\001\226\042\064\064\056
+\221\371\267\304\047\321\173\346\277\373\200\104\132\026\345\353
+\340\324\012\070\274\344\221\343\325\353\134\301\254\337\033\152
+\174\236\345\165\322\266\227\207\333\314\207\053\103\072\204\010
+\257\253\074\333\367\074\146\061\206\260\235\123\171\355\370\043
+\336\102\343\055\202\361\017\345\372\227
+END
+
+# Trust for Certificate "E-Guven Kok Elektronik Sertifika Hizmet Saglayicisi"
+CKA_CLASS CK_OBJECT_CLASS CKO_NETSCAPE_TRUST
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "E-Guven Kok Elektronik Sertifika Hizmet Saglayicisi"
+CKA_CERT_SHA1_HASH MULTILINE_OCTAL
+\335\341\322\251\001\200\056\035\207\136\204\263\200\176\113\261
+\375\231\101\064
+END
+CKA_CERT_MD5_HASH MULTILINE_OCTAL
+\075\101\051\313\036\252\021\164\315\135\260\142\257\260\103\133
+END
+CKA_ISSUER MULTILINE_OCTAL
+\060\165\061\013\060\011\006\003\125\004\006\023\002\124\122\061
+\050\060\046\006\003\125\004\012\023\037\105\154\145\153\164\162
+\157\156\151\153\040\102\151\154\147\151\040\107\165\166\145\156
+\154\151\147\151\040\101\056\123\056\061\074\060\072\006\003\125
+\004\003\023\063\145\055\107\165\166\145\156\040\113\157\153\040
+\105\154\145\153\164\162\157\156\151\153\040\123\145\162\164\151
+\146\151\153\141\040\110\151\172\155\145\164\040\123\141\147\154
+\141\171\151\143\151\163\151
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\020\104\231\215\074\300\003\047\275\234\166\225\271\352\333
+\254\265
+END
+CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUST_UNKNOWN
+CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
+
+#
+# Certificate "GlobalSign Root CA - R3"
+#
+CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "GlobalSign Root CA - R3"
+CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
+CKA_SUBJECT MULTILINE_OCTAL
+\060\114\061\040\060\036\006\003\125\004\013\023\027\107\154\157
+\142\141\154\123\151\147\156\040\122\157\157\164\040\103\101\040
+\055\040\122\063\061\023\060\021\006\003\125\004\012\023\012\107
+\154\157\142\141\154\123\151\147\156\061\023\060\021\006\003\125
+\004\003\023\012\107\154\157\142\141\154\123\151\147\156
+END
+CKA_ID UTF8 "0"
+CKA_ISSUER MULTILINE_OCTAL
+\060\114\061\040\060\036\006\003\125\004\013\023\027\107\154\157
+\142\141\154\123\151\147\156\040\122\157\157\164\040\103\101\040
+\055\040\122\063\061\023\060\021\006\003\125\004\012\023\012\107
+\154\157\142\141\154\123\151\147\156\061\023\060\021\006\003\125
+\004\003\023\012\107\154\157\142\141\154\123\151\147\156
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\013\004\000\000\000\000\001\041\130\123\010\242
+END
+CKA_VALUE MULTILINE_OCTAL
+\060\202\003\137\060\202\002\107\240\003\002\001\002\002\013\004
+\000\000\000\000\001\041\130\123\010\242\060\015\006\011\052\206
+\110\206\367\015\001\001\013\005\000\060\114\061\040\060\036\006
+\003\125\004\013\023\027\107\154\157\142\141\154\123\151\147\156
+\040\122\157\157\164\040\103\101\040\055\040\122\063\061\023\060
+\021\006\003\125\004\012\023\012\107\154\157\142\141\154\123\151
+\147\156\061\023\060\021\006\003\125\004\003\023\012\107\154\157
+\142\141\154\123\151\147\156\060\036\027\015\060\071\060\063\061
+\070\061\060\060\060\060\060\132\027\015\062\071\060\063\061\070
+\061\060\060\060\060\060\132\060\114\061\040\060\036\006\003\125
+\004\013\023\027\107\154\157\142\141\154\123\151\147\156\040\122
+\157\157\164\040\103\101\040\055\040\122\063\061\023\060\021\006
+\003\125\004\012\023\012\107\154\157\142\141\154\123\151\147\156
+\061\023\060\021\006\003\125\004\003\023\012\107\154\157\142\141
+\154\123\151\147\156\060\202\001\042\060\015\006\011\052\206\110
+\206\367\015\001\001\001\005\000\003\202\001\017\000\060\202\001
+\012\002\202\001\001\000\314\045\166\220\171\006\170\042\026\365
+\300\203\266\204\312\050\236\375\005\166\021\305\255\210\162\374
+\106\002\103\307\262\212\235\004\137\044\313\056\113\341\140\202
+\106\341\122\253\014\201\107\160\154\335\144\321\353\365\054\243
+\017\202\075\014\053\256\227\327\266\024\206\020\171\273\073\023
+\200\167\214\010\341\111\322\152\142\057\037\136\372\226\150\337
+\211\047\225\070\237\006\327\076\311\313\046\131\015\163\336\260
+\310\351\046\016\203\025\306\357\133\213\322\004\140\312\111\246
+\050\366\151\073\366\313\310\050\221\345\235\212\141\127\067\254
+\164\024\334\164\340\072\356\162\057\056\234\373\320\273\277\365
+\075\000\341\006\063\350\202\053\256\123\246\072\026\163\214\335
+\101\016\040\072\300\264\247\241\351\262\117\220\056\062\140\351
+\127\313\271\004\222\150\150\345\070\046\140\165\262\237\167\377
+\221\024\357\256\040\111\374\255\100\025\110\321\002\061\141\031
+\136\270\227\357\255\167\267\144\232\172\277\137\301\023\357\233
+\142\373\015\154\340\124\151\026\251\003\332\156\351\203\223\161
+\166\306\151\205\202\027\002\003\001\000\001\243\102\060\100\060
+\016\006\003\125\035\017\001\001\377\004\004\003\002\001\006\060
+\017\006\003\125\035\023\001\001\377\004\005\060\003\001\001\377
+\060\035\006\003\125\035\016\004\026\004\024\217\360\113\177\250
+\056\105\044\256\115\120\372\143\232\213\336\342\335\033\274\060
+\015\006\011\052\206\110\206\367\015\001\001\013\005\000\003\202
+\001\001\000\113\100\333\300\120\252\376\310\014\357\367\226\124
+\105\111\273\226\000\011\101\254\263\023\206\206\050\007\063\312
+\153\346\164\271\272\000\055\256\244\012\323\365\361\361\017\212
+\277\163\147\112\203\307\104\173\170\340\257\156\154\157\003\051
+\216\063\071\105\303\216\344\271\127\154\252\374\022\226\354\123
+\306\055\344\044\154\271\224\143\373\334\123\150\147\126\076\203
+\270\317\065\041\303\311\150\376\316\332\302\123\252\314\220\212
+\351\360\135\106\214\225\335\172\130\050\032\057\035\336\315\000
+\067\101\217\355\104\155\327\123\050\227\176\363\147\004\036\025
+\327\212\226\264\323\336\114\047\244\114\033\163\163\166\364\027
+\231\302\037\172\016\343\055\010\255\012\034\054\377\074\253\125
+\016\017\221\176\066\353\303\127\111\276\341\056\055\174\140\213
+\303\101\121\023\043\235\316\367\062\153\224\001\250\231\347\054
+\063\037\072\073\045\322\206\100\316\073\054\206\170\311\141\057
+\024\272\356\333\125\157\337\204\356\005\011\115\275\050\330\162
+\316\323\142\120\145\036\353\222\227\203\061\331\263\265\312\107
+\130\077\137
+END
+
+# Trust for Certificate "GlobalSign Root CA - R3"
+CKA_CLASS CK_OBJECT_CLASS CKO_NETSCAPE_TRUST
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "GlobalSign Root CA - R3"
+CKA_CERT_SHA1_HASH MULTILINE_OCTAL
+\326\233\126\021\110\360\034\167\305\105\170\301\011\046\337\133
+\205\151\166\255
+END
+CKA_CERT_MD5_HASH MULTILINE_OCTAL
+\305\337\270\111\312\005\023\125\356\055\272\032\303\076\260\050
+END
+CKA_ISSUER MULTILINE_OCTAL
+\060\114\061\040\060\036\006\003\125\004\013\023\027\107\154\157
+\142\141\154\123\151\147\156\040\122\157\157\164\040\103\101\040
+\055\040\122\063\061\023\060\021\006\003\125\004\012\023\012\107
+\154\157\142\141\154\123\151\147\156\061\023\060\021\006\003\125
+\004\003\023\012\107\154\157\142\141\154\123\151\147\156
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\013\004\000\000\000\000\001\041\130\123\010\242
+END
+CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
diff --git a/security/nss/lib/ckfw/builtins/nssckbi.h b/security/nss/lib/ckfw/builtins/nssckbi.h
--- a/security/nss/lib/ckfw/builtins/nssckbi.h
+++ b/security/nss/lib/ckfw/builtins/nssckbi.h
@@ -72,18 +72,18 @@
  *     ...
  *   - NSS 3.29 branch: 250-255
  *
  * NSS_BUILTINS_LIBRARY_VERSION_MINOR is a CK_BYTE.  It's not clear
  * whether we may use its full range (0-255) or only 0-99 because
  * of the comment in the CK_VERSION type definition.
  */
 #define NSS_BUILTINS_LIBRARY_VERSION_MAJOR 1
-#define NSS_BUILTINS_LIBRARY_VERSION_MINOR 79
-#define NSS_BUILTINS_LIBRARY_VERSION "1.79"
+#define NSS_BUILTINS_LIBRARY_VERSION_MINOR 80
+#define NSS_BUILTINS_LIBRARY_VERSION "1.80"
 
 /* These version numbers detail the semantic changes to the ckfw engine. */
 #define NSS_BUILTINS_HARDWARE_VERSION_MAJOR 1
 #define NSS_BUILTINS_HARDWARE_VERSION_MINOR 0
 
 /* These version numbers detail the semantic changes to ckbi itself 
  * (new PKCS #11 objects), etc. */
 #define NSS_BUILTINS_FIRMWARE_VERSION_MAJOR 1
diff --git a/security/nss/lib/crmf/servget.c b/security/nss/lib/crmf/servget.c
--- a/security/nss/lib/crmf/servget.c
+++ b/security/nss/lib/crmf/servget.c
@@ -503,17 +503,18 @@ crmf_copy_cert_req_msg(CRMFCertReqMsg *s
     PRArenaPool    *poolp;
 
     poolp = PORT_NewArena(CRMF_DEFAULT_ARENA_SIZE);
     if (poolp == NULL) {
         return NULL;
     }
     newReqMsg = PORT_ArenaZNew(poolp, CRMFCertReqMsg);
     if (newReqMsg == NULL) {
-        goto loser;
+        PORT_FreeArena(poolp, PR_TRUE);
+        return NULL;
     }
 
     newReqMsg->poolp = poolp;
     newReqMsg->certReq = crmf_copy_cert_request(poolp, srcReqMsg->certReq);
     if (newReqMsg->certReq == NULL) {
         goto loser;
     }
     newReqMsg->pop = crmf_copy_pop(poolp, srcReqMsg->pop);
diff --git a/security/nss/lib/freebl/Makefile b/security/nss/lib/freebl/Makefile
--- a/security/nss/lib/freebl/Makefile
+++ b/security/nss/lib/freebl/Makefile
@@ -71,16 +71,21 @@ ifdef USE_64
 endif
 
 ifdef USE_ABI32_FPU
 	DEFINES += -DNSS_USE_ABI32_FPU
 endif
 
 ifeq ($(FREEBL_NO_DEPEND),1)
 	DEFINES += -DFREEBL_NO_DEPEND
+	LOWHASH_SRCS = stubs.c nsslowhash.c
+	LOWHASH_EXPORTS = nsslowhash.h
+	MAPFILE_SOURCE = freebl_hash.def
+else
+	MAPFILE_SOURCE = freebl.def
 endif
 # NSS_X86 means the target is a 32-bits x86 CPU architecture
 # NSS_X64 means the target is a 64-bits x64 CPU architecture
 # NSS_X86_OR_X64 means the target is either x86 or x64
 ifeq (,$(filter-out x386 x86 x86_64,$(CPU_ARCH)))
         DEFINES += -DNSS_X86_OR_X64
 ifdef USE_64
         DEFINES += -DNSS_X64
diff --git a/security/nss/lib/freebl/config.mk b/security/nss/lib/freebl/config.mk
--- a/security/nss/lib/freebl/config.mk
+++ b/security/nss/lib/freebl/config.mk
@@ -61,24 +61,16 @@ ALL_TRASH :=    $(TARGETS) $(OBJS) $(OBJ
 # override these variables to prevent building a DSO/DLL.
   TARGETS        = $(LIBRARY)
   SHARED_LIBRARY =
   IMPORT_LIBRARY =
   PROGRAM        =
 
 else
 
-ifeq ($(FREEBL_NO_DEPEND),1)
-LOWHASH_SRCS = stubs.c nsslowhash.c
-LOWHASH_EXPORTS = nsslowhash.h
-MAPFILE_SOURCE = freebl_hash.def
-else
-MAPFILE_SOURCE = freebl.def
-endif
-
 # This is a recursive child make. We build the shared lib.
 
 TARGETS      = $(SHARED_LIBRARY)
 LIBRARY      =
 IMPORT_LIBRARY =
 PROGRAM      =
 
 ifeq ($(OS_TARGET), SunOS)
diff --git a/security/nss/lib/jar/jar.h b/security/nss/lib/jar/jar.h
--- a/security/nss/lib/jar/jar.h
+++ b/security/nss/lib/jar/jar.h
@@ -320,29 +320,16 @@ JAR_calculate_digest(void *data, long le
 
 extern int PR_CALLBACK 
 JAR_verify_digest(JAR *jar, const char *name, JAR_Digest *dig);
 
 extern int 
 JAR_digest_file(char *filename, JAR_Digest *dig);
 
 /*
- *  Get attribute from certificate:
- *
- *  Returns any special signed attribute associated with this cert
- *  or signature (passed in "data"). Attributes jarCert*. Most of the time
- *  this will return a zero terminated string.
- *
- */
-
-extern int PR_CALLBACK 
-JAR_cert_attribute(JAR *jar, jarCert attrib, long keylen, void *key,
-                   void **result, unsigned long *length);
-
-/*
  *  Meta information
  *
  *  Currently, since this call does not support passing of an owner
  *  (certificate, or physical name of the .sf file), it is restricted to
  *  returning information located in the manifest.mf file.
  *
  *  Meta information is a name/value pair inside the archive file. Here,
  *  the name is passed in *header and value returned in **info.
diff --git a/security/nss/lib/pk11wrap/debug_module.c b/security/nss/lib/pk11wrap/debug_module.c
--- a/security/nss/lib/pk11wrap/debug_module.c
+++ b/security/nss/lib/pk11wrap/debug_module.c
@@ -656,17 +656,17 @@ static void print_attr_value(CK_ATTRIBUT
 	    get_trust_val(trust, valstr, sizeof valstr);
 	    PR_LOG(modlog, 4, (fmt_s_s_d, 
 	           atype, valstr, attr->ulValueLen));
 	    break;
 	}
     case CKA_KEY_TYPE:
 	if (attr->ulValueLen > 0 && attr->pValue) {
 	    CK_KEY_TYPE keyType = *((CK_KEY_TYPE *)attr->pValue);
-	    get_obj_class(keyType, valstr, sizeof valstr);
+	    get_key_type(keyType, valstr, sizeof valstr);
 	    PR_LOG(modlog, 4, (fmt_s_s_d, 
 	           atype, valstr, attr->ulValueLen));
 	    break;
 	}
     case CKA_LABEL:
     case CKA_NETSCAPE_EMAIL:
     case CKA_NETSCAPE_URL:
 	if (attr->ulValueLen > 0 && attr->pValue) {
diff --git a/security/nss/lib/pkcs12/p12d.c b/security/nss/lib/pkcs12/p12d.c
--- a/security/nss/lib/pkcs12/p12d.c
+++ b/security/nss/lib/pkcs12/p12d.c
@@ -125,20 +125,42 @@ struct SEC_PKCS12DecoderContextStr {
     /* safe contents info */
     unsigned int 		safeContentsCnt;
     sec_PKCS12SafeContentsContext **safeContentsList;
 
     /* HMAC info */
     sec_PKCS12MacData		macData;
 
     /* routines for reading back the data to be hmac'd */
+    /* They are called as follows.
+     *
+     * Stage 1: decode the aSafes cinfo into a buffer in dArg,
+     * which p12d.c sometimes refers to as the "temp file".
+     * This occurs during SEC_PKCS12DecoderUpdate calls.
+     *
+     * dOpen(dArg, PR_FALSE)
+     * dWrite(dArg, buf, len)
+     * ...
+     * dWrite(dArg, buf, len)
+     * dClose(dArg, PR_FALSE)
+     *
+     * Stage 2: verify MAC
+     * This occurs SEC_PKCS12DecoderVerify.
+     *
+     * dOpen(dArg, PR_TRUE)
+     * dRead(dArg, buf, IN_BUF_LEN)
+     * ...
+     * dRead(dArg, buf, IN_BUF_LEN)
+     * dClose(dArg, PR_TRUE)
+     */
     digestOpenFn 		dOpen;
     digestCloseFn 		dClose;
     digestIOFn 			dRead, dWrite;
     void 			*dArg;
+    PRBool			dIsOpen;  /* is the temp file created? */
 
     /* helper functions */
     SECKEYGetPasswordKey 	pwfn;
     void 			*pwfnarg;
     PRBool 			swapUnicodeBytes;
 
     /* import information */
     PRBool 			bagsVerified;
@@ -910,16 +932,18 @@ sec_pkcs12_decode_start_asafes_cinfo(SEC
     }
   
     /* open the temp file for writing, if the filter functions were set */ 
     if(p12dcx->dOpen && (*p12dcx->dOpen)(p12dcx->dArg, PR_FALSE) 
 				!= SECSuccess) {
 	p12dcx->errorValue = PORT_GetError();
 	goto loser;
     }
+    /* dOpen(dArg, PR_FALSE) creates the temp file */
+    p12dcx->dIsOpen = PR_TRUE;
 
     return SECSuccess;
 
 loser:
     p12dcx->error = PR_TRUE;
 
     if(p12dcx->aSafeA1Dcx) {
 	SEC_ASN1DecoderFinish(p12dcx->aSafeA1Dcx);
@@ -1156,18 +1180,18 @@ p12u_DigestWrite(void *arg, unsigned cha
  *		 this should be changed to take a callback which retrieves
  *		 the password.  it may be possible for different safes to
  *		 have different passwords.  also, the password is already
  *		 in unicode.  it should probably be converted down below via
  *		 a unicode conversion callback.
  *	slot - the slot to import the dataa into should multiple slots 
  *		 be supported based on key type and cert type?
  *	dOpen, dClose, dRead, dWrite - digest routines for writing data
- *		 to a file so it could be read back and the hmack recomputed
- *		 and verified.  doesn't seem to be away for both encoding
+ *		 to a file so it could be read back and the hmac recomputed
+ *		 and verified.  doesn't seem to be a way for both encoding
  *		 and decoding to be single pass, thus the need for these
  *		 routines.
  *	dArg - the argument for dOpen, etc.
  *
  *      if NULL == dOpen == dClose == dRead == dWrite == dArg, then default
  *      implementations using a memory buffer are used
  *
  *	This function returns the decoder context, if it was successful.
@@ -1230,16 +1254,17 @@ SEC_PKCS12DecoderStart(SECItem *pwitem, 
     				 p12dcx); 
     
     /* set up digest functions */
     p12dcx->dOpen = dOpen;
     p12dcx->dWrite = dWrite;
     p12dcx->dClose = dClose;
     p12dcx->dRead = dRead;
     p12dcx->dArg = dArg;
+    p12dcx->dIsOpen = PR_FALSE;
     
     p12dcx->keyList = NULL;
     p12dcx->decitem.type = 0;
     p12dcx->decitem.der = NULL;
     p12dcx->decitem.hasKey = PR_FALSE;
     p12dcx->decitem.friendlyName = NULL;
     p12dcx->iteration = 0;
 
@@ -1426,16 +1451,17 @@ sec_pkcs12_decoder_verify_mac(SEC_PKCS12
 	PORT_SetError(SEC_ERROR_PKCS12_INVALID_MAC);
 	rv = SECFailure;
     }
 
 loser:
     /* close the file and remove it */
     if(p12dcx->dClose) {
 	(*p12dcx->dClose)(p12dcx->dArg, PR_TRUE);
+	p12dcx->dIsOpen = PR_FALSE;
     }
 
     if(pk11cx) {
 	PK11_DestroyContext(pk11cx, PR_TRUE);
     }
     if (params) {
 	PK11_DestroyPBEParams(params);
     }
@@ -1575,16 +1601,21 @@ SEC_PKCS12DecoderFinish(SEC_PKCS12Decode
         SECITEM_FreeItem(p12dcx->decitem.friendlyName, PR_TRUE);
     }
 
     if(p12dcx->slot) {
 	PK11_FreeSlot(p12dcx->slot);
 	p12dcx->slot = NULL;
     }
 
+    if(p12dcx->dIsOpen && p12dcx->dClose) {
+	(*p12dcx->dClose)(p12dcx->dArg, PR_TRUE);
+	p12dcx->dIsOpen = PR_FALSE;
+    }
+
     if(p12dcx->arena) {
 	PORT_FreeArena(p12dcx->arena, PR_TRUE);
     }
 }
 
 static SECStatus
 sec_pkcs12_decoder_set_attribute_value(sec_PKCS12SafeBag *bag,
 			       SECOidTag attributeType,
diff --git a/security/nss/lib/pkcs12/p12e.c b/security/nss/lib/pkcs12/p12e.c
--- a/security/nss/lib/pkcs12/p12e.c
+++ b/security/nss/lib/pkcs12/p12e.c
@@ -157,17 +157,16 @@ struct sec_pkcs12_hmac_and_output_info {
 };
 
 /* An encoder context which is used for the actual encoding
  * portion of PKCS 12. 
  */
 typedef struct sec_PKCS12EncoderContextStr {
     PRArenaPool *arena;
     SEC_PKCS12ExportContext *p12exp;
-    PK11SymKey *encryptionKey;
 
     /* encoder information - this is set up based on whether 
      * password based or public key pased privacy is being used
      */
     SEC_ASN1EncoderContext *outerA1ecx;
     union {
 	struct sec_pkcs12_hmac_and_output_info hmacAndOutputInfo;
 	struct sec_pkcs12_encoder_output       encOutput;
@@ -1473,21 +1472,50 @@ loser:
     PORT_ArenaRelease(p12ctxt->arena, mark);
     return NULL;
 }
 
 /*********************************
  * Encoding routines
  *********************************/
 
+/* Clean up the resources allocated by a sec_PKCS12EncoderContext. */
+static void
+sec_pkcs12_encoder_destroy_context(sec_PKCS12EncoderContext *p12enc)
+{
+    if(p12enc) {
+	if(p12enc->outerA1ecx) {
+	    SEC_ASN1EncoderFinish(p12enc->outerA1ecx);
+	    p12enc->outerA1ecx = NULL;
+	}
+	if(p12enc->aSafeCinfo) {
+	    SEC_PKCS7DestroyContentInfo(p12enc->aSafeCinfo);
+	    p12enc->aSafeCinfo = NULL;
+	}
+	if(p12enc->middleP7ecx) {
+	    SEC_PKCS7EncoderFinish(p12enc->middleP7ecx, p12enc->p12exp->pwfn,
+				   p12enc->p12exp->pwfnarg);
+	    p12enc->middleP7ecx = NULL;
+	}
+	if(p12enc->middleA1ecx) {
+	    SEC_ASN1EncoderFinish(p12enc->middleA1ecx);
+	    p12enc->middleA1ecx = NULL;
+	}
+	if(p12enc->hmacCx) {
+	    PK11_DestroyContext(p12enc->hmacCx, PR_TRUE);
+	    p12enc->hmacCx = NULL;
+	}
+    }
+}
+
 /* set up the encoder context based on information in the export context
  * and return the newly allocated enocoder context.  A return of NULL 
  * indicates an error occurred. 
  */
-sec_PKCS12EncoderContext *
+static sec_PKCS12EncoderContext *
 sec_pkcs12_encoder_start_context(SEC_PKCS12ExportContext *p12exp)
 {
     sec_PKCS12EncoderContext *p12enc = NULL;
     unsigned int i, nonEmptyCnt;
     SECStatus rv;
     SECItem ignore = {0};
     void *mark;
 
@@ -1568,24 +1596,26 @@ sec_pkcs12_encoder_start_context(SEC_PKC
 	    PORT_Memset(&p12enc->mac, 0, sizeof(sec_PKCS12MacData));
 
 	    if(!salt) {
 		PORT_SetError(SEC_ERROR_NO_MEMORY);
 		goto loser;
 	    }
 	    if(SECITEM_CopyItem(p12exp->arena, &(p12enc->mac.macSalt), salt) 
 			!= SECSuccess) {
+		/* XXX salt is leaked */
 		PORT_SetError(SEC_ERROR_NO_MEMORY);
 		goto loser;
 	    }   
 
 	    /* generate HMAC key */
 	    if(!sec_pkcs12_convert_item_to_unicode(NULL, &pwd, 
 			p12exp->integrityInfo.pwdInfo.password, PR_TRUE, 
 			PR_TRUE, PR_TRUE)) {
+		/* XXX salt is leaked */
 		goto loser;
 	    }
 	    /*
 	     * This code only works with PKCS #12 Mac using PKCS #5 v1
 	     * PBA keygens. PKCS #5 v2 support will require a change to
 	     * the PKCS #12 spec.
 	     */
 	    params = PK11_CreatePBEParams(salt, &pwd, 1);
@@ -1596,16 +1626,17 @@ sec_pkcs12_encoder_start_context(SEC_PKC
 	    switch (p12exp->integrityInfo.pwdInfo.algorithm) {
 	    case SEC_OID_SHA1:
 		integrityMechType = CKM_PBA_SHA1_WITH_SHA1_HMAC; break;
 	    case SEC_OID_MD5:
 		integrityMechType = CKM_NETSCAPE_PBE_MD5_HMAC_KEY_GEN;  break;
 	    case SEC_OID_MD2:
 		integrityMechType = CKM_NETSCAPE_PBE_MD2_HMAC_KEY_GEN;  break;
 	    default:
+		/* XXX params is leaked */
 		goto loser;
 	    }
 
 	    /* generate the key */
 	    symKey = PK11_KeyGen(NULL, integrityMechType, params, 20, NULL);
 	    PK11_DestroyPBEParams(params);
 	    if(!symKey) {
 		goto loser;
@@ -1634,24 +1665,17 @@ sec_pkcs12_encoder_start_context(SEC_PKC
 	goto loser;
     }
 
     PORT_ArenaUnmark(p12exp->arena, mark);
 
     return p12enc;
 
 loser:
-    if(p12enc) {
-	if(p12enc->aSafeCinfo) {
-	    SEC_PKCS7DestroyContentInfo(p12enc->aSafeCinfo);
-	}
-	if(p12enc->hmacCx) {
-	    PK11_DestroyContext(p12enc->hmacCx, PR_TRUE);
-	}
-    }
+    sec_pkcs12_encoder_destroy_context(p12enc);
     if (p12exp->arena != NULL)
 	PORT_ArenaRelease(p12exp->arena, mark);
 
     return NULL;
 }
 
 /* The outermost ASN.1 encoder calls this function for output.
 ** This function calls back to the library caller's output routine,
@@ -2013,22 +2037,24 @@ SEC_PKCS12Encode(SEC_PKCS12ExportContext
     while(p12enc->currentSafe != p12enc->p12exp->safeInfoCount) {
 	sec_pkcs12_encoder_asafe_process(p12enc);
 	p12enc->currentSafe++;
     }
     SEC_ASN1EncoderClearTakeFromBuf(p12enc->middleA1ecx);
     SEC_ASN1EncoderClearStreaming(p12enc->middleA1ecx);
     SEC_ASN1EncoderUpdate(p12enc->middleA1ecx, NULL, 0);
     SEC_ASN1EncoderFinish(p12enc->middleA1ecx);
+    p12enc->middleA1ecx = NULL;
 
     sec_FlushPkcs12OutputBuffer( &p12enc->middleBuf);
 
     /* finish the encoding of the authenticated safes */
     rv = SEC_PKCS7EncoderFinish(p12enc->middleP7ecx, p12exp->pwfn, 
     				p12exp->pwfnarg);
+    p12enc->middleP7ecx = NULL;
     if(rv != SECSuccess) {
 	goto loser;
     }
 
     SEC_ASN1EncoderClearTakeFromBuf(p12enc->outerA1ecx);
     SEC_ASN1EncoderClearStreaming(p12enc->outerA1ecx);
 
     /* update the mac, if necessary */
@@ -2036,18 +2062,20 @@ SEC_PKCS12Encode(SEC_PKCS12ExportContext
     if(rv != SECSuccess) {
 	goto loser;
     }
    
     /* finish encoding the pfx */ 
     rv = SEC_ASN1EncoderUpdate(p12enc->outerA1ecx, NULL, 0);
 
     SEC_ASN1EncoderFinish(p12enc->outerA1ecx);
+    p12enc->outerA1ecx = NULL;
 
 loser:
+    sec_pkcs12_encoder_destroy_context(p12enc);
     return rv;
 }
 
 void
 SEC_PKCS12DestroyExportContext(SEC_PKCS12ExportContext *p12ecx)
 {
     int i = 0;
 
@@ -2067,9 +2095,8 @@ SEC_PKCS12DestroyExportContext(SEC_PKCS1
 	    i++;
 	}
     }
 
     PK11_FreeSlot(p12ecx->slot);
 
     PORT_FreeArena(p12ecx->arena, PR_TRUE);
 }
-
diff --git a/security/nss/lib/smime/cmssiginfo.c b/security/nss/lib/smime/cmssiginfo.c
--- a/security/nss/lib/smime/cmssiginfo.c
+++ b/security/nss/lib/smime/cmssiginfo.c
@@ -33,17 +33,17 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /*
  * CMS signerInfo methods.
  *
- * $Id: cmssiginfo.c,v 1.32 2010/04/25 23:37:38 nelson%bolyard.com Exp $
+ * $Id: cmssiginfo.c,v 1.32.2.1 2010/08/28 19:51:44 nelson%bolyard.com Exp $
  */
 
 #include "cmslocal.h"
 
 #include "cert.h"
 #include "key.h"
 #include "secasn1.h"
 #include "secitem.h"
@@ -169,17 +169,17 @@ SECStatus
 NSS_CMSSignerInfo_Sign(NSSCMSSignerInfo *signerinfo, SECItem *digest, SECItem *contentType)
 {
     CERTCertificate *cert;
     SECKEYPrivateKey *privkey = NULL;
     SECOidTag digestalgtag;
     SECOidTag pubkAlgTag;
     SECItem signature = { 0 };
     SECStatus rv;
-    PLArenaPool *poolp, *tmppoolp;
+    PLArenaPool *poolp, *tmppoolp = NULL;
     SECAlgorithmID *algID, freeAlgID;
     CERTSubjectPublicKeyInfo *spki;
 
     PORT_Assert (digest != NULL);
 
     poolp = signerinfo->cmsg->poolp;
 
     switch (signerinfo->signerIdentifier.identifierType) {
@@ -293,16 +293,18 @@ NSS_CMSSignerInfo_Sign(NSSCMSSignerInfo 
 
     return SECSuccess;
 
 loser:
     if (signature.len != 0)
 	SECITEM_FreeItem (&signature, PR_FALSE);
     if (privkey)
 	SECKEY_DestroyPrivateKey(privkey);
+    if (tmppoolp)
+	PORT_FreeArena(tmppoolp, PR_FALSE);
     return SECFailure;
 }
 
 SECStatus
 NSS_CMSSignerInfo_VerifyCertificate(NSSCMSSignerInfo *signerinfo, CERTCertDBHandle *certdb,
 			    SECCertUsage certusage)
 {
     CERTCertificate *cert;
diff --git a/security/nss/lib/softoken/legacydb/keydb.c b/security/nss/lib/softoken/legacydb/keydb.c
--- a/security/nss/lib/softoken/legacydb/keydb.c
+++ b/security/nss/lib/softoken/legacydb/keydb.c
@@ -29,17 +29,17 @@
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
-/* $Id: keydb.c,v 1.11 2009/02/03 05:34:44 julien.pierre.boogz%sun.com Exp $ */
+/* $Id: keydb.c,v 1.11.22.1 2010/08/07 05:49:16 wtc%google.com Exp $ */
 
 #include "lowkeyi.h"
 #include "secasn1.h"
 #include "secder.h"
 #include "secoid.h"
 #include "blapi.h"
 #include "secitem.h"
 #include "pcert.h"
@@ -1240,33 +1240,30 @@ const SEC_ASN1Template lg_EncryptedDataI
         0, NULL, sizeof(LGEncryptedDataInfo) },
     { SEC_ASN1_INLINE | SEC_ASN1_XTRN,
         offsetof(LGEncryptedDataInfo,algorithm),
         SEC_ASN1_SUB(SECOID_AlgorithmIDTemplate) },
     { SEC_ASN1_OCTET_STRING,
         offsetof(LGEncryptedDataInfo,encryptedData) },
     { 0 }
 };
-static const unsigned char def_iter_data[] = { SEC_ASN1_INTEGER, 0x01, 0x01 };
-static const SECItem def_iter = { siBuffer , 
-				(unsigned char *)def_iter_data, 
-				sizeof(def_iter_data) };
 
 static SECItem *
 nsslowkey_EncodePW(SECOidTag alg, const SECItem *salt, SECItem *data)
 {
     NSSLowPasswordDataParam param;
     LGEncryptedDataInfo edi;
     PLArenaPool *arena;
     unsigned char one = 1;
     SECItem *epw = NULL;
     SECItem *encParam;
     SECStatus rv;
 
     param.salt = *salt;
+    param.iter.type = siBuffer;  /* encode as signed integer */
     param.iter.data = &one;
     param.iter.len = 1;
     edi.encryptedData = *data;
 
     arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);
     if (arena == NULL) {
 	return NULL;
     }
@@ -1292,16 +1289,17 @@ nsslowkey_DecodePW(const SECItem *derDat
 {
     NSSLowPasswordDataParam param;
     LGEncryptedDataInfo edi;
     PLArenaPool *arena;
     SECItem *pwe = NULL;
     SECStatus rv;
 
     salt->data = NULL;
+    param.iter.type = siBuffer;  /* decode as signed integer */
 
     arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);
     if (arena == NULL) {
 	return NULL;
     }
 
     rv = SEC_QuickDERDecodeItem(arena, &edi, lg_EncryptedDataInfoTemplate, 
 						derData);
@@ -1309,19 +1307,16 @@ nsslowkey_DecodePW(const SECItem *derDat
 	goto loser;
     }
     *alg = SECOID_GetAlgorithmTag(&edi.algorithm);
     rv = SEC_QuickDERDecodeItem(arena, &param, NSSLOWPasswordParamTemplate,
 						&edi.algorithm.parameters);
     if (rv != SECSuccess) {
 	goto loser;
     }
-    if (SECITEM_ItemsAreEqual(&param.iter, &def_iter) ) {
-	goto loser;
-    }
     rv = SECITEM_CopyItem(NULL, salt, &param.salt);
     if (rv != SECSuccess) {
 	goto loser;
     }
     pwe = SECITEM_DupItem(&edi.encryptedData);
 
 loser:
     if (!pwe && salt->data) {
diff --git a/security/nss/lib/ssl/ssl3con.c b/security/nss/lib/ssl/ssl3con.c
--- a/security/nss/lib/ssl/ssl3con.c
+++ b/security/nss/lib/ssl/ssl3con.c
@@ -34,17 +34,17 @@
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
-/* $Id: ssl3con.c,v 1.142.2.1 2010/07/31 04:33:52 wtc%google.com Exp $ */
+/* $Id: ssl3con.c,v 1.142.2.4 2010/09/01 19:47:11 wtc%google.com Exp $ */
 
 #include "cert.h"
 #include "ssl.h"
 #include "cryptohi.h"	/* for DSAU_ stuff */
 #include "keyhi.h"
 #include "secder.h"
 #include "secitem.h"
 
@@ -2842,17 +2842,21 @@ ssl3_DeriveMasterSecret(sslSocket *ss, P
     } else {
 	if (isDH) master_derive = CKM_SSL3_MASTER_KEY_DERIVE_DH;
 	else master_derive = CKM_SSL3_MASTER_KEY_DERIVE;
 	key_derive    = CKM_SSL3_KEY_AND_MAC_DERIVE;
 	keyFlags      = 0;
     }
 
     if (pms || !pwSpec->master_secret) {
-	master_params.pVersion                     = &pms_version;
+	if (isDH) {
+	    master_params.pVersion                     = NULL;
+	} else {
+	    master_params.pVersion                     = &pms_version;
+	}
 	master_params.RandomInfo.pClientRandom     = cr;
 	master_params.RandomInfo.ulClientRandomLen = SSL3_RANDOM_LENGTH;
 	master_params.RandomInfo.pServerRandom     = sr;
 	master_params.RandomInfo.ulServerRandomLen = SSL3_RANDOM_LENGTH;
 
 	params.data = (unsigned char *) &master_params;
 	params.len  = sizeof master_params;
     }
@@ -5297,18 +5301,20 @@ ssl3_HandleServerKeyExchange(sslSocket *
 	SECItem          dh_p      = {siBuffer, NULL, 0};
 	SECItem          dh_g      = {siBuffer, NULL, 0};
 	SECItem          dh_Ys     = {siBuffer, NULL, 0};
 
     	rv = ssl3_ConsumeHandshakeVariable(ss, &dh_p, 2, &b, &length);
     	if (rv != SECSuccess) {
 	    goto loser;		/* malformed. */
 	}
-	if (dh_p.len < 512/8)
+	if (dh_p.len < 512/8) {
+	    errCode = SSL_ERROR_WEAK_SERVER_EPHEMERAL_DH_KEY;
 	    goto alert_loser;
+	}
     	rv = ssl3_ConsumeHandshakeVariable(ss, &dh_g, 2, &b, &length);
     	if (rv != SECSuccess) {
 	    goto loser;		/* malformed. */
 	}
 	if (dh_g.len == 0 || dh_g.len > dh_p.len + 1 ||
 	   (dh_g.len == 1 && dh_g.data[0] == 0))
 	    goto alert_loser;
     	rv = ssl3_ConsumeHandshakeVariable(ss, &dh_Ys, 2, &b, &length);
diff --git a/security/nss/lib/ssl/sslerr.h b/security/nss/lib/ssl/sslerr.h
--- a/security/nss/lib/ssl/sslerr.h
+++ b/security/nss/lib/ssl/sslerr.h
@@ -31,17 +31,17 @@
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
-/* $Id: sslerr.h,v 1.11 2010/06/24 09:24:18 nelson%bolyard.com Exp $ */
+/* $Id: sslerr.h,v 1.11.2.2 2010/09/01 19:47:11 wtc%google.com Exp $ */
 #ifndef __SSL_ERR_H_
 #define __SSL_ERR_H_
 
 
 #define SSL_ERROR_BASE				(-0x3000)
 #define SSL_ERROR_LIMIT				(SSL_ERROR_BASE + 1000)
 
 #define IS_SSL_ERROR(code) \
@@ -196,13 +196,15 @@ SSL_ERROR_RX_UNEXPECTED_NEW_SESSION_TICK
 SSL_ERROR_RX_MALFORMED_NEW_SESSION_TICKET  = (SSL_ERROR_BASE + 110),
 
 SSL_ERROR_DECOMPRESSION_FAILURE		= (SSL_ERROR_BASE + 111),
 SSL_ERROR_RENEGOTIATION_NOT_ALLOWED     = (SSL_ERROR_BASE + 112),
 SSL_ERROR_UNSAFE_NEGOTIATION            = (SSL_ERROR_BASE + 113),
 
 SSL_ERROR_RX_UNEXPECTED_UNCOMPRESSED_RECORD	= (SSL_ERROR_BASE + 114),
 
+SSL_ERROR_WEAK_SERVER_EPHEMERAL_DH_KEY  = (SSL_ERROR_BASE + 115),
+
 SSL_ERROR_END_OF_LIST	/* let the c compiler determine the value of this. */
 } SSLErrorCodes;
 #endif /* NO_SECURITY_ERROR_ENUM */
 
 #endif /* __SSL_ERR_H_ */
diff --git a/security/nss/lib/ssl/sslinfo.c b/security/nss/lib/ssl/sslinfo.c
--- a/security/nss/lib/ssl/sslinfo.c
+++ b/security/nss/lib/ssl/sslinfo.c
@@ -29,17 +29,17 @@
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
-/* $Id: sslinfo.c,v 1.23 2010/01/15 01:49:33 alexei.volkov.bugs%sun.com Exp $ */
+/* $Id: sslinfo.c,v 1.23.2.1 2010/09/02 01:13:46 wtc%google.com Exp $ */
 #include "ssl.h"
 #include "sslimpl.h"
 #include "sslproto.h"
 
 static const char *
 ssl_GetCompressionMethodName(SSLCompressionMethod compression)
 {
     switch (compression) {
@@ -55,33 +55,41 @@ ssl_GetCompressionMethodName(SSLCompress
 }
 
 SECStatus 
 SSL_GetChannelInfo(PRFileDesc *fd, SSLChannelInfo *info, PRUintn len)
 {
     sslSocket *      ss;
     SSLChannelInfo   inf;
     sslSessionID *   sid;
+    PRBool           enoughFirstHsDone = PR_FALSE;
 
     if (!info || len < sizeof inf.length) { 
 	PORT_SetError(SEC_ERROR_INVALID_ARGS);
 	return SECFailure;
     }
 
     ss = ssl_FindSocket(fd);
     if (!ss) {
 	SSL_DBG(("%d: SSL[%d]: bad socket in SSL_GetChannelInfo",
 		 SSL_GETPID(), fd));
 	return SECFailure;
     }
 
     memset(&inf, 0, sizeof inf);
     inf.length = PR_MIN(sizeof inf, len);
 
-    if (ss->opt.useSecurity && ss->firstHsDone) {
+    if (ss->firstHsDone) {
+	enoughFirstHsDone = PR_TRUE;
+    } else if (ss->version >= SSL_LIBRARY_VERSION_3_0 &&
+	       ssl3_CanFalseStart(ss)) {
+	enoughFirstHsDone = PR_TRUE;
+    }
+
+    if (ss->opt.useSecurity && enoughFirstHsDone) {
         sid = ss->sec.ci.sid;
 	inf.protocolVersion  = ss->version;
 	inf.authKeyBits      = ss->sec.authKeyBits;
 	inf.keaKeyBits       = ss->sec.keaKeyBits;
 	if (ss->version < SSL_LIBRARY_VERSION_3_0) { /* SSL2 */
 	    inf.cipherSuite           = ss->sec.cipherType | 0xff00;
 	    inf.compressionMethod     = ssl_compression_null;
 	    inf.compressionMethodName = "N/A";
diff --git a/security/nss/lib/ssl/sslsecur.c b/security/nss/lib/ssl/sslsecur.c
--- a/security/nss/lib/ssl/sslsecur.c
+++ b/security/nss/lib/ssl/sslsecur.c
@@ -32,17 +32,17 @@
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
-/* $Id: sslsecur.c,v 1.43.2.1 2010/07/31 04:33:52 wtc%google.com Exp $ */
+/* $Id: sslsecur.c,v 1.43.2.2 2010/08/26 18:06:55 wtc%google.com Exp $ */
 #include "cert.h"
 #include "secitem.h"
 #include "keyhi.h"
 #include "ssl.h"
 #include "sslimpl.h"
 #include "sslproto.h"
 #include "secoid.h"	/* for SECOID_GetALgorithmTag */
 #include "pk11func.h"	/* for PK11_GenerateRandom */
@@ -1353,26 +1353,19 @@ int
 SSL_DataPending(PRFileDesc *fd)
 {
     sslSocket *ss;
     int        rv  = 0;
 
     ss = ssl_FindSocket(fd);
 
     if (ss && ss->opt.useSecurity) {
-
-	ssl_Get1stHandshakeLock(ss);
-	ssl_GetSSL3HandshakeLock(ss);
-
 	ssl_GetRecvBufLock(ss);
 	rv = ss->gs.writeOffset - ss->gs.readOffset;
 	ssl_ReleaseRecvBufLock(ss);
-
-	ssl_ReleaseSSL3HandshakeLock(ss);
-	ssl_Release1stHandshakeLock(ss);
     }
 
     return rv;
 }
 
 SECStatus
 SSL_InvalidateSession(PRFileDesc *fd)
 {
diff --git a/security/nss/lib/util/secoid.c b/security/nss/lib/util/secoid.c
--- a/security/nss/lib/util/secoid.c
+++ b/security/nss/lib/util/secoid.c
@@ -817,17 +817,17 @@ const static SECOidData oids[SEC_OID_TOT
     OD( nsExtEntityLogo, SEC_OID_NS_CERT_EXT_ENTITY_LOGO,
 	"Certificate Entity Logo", 
 	CKM_INVALID_MECHANISM, UNSUPPORTED_CERT_EXTENSION ),
     OD( nsExtUserPicture, SEC_OID_NS_CERT_EXT_USER_PICTURE,
 	"Certificate User Picture", 
 	CKM_INVALID_MECHANISM, UNSUPPORTED_CERT_EXTENSION ),
     OD( nsExtSSLServerName, SEC_OID_NS_CERT_EXT_SSL_SERVER_NAME,
 	"Certificate SSL Server Name", 
-	CKM_INVALID_MECHANISM, SUPPORTED_CERT_EXTENSION ),
+	CKM_INVALID_MECHANISM, UNSUPPORTED_CERT_EXTENSION ),
     OD( nsExtComment, SEC_OID_NS_CERT_EXT_COMMENT,
 	"Certificate Comment", 
 	CKM_INVALID_MECHANISM, SUPPORTED_CERT_EXTENSION ),
     OD( nsExtLostPasswordURL, SEC_OID_NS_CERT_EXT_LOST_PASSWORD_URL,
         "Lost Password URL", 
 	CKM_INVALID_MECHANISM, SUPPORTED_CERT_EXTENSION ),
     OD( nsExtCertRenewalTime, SEC_OID_NS_CERT_EXT_CERT_RENEWAL_TIME, 
 	"Certificate Renewal Time", 
diff --git a/security/patches/README b/security/patches/README
--- a/security/patches/README
+++ b/security/patches/README
@@ -1,10 +1,2 @@
 This directory contains patches that were added locally
 on top of the NSS release.
-
-File: msvc-aslr.patch
-https://bugzilla.mozilla.org/show_bug.cgi?id=567134
-Use the -DYNAMICBASE linker option to enable ASLR on Windows.
-
-File: maemo-rpath-link.patch
-https://bugzilla.mozilla.org/show_bug.cgi?id=585247
-Add the -rpath-link linker flag required for Maemo/Scratchbox.
diff --git a/security/patches/maemo-rpath-link.patch b/security/patches/maemo-rpath-link.patch
deleted file mode 100644
--- a/security/patches/maemo-rpath-link.patch
+++ /dev/null
@@ -1,30 +0,0 @@
-Index: mozilla/security/coreconf/Linux.mk
-===================================================================
-RCS file: /cvsroot/mozilla/security/coreconf/Linux.mk,v
-retrieving revision 1.47
-diff -u -8 -r1.47 Linux.mk
---- mozilla/security/coreconf/Linux.mk	29 Jul 2010 04:18:10 -0000	1.47
-+++ mozilla/security/coreconf/Linux.mk	7 Aug 2010 02:59:37 -0000
-@@ -149,16 +149,22 @@
- DSO_LDOPTS		= -shared $(ARCHFLAG)
- # The linker on Red Hat Linux 7.2 and RHEL 2.1 (GNU ld version 2.11.90.0.8)
- # incorrectly reports undefined references in the libraries we link with, so
- # we don't use -z defs there.
- ZDEFS_FLAG		= -Wl,-z,defs
- DSO_LDOPTS		+= $(if $(findstring 2.11.90.0.8,$(shell ld -v)),,$(ZDEFS_FLAG))
- LDFLAGS			+= $(ARCHFLAG)
- 
-+# On Maemo, we need to use the -rpath-link flag for even the standard system
-+# library directories.
-+ifdef _SBOX_DIR
-+LDFLAGS			+= -Wl,-rpath-link,/usr/lib:/lib
-+endif
-+
- # INCLUDES += -I/usr/include -Y/usr/include/linux
- G++INCLUDES		= -I/usr/include/g++
- 
- #
- # Always set CPU_TAG on Linux, WINCE.
- #
- CPU_TAG = _$(CPU_ARCH)
- 
diff --git a/security/patches/msvc-aslr.patch b/security/patches/msvc-aslr.patch
deleted file mode 100644
--- a/security/patches/msvc-aslr.patch
+++ /dev/null
@@ -1,26 +0,0 @@
-Index: mozilla/security/coreconf/WIN32.mk
-===================================================================
-RCS file: /cvsroot/mozilla/security/coreconf/WIN32.mk,v
-retrieving revision 1.39.2.1
-diff -u -p -8 -r1.39.2.1 WIN32.mk
---- mozilla/security/coreconf/WIN32.mk	31 Jul 2010 04:23:37 -0000	1.39.2.1
-+++ mozilla/security/coreconf/WIN32.mk	10 Aug 2010 20:46:44 -0000
-@@ -126,17 +126,17 @@ else # !NS_USE_GCC
-     ifdef BUILD_OPT
- 	OS_CFLAGS  += -MD
- 	ifeq (11,$(ALLOW_OPT_CODE_SIZE)$(OPT_CODE_SIZE))
- 		OPTIMIZER += -O1
- 	else
- 		OPTIMIZER += -O2
- 	endif
- 	DEFINES    += -UDEBUG -U_DEBUG -DNDEBUG
--	DLLFLAGS   += -OUT:"$@"
-+	DLLFLAGS   += -DYNAMICBASE -OUT:"$@"
- 	ifdef MOZ_DEBUG_SYMBOLS
- 		ifdef MOZ_DEBUG_FLAGS
- 			OPTIMIZER += $(MOZ_DEBUG_FLAGS) -Fd$(OBJDIR)/
- 		else
- 			OPTIMIZER += -Zi -Fd$(OBJDIR)/
- 		endif
- 		DLLFLAGS += -DEBUG -OPT:REF
- 		LDFLAGS += -DEBUG -OPT:REF
