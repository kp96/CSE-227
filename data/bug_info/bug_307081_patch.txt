# HG changeset patch
# User Cykesiopka <cykesiopka.bmo@gmail.com>
# Parent  b9ed7da37ec5592bf6fe3f71a523974918b28f9d
Bug 307081 - [NOT FOR CHECKIN OR REVIEW] Mochitest to allow easy triggering of client auth for testing.

MozReview-Commit-ID: 2GfD7l4xjro

diff --git a/build/pgo/certs/genclientcerts.py b/build/pgo/certs/genclientcerts.py
new file mode 100755
--- /dev/null
+++ b/build/pgo/certs/genclientcerts.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python
+
+"""Generates client certificates that chain to pgoca.ca, for use in TLS client
+authentication testing.
+"""
+
+from __future__ import print_function
+
+import contextlib
+import os
+import random
+import shutil
+import subprocess
+import tempfile
+
+__HERE = os.path.dirname(os.path.abspath(__file__))
+
+@contextlib.contextmanager
+def create_tmp_dir():
+    tmp_dir = tempfile.mkdtemp()
+    yield tmp_dir
+    shutil.rmtree(tmp_dir, ignore_errors=True)
+
+def extract_private_key(p12_path, key_out_path):
+    print("Extracting key from", p12_path, "to", key_out_path)
+    subprocess.check_call(["openssl", "pkcs12",
+                           "-in", p12_path,
+                           "-nocerts",
+                           "-nodes",
+                           "-nomacver",
+                           "-out", key_out_path,
+                           "-passin", "pass:",
+                           "-passout", "pass:"])
+
+def generate_p12(cert_name, subject, extensions_str, signer_key_path,
+                 signer_cert_path, p12_out_dir_path):
+    with create_tmp_dir() as tmp_dir:
+        key_path = os.path.join(tmp_dir, "{}.key".format(cert_name))
+        print("Generating key at", key_path)
+        subprocess.check_call(["openssl", "genpkey",
+                               "-algorithm", "RSA",
+                               "-out", key_path,
+                               "-pkeyopt", "rsa_keygen_bits:2048"])
+
+        csr_path = os.path.join(tmp_dir, "{}.csr".format(cert_name))
+        print("Generating CSR at", csr_path)
+        subprocess.check_call(["openssl", "req",
+                               "-batch",
+                               "-extensions", "v3_ca",
+                               "-key", key_path,
+                               "-new",
+                               "-out", csr_path,
+                               "-subj", subject,
+                               "-utf8"])
+
+        cert_path = os.path.join(tmp_dir, "{}.cert".format(cert_name))
+        print("Generating cert at", cert_path)
+        with tempfile.NamedTemporaryFile() as extensions_file:
+            extensions_file.write(extensions_str)
+            extensions_file.flush()
+            subprocess.check_call(["openssl", "x509",
+                                   "-CA", signer_cert_path,
+                                   "-CAform", "PEM",
+                                   "-CAkey", signer_key_path,
+                                   "-days", str(10 * 365),
+                                   "-extfile", extensions_file.name,
+                                   "-in", csr_path,
+                                   "-out", cert_path,
+                                   "-req",
+                                   "-set_serial", str(random.randint(10, 1000)),
+                                   "-sha256"])
+
+        p12_out_path = os.path.join(p12_out_dir_path,
+                                    "{}.client".format(cert_name))
+        print("Generating .p12 file at", p12_out_path)
+        subprocess.check_call(["openssl", "pkcs12",
+                               "-export",
+                               "-in", cert_path,
+                               "-inkey", key_path,
+                               "-out", p12_out_path,
+                               "-passin", "pass:",
+                               "-passout", "pass:"])
+
+def main():
+    pgoca_cert_path = os.path.join(__HERE, "pgoca.ca")
+    pgoca_p12_path = os.path.join(__HERE, "pgoca.p12")
+
+    with create_tmp_dir() as tmp_dir:
+        priv_key_path = os.path.join(tmp_dir, "pgoca.key")
+        extract_private_key(pgoca_p12_path, priv_key_path)
+
+        generate_p12("testclientcert1", "/CN=Test Client Cert 1",
+                     "keyUsage = digitalSignature\n",
+                     priv_key_path, pgoca_cert_path, __HERE)
+        generate_p12("testclientcert2",
+                     "/CN=Test Client Cert 2/emailAddress=testclient@example.com",
+                     "", priv_key_path, pgoca_cert_path, __HERE)
+
+if __name__ == "__main__":
+    main()
diff --git a/build/pgo/certs/testclientcert1.client b/build/pgo/certs/testclientcert1.client
new file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..100de4be56cbd3b23430385016107392fac88524
GIT binary patch
literal 2261
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
Yb4!Kt*Cu}f!|(|nX)=yE?Y~>{U)tLv4gdfE

diff --git a/build/pgo/certs/testclientcert2.client b/build/pgo/certs/testclientcert2.client
new file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..fc60da10a7610a7d1d1a828ed3f9e6d586ca79fb
GIT binary patch
literal 2285
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
AJ^%m!

diff --git a/security/manager/ssl/nsNSSIOLayer.cpp b/security/manager/ssl/nsNSSIOLayer.cpp
--- a/security/manager/ssl/nsNSSIOLayer.cpp
+++ b/security/manager/ssl/nsNSSIOLayer.cpp
@@ -2255,26 +2255,28 @@ ClientAuthDataRunnable::RunOnTargetThrea
       // note that we are allowing expired certs in this list
       UniqueCERTCertList certList(
         CERT_FindUserCertsByUsage(CERT_GetDefaultCertDB(), certUsageSSLClient,
                                   false, false, wincx));
       if (!certList) {
         goto loser;
       }
 
-      if (mCANames->nnames != 0) {
-        // filter the list to those issued by CAs supported by the server
-        mRV = CERT_FilterCertListByCANames(certList.get(),
-                                           mCANames->nnames,
-                                           caNameStrings,
-                                           certUsageSSLClient);
-        if (mRV != SECSuccess) {
-          goto loser;
-        }
-      }
+      // This is commented out to force all client certs to show up regardless
+      // of the server being connected to.
+//      if (mCANames->nnames != 0) {
+//        // filter the list to those issued by CAs supported by the server
+//        mRV = CERT_FilterCertListByCANames(certList.get(),
+//                                           mCANames->nnames,
+//                                           caNameStrings,
+//                                           certUsageSSLClient);
+//        if (mRV != SECSuccess) {
+//          goto loser;
+//        }
+//      }
 
       if (CERT_LIST_END(CERT_LIST_HEAD(certList), certList)) {
         // list is empty - no matching certs
         goto loser;
       }
 
       // Get CN and O of the subject and O of the issuer
       UniquePORTString ccn(CERT_GetCommonName(&mServerCert->subject));
diff --git a/security/manager/ssl/tests/mochitest/stricttransportsecurity/chrome.ini b/security/manager/ssl/tests/mochitest/stricttransportsecurity/chrome.ini
--- a/security/manager/ssl/tests/mochitest/stricttransportsecurity/chrome.ini
+++ b/security/manager/ssl/tests/mochitest/stricttransportsecurity/chrome.ini
@@ -1,6 +1,6 @@
 [DEFAULT]
 tags = psm
-skip-if = buildapp == 'b2g' || os == 'android'
 support-files = page_blank.html
 
 [test_sts_privatebrowsing_perwindowpb.html]
+[test_clientauth.html]
diff --git a/security/manager/ssl/tests/mochitest/stricttransportsecurity/test_clientauth.html b/security/manager/ssl/tests/mochitest/stricttransportsecurity/test_clientauth.html
new file mode 100644
--- /dev/null
+++ b/security/manager/ssl/tests/mochitest/stricttransportsecurity/test_clientauth.html
@@ -0,0 +1,35 @@
+<!-- Any copyright is dedicated to the Public Domain.
+   - http://creativecommons.org/publicdomain/zero/1.0/ -->
+
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Client Auth UI Test</title>
+   <script type="application/javascript"
+           src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="application/javascript"
+          src="chrome://mochikit/content/tests/SimpleTest/SpawnTask.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+
+  <script class="testbody" type="text/javascript">
+    "use strict";
+
+    // Connects to a domain that requires client authentication to allow the
+    // nsIClientAuthDialogs implementation to be tested.
+
+    Components.utils.import("resource://testing-common/BrowserTestUtils.jsm");
+
+    add_task(function* () {
+      yield SpecialPowers.pushPrefEnv({"set": [["security.default_personal_cert",
+                                                "Ask Every Time"]]});
+      let {gBrowser} =
+        SpecialPowers._getTopChromeWindow(SpecialPowers.window.get());
+      yield BrowserTestUtils.loadURI(gBrowser.selectedBrowser,
+                                     "https://requireclientcert.example.com");
+      yield BrowserTestUtils.browserLoaded(gBrowser.selectedBrowser);
+      ok(true, "foo");
+    });
+  </script>
+</head>
+<body></body>
+</html>
