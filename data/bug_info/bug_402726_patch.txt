Index: mozilla/browser/base/content/pageinfo/security.js
===================================================================
RCS file: /cvsroot/mozilla/browser/base/content/pageinfo/security.js,v
retrieving revision 1.8
diff -u -r1.8 security.js
--- mozilla/browser/base/content/pageinfo/security.js	23 Aug 2007 18:57:42 -0000	1.8
+++ mozilla/browser/base/content/pageinfo/security.js	6 Nov 2007 17:34:22 -0000
@@ -82,15 +82,26 @@
       issuerName = this.mapIssuerOrganization(cert.issuerOrganization);
       if (!issuerName) issuerName = cert.issuerName;
 
-      return {
+      var retval = {
         hostName : hName,
         cAName : issuerName,
-        encryptionAlgorithm : status.cipherName,
-        encryptionStrength : status.secretKeyLength,
+        encryptionAlgorithm : undefined,
+        encryptionStrength : undefined,
         isBroken : isBroken,
         cert : cert,
         fullLocation : gWindow.location
       };
+
+      try {
+        retval.encryptionAlgorithm = status.cipherName;
+        retval.encryptionStrength = status.secretKeyLength;
+      }
+      catch (e) {
+        retval.encryptionAlgorithm = undefined;
+        retval.encryptionStrength = undefined;
+      }
+
+      return retval;
     } else {
       return {
         hostName : hName,
Index: mozilla/security/manager/ssl/src/nsNSSCallbacks.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsNSSCallbacks.cpp,v
retrieving revision 1.56
diff -u -r1.56 nsNSSCallbacks.cpp
--- mozilla/security/manager/ssl/src/nsNSSCallbacks.cpp	19 Oct 2007 19:10:09 -0000	1.56
+++ mozilla/security/manager/ssl/src/nsNSSCallbacks.cpp	6 Nov 2007 17:34:23 -0000
@@ -853,20 +853,20 @@
 
       CERT_DestroyCertList(certList);
     }
-    else {
-      // The connection will be terminated, let's provide a minimal SSLStatus
-      // to the caller that contains at least the cert and its status.
-      nsNSSSocketInfo* infoObject = (nsNSSSocketInfo*) fd->higher->secret;
 
-      nsCOMPtr<nsSSLStatus> status;
-      infoObject->GetSSLStatus(getter_AddRefs(status));
-      if (!status) {
-        status = new nsSSLStatus();
-        infoObject->SetSSLStatus(status);
-      }
-      if (status) {
-        status->mServerCert = new nsNSSCertificate(serverCert);
-      }
+    // The connection may get terminated, for example, if the server requires
+    // a client cert. Let's provide a minimal SSLStatus
+    // to the caller that contains at least the cert and its status.
+    nsNSSSocketInfo* infoObject = (nsNSSSocketInfo*) fd->higher->secret;
+
+    nsCOMPtr<nsSSLStatus> status;
+    infoObject->GetSSLStatus(getter_AddRefs(status));
+    if (!status) {
+      status = new nsSSLStatus();
+      infoObject->SetSSLStatus(status);
+    }
+    if (status) {
+      status->mServerCert = new nsNSSCertificate(serverCert);
     }
   }
 
Index: mozilla/suite/browser/pageinfo/security.js
===================================================================
RCS file: /cvsroot/mozilla/suite/browser/pageinfo/security.js,v
retrieving revision 1.1
diff -u -r1.1 security.js
--- mozilla/suite/browser/pageinfo/security.js	21 Sep 2007 13:21:28 -0000	1.1
+++ mozilla/suite/browser/pageinfo/security.js	12 Nov 2007 22:38:47 -0000
@@ -83,15 +83,26 @@
       issuerName = this.mapIssuerOrganization(cert.issuerOrganization);
       if (!issuerName) issuerName = cert.issuerName;
 
-      return {
+      var retval = {
         hostName : hName,
         cAName : issuerName,
-        encryptionAlgorithm : status.cipherName,
-        encryptionStrength : status.secretKeyLength,
+        encryptionAlgorithm : undefined,
+        encryptionStrength : undefined,
         isBroken : isBroken,
         cert : cert,
         fullLocation : gWindow.location
       };
+
+      try {
+        retval.encryptionAlgorithm = status.cipherName;
+        retval.encryptionStrength = status.secretKeyLength;
+      }
+      catch (e) {
+        retval.encryptionAlgorithm = undefined;
+        retval.encryptionStrength = undefined;
+      }
+
+      return retval;
     } else {
       return {
         hostName : hName,
