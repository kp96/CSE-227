Index: caps/idl/nsIScriptSecurityManager.idl
===================================================================
RCS file: /home/bzbarsky/mozilla/cvs-mirror/mozilla/caps/idl/nsIScriptSecurityManager.idl,v
retrieving revision 1.69
diff -u -p -d -1 -0 -r1.69 nsIScriptSecurityManager.idl
--- caps/idl/nsIScriptSecurityManager.idl	17 Feb 2006 16:12:17 -0000	1.69
+++ caps/idl/nsIScriptSecurityManager.idl	13 Aug 2006 23:53:15 -0000
@@ -34,21 +34,21 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsISupports.idl"
 #include "nsIPrincipal.idl"
 #include "nsIXPCSecurityManager.idl"
 interface nsIURI;
 
 
-[scriptable, uuid(6c86a0d8-7a19-42a4-be18-d282a26388fd)]
+[scriptable, uuid(5a46e611-cf4a-4407-a5b4-002fcf051120)]
 interface nsIScriptSecurityManager : nsIXPCSecurityManager
 {
     ///////////////// Security Checks //////////////////
     /**
      * Checks whether the running script is allowed to access aProperty.
      */
     [noscript] void checkPropertyAccess(in JSContextPtr aJSContext,
                                         in JSObjectPtr aJSObject,
                                         in string aClassName,
                                         in JSVal aProperty,
@@ -92,44 +92,61 @@ interface nsIScriptSecurityManager : nsI
     //   WARNING: Support for this value was added in Mozilla 1.7.8 and
     //   Firefox 1.0.4.  Use in prior versions WILL BE IGNORED.
     const unsigned long DISALLOW_SCRIPT = 1 << 3;
 
     /**
      * Check that content with principal aPrincipal can load "uri".
      *
      * Will return error code NS_ERROR_DOM_BAD_URI if the load request 
      * should be denied.
      *
-     * @param aPrincipal the URI causing the load
+     * @param aPrincipal the principal identifying the actor causing the load
      * @param uri the URI that is being loaded
      * @param flags the permission set, see above
      */
     void checkLoadURIWithPrincipal(in nsIPrincipal aPrincipal,
                                    in nsIURI uri, 
                                    in unsigned long flags);
 
     /**
      * Check that content from "from" can load "uri".
      *
      * Will return error code NS_ERROR_DOM_BAD_URI if the load request 
      * should be denied.
      *
      * @param from the URI causing the load
      * @param uri the URI that is being loaded
      * @param flags the permission set, see above
+     *
+     * @deprecated Use checkLoadURIWithPrincipal instead of this function.
      */
     void checkLoadURI(in nsIURI from, in nsIURI uri, 
                       in unsigned long flags);
 
     /**
+     * Similar to checkLoadURIWithPrincipal but there are two differences:
+     *
+     * 1)  The URI is a string, not a URI object.
+     * 2) This function assumes that the URI may still be subject to fixup (and
+     * hence will check whether fixed-up versions of the URI are allowed to
+     * load as well); if any of the versions of this URI is not allowed, this
+     * function will return error code NS_ERROR_DOM_BAD_URI.
+     */
+    void checkLoadURIStrWithPrincipal(in nsIPrincipal aPrincipal,
+                                      in AUTF8String uri, 
+                                      in unsigned long flags);     
+    
+    /**
      * Same as CheckLoadURI but takes string arguments for ease of use
      * by scripts
+     *
+     * @deprecated Use checkLoadURIStrWithPrincipal instead of this function.
      */
     void checkLoadURIStr(in AUTF8String from, in AUTF8String uri, 
                          in unsigned long flags);
 
     /**
      * Check that the function 'funObj' is allowed to run on 'targetObj'
      *
      * Will return error code NS_ERROR_DOM_SECURITY_ERR if the function
      * should not run
      *
Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /home/bzbarsky/mozilla/cvs-mirror/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.307
diff -u -p -d -1 -0 -r1.307 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	27 Jun 2006 00:56:41 -0000	1.307
+++ caps/src/nsScriptSecurityManager.cpp	13 Aug 2006 23:52:43 -0000
@@ -1458,26 +1458,45 @@ NS_IMETHODIMP
 nsScriptSecurityManager::CheckLoadURIStr(const nsACString& aSourceURIStr,
                                          const nsACString& aTargetURIStr,
                                          PRUint32 aFlags)
 {
     // FIXME: bug 327244 -- this function should really die...  Really truly.
     nsCOMPtr<nsIURI> source;
     nsresult rv = NS_NewURI(getter_AddRefs(source), aSourceURIStr,
                             nsnull, nsnull, sIOService);
     NS_ENSURE_SUCCESS(rv, rv);
 
+    // Note: this is not _quite_ right if aSourceURI has
+    // NS_NULLPRINCIPAL_SCHEME, but we'll just extract the scheme in
+    // CheckLoadURIWithPrincipal anyway, so this is good enough.  This method
+    // really needs to go away....
+    nsCOMPtr<nsIPrincipal> sourcePrincipal;
+    rv = CreateCodebasePrincipal(source,
+                                 getter_AddRefs(sourcePrincipal));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    return CheckLoadURIStrWithPrincipal(sourcePrincipal, aTargetURIStr,
+                                        aFlags);
+}
+
+NS_IMETHODIMP
+nsScriptSecurityManager::CheckLoadURIStrWithPrincipal(nsIPrincipal* aPrincipal,
+                                                      const nsACString& aTargetURIStr,
+                                                      PRUint32 aFlags)
+{
+    nsresult rv;
     nsCOMPtr<nsIURI> target;
     rv = NS_NewURI(getter_AddRefs(target), aTargetURIStr,
                    nsnull, nsnull, sIOService);
     NS_ENSURE_SUCCESS(rv, rv);
 
-    rv = CheckLoadURI(source, target, aFlags);
+    rv = CheckLoadURIWithPrincipal(aPrincipal, target, aFlags);
     NS_ENSURE_SUCCESS(rv, rv);
 
     // Now start testing fixup -- since aTargetURIStr is a string, not
     // an nsIURI, we may well end up fixing it up before loading.
     // Note: This needs to stay in sync with the nsIURIFixup api.
     nsCOMPtr<nsIURIFixup> fixup = do_GetService(NS_URIFIXUP_CONTRACTID);
     if (!fixup) {
         return rv;
     }
 
@@ -1487,21 +1506,21 @@ nsScriptSecurityManager::CheckLoadURIStr
         nsIURIFixup::FIXUP_FLAGS_MAKE_ALTERNATE_URI,
         nsIURIFixup::FIXUP_FLAG_ALLOW_KEYWORD_LOOKUP |
         nsIURIFixup::FIXUP_FLAGS_MAKE_ALTERNATE_URI
     };
 
     for (PRUint32 i = 0; i < NS_ARRAY_LENGTH(flags); ++i) {
         rv = fixup->CreateFixupURI(aTargetURIStr, flags[i],
                                    getter_AddRefs(target));
         NS_ENSURE_SUCCESS(rv, rv);
 
-        rv = CheckLoadURI(source, target, aFlags);
+        rv = CheckLoadURIWithPrincipal(aPrincipal, target, aFlags);
         NS_ENSURE_SUCCESS(rv, rv);
     }
 
     return rv;
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::CheckFunctionAccess(JSContext *aCx, void *aFunObj,
                                              void *aTargetObj)
 {
