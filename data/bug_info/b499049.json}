{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basb499049\""},"diff":[{"chunks":[{"content":"@@ -88,9 +88,11 @@","changes":[{"type":"normal","normal":true,"ln1":88,"ln2":88,"content":" #pragma GCC visibility push(default)"},{"type":"normal","normal":true,"ln1":89,"ln2":89,"content":" #endif"},{"type":"normal","normal":true,"ln1":90,"ln2":90,"content":" extern __ptr_t __libc_malloc(size_t);"},{"type":"add","add":true,"ln":91,"content":"+extern __ptr_t __libc_calloc(size_t, size_t);"},{"type":"normal","normal":true,"ln1":91,"ln2":92,"content":" extern __ptr_t __libc_realloc(__ptr_t, size_t);"},{"type":"normal","normal":true,"ln1":92,"ln2":93,"content":" extern void    __libc_free(__ptr_t);"},{"type":"normal","normal":true,"ln1":93,"ln2":94,"content":" extern __ptr_t __libc_memalign(size_t, size_t);"},{"type":"add","add":true,"ln":95,"content":"+extern __ptr_t __libc_valloc(size_t);"},{"type":"normal","normal":true,"ln1":94,"ln2":96,"content":" #ifdef WRAP_SYSTEM_INCLUDES"},{"type":"normal","normal":true,"ln1":95,"ln2":97,"content":" #pragma GCC visibility pop"},{"type":"normal","normal":true,"ln1":96,"ln2":98,"content":" #endif"}],"oldStart":88,"oldLines":9,"newStart":88,"newLines":11},{"content":"@@ -147,8 +149,11 @@ static char      *sdlogname = NULL; /* filename for shutdown leak log */","changes":[{"type":"normal","normal":true,"ln1":147,"ln2":149,"content":"  * the performance cost of repeated TM_TLS_GET_DATA calls when"},{"type":"normal","normal":true,"ln1":148,"ln2":150,"content":"  * trace-malloc is disabled (which is not as bad as the locking we used"},{"type":"normal","normal":true,"ln1":149,"ln2":151,"content":"  * to have)."},{"type":"add","add":true,"ln":152,"content":"+ *"},{"type":"add","add":true,"ln":153,"content":"+ * It must default to zero, since it can be tested by the Linux malloc"},{"type":"add","add":true,"ln":154,"content":"+ * hooks before NS_TraceMallocStartup sets it."},{"type":"normal","normal":true,"ln1":150,"ln2":155,"content":"  */"},{"type":"del","del":true,"ln":151,"content":"-static uint32 tracing_enabled = 1;"},{"type":"add","add":true,"ln":156,"content":"+static uint32 tracing_enabled = 0;"},{"type":"normal","normal":true,"ln1":152,"ln2":157,"content":" "},{"type":"normal","normal":true,"ln1":153,"ln2":158,"content":" /*"},{"type":"normal","normal":true,"ln1":154,"ln2":159,"content":"  * This lock must be held while manipulating the calltree, the"}],"oldStart":147,"oldLines":8,"newStart":149,"newLines":11},{"content":"@@ -157,18 +162,33 @@ static uint32 tracing_enabled = 1;","changes":[{"type":"normal","normal":true,"ln1":157,"ln2":162,"content":"  * Callers should not *enter* the lock without checking suppress_tracing"},{"type":"normal","normal":true,"ln1":158,"ln2":163,"content":"  * first; otherwise they risk trying to re-enter on the same thread."},{"type":"normal","normal":true,"ln1":159,"ln2":164,"content":"  */"},{"type":"del","del":true,"ln":160,"content":"-#define TM_ENTER_LOCK()                                                       \\"},{"type":"add","add":true,"ln":165,"content":"+#define TM_ENTER_LOCK(t)                                                      \\"},{"type":"normal","normal":true,"ln1":161,"ln2":166,"content":"     PR_BEGIN_MACRO                                                            \\"},{"type":"add","add":true,"ln":167,"content":"+        PR_ASSERT(t->suppress_tracing != 0);                                  \\"},{"type":"normal","normal":true,"ln1":162,"ln2":168,"content":"         if (tmlock)                                                           \\"},{"type":"normal","normal":true,"ln1":163,"ln2":169,"content":"             PR_Lock(tmlock);                                                  \\"},{"type":"normal","normal":true,"ln1":164,"ln2":170,"content":"     PR_END_MACRO"},{"type":"normal","normal":true,"ln1":165,"ln2":171,"content":" "},{"type":"del","del":true,"ln":166,"content":"-#define TM_EXIT_LOCK()                                                        \\"},{"type":"add","add":true,"ln":172,"content":"+#define TM_EXIT_LOCK(t)                                                       \\"},{"type":"normal","normal":true,"ln1":167,"ln2":173,"content":"     PR_BEGIN_MACRO                                                            \\"},{"type":"add","add":true,"ln":174,"content":"+        PR_ASSERT(t->suppress_tracing != 0);                                  \\"},{"type":"normal","normal":true,"ln1":168,"ln2":175,"content":"         if (tmlock)                                                           \\"},{"type":"normal","normal":true,"ln1":169,"ln2":176,"content":"             PR_Unlock(tmlock);                                                \\"},{"type":"normal","normal":true,"ln1":170,"ln2":177,"content":"     PR_END_MACRO"},{"type":"normal","normal":true,"ln1":171,"ln2":178,"content":" "},{"type":"add","add":true,"ln":179,"content":"+#define TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t)                                 \\"},{"type":"add","add":true,"ln":180,"content":"+    PR_BEGIN_MACRO                                                            \\"},{"type":"add","add":true,"ln":181,"content":"+        t->suppress_tracing++;                                                \\"},{"type":"add","add":true,"ln":182,"content":"+        TM_ENTER_LOCK(t);                                                     \\"},{"type":"add","add":true,"ln":183,"content":"+    PR_END_MACRO"},{"type":"add","add":true,"ln":184,"content":"+"},{"type":"add","add":true,"ln":185,"content":"+#define TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t)                                \\"},{"type":"add","add":true,"ln":186,"content":"+    PR_BEGIN_MACRO                                                            \\"},{"type":"add","add":true,"ln":187,"content":"+        TM_EXIT_LOCK(t);                                                      \\"},{"type":"add","add":true,"ln":188,"content":"+        t->suppress_tracing--;                                                \\"},{"type":"add","add":true,"ln":189,"content":"+    PR_END_MACRO"},{"type":"add","add":true,"ln":190,"content":"+"},{"type":"add","add":true,"ln":191,"content":"+"},{"type":"normal","normal":true,"ln1":172,"ln2":192,"content":" /*"},{"type":"normal","normal":true,"ln1":173,"ln2":193,"content":"  * Thread-local storage."},{"type":"normal","normal":true,"ln1":174,"ln2":194,"content":"  *"}],"oldStart":157,"oldLines":18,"newStart":162,"newLines":33},{"content":"@@ -576,7 +596,7 @@ static PLHashTable *filenames = NULL;","changes":[{"type":"normal","normal":true,"ln1":576,"ln2":596,"content":" static PLHashTable *methods = NULL;"},{"type":"normal","normal":true,"ln1":577,"ln2":597,"content":" "},{"type":"normal","normal":true,"ln1":578,"ln2":598,"content":" static callsite *"},{"type":"del","del":true,"ln":579,"content":"-calltree(void **stack, size_t num_stack_entries)"},{"type":"add","add":true,"ln":599,"content":"+calltree(void **stack, size_t num_stack_entries, tm_thread *t)"},{"type":"normal","normal":true,"ln1":580,"ln2":600,"content":" {"},{"type":"normal","normal":true,"ln1":581,"ln2":601,"content":"     logfile *fp = logfp;"},{"type":"normal","normal":true,"ln1":582,"ln2":602,"content":"     void *pc;"}],"oldStart":576,"oldLines":7,"newStart":596,"newLines":7},{"content":"@@ -598,7 +618,7 @@ calltree(void **stack, size_t num_stack_entries)","changes":[{"type":"normal","normal":true,"ln1":598,"ln2":618,"content":"      * that we need to in this function, because it makes some calls"},{"type":"normal","normal":true,"ln1":599,"ln2":619,"content":"      * that could lock in the system's shared library loader."},{"type":"normal","normal":true,"ln1":600,"ln2":620,"content":"      */"},{"type":"del","del":true,"ln":601,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":621,"content":"+    TM_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":602,"ln2":622,"content":" "},{"type":"normal","normal":true,"ln1":603,"ln2":623,"content":"     maxstack = (num_stack_entries > tmstats.calltree_maxstack);"},{"type":"normal","normal":true,"ln1":604,"ln2":624,"content":"     if (maxstack) {"}],"oldStart":598,"oldLines":7,"newStart":618,"newLines":7},{"content":"@@ -672,9 +692,9 @@ calltree(void **stack, size_t num_stack_entries)","changes":[{"type":"normal","normal":true,"ln1":672,"ln2":692,"content":"          * and then filling in the descriptions for any that hadn't been"},{"type":"normal","normal":true,"ln1":673,"ln2":693,"content":"          * described already.  But this is easier for now."},{"type":"normal","normal":true,"ln1":674,"ln2":694,"content":"          */"},{"type":"del","del":true,"ln":675,"content":"-        TM_EXIT_LOCK();"},{"type":"add","add":true,"ln":695,"content":"+        TM_EXIT_LOCK(t);"},{"type":"normal","normal":true,"ln1":676,"ln2":696,"content":"         rv = NS_DescribeCodeAddress(pc, &details);"},{"type":"del","del":true,"ln":677,"content":"-        TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":697,"content":"+        TM_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":678,"ln2":698,"content":"         if (NS_FAILED(rv)) {"},{"type":"normal","normal":true,"ln1":679,"ln2":699,"content":"             tmstats.dladdr_failures++;"},{"type":"normal","normal":true,"ln1":680,"ln2":700,"content":"             goto fail;"}],"oldStart":672,"oldLines":9,"newStart":692,"newLines":9},{"content":"@@ -862,11 +882,11 @@ calltree(void **stack, size_t num_stack_entries)","changes":[{"type":"normal","normal":true,"ln1":862,"ln2":882,"content":"     if (maxstack)"},{"type":"normal","normal":true,"ln1":863,"ln2":883,"content":"         calltree_maxstack_top = site;"},{"type":"normal","normal":true,"ln1":864,"ln2":884,"content":" "},{"type":"del","del":true,"ln":865,"content":"-    TM_EXIT_LOCK();"},{"type":"add","add":true,"ln":885,"content":"+    TM_EXIT_LOCK(t);"},{"type":"normal","normal":true,"ln1":866,"ln2":886,"content":"     return site;"},{"type":"normal","normal":true,"ln1":867,"ln2":887,"content":" "},{"type":"normal","normal":true,"ln1":868,"ln2":888,"content":"   fail:"},{"type":"del","del":true,"ln":869,"content":"-    TM_EXIT_LOCK();"},{"type":"add","add":true,"ln":889,"content":"+    TM_EXIT_LOCK(t);"},{"type":"normal","normal":true,"ln1":870,"ln2":890,"content":"     return NULL;"},{"type":"normal","normal":true,"ln1":871,"ln2":891,"content":" }"},{"type":"normal","normal":true,"ln1":872,"ln2":892,"content":" "}],"oldStart":862,"oldLines":11,"newStart":882,"newLines":11},{"content":"@@ -941,15 +961,15 @@ backtrace(tm_thread *t, int skip)","changes":[{"type":"normal","normal":true,"ln1":941,"ln2":961,"content":"         return NULL;"},{"type":"normal","normal":true,"ln1":942,"ln2":962,"content":"     }"},{"type":"normal","normal":true,"ln1":943,"ln2":963,"content":" "},{"type":"del","del":true,"ln":944,"content":"-    site = calltree(info->buffer, info->entries);"},{"type":"add","add":true,"ln":964,"content":"+    site = calltree(info->buffer, info->entries, t);"},{"type":"normal","normal":true,"ln1":945,"ln2":965,"content":" "},{"type":"del","del":true,"ln":946,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":966,"content":"+    TM_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":947,"ln2":967,"content":"     tmstats.backtrace_calls++;"},{"type":"normal","normal":true,"ln1":948,"ln2":968,"content":"     if (!site) {"},{"type":"normal","normal":true,"ln1":949,"ln2":969,"content":"         tmstats.backtrace_failures++;"},{"type":"normal","normal":true,"ln1":950,"ln2":970,"content":"         PR_ASSERT(tmstats.backtrace_failures < 100);"},{"type":"normal","normal":true,"ln1":951,"ln2":971,"content":"     }"},{"type":"del","del":true,"ln":952,"content":"-    TM_EXIT_LOCK();"},{"type":"add","add":true,"ln":972,"content":"+    TM_EXIT_LOCK(t);"},{"type":"normal","normal":true,"ln1":953,"ln2":973,"content":" "},{"type":"normal","normal":true,"ln1":954,"ln2":974,"content":"     t->suppress_tracing--;"},{"type":"normal","normal":true,"ln1":955,"ln2":975,"content":"     return site;"}],"oldStart":941,"oldLines":15,"newStart":961,"newLines":15},{"content":"@@ -1082,121 +1102,173 @@ ShutdownHooker(void)","changes":[{"type":"normal","normal":true,"ln1":1082,"ln2":1102,"content":" "},{"type":"normal","normal":true,"ln1":1083,"ln2":1103,"content":" #elif defined(XP_UNIX)"},{"type":"normal","normal":true,"ln1":1084,"ln2":1104,"content":" "},{"type":"del","del":true,"ln":1085,"content":"-static __ptr_t (*old_malloc_hook)(size_t size, __const __malloc_ptr_t caller);"},{"type":"del","del":true,"ln":1086,"content":"-static __ptr_t (*old_realloc_hook)(__ptr_t ptr, size_t size, __const __malloc_ptr_t caller);"},{"type":"del","del":true,"ln":1087,"content":"-static __ptr_t (*old_memalign_hook)(size_t boundary, size_t size, __const __malloc_ptr_t caller);"},{"type":"del","del":true,"ln":1088,"content":"-static void (*old_free_hook)(__ptr_t ptr, __const __malloc_ptr_t caller);"},{"type":"add","add":true,"ln":1105,"content":"+/*"},{"type":"add","add":true,"ln":1106,"content":"+ * We can't use glibc's malloc hooks because they can't be used in a"},{"type":"add","add":true,"ln":1107,"content":"+ * threadsafe manner.  They require unsetting the hooks to call into the"},{"type":"add","add":true,"ln":1108,"content":"+ * original malloc implementation, and then resetting them when the"},{"type":"add","add":true,"ln":1109,"content":"+ * original implementation returns.  If another thread calls the same"},{"type":"add","add":true,"ln":1110,"content":"+ * allocation function while the hooks are unset, we have no chance to"},{"type":"add","add":true,"ln":1111,"content":"+ * intercept the call."},{"type":"add","add":true,"ln":1112,"content":"+ */"},{"type":"normal","normal":true,"ln1":1089,"ln2":1113,"content":" "},{"type":"del","del":true,"ln":1090,"content":"-static __ptr_t"},{"type":"del","del":true,"ln":1091,"content":"-my_malloc_hook(size_t size, __const __malloc_ptr_t caller)"},{"type":"add","add":true,"ln":1114,"content":"+NS_EXTERNAL_VIS_(__ptr_t)"},{"type":"add","add":true,"ln":1115,"content":"+malloc(size_t size)"},{"type":"normal","normal":true,"ln1":1092,"ln2":1116,"content":" {"},{"type":"del","del":true,"ln":1093,"content":"-    tm_thread *t;"},{"type":"normal","normal":true,"ln1":1094,"ln2":1117,"content":"     PRUint32 start, end;"},{"type":"normal","normal":true,"ln1":1095,"ln2":1118,"content":"     __ptr_t ptr;"},{"type":"add","add":true,"ln":1119,"content":"+    tm_thread *t;"},{"type":"add","add":true,"ln":1120,"content":"+"},{"type":"add","add":true,"ln":1121,"content":"+    if (!tracing_enabled || !PR_Initialized() ||"},{"type":"add","add":true,"ln":1122,"content":"+        (t = tm_get_thread())->suppress_tracing != 0) {"},{"type":"add","add":true,"ln":1123,"content":"+        return __libc_malloc(size);"},{"type":"add","add":true,"ln":1124,"content":"+    }"},{"type":"normal","normal":true,"ln1":1096,"ln2":1125,"content":" "},{"type":"del","del":true,"ln":1097,"content":"-    PR_ASSERT(tracing_enabled);"},{"type":"del","del":true,"ln":1098,"content":"-    t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1099,"ln2":1126,"content":"     t->suppress_tracing++;"},{"type":"del","del":true,"ln":1100,"content":"-    __malloc_hook = old_malloc_hook;"},{"type":"normal","normal":true,"ln1":1101,"ln2":1127,"content":"     start = PR_IntervalNow();"},{"type":"normal","normal":true,"ln1":1102,"ln2":1128,"content":"     ptr = __libc_malloc(size);"},{"type":"normal","normal":true,"ln1":1103,"ln2":1129,"content":"     end = PR_IntervalNow();"},{"type":"del","del":true,"ln":1104,"content":"-    __malloc_hook = my_malloc_hook;"},{"type":"normal","normal":true,"ln1":1105,"ln2":1130,"content":"     t->suppress_tracing--;"},{"type":"add","add":true,"ln":1131,"content":"+"},{"type":"normal","normal":true,"ln1":1106,"ln2":1132,"content":"     MallocCallback(ptr, size, start, end, t);"},{"type":"add","add":true,"ln":1133,"content":"+"},{"type":"normal","normal":true,"ln1":1107,"ln2":1134,"content":"     return ptr;"},{"type":"normal","normal":true,"ln1":1108,"ln2":1135,"content":" }"},{"type":"normal","normal":true,"ln1":1109,"ln2":1136,"content":" "},{"type":"del","del":true,"ln":1110,"content":"-static __ptr_t"},{"type":"del","del":true,"ln":1111,"content":"-my_realloc_hook(__ptr_t oldptr, size_t size, __const __malloc_ptr_t caller)"},{"type":"add","add":true,"ln":1137,"content":"+NS_EXTERNAL_VIS_(__ptr_t)"},{"type":"add","add":true,"ln":1138,"content":"+calloc(size_t count, size_t size)"},{"type":"normal","normal":true,"ln1":1112,"ln2":1139,"content":" {"},{"type":"del","del":true,"ln":1113,"content":"-    tm_thread *t;"},{"type":"normal","normal":true,"ln1":1114,"ln2":1140,"content":"     PRUint32 start, end;"},{"type":"normal","normal":true,"ln1":1115,"ln2":1141,"content":"     __ptr_t ptr;"},{"type":"add","add":true,"ln":1142,"content":"+    tm_thread *t;"},{"type":"add","add":true,"ln":1143,"content":"+"},{"type":"add","add":true,"ln":1144,"content":"+    if (!tracing_enabled || !PR_Initialized() ||"},{"type":"add","add":true,"ln":1145,"content":"+        (t = tm_get_thread())->suppress_tracing != 0) {"},{"type":"add","add":true,"ln":1146,"content":"+        return __libc_calloc(count, size);"},{"type":"add","add":true,"ln":1147,"content":"+    }"},{"type":"normal","normal":true,"ln1":1116,"ln2":1148,"content":" "},{"type":"del","del":true,"ln":1117,"content":"-    PR_ASSERT(tracing_enabled);"},{"type":"del","del":true,"ln":1118,"content":"-    t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1119,"ln2":1149,"content":"     t->suppress_tracing++;"},{"type":"del","del":true,"ln":1120,"content":"-    __realloc_hook = old_realloc_hook;"},{"type":"normal","normal":true,"ln1":1121,"ln2":1150,"content":"     start = PR_IntervalNow();"},{"type":"add","add":true,"ln":1151,"content":"+    ptr = __libc_calloc(count, size);"},{"type":"add","add":true,"ln":1152,"content":"+    end = PR_IntervalNow();"},{"type":"add","add":true,"ln":1153,"content":"+    t->suppress_tracing--;"},{"type":"normal","normal":true,"ln1":1122,"ln2":1154,"content":" "},{"type":"del","del":true,"ln":1123,"content":"-    /*"},{"type":"del","del":true,"ln":1124,"content":"-     * __libc_realloc(NULL, size) recurs into my_malloc_hook, so it's"},{"type":"del","del":true,"ln":1125,"content":"-     * important that we've incremented t->suppress_tracing here."},{"type":"del","del":true,"ln":1126,"content":"-     */"},{"type":"add","add":true,"ln":1155,"content":"+    CallocCallback(ptr, count, size, start, end, t);"},{"type":"add","add":true,"ln":1156,"content":"+"},{"type":"add","add":true,"ln":1157,"content":"+    return ptr;"},{"type":"add","add":true,"ln":1158,"content":"+}"},{"type":"add","add":true,"ln":1159,"content":"+"},{"type":"add","add":true,"ln":1160,"content":"+NS_EXTERNAL_VIS_(__ptr_t)"},{"type":"add","add":true,"ln":1161,"content":"+realloc(__ptr_t oldptr, size_t size)"},{"type":"add","add":true,"ln":1162,"content":"+{"},{"type":"add","add":true,"ln":1163,"content":"+    PRUint32 start, end;"},{"type":"add","add":true,"ln":1164,"content":"+    __ptr_t ptr;"},{"type":"add","add":true,"ln":1165,"content":"+    tm_thread *t;"},{"type":"add","add":true,"ln":1166,"content":"+"},{"type":"add","add":true,"ln":1167,"content":"+    if (!tracing_enabled || !PR_Initialized() ||"},{"type":"add","add":true,"ln":1168,"content":"+        (t = tm_get_thread())->suppress_tracing != 0) {"},{"type":"add","add":true,"ln":1169,"content":"+        return __libc_realloc(oldptr, size);"},{"type":"add","add":true,"ln":1170,"content":"+    }"},{"type":"add","add":true,"ln":1171,"content":"+"},{"type":"add","add":true,"ln":1172,"content":"+    t->suppress_tracing++;"},{"type":"add","add":true,"ln":1173,"content":"+    start = PR_IntervalNow();"},{"type":"normal","normal":true,"ln1":1127,"ln2":1174,"content":"     ptr = __libc_realloc(oldptr, size);"},{"type":"normal","normal":true,"ln1":1128,"ln2":1175,"content":"     end = PR_IntervalNow();"},{"type":"del","del":true,"ln":1129,"content":"-    __realloc_hook = my_realloc_hook;"},{"type":"normal","normal":true,"ln1":1130,"ln2":1176,"content":"     t->suppress_tracing--;"},{"type":"add","add":true,"ln":1177,"content":"+"},{"type":"add","add":true,"ln":1178,"content":"+    /* FIXME bug 392008: We could race with reallocation of oldptr. */"},{"type":"normal","normal":true,"ln1":1131,"ln2":1179,"content":"     ReallocCallback(oldptr, ptr, size, start, end, t);"},{"type":"add","add":true,"ln":1180,"content":"+"},{"type":"normal","normal":true,"ln1":1132,"ln2":1181,"content":"     return ptr;"},{"type":"normal","normal":true,"ln1":1133,"ln2":1182,"content":" }"},{"type":"normal","normal":true,"ln1":1134,"ln2":1183,"content":" "},{"type":"del","del":true,"ln":1135,"content":"-static __ptr_t"},{"type":"del","del":true,"ln":1136,"content":"-my_memalign_hook(size_t boundary, size_t size, __const __malloc_ptr_t caller)"},{"type":"add","add":true,"ln":1184,"content":"+NS_EXTERNAL_VIS_(void*)"},{"type":"add","add":true,"ln":1185,"content":"+valloc(size_t size)"},{"type":"normal","normal":true,"ln1":1137,"ln2":1186,"content":" {"},{"type":"del","del":true,"ln":1138,"content":"-    tm_thread *t;"},{"type":"normal","normal":true,"ln1":1139,"ln2":1187,"content":"     PRUint32 start, end;"},{"type":"normal","normal":true,"ln1":1140,"ln2":1188,"content":"     __ptr_t ptr;"},{"type":"add","add":true,"ln":1189,"content":"+    tm_thread *t;"},{"type":"add","add":true,"ln":1190,"content":"+"},{"type":"add","add":true,"ln":1191,"content":"+    if (!tracing_enabled || !PR_Initialized() ||"},{"type":"add","add":true,"ln":1192,"content":"+        (t = tm_get_thread())->suppress_tracing != 0) {"},{"type":"add","add":true,"ln":1193,"content":"+        return __libc_valloc(size);"},{"type":"add","add":true,"ln":1194,"content":"+    }"},{"type":"normal","normal":true,"ln1":1141,"ln2":1195,"content":" "},{"type":"del","del":true,"ln":1142,"content":"-    PR_ASSERT(tracing_enabled);"},{"type":"del","del":true,"ln":1143,"content":"-    t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1144,"ln2":1196,"content":"     t->suppress_tracing++;"},{"type":"del","del":true,"ln":1145,"content":"-    __memalign_hook = old_memalign_hook;"},{"type":"normal","normal":true,"ln1":1146,"ln2":1197,"content":"     start = PR_IntervalNow();"},{"type":"del","del":true,"ln":1147,"content":"-    ptr = __libc_memalign(boundary, size);"},{"type":"add","add":true,"ln":1198,"content":"+    ptr = __libc_valloc(size);"},{"type":"normal","normal":true,"ln1":1148,"ln2":1199,"content":"     end = PR_IntervalNow();"},{"type":"del","del":true,"ln":1149,"content":"-    __memalign_hook = my_memalign_hook;"},{"type":"normal","normal":true,"ln1":1150,"ln2":1200,"content":"     t->suppress_tracing--;"},{"type":"add","add":true,"ln":1201,"content":"+"},{"type":"normal","normal":true,"ln1":1151,"ln2":1202,"content":"     MallocCallback(ptr, size, start, end, t);"},{"type":"add","add":true,"ln":1203,"content":"+"},{"type":"normal","normal":true,"ln1":1152,"ln2":1204,"content":"     return ptr;"},{"type":"normal","normal":true,"ln1":1153,"ln2":1205,"content":" }"},{"type":"normal","normal":true,"ln1":1154,"ln2":1206,"content":" "},{"type":"del","del":true,"ln":1155,"content":"-static void"},{"type":"del","del":true,"ln":1156,"content":"-my_free_hook(__ptr_t ptr, __const __malloc_ptr_t caller)"},{"type":"add","add":true,"ln":1207,"content":"+NS_EXTERNAL_VIS_(void*)"},{"type":"add","add":true,"ln":1208,"content":"+memalign(size_t boundary, size_t size)"},{"type":"normal","normal":true,"ln1":1157,"ln2":1209,"content":" {"},{"type":"del","del":true,"ln":1158,"content":"-    tm_thread *t;"},{"type":"normal","normal":true,"ln1":1159,"ln2":1210,"content":"     PRUint32 start, end;"},{"type":"add","add":true,"ln":1211,"content":"+    __ptr_t ptr;"},{"type":"add","add":true,"ln":1212,"content":"+    tm_thread *t;"},{"type":"add","add":true,"ln":1213,"content":"+"},{"type":"add","add":true,"ln":1214,"content":"+    if (!tracing_enabled || !PR_Initialized() ||"},{"type":"add","add":true,"ln":1215,"content":"+        (t = tm_get_thread())->suppress_tracing != 0) {"},{"type":"add","add":true,"ln":1216,"content":"+        return __libc_memalign(boundary, size);"},{"type":"add","add":true,"ln":1217,"content":"+    }"},{"type":"normal","normal":true,"ln1":1160,"ln2":1218,"content":" "},{"type":"del","del":true,"ln":1161,"content":"-    PR_ASSERT(tracing_enabled);"},{"type":"del","del":true,"ln":1162,"content":"-    t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1163,"ln2":1219,"content":"     t->suppress_tracing++;"},{"type":"del","del":true,"ln":1164,"content":"-    __free_hook = old_free_hook;"},{"type":"normal","normal":true,"ln1":1165,"ln2":1220,"content":"     start = PR_IntervalNow();"},{"type":"del","del":true,"ln":1166,"content":"-    __libc_free(ptr);"},{"type":"add","add":true,"ln":1221,"content":"+    ptr = __libc_memalign(boundary, size);"},{"type":"normal","normal":true,"ln1":1167,"ln2":1222,"content":"     end = PR_IntervalNow();"},{"type":"del","del":true,"ln":1168,"content":"-    __free_hook = my_free_hook;"},{"type":"normal","normal":true,"ln1":1169,"ln2":1223,"content":"     t->suppress_tracing--;"},{"type":"del","del":true,"ln":1170,"content":"-    FreeCallback(ptr, start, end, t);"},{"type":"add","add":true,"ln":1224,"content":"+"},{"type":"add","add":true,"ln":1225,"content":"+    MallocCallback(ptr, size, start, end, t);"},{"type":"add","add":true,"ln":1226,"content":"+"},{"type":"add","add":true,"ln":1227,"content":"+    return ptr;"},{"type":"normal","normal":true,"ln1":1171,"ln2":1228,"content":" }"},{"type":"normal","normal":true,"ln1":1172,"ln2":1229,"content":" "},{"type":"del","del":true,"ln":1173,"content":"-static void"},{"type":"del","del":true,"ln":1174,"content":"-StartupHooker(void)"},{"type":"add","add":true,"ln":1230,"content":"+NS_EXTERNAL_VIS_(int)"},{"type":"add","add":true,"ln":1231,"content":"+posix_memalign(void **memptr, size_t alignment, size_t size)"},{"type":"normal","normal":true,"ln1":1175,"ln2":1232,"content":" {"},{"type":"del","del":true,"ln":1176,"content":"-    PR_ASSERT(__malloc_hook != my_malloc_hook);"},{"type":"add","add":true,"ln":1233,"content":"+    __ptr_t ptr = memalign(alignment, size);"},{"type":"add","add":true,"ln":1234,"content":"+    if (!ptr)"},{"type":"add","add":true,"ln":1235,"content":"+        return ENOMEM;"},{"type":"add","add":true,"ln":1236,"content":"+    *memptr = ptr;"},{"type":"add","add":true,"ln":1237,"content":"+    return 0;"},{"type":"add","add":true,"ln":1238,"content":"+}"},{"type":"normal","normal":true,"ln1":1177,"ln2":1239,"content":" "},{"type":"del","del":true,"ln":1178,"content":"-    old_malloc_hook = __malloc_hook;"},{"type":"del","del":true,"ln":1179,"content":"-    old_realloc_hook = __realloc_hook;"},{"type":"del","del":true,"ln":1180,"content":"-    old_memalign_hook = __memalign_hook;"},{"type":"del","del":true,"ln":1181,"content":"-    old_free_hook = __free_hook;"},{"type":"add","add":true,"ln":1240,"content":"+NS_EXTERNAL_VIS_(void)"},{"type":"add","add":true,"ln":1241,"content":"+free(__ptr_t ptr)"},{"type":"add","add":true,"ln":1242,"content":"+{"},{"type":"add","add":true,"ln":1243,"content":"+    PRUint32 start, end;"},{"type":"add","add":true,"ln":1244,"content":"+    tm_thread *t;"},{"type":"add","add":true,"ln":1245,"content":"+"},{"type":"add","add":true,"ln":1246,"content":"+    if (!tracing_enabled || !PR_Initialized() ||"},{"type":"add","add":true,"ln":1247,"content":"+        (t = tm_get_thread())->suppress_tracing != 0) {"},{"type":"add","add":true,"ln":1248,"content":"+        __libc_free(ptr);"},{"type":"add","add":true,"ln":1249,"content":"+        return;"},{"type":"add","add":true,"ln":1250,"content":"+    }"},{"type":"normal","normal":true,"ln1":1182,"ln2":1251,"content":" "},{"type":"del","del":true,"ln":1183,"content":"-    __malloc_hook = my_malloc_hook;"},{"type":"del","del":true,"ln":1184,"content":"-    __realloc_hook = my_realloc_hook;"},{"type":"del","del":true,"ln":1185,"content":"-    __memalign_hook = my_memalign_hook;"},{"type":"del","del":true,"ln":1186,"content":"-    __free_hook = my_free_hook;"},{"type":"add","add":true,"ln":1252,"content":"+    t->suppress_tracing++;"},{"type":"add","add":true,"ln":1253,"content":"+    start = PR_IntervalNow();"},{"type":"add","add":true,"ln":1254,"content":"+    __libc_free(ptr);"},{"type":"add","add":true,"ln":1255,"content":"+    end = PR_IntervalNow();"},{"type":"add","add":true,"ln":1256,"content":"+    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1257,"content":"+"},{"type":"add","add":true,"ln":1258,"content":"+    /* FIXME bug 392008: We could race with reallocation of ptr. */"},{"type":"add","add":true,"ln":1259,"content":"+"},{"type":"add","add":true,"ln":1260,"content":"+    FreeCallback(ptr, start, end, t);"},{"type":"normal","normal":true,"ln1":1187,"ln2":1261,"content":" }"},{"type":"normal","normal":true,"ln1":1188,"ln2":1262,"content":" "},{"type":"del","del":true,"ln":1189,"content":"-static void"},{"type":"del","del":true,"ln":1190,"content":"-ShutdownHooker(void)"},{"type":"add","add":true,"ln":1263,"content":"+NS_EXTERNAL_VIS_(void)"},{"type":"add","add":true,"ln":1264,"content":"+cfree(void *ptr)"},{"type":"normal","normal":true,"ln1":1191,"ln2":1265,"content":" {"},{"type":"del","del":true,"ln":1192,"content":"-    PR_ASSERT(__malloc_hook == my_malloc_hook);"},{"type":"del","del":true,"ln":1193,"content":"-"},{"type":"del","del":true,"ln":1194,"content":"-    __malloc_hook = old_malloc_hook;"},{"type":"del","del":true,"ln":1195,"content":"-    __realloc_hook = old_realloc_hook;"},{"type":"del","del":true,"ln":1196,"content":"-    __memalign_hook = old_memalign_hook;"},{"type":"del","del":true,"ln":1197,"content":"-    __free_hook = old_free_hook;"},{"type":"add","add":true,"ln":1266,"content":"+    free(ptr);"},{"type":"normal","normal":true,"ln1":1198,"ln2":1267,"content":" }"},{"type":"normal","normal":true,"ln1":1199,"ln2":1268,"content":" "},{"type":"add","add":true,"ln":1269,"content":"+#define StartupHooker()                 PR_BEGIN_MACRO PR_END_MACRO"},{"type":"add","add":true,"ln":1270,"content":"+#define ShutdownHooker()                PR_BEGIN_MACRO PR_END_MACRO"},{"type":"add","add":true,"ln":1271,"content":"+"},{"type":"normal","normal":true,"ln1":1200,"ln2":1272,"content":" #elif defined(XP_WIN32)"},{"type":"normal","normal":true,"ln1":1201,"ln2":1273,"content":" "},{"type":"normal","normal":true,"ln1":1202,"ln2":1274,"content":" /* See nsWinTraceMalloc.cpp. */"}],"oldStart":1082,"oldLines":121,"newStart":1102,"newLines":173},{"content":"@@ -1217,7 +1289,7 @@ PR_IMPLEMENT(void)","changes":[{"type":"normal","normal":true,"ln1":1217,"ln2":1289,"content":" NS_TraceMallocStartup(int logfd)"},{"type":"normal","normal":true,"ln1":1218,"ln2":1290,"content":" {"},{"type":"normal","normal":true,"ln1":1219,"ln2":1291,"content":"     /* We must be running on the primordial thread. */"},{"type":"del","del":true,"ln":1220,"content":"-    PR_ASSERT(tracing_enabled == 1);"},{"type":"add","add":true,"ln":1292,"content":"+    PR_ASSERT(tracing_enabled == 0);"},{"type":"normal","normal":true,"ln1":1221,"ln2":1293,"content":"     PR_ASSERT(logfp == &default_logfile);"},{"type":"normal","normal":true,"ln1":1222,"ln2":1294,"content":"     tracing_enabled = (logfd >= 0);"},{"type":"normal","normal":true,"ln1":1223,"ln2":1295,"content":" "}],"oldStart":1217,"oldLines":7,"newStart":1289,"newLines":7},{"content":"@@ -1445,13 +1517,11 @@ NS_TraceMallocDisable(void)","changes":[{"type":"normal","normal":true,"ln1":1445,"ln2":1517,"content":"     if (tracing_enabled == 0)"},{"type":"normal","normal":true,"ln1":1446,"ln2":1518,"content":"         return;"},{"type":"normal","normal":true,"ln1":1447,"ln2":1519,"content":" "},{"type":"del","del":true,"ln":1448,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1449,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1520,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1450,"ln2":1521,"content":"     for (fp = logfile_list; fp; fp = fp->next)"},{"type":"normal","normal":true,"ln1":1451,"ln2":1522,"content":"         flush_logfile(fp);"},{"type":"normal","normal":true,"ln1":1452,"ln2":1523,"content":"     sample = --tracing_enabled;"},{"type":"del","del":true,"ln":1453,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1454,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1524,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1455,"ln2":1525,"content":"     if (sample == 0)"},{"type":"normal","normal":true,"ln1":1456,"ln2":1526,"content":"         ShutdownHooker();"},{"type":"normal","normal":true,"ln1":1457,"ln2":1527,"content":" }"}],"oldStart":1445,"oldLines":13,"newStart":1517,"newLines":11},{"content":"@@ -1462,11 +1532,9 @@ NS_TraceMallocEnable(void)","changes":[{"type":"normal","normal":true,"ln1":1462,"ln2":1532,"content":"     tm_thread *t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1463,"ln2":1533,"content":"     uint32 sample;"},{"type":"normal","normal":true,"ln1":1464,"ln2":1534,"content":" "},{"type":"del","del":true,"ln":1465,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1466,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1535,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1467,"ln2":1536,"content":"     sample = ++tracing_enabled;"},{"type":"del","del":true,"ln":1468,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1469,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1537,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1470,"ln2":1538,"content":"     if (sample == 1)"},{"type":"normal","normal":true,"ln1":1471,"ln2":1539,"content":"         StartupHooker();"},{"type":"normal","normal":true,"ln1":1472,"ln2":1540,"content":" }"}],"oldStart":1462,"oldLines":11,"newStart":1532,"newLines":9},{"content":"@@ -1478,23 +1546,20 @@ NS_TraceMallocChangeLogFD(int fd)","changes":[{"type":"normal","normal":true,"ln1":1478,"ln2":1546,"content":"     struct stat sb;"},{"type":"normal","normal":true,"ln1":1479,"ln2":1547,"content":"     tm_thread *t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1480,"ln2":1548,"content":" "},{"type":"del","del":true,"ln":1481,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1482,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1549,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1483,"ln2":1550,"content":"     oldfp = logfp;"},{"type":"normal","normal":true,"ln1":1484,"ln2":1551,"content":"     if (oldfp->fd != fd) {"},{"type":"normal","normal":true,"ln1":1485,"ln2":1552,"content":"         flush_logfile(oldfp);"},{"type":"normal","normal":true,"ln1":1486,"ln2":1553,"content":"         fp = get_logfile(fd);"},{"type":"normal","normal":true,"ln1":1487,"ln2":1554,"content":"         if (!fp) {"},{"type":"del","del":true,"ln":1488,"content":"-            TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1489,"content":"-            t->suppress_tracing--;"},{"type":"add","add":true,"ln":1555,"content":"+            TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1490,"ln2":1556,"content":"             return -2;"},{"type":"normal","normal":true,"ln1":1491,"ln2":1557,"content":"         }"},{"type":"normal","normal":true,"ln1":1492,"ln2":1558,"content":"         if (fd >= 0 && fstat(fd, &sb) == 0 && sb.st_size == 0)"},{"type":"normal","normal":true,"ln1":1493,"ln2":1559,"content":"             log_header(fd);"},{"type":"normal","normal":true,"ln1":1494,"ln2":1560,"content":"         logfp = fp;"},{"type":"normal","normal":true,"ln1":1495,"ln2":1561,"content":"     }"},{"type":"del","del":true,"ln":1496,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1497,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1562,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1498,"ln2":1563,"content":"     return oldfp->fd;"},{"type":"normal","normal":true,"ln1":1499,"ln2":1564,"content":" }"},{"type":"normal","normal":true,"ln1":1500,"ln2":1565,"content":" "}],"oldStart":1478,"oldLines":23,"newStart":1546,"newLines":20},{"content":"@@ -1524,8 +1589,7 @@ NS_TraceMallocCloseLogFD(int fd)","changes":[{"type":"normal","normal":true,"ln1":1524,"ln2":1589,"content":"     logfile *fp;"},{"type":"normal","normal":true,"ln1":1525,"ln2":1590,"content":"     tm_thread *t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1526,"ln2":1591,"content":" "},{"type":"del","del":true,"ln":1527,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1528,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1592,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1529,"ln2":1593,"content":" "},{"type":"normal","normal":true,"ln1":1530,"ln2":1594,"content":"     fp = get_logfile(fd);"},{"type":"normal","normal":true,"ln1":1531,"ln2":1595,"content":"     if (fp) {"}],"oldStart":1524,"oldLines":8,"newStart":1589,"newLines":7},{"content":"@@ -1556,8 +1620,7 @@ NS_TraceMallocCloseLogFD(int fd)","changes":[{"type":"normal","normal":true,"ln1":1556,"ln2":1620,"content":"         }"},{"type":"normal","normal":true,"ln1":1557,"ln2":1621,"content":"     }"},{"type":"normal","normal":true,"ln1":1558,"ln2":1622,"content":" "},{"type":"del","del":true,"ln":1559,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1560,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1623,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1561,"ln2":1624,"content":"     close(fd);"},{"type":"normal","normal":true,"ln1":1562,"ln2":1625,"content":" }"},{"type":"normal","normal":true,"ln1":1563,"ln2":1626,"content":" "}],"oldStart":1556,"oldLines":8,"newStart":1620,"newLines":7},{"content":"@@ -1573,8 +1636,7 @@ NS_TraceMallocLogTimestamp(const char *caption)","changes":[{"type":"normal","normal":true,"ln1":1573,"ln2":1636,"content":" #endif"},{"type":"normal","normal":true,"ln1":1574,"ln2":1637,"content":"     tm_thread *t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1575,"ln2":1638,"content":" "},{"type":"del","del":true,"ln":1576,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1577,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1639,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1578,"ln2":1640,"content":" "},{"type":"normal","normal":true,"ln1":1579,"ln2":1641,"content":"     fp = logfp;"},{"type":"normal","normal":true,"ln1":1580,"ln2":1642,"content":"     log_byte(fp, TM_EVENT_TIMESTAMP);"}],"oldStart":1573,"oldLines":8,"newStart":1636,"newLines":7},{"content":"@@ -1591,8 +1653,7 @@ NS_TraceMallocLogTimestamp(const char *caption)","changes":[{"type":"normal","normal":true,"ln1":1591,"ln2":1653,"content":" #endif"},{"type":"normal","normal":true,"ln1":1592,"ln2":1654,"content":"     log_string(fp, caption);"},{"type":"normal","normal":true,"ln1":1593,"ln2":1655,"content":" "},{"type":"del","del":true,"ln":1594,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1595,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1656,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1596,"ln2":1657,"content":" }"},{"type":"normal","normal":true,"ln1":1597,"ln2":1658,"content":" "},{"type":"normal","normal":true,"ln1":1598,"ln2":1659,"content":" static PRIntn"}],"oldStart":1591,"oldLines":8,"newStart":1653,"newLines":7},{"content":"@@ -1651,8 +1712,7 @@ NS_TraceMallocDumpAllocations(const char *pathname)","changes":[{"type":"normal","normal":true,"ln1":1651,"ln2":1712,"content":" "},{"type":"normal","normal":true,"ln1":1652,"ln2":1713,"content":"     tm_thread *t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1653,"ln2":1714,"content":" "},{"type":"del","del":true,"ln":1654,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1655,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1715,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1656,"ln2":1716,"content":" "},{"type":"normal","normal":true,"ln1":1657,"ln2":1717,"content":"     ofp = fopen(pathname, WRITE_FLAGS);"},{"type":"normal","normal":true,"ln1":1658,"ln2":1718,"content":"     if (ofp) {"}],"oldStart":1651,"oldLines":8,"newStart":1712,"newLines":7},{"content":"@@ -1666,8 +1726,7 @@ NS_TraceMallocDumpAllocations(const char *pathname)","changes":[{"type":"normal","normal":true,"ln1":1666,"ln2":1726,"content":"         rv = -1;"},{"type":"normal","normal":true,"ln1":1667,"ln2":1727,"content":"     }"},{"type":"normal","normal":true,"ln1":1668,"ln2":1728,"content":" "},{"type":"del","del":true,"ln":1669,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1670,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1729,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1671,"ln2":1730,"content":" "},{"type":"normal","normal":true,"ln1":1672,"ln2":1731,"content":"     return rv;"},{"type":"normal","normal":true,"ln1":1673,"ln2":1732,"content":" }"}],"oldStart":1666,"oldLines":8,"newStart":1726,"newLines":7},{"content":"@@ -1678,14 +1737,12 @@ NS_TraceMallocFlushLogfiles(void)","changes":[{"type":"normal","normal":true,"ln1":1678,"ln2":1737,"content":"     logfile *fp;"},{"type":"normal","normal":true,"ln1":1679,"ln2":1738,"content":"     tm_thread *t = tm_get_thread();"},{"type":"normal","normal":true,"ln1":1680,"ln2":1739,"content":" "},{"type":"del","del":true,"ln":1681,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1682,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1740,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1683,"ln2":1741,"content":" "},{"type":"normal","normal":true,"ln1":1684,"ln2":1742,"content":"     for (fp = logfile_list; fp; fp = fp->next)"},{"type":"normal","normal":true,"ln1":1685,"ln2":1743,"content":"         flush_logfile(fp);"},{"type":"normal","normal":true,"ln1":1686,"ln2":1744,"content":" "},{"type":"del","del":true,"ln":1687,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1688,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1745,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1689,"ln2":1746,"content":" }"},{"type":"normal","normal":true,"ln1":1690,"ln2":1747,"content":" "},{"type":"normal","normal":true,"ln1":1691,"ln2":1748,"content":" PR_IMPLEMENT(void)"}],"oldStart":1678,"oldLines":14,"newStart":1737,"newLines":12},{"content":"@@ -1697,8 +1754,7 @@ NS_TrackAllocation(void* ptr, FILE *ofp)","changes":[{"type":"normal","normal":true,"ln1":1697,"ln2":1754,"content":"     fprintf(ofp, \"Trying to track %p\\n\", (void*) ptr);"},{"type":"normal","normal":true,"ln1":1698,"ln2":1755,"content":"     setlinebuf(ofp);"},{"type":"normal","normal":true,"ln1":1699,"ln2":1756,"content":" "},{"type":"del","del":true,"ln":1700,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1701,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1757,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1702,"ln2":1758,"content":"     if (get_allocations()) {"},{"type":"normal","normal":true,"ln1":1703,"ln2":1759,"content":"         alloc = (allocation*)"},{"type":"normal","normal":true,"ln1":1704,"ln2":1760,"content":"                 *PL_HashTableRawLookup(allocations, hash_pointer(ptr), ptr);"}],"oldStart":1697,"oldLines":8,"newStart":1754,"newLines":7},{"content":"@@ -1709,8 +1765,7 @@ NS_TrackAllocation(void* ptr, FILE *ofp)","changes":[{"type":"normal","normal":true,"ln1":1709,"ln2":1765,"content":"             fprintf(ofp, \"Not tracking %p\\n\", (void*) ptr);"},{"type":"normal","normal":true,"ln1":1710,"ln2":1766,"content":"         }"},{"type":"normal","normal":true,"ln1":1711,"ln2":1767,"content":"     }"},{"type":"del","del":true,"ln":1712,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1713,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1768,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1714,"ln2":1769,"content":" }"},{"type":"normal","normal":true,"ln1":1715,"ln2":1770,"content":" "},{"type":"normal","normal":true,"ln1":1716,"ln2":1771,"content":" PR_IMPLEMENT(void)"}],"oldStart":1709,"oldLines":8,"newStart":1765,"newLines":7},{"content":"@@ -1725,8 +1780,7 @@ MallocCallback(void *ptr, size_t size, PRUint32 start, PRUint32 end, tm_thread *","changes":[{"type":"normal","normal":true,"ln1":1725,"ln2":1780,"content":" "},{"type":"normal","normal":true,"ln1":1726,"ln2":1781,"content":"     site = backtrace(t, 2);"},{"type":"normal","normal":true,"ln1":1727,"ln2":1782,"content":" "},{"type":"del","del":true,"ln":1728,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1729,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1783,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1730,"ln2":1784,"content":"     tmstats.malloc_calls++;"},{"type":"normal","normal":true,"ln1":1731,"ln2":1785,"content":"     if (!ptr) {"},{"type":"normal","normal":true,"ln1":1732,"ln2":1786,"content":"         tmstats.malloc_failures++;"}],"oldStart":1725,"oldLines":8,"newStart":1780,"newLines":7},{"content":"@@ -1745,8 +1799,7 @@ MallocCallback(void *ptr, size_t size, PRUint32 start, PRUint32 end, tm_thread *","changes":[{"type":"normal","normal":true,"ln1":1745,"ln2":1799,"content":"             }"},{"type":"normal","normal":true,"ln1":1746,"ln2":1800,"content":"         }"},{"type":"normal","normal":true,"ln1":1747,"ln2":1801,"content":"     }"},{"type":"del","del":true,"ln":1748,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1749,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1802,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1750,"ln2":1803,"content":" }"},{"type":"normal","normal":true,"ln1":1751,"ln2":1804,"content":" "},{"type":"normal","normal":true,"ln1":1752,"ln2":1805,"content":" PR_IMPLEMENT(void)"}],"oldStart":1745,"oldLines":8,"newStart":1799,"newLines":7},{"content":"@@ -1761,8 +1814,7 @@ CallocCallback(void *ptr, size_t count, size_t size, PRUint32 start, PRUint32 en","changes":[{"type":"normal","normal":true,"ln1":1761,"ln2":1814,"content":" "},{"type":"normal","normal":true,"ln1":1762,"ln2":1815,"content":"     site = backtrace(t, 2);"},{"type":"normal","normal":true,"ln1":1763,"ln2":1816,"content":" "},{"type":"del","del":true,"ln":1764,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1765,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1817,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1766,"ln2":1818,"content":"     tmstats.calloc_calls++;"},{"type":"normal","normal":true,"ln1":1767,"ln2":1819,"content":"     if (!ptr) {"},{"type":"normal","normal":true,"ln1":1768,"ln2":1820,"content":"         tmstats.calloc_failures++;"}],"oldStart":1761,"oldLines":8,"newStart":1814,"newLines":7},{"content":"@@ -1782,8 +1834,7 @@ CallocCallback(void *ptr, size_t count, size_t size, PRUint32 start, PRUint32 en","changes":[{"type":"normal","normal":true,"ln1":1782,"ln2":1834,"content":"             }"},{"type":"normal","normal":true,"ln1":1783,"ln2":1835,"content":"         }"},{"type":"normal","normal":true,"ln1":1784,"ln2":1836,"content":"     }"},{"type":"del","del":true,"ln":1785,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1786,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1837,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1787,"ln2":1838,"content":" }"},{"type":"normal","normal":true,"ln1":1788,"ln2":1839,"content":" "},{"type":"normal","normal":true,"ln1":1789,"ln2":1840,"content":" PR_IMPLEMENT(void)"}],"oldStart":1782,"oldLines":8,"newStart":1834,"newLines":7},{"content":"@@ -1802,8 +1853,7 @@ ReallocCallback(void * oldptr, void *ptr, size_t size,","changes":[{"type":"normal","normal":true,"ln1":1802,"ln2":1853,"content":" "},{"type":"normal","normal":true,"ln1":1803,"ln2":1854,"content":"     site = backtrace(t, 2);"},{"type":"normal","normal":true,"ln1":1804,"ln2":1855,"content":" "},{"type":"del","del":true,"ln":1805,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1806,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1856,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1807,"ln2":1857,"content":"     tmstats.realloc_calls++;"},{"type":"normal","normal":true,"ln1":1808,"ln2":1858,"content":"     oldsite = NULL;"},{"type":"normal","normal":true,"ln1":1809,"ln2":1859,"content":"     oldsize = 0;"}],"oldStart":1802,"oldLines":8,"newStart":1853,"newLines":7},{"content":"@@ -1867,8 +1917,7 @@ ReallocCallback(void * oldptr, void *ptr, size_t size,","changes":[{"type":"normal","normal":true,"ln1":1867,"ln2":1917,"content":"             }"},{"type":"normal","normal":true,"ln1":1868,"ln2":1918,"content":"         }"},{"type":"normal","normal":true,"ln1":1869,"ln2":1919,"content":"     }"},{"type":"del","del":true,"ln":1870,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1871,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1920,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1872,"ln2":1921,"content":" }"},{"type":"normal","normal":true,"ln1":1873,"ln2":1922,"content":" "},{"type":"normal","normal":true,"ln1":1874,"ln2":1923,"content":" PR_IMPLEMENT(void)"}],"oldStart":1867,"oldLines":8,"newStart":1917,"newLines":7},{"content":"@@ -1881,8 +1930,7 @@ FreeCallback(void * ptr, PRUint32 start, PRUint32 end, tm_thread *t)","changes":[{"type":"normal","normal":true,"ln1":1881,"ln2":1930,"content":"     if (!tracing_enabled || t->suppress_tracing != 0)"},{"type":"normal","normal":true,"ln1":1882,"ln2":1931,"content":"         return;"},{"type":"normal","normal":true,"ln1":1883,"ln2":1932,"content":" "},{"type":"del","del":true,"ln":1884,"content":"-    t->suppress_tracing++;"},{"type":"del","del":true,"ln":1885,"content":"-    TM_ENTER_LOCK();"},{"type":"add","add":true,"ln":1933,"content":"+    TM_SUPPRESS_TRACING_AND_ENTER_LOCK(t);"},{"type":"normal","normal":true,"ln1":1886,"ln2":1934,"content":"     tmstats.free_calls++;"},{"type":"normal","normal":true,"ln1":1887,"ln2":1935,"content":"     if (!ptr) {"},{"type":"normal","normal":true,"ln1":1888,"ln2":1936,"content":"         tmstats.null_free_calls++;"}],"oldStart":1881,"oldLines":8,"newStart":1930,"newLines":7},{"content":"@@ -1907,8 +1955,7 @@ FreeCallback(void * ptr, PRUint32 start, PRUint32 end, tm_thread *t)","changes":[{"type":"normal","normal":true,"ln1":1907,"ln2":1955,"content":"             }"},{"type":"normal","normal":true,"ln1":1908,"ln2":1956,"content":"         }"},{"type":"normal","normal":true,"ln1":1909,"ln2":1957,"content":"     }"},{"type":"del","del":true,"ln":1910,"content":"-    TM_EXIT_LOCK();"},{"type":"del","del":true,"ln":1911,"content":"-    t->suppress_tracing--;"},{"type":"add","add":true,"ln":1958,"content":"+    TM_EXIT_LOCK_AND_UNSUPPRESS_TRACING(t);"},{"type":"normal","normal":true,"ln1":1912,"ln2":1959,"content":" }"},{"type":"normal","normal":true,"ln1":1913,"ln2":1960,"content":" "},{"type":"normal","normal":true,"ln1":1914,"ln2":1961,"content":" #endif /* NS_TRACE_MALLOC */"}],"oldStart":1907,"oldLines":8,"newStart":1955,"newLines":7}],"deletions":121,"additions":168,"from":"tools/trace-malloc/lib/nsTraceMalloc.c","to":"tools/trace-malloc/lib/nsTraceMalloc.c","index":["6e6079d..952405a","100644"]},{"chunks":[{"content":"@@ -121,6 +121,7 @@ void __cdecl dhw_free( void* p )","changes":[{"type":"normal","normal":true,"ln1":121,"ln2":121,"content":"     DHW_ORIGINAL(FREE_, getFreeHooker())(p);"},{"type":"normal","normal":true,"ln1":122,"ln2":122,"content":"     PRUint32 end = PR_IntervalNow();"},{"type":"normal","normal":true,"ln1":123,"ln2":123,"content":"     --t->suppress_tracing;"},{"type":"add","add":true,"ln":124,"content":"+    /* FIXME bug 392008: We could race with reallocation of p. */"},{"type":"normal","normal":true,"ln1":124,"ln2":125,"content":"     FreeCallback(p, start, end, t);"},{"type":"normal","normal":true,"ln1":125,"ln2":126,"content":" }"},{"type":"normal","normal":true,"ln1":126,"ln2":127,"content":" "}],"oldStart":121,"oldLines":6,"newStart":121,"newLines":7},{"content":"@@ -140,6 +141,7 @@ void * __cdecl dhw_realloc(void * pin, size_t size)","changes":[{"type":"normal","normal":true,"ln1":140,"ln2":141,"content":"     void* pout = DHW_ORIGINAL(REALLOC_, getReallocHooker())(pin, size);"},{"type":"normal","normal":true,"ln1":141,"ln2":142,"content":"     PRUint32 end = PR_IntervalNow();"},{"type":"normal","normal":true,"ln1":142,"ln2":143,"content":"     --t->suppress_tracing;"},{"type":"add","add":true,"ln":144,"content":"+    /* FIXME bug 392008: We could race with reallocation of pin. */"},{"type":"normal","normal":true,"ln1":143,"ln2":145,"content":"     ReallocCallback(pin, pout, size, start, end, t);"},{"type":"normal","normal":true,"ln1":144,"ln2":146,"content":"     return pout;"},{"type":"normal","normal":true,"ln1":145,"ln2":147,"content":" }"}],"oldStart":140,"oldLines":6,"newStart":141,"newLines":7}],"deletions":0,"additions":2,"from":"tools/trace-malloc/lib/nsWinTraceMalloc.cpp","to":"tools/trace-malloc/lib/nsWinTraceMalloc.cpp","index":["054e290..aea5e0c","100644"]}]}