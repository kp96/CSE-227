Bug 445004.  Make the base and document URI of document.written documents be the base and document URI of the document on whose current context our code is running.  r+sr=jst, r=dcamp

diff --git a/content/base/src/nsDocument.cpp b/content/base/src/nsDocument.cpp
--- a/content/base/src/nsDocument.cpp
+++ b/content/base/src/nsDocument.cpp
@@ -163,16 +163,17 @@ static NS_DEFINE_CID(kDOMEventGroupCID, 
 #include "nsIContentViewer.h"
 #include "nsIXMLContentSink.h"
 #include "nsIChannelEventSink.h"
 #include "nsContentErrors.h"
 #include "nsIXULDocument.h"
 #include "nsIProgressEventSink.h"
 #include "nsISecurityEventSink.h"
 #include "nsIPrompt.h"
+#include "nsIPropertyBag2.h"
 
 #include "nsFrameLoader.h"
 
 #include "mozAutoDocUpdate.h"
 
 
 #ifdef MOZ_LOGGING
 // so we can get logging even in release builds
@@ -1875,16 +1876,26 @@ nsDocument::Reset(nsIChannel* aChannel, 
     if (securityManager) {
       securityManager->GetChannelPrincipal(aChannel,
                                            getter_AddRefs(principal));
     }
   }
 
   ResetToURI(uri, aLoadGroup, principal);
 
+  nsCOMPtr<nsIPropertyBag2> bag = do_QueryInterface(aChannel);
+  if (bag) {
+    nsCOMPtr<nsIURI> baseURI;
+    bag->GetPropertyAsInterface(NS_LITERAL_STRING("baseURI"),
+                                NS_GET_IID(nsIURI), getter_AddRefs(baseURI));
+    if (baseURI) {
+      mDocumentBaseURI = baseURI;
+    }
+  }
+
   mChannel = aChannel;
 }
 
 void
 nsDocument::ResetToURI(nsIURI *aURI, nsILoadGroup *aLoadGroup,
                        nsIPrincipal* aPrincipal)
 {
   NS_PRECONDITION(aURI, "Null URI passed to ResetToURI");
diff --git a/content/base/test/Makefile.in b/content/base/test/Makefile.in
--- a/content/base/test/Makefile.in
+++ b/content/base/test/Makefile.in
@@ -86,16 +86,18 @@ _TEST_FILES = 	test_bug5141.html \
 		test_bug218236.html \
 		file_bug218236_multipart.txt \
 		file_bug218236_multipart.txt^headers^ \
 		test_bug218277.html \
 		test_bug238409.html \
 		test_bug254337.html \
 		test_bug276037-1.html \
 		test_bug276037-2.xhtml \
+		test_bug298064.html \
+		bug298064-subframe.html \
 		test_bug308484.html \
 		test_bug311681.xml \
 		test_bug322317.html \
 		test_bug330925.xhtml \
 		test_bug337631.html \
 		test_bug338541.xhtml \
 		test_bug338679.html \
 		test_bug339494.html \
diff --git a/content/base/test/bug298064-subframe.html b/content/base/test/bug298064-subframe.html
new file mode 100644
--- /dev/null
+++ b/content/base/test/bug298064-subframe.html
@@ -0,0 +1,24 @@
+<!DOCTYPE HTML>
+<html>
+  <head>
+    <script>
+      function test_func() {
+        var bar = new Option();
+        top.is(bar.ownerDocument, document,
+                  "Unexpected document for our new option");
+        bar = new Image();
+        top.is(bar.ownerDocument, document,
+                  "Unexpected document for our new image");
+        bar = new top.Option();
+        top.is(bar.ownerDocument, top.document,
+                  "Unexpected document for top new option");
+        bar = new top.Image();
+        top.is(bar.ownerDocument, top.document,
+                  "Unexpected document for top new image");
+        top.isnot(top.document, document, "Documents should be different");
+      }
+    </script>
+  </head>
+<html>
+   
+  
diff --git a/content/base/test/test_bug298064.html b/content/base/test/test_bug298064.html
new file mode 100644
--- /dev/null
+++ b/content/base/test/test_bug298064.html
@@ -0,0 +1,33 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=298064
+-->
+<head>
+  <title>Test for Bug 298064</title>
+  <script type="application/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=298064">Mozilla Bug 298064</a>
+<p id="display"><iframe src="bug298064-subframe.html"></iframe></p>
+<div id="content" style="display: none">
+  
+</div>
+<pre id="test">
+<script type="application/javascript">
+
+/** Test for Bug 298064 **/
+SimpleTest.waitForExplicitFinish()
+addLoadEvent(function() {
+  window.frames[0].test_func();
+});
+addLoadEvent(SimpleTest.finish);
+
+
+
+</script>
+</pre>
+</body>
+</html>
diff --git a/content/html/document/src/nsHTMLDocument.cpp b/content/html/document/src/nsHTMLDocument.cpp
--- a/content/html/document/src/nsHTMLDocument.cpp
+++ b/content/html/document/src/nsHTMLDocument.cpp
@@ -1815,20 +1815,23 @@ nsHTMLDocument::OpenCommon(const nsACStr
 
   // Note: We want to use GetDocumentFromContext here because this document
   // should inherit the security information of the document that's opening us,
   // (since if it's secure, then it's presumeably trusted).
   nsCOMPtr<nsIDocument> callerDoc =
     do_QueryInterface(nsContentUtils::GetDocumentFromContext());
 
   // Grab a reference to the calling documents security info (if any)
-  // and principal as it may be lost in the call to Reset().
+  // and URIs as they may be lost in the call to Reset().
   nsCOMPtr<nsISupports> securityInfo;
+  nsCOMPtr<nsIURI> uri, baseURI;
   if (callerDoc) {
     securityInfo = callerDoc->GetSecurityInfo();
+    uri = callerDoc->GetDocumentURI();
+    baseURI = callerDoc->GetBaseURI();
   }
 
   nsCOMPtr<nsIPrincipal> callerPrincipal;
   nsIScriptSecurityManager *secMan = nsContentUtils::GetSecurityManager();
 
   secMan->GetSubjectPrincipal(getter_AddRefs(callerPrincipal));
 
   if (!callerPrincipal) {
@@ -1849,28 +1852,16 @@ nsHTMLDocument::OpenCommon(const nsACStr
   // thing to do anyways.
 
   PRBool equals = PR_FALSE;
   if (NS_FAILED(callerPrincipal->Equals(NodePrincipal(), &equals)) ||
       !equals) {
     return NS_ERROR_DOM_SECURITY_ERR;
   }
 
-  // The URI for the document after this call. Get it from the calling
-  // principal (if available), or set it to "about:blank" if no
-  // principal is reachable.
-  nsCOMPtr<nsIURI> uri;
-  callerPrincipal->GetURI(getter_AddRefs(uri));
-
-  if (!uri) {
-    rv = NS_NewURI(getter_AddRefs(uri),
-                   NS_LITERAL_CSTRING("about:blank"));
-    NS_ENSURE_SUCCESS(rv, rv);
-  }
-
   // Stop current loads targeted at the window this document is in.
   if (mScriptGlobalObject) {
     nsCOMPtr<nsIContentViewer> cv;
     shell->GetContentViewer(getter_AddRefs(cv));
 
     if (cv) {
       PRBool okToUnload;
       rv = cv->PermitUnload(&okToUnload);
@@ -1891,16 +1882,19 @@ nsHTMLDocument::OpenCommon(const nsACStr
   nsCOMPtr<nsIChannel> channel;
   nsCOMPtr<nsILoadGroup> group = do_QueryReferent(mDocumentLoadGroup);
 
   rv = NS_NewChannel(getter_AddRefs(channel), uri, nsnull, group);
 
   if (NS_FAILED(rv)) {
     return rv;
   }
+
+  // We can't depend on channels implementing property bags, so do our
+  // base URI manually after reset.
 
   // Set the caller principal, if any, on the channel so that we'll
   // make sure to use it when we reset.
   rv = channel->SetOwner(callerPrincipal);
   NS_ENSURE_SUCCESS(rv, rv);
 
   // Before we reset the doc notify the globalwindow of the change,
   // but only if we still have a window (i.e. our window object the
@@ -1964,16 +1958,19 @@ nsHTMLDocument::OpenCommon(const nsACStr
 
   // Call Reset(), this will now do the full reset, except removing
   // the root from the document, doing that confuses the scrollbar
   // code in mozilla since the document in the root element and all
   // the anonymous content (i.e. scrollbar elements) is set to
   // null.
 
   Reset(channel, group);
+  if (baseURI) {
+    mDocumentBaseURI = baseURI;
+  }
 
   if (root) {
     // Tear down the frames for the root element.
     MOZ_AUTO_DOC_UPDATE(this, UPDATE_CONTENT_MODEL, PR_TRUE);
     nsNodeUtils::ContentRemoved(this, root, 0);
 
     // Put the root element back into the document, we don't notify
     // the document about this insertion since the sink will do that
diff --git a/content/html/document/test/Makefile.in b/content/html/document/test/Makefile.in
--- a/content/html/document/test/Makefile.in
+++ b/content/html/document/test/Makefile.in
@@ -41,16 +41,17 @@ VPATH		= @srcdir@
 VPATH		= @srcdir@
 relativesrcdir  = content/html/document/test
 
 include $(DEPTH)/config/autoconf.mk
 include $(topsrcdir)/config/rules.mk
 
 _TEST_FILES = 	test_bug1682.html \
 		test_bug1823.html \
+		test_bug57600.html \
 		test_bug196523.html \
 		bug196523-subframe.html \
 		test_bug199692.html \
 		bug199692-nested.html \
 		bug199692-nested-d2.html \
 		bug199692-popup.html \
 		bug199692-scrolled.html \
 		test_bug172261.html \
@@ -68,16 +69,22 @@ _TEST_FILES = 	test_bug1682.html \
 		test_bug391777.html \
 		test_bug402680.html \
 		test_bug403868.html \
 		test_bug403868.xhtml \
 		test_bug404320.html \
 		test_form-parsing.html \
 		test_viewport.html \
 		test_documentAll.html \
+		test_bug445004.html \
+		bug445004-inner.js \
+		bug445004-outer-rel.html \
+		bug445004-outer-abs.html \
+		bug445004-outer-write.html \
+		bug445004-inner.html \
 		test_bug448564.html \
 		bug448564-iframe-1.html \
 		bug448564-iframe-2.html \
 		bug448564-iframe-3.html \
 		bug448564-echo.sjs \
 		bug448564-submit.js \
 		$(NULL)
 
diff --git a/content/html/document/test/bug445004-inner.html b/content/html/document/test/bug445004-inner.html
new file mode 100644
--- /dev/null
+++ b/content/html/document/test/bug445004-inner.html
@@ -0,0 +1,14 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <base href="http://test1.example.org/tests/content/html/document/test/bug445004-inner.html">
+    <script src="bug445004-inner.js"></script>
+  </head>
+  <body>
+    <iframe name="w" id="w" width="100" height="100"></iframe>
+    <iframe name="x" id="x" width="100" height="100"></iframe>
+    <iframe name="y" id="y" width="100" height="100"></iframe>
+    <iframe name="z" id="z" width="100" height="100"></iframe>
+    <img src="test1.example.org.png">
+  </body>
+</html>
diff --git a/content/html/document/test/bug445004-inner.js b/content/html/document/test/bug445004-inner.js
new file mode 100644
--- /dev/null
+++ b/content/html/document/test/bug445004-inner.js
@@ -0,0 +1,23 @@
+document.domain = "example.org";
+function $(str) { return document.getElementById(str); }
+function hookLoad(str) {
+  $(str).onload = function() { window.parent.parent.postMessage('end', '*'); };
+  window.parent.parent.postMessage('start', '*');
+}
+window.onload = function() {
+  hookLoad("w");
+  $("w").contentWindow.location.href = "test1.example.org.png";
+  hookLoad("x");
+  var doc = $("x").contentDocument;
+  doc.write('<img src="test1.example.org.png">');
+  doc.close();
+};
+function doIt() {
+  hookLoad("y");
+  $("y").contentWindow.location.href = "example.org.png";
+  hookLoad("z");
+  var doc = $("z").contentDocument;
+  doc.write('<img src="example.org.png">');
+  doc.close();
+}
+window.addEventListener("message", doIt, false);
\ No newline at end of file
diff --git a/content/html/document/test/bug445004-outer-abs.html b/content/html/document/test/bug445004-outer-abs.html
new file mode 100644
--- /dev/null
+++ b/content/html/document/test/bug445004-outer-abs.html
@@ -0,0 +1,11 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <base href="http://example.org/tests/content/html/document/test/bug445004-outer.html">
+    <script>document.domain = "example.org"</script>
+  </head>  
+  <body>
+    <iframe width="500" height="200" src="http://test1.example.org/tests/content/html/document/test/bug445004-inner.html"
+            onload="window.frames[0].doIt()"></iframe>
+  </body>
+</html>
diff --git a/content/html/document/test/bug445004-outer-rel.html b/content/html/document/test/bug445004-outer-rel.html
new file mode 100644
--- /dev/null
+++ b/content/html/document/test/bug445004-outer-rel.html
@@ -0,0 +1,11 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <base href="http://example.org/tests/content/html/document/test/bug445004-outer.html">
+    <script>document.domain = "example.org"</script>
+  </head>  
+  <body>
+    <iframe width="500" height="200" src="bug445004-inner.html"
+            onload="window.frames[0].doIt()"></iframe>
+  </body>
+</html>
diff --git a/content/html/document/test/bug445004-outer-write.html b/content/html/document/test/bug445004-outer-write.html
new file mode 100644
--- /dev/null
+++ b/content/html/document/test/bug445004-outer-write.html
@@ -0,0 +1,11 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <base href="http://example.org/tests/content/html/document/test/bug445004-outer.html">
+    <script>document.domain = "example.org"</script>
+  </head>  
+  <body>
+    <iframe width="500" height="200" src="javascript:&quot;<!DOCTYPE html> <html>  <script> function $(str) { return document.getElementById(str); } function hookLoad(str) { $(str).onload = function() { window.parent.parent.postMessage('end', '*'); }; window.parent.parent.postMessage('start', '*'); } window.onload = function() { hookLoad(\&quot;w\&quot;); $(\&quot;w\&quot;).contentWindow.location.href = \&quot;example.org.png\&quot;; hookLoad(\&quot;x\&quot;); var doc = $(\&quot;x\&quot;).contentDocument; doc.write('<img src=\&quot;example.org.png\&quot;>'); doc.close(); }; function doIt() { hookLoad(\&quot;y\&quot;); $(\&quot;y\&quot;).contentWindow.location.href = \&quot;example.org.png\&quot;; hookLoad(\&quot;z\&quot;); var doc = $(\&quot;z\&quot;).contentDocument; doc.write('<img src=\&quot;example.org.png\&quot;>'); doc.close(); } </script> <body> <iframe name=\&quot;w\&quot; id=\&quot;w\&quot; width=\&quot;100\&quot; height=\&quot;100\&quot;></iframe> <iframe name=\&quot;x\&quot; id=\&quot;x\&quot; width=\&quot;100\&quot; height=\&quot;100\&quot;></iframe> <iframe name=\&quot;y\&quot; id=\&quot;y\&quot; width=\&quot;100\&quot; height=\&quot;100\&quot;></iframe> <iframe name=\&quot;z\&quot; id=\&quot;z\&quot; width=\&quot;100\&quot; height=\&quot;100\&quot;></iframe><img src=\&quot;example.org.png\&quot;> </body> </html>&quot; "
+            onload="window.frames[0].doIt();"></iframe>
+  </body>
+</html>
diff --git a/content/html/document/test/test_bug445004.html b/content/html/document/test/test_bug445004.html
new file mode 100644
--- /dev/null
+++ b/content/html/document/test/test_bug445004.html
@@ -0,0 +1,139 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=445004
+-->
+<head>
+  <title>Test for Bug 445004</title>
+  <script type="application/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=445004">Mozilla Bug 445004</a>
+<div id="content" style="display: none">
+  
+</div>
+<pre id="test">
+<script type="application/javascript">
+
+/** Test for Bug 445004 **/
+is(window.location.hostname, "localhost", "Unexpected hostname");
+is(window.location.port, "8888", "Unexpected port; fix testcase");
+
+SimpleTest.waitForExplicitFinish();
+
+var loads = 0;
+
+function loadStarted() {
+  ++loads;
+}
+function loadEnded() {
+  --loads;
+  if (loads == 0) {
+    doTest();
+  }
+}
+
+function getMessage(evt) {
+  ok(evt.data == "start" || evt.data == "end", "Must have start or end");
+  if (evt.data == "start")
+    loadStarted();
+  else
+    loadEnded();
+}
+
+window.addEventListener("message", getMessage, false);
+
+function checkURI(uri, name, type) {
+  var host = uri.match(/^http:\/\/([a-z.0-9]*)/)[1];
+  var file = uri.match(/([^\/]*).png$/)[1];
+  is(host, file, "Unexpected base URI for test " + name +
+     " when testing " + type);
+}
+
+function checkFrame(num) {
+  // Just snarf our data
+  netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+
+  var outer = window.frames[num]
+  name = outer.name;
+
+  is(outer.document.baseURI,
+     "http://example.org/tests/content/html/document/test/bug445004-outer.html",
+     "Unexpected base URI for " + name);
+
+  var iswrite = name.match(/write/);
+
+  var inner = outer.frames[0];
+  if (iswrite) {
+    is(inner.document.baseURI,
+       "http://example.org/tests/content/html/document/test/bug445004-outer.html",
+       "Unexpected inner base URI for " + name);
+  } else {
+    is(inner.document.baseURI,
+       "http://test1.example.org/tests/content/html/document/test/bug445004-inner.html",
+       "Unexpected inner base URI for " + name);
+  }
+
+  var isrel = name.match(/rel/);
+  var offsite = name.match(/offsite/);
+
+  if (!iswrite) {
+    if ((isrel && !offsite) || (!isrel && offsite)) {
+      is(inner.location.hostname, outer.location.hostname,
+         "Unexpected hostnames for " + name);
+    } else {
+      isnot(inner.location.hostname, outer.location.hostname,
+            "Unexpected hostnames for " + name);
+    }
+  }
+
+  checkURI(inner.frames[0].location.href, name, "direct location");
+  checkURI(inner.frames[1].document.getElementsByTagName("img")[0].src,
+           name, "direct write");
+  if (!iswrite) {
+    is(inner.frames[1].location.hostname, inner.location.hostname,
+       "Incorrect hostname for " + name + " direct write")
+  }
+  checkURI(inner.frames[2].location.href, name, "indirect location");
+  checkURI(inner.frames[3].document.getElementsByTagName("img")[0].src,
+           name, "indirect write");
+  if (!iswrite) {
+    is(inner.frames[3].location.hostname, outer.location.hostname,
+       "Incorrect hostname for " + name + " indirect write")
+  }
+  checkURI(inner.document.getElementsByTagName("img")[0].src,
+           name, "direct image load");
+}
+
+
+function doTest() {
+  for (var num = 0; num < 5; ++num) {
+    checkFrame(num);
+  }
+
+  SimpleTest.finish();
+}
+
+</script>
+</pre>
+<p id="display">
+  <iframe
+     src="http://example.org/tests/content/html/document/test/bug445004-outer-rel.html"
+     name="bug445004-outer-rel.html"></iframe>
+  <iframe
+     src="http://test1.example.org/tests/content/html/document/test/bug445004-outer-rel.html">
+     name="bug445004-outer-rel.html offsite"></iframe>
+  <iframe
+     src="http://example.org/tests/content/html/document/test/bug445004-outer-abs.html">
+     name="bug445004-outer-abs.html"></iframe>
+  <iframe
+     src="http://test1.example.org/tests/content/html/document/test/bug445004-outer-abs.html"
+     name="bug445004-outer-abs.html offsite"></iframe>
+  <iframe
+     src="http://example.org/tests/content/html/document/test/bug445004-outer-write.html"
+     name="bug445004-outer-write.html"></iframe>
+</p>
+</body>
+</html>
diff --git a/content/html/document/test/test_bug57600.html b/content/html/document/test/test_bug57600.html
new file mode 100644
--- /dev/null
+++ b/content/html/document/test/test_bug57600.html
@@ -0,0 +1,43 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=57600
+-->
+<head>
+  <title>Test for Bug 57600</title>
+  <script type="application/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=57600">Mozilla Bug 57600</a>
+<div id="content" style="display: none">
+  
+</div>
+<pre id="test">
+<script type="application/javascript">
+
+/** Test for Bug 57600 **/
+SimpleTest.waitForExplicitFinish();
+var count = 0;
+function disp(win) {
+  var d = win ? win.document : self.testname.document;
+  var str = 'You should see this';
+  d.open();
+  d.write(str);
+  d.close();
+  is(d.documentElement.textContent, str, "Unexpected text");
+  if (++count == 2) {
+    SimpleTest.finish();
+  }
+}
+</script>
+</pre>
+<p id="display">
+  <iframe src="javascript:'<body onload=&quot;this.onerror = parent.onerror; parent.disp(self)&quot;></body>'"> 
+  </iframe>
+  <iframe name="testname" src="javascript:'<body onload=&quot;this.onerror = parent.onerror; parent.disp()&quot;></body>'"> 
+  </iframe>
+</p>
+</body>
+</html>
diff --git a/dom/src/base/nsLocation.cpp b/dom/src/base/nsLocation.cpp
--- a/dom/src/base/nsLocation.cpp
+++ b/dom/src/base/nsLocation.cpp
@@ -239,17 +239,19 @@ nsLocation::CheckURL(nsIURI* aURI, nsIDo
 
   loadInfo.swap(*aLoadInfo);
 
   return NS_OK;
 }
 
 // Walk up the docshell hierarchy and find a usable base URI. Basically 
 // anything that would allow a relative uri.
-
+// XXXbz we don't need this for javascript: URIs anymore.  Do we need
+// it for about:blank?  I would think that we don't, and that we can
+// nuke this code.
 nsresult
 nsLocation::FindUsableBaseURI(nsIURI * aBaseURI, nsIDocShell * aParent,
                               nsIURI ** aUsableURI)
 {
   if (!aBaseURI || !aParent)
     return NS_ERROR_FAILURE;
   NS_ENSURE_ARG_POINTER(aUsableURI);
 
diff --git a/dom/src/jsurl/nsJSProtocolHandler.cpp b/dom/src/jsurl/nsJSProtocolHandler.cpp
--- a/dom/src/jsurl/nsJSProtocolHandler.cpp
+++ b/dom/src/jsurl/nsJSProtocolHandler.cpp
@@ -70,16 +70,21 @@
 #include "nsIContentViewer.h"
 #include "nsIXPConnect.h"
 #include "nsContentUtils.h"
 #include "nsJSUtils.h"
 #include "nsThreadUtils.h"
 #include "nsIJSContextStack.h"
 #include "nsIScriptChannel.h"
 #include "nsIDocument.h"
+#include "nsIObjectInputStream.h"
+#include "nsIObjectOutputStream.h"
+#include "nsIWritablePropertyBag2.h"
+
+static NS_DEFINE_CID(kJSURICID, NS_JSURI_CID);
 
 class nsJSThunk : public nsIInputStream
 {
 public:
     nsJSThunk();
 
     NS_DECL_ISUPPORTS
     NS_FORWARD_SAFE_NSIINPUTSTREAM(mInnerStream)
@@ -378,27 +383,30 @@ nsresult nsJSThunk::EvaluateScript(nsICh
 
     return rv;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
 
 class nsJSChannel : public nsIChannel,
                     public nsIStreamListener,
-                    public nsIScriptChannel
+                    public nsIScriptChannel,
+                    public nsIPropertyBag2
 {
 public:
     nsJSChannel();
 
     NS_DECL_ISUPPORTS
     NS_DECL_NSIREQUEST
     NS_DECL_NSICHANNEL
     NS_DECL_NSIREQUESTOBSERVER
     NS_DECL_NSISTREAMLISTENER
     NS_DECL_NSISCRIPTCHANNEL
+    NS_FORWARD_SAFE_NSIPROPERTYBAG(mPropertyBag)
+    NS_FORWARD_SAFE_NSIPROPERTYBAG2(mPropertyBag)
 
     nsresult Init(nsIURI *aURI);
 
     // Actually evaluate the script.
     void EvaluateScript();
     
 protected:
     virtual ~nsJSChannel();
@@ -406,16 +414,17 @@ protected:
     nsresult StopAll();
 
     void NotifyListener();
 
     void CleanupStrongRefs();
     
 protected:
     nsCOMPtr<nsIChannel>    mStreamChannel;
+    nsCOMPtr<nsIPropertyBag2> mPropertyBag;
     nsCOMPtr<nsIStreamListener> mListener;  // Our final listener
     nsCOMPtr<nsISupports> mContext; // The context passed to AsyncOpen
     nsCOMPtr<nsPIDOMWindow> mOriginalInnerWindow;  // The inner window our load
                                                    // started against.
     // If we blocked onload on a document in AsyncOpen, this is the document we
     // did it on.
     nsCOMPtr<nsIDocument>   mDocumentOnloadBlockedOn;
 
@@ -459,17 +468,20 @@ nsresult nsJSChannel::StopAll()
         rv = webNav->Stop(nsIWebNavigation::STOP_ALL);
     }
 
     return rv;
 }
 
 nsresult nsJSChannel::Init(nsIURI *aURI)
 {
-    nsresult rv;
+    nsRefPtr<nsJSURI> jsURI;
+    nsresult rv = aURI->QueryInterface(kJSURICID,
+                                       getter_AddRefs(jsURI));
+    NS_ENSURE_SUCCESS(rv, rv);
 
     // Create the nsIStreamIO layer used by the nsIStreamIOChannel.
     mIOThunk = new nsJSThunk();
     if (!mIOThunk)
         return NS_ERROR_OUT_OF_MEMORY;
 
     // Create a stock input stream channel...
     // Remember, until AsyncOpen is called, the script will not be evaluated
@@ -480,36 +492,35 @@ nsresult nsJSChannel::Init(nsIURI *aURI)
     // treat it as html.
     rv = NS_NewInputStreamChannel(getter_AddRefs(channel), aURI, mIOThunk,
                                   NS_LITERAL_CSTRING("text/html"));
     if (NS_FAILED(rv)) return rv;
 
     rv = mIOThunk->Init(aURI);
     if (NS_SUCCEEDED(rv)) {
         mStreamChannel = channel;
+        mPropertyBag = do_QueryInterface(channel);
+        nsCOMPtr<nsIWritablePropertyBag2> writableBag =
+            do_QueryInterface(channel);
+        if (writableBag && jsURI->GetBaseURI()) {
+            writableBag->SetPropertyAsInterface(NS_LITERAL_STRING("baseURI"),
+                                                jsURI->GetBaseURI());
+        }
     }
 
     return rv;
 }
 
 //
 // nsISupports implementation...
 //
 
-NS_IMPL_ADDREF(nsJSChannel)
-NS_IMPL_RELEASE(nsJSChannel)
-
-NS_INTERFACE_MAP_BEGIN(nsJSChannel)
-    NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIChannel)
-    NS_INTERFACE_MAP_ENTRY(nsIRequest)
-    NS_INTERFACE_MAP_ENTRY(nsIChannel)
-    NS_INTERFACE_MAP_ENTRY(nsIRequestObserver)
-    NS_INTERFACE_MAP_ENTRY(nsIStreamListener)
-    NS_INTERFACE_MAP_ENTRY(nsIScriptChannel)
-NS_INTERFACE_MAP_END
+NS_IMPL_ISUPPORTS7(nsJSChannel, nsIChannel, nsIRequest, nsIRequestObserver,
+                   nsIStreamListener, nsIScriptChannel, nsIPropertyBag,
+                   nsIPropertyBag2)
 
 //
 // nsIRequest implementation...
 //
 
 NS_IMETHODIMP
 nsJSChannel::GetName(nsACString &aResult)
 {
@@ -1159,28 +1170,27 @@ nsJSProtocolHandler::GetProtocolFlags(PR
 {
     *result = URI_NORELATIVE | URI_NOAUTH | URI_INHERITS_SECURITY_CONTEXT |
         URI_LOADABLE_BY_ANYONE | URI_NON_PERSISTABLE;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsJSProtocolHandler::NewURI(const nsACString &aSpec,
-                            const char *aCharset, // ignore charset info
+                            const char *aCharset,
                             nsIURI *aBaseURI,
                             nsIURI **result)
 {
     nsresult rv;
 
     // javascript: URLs (currently) have no additional structure beyond that
     // provided by standard URLs, so there is no "outer" object given to
     // CreateInstance.
 
-    nsIURI* url;
-    rv = CallCreateInstance(NS_SIMPLEURI_CONTRACTID, &url);
+    nsCOMPtr<nsIURI> url = do_CreateInstance(NS_SIMPLEURI_CONTRACTID, &rv);
 
     if (NS_FAILED(rv))
         return rv;
 
     if (!aCharset || !nsCRT::strcasecmp("UTF-8", aCharset))
       rv = url->SetSpec(aSpec);
     else {
       nsCAutoString utf8Spec;
@@ -1189,21 +1199,23 @@ nsJSProtocolHandler::NewURI(const nsACSt
         if (utf8Spec.IsEmpty())
           rv = url->SetSpec(aSpec);
         else
           rv = url->SetSpec(utf8Spec);
       }
     }
 
     if (NS_FAILED(rv)) {
-        NS_RELEASE(url);
         return rv;
     }
 
-    *result = url;
+    *result = new nsJSURI(aBaseURI, url);
+    NS_ENSURE_TRUE(*result, NS_ERROR_OUT_OF_MEMORY);
+
+    NS_ADDREF(*result);
     return rv;
 }
 
 NS_IMETHODIMP
 nsJSProtocolHandler::NewChannel(nsIURI* uri, nsIChannel* *result)
 {
     nsresult rv;
     nsJSChannel * channel;
@@ -1228,8 +1240,154 @@ NS_IMETHODIMP
 NS_IMETHODIMP 
 nsJSProtocolHandler::AllowPort(PRInt32 port, const char *scheme, PRBool *_retval)
 {
     // don't override anything.  
     *_retval = PR_FALSE;
     return NS_OK;
 }
 
+////////////////////////////////////////////////////////////
+// nsJSURI implementation
+
+NS_IMPL_ADDREF(nsJSURI)
+NS_IMPL_RELEASE(nsJSURI)
+
+NS_INTERFACE_MAP_BEGIN(nsJSURI)
+  NS_INTERFACE_MAP_ENTRY(nsIURI)
+  NS_INTERFACE_MAP_ENTRY(nsISerializable)
+  NS_INTERFACE_MAP_ENTRY(nsIClassInfo)
+  NS_INTERFACE_MAP_ENTRY(nsIMutable)
+  NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIURI)
+  if (aIID.Equals(kJSURICID))
+      foundInterface = static_cast<nsIURI*>(this);
+  else
+NS_INTERFACE_MAP_END
+
+// nsISerializable methods:
+
+NS_IMETHODIMP
+nsJSURI::Read(nsIObjectInputStream* aStream)
+{
+    nsresult rv;
+
+    rv = aStream->ReadObject(PR_TRUE, getter_AddRefs(mSimpleURI));
+    if (NS_FAILED(rv)) return rv;
+
+    mMutable = do_QueryInterface(mSimpleURI);
+    NS_ENSURE_TRUE(mMutable, NS_ERROR_UNEXPECTED);
+
+    PRBool haveBase;
+    rv = aStream->ReadBoolean(&haveBase);
+    if (NS_FAILED(rv)) return rv;
+
+    if (haveBase) {
+        rv = aStream->ReadObject(PR_TRUE, getter_AddRefs(mBaseURI));
+        if (NS_FAILED(rv)) return rv;
+    }
+
+    return NS_OK;
+}
+
+NS_IMETHODIMP
+nsJSURI::Write(nsIObjectOutputStream* aStream)
+{
+    nsresult rv;
+
+    rv = aStream->WriteObject(mSimpleURI, PR_TRUE);
+    if (NS_FAILED(rv)) return rv;
+
+    rv = aStream->WriteBoolean(mBaseURI != nsnull);
+    if (NS_FAILED(rv)) return rv;
+
+    if (mBaseURI) {
+        rv = aStream->WriteObject(mBaseURI, PR_TRUE);
+        if (NS_FAILED(rv)) return rv;
+    }
+
+    return NS_OK;
+}
+
+// nsIURI methods:
+
+NS_IMETHODIMP
+nsJSURI::Clone(nsIURI** aClone)
+{
+    nsCOMPtr<nsIURI> simpleClone;
+    nsresult rv = mSimpleURI->Clone(getter_AddRefs(simpleClone));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    nsCOMPtr<nsIURI> baseClone;
+    if (mBaseURI) {
+        rv = mBaseURI->Clone(getter_AddRefs(baseClone));
+        NS_ENSURE_SUCCESS(rv, rv);
+    }
+
+    nsIURI* newURI = new nsJSURI(baseClone, simpleClone);
+    NS_ENSURE_TRUE(newURI, NS_ERROR_OUT_OF_MEMORY);
+
+    NS_ADDREF(*aClone = newURI);
+    return NS_OK;
+}
+
+// nsIClassInfo methods:
+NS_IMETHODIMP 
+nsJSURI::GetInterfaces(PRUint32 *count, nsIID * **array)
+{
+    *count = 0;
+    *array = nsnull;
+    return NS_OK;
+}
+
+NS_IMETHODIMP 
+nsJSURI::GetHelperForLanguage(PRUint32 language, nsISupports **_retval)
+{
+    *_retval = nsnull;
+    return NS_OK;
+}
+
+NS_IMETHODIMP 
+nsJSURI::GetContractID(char * *aContractID)
+{
+    // Make sure to modify any subclasses as needed if this ever
+    // changes.
+    *aContractID = nsnull;
+    return NS_OK;
+}
+
+NS_IMETHODIMP 
+nsJSURI::GetClassDescription(char * *aClassDescription)
+{
+    *aClassDescription = nsnull;
+    return NS_OK;
+}
+
+NS_IMETHODIMP 
+nsJSURI::GetClassID(nsCID * *aClassID)
+{
+    // Make sure to modify any subclasses as needed if this ever
+    // changes to not call the virtual GetClassIDNoAlloc.
+    *aClassID = (nsCID*) nsMemory::Alloc(sizeof(nsCID));
+    if (!*aClassID)
+        return NS_ERROR_OUT_OF_MEMORY;
+    return GetClassIDNoAlloc(*aClassID);
+}
+
+NS_IMETHODIMP 
+nsJSURI::GetImplementationLanguage(PRUint32 *aImplementationLanguage)
+{
+    *aImplementationLanguage = nsIProgrammingLanguage::CPLUSPLUS;
+    return NS_OK;
+}
+
+NS_IMETHODIMP 
+nsJSURI::GetFlags(PRUint32 *aFlags)
+{
+    *aFlags = nsIClassInfo::MAIN_THREAD_ONLY;
+    return NS_OK;
+}
+
+NS_IMETHODIMP 
+nsJSURI::GetClassIDNoAlloc(nsCID *aClassIDNoAlloc)
+{
+    *aClassIDNoAlloc = kJSURICID;
+    return NS_OK;
+}
diff --git a/dom/src/jsurl/nsJSProtocolHandler.h b/dom/src/jsurl/nsJSProtocolHandler.h
--- a/dom/src/jsurl/nsJSProtocolHandler.h
+++ b/dom/src/jsurl/nsJSProtocolHandler.h
@@ -35,23 +35,35 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef nsJSProtocolHandler_h___
 #define nsJSProtocolHandler_h___
 
 #include "nsIProtocolHandler.h"
 #include "nsITextToSubURI.h"
+#include "nsIURI.h"
+#include "nsIMutable.h"
+#include "nsISerializable.h"
+#include "nsIClassInfo.h"
 
 #define NS_JSPROTOCOLHANDLER_CID                     \
 { /* bfc310d2-38a0-11d3-8cd3-0060b0fc14a3 */         \
     0xbfc310d2,                                      \
     0x38a0,                                          \
     0x11d3,                                          \
     {0x8c, 0xd3, 0x00, 0x60, 0xb0, 0xfc, 0x14, 0xa3} \
+}
+
+#define NS_JSURI_CID                                 \
+{ /* 58f089ee-512a-42d2-a935-d0c874128930 */         \
+    0x58f089ee,                                      \
+    0x512a,                                          \
+    0x42d2,                                          \
+    {0xa9, 0x35, 0xd0, 0xc8, 0x74, 0x12, 0x89, 0x30} \
 }
 
 #define NS_JSPROTOCOLHANDLER_CONTRACTID \
     NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "javascript"
 
 
 class nsJSProtocolHandler : public nsIProtocolHandler
 {
@@ -73,9 +85,62 @@ protected:
 protected:
 
     nsresult EnsureUTF8Spec(const nsAFlatCString &aSpec, const char *aCharset, 
                             nsACString &aUTF8Spec);
 
     nsCOMPtr<nsITextToSubURI>  mTextToSubURI;
 };
 
+// Use an extra base object to avoid having to manually retype all the
+// nsIURI methods.  I wish we could just inherit from nsSimpleURI instead.
+class nsJSURI_base : public nsIURI,
+                     public nsIMutable
+{
+public:
+    nsJSURI_base(nsIURI* aSimpleURI) :
+        mSimpleURI(aSimpleURI)
+    {
+        mMutable = do_QueryInterface(mSimpleURI);
+        NS_ASSERTION(aSimpleURI && mMutable, "This isn't going to work out");
+    }
+    virtual ~nsJSURI_base() {}
+
+    // For use only from deserialization
+    nsJSURI_base() {}
+    
+    NS_FORWARD_NSIURI(mSimpleURI->)
+    NS_FORWARD_NSIMUTABLE(mMutable->)
+
+protected:
+    nsCOMPtr<nsIURI> mSimpleURI;
+    nsCOMPtr<nsIMutable> mMutable;
+};
+
+class nsJSURI : public nsJSURI_base,
+                public nsISerializable,
+                public nsIClassInfo
+{
+public:
+    nsJSURI(nsIURI* aBaseURI, nsIURI* aSimpleURI) :
+        nsJSURI_base(aSimpleURI), mBaseURI(aBaseURI)
+    {}
+    virtual ~nsJSURI() {}
+
+    // For use only from deserialization
+    nsJSURI() : nsJSURI_base() {}
+
+    NS_DECL_ISUPPORTS
+    NS_DECL_NSISERIALIZABLE
+    NS_DECL_NSICLASSINFO
+
+    // Override Clone()
+    NS_IMETHOD Clone(nsIURI** aClone);
+
+    nsIURI* GetBaseURI() const {
+        return mBaseURI;
+    }
+
+private:
+    nsCOMPtr<nsIURI> mBaseURI;
+};
+    
 #endif /* nsJSProtocolHandler_h___ */
diff --git a/layout/base/nsDocumentViewer.cpp b/layout/base/nsDocumentViewer.cpp
--- a/layout/base/nsDocumentViewer.cpp
+++ b/layout/base/nsDocumentViewer.cpp
@@ -120,16 +120,17 @@
 #include "nsIFocusController.h"
 #include "nsIMenuParent.h"
 
 #include "nsIScrollableView.h"
 #include "nsIHTMLDocument.h"
 #include "nsITimelineService.h"
 #include "nsGfxCIID.h"
 #include "nsStyleSheetService.h"
+#include "ImageErrors.h"
 
 #include "nsIPrompt.h"
 #include "imgIContainer.h" // image animation mode constants
 
 //--------------------------
 // Printing Include
 //---------------------------
 #ifdef NS_PRINTING
@@ -958,17 +959,22 @@ DocumentViewerImpl::LoadComplete(nsresul
 
   // First, get the window from the document...
   nsPIDOMWindow *window = mDocument->GetWindow();
 
   mLoaded = PR_TRUE;
 
   // Now, fire either an OnLoad or OnError event to the document...
   PRBool restoring = PR_FALSE;
-  if(NS_SUCCEEDED(aStatus) && window) {
+  // XXXbz imagelib kills off the document load for a full-page image with
+  // NS_IMAGELIB_ERROR_LOAD_ABORTED if it's in the cache.  So we want to treat
+  // that one as a success code; otherwise whether we fire onload for the image
+  // will depend on whether it's cached!
+  if(window &&
+     (NS_SUCCEEDED(aStatus) || aStatus == NS_IMAGELIB_ERROR_LOAD_ABORTED)) {
     nsEventStatus status = nsEventStatus_eIgnore;
     nsEvent event(PR_TRUE, NS_LOAD);
     event.flags |= NS_EVENT_FLAG_CANT_BUBBLE;
      // XXX Dispatching to |window|, but using |document| as the target.
     event.target = mDocument;
 
     // If the document presentation is being restored, we don't want to fire
     // onload to the document content since that would likely confuse scripts
diff --git a/layout/build/nsLayoutModule.cpp b/layout/build/nsLayoutModule.cpp
--- a/layout/build/nsLayoutModule.cpp
+++ b/layout/build/nsLayoutModule.cpp
@@ -535,16 +535,18 @@ MAKE_CTOR(CreateVideoDocument,          
 #endif
 
 #ifdef MOZ_ENABLE_CANVAS
 MAKE_CTOR(CreateCanvasRenderingContext2D, nsIDOMCanvasRenderingContext2D, NS_NewCanvasRenderingContext2D)
 #endif
 
 NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsStyleSheetService, Init)
 
+NS_GENERIC_FACTORY_CONSTRUCTOR(nsJSURI)
+
 // views are not refcounted, so this is the same as
 // NS_GENERIC_FACTORY_CONSTRUCTOR without the NS_ADDREF/NS_RELEASE
 #define NS_GENERIC_FACTORY_CONSTRUCTOR_NOREFS(_InstanceClass)                 \
 static NS_IMETHODIMP                                                          \
 _InstanceClass##Constructor(nsISupports *aOuter, REFNSIID aIID,               \
                             void **aResult)                                   \
 {                                                                             \
     nsresult rv;                                                              \
@@ -1250,16 +1252,20 @@ static const nsModuleComponentInfo gComp
     NS_BASE_DOM_EXCEPTION_CID,
     nsnull,
     nsBaseDOMExceptionConstructor
   },
   { "JavaScript Protocol Handler",
     NS_JSPROTOCOLHANDLER_CID,
     NS_JSPROTOCOLHANDLER_CONTRACTID,
     nsJSProtocolHandler::Create },
+  { "JavaScript URI",
+    NS_JSURI_CID,
+    nsnull,
+    nsJSURIConstructor },
   { "Window Command Table",
     NS_WINDOWCOMMANDTABLE_CID,
     "",
     CreateWindowCommandTableConstructor
   },
   { "Window Command Controller",
     NS_WINDOWCONTROLLER_CID,
     NS_WINDOWCONTROLLER_CONTRACTID,
diff --git a/layout/reftests/bugs/445004-1-ref.html b/layout/reftests/bugs/445004-1-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/445004-1-ref.html
@@ -0,0 +1,4 @@
+<!DOCTYPE html>
+<body>
+  <iframe width="500" height="200" src="subdir/445004-ref-subframe.html"></iframe>
+</body>
diff --git a/layout/reftests/bugs/445004-1.html b/layout/reftests/bugs/445004-1.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/445004-1.html
@@ -0,0 +1,31 @@
+<!DOCTYPE html>
+<html class="reftest-wait">
+  <head>
+    <script>
+      var loads = 0;
+      function loadStarted() {
+        ++loads;
+      }
+      function loadEnded() {
+        --loads;
+        if (loads == 0) {
+          document.documentElement.className = "";
+        }
+      }
+      loadStarted();
+      window.onload = function() {
+        if (location.protocol != 'file:') {
+          var txt = document.createTextNode('Must be run from file://');
+          var div = document.createElement("div");
+          div.appendChild(txt);
+          document.body.appendChild(div);
+        }
+        loadEnded();
+      }
+    </script>
+  </head>  
+  <body>
+    <iframe width="500" height="200" src="subdir/445004-subframe.html"
+            onload="window.frames[0].doIt();"></iframe>
+  </body>
+</html>
diff --git a/layout/reftests/bugs/passinner.png b/layout/reftests/bugs/passinner.png
new file mode 100644
index 0000000000000000000000000000000000000000..ce5c1d9738bb4f0e3e47d68cb00b2acfea7da4a3
GIT binary patch
literal 563
zc$@(<0?hr1P)<h;3K|Lk000e1NJLTq001%o000yS0ssI2K&bi600001b5ch_0Itp)
z=>Px#32;bRa{vGf6951U69E94oEQKA00(qQO+^RT3Lh3W78MYXYybcN8FWQhbVF}#
zZDnqB07G(RVRU6=Aa`kWXdp*PO;A^X4i^9b0ia1lK~zY`?N+_ZL2(p5=k_W#UxP(a
zcaxI*0~WJvJ_g+U50b%PmF!q3Nt80lU{#7@vB;tf<SsW+_nvonz4^MA_bp$8r?Z@o
z-|6Y}oYN0Qct<esp>;P}4AG@wJbqH7(=nS3Lxg_6YzJ($lw2iz-DW-<QYLd8puynS
z#b6NBY7hj7Mxj!<%d~FOqWPT4<tqiqaWEcJvx$iWSu8M{y@9rzPH;G=P@rNF05B4H
zmgH3`Fd7f0*PoASx1&-Crc>&6F&qZw9&03CHM+!NaVSu$X}y-J)gM<11c*rTc+NUV
zt(KCjWPgx+uSdz`L2BFWVN^aJXthu%>{E>f@;q=HwA+uD{BlX1j(m>eV7a8(3|Mww
z+-{@SO9lh1R*$8n2&)y{Za`!vlk?pSg(#PM4K0jB0Fh!b;Q5nyI*rlji)b+nhQlx#
zQ9gg3ve__|0+$Q={b$ocj|a?V`W5?$7VC9PrI6!DfflkX9PQBlRW=KP@Q(u_yU$Xs
zMnt0BF8^vWA)XgC8rcIO3(;gc?tq{F)`!-E@C~LuCvrq&_UQls002ovPDHLkV1i=V
B>AnB}

diff --git a/layout/reftests/bugs/passouter.png b/layout/reftests/bugs/passouter.png
new file mode 100644
index 0000000000000000000000000000000000000000..3b30b1de7c5fdc8f71fe7a526a0b50338f23da58
GIT binary patch
literal 1036
zc$@(Y1oQieP)<h;3K|Lk000e1NJLTq001%o000yS0ssI2K&bi600001b5ch_0Itp)
z=>Px#32;bRa{vGf6951U69E94oEQKA00(qQO+^RT3Lh3VIhE}G_5c6?8FWQhbVF}#
zZDnqB07G(RVRU6=Aa`kWXdp*PO;A^X4i^9b19?eAK~zY`W0XphU>JOWiD6KJLFz0P
zOrfVUpTpUI{{DXX@zv2AM<#5W@bL8mxHvx-|M{+q?5ynBbFwy^UXNyinTlDKd$y6H
zu>iNgw_o2LzJ7S_-r339Cp~-rj7SA6SRH%y@zt5Tr!z1xu(Gh}%IQX0N4e>{yS2DH
zefJciAjmwJot6FD&u<ad5opeG(|4bnIq&Jarwb0ufAa1LF9)xlyuP1_|E`NWA+{1!
zfYVtoK0IH0axH|t;^^|DH;&BCn492`*t)I-A{c2Mb>rEMT^DxddgjRr%RYYl7_PS>
zpz__9ckV5&AHRKs3$nAav$L`jsestDwfpjJ1_lNNF+~VhS58-3R(r*fWh;&@XJB9m
zw~9bktSqi{?a5VSD;XFVe*XUX>DwnF6%gwzWpNb-28MT^-@=3H_n+TuPON$O=Hc;M
z$HJ__nHUk~JbVA#P|-+3N&}Z^1QjqaFfj8P^PmY8`<6U@`*{D=eVlBZyqtU%YL-2*
zy#m|<b*t*0y?@5e%04k+(%#E^)|^<)z`*e5@1F?kh%<LjKYaZVqW#N{FTTdUvG#E;
zx-J^h8vI-WuRp*3{_8v3e1ZxX7#J8ai&NyB2mz1ZK5krHzy17n1_p*ev!E%-Q==wE
z9K3cAk|r*6T{?K}K*sEJxOz)9%Veii8x3n-PCf<(hCl!QEIhEFX-(6gzrTr8fIZ2d
zzkjZCV<!Ux!|y-8o_~1p=*`3b|Np~cF!J4(caPsbh9|Xy*A93XcnWe0zW@3jB69rJ
z@#D9SGchtLi7Q#CS|mB8Bs-=2{QVQ2V+bn19$I@Z?}?idi|JfB5xHY6Cm0zSF{SEP
z)y>&E8>=U|*tw22A7fx-G%VF8QUMD|g>Sf31S2D3>EaT!d{iD#5n&a9%UR!ke!KDP
zhJ~snE@Lqjkl-vPMy4>U@EcFBFFUdnO-fx#z1X)zUta&>!;4Nj&ik(HMV1xg6El!E
zy!HGRgiBBXY0k3OvX>H+T7G01rqs4`TZ?^5B5k5BKD@X%cgcfS_jh03bLYkF-+z89
ziYbO$g>!Lmb*yiLC?=?YG-pNHL@_WhY&*XVQ|iXE8~0w`3os36SXE!Ru)s;%$xY8S
z-aej*k@5AXHz#hNn6Yd6#fKLmiU}&fp5#XxHlxm>3IG85UFc%7TZv}?0000<MNUMn
GLSTaC{o`i<

diff --git a/layout/reftests/bugs/reftest.list b/layout/reftests/bugs/reftest.list
--- a/layout/reftests/bugs/reftest.list
+++ b/layout/reftests/bugs/reftest.list
@@ -913,16 +913,17 @@ random == 429849-1.html 429849-1-ref.htm
 == 439910.html 439910-ref.html
 == 441259-1.html 441259-1-ref.html
 fails == 441259-2.html 441259-2-ref.html # bug 441400
 == 442542-1.html 442542-1-ref.html
 == 444015-1.html 444015-1-ref.html
 == 444928-1.html 444928-1-ref.html
 == 444928-2.html 444928-2-ref.html
 != 444928-3.html 444928-3-notref.html
+== 445004-1.html 445004-1-ref.html
 == 446100-1a.html about:blank
 == 446100-1b.html about:blank
 == 446100-1c.html about:blank
 == 446100-1d.html about:blank
 == 446100-1e.html about:blank
 == 446100-1f.html about:blank
 == 446100-1g.html about:blank
 == 446100-1h.html about:blank
diff --git a/layout/reftests/bugs/subdir/445004-ref-subframe.html b/layout/reftests/bugs/subdir/445004-ref-subframe.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/subdir/445004-ref-subframe.html
@@ -0,0 +1,8 @@
+<!DOCTYPE html>
+<body>
+  <iframe name="w" width="100" height="100" src="passinner.png"></iframe>
+  <iframe name="x" width="100" height="100" src="445004-ref-subsubframe.html"></iframe>
+  <iframe name="y" width="100" height="100" src="passinner.png"></iframe>
+  <iframe name="z" width="100" height="100" src="445004-ref-subsubframe.html"></iframe>
+  <img src="passinner.png">  
+</body>
diff --git a/layout/reftests/bugs/subdir/445004-ref-subsubframe.html b/layout/reftests/bugs/subdir/445004-ref-subsubframe.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/subdir/445004-ref-subsubframe.html
@@ -0,0 +1,1 @@
+<img src="passinner.png">
diff --git a/layout/reftests/bugs/subdir/445004-subframe.html b/layout/reftests/bugs/subdir/445004-subframe.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/bugs/subdir/445004-subframe.html
@@ -0,0 +1,35 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <script>
+      function $(str) { return document.getElementById(str); }
+      function hookLoad(str) {
+        $(str).onload = function() { window.parent.loadEnded(); };
+        window.parent.loadStarted();
+      }
+      window.onload = function() { 
+      hookLoad("w");
+        $("w").contentWindow.location.href = "passinner.png";
+        hookLoad("x");
+        var doc = $("x").contentDocument;
+        doc.write('<img src="passinner.png">');
+        doc.close();
+      };
+      function doIt() {
+        hookLoad("y");
+        $("y").contentWindow.location.href = "passouter.png";
+        hookLoad("z");
+        var doc = $("z").contentDocument;
+        doc.write('<img src="passouter.png">');
+        doc.close();
+      }
+    </script>
+  </head>
+  <body>
+    <iframe name="w" id="w" width="100" height="100"></iframe>
+    <iframe name="x" id="x" width="100" height="100"></iframe>
+    <iframe name="y" id="y" width="100" height="100"></iframe>
+    <iframe name="z" id="z" width="100" height="100"></iframe>
+    <img src="passinner.png">
+  </body>
+</html>
diff --git a/layout/reftests/bugs/subdir/passinner.png b/layout/reftests/bugs/subdir/passinner.png
new file mode 100644
index 0000000000000000000000000000000000000000..3b30b1de7c5fdc8f71fe7a526a0b50338f23da58
GIT binary patch
literal 1036
zc$@(Y1oQieP)<h;3K|Lk000e1NJLTq001%o000yS0ssI2K&bi600001b5ch_0Itp)
z=>Px#32;bRa{vGf6951U69E94oEQKA00(qQO+^RT3Lh3VIhE}G_5c6?8FWQhbVF}#
zZDnqB07G(RVRU6=Aa`kWXdp*PO;A^X4i^9b19?eAK~zY`W0XphU>JOWiD6KJLFz0P
zOrfVUpTpUI{{DXX@zv2AM<#5W@bL8mxHvx-|M{+q?5ynBbFwy^UXNyinTlDKd$y6H
zu>iNgw_o2LzJ7S_-r339Cp~-rj7SA6SRH%y@zt5Tr!z1xu(Gh}%IQX0N4e>{yS2DH
zefJciAjmwJot6FD&u<ad5opeG(|4bnIq&Jarwb0ufAa1LF9)xlyuP1_|E`NWA+{1!
zfYVtoK0IH0axH|t;^^|DH;&BCn492`*t)I-A{c2Mb>rEMT^DxddgjRr%RYYl7_PS>
zpz__9ckV5&AHRKs3$nAav$L`jsestDwfpjJ1_lNNF+~VhS58-3R(r*fWh;&@XJB9m
zw~9bktSqi{?a5VSD;XFVe*XUX>DwnF6%gwzWpNb-28MT^-@=3H_n+TuPON$O=Hc;M
z$HJ__nHUk~JbVA#P|-+3N&}Z^1QjqaFfj8P^PmY8`<6U@`*{D=eVlBZyqtU%YL-2*
zy#m|<b*t*0y?@5e%04k+(%#E^)|^<)z`*e5@1F?kh%<LjKYaZVqW#N{FTTdUvG#E;
zx-J^h8vI-WuRp*3{_8v3e1ZxX7#J8ai&NyB2mz1ZK5krHzy17n1_p*ev!E%-Q==wE
z9K3cAk|r*6T{?K}K*sEJxOz)9%Veii8x3n-PCf<(hCl!QEIhEFX-(6gzrTr8fIZ2d
zzkjZCV<!Ux!|y-8o_~1p=*`3b|Np~cF!J4(caPsbh9|Xy*A93XcnWe0zW@3jB69rJ
z@#D9SGchtLi7Q#CS|mB8Bs-=2{QVQ2V+bn19$I@Z?}?idi|JfB5xHY6Cm0zSF{SEP
z)y>&E8>=U|*tw22A7fx-G%VF8QUMD|g>Sf31S2D3>EaT!d{iD#5n&a9%UR!ke!KDP
zhJ~snE@Lqjkl-vPMy4>U@EcFBFFUdnO-fx#z1X)zUta&>!;4Nj&ik(HMV1xg6El!E
zy!HGRgiBBXY0k3OvX>H+T7G01rqs4`TZ?^5B5k5BKD@X%cgcfS_jh03bLYkF-+z89
ziYbO$g>!Lmb*yiLC?=?YG-pNHL@_WhY&*XVQ|iXE8~0w`3os36SXE!Ru)s;%$xY8S
z-aej*k@5AXHz#hNn6Yd6#fKLmiU}&fp5#XxHlxm>3IG85UFc%7TZv}?0000<MNUMn
GLSTaC{o`i<

diff --git a/layout/reftests/bugs/subdir/passouter.png b/layout/reftests/bugs/subdir/passouter.png
new file mode 100644
index 0000000000000000000000000000000000000000..ce5c1d9738bb4f0e3e47d68cb00b2acfea7da4a3
GIT binary patch
literal 563
zc$@(<0?hr1P)<h;3K|Lk000e1NJLTq001%o000yS0ssI2K&bi600001b5ch_0Itp)
z=>Px#32;bRa{vGf6951U69E94oEQKA00(qQO+^RT3Lh3W78MYXYybcN8FWQhbVF}#
zZDnqB07G(RVRU6=Aa`kWXdp*PO;A^X4i^9b0ia1lK~zY`?N+_ZL2(p5=k_W#UxP(a
zcaxI*0~WJvJ_g+U50b%PmF!q3Nt80lU{#7@vB;tf<SsW+_nvonz4^MA_bp$8r?Z@o
z-|6Y}oYN0Qct<esp>;P}4AG@wJbqH7(=nS3Lxg_6YzJ($lw2iz-DW-<QYLd8puynS
z#b6NBY7hj7Mxj!<%d~FOqWPT4<tqiqaWEcJvx$iWSu8M{y@9rzPH;G=P@rNF05B4H
zmgH3`Fd7f0*PoASx1&-Crc>&6F&qZw9&03CHM+!NaVSu$X}y-J)gM<11c*rTc+NUV
zt(KCjWPgx+uSdz`L2BFWVN^aJXthu%>{E>f@;q=HwA+uD{BlX1j(m>eV7a8(3|Mww
z+-{@SO9lh1R*$8n2&)y{Za`!vlk?pSg(#PM4K0jB0Fh!b;Q5nyI*rlji)b+nhQlx#
zQ9gg3ve__|0+$Q={b$ocj|a?V`W5?$7VC9PrI6!DfflkX9PQBlRW=KP@Q(u_yU$Xs
zMnt0BF8^vWA)XgC8rcIO3(;gc?tq{F)`!-E@C~LuCvrq&_UQls002ovPDHLkV1i=V
B>AnB}

