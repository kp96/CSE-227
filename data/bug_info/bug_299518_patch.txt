Index: content/xbl/src/nsXBLContentSink.cpp
===================================================================
RCS file: /home/bzbarsky/mozilla/cvs-mirror/mozilla/content/xbl/src/nsXBLContentSink.cpp,v
retrieving revision 1.61
diff -u -p -d -8 -r1.61 nsXBLContentSink.cpp
--- content/xbl/src/nsXBLContentSink.cpp	21 Aug 2005 22:20:36 -0000	1.61
+++ content/xbl/src/nsXBLContentSink.cpp	26 Aug 2005 03:57:36 -0000
@@ -56,16 +56,17 @@
 #include "nsXBLProtoImplMethod.h"
 #include "nsXBLProtoImplField.h"
 #include "nsXBLPrototypeBinding.h"
 #include "nsContentUtils.h"
 #include "nsIConsoleService.h"
 #include "nsIScriptError.h"
 #include "nsNodeInfoManager.h"
 #include "nsINodeInfo.h"
+#include "nsIPrincipal.h"
 
 nsresult
 NS_NewXBLContentSink(nsIXMLContentSink** aResult,
                      nsIDocument* aDoc,
                      nsIURI* aURI,
                      nsISupports* aContainer)
 {
   NS_ENSURE_ARG_POINTER(aResult);
@@ -709,17 +710,35 @@ nsXBLContentSink::ConstructImplementatio
       continue;
     }
 
     // Is this attribute one of the ones we care about?
     if (localName == nsXBLAtoms::name) {
       name = aAtts[1];
     }
     else if (localName == nsXBLAtoms::implements) {
-      mBinding->ConstructInterfaceTable(nsDependentString(aAtts[1]));
+      // Only allow implementation of interfaces via XBL if the principal of
+      // our XBL document has UniversalXPConnect privileges.  No principal
+      // means no privs!
+      
+      nsIPrincipal* principal = mDocument->GetPrincipal();
+      if (principal) {
+        // XXX this api is so badly tied to JS it's not even funny.  We don't
+        // have a concept of enabling capabilities on a per-principal basis,
+        // but only on a per-principal-and-JS-stackframe basis!  So for now
+        // this is basically equivalent to testing that we have the system
+        // principal, since there is no JS stackframe in sight here...
+        PRBool hasUniversalXPConnect;
+        nsresult rv = principal->IsCapabilityEnabled("UniversalXPConnect",
+                                                     nsnull,
+                                                     &hasUniversalXPConnect);
+        if (NS_SUCCEEDED(rv) && hasUniversalXPConnect) {
+          mBinding->ConstructInterfaceTable(nsDependentString(aAtts[1]));
+        }
+      }
     }
   }
 
   NS_NewXBLProtoImpl(mBinding, name, &mImplementation);
 }
 
 void
 nsXBLContentSink::ConstructField(const PRUnichar **aAtts, PRUint32 aLineNumber)
