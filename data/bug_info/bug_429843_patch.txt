diff --git a/mail/base/content/mailWindow.js b/mail/base/content/mailWindow.js
--- a/mail/base/content/mailWindow.js
+++ b/mail/base/content/mailWindow.js
@@ -262,16 +262,18 @@ function CreateMailWindowGlobals()
   accountManager = Components.classes["@mozilla.org/messenger/account-manager;1"].getService(Components.interfaces.nsIMsgAccountManager);
 
   gMessengerBundle = document.getElementById("bundle_messenger");
   gBrandBundle = document.getElementById("bundle_brand");
   gAutoSyncManager = Components.classes["@mozilla.org/imap/autosyncmgr;1"]
                                        .getService(Components.interfaces.nsIAutoSyncManager);
   gAutoSyncMonitor.msgWindow = msgWindow;
   gAutoSyncManager.addListener(gAutoSyncMonitor);
+  
+  msgWindow.notificationCallback = new BadCertHandler();
 }
 
 function InitMsgWindow()
 {
   msgWindow.windowCommands = new nsMsgWindowCommands();
   // set the domWindow before setting the status feedback and header sink objects
   msgWindow.domWindow = window;
   msgWindow.statusFeedback = statusFeedback;
@@ -634,8 +636,51 @@ function GetSearchSession()
     return null;
 }
 
 /** Update state of zoom type (text vs. full) menu item. */
 function UpdateFullZoomMenu() {
   var menuItem = document.getElementById("menu_fullZoomToggle");
   menuItem.setAttribute("checked", !ZoomManager.useFullZoom);
 }
+
+/**
+ * This class implements nsIBadCertListener.  Its job is to prevent "bad cert"
+ * security dialogs from being shown to the user.  Currently it puts up the
+ * cert override dialog, though we'd like to give the user more detailed
+ * information in the future.
+ */
+function BadCertHandler() {
+}
+
+BadCertHandler.prototype = {
+  // Suppress any certificate errors
+notifyCertProblem: function(socketInfo, status, targetSite) {
+  if (!status) 
+    return true;
+  
+  setTimeout(InformUserOfCertError, 0, socketInfo, targetSite);
+  return true;
+},  
+  
+// nsIInterfaceRequestor
+getInterface: function(iid) {
+  return this.QueryInterface(iid);
+},
+  
+  // nsISupports
+QueryInterface: function(iid) {
+    if (!iid.equals(Components.interfaces.nsIBadCertListener2) &&
+      !iid.equals(Components.interfaces.nsIInterfaceRequestor) &&
+      !iid.equals(Components.interfaces.nsISupports))
+      throw Components.results.NS_ERROR_NO_INTERFACE;
+    return this;
+  }
+};
+
+function InformUserOfCertError(socketInfo, targetSite)
+{
+  var params = { exceptionAdded : false };
+  params.prefetchCert = true;
+  params.location = targetSite;
+  window.openDialog('chrome://pippki/content/exceptionDialog.xul',
+                  '','chrome,centerscreen,modal', params);
+}
diff --git a/mailnews/base/public/nsIMsgWindow.idl b/mailnews/base/public/nsIMsgWindow.idl
--- a/mailnews/base/public/nsIMsgWindow.idl
+++ b/mailnews/base/public/nsIMsgWindow.idl
@@ -39,32 +39,35 @@
 #include "nsIMsgStatusFeedback.idl"
 #include "nsIMsgFolder.idl"
 
 interface nsITransactionManager;
 interface nsIDocShell;
 interface nsIDOMWindowInternal;
 interface nsIMsgHeaderSink;
 interface nsIPrompt;
+interface nsIInterfaceRequestor;
 
 [scriptable, uuid(7B8F4A65-CFC4-4b3f-BF5C-152AA8D5CD10)]
 interface nsIMsgWindowCommands : nsISupports {
   void selectFolder(in ACString folderUri);
   void selectMessage(in ACString messageUri);
   void clearMsgPane();
 };
 
-[scriptable, uuid(35A79B64-F3DA-40e8-8A6F-4FCCF8FD7DB0)]
+[scriptable, uuid(7e8fbaaa-d2f1-4751-af8e-8213fdb60a02)]
 interface nsIMsgWindow : nsISupports {
   attribute nsIMsgStatusFeedback statusFeedback;
   attribute nsIMsgWindowCommands windowCommands;
   attribute nsIMsgHeaderSink msgHeaderSink;
   attribute nsITransactionManager transactionManager;
   attribute nsIMsgFolder openFolder;
   attribute nsIDocShell rootDocShell;
+  attribute nsIInterfaceRequestor notificationCallback;
+  
   void displayHTMLInMessagePane(in AString title, in AString body, in boolean clearMsgHdr);
 
   readonly attribute nsIPrompt promptDialog;
   attribute ACString mailCharacterSet;
 
   /**
     Remember the message's charaset was overridden, so it can be inherited (e.g for quoting).
    */
diff --git a/mailnews/base/src/nsMsgWindow.cpp b/mailnews/base/src/nsMsgWindow.cpp
--- a/mailnews/base/src/nsMsgWindow.cpp
+++ b/mailnews/base/src/nsMsgWindow.cpp
@@ -317,16 +317,29 @@ NS_IMETHODIMP nsMsgWindow::SetDomWindow(
     // force ourselves to figure out the message pane
     nsCOMPtr<nsIDocShell> messageWindowDocShell;
     GetMessageWindowDocShell(getter_AddRefs(messageWindowDocShell));
   }
 
   return NS_OK;
 }
 
+NS_IMETHODIMP nsMsgWindow::SetNotificationCallback(nsIInterfaceRequestor * aNotificationCallback)
+{
+  mNotificationCallback = aNotificationCallback;
+  return NS_OK;
+}
+
+NS_IMETHODIMP nsMsgWindow::GetNotificationCallback(nsIInterfaceRequestor **aNotificationCallback)
+{
+  NS_ENSURE_ARG_POINTER(aNotificationCallback);
+  NS_IF_ADDREF(*aNotificationCallback = mNotificationCallback);
+  return NS_OK;
+}
+
 NS_IMETHODIMP nsMsgWindow::StopUrls()
 {
   m_stopped = PR_TRUE;
   nsCOMPtr<nsIWebNavigation> webnav(do_QueryReferent(mRootDocShellWeak));
   return webnav ? webnav->Stop(nsIWebNavigation::STOP_NETWORK) : NS_ERROR_FAILURE;
 }
 
 // nsIURIContentListener support
diff --git a/mailnews/base/src/nsMsgWindow.h b/mailnews/base/src/nsMsgWindow.h
--- a/mailnews/base/src/nsMsgWindow.h
+++ b/mailnews/base/src/nsMsgWindow.h
@@ -41,17 +41,17 @@
 #include "nsIMsgWindow.h"
 #include "nsIMsgStatusFeedback.h"
 #include "nsITransactionManager.h"
 #include "nsIMsgFolder.h"
 #include "nsIDocShell.h"
 #include "nsIURIContentListener.h"
 #include "nsIMimeMiscStatus.h"
 #include "nsWeakReference.h"
-
+#include "nsIInterfaceRequestor.h"
 #include "nsCOMPtr.h"
 
 class nsMsgWindow : public nsIMsgWindow,
                     public nsIURIContentListener,
                     public nsSupportsWeakReference
 {
 
 public:
@@ -65,17 +65,18 @@ public:
   NS_DECL_NSIURICONTENTLISTENER
 
 protected:
   nsCOMPtr<nsIMsgHeaderSink> mMsgHeaderSink;
   nsCOMPtr<nsIMsgStatusFeedback> mStatusFeedback;
   nsCOMPtr<nsITransactionManager> mTransactionManager;
   nsCOMPtr<nsIMsgFolder> mOpenFolder;
   nsCOMPtr<nsIMsgWindowCommands> mMsgWindowCommands;
-
+  nsCOMPtr<nsIInterfaceRequestor> mNotificationCallback;
+  
   // let's not make this a strong ref - we don't own it.
   nsWeakPtr mRootDocShellWeak;
   nsWeakPtr mMessageWindowDocShellWeak;
   nsWeakPtr mDomWindow; 
 
   nsCString mMailCharacterSet;
   PRBool    mCharsetOverride;
   PRBool    m_stopped;
diff --git a/mailnews/compose/src/nsMsgSend.cpp b/mailnews/compose/src/nsMsgSend.cpp
--- a/mailnews/compose/src/nsMsgSend.cpp
+++ b/mailnews/compose/src/nsMsgSend.cpp
@@ -388,19 +388,25 @@ nsresult nsMsgComposeAndSend::GetNotific
 // TODO: stop using mail3pane window!
   nsCOMPtr<nsIMsgWindow> msgWindow;
   nsCOMPtr<nsIMsgMailSession> mailSession(do_GetService(NS_MSGMAILSESSION_CONTRACTID));
   mailSession->GetTopmostMsgWindow(getter_AddRefs(msgWindow));
   if (msgWindow) {
     nsCOMPtr<nsIDocShell> docShell;
     msgWindow->GetRootDocShell(getter_AddRefs(docShell));
     nsCOMPtr<nsIInterfaceRequestor> ir(do_QueryInterface(docShell));
+    nsCOMPtr<nsIInterfaceRequestor> notificationCallback;
+    msgWindow->GetNotificationCallback(getter_AddRefs(notificationCallback));
+    if (notificationCallback) {
+      nsCOMPtr<nsIInterfaceRequestor> aggregrateIR;
+      NS_NewInterfaceRequestorAggregation(notificationCallback, ir, getter_AddRefs(aggregrateIR));
+      ir = aggregrateIR;
+    }
     if (ir) {
-      *aCallbacks = ir;
-      NS_ADDREF(*aCallbacks);
+      NS_ADDREF(*aCallbacks = ir);
       return NS_OK;
     }
   }
   return NS_ERROR_FAILURE;
 }
 
 void
 nsMsgComposeAndSend::Clear()
diff --git a/mailnews/imap/src/nsImapProtocol.cpp b/mailnews/imap/src/nsImapProtocol.cpp
--- a/mailnews/imap/src/nsImapProtocol.cpp
+++ b/mailnews/imap/src/nsImapProtocol.cpp
@@ -89,16 +89,18 @@
 #include "nsIPrompt.h"
 #include "nsIDocShellLoadInfo.h"
 #include "nsIDOMWindowInternal.h"
 #include "nsIMessengerWindowService.h"
 #include "nsIWindowMediator.h"
 #include "nsIWindowWatcher.h"
 #include "nsCOMPtr.h"
 #include "nsMimeTypes.h"
+#include "nsIInterfaceRequestor.h"
+
 PRLogModuleInfo *IMAP;
 
 // netlib required files
 #include "nsIStreamListener.h"
 #include "nsIMsgIncomingServer.h"
 #include "nsIImapIncomingServer.h"
 #include "nsIPrefBranch.h"
 #include "nsIPrefService.h"
@@ -747,16 +749,24 @@ nsresult nsImapProtocol::SetupWithUrl(ns
     {
       m_mockChannel->SetImapProtocol(this);
       // if we have a listener from a mock channel, over-ride the consumer that was passed in
       nsCOMPtr<nsIStreamListener> channelListener;
       m_mockChannel->GetChannelListener(getter_AddRefs(channelListener));
       if (channelListener) // only over-ride if we have a non null channel listener
         aRealStreamListener = channelListener;
       m_mockChannel->GetChannelContext(getter_AddRefs(m_channelContext));
+      nsCOMPtr<nsIMsgWindow> msgWindow;
+      GetMsgWindow(getter_AddRefs(msgWindow));
+      if (msgWindow)
+      {
+        nsCOMPtr<nsIInterfaceRequestor> interfaceRequestor;
+        msgWindow->GetNotificationCallback(getter_AddRefs(interfaceRequestor));
+        m_mockChannel->SetNotificationCallbacks(interfaceRequestor);
+      }
     }
 
     // since we'll be making calls directly from the imap thread to the channel listener,
     // we need to turn it into a proxy object....we'll assume that the listener is on the same thread
     // as the event sink queue
     if (aRealStreamListener)
     {
       NS_ASSERTION(!m_channelListener, "shouldn't already have a channel listener");
diff --git a/mailnews/local/src/nsPop3Protocol.cpp b/mailnews/local/src/nsPop3Protocol.cpp
--- a/mailnews/local/src/nsPop3Protocol.cpp
+++ b/mailnews/local/src/nsPop3Protocol.cpp
@@ -75,16 +75,17 @@
 #include "nsISignatureVerifier.h"
 #include "nsIPrefBranch.h"
 #include "nsIPrefService.h"
 #include "nsIPrefLocalizedString.h"
 #include "nsISocketTransport.h"
 #include "nsISSLSocketControl.h"
 #include "nsILineInputStream.h"
 #include "nsLocalStrings.h"
+#include "nsIInterfaceRequestor.h"
 
 #define EXTRA_SAFETY_SPACE 3096
 
 static PRLogModuleInfo *POP3LOGMODULE = nsnull;
 
 
 static PRIntn
 net_pop3_remove_messages_marked_delete(PLHashEntry* he,
@@ -536,16 +537,24 @@ nsresult nsPop3Protocol::Initialize(nsIU
     {
       nsCOMPtr<nsIMsgWindow> msgwin;
       mailnewsUrl->GetMsgWindow(getter_AddRefs(msgwin));
       if (msgwin)
       {
         nsCOMPtr<nsIDocShell> docshell;
         msgwin->GetRootDocShell(getter_AddRefs(docshell));
         ir = do_QueryInterface(docshell);
+        nsCOMPtr<nsIInterfaceRequestor> notificationCallback;
+        msgwin->GetNotificationCallback(getter_AddRefs(notificationCallback));
+        if (notificationCallback)
+        {
+          nsCOMPtr<nsIInterfaceRequestor> aggregrateIR;
+          NS_NewInterfaceRequestorAggregation(notificationCallback, ir, getter_AddRefs(aggregrateIR));
+          ir = aggregrateIR;
+        }
       }
     }
 
     PRInt32 port = 0;
     nsCString hostName;
     aURL->GetPort(&port);
     nsCOMPtr<nsIMsgIncomingServer> server = do_QueryInterface(m_pop3Server);
     if (server)
