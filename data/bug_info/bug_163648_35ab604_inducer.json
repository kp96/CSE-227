{"bug_id":163648,"commitHash":"35ab604","commit_info":{"sha":"35ab60450f6c66481069c4eca2d82937983d3a6a","commit":{"author":{"name":"mstoltz%netscape.com","email":"mstoltz%netscape.com","date":"2002-10-09T00:54:43Z"},"committer":{"name":"mstoltz%netscape.com","email":"mstoltz%netscape.com","date":"2002-10-09T00:54:43Z"},"message":"Bug 163648 - Disable specific external protocol handlers with known security\nproblems. r=darin, sr=dveditz.","tree":{"sha":"5ba42dc68c466d1d08b6f19ebbcd8e2032775404","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/5ba42dc68c466d1d08b6f19ebbcd8e2032775404"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/35ab60450f6c66481069c4eca2d82937983d3a6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/35ab60450f6c66481069c4eca2d82937983d3a6a","html_url":"https://github.com/mozilla/gecko-dev/commit/35ab60450f6c66481069c4eca2d82937983d3a6a","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/35ab60450f6c66481069c4eca2d82937983d3a6a/comments","author":null,"committer":null,"parents":[{"sha":"a568fd5506f5c777aa8469a9fbd0ec64d8b081f3","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/a568fd5506f5c777aa8469a9fbd0ec64d8b081f3","html_url":"https://github.com/mozilla/gecko-dev/commit/a568fd5506f5c777aa8469a9fbd0ec64d8b081f3"}],"stats":{"total":20,"additions":17,"deletions":3},"files":[{"sha":"7a83c56e3340373738df391b2b78d3d2c6f4c75e","filename":"modules/libpref/src/init/all.js","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/mozilla/gecko-dev/blob/35ab60450f6c66481069c4eca2d82937983d3a6a/modules/libpref/src/init/all.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/35ab60450f6c66481069c4eca2d82937983d3a6a/modules/libpref/src/init/all.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/modules/libpref/src/init/all.js?ref=35ab60450f6c66481069c4eca2d82937983d3a6a","patch":"@@ -417,6 +417,13 @@ pref(\"offline.news.download.use_days\",          0);\n // prevents necko connecting to ports 1-5 unless the protocol\n // overrides.\n \n+// Prevent using external protocol handlers for these schemes\n+pref(\"network.protocol-handler.external.hcp\", false);\n+pref(\"network.protocol-handler.external.vbscript\", false);\n+pref(\"network.protocol-handler.external.javascript\", false);\n+pref(\"network.protocol-handler.external.ms-help\", false);\n+pref(\"network.protocol-handler.external.vnd.ms.radio\", false);\n+\n pref(\"network.hosts.smtp_server\",           \"mail\");\n pref(\"network.hosts.pop_server\",            \"mail\");\n pref(\"network.protocols.useSystemDefaults\",   false); // set to true if user links should use system default handlers"},{"sha":"1346be3b521fe93524ec82244842258cb3c52cb0","filename":"netwerk/base/src/nsIOService.cpp","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/mozilla/gecko-dev/blob/35ab60450f6c66481069c4eca2d82937983d3a6a/netwerk/base/src/nsIOService.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/35ab60450f6c66481069c4eca2d82937983d3a6a/netwerk/base/src/nsIOService.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/base/src/nsIOService.cpp?ref=35ab60450f6c66481069c4eca2d82937983d3a6a","patch":"@@ -384,14 +384,17 @@ nsIOService::GetProtocolHandler(const char* scheme, nsIProtocolHandler* *result)\n     if (NS_SUCCEEDED(rv)) return NS_OK;\n \n     PRBool externalProtocol = PR_FALSE;\n+    PRBool listedProtocol   = PR_TRUE;\n     nsCOMPtr<nsIPrefBranch> prefBranch;\n     GetPrefBranch(getter_AddRefs(prefBranch));\n     if (prefBranch) {\n         nsCAutoString externalProtocolPref(\"network.protocol-handler.external.\");\n         externalProtocolPref += scheme;\n         rv = prefBranch->GetBoolPref(externalProtocolPref.get(), &externalProtocol);\n-        if (NS_FAILED(rv))\n+        if (NS_FAILED(rv)) {\n             externalProtocol = PR_FALSE;\n+            listedProtocol   = PR_FALSE;\n+        }\n     }\n \n     if (!externalProtocol) {\n@@ -400,10 +403,14 @@ nsIOService::GetProtocolHandler(const char* scheme, nsIProtocolHandler* *result)\n         ToLowerCase(contractID);\n \n         rv = CallGetService(contractID.get(), result);\n+\n+        // If the pref for this protocol was explicitly set to false,\n+        // stop here and do not invoke the default handler.\n+        if (NS_FAILED(rv) && listedProtocol)\n+            return NS_ERROR_UNKNOWN_PROTOCOL;\n     }\n     \n-    if (externalProtocol || NS_FAILED(rv)) \n-    {\n+    if (externalProtocol || NS_FAILED(rv)) {\n       // okay we don't have a protocol handler to handle this url type, so use the default protocol handler.\n       // this will cause urls to get dispatched out to the OS ('cause we can't do anything with them) when \n       // we try to read from a channel created by the default protocol handler."}]},"blames":["e0c4831d","69e5243d","0caa2e9f"]}