# HG changeset patch
# User Magnus Melin <mkmelin+mozilla@iki.fi>
# Date 1401624301 -10800
#      Sun Jun 01 15:05:01 2014 +0300
# Node ID 47c258c38532e8469c24c61250d863af91be5a24
# Parent  5dd3c0e27d09e302d8806f5164a99abfb3d1609b
[mq]: bug332639_smime_sender_hoax.patch

diff --git a/mail/base/content/mailWidgets.xml b/mail/base/content/mailWidgets.xml
--- a/mail/base/content/mailWidgets.xml
+++ b/mail/base/content/mailWidgets.xml
@@ -588,16 +588,27 @@
         <parameter name="aAddress"/>
         <body>
           <![CDATA[
             this.mAddresses.push(aAddress);
           ]]>
         </body>
       </method>
 
+      <!-- resetAddressView: a public method used to reset addresses shown by
+           this widget
+      -->
+      <method name="resetAddressView">
+        <body>
+          <![CDATA[
+            this.mAddresses.length = 0;
+          ]]>
+        </body>
+      </method>
+
       <!-- updateEmailAddressNode: private method used to set properties on an address node -->
       <method name="updateEmailAddressNode">
         <parameter name="aEmailNode"/>
         <parameter name="aAddress"/>
         <body>
           <![CDATA[
             aEmailNode.setAttribute("label", aAddress.fullAddress || aAddress.displayName);
             aEmailNode.removeAttribute("tooltiptext");
diff --git a/mail/base/content/msgHdrViewOverlay.js b/mail/base/content/msgHdrViewOverlay.js
--- a/mail/base/content/msgHdrViewOverlay.js
+++ b/mail/base/content/msgHdrViewOverlay.js
@@ -1215,16 +1215,18 @@ function OutputEmailAddresses(headerEntr
   var fullNames = {};
   var names = {};
   var numAddresses =  0;
 
   numAddresses = MailServices.headerParser
                              .parseHeadersWithArray(emailAddresses, addresses,
                                                     names, fullNames);
   var index = 0;
+  if (headerEntry.useToggle)
+    headerEntry.enclosingBox.resetAddressView(); // make sure we start clean
   while (index < numAddresses) {
     // If we want to include short/long toggle views and we have a long view,
     // always add it. If we aren't including a short/long view OR if we are and
     // we haven't parsed enough addresses to reach the cutoff valve yet then add
     // it to the default (short) div.
     let address = {};
     address.emailAddress = addresses.value[index];
     address.fullAddress = fullNames.value[index];
diff --git a/mail/extensions/smime/content/msgHdrViewSMIMEOverlay.js b/mail/extensions/smime/content/msgHdrViewSMIMEOverlay.js
--- a/mail/extensions/smime/content/msgHdrViewSMIMEOverlay.js
+++ b/mail/extensions/smime/content/msgHdrViewSMIMEOverlay.js
@@ -41,31 +41,61 @@ var smimeHeaderSink =
       case nsICMSMessageErrors.SUCCESS:
         gSignedUINode.setAttribute("signed", "ok");
         gStatusBar.setAttribute("signed", "ok");
         break;
 
       case nsICMSMessageErrors.VERIFY_NOT_YET_ATTEMPTED:
         gSignedUINode.setAttribute("signed", "unknown");
         gStatusBar.setAttribute("signed", "unknown");
+        this.showSenderIfSigner();
         break;
 
       case nsICMSMessageErrors.VERIFY_CERT_WITHOUT_ADDRESS:
       case nsICMSMessageErrors.VERIFY_HEADER_MISMATCH:
         gSignedUINode.setAttribute("signed", "mismatch");
         gStatusBar.setAttribute("signed", "mismatch");
+        this.showSenderIfSigner();
         break;
 
       default:
         gSignedUINode.setAttribute("signed", "notok");
         gStatusBar.setAttribute("signed", "notok");
         break;
     }
   },
 
+  /**
+   * Force showing Sender if we have a Sender and it's not signed by From.
+   * For a valid cert that means the Sender signed it - and the signed mismatch
+   * mark is shown. To understand why it's not a confirmed signing it's useful
+   * to have the Sender header showing.
+   */
+  showSenderIfSigner: function() {
+    if (!("sender" in currentHeaderData))
+      return; // Sender not set, or same as From (so no longer present).
+
+    if (Services.prefs.getBoolPref("mailnews.headers.showSender"))
+      return; // Sender header will be show due to pref - nothing more to do.
+
+    let fromMailboxes = MailServices.headerParser.extractHeaderAddressMailboxes(
+            currentHeaderData.from.headerValue).split(",");
+    for (let i = 0; i < fromMailboxes.length; i++) {
+      if (gSignerCert.containsEmailAddress(fromMailboxes[i])) {
+        return; // It's signed by a From. Nothing more to do
+      }
+    }
+
+    let senderInfo = { name: "sender", outputFunction: OutputEmailAddresses };
+    let senderEntry = new createHeaderEntry("expanded", senderInfo);
+
+    gExpandedHeaderView[senderInfo.name] = senderEntry;
+    UpdateExpandedMessageHeaders();
+  },
+
   encryptionStatus: function(aNestingLevel, aEncryptionStatus, aRecipientCert)
   {
     if (aNestingLevel > 1) {
       // we are not interested
       return;
     }
 
     gEncryptionStatus = aEncryptionStatus;
@@ -150,27 +180,38 @@ function onSMIMEStartHeaders()
 
   gEncryptedUINode.collapsed = true;
   gEncryptedUINode.removeAttribute("encrypted");
   gStatusBar.removeAttribute("encrypted");
 
   forgetEncryptedURI();
 }
 
-function onSMIMEEndHeaders()
-{}
+function onSMIMEEndHeaders() {
+}
 
 function onSmartCardChange()
 {
   // only reload encrypted windows
   if (gMyLastEncryptedURI && gEncryptionStatus != -1) {
     ReloadMessage();
   }
 }
 
+function onBeforeShowHeaderPane() {
+  // For signed messages with differing Sender as signer we force showing Sender.
+  // If we're now in a different message, hide the (old) sender row and remove
+  // it from the header view, so that Sender normally isn't shown.
+  if ("sender" in gExpandedHeaderView &&
+      !Services.prefs.getBoolPref("mailnews.headers.showSender")) {
+    gExpandedHeaderView.sender.enclosingRow.collapsed = true;
+    delete gExpandedHeaderView.sender;
+  }
+}
+
 function msgHdrViewSMIMEOnLoad(event)
 {
   window.crypto.enableSmartCardEvents = true;
   document.addEventListener("smartcard-insert", onSmartCardChange, false);
   document.addEventListener("smartcard-remove", onSmartCardChange, false);
   if (!gSMIMEBundle)
     gSMIMEBundle = document.getElementById("bundle_read_smime");
 
@@ -178,21 +219,22 @@ function msgHdrViewSMIMEOnLoad(event)
   // on the msgHdrSink used by mail.....
   msgWindow.msgHeaderSink.securityInfo = smimeHeaderSink;
 
   gSignedUINode = document.getElementById('signedHdrIcon');
   gEncryptedUINode = document.getElementById('encryptedHdrIcon');
   gSMIMEContainer = document.getElementById('smimeBox');
   gStatusBar = document.getElementById('status-bar');
 
-  // add ourself to the list of message display listeners so we get notified when we are about to display a
-  // message.
+  // Add ourself to the list of message display listeners so we get notified
+  // when we are about to display a message.
   var listener = {};
   listener.onStartHeaders = onSMIMEStartHeaders;
   listener.onEndHeaders = onSMIMEEndHeaders;
+  listener.onBeforeShowHeaderPane = onBeforeShowHeaderPane;
   gMessageListeners.push(listener);
 
   gEncryptedURIService = 
     Components.classes["@mozilla.org/messenger-smime/smime-encrypted-uris-service;1"]
     .getService(Components.interfaces.nsIEncryptedSMIMEURIsService);
 }
 
 function msgHdrViewSMIMEOnUnload(event)
