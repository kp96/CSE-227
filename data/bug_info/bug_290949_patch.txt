Index: caps/idl/nsIScriptSecurityManager.idl
===================================================================
RCS file: /cvs/mozilla/caps/idl/nsIScriptSecurityManager.idl,v
retrieving revision 1.61.8.1
diff -p -u -1 -2 -r1.61.8.1 nsIScriptSecurityManager.idl
--- caps/idl/nsIScriptSecurityManager.idl	24 Oct 2004 12:04:32 -0000	1.61.8.1
+++ caps/idl/nsIScriptSecurityManager.idl	20 Apr 2005 00:59:24 -0000
@@ -76,27 +76,32 @@ interface nsIScriptSecurityManager : nsI
     /**
      * Default CheckLoadURI permissions
      */
     // Default permissions
     const unsigned long STANDARD = 0;
 
     // If the source is mail, disallow the load
     const unsigned long DISALLOW_FROM_MAIL = 1 << 0;
 
     // Allow the loading of chrome URLs by non-chrome URLs
     const unsigned long ALLOW_CHROME = 1 << 1;
 
-    // Don't allow javascript: (and data:) URLs to load
+    // Don't allow javascript: and data: URLs to load
     const unsigned long DISALLOW_SCRIPT_OR_DATA = 1 << 2;
 
+    // Don't allow javascript: URLs to load
+    //   WARNING: Support for this value was added in Mozilla 1.7.8 and
+    //   Firefox 1.0.4.  Use in prior versions WILL BE IGNORED.
+    const unsigned long DISALLOW_SCRIPT = 1 << 3;
+
     /**
      * Check that content from "from" can load "uri".
      *
      * Will return error code NS_ERROR_DOM_BAD_URI if the load request 
      * should be denied.
      *
      * @param from the URI causing the load
      * @param uri the URI that is being loaded
      * @param flags the permission set, see above
      */
     void checkLoadURI(in nsIURI from, in nsIURI uri, 
                       in unsigned long flags);
Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /cvs/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.229.6.6.2.5
diff -p -u -1 -2 -r1.229.6.6.2.5 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	7 Apr 2005 19:54:06 -0000	1.229.6.6.2.5
+++ caps/src/nsScriptSecurityManager.cpp	20 Apr 2005 01:10:46 -0000
@@ -1179,24 +1179,33 @@ nsScriptSecurityManager::GetBaseURISchem
             return *aScheme ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
         }
     }
 
     *aScheme = nsCRT::strdup(scheme.get());
     return *aScheme ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::CheckLoadURI(nsIURI *aSourceURI, nsIURI *aTargetURI,
                                       PRUint32 aFlags)
 {
+    // If someone passes a flag that we don't understand, we should
+    // fail, because they may need a security check that we don't
+    // provide.
+    NS_ENSURE_TRUE(!(aFlags & ~(nsIScriptSecurityManager::DISALLOW_FROM_MAIL |
+                                nsIScriptSecurityManager::ALLOW_CHROME |
+                                nsIScriptSecurityManager::DISALLOW_SCRIPT |
+                                nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA)),
+                   NS_ERROR_UNEXPECTED);
+
     nsresult rv;
     //-- get the source scheme
     nsXPIDLCString sourceScheme;
     rv = GetBaseURIScheme(aSourceURI, getter_Copies(sourceScheme));
     if (NS_FAILED(rv)) return rv;
 
     // Some loads are not allowed from mail/news messages
     if ((aFlags & nsIScriptSecurityManager::DISALLOW_FROM_MAIL) &&
         (nsCRT::strcasecmp(sourceScheme, "mailbox")  == 0 ||
          nsCRT::strcasecmp(sourceScheme, "imap")     == 0 ||
          nsCRT::strcasecmp(sourceScheme, "news")     == 0))
     {
@@ -1206,26 +1215,29 @@ nsScriptSecurityManager::CheckLoadURI(ns
     //-- get the target scheme
     nsXPIDLCString targetScheme;
     rv = GetBaseURIScheme(aTargetURI, getter_Copies(targetScheme));
     if (NS_FAILED(rv)) return rv;
 
     if (nsCRT::strcasecmp(targetScheme, sourceScheme) == 0)
     {
         // every scheme can access another URI from the same scheme
         return NS_OK;
     }
 
     //-- Some callers do not allow loading javascript: or data: URLs
-    if ((aFlags & nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA) &&
-        (targetScheme.Equals("javascript") || targetScheme.Equals("data")))
+    if (((aFlags & (nsIScriptSecurityManager::DISALLOW_SCRIPT |
+                    nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA)) &&
+         targetScheme.Equals("javascript")) ||
+        ((aFlags & nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA) &&
+         targetScheme.Equals("data")))
     {
        return NS_ERROR_DOM_BAD_URI;
     }
 
     //-- If the schemes don't match, the policy is specified in this table.
     enum Action { AllowProtocol, DenyProtocol, PrefControlled, ChromeProtocol};
     static const struct
     {
         const char *name;
         Action action;
     } protocolList[] =
     {
Index: toolkit/content/widgets/tabbrowser.xml
===================================================================
RCS file: /cvs/mozilla/toolkit/content/widgets/tabbrowser.xml,v
retrieving revision 1.36.6.29.2.8
diff -p -u -1 -2 -r1.36.6.29.2.8 tabbrowser.xml
--- toolkit/content/widgets/tabbrowser.xml	13 Apr 2005 02:56:58 -0000	1.36.6.29.2.8
+++ toolkit/content/widgets/tabbrowser.xml	20 Apr 2005 01:06:30 -0000
@@ -714,32 +714,30 @@
             const ioService =
               Components.classes["@mozilla.org/network/io-service;1"]
                         .getService(Components.interfaces.nsIIOService);
 
             const targetDoc = safeGetProperty(event.target, "ownerDocument");
             // Make a URI out of our href.
             var docCharset = safeGetProperty(targetDoc, "characterSet");
             var uri = ioService.newURI(href, docCharset, null);
 
             var origURIStr = safeGetProperty(targetDoc, "documentURI");
             var origURI = ioService.newURI(origURIStr, docCharset, null);
 
-            if (uri.schemeIs("javascript"))
-              return;
-
             const nsIScriptSecMan =
               Components.interfaces.nsIScriptSecurityManager;
 
             try {
-              secMan.checkLoadURI(origURI, uri, nsIScriptSecMan.STANDARD);
+              secMan.checkLoadURI(origURI, uri,
+                                  nsIScriptSecMan.DISALLOW_SCRIPT);
             } catch(e) {
               return;
             }
 
             // Security says okay, now ask content policy
             if (contentPolicy.shouldLoad(nsIContentPolicy.TYPE_IMAGE,
                                          uri, origURI, event.target,
                                          safeGetProperty(event.target, "type"),
                                          null) != nsIContentPolicy.ACCEPT)
               return;
 
             var browserIndex = tabBrowser.getBrowserIndexForDocument(targetDoc);
