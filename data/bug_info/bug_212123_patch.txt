Index: xpcom/obsolete/nsFileSpec.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/obsolete/nsFileSpec.cpp,v
retrieving revision 1.9
diff -u -p -4 -r1.9 nsFileSpec.cpp
--- xpcom/obsolete/nsFileSpec.cpp	10 Mar 2005 21:18:28 -0000	1.9
+++ xpcom/obsolete/nsFileSpec.cpp	25 Jun 2005 09:16:22 -0000
@@ -908,36 +908,24 @@ void nsFileSpec::MakeUnique(const char* 
 //----------------------------------------------------------------------------------------
 void nsFileSpec::MakeUnique()
 //----------------------------------------------------------------------------------------
 {
-    if (!Exists())
-        return;
-
-    char* leafName = GetLeafName();
-    if (!leafName)
-        return;
-
-    char* lastDot = strrchr(leafName, '.');
-    char* suffix = "";
-    if (lastDot)
+    // XXX: updated path starts empty. In case of error this will cause
+    // any callers to fail badly, but that seems better than letting them
+    // re-use the default name which has failed to be unique.
+    nsCAutoString path;
+    nsCOMPtr<nsILocalFile> localFile;
+    NS_NewNativeLocalFile(nsDependentCString(*this), PR_TRUE, getter_AddRefs(localFile));
+    if (localFile)
     {
-        suffix = nsCRT::strdup(lastDot); // include '.'
-        *lastDot = '\0'; // strip suffix and dot.
+        nsresult rv = localFile->CreateUnique(nsIFile::NORMAL_FILE_TYPE, 0600);
+        if (NS_SUCCEEDED(rv))
+            localFile->GetNativePath(path);
     }
-    const int kMaxRootLength
-        = nsFileSpecHelpers::kMaxCoreLeafNameLength - strlen(suffix) - 1;
-    if ((int)strlen(leafName) > (int)kMaxRootLength)
-        leafName[kMaxRootLength] = '\0';
-    for (short indx = 1; indx < 1000 && Exists(); indx++)
-    {
-        // start with "Picture-1.jpg" after "Picture.jpg" exists
-        char newName[nsFileSpecHelpers::kMaxFilenameLength + 1];
-        sprintf(newName, "%s-%d%s", leafName, indx, suffix);
-        SetLeafName(newName);
-    }
-    if (*suffix)
-        nsCRT::free(suffix);
-    nsCRT::free(leafName);
+
+    NS_ASSERTION(!path.IsEmpty(), "MakeUnique() failed!");
+    *this = path.get(); // reset the filepath to point to the unique location
+
 } // nsFileSpec::MakeUnique
 
 //----------------------------------------------------------------------------------------
 void nsFileSpec::operator = (const nsFileURL& inURL)
Index: xpcom/obsolete/nsFileSpec.h
===================================================================
RCS file: /cvsroot/mozilla/xpcom/obsolete/nsFileSpec.h,v
retrieving revision 1.9
diff -u -p -4 -r1.9 nsFileSpec.h
--- xpcom/obsolete/nsFileSpec.h	10 Mar 2005 21:18:28 -0000	1.9
+++ xpcom/obsolete/nsFileSpec.h	25 Jun 2005 09:16:22 -0000
@@ -459,11 +459,8 @@ class NS_COM_OBSOLETE nsFileSpec
                                 // "below" this.
         void                    operator += (const char* inRelativeUnixPath);
 
 
-        void                    MakeUnique();
-        void                    MakeUnique(const char* inSuggestedLeafName);
-    
                                
         PRBool                  IsDirectory() const;          // More stringent than Exists()                               
         PRBool                  IsFile() const;               // More stringent than Exists()
         PRBool                  Exists() const;
@@ -475,8 +472,12 @@ class NS_COM_OBSOLETE nsFileSpec
     //--------------------------------------------------
     // Creation and deletion of objects.  These can modify the disk.
     //--------------------------------------------------
 
+    // For security reasons, these create the file.
+        void                    MakeUnique();
+        void                    MakeUnique(const char* inSuggestedLeafName);
+    
                                 // Called for the spec of an alias.  Modifies the spec to
                                 // point to the original.  Sets mError.
         nsresult                ResolveSymlink(PRBool& wasSymlink);
 
