diff --git a/mailnews/base/src/nsMsgContentPolicy.cpp b/mailnews/base/src/nsMsgContentPolicy.cpp
--- a/mailnews/base/src/nsMsgContentPolicy.cpp
+++ b/mailnews/base/src/nsMsgContentPolicy.cpp
@@ -69,16 +69,17 @@
 #include "nsICookie2.h"
 
 // needed for mailnews content load policy manager
 #include "nsIDocShell.h"
 #include "nsIWebNavigation.h"
 #include "nsIDocShellTreeNode.h"
 #include "nsContentPolicyUtils.h"
 #include "nsIDOMHTMLImageElement.h"
+#include "nsILoadContext.h"
 
 static const char kBlockRemoteImages[] = "mailnews.message_display.disable_remote_image";
 static const char kAllowPlugins[] = "mailnews.message_display.allow.plugins";
 static const char kTrustedDomains[] =  "mail.trusteddomains";
 
 // Per message headder flags to keep track of whether the user is allowing remote
 // content for a particular message. 
 // if you change or add more values to these constants, be sure to modify
@@ -622,33 +623,33 @@ NS_IMETHODIMP nsMsgCookiePolicy::CanAcce
 NS_IMETHODIMP nsMsgCookiePolicy::CanAccess(nsIURI         *aURI,
                                            nsIChannel     *aChannel,
                                            nsCookieAccess *aResult)
 {
   // by default we deny all cookies in mail
   *aResult = ACCESS_DENY;
   NS_ENSURE_ARG_POINTER(aChannel);
   
-  nsCOMPtr<nsIDocShellTreeItem> docShellTreeItem;
-  NS_QueryNotificationCallbacks(aChannel, docShellTreeItem);
+  nsCOMPtr<nsILoadContext> loadContext;
+  NS_QueryNotificationCallbacks(aChannel, loadContext);
 
-  NS_ENSURE_TRUE(docShellTreeItem, NS_OK);
-  PRInt32 itemType;
-  docShellTreeItem->GetItemType(&itemType);
+  NS_ENSURE_TRUE(loadContext, NS_OK);
+  PRBool isContent;
+  loadContext->GetIsContent(&isContent);
 
-  // allow chrome docshells to set cookies
-  if (itemType == nsIDocShellTreeItem::typeChrome)
+  // allow chrome to set cookies
+  if (!isContent)
     *aResult = ACCESS_DEFAULT;
   else // allow RSS articles in content to access cookies
   {
-  NS_ENSURE_TRUE(aURI, NS_OK);  
-  PRBool isRSS = PR_FALSE;
-  IsRSSArticle(aURI, &isRSS);
-  if (isRSS)
-    *aResult = ACCESS_DEFAULT;
+    NS_ENSURE_TRUE(aURI, NS_OK);  
+    PRBool isRSS = PR_FALSE;
+    IsRSSArticle(aURI, &isRSS);
+    if (isRSS)
+      *aResult = ACCESS_DEFAULT;
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP nsMsgCookiePolicy::CanSetCookie(nsIURI     *aURI,
                                               nsIChannel *aChannel,
                                               nsICookie2 *aCookie,
