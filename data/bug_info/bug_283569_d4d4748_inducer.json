{"bug_id":283569,"commitHash":"d4d4748","commit_info":{"sha":"d4d47484e2a65239741f7302efa05fc117cae15a","commit":{"author":{"name":"timeless%mozdev.org","email":"timeless%mozdev.org","date":"2005-08-02T14:22:50Z"},"committer":{"name":"timeless%mozdev.org","email":"timeless%mozdev.org","date":"2005-08-02T14:22:50Z"},"message":"Bug 283569 OOM crash [@ nsNSS_SSLGetClientAuthData]\npatch by b.jacques@planet.nl r=kaie sr=darin a=bsmedberg","tree":{"sha":"3ec9deb66e12e75ab87423de1783972b55224ef3","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/3ec9deb66e12e75ab87423de1783972b55224ef3"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/d4d47484e2a65239741f7302efa05fc117cae15a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/d4d47484e2a65239741f7302efa05fc117cae15a","html_url":"https://github.com/mozilla/gecko-dev/commit/d4d47484e2a65239741f7302efa05fc117cae15a","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/d4d47484e2a65239741f7302efa05fc117cae15a/comments","author":null,"committer":null,"parents":[{"sha":"9653d785dcb4261fabe04d1d60e0b847c6c30441","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/9653d785dcb4261fabe04d1d60e0b847c6c30441","html_url":"https://github.com/mozilla/gecko-dev/commit/9653d785dcb4261fabe04d1d60e0b847c6c30441"}],"stats":{"total":69,"additions":36,"deletions":33},"files":[{"sha":"7bbf8826d6b785e7589ab001b15fb73c9f4b0c84","filename":"security/manager/ssl/src/nsNSSIOLayer.cpp","status":"modified","additions":36,"deletions":33,"changes":69,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d4d47484e2a65239741f7302efa05fc117cae15a/security/manager/ssl/src/nsNSSIOLayer.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/d4d47484e2a65239741f7302efa05fc117cae15a/security/manager/ssl/src/nsNSSIOLayer.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsNSSIOLayer.cpp?ref=d4d47484e2a65239741f7302efa05fc117cae15a","patch":"@@ -295,8 +295,10 @@ NS_IMETHODIMP\n nsNSSSocketInfo::GetShortSecurityDescription(PRUnichar** aText) {\n   if (mShortDesc.IsEmpty())\n     *aText = nsnull;\n-  else\n+  else {\n     *aText = ToNewUnicode(mShortDesc);\n+    NS_ENSURE_TRUE(*aText, NS_ERROR_OUT_OF_MEMORY);\n+  }\n   return NS_OK;\n }\n \n@@ -2048,48 +2050,53 @@ SECStatus nsNSS_SSLGetClientAuthData(void* arg, PRFileDesc* socket,\n     CERT_DestroyCertificate(serverCert);\n \n     certNicknameList = (PRUnichar **)nsMemory::Alloc(sizeof(PRUnichar *) * nicknames->numnicknames);\n+    if (!certNicknameList)\n+      goto loser;\n     certDetailsList = (PRUnichar **)nsMemory::Alloc(sizeof(PRUnichar *) * nicknames->numnicknames);\n+    if (!certDetailsList) {\n+      nsMemory::Free(certNicknameList);\n+      goto loser;\n+    }\n \n     PRInt32 CertsToUse;\n-\n     for (CertsToUse = 0, node = CERT_LIST_HEAD(certList);\n          !CERT_LIST_END(node, certList) && CertsToUse < nicknames->numnicknames;\n          node = CERT_LIST_NEXT(node)\n         )\n     {\n-      nsNSSCertificate *tempCert = new nsNSSCertificate(node->cert);\n+      nsRefPtr<nsNSSCertificate> tempCert = new nsNSSCertificate(node->cert);\n \n-      if (tempCert) {\n+      if (!tempCert)\n+        continue;\n       \n-        // XXX we really should be using an nsCOMPtr instead of manually add-refing,\n-        // but nsNSSCertificate does not have a default constructor.\n-        \n-        NS_ADDREF(tempCert);\n-\n-        nsAutoString i_nickname(NS_ConvertUTF8toUCS2(nicknames->nicknames[CertsToUse]));\n-        nsAutoString nickWithSerial;\n-        nsAutoString details;\n-        if (NS_SUCCEEDED(tempCert->FormatUIStrings(i_nickname, nickWithSerial, details))) {\n-          certNicknameList[CertsToUse] = ToNewUnicode(nickWithSerial);\n-          certDetailsList[CertsToUse] = ToNewUnicode(details);\n-        }\n-        else {\n-          certNicknameList[CertsToUse] = nsnull;\n-          certDetailsList[CertsToUse] = nsnull;\n-        }\n-\n-        NS_RELEASE(tempCert);\n-        \n-        ++CertsToUse;\n+      NS_ConvertUTF8toUTF16 i_nickname(nicknames->nicknames[CertsToUse]);\n+      nsAutoString nickWithSerial, details;\n+      \n+      if (NS_FAILED(tempCert->FormatUIStrings(i_nickname, nickWithSerial, details)))\n+        continue;\n+\n+      certNicknameList[CertsToUse] = ToNewUnicode(nickWithSerial);\n+      if (!certNicknameList[CertsToUse])\n+        continue;\n+      certDetailsList[CertsToUse] = ToNewUnicode(details);\n+      if (!certDetailsList[CertsToUse]) {\n+        nsMemory::Free(certNicknameList[CertsToUse]);\n+        continue;\n       }\n+\n+      ++CertsToUse;\n     }\n \n     /* Throw up the client auth dialog and get back the index of the selected cert */\n     rv = getNSSDialogs((void**)&dialogs, \n                        NS_GET_IID(nsIClientAuthDialogs),\n                        NS_CLIENTAUTHDIALOGS_CONTRACTID);\n \n-    if (NS_FAILED(rv)) goto loser;\n+    if (NS_FAILED(rv)) {\n+      NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(CertsToUse, certNicknameList);\n+      NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(CertsToUse, certDetailsList);\n+      goto loser;\n+    }\n \n     {\n       nsPSMUITracker tracker;\n@@ -2103,19 +2110,15 @@ SECStatus nsNSS_SSLGetClientAuthData(void* arg, PRFileDesc* socket,\n       }\n     }\n \n-    int i;\n-    for (i = 0; i < CertsToUse; ++i) {\n-      nsMemory::Free(certNicknameList[i]);\n-      nsMemory::Free(certDetailsList[i]);\n-    }\n-    nsMemory::Free(certNicknameList);\n-    nsMemory::Free(certDetailsList);\n-\n     NS_RELEASE(dialogs);\n+    NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(CertsToUse, certNicknameList);\n+    NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(CertsToUse, certDetailsList);\n+    \n     if (NS_FAILED(rv)) goto loser;\n \n     if (canceled) { rv = NS_ERROR_NOT_AVAILABLE; goto loser; }\n \n+    int i;\n     for (i = 0, node = CERT_LIST_HEAD(certList);\n          !CERT_LIST_END(node, certList);\n          ++i, node = CERT_LIST_NEXT(node)) {"}]},"blames":["4e954931","ca619729","4b9a8a51","6d1ce233","d007c347","9f403a8b","1a64376d","c7fa1cee","31db9b54","3a1a52d2","b6f99631"]}