{"bug_id":220106,"commitHash":"e552a95","commit_info":{"sha":"e552a95d258200325dc19c43624b810f4037767b","commit":{"author":{"name":"timeless%mozdev.org","email":"timeless%mozdev.org","date":"2003-10-16T15:33:56Z"},"committer":{"name":"timeless%mozdev.org","email":"timeless%mozdev.org","date":"2003-10-16T15:33:56Z"},"message":"Bug 220106 @mozilla.org/security/nsCertTree;1 doesn't null check mTreeArray\nr=kaie sr=bz","tree":{"sha":"c3561c4151ded7d36f1b54780168530a8165b675","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/c3561c4151ded7d36f1b54780168530a8165b675"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/e552a95d258200325dc19c43624b810f4037767b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/e552a95d258200325dc19c43624b810f4037767b","html_url":"https://github.com/mozilla/gecko-dev/commit/e552a95d258200325dc19c43624b810f4037767b","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/e552a95d258200325dc19c43624b810f4037767b/comments","author":null,"committer":null,"parents":[{"sha":"b9a02f9962f4e92c504074fe32adcb6c73fbdc6c","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/b9a02f9962f4e92c504074fe32adcb6c73fbdc6c","html_url":"https://github.com/mozilla/gecko-dev/commit/b9a02f9962f4e92c504074fe32adcb6c73fbdc6c"}],"stats":{"total":31,"additions":27,"deletions":4},"files":[{"sha":"db4e3e9c0bba8092c5e5c749de92a13b03de6b5e","filename":"security/manager/ssl/src/nsCertTree.cpp","status":"modified","additions":27,"deletions":4,"changes":31,"blob_url":"https://github.com/mozilla/gecko-dev/blob/e552a95d258200325dc19c43624b810f4037767b/security/manager/ssl/src/nsCertTree.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/e552a95d258200325dc19c43624b810f4037767b/security/manager/ssl/src/nsCertTree.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsCertTree.cpp?ref=e552a95d258200325dc19c43624b810f4037767b","patch":"@@ -359,7 +359,7 @@ nsCertTree::LoadCertsFromCache(nsINSSCertCache *aCache, PRUint32 aType)\n   if (mTreeArray) {\n     FreeCertArray();\n     delete [] mTreeArray;\n-    mTreeArray = NULL;\n+    mTreeArray = nsnull;\n     mNumRows = 0;\n   }\n   nsresult rv = InitCompareHash();\n@@ -378,7 +378,7 @@ nsCertTree::LoadCerts(PRUint32 aType)\n   if (mTreeArray) {\n     FreeCertArray();\n     delete [] mTreeArray;\n-    mTreeArray = NULL;\n+    mTreeArray = nsnull;\n     mNumRows = 0;\n   }\n   nsresult rv = InitCompareHash();\n@@ -399,6 +399,9 @@ nsCertTree::UpdateUIContents()\n   if (NS_FAILED(rv)) return rv;\n   mNumOrgs = CountOrganizations();\n   mTreeArray = new treeArrayEl[mNumOrgs];\n+  if (!mTreeArray)\n+    return NS_ERROR_OUT_OF_MEMORY;\n+\n   PRUint32 j = 0;\n   nsCOMPtr<nsISupports> isupport = dont_AddRef(mCertArray->ElementAt(j));\n   nsCOMPtr<nsIX509Cert> orgCert = do_QueryInterface(isupport);\n@@ -449,7 +452,7 @@ nsCertTree::RemoveCert(PRUint32 index)\n       RemoveCacheEntry(isupport);\n       mCertArray->RemoveElementAt(certIndex);\n       delete [] mTreeArray;\n-      mTreeArray = NULL;\n+      mTreeArray = nsnull;\n       return UpdateUIContents();\n     }\n     if (mTreeArray[i].open)\n@@ -485,6 +488,8 @@ nsCertTree::GetCert(PRUint32 aIndex, nsIX509Cert **_cert)\n NS_IMETHODIMP \n nsCertTree::GetRowCount(PRInt32 *aRowCount)\n {\n+  if (!mTreeArray)\n+    return NS_ERROR_NOT_INITIALIZED;\n   PRUint32 count = 0;\n   for (PRInt32 i=0; i<mNumOrgs; i++) {\n     if (mTreeArray[i].open) {\n@@ -545,6 +550,8 @@ nsCertTree::GetColumnProperties(const PRUnichar *colID,\n NS_IMETHODIMP \n nsCertTree::IsContainer(PRInt32 index, PRBool *_retval)\n {\n+  if (!mTreeArray)\n+    return NS_ERROR_NOT_INITIALIZED;\n   treeArrayEl *el = GetThreadDescAtIndex(index);\n   if (el) {\n     *_retval = PR_TRUE;\n@@ -558,6 +565,8 @@ nsCertTree::IsContainer(PRInt32 index, PRBool *_retval)\n NS_IMETHODIMP \n nsCertTree::IsContainerOpen(PRInt32 index, PRBool *_retval)\n {\n+  if (!mTreeArray)\n+    return NS_ERROR_NOT_INITIALIZED;\n   treeArrayEl *el = GetThreadDescAtIndex(index);\n   if (el && el->open) {\n     *_retval = PR_TRUE;\n@@ -571,7 +580,7 @@ nsCertTree::IsContainerOpen(PRInt32 index, PRBool *_retval)\n NS_IMETHODIMP \n nsCertTree::IsContainerEmpty(PRInt32 index, PRBool *_retval)\n {\n-  *_retval = PR_FALSE;\n+  *_retval = !mTreeArray;\n   return NS_OK;\n }\n \n@@ -587,6 +596,8 @@ nsCertTree::IsSeparator(PRInt32 index, PRBool *_retval)\n NS_IMETHODIMP \n nsCertTree::GetParentIndex(PRInt32 rowIndex, PRInt32 *_retval)\n {\n+  if (!mTreeArray)\n+    return NS_ERROR_NOT_INITIALIZED;\n   int i, idx = 0;\n   for (i = 0; i < mNumOrgs && idx < rowIndex; i++, idx++) {\n     if (mTreeArray[i].open) {\n@@ -606,6 +617,9 @@ NS_IMETHODIMP\n nsCertTree::HasNextSibling(PRInt32 rowIndex, PRInt32 afterIndex, \n                                PRBool *_retval)\n {\n+  if (!mTreeArray)\n+    return NS_ERROR_NOT_INITIALIZED;\n+\n   int i, idx = 0;\n   for (i = 0; i < mNumOrgs && idx <= rowIndex; i++, idx++) {\n     if (mTreeArray[i].open) {\n@@ -624,6 +638,8 @@ nsCertTree::HasNextSibling(PRInt32 rowIndex, PRInt32 afterIndex,\n NS_IMETHODIMP \n nsCertTree::GetLevel(PRInt32 index, PRInt32 *_retval)\n {\n+  if (!mTreeArray)\n+    return NS_ERROR_NOT_INITIALIZED;\n   treeArrayEl *el = GetThreadDescAtIndex(index);\n   if (el) {\n     *_retval = 0;\n@@ -638,6 +654,7 @@ NS_IMETHODIMP\n nsCertTree::GetImageSrc(PRInt32 row, const PRUnichar *colID, \n                             nsAString& _retval)\n {\n+  _retval.Truncate();\n   return NS_OK;\n }\n \n@@ -653,6 +670,7 @@ NS_IMETHODIMP\n nsCertTree::GetCellValue(PRInt32 row, const PRUnichar *colID, \n                              nsAString& _retval)\n {\n+  _retval.Truncate();\n   return NS_OK;\n }\n \n@@ -661,6 +679,9 @@ NS_IMETHODIMP\n nsCertTree::GetCellText(PRInt32 row, const PRUnichar *colID, \n                         nsAString& _retval)\n {\n+  if (!mTreeArray)\n+    return NS_ERROR_NOT_INITIALIZED;\n+\n   nsresult rv;\n   _retval.Truncate();\n   NS_ConvertUCS2toUTF8 aUtf8ColID(colID);\n@@ -780,6 +801,8 @@ nsCertTree::SetTree(nsITreeBoxObject *tree)\n NS_IMETHODIMP \n nsCertTree::ToggleOpenState(PRInt32 index)\n {\n+  if (!mTreeArray)\n+    return NS_ERROR_NOT_INITIALIZED;\n   treeArrayEl *el = GetThreadDescAtIndex(index);\n   if (el) el->open = !el->open;\n   PRInt32 fac = (el->open) ? 1 : -1;"}]},"blames":["346ebd75","106f567a","7584920b","d38a0937","2b5e9f73","1a9df62b","268983f1","70ed173b","2a1819d6","a16a9521","db7f83d1","ec415449"]}