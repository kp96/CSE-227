Index: mozilla/security/manager/ssl/src/nsNSSIOLayer.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsNSSIOLayer.cpp,v
retrieving revision 1.160
diff -u -u -8 -p -r1.160 nsNSSIOLayer.cpp
--- mozilla/security/manager/ssl/src/nsNSSIOLayer.cpp	22 Apr 2008 20:03:21 -0000	1.160
+++ mozilla/security/manager/ssl/src/nsNSSIOLayer.cpp	17 Jun 2008 06:46:39 -0000
@@ -963,19 +963,44 @@ GetSubjectAltNames(CERTCertificate *nssC
     current = CERT_GetNextGeneralName(current);
   } while (current != sanNameList); // double linked
 
   PORT_FreeArena(san_arena, PR_FALSE);
   return PR_TRUE;
 }
 
 static void
+CopyWithoutHtmlTags(nsString &src, nsString &dst)
+{
+  dst.Truncate();
+  const PRUnichar *walk = src.get();
+  PRUint32 len = src.Length();
+  PRBool inTag= PR_FALSE;
+
+  for (PRUint32 i=0; i<len; ++i, ++walk) {
+    PRUnichar c = *walk;
+    if (inTag) {
+      if (c == '>') {
+        inTag = PR_FALSE;
+      }
+    } else { // !inTag
+      if (c == '<') {
+        inTag = PR_TRUE;
+      } else {
+        dst.Append(c);
+      }
+    }
+  }
+}
+
+static void
 AppendErrorTextMismatch(const nsString &host,
                         nsIX509Cert* ix509,
                         nsINSSComponent *component,
+                        PRBool externalErrorReporting,
                         nsString &returnedMessage)
 {
   const PRUnichar *params[1];
   nsresult rv;
 
   CERTCertificate *nssCert = NULL;
   CERTCertificateCleaner nssCertCleaner(nssCert);
 
@@ -1033,16 +1058,24 @@ AppendErrorTextMismatch(const nsString &
   else if (nameCount == 1) {
     const PRUnichar *params[1];
     params[0] = allNames.get();
 
     nsString formattedString;
     rv = component->PIPBundleFormatStringFromName("certErrorMismatchSingle2", 
                                                   params, 1, 
                                                   formattedString);
+
+    if (!externalErrorReporting) {
+      // Hack for bug 439062 for 1.9.0 branch, remove the html tag
+      nsString badString;
+      badString = formattedString;
+      CopyWithoutHtmlTags(badString, formattedString);
+    }
+
     if (NS_SUCCEEDED(rv)) {
       returnedMessage.Append(formattedString);
       returnedMessage.Append(NS_LITERAL_STRING("\n"));
     }
   }
   else { // nameCount == 0
     nsString message;
     nsresult rv = component->GetPIPNSSBundleString("certErrorMismatchNoNames",
@@ -1198,17 +1231,18 @@ getInvalidCertErrorMessage(PRUint32 mult
   if (multipleCollectedErrors & nsICertOverrideService::ERROR_UNTRUSTED)
   {
     AppendErrorTextUntrusted(errTrust, host, ix509, 
                              component, returnedMessage);
   }
 
   if (multipleCollectedErrors & nsICertOverrideService::ERROR_MISMATCH)
   {
-    AppendErrorTextMismatch(host, ix509, component, returnedMessage);
+    AppendErrorTextMismatch(host, ix509, component, externalErrorReporting,
+                            returnedMessage);
   }
 
   if (multipleCollectedErrors & nsICertOverrideService::ERROR_TIME)
   {
     AppendErrorTextTime(ix509, component, returnedMessage);
   }
 
   AppendErrorTextCode(errorCodeToReport, component, returnedMessage);
