# HG changeset patch
# Parent ff7a8455f25c575b53b5605a1562663920bdfc98
# User Brian Smith <bsmith@mozilla.com>

diff --git a/security/manager/ssl/src/nsNSSComponent.cpp b/security/manager/ssl/src/nsNSSComponent.cpp
--- a/security/manager/ssl/src/nsNSSComponent.cpp
+++ b/security/manager/ssl/src/nsNSSComponent.cpp
@@ -76,16 +76,17 @@
 #include "nsIDOMWindowCollection.h"
 #include "nsIDOMSmartCardEvent.h"
 #include "nsIDOMCrypto.h"
 #include "nsThreadUtils.h"
 #include "nsAutoPtr.h"
 #include "nsCRT.h"
 #include "nsCRLInfo.h"
 #include "nsCertOverrideService.h"
+#include "nsNTLMAuthModule.h"
 
 #include "nsIWindowWatcher.h"
 #include "nsIPrompt.h"
 #include "nsIPrincipal.h"
 #include "nsReadableUtils.h"
 #include "nsIDateTimeFormat.h"
 #include "prtypes.h"
 #include "nsIEntropyCollector.h"
@@ -1972,16 +1973,20 @@ nsNSSComponent::Init()
 
   bool enabled = false;
   mPrefBranch->GetBoolPref("security.ssl.treat_unsafe_negotiation_as_broken", &enabled);
   nsSSLIOLayerHelpers::setTreatUnsafeNegotiationAsBroken(enabled);
 
   PRInt32 warnLevel = 1;
   mPrefBranch->GetIntPref("security.ssl.warn_missing_rfc5746", &warnLevel);
   nsSSLIOLayerHelpers::setWarnLevelMissingRFC5746(warnLevel);
+
+  bool sendLM = false;
+  mPrefBranch->GetBoolPref("network.ntlm.send-lm-response", &sendLM);
+  nsNTLMAuthModule::SetSendLM(sendLM);
   
   mClientAuthRememberService = new nsClientAuthRememberService;
   if (mClientAuthRememberService)
     mClientAuthRememberService->Init();
 
   createBackgroundThreads();
   if (!mCertVerificationThread)
   {
@@ -2325,16 +2330,20 @@ nsNSSComponent::Observe(nsISupports *aSu
     } else if (prefName.Equals("security.OCSP.enabled")
                || prefName.Equals("security.CRL_download.enabled")
                || prefName.Equals("security.fresh_revocation_info.require")
                || prefName.Equals("security.missing_cert_download.enabled")
                || prefName.Equals("security.first_network_revocation_method")
                || prefName.Equals("security.OCSP.require")) {
       MutexAutoLock lock(mutex);
       setValidationOptions(mPrefBranch);
+    } else if (prefName.Equals("network.ntlm.send-lm-response")) {
+      bool sendLM = false;
+      mPrefBranch->GetBoolPref("network.ntlm.send-lm-response", &sendLM);
+      nsNTLMAuthModule::SetSendLM(sendLM);
     } else {
       /* Look through the cipher table and set according to pref setting */
       for (CipherPref* cp = CipherPrefs; cp->pref; ++cp) {
         if (prefName.Equals(cp->pref)) {
           mPrefBranch->GetBoolPref(cp->pref, &enabled);
           SSL_CipherPrefSetDefault(cp->id, enabled);
           clearSessionCache = true;
           break;
diff --git a/security/manager/ssl/src/nsNTLMAuthModule.cpp b/security/manager/ssl/src/nsNTLMAuthModule.cpp
--- a/security/manager/ssl/src/nsNTLMAuthModule.cpp
+++ b/security/manager/ssl/src/nsNTLMAuthModule.cpp
@@ -32,29 +32,21 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "prlog.h"
 
-#include <stdlib.h>
-#include "nsIPrefService.h"
-#include "nsIPrefBranch.h"
-#include "nsServiceManagerUtils.h"
-#include "nsCOMPtr.h"
+#include "nsNTLMAuthModule.h"
 #include "nsNSSShutDown.h"
-#include "nsNTLMAuthModule.h"
 #include "nsNativeCharsetUtils.h"
-#include "nsReadableUtils.h"
-#include "nsString.h"
 #include "prsystem.h"
-#include "nss.h"
-#include "pk11func.h"
+#include "pk11pub.h"
 #include "md4.h"
 
 #ifdef PR_LOGGING
 PRLogModuleInfo *gNTLMLog = PR_NewLogModule("NTLM");
 
 #define LOG(x) PR_LOG(gNTLMLog, PR_LOG_DEBUG, x)
 #define LOG_ENABLED() PR_LOG_TEST(gNTLMLog, PR_LOG_DEBUG)
 #else
@@ -124,25 +116,22 @@ static const char NTLM_TYPE3_MARKER[] = 
 #define LM_HASH_LEN 16
 #define LM_RESP_LEN 24
 
 #define NTLM_HASH_LEN 16
 #define NTLM_RESP_LEN 24
 
 //-----------------------------------------------------------------------------
 
-static bool SendLM()
+static bool sendLM = false;
+
+/*static*/ void
+nsNTLMAuthModule::SetSendLM(bool newSendLM)
 {
-  nsCOMPtr<nsIPrefBranch> prefs = do_GetService(NS_PREFSERVICE_CONTRACTID);
-  if (!prefs)
-    return false;
-
-  bool val;
-  nsresult rv = prefs->GetBoolPref("network.ntlm.send-lm-response", &val);
-  return NS_SUCCEEDED(rv) && val;
+  sendLM = newSendLM;
 }
 
 //-----------------------------------------------------------------------------
 
 #ifdef PR_LOGGING
 
 /**
  * Prints a description of flags to the NSPR Log, if enabled.
@@ -710,17 +699,17 @@ GenerateType3Msg(const nsString &domain,
     NTLM_Hash(password, ntlmHash);
     LM_Response(ntlmHash, sessionHash, ntlmResp);
   }
   else
   {
     NTLM_Hash(password, ntlmHash);
     LM_Response(ntlmHash, msg.challenge, ntlmResp);
 
-    if (SendLM())
+    if (sendLM)
     {
       PRUint8 lmHash[LM_HASH_LEN];
       LM_Hash(password, lmHash);
       LM_Response(lmHash, msg.challenge, lmResp);
     }
     else
     {
       // According to http://davenport.sourceforge.net/ntlm.html#ntlmVersion2,
diff --git a/security/manager/ssl/src/nsNTLMAuthModule.h b/security/manager/ssl/src/nsNTLMAuthModule.h
--- a/security/manager/ssl/src/nsNTLMAuthModule.h
+++ b/security/manager/ssl/src/nsNTLMAuthModule.h
@@ -47,16 +47,17 @@ public:
   NS_DECL_ISUPPORTS
   NS_DECL_NSIAUTHMODULE
 
   nsNTLMAuthModule() {}
   virtual ~nsNTLMAuthModule();
 
   nsresult InitTest();
 
+  static void SetSendLM(bool sendLM);
 private:
   nsString mDomain;
   nsString mUsername;
   nsString mPassword;
 };
 
 #define NS_NTLMAUTHMODULE_CLASSNAME \
   "nsNTLMAuthModule"
