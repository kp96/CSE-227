Index: security/manager/pki/resources/content/createCertInfo.js
===================================================================
RCS file: /cvsroot/mozilla/security/manager/pki/resources/content/createCertInfo.js,v
retrieving revision 1.2
diff -p -u -6 -r1.2 createCertInfo.js
--- security/manager/pki/resources/content/createCertInfo.js	25 Apr 2004 15:02:32 -0000	1.2
+++ security/manager/pki/resources/content/createCertInfo.js	24 Nov 2004 20:14:09 -0000
@@ -45,14 +45,21 @@ function onLoad()
   if (!keygenThread) {
     window.close();
     return;
   }
   
   setCursor("wait");
+
+  var obs = {
+    observe : function keygenListenerObserve(subject, topic, data) {
+      if (topic == "keygen-finished")
+        window.close();
+    }
+  };
   
-  keygenThread.startKeyGeneration(window);
+  keygenThread.startKeyGeneration(obs);
 }
 
 function onClose()
 {
   setCursor("default");
 
Index: security/manager/ssl/public/nsIGenKeypairInfoDlg.idl
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/public/nsIGenKeypairInfoDlg.idl,v
retrieving revision 1.2
diff -p -u -6 -r1.2 nsIGenKeypairInfoDlg.idl
--- security/manager/ssl/public/nsIGenKeypairInfoDlg.idl	25 Apr 2004 15:02:35 -0000	1.2
+++ security/manager/ssl/public/nsIGenKeypairInfoDlg.idl	24 Nov 2004 20:14:09 -0000
@@ -49,8 +49,18 @@ interface nsIGeneratingKeypairInfoDialog
 {
   void displayGeneratingKeypairInfo(in nsIInterfaceRequestor ctx,
                                     in nsIKeygenThread runnable);
 };
 
 %{C++
-#define NS_GENERATINGKEYPAIRINFODIALOGS_CONTRACTID "@mozilla.org/nsGeneratingKeypairInfoDialogs;1"
+/**
+ * This component is to be implemented by the embeddor. It is used to show
+ * feedback to the user while a private key is being generated.
+ *
+ * This component is only ever used on the UI thread.
+ *
+ * INTERFACES THAT NEED TO BE IMPLEMENTED:
+ *   nsIGeneratingKeypairInfoDialogs
+ */
+#define NS_GENERATINGKEYPAIRINFODIALOGS_CONTRACTID \
+            "@mozilla.org/nsGeneratingKeypairInfoDialogs;1"
 %}
Index: security/manager/ssl/public/nsIKeygenThread.idl
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/public/nsIKeygenThread.idl,v
retrieving revision 1.3
diff -p -u -6 -r1.3 nsIKeygenThread.idl
--- security/manager/ssl/public/nsIKeygenThread.idl	25 Apr 2004 15:02:35 -0000	1.3
+++ security/manager/ssl/public/nsIKeygenThread.idl	24 Nov 2004 20:14:09 -0000
@@ -35,31 +35,36 @@
  * ***** END LICENSE BLOCK ***** */
 
 // make sure to include all the required file headers
 
 #include "nsISupports.idl"
 
-interface nsIDOMWindowInternal;
+interface nsIObserver;
 
 /**
  * nsIKeygenThread
  *  This is used to communicate with the thread generating a key pair,
  *  to be used by the dialog displaying status information.
  */
-[scriptable, uuid(195763b8-1dd2-11b2-a843-eb44e44aaa37)]
+[scriptable, uuid(8712a243-5539-447c-9f47-8653f40c3a09)]
 interface nsIKeygenThread : nsISupports
 {
   /**
    * startKeyGeneration - run the thread
-   *   A user interface implementing this interface needs to
+   *   A user interface using this interface needs to
    *   call this method as soon as the status information
    *   is displaying. This will trigger key generation.
    *   To allow the closure of the status information,
-   *   the thread needs a handle to the displayed window.
+   *   the thread needs a handle to an observer.
+   *
+   *   observer will be called on the UI thread.
+   *   When the key generation is done, the observe method will
+   *   be called with a topic of "keygen-finished" and null data
+   *   and subject.
    */
-  void startKeyGeneration(in nsIDOMWindowInternal statusDialog);
+  void startKeyGeneration(in nsIObserver observer);
 
   /**
    * userCanceled - notify the thread
    *   If the user canceled, the thread is no longer allowed to
    *   close the dialog. However, if the thread already closed
    *   it, we are not allowed to close it.
Index: security/manager/ssl/src/nsKeygenThread.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsKeygenThread.cpp,v
retrieving revision 1.9
diff -p -u -6 -r1.9 nsKeygenThread.cpp
--- security/manager/ssl/src/nsKeygenThread.cpp	25 Apr 2004 15:02:36 -0000	1.9
+++ security/manager/ssl/src/nsKeygenThread.cpp	24 Nov 2004 20:14:09 -0000
@@ -37,21 +37,20 @@
  * ***** END LICENSE BLOCK ***** */
 
 #include "pk11func.h"
 #include "nsCOMPtr.h"
 #include "nsProxiedService.h"
 #include "nsKeygenThread.h"
-#include "nsIDOMWindowInternal.h"
+#include "nsIObserver.h"
 #include "nsNSSShutDown.h"
 
 NS_IMPL_THREADSAFE_ISUPPORTS1(nsKeygenThread, nsIKeygenThread)
 
 
 nsKeygenThread::nsKeygenThread()
 :mutex(nsnull),
- statusDialogPtr(nsnull),
  iAmRunning(PR_FALSE),
  keygenReady(PR_FALSE),
  statusDialogClosed(PR_FALSE),
  alreadyReceivedParams(PR_FALSE),
  privateKey(nsnull),
  publicKey(nsnull),
@@ -68,16 +67,12 @@ nsKeygenThread::nsKeygenThread()
 
 nsKeygenThread::~nsKeygenThread()
 {
   if (mutex) {
     PR_DestroyLock(mutex);
   }
-  
-  if (statusDialogPtr) {
-    NS_RELEASE(statusDialogPtr);
-  }
 }
 
 void nsKeygenThread::SetParams(
     PK11SlotInfo *a_slot,
     PRUint32 a_keyGenMechanism,
     void *a_params,
@@ -143,41 +138,39 @@ nsresult nsKeygenThread::GetParams(
 static void PR_CALLBACK nsKeygenThreadRunner(void *arg)
 {
   nsKeygenThread *self = NS_STATIC_CAST(nsKeygenThread *, arg);
   self->Run();
 }
 
-nsresult nsKeygenThread::StartKeyGeneration(nsIDOMWindowInternal *statusDialog)
+nsresult nsKeygenThread::StartKeyGeneration(nsIObserver* aObserver)
 {
   if (!mutex)
     return NS_OK;
 
-  if (!statusDialog )
+  if (!aObserver)
     return NS_OK;
 
   nsCOMPtr<nsIProxyObjectManager> proxyman(do_GetService(NS_XPCOMPROXY_CONTRACTID));
   if (!proxyman)
     return NS_OK;
 
-  nsCOMPtr<nsIDOMWindowInternal> wi;
+  nsCOMPtr<nsIObserver> obs;
   proxyman->GetProxyForObject( NS_UI_THREAD_EVENTQ,
-                               nsIDOMWindowInternal::GetIID(),
-                               statusDialog,
+                               NS_GET_IID(nsIObserver),
+                               aObserver,
                                PROXY_SYNC | PROXY_ALWAYS,
-                               getter_AddRefs(wi));
+                               getter_AddRefs(obs));
 
   PR_Lock(mutex);
 
     if (iAmRunning || keygenReady) {
       PR_Unlock(mutex);
       return NS_OK;
     }
 
-    statusDialogPtr = wi;
-    NS_ADDREF(statusDialogPtr);
-    wi = 0;
+    observer.swap(obs);
 
     iAmRunning = PR_TRUE;
 
     threadHandle = PR_CreateThread(PR_USER_THREAD, nsKeygenThreadRunner, NS_STATIC_CAST(void*, this), 
       PR_PRIORITY_NORMAL, PR_LOCAL_THREAD, PR_JOINABLE_THREAD, 0);
 
@@ -235,14 +228,13 @@ void nsKeygenThread::Run(void)
   // This call gave us ownership over privateKey and publicKey.
   // But as the params structure is owner by our caller,
   // we effectively transferred ownership to the caller.
   // As long as key generation can't be canceled, we don't need 
   // to care for cleaning this up.
 
-  nsIDOMWindowInternal *windowToClose = 0;
-
+  nsCOMPtr<nsIObserver> obs;
   PR_Lock(mutex);
 
     keygenReady = PR_TRUE;
     iAmRunning = PR_FALSE;
 
     // forget our parameters
@@ -252,21 +244,20 @@ void nsKeygenThread::Run(void)
     }
     keyGenMechanism = 0;
     params = 0;
     wincx = 0;
 
     if (!statusDialogClosed)
-      windowToClose = statusDialogPtr;
+      obs = observer;
 
-    statusDialogPtr = 0;
-    statusDialogClosed = PR_TRUE;
+    observer = nsnull;
 
   PR_Unlock(mutex);
 
-  if (windowToClose)
-    windowToClose->Close();
+  if (obs)
+    obs->Observe(nsnull, "keygen-finished", nsnull);
 }
 
 void nsKeygenThread::Join()
 {
   if (!threadHandle)
     return;
Index: security/manager/ssl/src/nsKeygenThread.h
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsKeygenThread.h,v
retrieving revision 1.4
diff -p -u -6 -r1.4 nsKeygenThread.h
--- security/manager/ssl/src/nsKeygenThread.h	25 Apr 2004 15:02:36 -0000	1.4
+++ security/manager/ssl/src/nsKeygenThread.h	24 Nov 2004 20:14:09 -0000
@@ -40,19 +40,22 @@
 #define _NSKEYGENTHREAD_H_
 
 #include "keyhi.h"
 #include "nspr.h"
 
 #include "nsIKeygenThread.h"
+#include "nsCOMPtr.h"
+
+class nsIObserver;
 
 class nsKeygenThread : public nsIKeygenThread
 {
 private:
   PRLock *mutex;
   
-  nsIDOMWindowInternal* statusDialogPtr;
+  nsCOMPtr<nsIObserver> observer;
 
   PRBool iAmRunning;
   PRBool keygenReady;
   PRBool statusDialogClosed;
   PRBool alreadyReceivedParams;
 
Index: uriloader/base/nsIDownload.idl
===================================================================
RCS file: /cvsroot/mozilla/uriloader/base/nsIDownload.idl,v
retrieving revision 1.10
diff -p -u -6 -r1.10 nsIDownload.idl
--- uriloader/base/nsIDownload.idl	16 Sep 2004 18:33:39 -0000	1.10
+++ uriloader/base/nsIDownload.idl	24 Nov 2004 20:14:09 -0000
@@ -151,13 +151,12 @@ interface nsIDownload : nsITransfer {
  * If nsIObserver is implemented, the component may get a notification with
  * topic "temp-file" and an nsILocalFile instance as subject, which indicates
  * the location of a temporary file; i.e. a file in which the received data will
  * be stored, but which is not equal to the target file.
  *
  * INTERFACES THAT NEED TO BE IMPLEMENTED:
- *   nsISupports
  *   nsITransfer
  *   nsIDownload
  *   nsIWebProgressListener
  *
  * INTERFACES THAT MAY BE IMPLEMENTED:
  *   nsIObserver
