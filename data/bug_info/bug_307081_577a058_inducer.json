{"bug_id":307081,"commitHash":"577a058","commit_info":{"sha":"577a05865b2d47271c9b8dd164773e9dff62355a","commit":{"author":{"name":"Cykesiopka","email":"cykesiopka.bmo@gmail.com","date":"2016-06-24T07:12:16Z"},"committer":{"name":"Cykesiopka","email":"cykesiopka.bmo@gmail.com","date":"2016-06-24T07:12:16Z"},"message":"Bug 307081 - Make nsIClientAuthDialogs::ChooseCertificate() pass an nsIArray of nsIX509Certs, not strings. r=kats,keeler\n\nThis provides implementations of ChooseCertificate() with more flexibility, and\nallows callers of ChooseCertificate() to be less complex.\n\nA portion of this work involves reimplementing\nnsNSSCertificate::FormatUIStrings() in JS and improving UI strings for l10n.\n\nMozReview-Commit-ID: CE7Uc2ntwmZ\n\n--HG--\nextra : transplant_source : R%A8eC%CEO2%DC%20%F7%B4V%F3g%E6h%EB%D5%8D3","tree":{"sha":"0c9a95a662c2ca2d16f89d79ef19f8dcc0929a6d","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/0c9a95a662c2ca2d16f89d79ef19f8dcc0929a6d"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/577a05865b2d47271c9b8dd164773e9dff62355a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/577a05865b2d47271c9b8dd164773e9dff62355a","html_url":"https://github.com/mozilla/gecko-dev/commit/577a05865b2d47271c9b8dd164773e9dff62355a","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/577a05865b2d47271c9b8dd164773e9dff62355a/comments","author":null,"committer":null,"parents":[{"sha":"313db6b51661e7ad3e1369226bbd61e00ccc35f6","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/313db6b51661e7ad3e1369226bbd61e00ccc35f6","html_url":"https://github.com/mozilla/gecko-dev/commit/313db6b51661e7ad3e1369226bbd61e00ccc35f6"}],"stats":{"total":312,"additions":205,"deletions":107},"files":[{"sha":"c8557978871ae2419e918726e5ec7fcb0cc42b7d","filename":"mobile/android/components/NSSDialogService.js","status":"modified","additions":44,"deletions":2,"changes":46,"blob_url":"https://github.com/mozilla/gecko-dev/blob/577a05865b2d47271c9b8dd164773e9dff62355a/mobile/android/components/NSSDialogService.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/577a05865b2d47271c9b8dd164773e9dff62355a/mobile/android/components/NSSDialogService.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mobile/android/components/NSSDialogService.js?ref=577a05865b2d47271c9b8dd164773e9dff62355a","patch":"@@ -143,6 +143,40 @@ NSSDialogs.prototype = {\n     this.showPrompt(p);\n   },\n \n+  /**\n+   * Returns a list of details of the given cert relevant for TLS client\n+   * authentication.\n+   *\n+   * @param {nsIX509Cert} cert Cert to get the details of.\n+   * @returns {String} <br/> delimited list of details.\n+   */\n+  getCertDetails: function(cert) {\n+    let detailLines = [\n+      this.formatString(\"clientAuthAsk.issuedTo\", [cert.subjectName]),\n+      this.formatString(\"clientAuthAsk.serial\", [cert.serialNumber]),\n+      this.formatString(\"clientAuthAsk.validityPeriod\",\n+                        [cert.validity.notBeforeLocalTime,\n+                         cert.validity.notAfterLocalTime]),\n+    ];\n+    let keyUsages = cert.keyUsages;\n+    if (keyUsages) {\n+      detailLines.push(this.formatString(\"clientAuthAsk.keyUsages\",\n+                                         [keyUsages]));\n+    }\n+    let emailAddresses = cert.getEmailAddresses({});\n+    if (emailAddresses.length > 0) {\n+      let joinedAddresses = emailAddresses.join(\", \");\n+      detailLines.push(this.formatString(\"clientAuthAsk.emailAddresses\",\n+                                         [joinedAddresses]));\n+    }\n+    detailLines.push(this.formatString(\"clientAuthAsk.issuedBy\",\n+                                       [cert.issuerName]));\n+    detailLines.push(this.formatString(\"clientAuthAsk.storedOn\",\n+                                       [cert.tokenName]));\n+\n+    return detailLines.join(\"<br/>\");\n+  },\n+\n   viewCertDetails: function(details) {\n     let p = this.getPrompt(this.getString(\"clientAuthAsk.message3\"),\n                     '',\n@@ -151,8 +185,7 @@ NSSDialogs.prototype = {\n     this.showPrompt(p);\n   },\n \n-  chooseCertificate: function(ctx, cnAndPort, organization, issuerOrg,\n-                              certNickList, certDetailsList, count,\n+  chooseCertificate: function(ctx, cnAndPort, organization, issuerOrg, certList,\n                               selectedIndex) {\n     let rememberSetting =\n       Services.prefs.getBoolPref(\"security.remember_cert_checkbox_default_setting\");\n@@ -163,6 +196,15 @@ NSSDialogs.prototype = {\n       this.formatString(\"clientAuthAsk.issuer\", [issuerOrg]),\n     ].join(\"<br/>\");\n \n+    let certNickList = [];\n+    let certDetailsList = [];\n+    for (let i = 0; i < certList.length; i++) {\n+      let cert = certList.queryElementAt(i, Ci.nsIX509Cert);\n+      certNickList.push(this.formatString(\"clientAuthAsk.nickAndSerial\",\n+                                          [cert.nickname, cert.serialNumber]));\n+      certDetailsList.push(this.getCertDetails(cert));\n+    }\n+\n     selectedIndex.value = 0;\n     while (true) {\n       let buttons = ["},{"sha":"cfaa6a97e0d4fa1529faa30fc248838e68bfe07c","filename":"mobile/android/locales/en-US/chrome/pippki.properties","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/mozilla/gecko-dev/blob/577a05865b2d47271c9b8dd164773e9dff62355a/mobile/android/locales/en-US/chrome/pippki.properties","raw_url":"https://github.com/mozilla/gecko-dev/raw/577a05865b2d47271c9b8dd164773e9dff62355a/mobile/android/locales/en-US/chrome/pippki.properties","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mobile/android/locales/en-US/chrome/pippki.properties?ref=577a05865b2d47271c9b8dd164773e9dff62355a","patch":"@@ -19,12 +19,40 @@ clientAuthAsk.message1=This site has requested that you identify yourself with a\n clientAuthAsk.message2=Choose a certificate to present as identification:\n clientAuthAsk.message3=Details of selected certificate:\n clientAuthAsk.remember.label=Remember this decision\n+# LOCALIZATION NOTE(clientAuthAsk.nickAndSerial): Represents a single cert when\n+# the user is choosing from a list of certificates.\n+# %1$S is the nickname of the cert.\n+# %2$S is the serial number of the cert in AA:BB:CC hex format.\n+clientAuthAsk.nickAndSerial=%1$S [%2$S]\n # LOCALIZATION NOTE(clientAuthAsk.organization): %S is the Organization of the\n # server cert.\n clientAuthAsk.organization=Organization: \"%S\"\n # LOCALIZATION NOTE(clientAuthAsk.issuer): %S is the Organization of the\n # issuer cert of the server cert.\n clientAuthAsk.issuer=Issued Under: \"%S\"\n+# LOCALIZATION NOTE(clientAuthAsk.issuedTo): %1$S is the Distinguished Name of\n+# the currently selected client cert, such as \"CN=John Doe,OU=Example\" (without\n+# quotes).\n+clientAuthAsk.issuedTo=Issued to: %1$S\n+# LOCALIZATION NOTE(clientAuthAsk.serial): %1$S is the serial number of the\n+# selected cert in AA:BB:CC hex format.\n+clientAuthAsk.serial=Serial number: %1$S\n+# LOCALIZATION NOTE(clientAuthAsk.validityPeriod):\n+# %1$S is the already localized notBefore date of the selected cert.\n+# %2$S is the already localized notAfter date of the selected cert.\n+clientAuthAsk.validityPeriod=Valid from %1$S to %2$S\n+# LOCALIZATION NOTE(clientAuthAsk.keyUsages): %1$S is a comma separated list of\n+# already localized key usages the selected cert is valid for.\n+clientAuthAsk.keyUsages=Key Usages: %1$S\n+# LOCALIZATION NOTE(clientAuthAsk.emailAddresses): %1$S is a comma separated\n+# list of e-mail addresses the selected cert is valid for.\n+clientAuthAsk.emailAddresses=Email addresses: %1$S\n+# LOCALIZATION NOTE(clientAuthAsk.issuedBy): %1$S is the Distinguished Name of\n+# the cert which issued the selected cert.\n+clientAuthAsk.issuedBy=Issued by: %1$S\n+# LOCALIZATION NOTE(clientAuthAsk.storedOn): %1$S is the name of the PKCS #11\n+# token the selected cert is stored on.\n+clientAuthAsk.storedOn=Stored on: %1$S\n clientAuthAsk.viewCert.label=View\n \n certmgr.title=Certificate Details"},{"sha":"73a051173549806a3d8e2ef9cd874372c6da0fd8","filename":"security/manager/locales/en-US/chrome/pippki/pippki.properties","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/mozilla/gecko-dev/blob/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/locales/en-US/chrome/pippki/pippki.properties","raw_url":"https://github.com/mozilla/gecko-dev/raw/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/locales/en-US/chrome/pippki/pippki.properties","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/locales/en-US/chrome/pippki/pippki.properties?ref=577a05865b2d47271c9b8dd164773e9dff62355a","patch":"@@ -53,12 +53,40 @@ certNotVerified_Unknown=Could not verify this certificate for unknown reasons.\n \n #Client auth\n clientAuthRemember=Remember this decision\n+# LOCALIZATION NOTE(clientAuthNickAndSerial): Represents a single cert when the\n+# user is choosing from a list of certificates.\n+# %1$S is the nickname of the cert.\n+# %2$S is the serial number of the cert in AA:BB:CC hex format.\n+clientAuthNickAndSerial=%1$S [%2$S]\n # LOCALIZATION NOTE(clientAuthMessage1): %S is the Organization of the server\n # cert.\n clientAuthMessage1=Organization: “%S”\n # LOCALIZATION NOTE(clientAuthMessage2): %S is the Organization of the issuer\n # cert of the server cert.\n clientAuthMessage2=Issued Under: “%S”\n+# LOCALIZATION NOTE(clientAuthIssuedTo): %1$S is the Distinguished Name of the\n+# currently selected client cert, such as \"CN=John Doe,OU=Example\" (without\n+# quotes).\n+clientAuthIssuedTo=Issued to: %1$S\n+# LOCALIZATION NOTE(clientAuthSerial): %1$S is the serial number of the selected\n+# cert in AA:BB:CC hex format.\n+clientAuthSerial=Serial number: %1$S\n+# LOCALIZATION NOTE(clientAuthValidityPeriod):\n+# %1$S is the already localized notBefore date of the selected cert.\n+# %2$S is the already localized notAfter date of the selected cert.\n+clientAuthValidityPeriod=Valid from %1$S to %2$S\n+# LOCALIZATION NOTE(clientAuthKeyUsages): %1$S is a comma separated list of\n+# already localized key usages the selected cert is valid for.\n+clientAuthKeyUsages=Key Usages: %1$S\n+# LOCALIZATION NOTE(clientAuthEmailAddresses): %1$S is a comma separated list of\n+# e-mail addresses the selected cert is valid for.\n+clientAuthEmailAddresses=Email addresses: %1$S\n+# LOCALIZATION NOTE(clientAuthIssuedBy): %1$S is the Distinguished Name of the\n+# cert which issued the selected cert.\n+clientAuthIssuedBy=Issued by: %1$S\n+# LOCALIZATION NOTE(clientAuthStoredOn): %1$S is the name of the PKCS #11 token\n+# the selected cert is stored on.\n+clientAuthStoredOn=Stored on: %1$S\n \n #Page Info\n pageInfo_NoEncryption=Connection Not Encrypted"},{"sha":"d82e7f12d32c93c58710362d91bcf0d66354878a","filename":"security/manager/pki/nsNSSDialogs.cpp","status":"modified","additions":39,"deletions":29,"changes":68,"blob_url":"https://github.com/mozilla/gecko-dev/blob/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/pki/nsNSSDialogs.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/pki/nsNSSDialogs.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/pki/nsNSSDialogs.cpp?ref=577a05865b2d47271c9b8dd164773e9dff62355a","patch":"@@ -161,56 +161,66 @@ nsNSSDialogs::ChooseCertificate(nsIInterfaceRequestor* ctx,\n                                 const nsAString& cnAndPort,\n                                 const nsAString& organization,\n                                 const nsAString& issuerOrg,\n-                                const char16_t** certNickList,\n-                                const char16_t** certDetailsList, uint32_t count,\n+                                nsIArray* certList,\n                         /*out*/ uint32_t* selectedIndex,\n                         /*out*/ bool* certificateChosen)\n {\n   NS_ENSURE_ARG_POINTER(ctx);\n+  NS_ENSURE_ARG_POINTER(certList);\n   NS_ENSURE_ARG_POINTER(selectedIndex);\n   NS_ENSURE_ARG_POINTER(certificateChosen);\n \n-  nsresult rv;\n-  uint32_t i;\n-\n   *certificateChosen = false;\n \n   nsCOMPtr<nsIDialogParamBlock> block =\n-           do_CreateInstance(NS_DIALOGPARAMBLOCK_CONTRACTID);\n-  if (!block) return NS_ERROR_FAILURE;\n+    do_CreateInstance(NS_DIALOGPARAMBLOCK_CONTRACTID);\n+  if (!block) {\n+    return NS_ERROR_FAILURE;\n+  }\n+\n+  nsCOMPtr<nsIMutableArray> paramBlockArray = nsArrayBase::Create();\n+  if (!paramBlockArray) {\n+    return NS_ERROR_FAILURE;\n+  }\n+  nsresult rv = paramBlockArray->AppendElement(certList, false);\n+  if (NS_FAILED(rv)) {\n+    return rv;\n+  }\n+  rv = block->SetObjects(paramBlockArray);\n+  if (NS_FAILED(rv)) {\n+    return rv;\n+  }\n \n-  block->SetNumberStrings(4+count*2);\n+  rv = block->SetNumberStrings(3);\n+  if (NS_FAILED(rv)) {\n+    return rv;\n+  }\n \n   rv = block->SetString(0, PromiseFlatString(cnAndPort).get());\n-  if (NS_FAILED(rv)) return rv;\n-\n+  if (NS_FAILED(rv)) {\n+    return rv;\n+  }\n   rv = block->SetString(1, PromiseFlatString(organization).get());\n-  if (NS_FAILED(rv)) return rv;\n-\n-  rv = block->SetString(2, PromiseFlatString(issuerOrg).get());\n-  if (NS_FAILED(rv)) return rv;\n-\n-  for (i = 0; i < count; i++) {\n-    rv = block->SetString(i+3, certNickList[i]);\n-    if (NS_FAILED(rv)) return rv;\n+  if (NS_FAILED(rv)) {\n+    return rv;\n   }\n-\n-  for (i = 0; i < count; i++) {\n-    rv = block->SetString(i+count+3, certDetailsList[i]);\n-    if (NS_FAILED(rv)) return rv;\n+  rv = block->SetString(2, PromiseFlatString(issuerOrg).get());\n+  if (NS_FAILED(rv)) {\n+    return rv;\n   }\n \n-  rv = block->SetInt(0, count);\n-  if (NS_FAILED(rv)) return rv;\n-\n   rv = nsNSSDialogHelper::openDialog(nullptr,\n-                                \"chrome://pippki/content/clientauthask.xul\",\n-                                block);\n-  if (NS_FAILED(rv)) return rv;\n+                                     \"chrome://pippki/content/clientauthask.xul\",\n+                                     block);\n+  if (NS_FAILED(rv)) {\n+    return rv;\n+  }\n \n   int32_t status;\n   rv = block->GetInt(0, &status);\n-  if (NS_FAILED(rv)) return rv;\n+  if (NS_FAILED(rv)) {\n+    return rv;\n+  }\n \n   nsCOMPtr<nsIClientAuthUserDecision> extraResult = do_QueryInterface(ctx);\n   if (extraResult) {"},{"sha":"7c6ba8b387a4e8046a36201e3f98c4c3bd412d1a","filename":"security/manager/pki/resources/content/clientauthask.js","status":"modified","additions":44,"deletions":8,"changes":52,"blob_url":"https://github.com/mozilla/gecko-dev/blob/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/pki/resources/content/clientauthask.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/pki/resources/content/clientauthask.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/pki/resources/content/clientauthask.js?ref=577a05865b2d47271c9b8dd164773e9dff62355a","patch":"@@ -10,12 +10,21 @@ const { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;\n \n const { Services } = Cu.import(\"resource://gre/modules/Services.jsm\", {});\n \n+/**\n+ * The pippki <stringbundle> element.\n+ * @type <stringbundle>\n+ */\n+var bundle;\n+/**\n+ * The array of certs the user can choose from.\n+ * @type nsIArray<nsIX509Cert>\n+ */\n+var certArray;\n /**\n  * The param block to get params from and set results on.\n  * @type nsIDialogParamBlock\n  */\n var dialogParams;\n-var itemCount = 0;\n /**\n  * The checkbox storing whether the user wants to remember the selected cert.\n  * @type nsIDOMXULCheckboxElement\n@@ -25,7 +34,7 @@ var rememberBox;\n function onLoad() {\n   dialogParams = window.arguments[0].QueryInterface(Ci.nsIDialogParamBlock);\n \n-  let bundle = document.getElementById(\"pippki_bundle\");\n+  bundle = document.getElementById(\"pippki_bundle\");\n   let rememberSetting =\n     Services.prefs.getBoolPref(\"security.remember_cert_checkbox_default_setting\");\n \n@@ -44,12 +53,15 @@ function onLoad() {\n   setText(\"issuer\", formattedIssuerOrg);\n \n   let selectElement = document.getElementById(\"nicknames\");\n-  itemCount = dialogParams.GetInt(0);\n-  for (let i = 0; i < itemCount; i++) {\n+  certArray = dialogParams.objects.queryElementAt(0, Ci.nsIArray);\n+  for (let i = 0; i < certArray.length; i++) {\n     let menuItemNode = document.createElement(\"menuitem\");\n-    let nick = dialogParams.GetString(i + 3);\n+    let cert = certArray.queryElementAt(i, Ci.nsIX509Cert);\n+    let nickAndSerial =\n+      bundle.getFormattedString(\"clientAuthNickAndSerial\",\n+                                [cert.nickname, cert.serialNumber]);\n     menuItemNode.setAttribute(\"value\", i);\n-    menuItemNode.setAttribute(\"label\", nick); // this is displayed\n+    menuItemNode.setAttribute(\"label\", nickAndSerial); // This is displayed.\n     selectElement.firstChild.appendChild(menuItemNode);\n     if (i == 0) {\n       selectElement.selectedItem = menuItemNode;\n@@ -64,8 +76,32 @@ function onLoad() {\n  */\n function setDetails() {\n   let index = parseInt(document.getElementById(\"nicknames\").value);\n-  let details = dialogParams.GetString(index + itemCount + 3);\n-  document.getElementById(\"details\").value = details;\n+  let cert = certArray.queryElementAt(index, Ci.nsIX509Cert);\n+\n+  let detailLines = [\n+    bundle.getFormattedString(\"clientAuthIssuedTo\", [cert.subjectName]),\n+    bundle.getFormattedString(\"clientAuthSerial\", [cert.serialNumber]),\n+    bundle.getFormattedString(\"clientAuthValidityPeriod\",\n+                              [cert.validity.notBeforeLocalTime,\n+                               cert.validity.notAfterLocalTime]),\n+  ];\n+  let keyUsages = cert.keyUsages;\n+  if (keyUsages) {\n+    detailLines.push(bundle.getFormattedString(\"clientAuthKeyUsages\",\n+                                               [keyUsages]));\n+  }\n+  let emailAddresses = cert.getEmailAddresses({});\n+  if (emailAddresses.length > 0) {\n+    let joinedAddresses = emailAddresses.join(\", \");\n+    detailLines.push(bundle.getFormattedString(\"clientAuthEmailAddresses\",\n+                                               [joinedAddresses]));\n+  }\n+  detailLines.push(bundle.getFormattedString(\"clientAuthIssuedBy\",\n+                                             [cert.issuerName]));\n+  detailLines.push(bundle.getFormattedString(\"clientAuthStoredOn\",\n+                                             [cert.tokenName]));\n+\n+  document.getElementById(\"details\").value = detailLines.join(\"\\n\");\n }\n \n function onCertSelected() {"},{"sha":"906edb24833d710b5408d3d62b0501e33e77e779","filename":"security/manager/ssl/nsIClientAuthDialogs.idl","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/mozilla/gecko-dev/blob/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/ssl/nsIClientAuthDialogs.idl","raw_url":"https://github.com/mozilla/gecko-dev/raw/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/ssl/nsIClientAuthDialogs.idl","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/nsIClientAuthDialogs.idl?ref=577a05865b2d47271c9b8dd164773e9dff62355a","patch":"@@ -4,6 +4,7 @@\n \n #include \"nsISupports.idl\"\n \n+interface nsIArray;\n interface nsIInterfaceRequestor;\n \n /**\n@@ -20,15 +21,16 @@ interface nsIClientAuthDialogs : nsISupports\n    * @param cnAndPort Common Name of the server cert and the port of the server.\n    * @param organization Organization field of the server cert.\n    * @param issuerOrg Organization field of the issuer cert of the server cert.\n+   * @param certList List of certificates the user can choose from.\n+   * @param selectedIndex Index of the cert in |certList| that the user chose.\n+   *                      Ignored if the return value is false.\n    * @return true if a certificate was chosen. false if the user canceled.\n    */\n   boolean chooseCertificate(in nsIInterfaceRequestor ctx,\n                             in AString cnAndPort,\n                             in AString organization,\n                             in AString issuerOrg,\n-                            [array, size_is(count)] in wstring certNickList,\n-                            [array, size_is(count)] in wstring certDetailsList,\n-                            in unsigned long count,\n+                            in nsIArray certList,\n                             out unsigned long selectedIndex);\n };\n "},{"sha":"e58264c5ec615697e166ea1950869eeac74587d9","filename":"security/manager/ssl/nsNSSIOLayer.cpp","status":"modified","additions":17,"deletions":65,"changes":82,"blob_url":"https://github.com/mozilla/gecko-dev/blob/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/ssl/nsNSSIOLayer.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/577a05865b2d47271c9b8dd164773e9dff62355a/security/manager/ssl/nsNSSIOLayer.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/nsNSSIOLayer.cpp?ref=577a05865b2d47271c9b8dd164773e9dff62355a","patch":"@@ -21,6 +21,7 @@\n #include \"mozilla/Move.h\"\n #include \"mozilla/Preferences.h\"\n #include \"mozilla/Telemetry.h\"\n+#include \"nsArrayUtils.h\"\n #include \"nsCharSeparatedTokenizer.h\"\n #include \"nsClientAuthRemember.h\"\n #include \"nsContentUtils.h\"\n@@ -2099,8 +2100,6 @@ ClientAuthDataRunnable::RunOnTargetThread()\n   char** caNameStrings;\n   UniqueCERTCertificate cert;\n   UniqueSECKEYPrivateKey privKey;\n-  UniqueCERTCertNicknames nicknames;\n-  int32_t NumberOfCerts = 0;\n   void* wincx = mSocketInfo;\n   nsresult rv;\n \n@@ -2247,8 +2246,6 @@ ClientAuthDataRunnable::RunOnTargetThread()\n     if (!hasRemembered) {\n       // user selects a cert to present\n       nsCOMPtr<nsIClientAuthDialogs> dialogs;\n-      char16_t** certNicknameList = nullptr;\n-      char16_t** certDetailsList = nullptr;\n \n       // find all user certs that are for SSL\n       // note that we are allowing expired certs in this list\n@@ -2275,21 +2272,6 @@ ClientAuthDataRunnable::RunOnTargetThread()\n         goto loser;\n       }\n \n-      // filter it further for hostname restriction\n-      for (CERTCertListNode* node = CERT_LIST_HEAD(certList.get());\n-           !CERT_LIST_END(node, certList.get());\n-           node = CERT_LIST_NEXT(node)) {\n-        ++NumberOfCerts;\n-      }\n-\n-      nicknames.reset(getNSSCertNicknamesFromCertList(certList));\n-\n-      if (!nicknames) {\n-        goto loser;\n-      }\n-\n-      NS_ASSERTION(nicknames->numnicknames == NumberOfCerts, \"nicknames->numnicknames != NumberOfCerts\");\n-\n       // Get CN and O of the subject and O of the issuer\n       UniquePORTString ccn(CERT_GetCommonName(&mServerCert->subject));\n       NS_ConvertUTF8toUTF16 cn(ccn.get());\n@@ -2316,42 +2298,23 @@ ClientAuthDataRunnable::RunOnTargetThread()\n       UniquePORTString cissuer(CERT_GetOrgName(&mServerCert->issuer));\n       NS_ConvertUTF8toUTF16 issuer(cissuer.get());\n \n-      certNicknameList =\n-        (char16_t**)moz_xmalloc(sizeof(char16_t*)* nicknames->numnicknames);\n-      if (!certNicknameList)\n-        goto loser;\n-      certDetailsList =\n-        (char16_t**)moz_xmalloc(sizeof(char16_t*)* nicknames->numnicknames);\n-      if (!certDetailsList) {\n-        free(certNicknameList);\n+      nsCOMPtr<nsIMutableArray> certArray = nsArrayBase::Create();\n+      if (!certArray) {\n         goto loser;\n       }\n \n-      int32_t CertsToUse = 0;\n       for (CERTCertListNode* node = CERT_LIST_HEAD(certList);\n-           !CERT_LIST_END(node, certList) && CertsToUse < nicknames->numnicknames;\n+           !CERT_LIST_END(node, certList);\n            node = CERT_LIST_NEXT(node)) {\n-        RefPtr<nsNSSCertificate> tempCert(nsNSSCertificate::Create(node->cert));\n-\n-        if (!tempCert)\n-          continue;\n-\n-        NS_ConvertUTF8toUTF16 i_nickname(nicknames->nicknames[CertsToUse]);\n-        nsAutoString nickWithSerial, details;\n-\n-        if (NS_FAILED(tempCert->FormatUIStrings(i_nickname, nickWithSerial, details)))\n-          continue;\n-\n-        certNicknameList[CertsToUse] = ToNewUnicode(nickWithSerial);\n-        if (!certNicknameList[CertsToUse])\n-          continue;\n-        certDetailsList[CertsToUse] = ToNewUnicode(details);\n-        if (!certDetailsList[CertsToUse]) {\n-          free(certNicknameList[CertsToUse]);\n-          continue;\n+        nsCOMPtr<nsIX509Cert> tempCert = nsNSSCertificate::Create(node->cert);\n+        if (!tempCert) {\n+          goto loser;\n         }\n \n-        ++CertsToUse;\n+        rv = certArray->AppendElement(tempCert, false);\n+        if (NS_FAILED(rv)) {\n+          goto loser;\n+        }\n       }\n \n       // Throw up the client auth dialog and get back the index of the selected cert\n@@ -2360,21 +2323,13 @@ ClientAuthDataRunnable::RunOnTargetThread()\n                          NS_CLIENTAUTHDIALOGS_CONTRACTID);\n \n       if (NS_FAILED(rv)) {\n-        NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(CertsToUse, certNicknameList);\n-        NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(CertsToUse, certDetailsList);\n         goto loser;\n       }\n \n       uint32_t selectedIndex = 0;\n       bool certChosen = false;\n       rv = dialogs->ChooseCertificate(mSocketInfo, cn_host_port, org, issuer,\n-                                      (const char16_t**)certNicknameList,\n-                                      (const char16_t**)certDetailsList,\n-                                      CertsToUse, &selectedIndex, &certChosen);\n-\n-      NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(CertsToUse, certNicknameList);\n-      NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(CertsToUse, certDetailsList);\n-\n+                                      certArray, &selectedIndex, &certChosen);\n       if (NS_FAILED(rv)) {\n         goto loser;\n       }\n@@ -2384,15 +2339,12 @@ ClientAuthDataRunnable::RunOnTargetThread()\n       mSocketInfo->GetRememberClientAuthCertificate(&wantRemember);\n \n       if (certChosen) {\n-        uint32_t i = 0;\n-        for (CERTCertListNode* node = CERT_LIST_HEAD(certList);\n-             !CERT_LIST_END(node, certList);\n-             ++i, node = CERT_LIST_NEXT(node)) {\n-          if (i == selectedIndex) {\n-            cert.reset(CERT_DupCertificate(node->cert));\n-            break;\n-          }\n+        nsCOMPtr<nsIX509Cert> selectedCert = do_QueryElementAt(certArray,\n+                                                               selectedIndex);\n+        if (!selectedCert) {\n+          goto loser;\n         }\n+        cert.reset(selectedCert->GetCert());\n       }\n \n       if (cars && wantRemember) {"}]},"blames":["0aeaa1ff","16ef8080","5df0ded5","313db6b5","7a1af34b","313db6b5","e8893667","313db6b5","e090e50d","167cbfff","9f403a8b","c7fa1cee","d0ad5a7d","313db6b5","f2b62f1f","3d486c9e","c7fa1cee","31db9b54","313db6b5","372fe1a5","b3663390","b883b253","7e9fa43e","efe5b47e","6d1ce233","e05e655f","188876d1","ce8794da","fc68a083","313db6b5","4113b4b4","0e6f3a65","d4d47484","c7fa1cee","3d486c9e","5f9db168","3a1a52d2","8d30b979","1b721304","d007c347","d0ad5a7d","92064e6d","1fdcea77","e006a137","e0bfa38e"]}