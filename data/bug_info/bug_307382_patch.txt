Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /home/bzbarsky/mozilla/cvs-mirror/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.272
diff -u -p -d -1 -2 -r1.272 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	25 Aug 2005 11:51:42 -0000	1.272
+++ caps/src/nsScriptSecurityManager.cpp	9 Sep 2005 04:30:25 -0000
@@ -1302,61 +1302,53 @@ nsScriptSecurityManager::CheckLoadURIWit
         { "gopher",          AllowProtocol  },
         { "datetime",        DenyProtocol   },
         { "finger",          AllowProtocol  },
         { "res",             DenyProtocol   },
         { "x-jsd",           ChromeProtocol }
     };
 
     NS_NAMED_LITERAL_STRING(errorTag, "CheckLoadURIError");
     for (unsigned i=0; i < sizeof(protocolList)/sizeof(protocolList[0]); i++)
     {
         if (targetScheme.LowerCaseEqualsASCII(protocolList[i].name))
         {
-            PRBool doCheck = PR_FALSE;
             switch (protocolList[i].action)
             {
             case AllowProtocol:
                 // everyone can access these schemes.
                 return NS_OK;
             case PrefControlled:
-                // Allow access if pref is false
                 {
-                    mSecurityPref->SecurityGetBoolPref("security.checkloaduri",
-                                                       &doCheck);
-                    if (doCheck)
-                    {
-                        // resource: and chrome: are equivalent, securitywise
-                        if (sourceScheme.EqualsLiteral("chrome") ||
-                            sourceScheme.EqualsLiteral("resource"))
-                            return NS_OK;
-
-                        // Now check capability policies
-                        static const char loadURIPrefGroup[] = "checkloaduri";
+                    // resource: and chrome: are equivalent, securitywise
+                    if (sourceScheme.EqualsLiteral("chrome") ||
+                        sourceScheme.EqualsLiteral("resource"))
+                        return NS_OK;
 
-                        SecurityLevel secLevel;
-                        rv = LookupPolicy(aPrincipal,
-                                          (char*)loadURIPrefGroup,
-                                          sEnabledID,
-                                          nsIXPCSecurityManager::ACCESS_GET_PROPERTY, 
-                                          nsnull, &secLevel);
-                        if (NS_SUCCEEDED(rv) && secLevel.level == SCRIPT_SECURITY_ALL_ACCESS)
-                        {
-                            // OK for this site!
-                            return NS_OK;
-                        }
+                    // Now check capability policies
+                    static const char loadURIPrefGroup[] = "checkloaduri";
 
-                        ReportError(nsnull, errorTag, sourceURI, aTargetURI);
-                        return NS_ERROR_DOM_BAD_URI;
+                    SecurityLevel secLevel;
+                    rv = LookupPolicy(aPrincipal,
+                                      (char*)loadURIPrefGroup,
+                                      sEnabledID,
+                                      nsIXPCSecurityManager::ACCESS_GET_PROPERTY, 
+                                      nsnull, &secLevel);
+                    if (NS_SUCCEEDED(rv) && secLevel.level == SCRIPT_SECURITY_ALL_ACCESS)
+                    {
+                        // OK for this site!
+                        return NS_OK;
                     }
-                    return NS_OK;
+
+                    ReportError(nsnull, errorTag, sourceURI, aTargetURI);
+                    return NS_ERROR_DOM_BAD_URI;
                 }
             case ChromeProtocol:
                 if (aFlags & nsIScriptSecurityManager::ALLOW_CHROME)
                     return NS_OK;
                 // resource: and chrome: are equivalent, securitywise
                 if (sourceScheme.EqualsLiteral("chrome") ||
                     sourceScheme.EqualsLiteral("resource"))
                     return NS_OK;
                 ReportError(nsnull, errorTag, sourceURI, aTargetURI);
                 return NS_ERROR_DOM_BAD_URI;
             case DenyProtocol:
                 // Deny access
