diff -r af228d62c032 content/base/src/CSPUtils.jsm
--- a/content/base/src/CSPUtils.jsm	Tue Sep 29 18:14:19 2009 -0700
+++ b/content/base/src/CSPUtils.jsm	Thu Oct 15 14:31:53 2009 -0700
@@ -322,16 +322,18 @@ CSPRep.prototype = {
    * Determines if this policy accepts a URI.
    * @param aContext
    *        one of the SRC_DIRECTIVES defined above
    * @returns 
    *        true if the policy permits the URI in given context.
    */
   permits:
   function csp_permits(aURI, aContext) {
+    if(!aURI) return false;
+
     // GLOBALLY ALLOW "about:" SCHEME
     if(aURI instanceof String && aURI.substring(0,6) == "about:")
       return true;
     if(aURI instanceof Components.interfaces.nsIURI && aURI.scheme == "about")
       return true;
 
     //make sure the context is valid
     for(var i in CSPRep.SRC_DIRECTIVES) {
@@ -752,16 +754,17 @@ CSPSource.fromURI = function(aURI, self,
  *        string or CSPSource representing the "self" source
  * @param enforceSelfChecks (optional)
  *        if present, and "true", will check to be sure "self" has the
  *        appropriate values to inherit when they are omitted from aURI.
  * @returns
  *        an instance of CSPSource 
  */
 CSPSource.fromString = function(aStr, self, enforceSelfChecks) {
+  if(!aStr) return null;
 
   if(!(typeof aStr === 'string')) {
     CSPError("Provided argument is not a string");
     return null;
   }
 
   if(!self && enforceSelfChecks) {
     CSPError("Can't use 'self' if self data is not provided");
@@ -1127,16 +1130,17 @@ function CSPHost() {
  * Factory to create a new CSPHost, parsed from a string.
  *
  * @param aStr
  *        string rep of a CSP Host 
  * @returns
  *        an instance of CSPHost
  */
 CSPHost.fromString = function(aStr) {
+  if(!aStr) return null;
 
   // host string must be LDH with dots and stars.
   var invalidChar = aStr.match(/[^a-zA-Z0-9\-\.\*]/);
   if(invalidChar) {
     CSPdebug("Invalid character '" + invalidChar + "' in host " + aStr);
     return null;
   }
 
@@ -1196,16 +1200,18 @@ CSPHost.prototype = {
    * Returns true if this host accepts the provided host (or the other way
    * around).
    * @param aHost
    *        the FQDN in question (CSPHost or String)
    * @returns
    */
   permits:
   function(aHost) {
+    if(!aHost) return false;
+
     if(!(aHost instanceof CSPHost)) {
       // -- compare CSPHost to String
       return this.permits(CSPHost.fromString(aHost));
     }
     var thislen = this._segments.length;
     var thatlen = aHost._segments.length;
 
     // don't accept a less specific host: 
