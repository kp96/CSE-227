{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basfa3020c\""},"diff":[{"chunks":[{"content":"@@ -74,6 +74,8 @@ static const  PRInt32 kIndentIncrementHeaders = 2;  /* If mHeaderStrategy = 1,","changes":[{"type":"normal","normal":true,"ln1":74,"ln2":74,"content":" static const  PRInt32 kIndentSizeList = (kTabSize > kOLNumberWidth+3) ? kTabSize: kOLNumberWidth+3;"},{"type":"normal","normal":true,"ln1":75,"ln2":75,"content":"                                // Indention of non-first lines of ul and ol"},{"type":"normal","normal":true,"ln1":76,"ln2":76,"content":" static const  PRInt32 kIndentSizeDD = kTabSize;  // Indention of <dd>"},{"type":"add","add":true,"ln":77,"content":"+static const  PRUnichar  kNBSP = 160;"},{"type":"add","add":true,"ln":78,"content":"+static const  PRUnichar kSPACE = ' ';"},{"type":"normal","normal":true,"ln1":77,"ln2":79,"content":" "},{"type":"normal","normal":true,"ln1":78,"ln2":80,"content":" static PRInt32 HeaderLevel(eHTMLTags aTag);"},{"type":"normal","normal":true,"ln1":79,"ln2":81,"content":" static PRInt32 GetUnicharWidth(PRUnichar ucs);"}],"oldStart":74,"oldLines":6,"newStart":74,"newLines":8},{"content":"@@ -1243,9 +1245,7 @@ nsPlainTextSerializer::Output(nsString& aString)","changes":[{"type":"normal","normal":true,"ln1":1243,"ln2":1245,"content":"   if (!(mFlags & nsIDocumentEncoder::OutputPersistNBSP)) {"},{"type":"normal","normal":true,"ln1":1244,"ln2":1246,"content":"     // First, replace all nbsp characters with spaces,"},{"type":"normal","normal":true,"ln1":1245,"ln2":1247,"content":"     // which the unicode encoder won't do for us."},{"type":"del","del":true,"ln":1246,"content":"-    static PRUnichar nbsp = 160;"},{"type":"del","del":true,"ln":1247,"content":"-    static PRUnichar space = ' ';"},{"type":"del","del":true,"ln":1248,"content":"-    aString.ReplaceChar(nbsp, space);"},{"type":"add","add":true,"ln":1248,"content":"+    aString.ReplaceChar(kNBSP, kSPACE);"},{"type":"normal","normal":true,"ln1":1249,"ln2":1249,"content":"   }"},{"type":"normal","normal":true,"ln1":1250,"ln2":1250,"content":"   mOutputString->Append(aString);"},{"type":"normal","normal":true,"ln1":1251,"ln2":1251,"content":" }"}],"oldStart":1243,"oldLines":9,"newStart":1245,"newLines":7},{"content":"@@ -1277,6 +1277,7 @@ nsPlainTextSerializer::AddToLine(const PRUnichar * aLineFragment,","changes":[{"type":"normal","normal":true,"ln1":1277,"ln2":1277,"content":"          ("},{"type":"normal","normal":true,"ln1":1278,"ln2":1278,"content":"           '>' == aLineFragment[0] ||"},{"type":"normal","normal":true,"ln1":1279,"ln2":1279,"content":"           ' ' == aLineFragment[0] ||"},{"type":"add","add":true,"ln":1280,"content":"+        kNBSP == aLineFragment[0] ||  // bug 215068"},{"type":"normal","normal":true,"ln1":1280,"ln2":1281,"content":"           !nsCRT::strncmp(aLineFragment, NS_LITERAL_STRING(\"From \").get(), 5)"},{"type":"normal","normal":true,"ln1":1281,"ln2":1282,"content":"           )"},{"type":"normal","normal":true,"ln1":1282,"ln2":1283,"content":"          && mCiteQuoteLevel == 0  // We space-stuff quoted lines anyway"}],"oldStart":1277,"oldLines":6,"newStart":1277,"newLines":7}],"deletions":3,"additions":4,"from":"content/base/src/nsPlainTextSerializer.cpp","to":"content/base/src/nsPlainTextSerializer.cpp","index":["ef31465..577b453","100644"]}]}