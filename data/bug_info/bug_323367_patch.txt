Index: js/src/xpconnect/src/XPCNativeWrapper.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/XPCNativeWrapper.cpp,v
retrieving revision 1.38
diff -p -U10 -r1.38 XPCNativeWrapper.cpp
--- js/src/xpconnect/src/XPCNativeWrapper.cpp	10 Jan 2006 21:43:17 -0000	1.38
+++ js/src/xpconnect/src/XPCNativeWrapper.cpp	6 Feb 2006 23:25:28 -0000
@@ -1226,77 +1226,103 @@ XPC_NW_toString(JSContext *cx, JSObject 
     }
   }
 
   // Check whether toString was overridden in any object along
   // the wrapped native's object's prototype chain.
   XPCJSRuntime *rt = nsXPConnect::GetRuntime();
   if (!rt)
     return JS_FALSE;
 
   jsid id = rt->GetStringID(XPCJSRuntime::IDX_TO_STRING);
+  jsval idAsVal;
+  if (!::JS_IdToValue(cx, id, &idAsVal)) {
+    return JS_FALSE;
+  }
 
   XPCWrappedNative *wrappedNative =
     XPCNativeWrapper::GetWrappedNative(cx, obj);
 
   if (!wrappedNative) {
     // toString() called on XPCNativeWrapper.prototype
     NS_NAMED_LITERAL_STRING(protoString, "[object XPCNativeWrapper]");
     JSString *str =
       ::JS_NewUCStringCopyN(cx, NS_REINTERPRET_CAST(const jschar*,
                                                     protoString.get()),
                             protoString.Length());
     NS_ENSURE_TRUE(str, JS_FALSE);
     *rval = STRING_TO_JSVAL(str);
     return JS_TRUE;
   }
 
+  // Someone is trying to call toString on our wrapped object.
   JSObject *wn_obj = wrappedNative->GetFlatJSObject();
-  jsval toStringVal;
-
-  // Check whether toString has been overridden from its XPCWrappedNative
-  // default native method.
-  if (!OBJ_GET_PROPERTY(cx, wn_obj, id, &toStringVal)) {
-    return JS_FALSE;
+  XPCCallContext ccx(JS_CALLER, cx, wn_obj, nsnull, idAsVal);
+  if (!ccx.IsValid()) {
+    // Shouldn't really happen.
+    return ThrowException(NS_ERROR_FAILURE, cx);
   }
 
-  JSBool overridden = JS_TypeOfValue(cx, toStringVal) != JSTYPE_FUNCTION;
-  if (!overridden) {
-    JSObject *toStringFunObj = JSVAL_TO_OBJECT(toStringVal);
-    JSFunction *toStringFun = (JSFunction*) ::JS_GetPrivate(cx, toStringFunObj);
+  XPCNativeInterface *iface = ccx.GetInterface();
+  XPCNativeMember *member = ccx.GetMember();
+  JSBool overridden = JS_FALSE;
+  jsval toStringVal;
+
+  // First, try to see if the object declares a toString in its IDL. If it does,
+  // then we need to defer to that.
+  if (iface && member) {
+    if (!member->GetValue(ccx, iface, &toStringVal)) {
+      return JS_FALSE;
+    }
 
-    overridden =
-      ::JS_GetFunctionNative(cx, toStringFun) != XPC_WN_Shared_ToString;
+    overridden = member->IsMethod();
   }
 
-  JSString* str;
+  JSString* str = NULL;;
   if (overridden) {
-    // Something overrides XPCWrappedNative.prototype.toString, we
-    // should defer to it.
+    // Defer to the IDL-declared toString.
 
-    str = ::JS_ValueToString(cx, OBJECT_TO_JSVAL(wn_obj));
-  } else {
+    JSObject *funobj = xpc_CloneJSFunction(ccx, JSVAL_TO_OBJECT(toStringVal),
+                                           wn_obj);
+    if (!funobj) {
+      return JS_FALSE;
+    }
+
+    jsval v;
+    if (!::JS_CallFunctionValue(cx, wn_obj, OBJECT_TO_JSVAL(funobj), argc, argv,
+                                &v)) {
+      return JS_FALSE;
+    }
+
+    if (JSVAL_IS_STRING(v)) {
+      str = JSVAL_TO_STRING(v);
+    }
+  }
+
+  if (!str) {
     // Ok, we do no damage, and add value, by returning our own idea
     // of what toString() should be.
+    // Note: We can't just call JS_ValueToString on the wrapped object. Instead,
+    // we need to call the wrapper's ToString in order to safely convert our
+    // object to a string.
 
     nsAutoString resultString;
     resultString.AppendLiteral("[object XPCNativeWrapper");
 
     if (wrappedNative) {
-      JSString *str = ::JS_ValueToString(cx, OBJECT_TO_JSVAL(wn_obj));
-      if (!str) {
+      char *wrapperStr = wrappedNative->ToString(ccx);
+      if (!wrapperStr) {
         return JS_FALSE;
       }
 
       resultString.Append(' ');
-      resultString.Append(NS_REINTERPRET_CAST(PRUnichar *,
-                                              ::JS_GetStringChars(str)),
-                          ::JS_GetStringLength(str));
+      resultString.AppendASCII(wrapperStr);
+      JS_smprintf_free(wrapperStr);
     }
 
     resultString.Append(']');
 
     str = ::JS_NewUCStringCopyN(cx, NS_REINTERPRET_CAST(const jschar *,
                                                         resultString.get()),
                                 resultString.Length());
   }
 
   NS_ENSURE_TRUE(str, JS_FALSE);
