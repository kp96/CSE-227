{"bug_id":214050,"commitHash":"b6f6ad7","commit_info":{"sha":"b6f6ad74ba27a6562017021192abd5ad42cc2591","commit":{"author":{"name":"caillon%returnzero.com","email":"caillon%returnzero.com","date":"2003-07-29T05:28:00Z"},"committer":{"name":"caillon%returnzero.com","email":"caillon%returnzero.com","date":"2003-07-29T05:28:00Z"},"message":"Bug 214050\nStart to localize some of the more common user-visible error messages in caps.\nr+sr=bzbarsky@mit.edu","tree":{"sha":"dcf47e21fc90c23f889aec957d44a14fd223c209","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/dcf47e21fc90c23f889aec957d44a14fd223c209"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/b6f6ad74ba27a6562017021192abd5ad42cc2591","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/b6f6ad74ba27a6562017021192abd5ad42cc2591","html_url":"https://github.com/mozilla/gecko-dev/commit/b6f6ad74ba27a6562017021192abd5ad42cc2591","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/b6f6ad74ba27a6562017021192abd5ad42cc2591/comments","author":null,"committer":null,"parents":[{"sha":"ae6d3a310bd69a268b9bf6644f9a7223f48f6773","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/ae6d3a310bd69a268b9bf6644f9a7223f48f6773","html_url":"https://github.com/mozilla/gecko-dev/commit/ae6d3a310bd69a268b9bf6644f9a7223f48f6773"}],"stats":{"total":183,"additions":113,"deletions":70},"files":[{"sha":"cc91219ef27a7a666156ba216f71aa0cc60a1125","filename":"caps/include/nsScriptSecurityManager.h","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/mozilla/gecko-dev/blob/b6f6ad74ba27a6562017021192abd5ad42cc2591/caps/include/nsScriptSecurityManager.h","raw_url":"https://github.com/mozilla/gecko-dev/raw/b6f6ad74ba27a6562017021192abd5ad42cc2591/caps/include/nsScriptSecurityManager.h","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/caps/include/nsScriptSecurityManager.h?ref=b6f6ad74ba27a6562017021192abd5ad42cc2591","patch":"@@ -61,6 +61,7 @@ class nsString;\n class nsIClassInfo;\n class nsIIOService;\n class nsIXPConnect;\n+class nsIStringBundle;\n class nsSystemPrincipal;\n struct ClassPolicy;\n \n@@ -410,7 +411,8 @@ class nsScriptSecurityManager : public nsIScriptSecurityManager,\n                          JSStackFrame** frameResult);\n \n     static PRBool\n-    CheckConfirmDialog(JSContext* cx, nsIPrincipal* aPrincipal, PRBool *checkValue);\n+    CheckConfirmDialog(JSContext* cx, nsIPrincipal* aPrincipal,\n+                       const char* aCapability, PRBool *checkValue);\n \n     nsresult\n     SavePrincipal(nsIPrincipal* aToSave);\n@@ -478,8 +480,9 @@ class nsScriptSecurityManager : public nsIScriptSecurityManager,\n     static const char sXPCDefaultGrantAllName[];\n #endif\n \n-    static nsIIOService* sIOService;\n-    static nsIXPConnect* sXPConnect;\n+    static nsIIOService    *sIOService;\n+    static nsIXPConnect    *sXPConnect;\n+    static nsIStringBundle *sStrBundle;\n };\n \n #endif // nsScriptSecurityManager_h__"},{"sha":"5edd0e14112902cf4dc7f8b4c436bbff3aed273c","filename":"caps/src/caps.properties","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/mozilla/gecko-dev/blob/b6f6ad74ba27a6562017021192abd5ad42cc2591/caps/src/caps.properties","raw_url":"https://github.com/mozilla/gecko-dev/raw/b6f6ad74ba27a6562017021192abd5ad42cc2591/caps/src/caps.properties","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/caps/src/caps.properties?ref=b6f6ad74ba27a6562017021192abd5ad42cc2591","patch":"@@ -17,12 +17,17 @@\n #\n # Contributor(s):\n # Mitch Stoltz <mstoltz@netscape.com>\n+# Christopher A. Aillon <christopher@aillon.com>\n #\n Yes = Yes\n No = No\n Titleline = Internet Security\n CheckMessage = Remember this decision\n-EnableCapabilityQuery = A script from \"%1$s\" has requested enhanced privileges. You should grant these privileges only if you are comfortable downloading and executing a program from this source. Do you wish to allow these privileges?\n+EnableCapabilityQuery = A script from \"%S\" has requested %S privileges. You should grant these privileges only if you are comfortable downloading and executing a program from this source. Do you wish to allow these privileges?\n+EnableCapabilityDenied = A script from \"%S\" was denied %S privileges.\n CheckLoadURIError = Security Error: Content at %S may not load or link to %S.\n CheckSameOriginError = Security Error: Content at %S may not load data from %S.\n-\n+GetPropertyDenied = Permission denied to get property %S.%S\n+SetPropertyDenied = Permission denied to set property %S.%S\n+CallMethodDenied = Permission denied to call method %S.%S\n+CreateWrapperDenied = Permission denied to create wrapper for object of class %S"},{"sha":"30892e4f64b08733d86d76075ddc22188240ed86","filename":"caps/src/nsScriptSecurityManager.cpp","status":"modified","additions":100,"deletions":65,"changes":165,"blob_url":"https://github.com/mozilla/gecko-dev/blob/b6f6ad74ba27a6562017021192abd5ad42cc2591/caps/src/nsScriptSecurityManager.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/b6f6ad74ba27a6562017021192abd5ad42cc2591/caps/src/nsScriptSecurityManager.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/caps/src/nsScriptSecurityManager.cpp?ref=b6f6ad74ba27a6562017021192abd5ad42cc2591","patch":"@@ -82,8 +82,9 @@\n \n static NS_DEFINE_CID(kZipReaderCID, NS_ZIPREADER_CID);\n \n-nsIIOService* nsScriptSecurityManager::sIOService = nsnull;\n-nsIXPConnect* nsScriptSecurityManager::sXPConnect = nsnull;\n+nsIIOService    *nsScriptSecurityManager::sIOService = nsnull;\n+nsIXPConnect    *nsScriptSecurityManager::sXPConnect = nsnull;\n+nsIStringBundle *nsScriptSecurityManager::sStrBundle = nsnull;\n \n ///////////////////////////\n // Convenience Functions //\n@@ -756,24 +757,37 @@ nsScriptSecurityManager::CheckPropertyAccessImpl(PRUint32 aAction,\n \n     if (NS_FAILED(rv)) //-- Security tests failed, access is denied, report error\n     {\n-        nsCAutoString errorMsg(\"Permission denied to \");\n+        nsAutoString stringName;\n         switch(aAction)\n         {\n         case nsIXPCSecurityManager::ACCESS_GET_PROPERTY:\n-            errorMsg += \"get property \";\n+            stringName.Assign(NS_LITERAL_STRING(\"GetPropertyDenied\"));\n             break;\n         case nsIXPCSecurityManager::ACCESS_SET_PROPERTY:\n-            errorMsg += \"set property \";\n+            stringName.Assign(NS_LITERAL_STRING(\"SetPropertyDenied\"));\n             break;\n         case nsIXPCSecurityManager::ACCESS_CALL_METHOD:\n-            errorMsg += \"call method \";\n+            stringName.Assign(NS_LITERAL_STRING(\"CallMethodDenied\"));\n         }\n-        errorMsg += classInfoData.GetName();\n-        errorMsg += '.';\n-        errorMsg.AppendWithConversion((PRUnichar*)JSValIDToString(cx, aProperty));\n \n+        NS_ConvertUTF8toUTF16 className(classInfoData.GetName());\n+        const PRUnichar *formatStrings[] =\n+        {\n+            className.get(),\n+            JSValIDToString(cx, aProperty)\n+        };\n+\n+        nsXPIDLString errorMsg;\n+        rv = sStrBundle->FormatStringFromName(stringName.get(),\n+                                              formatStrings,\n+                                              NS_ARRAY_LENGTH(formatStrings),\n+                                              getter_Copies(errorMsg));\n+        NS_ENSURE_SUCCESS(rv, rv);\n+ \n         JS_SetPendingException(cx,\n-                               STRING_TO_JSVAL(JS_NewStringCopyZ(cx, errorMsg.get())));\n+            STRING_TO_JSVAL(JS_NewUCStringCopyZ(cx,\n+                NS_REINTERPRET_CAST(const jschar*, errorMsg.get()))));\n+\n         if (sXPConnect)\n         {\n             nsCOMPtr<nsIXPCNativeCallContext> xpcCallContext;\n@@ -1272,24 +1286,13 @@ nsScriptSecurityManager::CheckLoadURI(nsIURI *aSourceURI, nsIURI *aTargetURI,\n     return NS_OK;\n }\n \n-#define PROPERTIES_URL \"chrome://communicator/locale/security/caps.properties\"\n-\n nsresult\n nsScriptSecurityManager::ReportError(JSContext* cx, const nsAString& messageTag,\n                                      nsIURI* aSource, nsIURI* aTarget)\n {\n     nsresult rv;\n     NS_ENSURE_TRUE(aSource && aTarget, NS_ERROR_NULL_POINTER);\n \n-    // First, create the error message text\n-    // create a bundle for the localization\n-    nsCOMPtr<nsIStringBundleService> bundleService(do_GetService(NS_STRINGBUNDLE_CONTRACTID, &rv));\n-    NS_ENSURE_SUCCESS(rv, rv);\n-\n-    nsCOMPtr<nsIStringBundle> bundle;\n-    rv = bundleService->CreateBundle(PROPERTIES_URL, getter_AddRefs(bundle));\n-    NS_ENSURE_SUCCESS(rv, rv);\n-\n     // Get the source URL spec\n     nsCAutoString sourceSpec;\n     rv = aSource->GetAsciiSpec(sourceSpec);\n@@ -1305,10 +1308,10 @@ nsScriptSecurityManager::ReportError(JSContext* cx, const nsAString& messageTag,\n     NS_ConvertASCIItoUCS2 ucsSourceSpec(sourceSpec);\n     NS_ConvertASCIItoUCS2 ucsTargetSpec(targetSpec);\n     const PRUnichar *formatStrings[] = { ucsSourceSpec.get(), ucsTargetSpec.get() };\n-    rv = bundle->FormatStringFromName(PromiseFlatString(messageTag).get(),\n-                                      formatStrings,\n-                                      2,\n-                                      getter_Copies(message));\n+    rv = sStrBundle->FormatStringFromName(PromiseFlatString(messageTag).get(),\n+                                          formatStrings,\n+                                          NS_ARRAY_LENGTH(formatStrings),\n+                                          getter_Copies(message));\n     NS_ENSURE_SUCCESS(rv, rv);\n \n     // If a JS context was passed in, set a JS exception.\n@@ -1997,7 +2000,7 @@ nsScriptSecurityManager::IsCapabilityEnabled(const char *capability,\n \n PRBool\n nsScriptSecurityManager::CheckConfirmDialog(JSContext* cx, nsIPrincipal* aPrincipal,\n-                                            PRBool *checkValue)\n+                                            const char* aCapability, PRBool *checkValue)\n {\n     nsresult rv;\n     *checkValue = PR_FALSE;\n@@ -2028,28 +2031,16 @@ nsScriptSecurityManager::CheckConfirmDialog(JSContext* cx, nsIPrincipal* aPrinci\n             return PR_FALSE;\n     }\n \n-    // create a bundle for the localization\n-    nsCOMPtr<nsIStringBundleService> bundleService(do_GetService(NS_STRINGBUNDLE_CONTRACTID, &rv));\n-    if (NS_FAILED(rv))\n-        return PR_FALSE;\n-\n-    nsCOMPtr<nsIStringBundle> bundle;\n-    rv = bundleService->CreateBundle(PROPERTIES_URL, getter_AddRefs(bundle));\n-    if (NS_FAILED(rv))\n-        return PR_FALSE;\n-\n     //-- Localize the dialog text\n-    nsXPIDLString query, check, title;\n-    rv = bundle->GetStringFromName(NS_LITERAL_STRING(\"EnableCapabilityQuery\").get(),\n-                                   getter_Copies(query));\n+    nsXPIDLString check;\n+    rv = sStrBundle->GetStringFromName(NS_LITERAL_STRING(\"CheckMessage\").get(),\n+                                       getter_Copies(check));\n     if (NS_FAILED(rv))\n         return PR_FALSE;\n-    rv = bundle->GetStringFromName(NS_LITERAL_STRING(\"CheckMessage\").get(),\n-                                   getter_Copies(check));\n-    if (NS_FAILED(rv))\n-        return PR_FALSE;\n-    rv = bundle->GetStringFromName(NS_LITERAL_STRING(\"Titleline\").get(),\n-                                   getter_Copies(title));\n+\n+    nsXPIDLString title;\n+    rv = sStrBundle->GetStringFromName(NS_LITERAL_STRING(\"Titleline\").get(),\n+                                       getter_Copies(title));\n     if (NS_FAILED(rv))\n         return PR_FALSE;\n \n@@ -2064,15 +2055,23 @@ nsScriptSecurityManager::CheckConfirmDialog(JSContext* cx, nsIPrincipal* aPrinci\n     if (NS_FAILED(rv))\n         return PR_FALSE;\n \n-    PRUnichar* message = nsTextFormatter::smprintf(query.get(), val.get());\n-    NS_ENSURE_TRUE(message, PR_FALSE);\n+    NS_ConvertUTF8toUTF16 location(val.get());\n+    NS_ConvertUTF8toUTF16 capability(aCapability);\n+    const PRUnichar *formatStrings[] = { location.get(), capability.get() };\n+\n+    nsXPIDLString message;\n+    rv = sStrBundle->FormatStringFromName(NS_LITERAL_STRING(\"EnableCapabilityQuery\").get(),\n+                                          formatStrings,\n+                                          NS_ARRAY_LENGTH(formatStrings),\n+                                          getter_Copies(message));\n+    if (NS_FAILED(rv))\n+        return PR_FALSE;\n \n     PRInt32 buttonPressed = 1; // If the user exits by clicking the close box, assume No (button 1)\n-    rv = prompter->ConfirmEx(title.get(), message,\n+    rv = prompter->ConfirmEx(title.get(), message.get(),\n                              (nsIPrompt::BUTTON_TITLE_YES * nsIPrompt::BUTTON_POS_0) +\n                              (nsIPrompt::BUTTON_TITLE_NO * nsIPrompt::BUTTON_POS_1),\n                              nsnull, nsnull, nsnull, check.get(), checkValue, &buttonPressed);\n-    nsTextFormatter::smprintf_free(message);\n \n     if (NS_FAILED(rv))\n         *checkValue = PR_FALSE;\n@@ -2090,7 +2089,7 @@ nsScriptSecurityManager::RequestCapability(nsIPrincipal* aPrincipal,\n         // Prompt user for permission to enable capability.\n         JSContext* cx = GetCurrentJSContext();\n         PRBool remember;\n-        if (CheckConfirmDialog(cx, aPrincipal, &remember))\n+        if (CheckConfirmDialog(cx, aPrincipal, capability, &remember))\n             *canEnable = nsIPrincipal::ENABLE_GRANTED;\n         else\n             *canEnable = nsIPrincipal::ENABLE_DENIED;\n@@ -2137,8 +2136,34 @@ nsScriptSecurityManager::EnableCapability(const char *capability)\n \n     if (canEnable != nsIPrincipal::ENABLE_GRANTED)\n     {\n-        static const char msg[] = \"enablePrivilege not granted\";\n-        JS_SetPendingException(cx, STRING_TO_JSVAL(JS_NewStringCopyZ(cx, msg)));\n+        nsXPIDLCString val;\n+        PRBool hasCert;\n+        nsresult rv;\n+        principal->GetHasCertificate(&hasCert);\n+        if (hasCert)\n+            rv = principal->GetCommonName(getter_Copies(val));\n+        else\n+            rv = principal->GetOrigin(getter_Copies(val));\n+\n+        if (NS_FAILED(rv))\n+            return rv;\n+\n+        NS_ConvertUTF8toUTF16 location(val.get());\n+        NS_ConvertUTF8toUTF16 cap(capability);\n+        const PRUnichar *formatStrings[] = { location.get(), cap.get() };\n+\n+        nsXPIDLString message;\n+        rv = sStrBundle->FormatStringFromName(NS_LITERAL_STRING(\"EnableCapabilityDenied\").get(),\n+                                              formatStrings,\n+                                              NS_ARRAY_LENGTH(formatStrings),\n+                                              getter_Copies(message));\n+        if (NS_FAILED(rv))\n+            return rv;\n+\n+        JS_SetPendingException(cx,\n+            STRING_TO_JSVAL(JS_NewUCStringCopyZ(cx,\n+                NS_REINTERPRET_CAST(const jschar*, message.get()))));\n+\n         return NS_ERROR_FAILURE; // XXX better error code?\n     }\n     if (NS_FAILED(principal->EnableCapability(capability, &annotation)))\n@@ -2261,7 +2286,8 @@ nsScriptSecurityManager::CanCreateWrapper(JSContext *cx,\n     nsCRT::free(iidStr);\n #endif\n // XXX Special case for nsIXPCException ?\n-    if (ClassInfoData(aClassInfo, nsnull).IsDOMClass())\n+    ClassInfoData objClassInfo = ClassInfoData(aClassInfo, nsnull);\n+    if (objClassInfo.IsDOMClass())\n     {\n #ifdef DEBUG_CAPS_CanCreateWrapper\n         printf(\"DOM class - GRANTED.\\n\");\n@@ -2282,19 +2308,21 @@ nsScriptSecurityManager::CanCreateWrapper(JSContext *cx,\n     if (NS_FAILED(rv))\n     {\n         //-- Access denied, report an error\n-        nsCAutoString errorMsg(\"Permission denied to create wrapper for object \");\n-        nsXPIDLCString className;\n-        if (aClassInfo)\n-        {\n-            aClassInfo->GetClassDescription(getter_Copies(className));\n-            if (className)\n-            {\n-                errorMsg += \"of class \";\n-                errorMsg += className;\n-            }\n-        }\n+\n+        NS_NAMED_LITERAL_STRING(strName, \"CreateWrapperDenied\");\n+        NS_ConvertUTF8toUTF16 className(objClassInfo.GetName());\n+        const PRUnichar* formatStrings[] = { className.get() };\n+        nsXPIDLString errorMsg;\n+        nsresult rv2 =\n+            sStrBundle->FormatStringFromName(strName.get(),\n+                                             formatStrings,\n+                                             NS_ARRAY_LENGTH(formatStrings),\n+                                             getter_Copies(errorMsg));\n+        NS_ENSURE_SUCCESS(rv2, rv2);\n+\n         JS_SetPendingException(cx,\n-                               STRING_TO_JSVAL(JS_NewStringCopyZ(cx, errorMsg.get())));\n+            STRING_TO_JSVAL(JS_NewUCStringCopyZ(cx,\n+                NS_REINTERPRET_CAST(const jschar*, errorMsg.get()))));\n \n #ifdef DEBUG_CAPS_CanCreateWrapper\n         printf(\"DENIED.\\n\");\n@@ -2573,6 +2601,12 @@ nsresult nsScriptSecurityManager::Init()\n     rv = CallGetService(nsIXPConnect::GetCID(), &sXPConnect);\n     NS_ENSURE_SUCCESS(rv, rv);\n \n+    nsCOMPtr<nsIStringBundleService> bundleService = do_GetService(NS_STRINGBUNDLE_CONTRACTID, &rv);\n+    NS_ENSURE_SUCCESS(rv, rv);\n+\n+    rv = bundleService->CreateBundle(\"chrome://communicator/locale/security/caps.properties\", &sStrBundle);\n+    NS_ENSURE_SUCCESS(rv, rv);\n+\n     //-- Register security check callback in the JS engine\n     //   Currently this is used to control access to function.caller\n     nsCOMPtr<nsIJSRuntimeService> runtimeService =\n@@ -2612,6 +2646,7 @@ nsScriptSecurityManager::Shutdown()\n \n     NS_IF_RELEASE(sIOService);\n     NS_IF_RELEASE(sXPConnect);\n+    NS_IF_RELEASE(sStrBundle);\n }\n \n nsScriptSecurityManager *"}]},"blames":["f7460d02","91b7c60b","49c0102c","4756b716","51950011","03fe9737","44d264d6","e5c170a0","2b4b436f5","6f5d99be4","2b4b436f5","9bb975256","91b7c60be","1b252b2e3","4756b7169","f7460d026","880f5907b","6f5d99be4","060e388a6","2d8e12375","eb23e7629","ee23501c4","ec9d253f5","dbd7fed5b","2b6e6516d","72ec34346","03fe97372","33594c68f","e0fc50a6d","24778bda7","44d264d6b","25276e6b9","1c574be03"]}