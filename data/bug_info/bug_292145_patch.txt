Index: mozilla/security/coreconf/rules.mk
===================================================================
RCS file: /cvsroot/mozilla/security/coreconf/rules.mk,v
retrieving revision 1.59
retrieving revision 1.62
diff -u -r1.59 -r1.62
--- mozilla/security/coreconf/rules.mk	22 Dec 2004 00:06:42 -0000	1.59
+++ mozilla/security/coreconf/rules.mk	15 Apr 2005 00:36:28 -0000	1.62
@@ -395,7 +395,7 @@
 # Translate source filenames to absolute paths. This is required for
 # debuggers under Windows & OS/2 to find source files automatically
 
-ifeq (,$(filter-out OS2%,$(OS_TARGET)))
+ifeq (,$(filter-out OS2 AIX,$(OS_TARGET)))
 NEED_ABSOLUTE_PATH := 1
 PWD := $(shell pwd)
 endif
Index: mozilla/security/nss/lib/certdb/certi.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/certdb/certi.h,v
retrieving revision 1.15
retrieving revision 1.16
diff -u -r1.15 -r1.16
--- mozilla/security/nss/lib/certdb/certi.h	25 Feb 2005 00:54:29 -0000	1.15
+++ mozilla/security/nss/lib/certdb/certi.h	17 Apr 2005 03:17:06 -0000	1.16
@@ -169,9 +169,9 @@
     PRBool refresh;        /* manual refresh from tokens has been forced */
     PRBool mustchoose;     /* trigger reselection algorithm, for case when
                               RAM CRL objects are dropped from the cache */
-    PRIntervalTime lastfetch; /* time a CRL token fetch was last performed */
-    PRIntervalTime lastcheck; /* time CRL token objects were last checked for
-                                 existence */
+    PRTime lastfetch;      /* time a CRL token fetch was last performed */
+    PRTime lastcheck;      /* time CRL token objects were last checked for
+                              existence */
 };
 
 /*  CRL issuer cache object
Index: mozilla/security/nss/lib/certdb/certt.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/certdb/certt.h,v
retrieving revision 1.29
retrieving revision 1.30
diff -u -r1.29 -r1.30
--- mozilla/security/nss/lib/certdb/certt.h	5 Mar 2005 08:03:03 -0000	1.29
+++ mozilla/security/nss/lib/certdb/certt.h	12 Apr 2005 02:24:15 -0000	1.30
@@ -843,6 +843,7 @@
 extern const SEC_ASN1Template CERT_RDNTemplate[];
 extern const SEC_ASN1Template CERT_SignedDataTemplate[];
 extern const SEC_ASN1Template CERT_CrlTemplate[];
+extern const SEC_ASN1Template CERT_SignedCrlTemplate[];
 
 /*
 ** XXX should the attribute stuff be centralized for all of ns/security?
@@ -863,6 +864,7 @@
 SEC_ASN1_CHOOSER_DECLARE(CERT_SignedDataTemplate)
 SEC_ASN1_CHOOSER_DECLARE(CERT_SubjectPublicKeyInfoTemplate)
 SEC_ASN1_CHOOSER_DECLARE(SEC_SignedCertificateTemplate)
+SEC_ASN1_CHOOSER_DECLARE(CERT_SignedCrlTemplate)
 SEC_ASN1_CHOOSER_DECLARE(CERT_TimeChoiceTemplate)
 
 SEC_END_PROTOS
Index: mozilla/security/nss/lib/certdb/crl.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/certdb/crl.c,v
retrieving revision 1.46
retrieving revision 1.49
diff -u -r1.46 -r1.49
--- mozilla/security/nss/lib/certdb/crl.c	3 Mar 2005 04:07:26 -0000	1.46
+++ mozilla/security/nss/lib/certdb/crl.c	17 Apr 2005 03:17:07 -0000	1.49
@@ -231,7 +231,7 @@
     { 0 }
 };
 
-static const SEC_ASN1Template cert_SignedCrlTemplate[] = {
+const SEC_ASN1Template CERT_SignedCrlTemplate[] = {
     { SEC_ASN1_SEQUENCE,
 	  0, NULL, sizeof(CERTSignedCrl) },
     { SEC_ASN1_SAVE,
@@ -264,7 +264,7 @@
 };
 
 const SEC_ASN1Template CERT_SetOfSignedCrlTemplate[] = {
-    { SEC_ASN1_SET_OF, 0, cert_SignedCrlTemplate },
+    { SEC_ASN1_SET_OF, 0, CERT_SignedCrlTemplate },
 };
 
 /* get CRL version */
@@ -462,7 +462,7 @@
     CERTSignedCrl *crl;
     SECStatus rv;
     OpaqueCRLFields* extended = NULL;
-    const SEC_ASN1Template* crlTemplate = cert_SignedCrlTemplate;
+    const SEC_ASN1Template* crlTemplate = CERT_SignedCrlTemplate;
 
     if (!derSignedCrl ||
         ( (options & CRL_DECODE_ADOPT_HEAP_DER) && /* adopting DER requires
@@ -827,10 +827,13 @@
 	    if (crl->slot) {
 		PK11_FreeSlot(crl->slot);
 	    }
-            if (PR_TRUE == GetOpaqueCRLFields(crl)->heapDER) {
+            if (GetOpaqueCRLFields(crl) &&
+                PR_TRUE == GetOpaqueCRLFields(crl)->heapDER) {
                 SECITEM_FreeItem(crl->derCrl, PR_TRUE);
             }
-	    PORT_FreeArena(crl->arena, PR_FALSE);
+            if (crl->arena) {
+                PORT_FreeArena(crl->arena, PR_FALSE);
+            }
 	}
         return SECSuccess;
     } else {
@@ -879,6 +882,7 @@
 */
 SEC_ASN1_CHOOSER_IMPLEMENT(CERT_IssuerAndSNTemplate)
 SEC_ASN1_CHOOSER_IMPLEMENT(CERT_CrlTemplate)
+SEC_ASN1_CHOOSER_IMPLEMENT(CERT_SignedCrlTemplate)
 SEC_ASN1_CHOOSER_IMPLEMENT(CERT_SetOfSignedCrlTemplate)
 
 /* CRL cache code starts here */
@@ -1062,19 +1066,16 @@
 /* initial state is off */
 static PRBool crlcache_initialized = PR_FALSE;
 
-PRIntervalTime oneminute = 0;
-PRIntervalTime tenminutes = 0;
-
-PRIntervalTime CRLCache_Empty_TokenFetch_Interval; /* how often
+PRTime CRLCache_Empty_TokenFetch_Interval = 60 * 1000000; /* how often
     to query the tokens for CRL objects, in order to discover new objects, if
-    the cache does not contain any token CRLs */
+    the cache does not contain any token CRLs . In microseconds */
 
-PRIntervalTime CRLCache_TokenRefetch_Interval; /* how often
+PRTime CRLCache_TokenRefetch_Interval = 600 * 1000000 ; /* how often
     to query the tokens for CRL objects, in order to discover new objects, if
-    the cache already contains token CRLs */
+    the cache already contains token CRLs In microseconds */
 
-PRIntervalTime CRLCache_ExistenceCheck_Interval; /* how often to check if
-    a token CRL object still exists */
+PRTime CRLCache_ExistenceCheck_Interval = 60 * 1000000; /* how often to check
+    if a token CRL object still exists. In microseconds */
 
 /* this function is called at NSS initialization time */
 SECStatus InitCRLCache(void)
@@ -1110,9 +1111,6 @@
             crlcache.lock = NULL;
             return SECFailure;
         }
-        CRLCache_Empty_TokenFetch_Interval = CRLCache_ExistenceCheck_Interval
-            = oneminute = PR_SecondsToInterval(60);
-        CRLCache_TokenRefetch_Interval = tenminutes = PR_SecondsToInterval(600);
         crlcache_initialized = PR_TRUE;
         return SECSuccess;
     }
@@ -1748,8 +1746,8 @@
     PRBool dirty = PR_FALSE; /* whether something was changed in the
                                 cache state during this update cycle */
     PRBool hastokenCRLs = PR_FALSE;
-    PRIntervalTime now = 0;
-    PRIntervalTime lastfetch = 0;
+    PRTime now = 0;
+    PRTime lastfetch = 0;
 
     if (!cache)
     {
@@ -1759,11 +1757,12 @@
 
     /* first, make sure we have obtained all the CRLs we need.
        We do an expensive token fetch in the following cases :
-       1) cache is explicitly set to refresh state
-       2) cache is in invalid state because last fetch failed
-       3) cache contains no token CRLs, and it's been more than one minute
+       1) cache is empty because no fetch was ever performed yet
+       2) cache is explicitly set to refresh state
+       3) cache is in invalid state because last fetch failed
+       4) cache contains no token CRLs, and it's been more than one minute
           since the last fetch
-       4) cache contains token CRLs, and it's been more than 10 minutes since
+       5) cache contains token CRLs, and it's been more than 10 minutes since
           the last fetch
     */
     forcedrefresh = cache->refresh;
@@ -1771,10 +1770,12 @@
     if (PR_TRUE != forcedrefresh && 
         (!(cache->invalid & CRL_CACHE_LAST_FETCH_FAILED)))
     {
-        now = PR_IntervalNow();
+        now = PR_Now();
         hastokenCRLs = DPCache_HasTokenCRLs(cache);
     }
-    if ( (PR_TRUE == forcedrefresh) ||
+    if ( (0 == lastfetch) ||
+
+         (PR_TRUE == forcedrefresh) ||
 
          (cache->invalid & CRL_CACHE_LAST_FETCH_FAILED) ||
 
@@ -1799,7 +1800,7 @@
                 cache->refresh = PR_FALSE; /* clear refresh state */
             }
             dirty = PR_TRUE;
-            cache->lastfetch = PR_IntervalNow();
+            cache->lastfetch = PR_Now();
         }
         DPCache_UnlockWrite();
     }
@@ -1810,14 +1811,14 @@
        2) every minute */
     if (( PR_TRUE != dirty) && (!now) )
     {
-        now = PR_IntervalNow();
+        now = PR_Now();
     }
     if ( (PR_TRUE == dirty) ||
          ( (now - cache->lastcheck > CRLCache_ExistenceCheck_Interval) ||
            (now < cache->lastcheck)) )
     {
         PRBool mustunlock = PR_FALSE;
-        PRIntervalTime lastcheck = cache->lastcheck;
+        PRTime lastcheck = cache->lastcheck;
         /* check if all CRLs still exist */
         for (i = 0; (i < cache->ncrls) ; i++)
         {
@@ -1850,7 +1851,7 @@
         }
         if (PR_TRUE == mustunlock)
         {
-            cache->lastcheck = PR_IntervalNow();
+            cache->lastcheck = PR_Now();
             DPCache_UnlockWrite();
             mustunlock = PR_FALSE;
         }
@@ -2998,3 +2999,5 @@
     return SECSuccess;
 }
 
+
+
Index: mozilla/security/nss/lib/certhigh/certreq.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/certhigh/certreq.c,v
retrieving revision 1.4
retrieving revision 1.5
diff -u -r1.4 -r1.5
--- mozilla/security/nss/lib/certhigh/certreq.c	9 Mar 2005 23:02:48 -0000	1.4
+++ mozilla/security/nss/lib/certhigh/certreq.c	23 Apr 2005 03:58:19 -0000	1.5
@@ -268,7 +268,7 @@
 	PORT_SetError(SEC_ERROR_INVALID_ARGS);
         return SECFailure;
     }
-    if (req->attributes == NULL)
+    if (req->attributes == NULL || req->attributes[0] == NULL)
         return SECSuccess;
 
     extlist = SEC_ASN1EncodeItem(req->arena, NULL, &req->attributes,
Index: mozilla/security/nss/lib/ckfw/builtins/README
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/ckfw/builtins/README,v
retrieving revision 1.4
retrieving revision 1.5
diff -u -r1.4 -r1.5
--- mozilla/security/nss/lib/ckfw/builtins/README	3 Sep 2004 04:35:28 -0000	1.4
+++ mozilla/security/nss/lib/ckfw/builtins/README	13 Apr 2005 01:45:53 -0000	1.5
@@ -10,28 +10,26 @@
 to the nssckbi module. In the procedure described below, we assume that the
 new root CA certificate is distributed in DER format in the file newroot.der.
 
-1. (deleted, addbuiltin is now built as part of NSS).
-
-2. Add the directory where the addbuiltin executable resides to your PATH
+1. Add the directory where the addbuiltin executable resides to your PATH
 environment variable. Then, add the directory where the NSPR and NSS shared
 libraries (DLLs) reside to the platform-specific environment variable that
 specifies your shared library search path: LD_LIBRARY_PATH (most Unix
 variants), SHLIB_PATH (32-bit HP-UX), LIBPATH (AIX), or PATH (Windows).
 
-3. Copy newroot.der to this directory.
+2. Copy newroot.der to this directory.
 
-4. In this directory, run addbuiltin to add the new root certificate. The
-argument to the -n option should be replaced by the name of the root
+3. In this directory, run addbuiltin to add the new root certificate. The
+argument to the -n option should be replaced by the nickname of the root
 certificate. Then run "gmake generate".
 
-    % addbuiltin -n "Name of the Root Certificate" -t C,C,C < newroot.der >> certdata.txt
+    % addbuiltin -n "Nickname of the Root Certificate" -t C,C,C < newroot.der >> certdata.txt
     % gmake generate
 
-5. Edit nssckbi.h to bump the version of the module.
+4. Edit nssckbi.h to bump the version of the module.
 
-6. Run gmake in this directory to build the nssckbi module.
+5. Run gmake in this directory to build the nssckbi module.
 
-7. After you verify that the new nssckbi module is correct, check in
+6. After you verify that the new nssckbi module is correct, check in
 certdata.txt, certdata.c, and nssckbi.h.
 
 II. Removing a Builtin Root CA Certificate
Index: mozilla/security/nss/lib/ckfw/builtins/certdata.txt
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/ckfw/builtins/certdata.txt,v
retrieving revision 1.34
retrieving revision 1.37
diff -u -r1.34 -r1.37
--- mozilla/security/nss/lib/ckfw/builtins/certdata.txt	8 Mar 2005 08:44:57 -0000	1.34
+++ mozilla/security/nss/lib/ckfw/builtins/certdata.txt	18 Apr 2005 16:08:07 -0000	1.37
@@ -10789,9 +10789,9 @@
 CKA_SERIAL_NUMBER MULTILINE_OCTAL
 \002\001\044
 END
-CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_VALID
 CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
-CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_VALID
 CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
 
 #
@@ -12026,13 +12026,13 @@
 CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
 
 #
-# Certificate "Camerfirma Global Chambersign"
+# Certificate "Camerfirma Global Chambersign Root"
 #
 CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
 CKA_TOKEN CK_BBOOL CK_TRUE
 CKA_PRIVATE CK_BBOOL CK_FALSE
 CKA_MODIFIABLE CK_BBOOL CK_FALSE
-CKA_LABEL UTF8 "Camerfirma Global Chambersign"
+CKA_LABEL UTF8 "Camerfirma Global Chambersign Root"
 CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
 CKA_SUBJECT MULTILINE_OCTAL
 \060\175\061\013\060\011\006\003\125\004\006\023\002\105\125\061
@@ -12138,12 +12138,12 @@
 \166\135\165\220\032\365\046\217\360
 END
 
-# Trust for Certificate "Camerfirma Global Chambersign"
+# Trust for Certificate "Camerfirma Global Chambersign Root"
 CKA_CLASS CK_OBJECT_CLASS CKO_NETSCAPE_TRUST
 CKA_TOKEN CK_BBOOL CK_TRUE
 CKA_PRIVATE CK_BBOOL CK_FALSE
 CKA_MODIFIABLE CK_BBOOL CK_FALSE
-CKA_LABEL UTF8 "Camerfirma Global Chambersign"
+CKA_LABEL UTF8 "Camerfirma Global Chambersign Root"
 CKA_CERT_SHA1_HASH MULTILINE_OCTAL
 \063\233\153\024\120\044\233\125\172\001\207\162\204\331\340\057
 \303\322\330\351
@@ -12809,3 +12809,262 @@
 CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
 CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
 CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
+
+#
+# Certificate "Go Daddy Class 2 CA"
+#
+CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Go Daddy Class 2 CA"
+CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
+CKA_SUBJECT MULTILINE_OCTAL
+\060\143\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\041\060\037\006\003\125\004\012\023\030\124\150\145\040\107\157
+\040\104\141\144\144\171\040\107\162\157\165\160\054\040\111\156
+\143\056\061\061\060\057\006\003\125\004\013\023\050\107\157\040
+\104\141\144\144\171\040\103\154\141\163\163\040\062\040\103\145
+\162\164\151\146\151\143\141\164\151\157\156\040\101\165\164\150
+\157\162\151\164\171
+END
+CKA_ID UTF8 "0"
+CKA_ISSUER MULTILINE_OCTAL
+\060\143\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\041\060\037\006\003\125\004\012\023\030\124\150\145\040\107\157
+\040\104\141\144\144\171\040\107\162\157\165\160\054\040\111\156
+\143\056\061\061\060\057\006\003\125\004\013\023\050\107\157\040
+\104\141\144\144\171\040\103\154\141\163\163\040\062\040\103\145
+\162\164\151\146\151\143\141\164\151\157\156\040\101\165\164\150
+\157\162\151\164\171
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\001\000
+END
+CKA_VALUE MULTILINE_OCTAL
+\060\202\004\000\060\202\002\350\240\003\002\001\002\002\001\000
+\060\015\006\011\052\206\110\206\367\015\001\001\005\005\000\060
+\143\061\013\060\011\006\003\125\004\006\023\002\125\123\061\041
+\060\037\006\003\125\004\012\023\030\124\150\145\040\107\157\040
+\104\141\144\144\171\040\107\162\157\165\160\054\040\111\156\143
+\056\061\061\060\057\006\003\125\004\013\023\050\107\157\040\104
+\141\144\144\171\040\103\154\141\163\163\040\062\040\103\145\162
+\164\151\146\151\143\141\164\151\157\156\040\101\165\164\150\157
+\162\151\164\171\060\036\027\015\060\064\060\066\062\071\061\067
+\060\066\062\060\132\027\015\063\064\060\066\062\071\061\067\060
+\066\062\060\132\060\143\061\013\060\011\006\003\125\004\006\023
+\002\125\123\061\041\060\037\006\003\125\004\012\023\030\124\150
+\145\040\107\157\040\104\141\144\144\171\040\107\162\157\165\160
+\054\040\111\156\143\056\061\061\060\057\006\003\125\004\013\023
+\050\107\157\040\104\141\144\144\171\040\103\154\141\163\163\040
+\062\040\103\145\162\164\151\146\151\143\141\164\151\157\156\040
+\101\165\164\150\157\162\151\164\171\060\202\001\040\060\015\006
+\011\052\206\110\206\367\015\001\001\001\005\000\003\202\001\015
+\000\060\202\001\010\002\202\001\001\000\336\235\327\352\127\030
+\111\241\133\353\327\137\110\206\352\276\335\377\344\357\147\034
+\364\145\150\263\127\161\240\136\167\273\355\233\111\351\160\200
+\075\126\030\143\010\157\332\362\314\320\077\177\002\124\042\124
+\020\330\262\201\324\300\165\075\113\177\307\167\303\076\170\253
+\032\003\265\040\153\057\152\053\261\305\210\176\304\273\036\260
+\301\330\105\047\157\252\067\130\367\207\046\327\330\055\366\251
+\027\267\037\162\066\116\246\027\077\145\230\222\333\052\156\135
+\242\376\210\340\013\336\177\345\215\025\341\353\313\072\325\342
+\022\242\023\055\330\216\257\137\022\075\240\010\005\010\266\134
+\245\145\070\004\105\231\036\243\140\140\164\305\101\245\162\142
+\033\142\305\037\157\137\032\102\276\002\121\145\250\256\043\030
+\152\374\170\003\251\115\177\200\303\372\253\132\374\241\100\244
+\312\031\026\376\262\310\357\136\163\015\356\167\275\232\366\171
+\230\274\261\007\147\242\025\015\335\240\130\306\104\173\012\076
+\142\050\137\272\101\007\123\130\317\021\176\070\164\305\370\377
+\265\151\220\217\204\164\352\227\033\257\002\001\003\243\201\300
+\060\201\275\060\035\006\003\125\035\016\004\026\004\024\322\304
+\260\322\221\324\114\021\161\263\141\313\075\241\376\335\250\152
+\324\343\060\201\215\006\003\125\035\043\004\201\205\060\201\202
+\200\024\322\304\260\322\221\324\114\021\161\263\141\313\075\241
+\376\335\250\152\324\343\241\147\244\145\060\143\061\013\060\011
+\006\003\125\004\006\023\002\125\123\061\041\060\037\006\003\125
+\004\012\023\030\124\150\145\040\107\157\040\104\141\144\144\171
+\040\107\162\157\165\160\054\040\111\156\143\056\061\061\060\057
+\006\003\125\004\013\023\050\107\157\040\104\141\144\144\171\040
+\103\154\141\163\163\040\062\040\103\145\162\164\151\146\151\143
+\141\164\151\157\156\040\101\165\164\150\157\162\151\164\171\202
+\001\000\060\014\006\003\125\035\023\004\005\060\003\001\001\377
+\060\015\006\011\052\206\110\206\367\015\001\001\005\005\000\003
+\202\001\001\000\062\113\363\262\312\076\221\374\022\306\241\007
+\214\216\167\240\063\006\024\134\220\036\030\367\010\246\075\012
+\031\371\207\200\021\156\151\344\226\027\060\377\064\221\143\162
+\070\356\314\034\001\243\035\224\050\244\061\366\172\304\124\327
+\366\345\061\130\003\242\314\316\142\333\224\105\163\265\277\105
+\311\044\265\325\202\002\255\043\171\151\215\270\266\115\316\317
+\114\312\063\043\350\034\210\252\235\213\101\156\026\311\040\345
+\211\236\315\073\332\160\367\176\231\046\040\024\124\045\253\156
+\163\205\346\233\041\235\012\154\202\016\250\370\302\014\372\020
+\036\154\226\357\207\015\304\017\141\213\255\356\203\053\225\370
+\216\222\204\162\071\353\040\352\203\355\203\315\227\156\010\274
+\353\116\046\266\163\053\344\323\366\114\376\046\161\342\141\021
+\164\112\377\127\032\207\017\165\110\056\317\121\151\027\240\002
+\022\141\225\325\321\100\262\020\114\356\304\254\020\103\246\245
+\236\012\325\225\142\232\015\317\210\202\305\062\014\344\053\237
+\105\346\015\237\050\234\261\271\052\132\127\255\067\017\257\035
+\177\333\275\237
+END
+
+# Trust for Certificate "Go Daddy Class 2 CA"
+CKA_CLASS CK_OBJECT_CLASS CKO_NETSCAPE_TRUST
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Go Daddy Class 2 CA"
+CKA_CERT_SHA1_HASH MULTILINE_OCTAL
+\047\226\272\346\077\030\001\342\167\046\033\240\327\167\160\002
+\217\040\356\344
+END
+CKA_CERT_MD5_HASH MULTILINE_OCTAL
+\221\336\006\045\253\332\375\062\027\014\273\045\027\052\204\147
+END
+CKA_ISSUER MULTILINE_OCTAL
+\060\143\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\041\060\037\006\003\125\004\012\023\030\124\150\145\040\107\157
+\040\104\141\144\144\171\040\107\162\157\165\160\054\040\111\156
+\143\056\061\061\060\057\006\003\125\004\013\023\050\107\157\040
+\104\141\144\144\171\040\103\154\141\163\163\040\062\040\103\145
+\162\164\151\146\151\143\141\164\151\157\156\040\101\165\164\150
+\157\162\151\164\171
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\001\000
+END
+CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
+
+#
+# Certificate "Starfield Class 2 CA"
+#
+CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Starfield Class 2 CA"
+CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
+CKA_SUBJECT MULTILINE_OCTAL
+\060\150\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\045\060\043\006\003\125\004\012\023\034\123\164\141\162\146\151
+\145\154\144\040\124\145\143\150\156\157\154\157\147\151\145\163
+\054\040\111\156\143\056\061\062\060\060\006\003\125\004\013\023
+\051\123\164\141\162\146\151\145\154\144\040\103\154\141\163\163
+\040\062\040\103\145\162\164\151\146\151\143\141\164\151\157\156
+\040\101\165\164\150\157\162\151\164\171
+END
+CKA_ID UTF8 "0"
+CKA_ISSUER MULTILINE_OCTAL
+\060\150\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\045\060\043\006\003\125\004\012\023\034\123\164\141\162\146\151
+\145\154\144\040\124\145\143\150\156\157\154\157\147\151\145\163
+\054\040\111\156\143\056\061\062\060\060\006\003\125\004\013\023
+\051\123\164\141\162\146\151\145\154\144\040\103\154\141\163\163
+\040\062\040\103\145\162\164\151\146\151\143\141\164\151\157\156
+\040\101\165\164\150\157\162\151\164\171
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\001\000
+END
+CKA_VALUE MULTILINE_OCTAL
+\060\202\004\017\060\202\002\367\240\003\002\001\002\002\001\000
+\060\015\006\011\052\206\110\206\367\015\001\001\005\005\000\060
+\150\061\013\060\011\006\003\125\004\006\023\002\125\123\061\045
+\060\043\006\003\125\004\012\023\034\123\164\141\162\146\151\145
+\154\144\040\124\145\143\150\156\157\154\157\147\151\145\163\054
+\040\111\156\143\056\061\062\060\060\006\003\125\004\013\023\051
+\123\164\141\162\146\151\145\154\144\040\103\154\141\163\163\040
+\062\040\103\145\162\164\151\146\151\143\141\164\151\157\156\040
+\101\165\164\150\157\162\151\164\171\060\036\027\015\060\064\060
+\066\062\071\061\067\063\071\061\066\132\027\015\063\064\060\066
+\062\071\061\067\063\071\061\066\132\060\150\061\013\060\011\006
+\003\125\004\006\023\002\125\123\061\045\060\043\006\003\125\004
+\012\023\034\123\164\141\162\146\151\145\154\144\040\124\145\143
+\150\156\157\154\157\147\151\145\163\054\040\111\156\143\056\061
+\062\060\060\006\003\125\004\013\023\051\123\164\141\162\146\151
+\145\154\144\040\103\154\141\163\163\040\062\040\103\145\162\164
+\151\146\151\143\141\164\151\157\156\040\101\165\164\150\157\162
+\151\164\171\060\202\001\040\060\015\006\011\052\206\110\206\367
+\015\001\001\001\005\000\003\202\001\015\000\060\202\001\010\002
+\202\001\001\000\267\062\310\376\351\161\246\004\205\255\014\021
+\144\337\316\115\357\310\003\030\207\077\241\253\373\074\246\237
+\360\303\241\332\324\330\156\053\123\220\373\044\244\076\204\360
+\236\350\137\354\345\047\104\365\050\246\077\173\336\340\052\360
+\310\257\123\057\236\312\005\001\223\036\217\146\034\071\247\115
+\372\132\266\163\004\045\146\353\167\177\347\131\306\112\231\045
+\024\124\353\046\307\363\177\031\325\060\160\217\257\260\106\052
+\377\255\353\051\355\327\237\252\004\207\243\324\371\211\245\064
+\137\333\103\221\202\066\331\146\074\261\270\271\202\375\234\072
+\076\020\310\073\357\006\145\146\172\233\031\030\075\377\161\121
+\074\060\056\137\276\075\167\163\262\135\006\154\303\043\126\232
+\053\205\046\222\034\247\002\263\344\077\015\257\010\171\202\270
+\066\075\352\234\323\065\263\274\151\312\365\314\235\350\375\144
+\215\027\200\063\156\136\112\135\231\311\036\207\264\235\032\300
+\325\156\023\065\043\136\337\233\137\075\357\326\367\166\302\352
+\076\273\170\015\034\102\147\153\004\330\370\326\332\157\213\362
+\104\240\001\253\002\001\003\243\201\305\060\201\302\060\035\006
+\003\125\035\016\004\026\004\024\277\137\267\321\316\335\037\206
+\364\133\125\254\334\327\020\302\016\251\210\347\060\201\222\006
+\003\125\035\043\004\201\212\060\201\207\200\024\277\137\267\321
+\316\335\037\206\364\133\125\254\334\327\020\302\016\251\210\347
+\241\154\244\152\060\150\061\013\060\011\006\003\125\004\006\023
+\002\125\123\061\045\060\043\006\003\125\004\012\023\034\123\164
+\141\162\146\151\145\154\144\040\124\145\143\150\156\157\154\157
+\147\151\145\163\054\040\111\156\143\056\061\062\060\060\006\003
+\125\004\013\023\051\123\164\141\162\146\151\145\154\144\040\103
+\154\141\163\163\040\062\040\103\145\162\164\151\146\151\143\141
+\164\151\157\156\040\101\165\164\150\157\162\151\164\171\202\001
+\000\060\014\006\003\125\035\023\004\005\060\003\001\001\377\060
+\015\006\011\052\206\110\206\367\015\001\001\005\005\000\003\202
+\001\001\000\005\235\077\210\235\321\311\032\125\241\254\151\363
+\363\131\332\233\001\207\032\117\127\251\241\171\011\052\333\367
+\057\262\036\314\307\136\152\330\203\207\241\227\357\111\065\076
+\167\006\101\130\142\277\216\130\270\012\147\077\354\263\335\041
+\146\037\311\124\372\162\314\075\114\100\330\201\257\167\236\203
+\172\273\242\307\365\064\027\216\331\021\100\364\374\054\052\115
+\025\177\247\142\135\056\045\323\000\013\040\032\035\150\371\027
+\270\364\275\213\355\050\131\335\115\026\213\027\203\310\262\145
+\307\055\172\245\252\274\123\206\155\335\127\244\312\370\040\101
+\013\150\360\364\373\164\276\126\135\172\171\365\371\035\205\343
+\055\225\276\365\161\220\103\314\215\037\232\000\012\207\051\351
+\125\042\130\000\043\352\343\022\103\051\133\107\010\335\214\101
+\152\145\006\250\345\041\252\101\264\225\041\225\271\175\321\064
+\253\023\326\255\274\334\342\075\071\315\275\076\165\160\241\030
+\131\003\311\042\264\217\234\325\136\052\327\245\266\324\012\155
+\370\267\100\021\106\232\037\171\016\142\277\017\227\354\340\057
+\037\027\224
+END
+
+# Trust for Certificate "Starfield Class 2 CA"
+CKA_CLASS CK_OBJECT_CLASS CKO_NETSCAPE_TRUST
+CKA_TOKEN CK_BBOOL CK_TRUE
+CKA_PRIVATE CK_BBOOL CK_FALSE
+CKA_MODIFIABLE CK_BBOOL CK_FALSE
+CKA_LABEL UTF8 "Starfield Class 2 CA"
+CKA_CERT_SHA1_HASH MULTILINE_OCTAL
+\255\176\034\050\260\144\357\217\140\003\100\040\024\303\320\343
+\067\016\265\212
+END
+CKA_CERT_MD5_HASH MULTILINE_OCTAL
+\062\112\113\273\310\143\151\233\276\164\232\306\335\035\106\044
+END
+CKA_ISSUER MULTILINE_OCTAL
+\060\150\061\013\060\011\006\003\125\004\006\023\002\125\123\061
+\045\060\043\006\003\125\004\012\023\034\123\164\141\162\146\151
+\145\154\144\040\124\145\143\150\156\157\154\157\147\151\145\163
+\054\040\111\156\143\056\061\062\060\060\006\003\125\004\013\023
+\051\123\164\141\162\146\151\145\154\144\040\103\154\141\163\163
+\040\062\040\103\145\162\164\151\146\151\143\141\164\151\157\156
+\040\101\165\164\150\157\162\151\164\171
+END
+CKA_SERIAL_NUMBER MULTILINE_OCTAL
+\002\001\000
+END
+CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NETSCAPE_TRUSTED_DELEGATOR
+CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
Index: mozilla/security/nss/lib/ckfw/builtins/nssckbi.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/ckfw/builtins/nssckbi.h,v
retrieving revision 1.12
retrieving revision 1.13
diff -u -r1.12 -r1.13
--- mozilla/security/nss/lib/ckfw/builtins/nssckbi.h	2 Dec 2004 19:47:45 -0000	1.12
+++ mozilla/security/nss/lib/ckfw/builtins/nssckbi.h	13 Apr 2005 01:45:53 -0000	1.13
@@ -74,8 +74,8 @@
  * of the comment in the CK_VERSION type definition.
  */
 #define NSS_BUILTINS_LIBRARY_VERSION_MAJOR 1
-#define NSS_BUILTINS_LIBRARY_VERSION_MINOR 52
-#define NSS_BUILTINS_LIBRARY_VERSION "1.52"
+#define NSS_BUILTINS_LIBRARY_VERSION_MINOR 53
+#define NSS_BUILTINS_LIBRARY_VERSION "1.53"
 
 /* These version numbers detail the semantic changes to the ckfw engine. */
 #define NSS_BUILTINS_HARDWARE_VERSION_MAJOR 1
Index: mozilla/security/nss/lib/nss/nss.def
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/nss/nss.def,v
retrieving revision 1.145
retrieving revision 1.146
diff -u -r1.145 -r1.146
--- mozilla/security/nss/lib/nss/nss.def	9 Mar 2005 23:02:48 -0000	1.145
+++ mozilla/security/nss/lib/nss/nss.def	12 Apr 2005 02:24:16 -0000	1.146
@@ -844,7 +844,9 @@
 ;+#
 ;+# Don't export these DATA symbols on Windows because they don't work right.
 ;;CERT_SequenceOfCertExtensionTemplate DATA ;
+;;CERT_SignedCrlTemplate DATA ;
 NSS_Get_CERT_SequenceOfCertExtensionTemplate;
+NSS_Get_CERT_SignedCrlTemplate;
 ;+    local:
 ;+       *;
 ;+};
Index: mozilla/security/nss/lib/nss/nss.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/nss/nss.h,v
retrieving revision 1.39
retrieving revision 1.40
diff -u -r1.39 -r1.40
--- mozilla/security/nss/lib/nss/nss.h	30 Mar 2005 00:22:36 -0000	1.39
+++ mozilla/security/nss/lib/nss/nss.h	19 Apr 2005 22:53:46 -0000	1.40
@@ -52,11 +52,11 @@
  * The format of the version string should be
  *     "<major version>.<minor version>[.<patch level>] [<Beta>]"
  */
-#define NSS_VERSION  "3.10 Beta 3"
+#define NSS_VERSION  "3.10"
 #define NSS_VMAJOR   3
 #define NSS_VMINOR   10
 #define NSS_VPATCH   0
-#define NSS_BETA     PR_TRUE
+#define NSS_BETA     PR_FALSE
 
 
 /*
Index: mozilla/security/nss/lib/pk11wrap/pk11pbe.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pk11wrap/pk11pbe.c,v
retrieving revision 1.10
retrieving revision 1.11
diff -u -r1.10 -r1.11
--- mozilla/security/nss/lib/pk11wrap/pk11pbe.c	19 Jul 2004 22:12:38 -0000	1.10
+++ mozilla/security/nss/lib/pk11wrap/pk11pbe.c	15 Apr 2005 16:38:43 -0000	1.11
@@ -45,7 +45,6 @@
 #include "secasn1.h"
 #include "secder.h"
 #include "secoid.h"
-#include "alghmac.h"
 #include "secerr.h"
 #include "secmod.h"
 #include "pk11func.h"
Index: mozilla/security/nss/lib/pkcs12/p12d.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pkcs12/p12d.c,v
retrieving revision 1.26
retrieving revision 1.27
diff -u -r1.26 -r1.27
--- mozilla/security/nss/lib/pkcs12/p12d.c	2 Apr 2005 05:17:27 -0000	1.26
+++ mozilla/security/nss/lib/pkcs12/p12d.c	15 Apr 2005 16:38:44 -0000	1.27
@@ -51,7 +51,6 @@
 #include "pk11func.h"
 #include "p12plcy.h"
 #include "p12local.h"
-#include "alghmac.h"
 #include "secder.h"
 #include "secport.h"
 
Index: mozilla/security/nss/lib/pkcs12/p12e.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pkcs12/p12e.c,v
retrieving revision 1.11
retrieving revision 1.12
diff -u -r1.11 -r1.12
--- mozilla/security/nss/lib/pkcs12/p12e.c	13 Jul 2004 05:31:34 -0000	1.11
+++ mozilla/security/nss/lib/pkcs12/p12e.c	15 Apr 2005 16:38:46 -0000	1.12
@@ -49,7 +49,6 @@
 #include "pk11func.h"
 #include "p12plcy.h"
 #include "p12local.h"
-#include "alghmac.h"
 #include "prcpucfg.h"
 
 /*
Index: mozilla/security/nss/lib/pkcs12/p12local.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pkcs12/p12local.c,v
retrieving revision 1.7
retrieving revision 1.8
diff -u -r1.7 -r1.8
--- mozilla/security/nss/lib/pkcs12/p12local.c	25 Apr 2004 15:03:13 -0000	1.7
+++ mozilla/security/nss/lib/pkcs12/p12local.c	15 Apr 2005 16:38:46 -0000	1.8
@@ -45,7 +45,6 @@
 #include "secerr.h"
 #include "pk11func.h"
 #include "p12local.h"
-#include "alghmac.h"
 #include "p12.h"
 
 #define SALT_LENGTH	16
Index: mozilla/security/nss/lib/pkcs7/certread.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pkcs7/certread.c,v
retrieving revision 1.9
retrieving revision 1.10
diff -u -r1.9 -r1.10
--- mozilla/security/nss/lib/pkcs7/certread.c	18 Jun 2004 00:38:45 -0000	1.9
+++ mozilla/security/nss/lib/pkcs7/certread.c	11 Apr 2005 02:52:01 -0000	1.10
@@ -42,6 +42,7 @@
 #include "secder.h"
 #include "secasn1.h"
 #include "secoid.h"
+#include "secerr.h"
 
 SEC_ASN1_MKSUB(SEC_AnyTemplate)
 
@@ -348,6 +349,10 @@
 	/* check entire length if definite length */
 	if ( seqLen || seqLenLen ) {
 	    if ( certlen != ( seqLen + seqLenLen + 2 ) ) {
+		if (certlen > ( seqLen + seqLenLen + 2 ))
+		    PORT_SetError(SEC_ERROR_EXTRA_INPUT);
+		else 
+		    PORT_SetError(SEC_ERROR_INPUT_LEN);
 		goto notder;
 	    }
 	}
Index: mozilla/security/nss/lib/pki1/oiddata.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/pki1/oiddata.c,v
retrieving revision 1.5
retrieving revision 1.6
diff -u -r1.5 -r1.6
--- mozilla/security/nss/lib/pki1/oiddata.c	14 Mar 2005 18:04:44 -0000	1.5
+++ mozilla/security/nss/lib/pki1/oiddata.c	11 Apr 2005 21:27:01 -0000	1.6
@@ -2000,7 +2000,7 @@
   {
 #ifdef DEBUG
     "id-ce-invalidityDate",
-    "Invalid Date",
+    "Invalidity Date",
 #endif /* DEBUG */
     { "\x55\x1d\x18", 3 }
   },
Index: mozilla/security/nss/lib/softoken/manifest.mn
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/softoken/manifest.mn,v
retrieving revision 1.21
retrieving revision 1.22
diff -u -r1.21 -r1.22
--- mozilla/security/nss/lib/softoken/manifest.mn	25 Apr 2004 15:03:16 -0000	1.21
+++ mozilla/security/nss/lib/softoken/manifest.mn	15 Apr 2005 16:38:46 -0000	1.22
@@ -57,9 +57,7 @@
 	$(NULL)
 
 PRIVATE_EXPORTS = \
-	alghmac.h \
 	pk11pars.h \
-	pkcs11i.h \
 	$(NULL)
 
 CSRCS = \
Index: mozilla/security/nss/lib/softoken/pkcs11.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/softoken/pkcs11.c,v
retrieving revision 1.99
retrieving revision 1.100
diff -u -r1.99 -r1.100
--- mozilla/security/nss/lib/softoken/pkcs11.c	29 Mar 2005 18:21:18 -0000	1.99
+++ mozilla/security/nss/lib/softoken/pkcs11.c	9 Apr 2005 00:42:01 -0000	1.100
@@ -3769,6 +3769,7 @@
     if (crv != CKR_OK) {
 	sftk_FreeObject(destObject);
 	sftk_FreeSession(session);
+        return crv;
     }
 
     crv = sftk_handleObject(destObject,session);
Index: mozilla/security/nss/lib/util/secasn1.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/util/secasn1.h,v
retrieving revision 1.12
retrieving revision 1.13
diff -u -r1.12 -r1.13
--- mozilla/security/nss/lib/util/secasn1.h	25 Apr 2004 15:03:18 -0000	1.12
+++ mozilla/security/nss/lib/util/secasn1.h	9 Apr 2005 05:06:34 -0000	1.13
@@ -183,6 +183,11 @@
 SEC_ASN1GetSubtemplate (const SEC_ASN1Template *inTemplate, void *thing,
 			PRBool encoding);
 
+/* whether the template is for a primitive type or a choice of
+ * primitive types
+ */
+extern PRBool SEC_ASN1IsTemplateSimple(const SEC_ASN1Template *theTemplate);
+
 /************************************************************************/
 
 /*
Index: mozilla/security/nss/lib/util/secasn1e.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/util/secasn1e.c,v
retrieving revision 1.18
retrieving revision 1.19
diff -u -r1.18 -r1.19
--- mozilla/security/nss/lib/util/secasn1e.c	13 Jul 2004 06:02:54 -0000	1.18
+++ mozilla/security/nss/lib/util/secasn1e.c	9 Apr 2005 05:06:34 -0000	1.19
@@ -193,6 +193,7 @@
     unsigned char tag_modifiers;
     unsigned long encode_kind, under_kind;
     unsigned long tag_number;
+    PRBool isInline = PR_FALSE;
 
 
     encode_kind = state->theTemplate->kind;
@@ -222,7 +223,7 @@
     } else if ((encode_kind & (SEC_ASN1_POINTER | SEC_ASN1_INLINE)) || 
         (!universal && !isExplicit)) {
 	const SEC_ASN1Template *subt;
-	void *src;
+	void *src = NULL;
 
 	PORT_Assert ((encode_kind & (SEC_ASN1_ANY | SEC_ASN1_SKIP)) == 0);
 
@@ -231,6 +232,7 @@
 	if (encode_kind & SEC_ASN1_POINTER) {
 	    src = *(void **)state->src;
 	    state->place = afterPointer;
+
 	    if (src == NULL) {
 		/*
 		 * If this is optional, but NULL, then the field does
@@ -249,8 +251,9 @@
 	    src = state->src;
 	    if (encode_kind & SEC_ASN1_INLINE) {
 		/* check that there are no extraneous bits */
-		PORT_Assert (encode_kind == SEC_ASN1_INLINE && !optional);
+		/* PORT_Assert (encode_kind == SEC_ASN1_INLINE && !optional); */
 		state->place = afterInline;
+		isInline = PR_TRUE;
 	    } else {
 		/*
 		 * Save the tag modifiers and tag number here before moving
@@ -268,6 +271,22 @@
 	}
 
 	subt = SEC_ASN1GetSubtemplate (state->theTemplate, state->src, PR_TRUE);
+	if (isInline && optional) {
+	    /* we only handle a very limited set of optional inline cases at
+	       this time */
+	    if (PR_FALSE != SEC_ASN1IsTemplateSimple(subt)) {
+		/* we now know that the target is a SECItem*, so we can check
+		   if the source contains one */
+		SECItem* target = (SECItem*)state->src;
+		if (!target || !target->data || !target->len) {
+		    /* no valid data to encode subtemplate */
+		    return state;
+		}
+	    } else {
+		PORT_Assert(0); /* complex templates are not handled as
+				   inline optional */
+	    }
+	}
 	state = sec_asn1e_push_state (state->top, subt, src, PR_FALSE);
 	if (state == NULL)
 	    return state;
@@ -552,7 +571,21 @@
 	    }
 	} else if (encode_kind & SEC_ASN1_INLINE) {
 	    /* check that there are no extraneous bits */
-	    PORT_Assert (encode_kind == SEC_ASN1_INLINE && !optional);
+	    if (optional) {
+		if (PR_FALSE != SEC_ASN1IsTemplateSimple(theTemplate)) {
+		    /* we now know that the target is a SECItem*, so we can check
+		       if the source contains one */
+		    SECItem* target = (SECItem*)src;
+		    if (!target || !target->data || !target->len) {
+			/* no valid data to encode subtemplate */
+			*noheaderp = PR_TRUE;
+			return 0;
+		    }
+		} else {
+		    PORT_Assert(0); /* complex templates not handled as inline
+                                       optional */
+		}
+	    }
 	}
 
 	src = (char *)src + theTemplate->offset;
Index: mozilla/security/nss/lib/util/secasn1u.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/lib/util/secasn1u.c,v
retrieving revision 1.3
retrieving revision 1.4
diff -u -r1.3 -r1.4
--- mozilla/security/nss/lib/util/secasn1u.c	25 Apr 2004 15:03:18 -0000	1.3
+++ mozilla/security/nss/lib/util/secasn1u.c	9 Apr 2005 05:06:34 -0000	1.4
@@ -107,3 +107,25 @@
     }
     return subt;
 }
+
+PRBool SEC_ASN1IsTemplateSimple(const SEC_ASN1Template *theTemplate)
+{
+    if (!theTemplate) {
+	return PR_TRUE; /* it doesn't get any simpler than NULL */
+    }
+    /* only templates made of one primitive type or a choice of primitive
+       types are considered simple */
+    if (! (theTemplate->kind & (~SEC_ASN1_TAGNUM_MASK))) {
+	return PR_TRUE; /* primitive type */
+    }
+    if (!theTemplate->kind & SEC_ASN1_CHOICE) {
+	return PR_FALSE; /* no choice means not simple */
+    }
+    while (++theTemplate && theTemplate->kind) {
+	if (theTemplate->kind & (~SEC_ASN1_TAGNUM_MASK)) {
+	    return PR_FALSE; /* complex type */
+	}
+    }
+    return PR_TRUE; /* choice of primitive types */
+}
+
Index: mozilla/security/nss/cmd/lib/SECerrs.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/cmd/lib/SECerrs.h,v
retrieving revision 1.10
retrieving revision 1.11
diff -u -r1.10 -r1.11
--- mozilla/security/nss/cmd/lib/SECerrs.h	30 Jul 2004 00:19:49 -0000	1.10
+++ mozilla/security/nss/cmd/lib/SECerrs.h	11 Apr 2005 19:02:47 -0000	1.11
@@ -467,7 +467,7 @@
 "NSS could not shutdown. Objects are still in use.")
 
 ER3(SEC_ERROR_EXTRA_INPUT,			(SEC_ERROR_BASE + 140),
-"DER-encoded message contained extra usused data.")
+"DER-encoded message contained extra unused data.")
 
 ER3(SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE,	(SEC_ERROR_BASE + 141),
 "Unsupported elliptic curve.")
Index: mozilla/security/nss/cmd/lib/secutil.c
===================================================================
RCS file: /cvsroot/mozilla/security/nss/cmd/lib/secutil.c,v
retrieving revision 1.68
retrieving revision 1.69
diff -u -r1.68 -r1.69
--- mozilla/security/nss/cmd/lib/secutil.c	2 Apr 2005 06:52:04 -0000	1.68
+++ mozilla/security/nss/cmd/lib/secutil.c	12 Apr 2005 02:24:15 -0000	1.69
@@ -48,6 +48,7 @@
 #include "prenv.h"
 #include "prnetdb.h"
 
+#include "cryptohi.h"
 #include "secutil.h"
 #include "secpkcs7.h"
 #include <stdarg.h>
@@ -3346,3 +3347,333 @@
     }
     PORT_SetError(err); /* restore original error code */
 }
+
+SECOidTag 
+SECU_StringToSignatureAlgTag(const char *alg)
+{
+    SECOidTag hashAlgTag = SEC_OID_UNKNOWN;
+
+    if (alg) {
+	if (!PL_strcmp(alg, "MD2")) {
+	    hashAlgTag = SEC_OID_MD2;
+	} else if (!PL_strcmp(alg, "MD4")) {
+	    hashAlgTag = SEC_OID_MD4;
+	} else if (!PL_strcmp(alg, "MD5")) {
+	    hashAlgTag = SEC_OID_MD5;
+	} else if (!PL_strcmp(alg, "SHA1")) {
+	    hashAlgTag = SEC_OID_SHA1;
+	} else if (!PL_strcmp(alg, "SHA256")) {
+	    hashAlgTag = SEC_OID_SHA256;
+	} else if (!PL_strcmp(alg, "SHA384")) {
+	    hashAlgTag = SEC_OID_SHA384;
+	} else if (!PL_strcmp(alg, "SHA512")) {
+	    hashAlgTag = SEC_OID_SHA512;
+	}
+    }
+    return hashAlgTag;
+}
+
+
+SECStatus
+SECU_StoreCRL(PK11SlotInfo *slot, SECItem *derCrl, PRFileDesc *outFile,
+              const PRBool ascii, char *url)
+{
+    PORT_Assert(derCrl != NULL);
+    if (!derCrl) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+
+    if (outFile != NULL) {
+        if (ascii) {
+            PR_fprintf(outFile, "%s\n%s\n%s\n", NS_CRL_HEADER, 
+                       BTOA_DataToAscii(derCrl->data, derCrl->len), 
+                       NS_CRL_TRAILER);
+        } else {
+            if (PR_Write(outFile, derCrl->data, derCrl->len) != derCrl->len) {
+                return SECFailure;
+            }
+        }
+    }
+    if (slot) {
+        CERTSignedCrl *newCrl = PK11_ImportCRL(slot, derCrl, url,
+                                               SEC_CRL_TYPE, NULL, 0, NULL, 0);
+        if (newCrl != NULL) {
+            SEC_DestroyCrl(newCrl);
+            return SECSuccess;
+        }
+        return SECFailure;
+    }
+    if (!outFile && !slot) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+    return SECSuccess;
+}
+
+SECStatus
+SECU_SignAndEncodeCRL(CERTCertificate *issuer, CERTSignedCrl *signCrl,
+                      SECOidTag hashAlgTag, SignAndEncodeFuncExitStat *resCode)
+{
+    SECItem der;
+    SECKEYPrivateKey *caPrivateKey = NULL;    
+    SECStatus rv;
+    PRArenaPool *arena;
+    SECOidTag algID;
+    void *dummy;
+
+    PORT_Assert(issuer != NULL && signCrl != NULL);
+    if (!issuer || !signCrl) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+
+    arena = signCrl->arena;
+
+    caPrivateKey = PK11_FindKeyByAnyCert(issuer, NULL);
+    if (caPrivateKey == NULL) {
+        *resCode = noKeyFound;
+        return SECFailure;
+    }
+
+    algID = SEC_GetSignatureAlgorithmOidTag(caPrivateKey->keyType, hashAlgTag);
+    if (algID == SEC_OID_UNKNOWN) {
+        *resCode = noSignatureMatch;
+        rv = SECFailure;
+        goto done;
+    }
+
+    if (!signCrl->crl.signatureAlg.parameters.data) {
+        rv = SECOID_SetAlgorithmID(arena, &signCrl->crl.signatureAlg, algID, 0);
+        if (rv != SECSuccess) {
+            *resCode = failToEncode;
+            goto done;
+        }
+    }
+
+    der.len = 0;
+    der.data = NULL;
+    dummy = SEC_ASN1EncodeItem(arena, &der, &signCrl->crl,
+                               SEC_ASN1_GET(CERT_CrlTemplate));
+    if (!dummy) {
+        *resCode = failToEncode;
+        rv = SECFailure;
+        goto done;
+    }
+
+    rv = SECU_DerSignDataCRL(arena, &signCrl->signatureWrap,
+                             der.data, der.len, caPrivateKey, algID);
+    if (rv != SECSuccess) {
+        *resCode = failToSign;
+        goto done;
+    }
+
+    signCrl->derCrl = PORT_ArenaZNew(arena, SECItem);
+    if (signCrl->derCrl == NULL) {
+        *resCode = noMem;
+        PORT_SetError(SEC_ERROR_NO_MEMORY);
+        rv = SECFailure;
+        goto done;
+    }
+
+    signCrl->derCrl->len = 0;
+    signCrl->derCrl->data = NULL;
+    dummy = SEC_ASN1EncodeItem (arena, signCrl->derCrl, signCrl,
+                                SEC_ASN1_GET(CERT_SignedCrlTemplate));
+    if (!dummy) {
+        *resCode = failToEncode;
+        rv = SECFailure;
+        goto done;
+    }
+
+done:
+    if (caPrivateKey) {
+        SECKEY_DestroyPrivateKey(caPrivateKey);
+    }
+    return rv;
+}
+
+
+
+SECStatus
+SECU_CopyCRL(PRArenaPool *destArena, CERTCrl *destCrl, CERTCrl *srcCrl)
+{
+    void *dummy;
+    SECStatus rv = SECSuccess;
+    SECItem der;
+
+    PORT_Assert(destArena && srcCrl && destCrl);
+    if (!destArena || !srcCrl || !destCrl) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+
+    der.len = 0;
+    der.data = NULL;
+    dummy = SEC_ASN1EncodeItem (destArena, &der, srcCrl,
+                                SEC_ASN1_GET(CERT_CrlTemplate));
+    if (!dummy) {
+        return SECFailure;
+    }
+
+    rv = SEC_QuickDERDecodeItem(destArena, destCrl,
+                                SEC_ASN1_GET(CERT_CrlTemplate), &der);
+    if (rv != SECSuccess) {
+        return SECFailure;
+    }
+    
+    destCrl->arena = destArena;
+
+    return rv;
+}
+
+SECStatus
+SECU_DerSignDataCRL(PRArenaPool *arena, CERTSignedData *sd,
+                    unsigned char *buf, int len, SECKEYPrivateKey *pk,
+                    SECOidTag algID)
+{
+    SECItem it;
+    SECStatus rv;
+
+    it.data = 0;
+
+    /* XXX We should probably have some asserts here to make sure the key type
+     * and algID match
+     */
+
+    /* Sign input buffer */
+    rv = SEC_SignData(&it, buf, len, pk, algID);
+    if (rv) goto loser;
+
+    /* Fill out SignedData object */
+    PORT_Memset(sd, 0, sizeof(sd));
+    sd->data.data = buf;
+    sd->data.len = len;
+    sd->signature.data = it.data;
+    sd->signature.len = it.len << 3;		/* convert to bit string */
+    if (!sd->signatureAlgorithm.parameters.data) {
+        rv = SECOID_SetAlgorithmID(arena, &sd->signatureAlgorithm, algID, 0);
+        if (rv) goto loser;
+    }
+
+    return rv;
+
+  loser:
+    PORT_Free(it.data);
+    return rv;
+}
+
+#if 0
+
+/* we need access to the private function cert_FindExtension for this code to work */
+
+CERTAuthKeyID *
+SECU_FindCRLAuthKeyIDExten (PRArenaPool *arena, CERTSignedCrl *scrl)
+{
+    SECItem encodedExtenValue;
+    SECStatus rv;
+    CERTAuthKeyID *ret;
+    CERTCrl* crl;
+
+    if (!scrl) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return NULL;
+    }
+
+    crl = &scrl->crl;
+    
+    encodedExtenValue.data = NULL;
+    encodedExtenValue.len = 0;
+
+    rv = cert_FindExtension(crl->extensions, SEC_OID_X509_AUTH_KEY_ID,
+			    &encodedExtenValue);
+    if ( rv != SECSuccess ) {
+	return (NULL);
+    }
+
+    ret = CERT_DecodeAuthKeyID (arena, &encodedExtenValue);
+
+    PORT_Free(encodedExtenValue.data);
+    encodedExtenValue.data = NULL;
+    
+    return(ret);
+}
+
+#endif
+
+/*
+ * Find the issuer of a Crl.  Use the authorityKeyID if it exists.
+ */
+CERTCertificate *
+SECU_FindCrlIssuer(CERTCertDBHandle *dbhandle, SECItem* subject,
+                   CERTAuthKeyID* authorityKeyID, PRTime validTime)
+{
+    CERTCertListNode *node;
+    CERTCertificate * issuerCert = NULL, *cert = NULL;
+    CERTCertList *certList = NULL;
+    SECStatus rv = SECFailure;
+
+    if (!subject) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return NULL;
+    }
+
+    certList =
+        CERT_CreateSubjectCertList(NULL, dbhandle, subject,
+                                   validTime, PR_TRUE);
+    if (!certList) {
+        goto loser;
+    }
+
+    node = CERT_LIST_HEAD(certList);
+    
+    /* XXX and authoritykeyid in the future */
+    while ( ! CERT_LIST_END(node, certList) ) {
+	cert = node->cert;
+        if (CERT_CheckCertUsage(cert, KU_CRL_SIGN) != SECSuccess ||
+            !cert->trust) {
+            continue;
+        }
+        /* select the first (newest) user cert */
+        if (CERT_IsUserCert(cert)) {
+            rv = SECSuccess;
+            goto success;
+        }
+    }
+
+  success:
+    if (rv == SECSuccess) {
+        issuerCert = CERT_DupCertificate(cert);
+    }
+  loser:
+    if (certList) {
+        CERT_DestroyCertList(certList);
+    }
+    return(issuerCert);
+}
+
+
+/* Encodes and adds extensions to the CRL or CRL entries. */
+SECStatus 
+SECU_EncodeAndAddExtensionValue(PRArenaPool *arena, void *extHandle, 
+                                void *value, PRBool criticality, int extenType, 
+                                EXTEN_EXT_VALUE_ENCODER EncodeValueFn)
+{
+    SECItem encodedValue;
+    SECStatus rv;
+
+    encodedValue.data = NULL;
+    encodedValue.len = 0;
+    do {
+        rv = (*EncodeValueFn)(arena, value, &encodedValue);
+        if (rv != SECSuccess)
+            break;
+
+        rv = CERT_AddExtension(extHandle, extenType, &encodedValue,
+                               criticality, PR_TRUE);
+        if (rv != SECSuccess)
+            break;
+    } while (0);
+
+    return (rv);
+}
Index: mozilla/security/nss/cmd/lib/secutil.h
===================================================================
RCS file: /cvsroot/mozilla/security/nss/cmd/lib/secutil.h,v
retrieving revision 1.17
retrieving revision 1.18
diff -u -r1.17 -r1.18
--- mozilla/security/nss/cmd/lib/secutil.h	8 Mar 2005 01:20:04 -0000	1.17
+++ mozilla/security/nss/cmd/lib/secutil.h	12 Apr 2005 02:24:15 -0000	1.18
@@ -59,6 +59,9 @@
 #define NS_CERT_HEADER "-----BEGIN CERTIFICATE-----"
 #define NS_CERT_TRAILER "-----END CERTIFICATE-----"
 
+#define NS_CRL_HEADER  "-----BEGIN CRL-----"
+#define NS_CRL_TRAILER "-----END CRL-----"
+
 /* From libsec/pcertdb.c --- it's not declared in sec.h */
 extern SECStatus SEC_AddPermCertificate(CERTCertDBHandle *handle,
 		SECItem *derCert, char *nickname, CERTCertTrust *trust);
@@ -299,6 +302,74 @@
 
 extern SECStatus SECU_RegisterDynamicOids(void);
 
+/* Identifies hash algorithm tag by its string representation. */
+extern SECOidTag SECU_StringToSignatureAlgTag(const char *alg);
+
+/* Store CRL in output file or pk11 db. Also
+ * encodes with base64 and exports to file if ascii flag is set
+ * and file is not NULL. */
+extern SECStatus SECU_StoreCRL(PK11SlotInfo *slot, SECItem *derCrl,
+                               PRFileDesc *outFile, int ascii, char *url);
+
+
+/*
+** DER sign a single block of data using private key encryption and the
+** MD5 hashing algorithm. This routine first computes a digital signature
+** using SEC_SignData, then wraps it with an CERTSignedData and then der
+** encodes the result.
+**	"arena" is the memory arena to use to allocate data from
+**      "sd" returned CERTSignedData 
+** 	"result" the final der encoded data (memory is allocated)
+** 	"buf" the input data to sign
+** 	"len" the amount of data to sign
+** 	"pk" the private key to encrypt with
+*/
+extern SECStatus SECU_DerSignDataCRL(PRArenaPool *arena, CERTSignedData *sd,
+                                     unsigned char *buf, int len,
+                                     SECKEYPrivateKey *pk, SECOidTag algID);
+
+typedef enum  {
+    noKeyFound = 1,
+    noSignatureMatch = 2,
+    failToEncode = 3,
+    failToSign = 4,
+    noMem = 5
+} SignAndEncodeFuncExitStat;
+
+extern SECStatus
+SECU_SignAndEncodeCRL(CERTCertificate *issuer, CERTSignedCrl *signCrl,
+                      SECOidTag hashAlgTag, SignAndEncodeFuncExitStat *resCode);
+
+extern SECStatus
+SECU_CopyCRL(PRArenaPool *destArena, CERTCrl *destCrl, CERTCrl *srcCrl);
+
+/*
+** Finds the crl Authority Key Id extension. Returns NULL if no such extension
+** was found.
+*/
+CERTAuthKeyID *
+SECU_FindCRLAuthKeyIDExten (PRArenaPool *arena, CERTSignedCrl *crl);
+
+/*
+ * Find the issuer of a crl. Cert usage should be checked before signing a crl.
+ */
+CERTCertificate *
+SECU_FindCrlIssuer(CERTCertDBHandle *dbHandle, SECItem* subject,
+                   CERTAuthKeyID* id, PRTime validTime);
+
+
+/* call back function used in encoding of an extension. Called from
+ * SECU_EncodeAndAddExtensionValue */
+typedef SECStatus (* EXTEN_EXT_VALUE_ENCODER) (PRArenaPool *extHandleArena,
+                                               void *value, SECItem *encodedValue);
+
+/* Encodes and adds extensions to the CRL or CRL entries. */
+SECStatus 
+SECU_EncodeAndAddExtensionValue(PRArenaPool *arena, void *extHandle, 
+                                void *value, PRBool criticality, int extenType, 
+                                EXTEN_EXT_VALUE_ENCODER EncodeValueFn);
+
+
 /*
  *
  *  Utilities for parsing security tools command lines 
