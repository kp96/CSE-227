diff --git a/mailnews/base/public/Makefile.in b/mailnews/base/public/Makefile.in
--- a/mailnews/base/public/Makefile.in
+++ b/mailnews/base/public/Makefile.in
@@ -103,6 +103,7 @@ XPIDLSRCS	= \
 		nsMsgMessageFlags.idl \
 		nsIStopwatch.idl \
 		nsIMsgUserFeedbackListener.idl \
+		nsIMsgAsyncPrompter.idl \
 		$(NULL)
 
 include $(topsrcdir)/config/rules.mk
diff --git a/mailnews/base/public/nsIMsgAsyncPrompter.idl b/mailnews/base/public/nsIMsgAsyncPrompter.idl
new file mode 100644
--- /dev/null
+++ b/mailnews/base/public/nsIMsgAsyncPrompter.idl
@@ -0,0 +1,92 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mailnews Async Prompter.
+ *
+ * The Initial Developer of the Original Code is
+ * Mozilla Messaging
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Mark Banner <bugzilla@standard8.plus.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either of the GNU General Public License Version 2 or later (the "GPL"),
+ * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsISupports.idl"
+
+interface nsIMsgAsyncPromptListener;
+
+/**
+ * The nsIMsgAsyncPrompter is intended to provide a way to make asynchoronous
+ * message prompts into synchronous ones - so that the user is only prompted
+ * with one at a time.
+ */
+[scriptable, uuid(f32be63a-c7cb-4c66-8536-b0202cb4604d)]
+interface nsIMsgAsyncPrompter : nsISupports {
+  /**
+   * Queues an async prompt request. If there are none queued then this will be
+   * actioned straight away, otherwise the prompt will be queued for action
+   * once previous prompt(s) have been cleared.
+   *
+   * Queued prompts using the same aKey may be amalgamated into one prompt to
+   * save repeated prompts to the user.
+   *
+   * @param aKey    A key to determine whether or not the queued prompts can
+   *                be combined.
+   * @param aCaller An nsIMsgAsyncPromptListener to call back to when the prompt
+   *                is ready to be made.
+   */
+  void queueAsyncAuthPrompt(in ACString aKey,
+                            in nsIMsgAsyncPromptListener aCaller);
+};
+
+/**
+ * This is used in combination with nsIMsgAsyncPrompter.
+ */
+[scriptable, uuid(fb5307a3-39d0-462e-92c8-c5c288a2612f)]
+interface nsIMsgAsyncPromptListener : nsISupports {
+  /**
+   * Called when the listener should do its prompt. The listener
+   * should not return until the prompt is complete.
+   *
+   * @return  True if there is auth information available following the prompt,
+   *          false otherwise.
+   */
+  boolean onPromptStart();
+
+  /**
+   * Called in the case that the queued prompt was combined with another and
+   * there is now authentication information available.
+   */
+  void onPromptAuthAvailable();
+
+  /**
+   * Called in the case that the queued prompt was combined with another but
+   * the prompt was canceled.
+   */
+  void onPromptCanceled();
+};
diff --git a/mailnews/base/public/nsMsgBaseCID.h b/mailnews/base/public/nsMsgBaseCID.h
--- a/mailnews/base/public/nsMsgBaseCID.h
+++ b/mailnews/base/public/nsMsgBaseCID.h
@@ -526,4 +526,11 @@
 #define NS_MSGSHUTDOWNSERVICE_CONTRACTID   \
   "@mozilla.org/messenger/msgshutdownservice;1"
 
+//
+// msgAsyncPrompter (only contract id for utility purposes as the CID is defined
+// in js).
+//
+#define NS_MSGASYNCPROMPTER_CONTRACTID \
+  "@mozilla.org/messenger/msgAsyncPrompter;1"
+
 #endif // nsMessageBaseCID_h__
diff --git a/mailnews/base/src/Makefile.in b/mailnews/base/src/Makefile.in
--- a/mailnews/base/src/Makefile.in
+++ b/mailnews/base/src/Makefile.in
@@ -177,6 +177,7 @@ EXPORTS = \
 
 EXTRA_COMPONENTS = \
 		nsMailNewsCommandLineHandler.js \
+		msgAsyncPrompter.js \
 		$(NULL)
 
 EXTRA_JS_MODULES = \
diff --git a/mailnews/base/src/msgAsyncPrompter.js b/mailnews/base/src/msgAsyncPrompter.js
new file mode 100644
--- /dev/null
+++ b/mailnews/base/src/msgAsyncPrompter.js
@@ -0,0 +1,161 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mailnews Async Prompter.
+ *
+ * The Initial Developer of the Original Code is
+ * Mozilla Messaging.
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Mark Banner <bugzilla@standard8.plus.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either of the GNU General Public License Version 2 or later (the "GPL"),
+ * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
+Components.utils.import("resource://app/modules/gloda/log4moz.js");
+
+const Ci = Components.interfaces;
+const Cc = Components.classes;
+
+function runnablePrompter(asyncPrompter, hashKey) {
+  this._asyncPrompter = asyncPrompter;
+  this._hashKey = hashKey;
+}
+
+runnablePrompter.prototype = {
+  _asyncPrompter: null,
+  _hashKey: null,
+
+  run: function() {
+    this._asyncPrompter._log.debug("Running prompt for " + this._hashKey);
+    let prompter = this._asyncPrompter._pendingPrompts[this._hashKey];
+    let ok = false;
+    try {
+      ok = prompter.first.onPromptStart();
+    }
+    catch (ex) {
+      Components.utils.reportError("runnablePrompter:run: " + ex + "\n");
+    }
+
+    delete this._asyncPrompter._pendingPrompts[this._hashKey];
+
+    for each (var consumer in prompter.consumers) {
+      try {
+        if (ok)
+          consumer.onPromptAuthAvailable();
+        else
+          consumer.onPromptCanceled();
+      }
+      catch (ex) {
+        // Log the error for extension devs and others to pick up.
+        Components.utils.reportError("runnablePrompter:run: consumer.onPrompt* reported an exception: " + ex + "\n");
+      }
+    }
+    this._asyncPrompter._asyncPromptInProgress = false;
+
+    this._asyncPrompter._log.debug("Finished running prompter for " + this._hashKey);
+    this._asyncPrompter._doAsyncAuthPrompt();
+  }
+};
+
+function msgAsyncPrompter() {
+  this._pendingPrompts = [];
+}
+
+msgAsyncPrompter.prototype = {
+  classDescription: "msgAsyncPrompter",
+  contractID: "@mozilla.org/messenger/msgAsyncPrompter;1",
+  classID: Components.ID("{49b04761-23dd-45d7-903d-619418a4d319}"),
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIMsgAsyncPrompter]),
+
+  _pendingPrompts: null,
+  _asyncPromptInProgress: false,
+  __threadManager: null,
+  __log: null,
+
+  get _log() {
+    if (!this.__log)
+      this.__log = Log4Moz.getConfiguredLogger("msgAsyncPrompter",
+                                               Log4Moz.Level.Debug,
+                                               Log4Moz.Level.Debug,
+                                               Log4Moz.Level.Debug);
+
+    return this.__log;
+  },
+
+  get _threadManager() {
+    if (!this.__threadManager)
+      this.__threadManager = Cc["@mozilla.org/thread-manager;1"]
+                               .getService(Ci.nsIThreadManager);
+
+    return this.__threadManager;
+  },
+
+  queueAsyncAuthPrompt: function(aKey, aCaller) {
+    if (aKey in this._pendingPrompts) {
+      this._log.debug("Prompt bound to an existing one in the queue, key: " + aKey);
+      this._pendingPrompts[aKey].consumers.push(aCaller);
+      return;
+    }
+
+    this._log.debug("Adding new prompt to the queue, key: " + aKey);
+    let asyncPrompt = {
+      first: aCaller,
+      consumers: []
+    };
+
+    this._pendingPrompts[aKey] = asyncPrompt;
+    this._doAsyncAuthPrompt();
+  },
+
+  _doAsyncAuthPrompt: function() {
+    if (this._asyncPromptInProgress) {
+      this._log.debug("_doAsyncAuthPrompt bypassed - prompt already in progress");
+      return;
+    }
+
+    // Find the first prompt key we have in the queue.
+    let hashKey = null;
+    for (hashKey in this._pendingPrompts)
+      break;
+
+    if (!hashKey)
+      return;
+
+    this._asyncPromptInProgress = true;
+
+    this._log.debug("Dispatching runnablePrompter for " + hashKey);
+
+    let runnable = new runnablePrompter(this, hashKey);
+    this._threadManager.mainThread.dispatch(runnable,
+                                            Ci.nsIThread.DISPATCH_NORMAL);
+  }
+};
+
+function NSGetModule(compMgr, fileSpec) {
+  return XPCOMUtils.generateModule([msgAsyncPrompter]);
+}
