# HG changeset patch
# User Serge Gautherie <sgautherie.bz@free.fr>
Bug 456860 - Improve msgCompSMIMEOverlay.js and msgReadSMIMEOverlay.js
(Av2a) fix + reduced cleanup only

diff --git a/mailnews/extensions/smime/resources/content/msgCompSMIMEOverlay.js b/mailnews/extensions/smime/resources/content/msgCompSMIMEOverlay.js
--- a/mailnews/extensions/smime/resources/content/msgCompSMIMEOverlay.js
+++ b/mailnews/extensions/smime/resources/content/msgCompSMIMEOverlay.js
@@ -39,45 +39,35 @@
 
 const gISMimeCompFields = Components.interfaces.nsIMsgSMIMECompFields;
 const gSMimeCompFieldsContractID = "@mozilla.org/messenger-smime/composefields;1";
 const gSMimeContractID = "@mozilla.org/messenger-smime/smimejshelper;1";
 const gISMimeJSHelper = Components.interfaces.nsISMimeJSHelper;
 var gNextSecurityButtonCommand = "";
 var gBundle;
 var gBrandBundle;
-var gSMFields;
+var gSMFields = null;
 var gEncryptedURIService = null;
 
-
 function onComposerClose()
 {
   gSMFields = null;
   setNoEncryptionUI();
   setNoSignatureUI();
 
-  if (!gMsgCompose)
-    return;
-
-  if (!gMsgCompose.compFields)
+  if (!gMsgCompose || !gMsgCompose.compFields)
     return;
 
   gMsgCompose.compFields.securityInfo = null;
 }
 
 function onComposerReOpen()
 {
-  // are we already set up?
-  if (gSMFields)
-    return;
-
-  if (!gMsgCompose)
-    return;
-
-  if (!gMsgCompose.compFields)
+  // Are we already set up ? Or are the required fields missing ?
+  if (gSMFields || !gMsgCompose || !gMsgCompose.compFields)
     return;
 
   gMsgCompose.compFields.securityInfo = null;
 
   gSMFields = Components.classes[gSMimeCompFieldsContractID].createInstance(gISMimeCompFields);
   if (gSMFields)
   {
     gMsgCompose.compFields.securityInfo = gSMFields;
@@ -93,67 +83,79 @@ function onComposerReOpen()
       if (gEncryptedURIService.isEncrypted(gMsgCompose.originalMsgURI))
       {
         // Override encryption setting if original is known as encrypted.
         gSMFields.requireEncryptMessage = true;
       }
     }
 
     if (gSMFields.requireEncryptMessage)
-    {
       setEncryptionUI();
-    }
     else
-    {
       setNoEncryptionUI();
-    }
 
     if (gSMFields.signMessage)
-    {
       setSignatureUI();
-    }
     else
-    {
       setNoSignatureUI();
-    }
   }
 }
 
+addEventListener("load", smimeComposeOnLoad, false);
 
 // this function gets called multiple times,
 // but only on first open, not on composer recycling
 function smimeComposeOnLoad()
 {
+  removeEventListener("load", smimeComposeOnLoad, false);
+
   if (!gEncryptedURIService)
-  {
     gEncryptedURIService = 
       Components.classes["@mozilla.org/messenger-smime/smime-encrypted-uris-service;1"]
       .getService(Components.interfaces.nsIEncryptedSMIMEURIsService);
-  }
 
   onComposerReOpen();
+
+  top.controllers.appendController(SecurityController);
+
+  addEventListener("compose-window-close", onComposerClose, true);
+  addEventListener("compose-window-reopen", onComposerReOpen, true);
+  addEventListener("compose-send-message", onComposerSendMessage, true);
+  addEventListener("compose-from-changed", onComposerFromChanged, true);
+
+  addEventListener("unload", smimeComposeOnUnload, false);
+}
+
+function smimeComposeOnUnload()
+{
+  removeEventListener("unload", smimeComposeOnUnload, false);
+
+  removeEventListener("compose-window-close", onComposerClose, true);
+  removeEventListener("compose-window-reopen", onComposerReOpen, true);
+  removeEventListener("compose-send-message", onComposerSendMessage, true);
+  removeEventListener("compose-from-changed", onComposerFromChanged, true);
+
+  top.controllers.removeController(SecurityController);
 }
 
 function setupBundles()
 {
-  if (gBundle && gBrandBundle)
+  if (gBundle)
     return;
-  
-  if (!gBundle) {
-    gBundle = document.getElementById("bundle_comp_smime");
-    gBrandBundle = document.getElementById("bundle_brand");
-  }
+
+  gBundle = document.getElementById("bundle_comp_smime");
+  gBrandBundle = document.getElementById("bundle_brand");
 }
 
 function showNeedSetupInfo()
 {
   var ifps = Components.interfaces.nsIPromptService;
 
-  var promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].getService();
-  promptService = promptService.QueryInterface(ifps);
+  var promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
+                                .getService(ifps);
   setupBundles();
 
   if (promptService && gBundle && gBrandBundle) {
     var dummy = new Object;
     var buttonPressed =
     promptService.confirmEx(window,
       gBrandBundle.getString("brandShortName"),
       gBundle.getString("NeedSetup"), 
@@ -255,17 +257,16 @@ function doSecurityButton()
     
     case "signMessage":
       signMessage();
       break;
     
     case "show":
     default:
       showMessageComposeSecurityStatus();
-      break;
   }
 }
 
 function setNoSignatureUI()
 {
   top.document.getElementById("securityStatus").removeAttribute("signing");
   top.document.getElementById("signing-status").collapsed = true;
 }
@@ -315,47 +316,43 @@ var SecurityController =
   {
     switch ( command )
     {
       case "cmd_viewSecurityStatus":
         return true;
       
       default:
         return false;
-     }
+    }
   },
 
   isCommandEnabled: function(command)
   {
     switch ( command )
     {
       case "cmd_viewSecurityStatus":
-      {
         return true;
-      }
 
       default:
         return false;
     }
-    return false;
   }
 };
 
 function onComposerSendMessage()
 {
+  var missingCount = new Object();
+  var emailAddresses = new Object();
+
   try {
     if (!gMsgCompose.compFields.securityInfo.requireEncryptMessage) {
       return;
     }
 
     var helper = Components.classes[gSMimeContractID].createInstance(gISMimeJSHelper);
-
-    var emailAddresses = new Object();
-    var missingCount = new Object();
-
     helper.getNoCertAddresses(
       gMsgCompose.compFields,
       missingCount,
       emailAddresses);
   }
   catch (e)
   {
     return;
@@ -371,30 +368,27 @@ function onComposerSendMessage()
     // Does the current identity override the global preference?
     if (gCurrentIdentity.overrideGlobalPref)
       autocompleteDirectory = gCurrentIdentity.directoryServer;
     else
     {
       // Try the global one
       var prefs = Components.classes["@mozilla.org/preferences-service;1"]
                             .getService(Components.interfaces.nsIPrefBranch);
-
       if (prefs.getBoolPref("ldap_2.autoComplete.useDirectory"))
         autocompleteDirectory =
           prefs.getCharPref("ldap_2.autoComplete.directoryServer");
     }
 
     if (autocompleteDirectory)
-    {
       window.openDialog('chrome://messenger-smime/content/certFetchingStatus.xul',
                         '',
                         'chrome,resizable=1,modal=1,dialog=1', 
                         autocompleteDirectory,
                         emailAddresses.value);
-    }
   }
 }
 
 function onComposerFromChanged()
 {
   if (!gSMFields)
     return;
 
@@ -422,14 +416,8 @@ function onComposerFromChanged()
     
     if (!signMessage)
     {
       gSMFields.signMessage = false;
       setNoSignatureUI();
     }
   }
 }
-
-top.controllers.appendController(SecurityController);
-addEventListener('compose-window-close', onComposerClose, true);
-addEventListener('compose-window-reopen', onComposerReOpen, true);
-addEventListener('compose-send-message', onComposerSendMessage, true);
-addEventListener('compose-from-changed', onComposerFromChanged, true);
diff --git a/mailnews/extensions/smime/resources/content/msgCompSMIMEOverlay.xul b/mailnews/extensions/smime/resources/content/msgCompSMIMEOverlay.xul
--- a/mailnews/extensions/smime/resources/content/msgCompSMIMEOverlay.xul
+++ b/mailnews/extensions/smime/resources/content/msgCompSMIMEOverlay.xul
@@ -40,20 +40,17 @@
 
 
 <?xml-stylesheet href="chrome://messenger/skin/smime/msgCompSMIMEOverlay.css" type="text/css"?> 
 
 <!DOCTYPE overlay SYSTEM "chrome://messenger-smime/locale/msgCompSMIMEOverlay.dtd">
 
 <overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
-  <script type="application/x-javascript" src="chrome://messenger-smime/content/msgCompSMIMEOverlay.js"/>
-  <script type="application/x-javascript"><![CDATA[
-    window.addEventListener("load", smimeComposeOnLoad, true);
-  ]]></script>
+  <script type="application/javascript" src="chrome://messenger-smime/content/msgCompSMIMEOverlay.js"/>
 
   <window id="msgcomposeWindow">
     <broadcaster id="securityStatus" crypto="" signing=""/>
     <observes element="securityStatus" attribute="crypto" />
     <observes element="securityStatus" attribute="signing" />
     <stringbundle id="bundle_comp_smime" src="chrome://messenger-smime/locale/msgCompSMIMEOverlay.properties"/>
     <stringbundle id="bundle_brand" src="chrome://branding/locale/brand.properties"/>
   </window>
diff --git a/mailnews/extensions/smime/resources/content/msgReadSMIMEOverlay.js b/mailnews/extensions/smime/resources/content/msgReadSMIMEOverlay.js
--- a/mailnews/extensions/smime/resources/content/msgReadSMIMEOverlay.js
+++ b/mailnews/extensions/smime/resources/content/msgReadSMIMEOverlay.js
@@ -40,33 +40,47 @@ var gSignatureStatus = -1;
 var gSignerCert = null;
 var gEncryptionCert = null;
 var gBundle;
 var gBrandBundle;
 
 const nsPKIParamBlock    = "@mozilla.org/security/pkiparamblock;1";
 const nsIPKIParamBlock    = Components.interfaces.nsIPKIParamBlock;
 
+addEventListener("load", smimeReadOnLoad, false);
+
+function smimeReadOnLoad()
+{
+  removeEventListener("load", smimeReadOnLoad, false);
+
+  top.controllers.appendController(SecurityController);
+
+  addEventListener("unload", smimeReadOnUnload, false);
+}
+
+function smimeReadOnUnload()
+{
+  removeEventListener("unload", smimeReadOnUnload, false);
+
+  top.controllers.removeController(SecurityController);
+}
+
 function setupBundles()
 {
-  if (gBundle && gBrandBundle)
+  if (gBundle)
     return;
   
-  if (!gBundle) {
-    gBundle = document.getElementById("bundle_read_smime");
-    gBrandBundle = document.getElementById("bundle_brand");
-  }
+  gBundle = document.getElementById("bundle_read_smime");
+  gBrandBundle = document.getElementById("bundle_brand");
 }
 
 function showImapSignatureUnknown()
 {
-  var ifps = Components.interfaces.nsIPromptService;
-
-  var promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].getService();
-  promptService = promptService.QueryInterface(ifps);
+  var promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
+                                .getService(Components.interfaces.nsIPromptService);
   setupBundles();
 
   if (promptService && gBundle && gBrandBundle) {
     if (promptService.confirm(window,
           gBrandBundle.getString("brandShortName"),
           gBundle.getString("ImapOnDemand"))) {
       gDBView.reloadMessageWithAllParts();
     }
@@ -105,44 +119,38 @@ var SecurityController =
   {
     switch ( command )
     {
       case "cmd_viewSecurityStatus":
         return true;
       
       default:
         return false;
-     }
+    }
   },
 
   isCommandEnabled: function(command)
   {
     switch ( command )
     {
       case "cmd_viewSecurityStatus":
-      {
         if (document.documentElement.getAttribute('windowtype') == "mail:messageWindow")
         {
           return ( gCurrentMessageUri != null);
         }
         else
         {
           if (GetNumSelectedMessages() > 0 && gDBView)
           {
             var enabled = new Object();
             enabled.value = false;
             var checkStatus = new Object();
             gDBView.getCommandStatus(nsMsgViewCommandType.cmdRequiringMsgBody, enabled, checkStatus);
             return enabled.value;
           }
         }
-      
-        return false;
-      }
+        // else: fall through.
 
       default:
         return false;
     }
-    return false;
   }
 };
-
-top.controllers.appendController(SecurityController);
