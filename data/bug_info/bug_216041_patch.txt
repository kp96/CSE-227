? .fast-update
? obj-debug
? obj-jprof
? obj-opt
? accessible/.fast-update
? calendar/.fast-update
? caps/src/~nsSystemPrincipal.cpp
? ipc/ipcd/.fast-update
? modules/libpr0n/.fast-update
? nsprpub/.fast-update
? other-licenses/libart_lgpl/.fast-update
? other-licenses/libical/.fast-update
? security/manager/.fast-update
Index: caps/idl/nsIPrincipal.idl
===================================================================
RCS file: /cvsroot/mozilla/caps/idl/nsIPrincipal.idl,v
retrieving revision 1.26
diff -p -u -d -8 -r1.26 nsIPrincipal.idl
--- caps/idl/nsIPrincipal.idl	24 Jul 2003 05:14:18 -0000	1.26
+++ caps/idl/nsIPrincipal.idl	19 Aug 2003 22:18:07 -0000
@@ -105,20 +105,19 @@ interface nsIPrincipal : nsISerializable
     void setCanEnableCapability(in string capability, in short canEnable);
     boolean isCapabilityEnabled(in string capability, in voidPtr annotation);
     void enableCapability(in string capability, inout voidPtr annotation);
     void revertCapability(in string capability, inout voidPtr annotation);
     void disableCapability(in string capability, inout voidPtr annotation);
 
     /**
      * The codebase URI to which this principal pertains.  This is
-     * generally the document URI.  Setting this will reset the domain
-     * to null.
+     * generally the document URI.
      */
-    attribute nsIURI URI;
+    readonly attribute nsIURI URI;
 
     /**
      * The domain URI to which this principal pertains.
      * This is congruent with HTMLDocument.domain, and may be null.
      * Setting this has no effect on the URI.
      */
     attribute nsIURI domain;
 
@@ -138,17 +137,17 @@ interface nsIPrincipal : nsISerializable
     readonly attribute boolean hasCertificate;
 
     /**
      * The fingerprint ID of this principal's certificate.
      * Throws if there is no certificate associated with this principal.
      */
     // XXXcaa kaie says this may not be unique.  We should probably
     // consider using something else for this....
-    attribute string certificateID;
+    readonly attribute string certificateID;
 
     /**
      * The common name for the certificate.
      * This pertains to the certificate authority organization.
      * Throws if there is no certificate associated with this principal.
      */
     attribute string commonName;
 };
Index: caps/idl/nsIScriptSecurityManager.idl
===================================================================
RCS file: /cvsroot/mozilla/caps/idl/nsIScriptSecurityManager.idl,v
retrieving revision 1.57
diff -p -u -d -8 -r1.57 nsIScriptSecurityManager.idl
--- caps/idl/nsIScriptSecurityManager.idl	24 Jul 2003 05:14:19 -0000	1.57
+++ caps/idl/nsIScriptSecurityManager.idl	19 Aug 2003 22:18:07 -0000
@@ -139,17 +139,17 @@ interface nsIScriptSecurityManager : nsI
     /**
      * Return the all-powerful system principal.
      */
     [noscript] nsIPrincipal getSystemPrincipal();
 
     /**
      * Return a principal with the specified certificate ID.
      */
-    [noscript] nsIPrincipal getCertificatePrincipal(in string CertID);
+    [noscript] nsIPrincipal getCertificatePrincipal(in string CertID, in nsIURI aURI);
 
     /**
      * Return a principal that has the same origin as aURI.
      */
     [noscript] nsIPrincipal getCodebasePrincipal(in nsIURI aURI);
 
     ///////////////// Capabilities API /////////////////////
     /**
Index: caps/include/nsJSPrincipals.h
===================================================================
RCS file: /cvsroot/mozilla/caps/include/nsJSPrincipals.h,v
retrieving revision 1.9
diff -p -u -d -8 -r1.9 nsJSPrincipals.h
--- caps/include/nsJSPrincipals.h	24 Jul 2003 05:14:23 -0000	1.9
+++ caps/include/nsJSPrincipals.h	19 Aug 2003 22:18:07 -0000
@@ -1,9 +1,9 @@
-/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* ***** BEGIN LICENSE BLOCK *****
  * Version: NPL 1.1/GPL 2.0/LGPL 2.1
  *
  * The contents of this file are subject to the Netscape Public License
  * Version 1.1 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  * http://www.mozilla.org/NPL/
  *
@@ -37,19 +37,19 @@
  * ***** END LICENSE BLOCK ***** */
 /* describes principals by their orginating uris*/
 
 #ifndef nsJSPrincipals_h__
 #define nsJSPrincipals_h__
 #include "jsapi.h"
 #include "nsIPrincipal.h"
 
-struct nsJSPrincipals : JSPrincipals {
+struct nsJSPrincipals : JSPrincipals
+{
   static nsresult Startup();
   nsJSPrincipals();
-  nsresult Init(char *prin);
+  nsresult Init(nsIPrincipal* aPrincipal, const char *aCodebase);
   ~nsJSPrincipals(void);
 
   nsIPrincipal *nsIPrincipalPtr; // [WEAK] it owns us.
 };
 
 #endif /* nsJSPrincipals_h__ */
-
Index: caps/include/nsPrincipal.h
===================================================================
RCS file: /cvsroot/mozilla/caps/include/nsPrincipal.h,v
retrieving revision 1.13
diff -p -u -d -8 -r1.13 nsPrincipal.h
--- caps/include/nsPrincipal.h	24 Jul 2003 05:14:23 -0000	1.13
+++ caps/include/nsPrincipal.h	19 Aug 2003 22:18:07 -0000
@@ -47,42 +47,41 @@
 
 class nsIObjectInputStream;
 class nsIObjectOutputStream;
 
 class nsPrincipal : public nsIPrincipal
 {
 public:
   nsPrincipal();
-  nsPrincipal(nsIURI *aURI);
 
 protected:
   virtual ~nsPrincipal();
 
 public:
   // Our refcount is managed by mJSPrincipals.  Use this macro to avoid
   // an extra refcount member.
   NS_DECL_ISUPPORTS_INHERITED
-protected:
-  // XXXcaa Probably unnecessary.  See bug 143559.
-  NS_DECL_OWNINGTHREAD
 public:
 
   NS_DECL_NSIPRINCIPAL
   NS_DECL_NSISERIALIZABLE
 
+  nsresult Init(const char *aCertID, nsIURI *aCodebase);
+
   nsresult InitFromPersistent(const char* aPrefName,
                               const char* aToken,
                               const char* aGrantedList,
                               const char* aDeniedList,
-                              PRBool aIsCert = PR_FALSE,
-                              PRBool aTrusted = PR_FALSE);
+                              PRBool aIsCert,
+                              PRBool aTrusted);
 
   enum AnnotationValue { AnnotationEnabled=1, AnnotationDisabled };
 
+  void SetURI(nsIURI *aURI);
   nsresult SetCapability(const char *capability, void **annotation, 
                          AnnotationValue value);
 
   static const char sInvalid[];
 
 protected:
   nsJSPrincipals mJSPrincipals;
   nsVoidArray mAnnotations;
@@ -99,27 +98,29 @@ protected:
       : certificateID(aCertID),
         commonName(aName)
     {
     };
     nsCString certificateID;
     nsCString commonName;
   };
 
+  nsresult SetCertificate(const char* aCertID, const char* aName);
+
   // Keep this is a pointer, even though it may slightly increase the
   // cost of keeping a certificate, this is a good tradeoff though since
   // it is very rare that we actually have a certificate.
   nsAutoPtr<Certificate> mCert;
 
   void* mSecurityPolicy;
 
   nsCOMPtr<nsIURI> mCodebase;
   nsCOMPtr<nsIURI> mDomain;
-  PRUint8 mType;
   PRPackedBool mTrusted;
+  PRPackedBool mInitialized;
 };
 
 
 #define NS_PRINCIPAL_CLASSNAME  "principal"
 #define NS_PRINCIPAL_CONTRACTID "@mozilla.org/principal;1"
 #define NS_PRINCIPAL_CID \
   { 0x36102b6b, 0x7b62, 0x451a, \
     { 0xa1, 0xc8, 0xa0, 0xd4, 0x56, 0xc9, 0x2d, 0xc5 }}
Index: caps/include/nsScriptSecurityManager.h
===================================================================
RCS file: /cvsroot/mozilla/caps/include/nsScriptSecurityManager.h,v
retrieving revision 1.73
diff -p -u -d -8 -r1.73 nsScriptSecurityManager.h
--- caps/include/nsScriptSecurityManager.h	5 Aug 2003 20:08:45 -0000	1.73
+++ caps/include/nsScriptSecurityManager.h	19 Aug 2003 22:18:07 -0000
@@ -61,17 +61,17 @@ class nsString;
 class nsIClassInfo;
 class nsIIOService;
 class nsIXPConnect;
 class nsIStringBundle;
 class nsSystemPrincipal;
 struct ClassPolicy;
 
 #if defined(DEBUG_mstoltz) || defined(DEBUG_caillon)
-#define DEBUG_CAPS_HACKER
+//#define DEBUG_CAPS_HACKER
 #endif
 
 #ifdef DEBUG_CAPS_HACKER
 #define DEBUG_CAPS_CheckPropertyAccessImpl
 #define DEBUG_CAPS_LookupPolicy
 #define DEBUG_CAPS_CheckComponentPermissions
 #endif
 
Index: caps/src/nsJSPrincipals.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsJSPrincipals.cpp,v
retrieving revision 1.19
diff -p -u -d -8 -r1.19 nsJSPrincipals.cpp
--- caps/src/nsJSPrincipals.cpp	24 Jul 2003 05:14:29 -0000	1.19
+++ caps/src/nsJSPrincipals.cpp	19 Aug 2003 22:18:07 -0000
@@ -181,25 +181,28 @@ nsJSPrincipals::nsJSPrincipals()
     getPrincipalArray = nsGetPrincipalArray;
     globalPrivilegesEnabled = nsGlobalPrivilegesEnabled;
     refcount = 0;
     destroy = nsDestroyJSPrincipals;
     nsIPrincipalPtr = nsnull;
 }
 
 nsresult
-nsJSPrincipals::Init(char *aCodebase)
+nsJSPrincipals::Init(nsIPrincipal *aPrincipal, const char *aCodebase)
 {
-    if (codebase)
-    {
+    if (nsIPrincipalPtr) {
         NS_ERROR("Init called twice!");
         return NS_ERROR_UNEXPECTED;
     }
 
-    codebase = aCodebase;
+    nsIPrincipalPtr = aPrincipal;
+    codebase = PL_strdup(aCodebase);
+    if (!codebase)
+        return NS_ERROR_OUT_OF_MEMORY;
+
     return NS_OK;
 }
 
 nsJSPrincipals::~nsJSPrincipals()
 {
     if (codebase)
         PL_strfree(codebase);
 }
Index: caps/src/nsPrincipal.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsPrincipal.cpp,v
retrieving revision 1.25
diff -p -u -d -8 -r1.25 nsPrincipal.cpp
--- caps/src/nsPrincipal.cpp	10 Aug 2003 02:26:11 -0000	1.25
+++ caps/src/nsPrincipal.cpp	19 Aug 2003 22:18:07 -0000
@@ -53,59 +53,82 @@
 #include "nsPrincipal.h"
 
 
 // Static member variables
 PRInt32 nsPrincipal::sCapabilitiesOrdinal = 0;
 const char nsPrincipal::sInvalid[] = "Invalid";
 
 
-nsPrincipal::nsPrincipal()
-  : mCapabilities(7),
-    mSecurityPolicy(nsnull)
-{
-}
-
-
 NS_IMPL_QUERY_INTERFACE2_CI(nsPrincipal,
                             nsIPrincipal,
                             nsISerializable)
 NS_IMPL_CI_INTERFACE_GETTER2(nsPrincipal,
                              nsIPrincipal,
                              nsISerializable)
 
 NS_IMETHODIMP_(nsrefcnt)
 nsPrincipal::AddRef()
 {
   NS_PRECONDITION(PRInt32(mJSPrincipals.refcount) >= 0, "illegal refcnt");
   // XXXcaa does this need to be threadsafe?  See bug 143559.
-  nsrefcnt count = PR_AtomicIncrement((PRInt32 *)&mJSPrincipals.refcount);
-  NS_LOG_ADDREF(this, count, "nsPrincipal", sizeof(*this));
+  nsrefcnt count = mJSPrincipals.refcount++;
   return count;
 }
 
 NS_IMETHODIMP_(nsrefcnt)
 nsPrincipal::Release()
 {
   NS_PRECONDITION(0 != mJSPrincipals.refcount, "dup release");
-  nsrefcnt count = PR_AtomicDecrement((PRInt32 *)&mJSPrincipals.refcount);
-  NS_LOG_RELEASE(this, count, "nsPrincipal");
+  nsrefcnt count = mJSPrincipals.refcount--;
   if (count == 0) {
     NS_DELETEXPCOM(this);
   }
 
   return count;
 }
 
-nsPrincipal::nsPrincipal(nsIURI *aURI)
-  : mSecurityPolicy(nsnull),
-    mCodebase(aURI)
+nsPrincipal::nsPrincipal()
+  : mCapabilities(7),
+    mSecurityPolicy(nsnull),
+    mTrusted(PR_FALSE),
+    mInitialized(PR_FALSE)
 {
 }
 
+nsresult
+nsPrincipal::Init(const char *aCertID, nsIURI *aCodebase)
+{
+  NS_ENSURE_STATE(!mInitialized);
+  NS_ENSURE_ARG_POINTER(aCertID || aCodebase); // better have one of these.
+
+  mInitialized = PR_TRUE;
+
+  mCodebase = aCodebase;
+
+  nsresult rv;
+  if (aCertID) {
+    rv = SetCertificate(aCertID, nsnull);
+    if (NS_SUCCEEDED(rv)) {
+      rv = mJSPrincipals.Init(this, aCertID);
+    }
+  }
+  else {
+    nsCAutoString spec;
+    rv = mCodebase->GetSpec(spec);
+    if (NS_SUCCEEDED(rv)) {
+      rv = mJSPrincipals.Init(this, spec.get());
+    }
+  }
+
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  return rv;
+}
+
 
 PR_STATIC_CALLBACK(PRBool)
 deleteElement(void* aElement, void *aData)
 {
   nsHashtable *ht = (nsHashtable *) aElement;
   delete ht;
   return PR_TRUE;
 }
@@ -114,35 +137,37 @@ nsPrincipal::~nsPrincipal(void)
 {
   mAnnotations.EnumerateForwards(deleteElement, nsnull);
   delete mCert;
 }
 
 NS_IMETHODIMP
 nsPrincipal::GetJsPrincipals(JSPrincipals **jsprin)
 {
-  if (!mJSPrincipals.nsIPrincipalPtr) {
-    // Don't addref here, since we are referencing each other.
-    mJSPrincipals.nsIPrincipalPtr = this;
-  }
+  NS_PRECONDITION(mJSPrincipals.nsIPrincipalPtr, "mJSPrincipals is uninitalized!");
 
   *jsprin = &mJSPrincipals;
 
   // JSPRINCIPALS_HOLD does not use its first argument.
   // Just use a dummy cx to save the codesize.
   JSPRINCIPALS_HOLD(cx, *jsprin);
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsPrincipal::GetOrigin(char **aOrigin)
 {
+  *aOrigin = nsnull;
+
   nsIURI* uri = mDomain ? mDomain : mCodebase;
-  NS_ASSERTION(uri, "No Domain or Codebase");
+  if (!uri) {
+    NS_ASSERTION(mCert, "No Domain or Codebase for a non-cert principal");
+    return NS_ERROR_FAILURE;
+  }
 
   nsCAutoString hostPort;
 
   // chrome: URLs don't have a meaningful origin, so make
   // sure we just get the full spec for them.
   // XXX this should be removed in favor of the solution in
   // bug 160042.
   PRBool isChrome;
@@ -198,19 +223,18 @@ nsPrincipal::Equals(nsIPrincipal *aOther
       PRBool otherHasCert;
       aOther->GetHasCertificate(&otherHasCert);
       if (!otherHasCert) {
         return NS_OK;
       }
 
       nsXPIDLCString otherCertID;
       aOther->GetCertificateID(getter_Copies(otherCertID));
-      if (!otherCertID.Equals(mCert->certificateID)) {
-        return NS_OK;
-      }
+      *aResult = otherCertID.Equals(mCert->certificateID);
+      return NS_OK;
     }
 
     // Codebases are equal if they have the same origin.
     nsIURI *origin = mDomain ? mDomain : mCodebase;
     nsCOMPtr<nsIURI> otherOrigin;
     aOther->GetDomain(getter_AddRefs(otherOrigin));
     if (!otherOrigin) {
       aOther->GetURI(getter_AddRefs(otherOrigin));
@@ -406,40 +430,35 @@ nsPrincipal::GetHasCertificate(PRBool* a
 NS_IMETHODIMP
 nsPrincipal::GetURI(nsIURI** aURI)
 {
   NS_IF_ADDREF(*aURI = mCodebase);
 
   return NS_OK;
 }
 
-NS_IMETHODIMP
+void
 nsPrincipal::SetURI(nsIURI* aURI)
 {
   mCodebase = aURI;
-  mDomain = nsnull;
-  // Codebase has changed, forget cached security policy
-  mSecurityPolicy = nsnull;
-
-  return NS_OK;
 }
 
-NS_IMETHODIMP
-nsPrincipal::SetCertificateID(const char* aID)
+
+nsresult
+nsPrincipal::SetCertificate(const char* aID, const char* aName)
 {
-  if (!aID) {
-    mCert = nsnull;
-    return NS_OK;
+  NS_ENSURE_STATE(!mCert);
+
+  if (!aID && !aName) {
+    return NS_ERROR_INVALID_POINTER;
   }
 
+  mCert = new Certificate(aID, aName);
   if (!mCert) {
-    mCert = new Certificate(aID, "");
-    if (!mCert) {
-      return NS_ERROR_OUT_OF_MEMORY;
-    }
+    return NS_ERROR_OUT_OF_MEMORY;
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsPrincipal::GetCertificateID(char** aID)
 {
@@ -523,54 +542,53 @@ nsPrincipal::InitFromPersistent(const ch
                                 const char* aDeniedList,
                                 PRBool aIsCert,
                                 PRBool aTrusted)
 {
   NS_PRECONDITION(mCapabilities.Count() == 0,
                   "mCapabilities was already initialized?");
   NS_PRECONDITION(mAnnotations.Count() == 0,
                   "mAnnotations was already initialized?");
+  NS_PRECONDITION(!mInitialized, "We were already initialized?");
 
-  if (aIsCert) {
-    SetCertificateID(aToken);
-  }
-  else {
-    nsresult rv = NS_NewURI(getter_AddRefs(mCodebase), aToken, nsnull);
-    if (NS_FAILED(rv)) {
-      NS_ERROR("Malformed URI in capability.principal preference.");
-      return rv;
-    }
+  mInitialized = PR_TRUE;
 
-    nsCAutoString token;
-    rv = mCodebase->GetSpec(token);
+  nsresult rv;
+  if (aIsCert) {
+    rv = SetCertificate(aToken, nsnull);
     if (NS_FAILED(rv)) {
       return rv;
     }
-
-    rv = mJSPrincipals.Init(PL_strdup(token.get()));
+  }
+  else {
+    rv = NS_NewURI(getter_AddRefs(mCodebase), aToken, nsnull);
     if (NS_FAILED(rv)) {
+      NS_ERROR("Malformed URI in capability.principal preference.");
       return rv;
     }
 
     mTrusted = aTrusted;
   }
 
+  rv = mJSPrincipals.Init(this, aToken);
+  NS_ENSURE_SUCCESS(rv, rv);
+
   //-- Save the preference name
   mPrefName = aPrefName;
 
   const char* ordinalBegin = PL_strpbrk(aPrefName, "1234567890");
   if (ordinalBegin) {
     PRIntn n = atoi(ordinalBegin);
     if (sCapabilitiesOrdinal <= n) {
       sCapabilitiesOrdinal = n + 1;
     }
   }
 
   //-- Store the capabilities
-  nsresult rv = NS_OK;
+  rv = NS_OK;
   if (aGrantedList) {
     rv = SetCanEnableCapability(aGrantedList, nsIPrincipal::ENABLE_GRANTED);
   }
 
   if (NS_SUCCEEDED(rv) && aDeniedList) {
     rv = SetCanEnableCapability(aDeniedList, nsIPrincipal::ENABLE_DENIED);
   }
 
Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.216
diff -p -u -d -8 -r1.216 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	10 Aug 2003 02:26:11 -0000	1.216
+++ caps/src/nsScriptSecurityManager.cpp	19 Aug 2003 22:18:07 -0000
@@ -1568,22 +1568,29 @@ nsScriptSecurityManager::GetSubjectPrinc
     return GetSubjectPrincipal(cx, result);
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::GetSystemPrincipal(nsIPrincipal **result)
 {
     if (!mSystemPrincipal)
     {
-        mSystemPrincipal = new nsSystemPrincipal();
-        if (!mSystemPrincipal)
+        nsRefPtr<nsSystemPrincipal> system = new nsSystemPrincipal();
+        if (!system)
             return NS_ERROR_OUT_OF_MEMORY;
+
+        nsresult rv = system->Init();
+        if (NS_FAILED(rv))
+            return rv;
+
+        mSystemPrincipal = system;
     }
 
     NS_ADDREF(*result = mSystemPrincipal);
+
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::SubjectPrincipalIsSystem(PRBool* aIsSystem)
 {
     NS_ENSURE_ARG_POINTER(aIsSystem);
     *aIsSystem = PR_FALSE;
@@ -1604,47 +1611,74 @@ nsScriptSecurityManager::SubjectPrincipa
         return NS_OK;
     }
 
     return mSystemPrincipal->Equals(subject, aIsSystem);
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::GetCertificatePrincipal(const char* aCertID,
+                                                 nsIURI* aURI,
                                                  nsIPrincipal **result)
 {
     //-- Create a certificate principal
     nsRefPtr<nsPrincipal> certificate = new nsPrincipal();
     if (!certificate)
         return NS_ERROR_OUT_OF_MEMORY;
 
-    nsresult rv = certificate->SetCertificateID(aCertID);
-    if (NS_FAILED(rv))
-        return rv;
-
-    nsCOMPtr<nsIPrincipal> principal(certificate);
+    nsresult rv = certificate->Init(aCertID, aURI);
+    NS_ENSURE_SUCCESS(rv, rv);
 
     // Check to see if we already have this principal.
     nsCOMPtr<nsIPrincipal> fromTable;
-    mPrincipals.Get(principal, getter_AddRefs(fromTable));
-    if (fromTable)
-        principal = fromTable;
+    mPrincipals.Get(certificate, getter_AddRefs(fromTable));
+    if (fromTable) {
+        if (!aURI) {
+            certificate = NS_STATIC_CAST(nsPrincipal*,
+                                         NS_STATIC_CAST(nsIPrincipal*,
+                                                        fromTable));
+        } else {
+            nsXPIDLCString prefName;
+            nsXPIDLCString id;
+            nsXPIDLCString granted;
+            nsXPIDLCString denied;
+            rv = fromTable->GetPreferences(getter_Copies(prefName),
+                                           getter_Copies(id),
+                                           getter_Copies(granted),
+                                           getter_Copies(denied));
+            if (NS_SUCCEEDED(rv)) {
+                certificate = new nsPrincipal();
+                if (!certificate)
+                    return NS_ERROR_OUT_OF_MEMORY;
 
-    NS_ADDREF(*result = principal);
+                rv = certificate->InitFromPersistent(prefName, id,
+                                                     granted, denied,
+                                                     PR_TRUE, PR_FALSE);
+                if (NS_SUCCEEDED(rv))
+                    certificate->SetURI(aURI);
+            }
+        }
+    }
 
-    return NS_OK;
+    NS_ADDREF(*result = certificate);
+
+    return rv;
 }
 
 nsresult
 nsScriptSecurityManager::CreateCodebasePrincipal(nsIURI* aURI, nsIPrincipal **result)
 {
-    nsRefPtr<nsPrincipal> codebase = new nsPrincipal(aURI);
+    nsRefPtr<nsPrincipal> codebase = new nsPrincipal();
     if (!codebase)
         return NS_ERROR_OUT_OF_MEMORY;
 
+    nsresult rv = codebase->Init(nsnull, aURI);
+    if (NS_FAILED(rv))
+        return rv;
+
     NS_ADDREF(*result = codebase);
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::GetCodebasePrincipal(nsIURI *aURI,
                                               nsIPrincipal **result)
@@ -2266,17 +2300,17 @@ nsScriptSecurityManager::SetCanEnableCap
         static const char msg2[] = "Attempt to call SetCanEnableCapability or Invalidate when no system certificate has been established";
             JS_SetPendingException(cx, STRING_TO_JSVAL(JS_NewStringCopyZ(cx,
                                    mSystemCertificate ? msg1 : msg2)));
         return NS_ERROR_FAILURE;
     }
 
     //-- Get the target principal
     nsCOMPtr<nsIPrincipal> objectPrincipal;
-    rv =  GetCertificatePrincipal(certificateID, getter_AddRefs(objectPrincipal));
+    rv =  GetCertificatePrincipal(certificateID, nsnull, getter_AddRefs(objectPrincipal));
     if (NS_FAILED(rv)) return NS_ERROR_FAILURE;
     rv = objectPrincipal->SetCanEnableCapability(capability, canEnable);
     if (NS_FAILED(rv)) return NS_ERROR_FAILURE;
     return SavePrincipal(objectPrincipal);
 }
 
 ////////////////////////////////////////////////
 // Methods implementing nsIXPCSecurityManager //
@@ -3090,29 +3124,25 @@ nsScriptSecurityManager::InitPrincipals(
             isTrusted = (PL_strncmp(aPrefNames[c], codebaseTrustedName,
                                     sizeof(codebaseTrustedName) - 1) == 0);
         }
         else
         {
           NS_ERROR("Not a codebase or a certificate?!");
         }
 
-        nsCOMPtr<nsIPrincipal> principal;
         nsRefPtr<nsPrincipal> newPrincipal = new nsPrincipal();
-        if (newPrincipal)
-        {
-            rv = newPrincipal->InitFromPersistent(aPrefNames[c], id,
-                                                  grantedList, deniedList,
-                                                  isCert, isTrusted);
-            if (NS_SUCCEEDED(rv))
-                principal = do_QueryInterface(newPrincipal);
-        }
+        if (!newPrincipal)
+            return NS_ERROR_OUT_OF_MEMORY;
 
-        if (principal)
-            mPrincipals.Put(principal, principal);
+        rv = newPrincipal->InitFromPersistent(aPrefNames[c], id.get(),
+                                              grantedList, deniedList,
+                                              isCert, isTrusted);
+        if (NS_SUCCEEDED(rv))
+            mPrincipals.Put(newPrincipal, newPrincipal);
     }
     return NS_OK;
 }
 
 const char nsScriptSecurityManager::sJSEnabledPrefName[] =
     "javascript.enabled";
 const char nsScriptSecurityManager::sJSMailEnabledPrefName[] =
     "javascript.allow.mailnews";
Index: caps/src/nsSystemPrincipal.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsSystemPrincipal.cpp,v
retrieving revision 1.23
diff -p -u -d -8 -r1.23 nsSystemPrincipal.cpp
--- caps/src/nsSystemPrincipal.cpp	24 Jul 2003 05:14:31 -0000	1.23
+++ caps/src/nsSystemPrincipal.cpp	19 Aug 2003 22:18:07 -0000
@@ -163,36 +163,23 @@ nsSystemPrincipal::DisableCapability(con
 NS_IMETHODIMP 
 nsSystemPrincipal::GetURI(nsIURI** aURI)
 {
     *aURI = nsnull;
     return NS_OK;
 }
 
 NS_IMETHODIMP 
-nsSystemPrincipal::SetURI(nsIURI* aURI)
-{
-    return NS_OK;
-}
-
-NS_IMETHODIMP 
 nsSystemPrincipal::GetOrigin(char** aOrigin)
 {
     *aOrigin = ToNewCString(NS_LITERAL_CSTRING("[System]"));
     return *aOrigin ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
 }
 
 NS_IMETHODIMP 
-nsSystemPrincipal::SetCertificateID(const char* aID)
-{
-    return NS_OK;
-}
-
-
-NS_IMETHODIMP 
 nsSystemPrincipal::GetCertificateID(char** aID)
 {
     *aID = nsnull;
     return NS_OK;
 }
 
 NS_IMETHODIMP 
 nsSystemPrincipal::GetCommonName(char** aName)
@@ -238,20 +225,17 @@ NS_IMETHODIMP
 nsSystemPrincipal::SetSecurityPolicy(void* aSecurityPolicy)
 {
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsSystemPrincipal::GetJsPrincipals(JSPrincipals **jsprin)
 {
-    if (mJSPrincipals.nsIPrincipalPtr == nsnull) {
-        mJSPrincipals.nsIPrincipalPtr = this;
-        // No need for a ADDREF since it is a self-reference
-    }
+    NS_PRECONDITION(mJSPrincipals.nsIPrincipalPtr, "mJSPrincipals is uninitalized!");
 
     *jsprin = &mJSPrincipals;
     JSPRINCIPALS_HOLD(cx, *jsprin);
     return NS_OK;
 }
 
 
 //////////////////////////////////////////
@@ -278,19 +262,14 @@ nsSystemPrincipal::Write(nsIObjectOutput
 
 nsSystemPrincipal::nsSystemPrincipal()
 {
 }
 
 nsresult
 nsSystemPrincipal::Init()
 {
-    char *codebase = nsCRT::strdup("[System Principal]");
-    if (!codebase)
-        return NS_ERROR_OUT_OF_MEMORY;
-    if (NS_FAILED(mJSPrincipals.Init(codebase))) 
-        return NS_ERROR_FAILURE;
-    return NS_OK;
+    return mJSPrincipals.Init(this, "[System Principal]"); 
 }
 
 nsSystemPrincipal::~nsSystemPrincipal(void)
 {
 }
Index: content/base/public/nsContentUtils.h
===================================================================
RCS file: /cvsroot/mozilla/content/base/public/nsContentUtils.h,v
retrieving revision 1.27
diff -p -u -d -8 -r1.27 nsContentUtils.h
--- content/base/public/nsContentUtils.h	15 Jul 2003 02:07:51 -0000	1.27
+++ content/base/public/nsContentUtils.h	19 Aug 2003 22:18:07 -0000
@@ -244,16 +244,21 @@ public:
   {
     return sNameSpaceManager;
   };
 
   static nsIIOService* GetIOServiceWeakRef()
   {
     return sIOService;
   };
+
+  static nsIScriptSecurityManager* GetSecurityManager()
+  {
+    return sSecurityManager;
+  }
   
   static nsresult GenerateStateKey(nsIContent* aContent,
                                    nsIStatefulFrame::SpecialStateID aID,
                                    nsACString& aKey);
 
   /**
    * Create a new nsIURI from aSpec, using aBaseURI as the base.  The
    * origin charset of the new nsIURI will be the document charset of
Index: content/base/public/nsIDocument.h
===================================================================
RCS file: /cvsroot/mozilla/content/base/public/nsIDocument.h,v
retrieving revision 3.153
diff -p -u -d -8 -r3.153 nsIDocument.h
--- content/base/public/nsIDocument.h	11 Jul 2003 21:14:36 -0000	3.153
+++ content/base/public/nsIDocument.h	19 Aug 2003 22:18:08 -0000
@@ -124,20 +124,19 @@ public:
   NS_IMETHOD SetDocumentURL(nsIURI* aURL) = 0;
 
   /**
    * Return the principal responsible for this document.
    */
   NS_IMETHOD GetPrincipal(nsIPrincipal **aPrincipal) = 0;
 
   /**
-   * Update principal responsible for this document to the intersection
-   * of its previous value and aPrincipal.
+   * Set the principal responsible for this document.
    */
-  NS_IMETHOD AddPrincipal(nsIPrincipal *aPrincipal) = 0;
+  NS_IMETHOD SetPrincipal(nsIPrincipal *aPrincipal) = 0;
   
   /**
    * Return the LoadGroup for the document. May return null.
    */
   NS_IMETHOD GetDocumentLoadGroup(nsILoadGroup** aGroup) const = 0;
 
   /**
    * Return the base URL for relative URLs in the document (the document url
Index: content/base/src/nsDocument.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/base/src/nsDocument.cpp,v
retrieving revision 3.449
diff -p -u -d -8 -r3.449 nsDocument.cpp
--- content/base/src/nsDocument.cpp	5 Aug 2003 20:08:51 -0000	3.449
+++ content/base/src/nsDocument.cpp	19 Aug 2003 22:18:08 -0000
@@ -837,35 +837,19 @@ nsDocument::GetPrincipal(nsIPrincipal **
 
   *aPrincipal = mPrincipal;
   NS_ADDREF(*aPrincipal);
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
-nsDocument::AddPrincipal(nsIPrincipal *aNewPrincipal)
+nsDocument::SetPrincipal(nsIPrincipal *aNewPrincipal)
 {
-  NS_PRECONDITION(aNewPrincipal, "Null principal!");
-
-  if (!mPrincipal) {
-    nsCOMPtr<nsIPrincipal> principal;
-    nsresult rv = GetPrincipal(getter_AddRefs(principal));
-    NS_ENSURE_SUCCESS(rv, rv);
-  }
-
-  PRBool hasCert;
-  mPrincipal->GetHasCertificate(&hasCert);
-  if (hasCert) {
-    PRBool equal;
-    mPrincipal->Equals(aNewPrincipal, &equal);
-    if (!equal) {
-      mPrincipal->SetCertificateID(nsnull);
-    }
-  }
+  mPrincipal = aNewPrincipal;
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsDocument::GetContentType(nsAString& aContentType)
 {
   CopyUTF8toUTF16(mContentType, aContentType);
Index: content/base/src/nsDocument.h
===================================================================
RCS file: /cvsroot/mozilla/content/base/src/nsDocument.h,v
retrieving revision 3.210
diff -p -u -d -8 -r3.210 nsDocument.h
--- content/base/src/nsDocument.h	11 Jul 2003 22:32:25 -0000	3.210
+++ content/base/src/nsDocument.h	19 Aug 2003 22:18:08 -0000
@@ -267,20 +267,19 @@ public:
   NS_IMETHOD GetDocumentURL(nsIURI** aURI) const;
 
   /**
    * Return the principal responsible for this document.
    */
   NS_IMETHOD GetPrincipal(nsIPrincipal **aPrincipal);
 
   /**
-   * Update principal responsible for this document to the intersection
-   * of its previous value and aPrincipal, and return its new value.
+   * Set the principal responsible for this document.
    */
-  NS_IMETHOD AddPrincipal(nsIPrincipal *aPrincipal);
+  NS_IMETHOD SetPrincipal(nsIPrincipal *aPrincipal);
 
   /**
    * Get the Content-Type of this document.
    */
   // NS_IMETHOD GetContentType(nsAString& aContentType);
   // Already declared in nsIDOMNSDocument
 
   /**
Index: content/base/src/nsScriptLoader.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/base/src/nsScriptLoader.cpp,v
retrieving revision 1.43
diff -p -u -d -8 -r1.43 nsScriptLoader.cpp
--- content/base/src/nsScriptLoader.cpp	11 Aug 2003 18:13:16 -0000	1.43
+++ content/base/src/nsScriptLoader.cpp	19 Aug 2003 22:18:08 -0000
@@ -51,16 +51,49 @@ static NS_DEFINE_CID(kCharsetConverterMa
 //////////////////////////////////////////////////////////////
 //
 //////////////////////////////////////////////////////////////
 
 //////////////////////////////////////////////////////////////
 // Per-request data structure
 //////////////////////////////////////////////////////////////
 
+static already_AddRefed<nsIPrincipal>
+IntersectPrincipalCerts(nsIPrincipal *aOld, nsIPrincipal *aNew)
+{
+  NS_PRECONDITION(aOld, "Null old principal!");
+  NS_PRECONDITION(aNew, "Null new principal!");
+
+  nsIPrincipal *principal = aOld;
+
+  PRBool hasCert;
+  aOld->GetHasCertificate(&hasCert);
+  if (hasCert) {
+    PRBool equal;
+    aOld->Equals(aNew, &equal);
+    if (!equal) {
+      nsCOMPtr<nsIURI> uri, domain;
+      aOld->GetURI(getter_AddRefs(uri));
+      aOld->GetDomain(getter_AddRefs(domain));
+
+      nsContentUtils::GetSecurityManager()->GetCodebasePrincipal(uri, &principal);
+      if (principal && domain) {
+        principal->SetDomain(domain);
+      }
+
+      return principal;
+    }
+  }
+
+  NS_ADDREF(principal);
+
+  return principal;
+}
+
+
 class nsScriptLoadRequest : public nsISupports {
 public:
   nsScriptLoadRequest(nsIDOMHTMLScriptElement* aElement,
                       nsIScriptLoaderObserver* aObserver,
                       const char* aVersionString);
   virtual ~nsScriptLoadRequest();
 
   NS_DECL_ISUPPORTS
@@ -408,27 +441,24 @@ nsScriptLoader::ProcessScriptElement(nsI
     NS_ASSERTION(content, "nsIDOMHTMLScriptElement not implementing nsIContent");
     content->GetBaseURL(getter_AddRefs(baseURI));
     rv = NS_NewURI(getter_AddRefs(scriptURI), src, nsnull, baseURI);
     if (NS_FAILED(rv)) {
       return FireErrorNotification(rv, aElement, aObserver);
     }
     
     // Check that the containing page is allowed to load this URI.
-    nsCOMPtr<nsIScriptSecurityManager> securityManager(do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv));
-    if (NS_FAILED(rv)) {
-      return FireErrorNotification(rv, aElement, aObserver);
-    }
     nsCOMPtr<nsIURI> docURI;
     mDocument->GetDocumentURL(getter_AddRefs(docURI));
     if (!docURI) {
       return FireErrorNotification(NS_ERROR_UNEXPECTED, aElement, aObserver);
     }
-    rv = securityManager->CheckLoadURI(docURI, scriptURI, 
-                                       nsIScriptSecurityManager::ALLOW_CHROME);
+    rv = nsContentUtils::GetSecurityManager()->
+      CheckLoadURI(docURI, scriptURI, nsIScriptSecurityManager::ALLOW_CHROME);
+
     if (NS_FAILED(rv)) {
       return FireErrorNotification(rv, aElement, aObserver);
     }
     
     // After the security manager, the content-policy stuff gets a veto
     if (globalObject) {
       nsCOMPtr<nsIDOMWindow> domWin(do_QueryInterface(globalObject));
 
@@ -873,18 +903,24 @@ nsScriptLoader::OnStreamComplete(nsIStre
 
     //-- Merge the principal of the script file with that of the document
     if (channel) {
       nsCOMPtr<nsISupports> owner;
       channel->GetOwner(getter_AddRefs(owner));
       nsCOMPtr<nsIPrincipal> principal = do_QueryInterface(owner);
 
       if (principal) {
-        rv = mDocument->AddPrincipal(principal);
-        if (NS_FAILED(rv)) {
+        nsCOMPtr<nsIPrincipal> docPrincipal;
+        rv = mDocument->GetPrincipal(getter_AddRefs(docPrincipal));
+        if (NS_SUCCEEDED(rv)) {
+          nsCOMPtr<nsIPrincipal> newPrincipal =
+              IntersectPrincipalCerts(docPrincipal, principal);
+
+          mDocument->SetPrincipal(newPrincipal);
+        } else {
           mPendingRequests.RemoveObject(request);
           FireScriptAvailable(rv, request, NS_LITERAL_STRING(""));
           ProcessPendingReqests();
           return NS_OK;
         }
       }
     }
   }
Index: content/xml/document/src/nsXMLDocument.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xml/document/src/nsXMLDocument.cpp,v
retrieving revision 1.187
diff -p -u -d -8 -r1.187 nsXMLDocument.cpp
--- content/xml/document/src/nsXMLDocument.cpp	28 Jul 2003 23:12:46 -0000	1.187
+++ content/xml/document/src/nsXMLDocument.cpp	19 Aug 2003 22:18:09 -0000
@@ -326,17 +326,17 @@ nsXMLDocument::OnRedirect(nsIHttpChannel
     rv = secMan->CheckSameOrigin(nsnull, newLocation);
 
     stack->Pop(&cx);
   
     if (NS_FAILED(rv))
       return rv;
   }
 
-  return mPrincipal->SetURI(newLocation);
+  return secMan->GetCodebasePrincipal(newLocation, getter_AddRefs(mPrincipal));
 }
 
 NS_IMETHODIMP
 nsXMLDocument::EvaluateFIXptr(const nsAString& aExpression, nsIDOMRange **aRange)
 {
   nsresult rv;
   nsCOMPtr<nsIFIXptrEvaluator> e =
     do_CreateInstance("@mozilla.org/xmlextras/fixptrevaluator;1", &rv);
Index: content/xul/document/src/nsXULDocument.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xul/document/src/nsXULDocument.cpp,v
retrieving revision 1.576
diff -p -u -d -8 -r1.576 nsXULDocument.cpp
--- content/xul/document/src/nsXULDocument.cpp	6 Aug 2003 03:07:12 -0000	1.576
+++ content/xul/document/src/nsXULDocument.cpp	19 Aug 2003 22:18:09 -0000
@@ -679,19 +679,19 @@ nsXULDocument::GetPrincipal(nsIPrincipal
     *aPrincipal = nsnull;
     NS_ASSERTION(mMasterPrototype, "Missing master prototype. See bug 169036");
     NS_ENSURE_TRUE(mMasterPrototype, NS_ERROR_UNEXPECTED);
 
     return mMasterPrototype->GetDocumentPrincipal(aPrincipal);
 }
 
 NS_IMETHODIMP
-nsXULDocument::AddPrincipal(nsIPrincipal *aPrincipal)
+nsXULDocument::SetPrincipal(nsIPrincipal *aPrincipal)
 {
-    NS_NOTREACHED("AddPrincipal");
+    NS_NOTREACHED("SetPrincipal");
     return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 NS_IMETHODIMP
 nsXULDocument::EndLoad()
 {
     nsresult rv;
 
Index: content/xul/document/src/nsXULDocument.h
===================================================================
RCS file: /cvsroot/mozilla/content/xul/document/src/nsXULDocument.h,v
retrieving revision 1.152
diff -p -u -d -8 -r1.152 nsXULDocument.h
--- content/xul/document/src/nsXULDocument.h	11 Jul 2003 21:15:12 -0000	1.152
+++ content/xul/document/src/nsXULDocument.h	19 Aug 2003 22:18:09 -0000
@@ -100,17 +100,17 @@ public:
                                  nsILoadGroup* aLoadGroup,
                                  nsISupports* aContainer,
                                  nsIStreamListener **aDocListener,
                                  PRBool aReset = PR_TRUE,
                                  nsIContentSink* aSink = nsnull);
 
     NS_IMETHOD GetPrincipal(nsIPrincipal **aPrincipal);
 
-    NS_IMETHOD AddPrincipal(nsIPrincipal *aPrincipal);
+    NS_IMETHOD SetPrincipal(nsIPrincipal *aPrincipal);
 
     NS_IMETHOD SetContentType(const nsAString& aContentType);
 
     NS_IMETHOD EndLoad();
 
     NS_IMETHOD ContentAppended(nsIContent* aContainer,
                                PRInt32 aNewIndexInContainer);
 
Index: extensions/webservices/soap/src/nsHTTPSOAPTransport.cpp
===================================================================
RCS file: /cvsroot/mozilla/extensions/webservices/soap/src/nsHTTPSOAPTransport.cpp,v
retrieving revision 1.37
diff -p -u -d -8 -r1.37 nsHTTPSOAPTransport.cpp
--- extensions/webservices/soap/src/nsHTTPSOAPTransport.cpp	24 Jul 2003 05:15:03 -0000	1.37
+++ extensions/webservices/soap/src/nsHTTPSOAPTransport.cpp	19 Aug 2003 22:18:22 -0000
@@ -87,19 +87,19 @@ nsresult DebugPrintDOM(nsIDOMNode * node
 #else
 #define DEBUG_DUMP_DOCUMENT(message,doc)
 #endif
 
 static NS_NAMED_LITERAL_STRING(kAnyURISchemaType, "anyURI");
 
 /**
   * This method will replace the target document's 
-  * codebase pricipal with the subject codebase to
-  * override cross domain checks. So use caution 
-  * because this might lead to serious security breech
+  * codebase principal with the subject codebase to
+  * override cross-domain checks. So use caution 
+  * because this might lead to a serious security breach
   * if misused.
   * @param aDocument - The target/response document.
   */
 static 
 nsresult ChangePrincipal(nsIDOMDocument* aDocument)
 {
   if (!aDocument)
     return NS_OK;
@@ -115,27 +115,18 @@ nsresult ChangePrincipal(nsIDOMDocument*
   nsCOMPtr<nsIURI> targetURI;
   targetDoc->GetDocumentURL(getter_AddRefs(targetURI));
   rv = secMgr->CheckSameOrigin(nsnull, targetURI);
   // change the principal only if the script security 
   // manager has denied access.
   if (NS_FAILED(rv)) {
     nsCOMPtr<nsIPrincipal> subjectPrincipal;
     rv = secMgr->GetSubjectPrincipal(getter_AddRefs(subjectPrincipal));
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    nsCOMPtr<nsIURI> subjectURI;
-    rv = subjectPrincipal->GetURI(getter_AddRefs(subjectURI));
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    nsCOMPtr<nsIPrincipal> targetPrincipal;
-    rv = targetDoc->GetPrincipal(getter_AddRefs(targetPrincipal));
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    rv = targetPrincipal->SetURI(subjectURI);
+    if (NS_SUCCEEDED(rv))
+      targetDoc->SetPrincipal(subjectPrincipal);
   }
   return rv;
 }
 
 /**
  * Get and check the transport URI for accessibility.  In the future,
  * this might also attempt to automatically add a mustUnderstand
  * header to messages for untrusted sources and send them anyway.
Index: modules/oji/src/nsJVMManager.cpp
===================================================================
RCS file: /cvsroot/mozilla/modules/oji/src/nsJVMManager.cpp,v
retrieving revision 1.60
diff -p -u -d -8 -r1.60 nsJVMManager.cpp
--- modules/oji/src/nsJVMManager.cpp	24 Jul 2003 05:15:13 -0000	1.60
+++ modules/oji/src/nsJVMManager.cpp	19 Aug 2003 22:18:33 -0000
@@ -947,29 +947,30 @@ nsJVMManager::IsAllPermissionGranted(
     const char * lastFP,
     const char * lastCN, 
     const char * rootFP,
     const char * rootCN, 
     PRBool * isGranted)
 {
     nsresult rv      = NS_OK;
 
-    nsIPrincipal* pIPrincipal = NULL;
+    nsCOMPtr<nsIPrincipal> pIPrincipal;
   
     // Get the Script Security Manager.
 
     nsCOMPtr<nsIScriptSecurityManager> secMan = 
              do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);
     if (NS_FAILED(rv) || !secMan) return PR_FALSE;
 
     // Ask the Script Security Manager to make a Certificate Principal.
     // The fingerprint is a one way hash of this certificate. It is used
     // as the key to store the principal in the principal database.
 
-    rv = secMan->GetCertificatePrincipal(lastFP, &pIPrincipal);
+    rv = secMan->GetCertificatePrincipal(lastFP, nsnull,
+                                         getter_AddRefs(pIPrincipal));
     if (NS_FAILED(rv)) return PR_FALSE;
 
     // Set the common name.
     rv = pIPrincipal->SetCommonName(lastCN);
 
     PRInt16 ret;
 
     secMan->RequestCapability(pIPrincipal,"AllPermission",&ret);
Index: netwerk/protocol/jar/src/nsJARChannel.cpp
===================================================================
RCS file: /cvsroot/mozilla/netwerk/protocol/jar/src/nsJARChannel.cpp,v
retrieving revision 1.102
diff -p -u -d -8 -r1.102 nsJARChannel.cpp
--- netwerk/protocol/jar/src/nsJARChannel.cpp	24 Jul 2003 05:15:16 -0000	1.102
+++ netwerk/protocol/jar/src/nsJARChannel.cpp	19 Aug 2003 22:18:38 -0000
@@ -416,37 +416,26 @@ nsJARChannel::GetOwner(nsISupports **res
         return rv;
     }
 
     nsCOMPtr<nsIPrincipal> cert;
     rv = jar->GetCertificatePrincipal(mJarEntry.get(), getter_AddRefs(cert));
     if (NS_FAILED(rv)) return rv;
 
     if (cert) {
-        // Get the codebase principal
-        nsCOMPtr<nsIScriptSecurityManager> secMan = 
-                 do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);
-        if (NS_FAILED(rv)) return rv;
-
-        nsCOMPtr<nsIPrincipal> codebase;
-        rv = secMan->GetCodebasePrincipal(mJarBaseURI, 
-                                          getter_AddRefs(codebase));
+        nsXPIDLCString certID;
+        rv = cert->GetCertificateID(getter_Copies(certID));
         if (NS_FAILED(rv)) return rv;
 
-        nsCOMPtr<nsIURI> codebaseURI;
-        codebase->GetURI(getter_AddRefs(codebaseURI));
-
-        nsCOMPtr<nsIURI> domainURI;
-        codebase->GetDomain(getter_AddRefs(domainURI));
-        
-        // Join the certificate and the codebase
-        rv = cert->SetURI(codebaseURI);
+        nsCOMPtr<nsIScriptSecurityManager> secMan = 
+                 do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);
         if (NS_FAILED(rv)) return rv;
 
-        rv = cert->SetDomain(domainURI);
+        rv = secMan->GetCertificatePrincipal(certID, mJarBaseURI,
+                                             getter_AddRefs(cert));
         if (NS_FAILED(rv)) return rv;
 
         mOwner = do_QueryInterface(cert, &rv);
         if (NS_FAILED(rv)) return rv;
 
         NS_ADDREF(*result = mOwner);
     }
     return NS_OK;
Index: security/manager/ssl/src/nsNSSComponent.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsNSSComponent.cpp,v
retrieving revision 1.108
diff -p -u -d -8 -r1.108 nsNSSComponent.cpp
--- security/manager/ssl/src/nsNSSComponent.cpp	24 Jul 2003 05:15:18 -0000	1.108
+++ security/manager/ssl/src/nsNSSComponent.cpp	19 Aug 2003 22:18:42 -0000
@@ -1452,17 +1452,17 @@ nsNSSComponent::VerifySignature(const ch
         if (NS_FAILED(rv2)) return rv2;
       }
     }
     //-- Create a certificate principal with id and organization data
     nsAutoString fingerprint;
     rv2 = pCert->GetSha1Fingerprint(fingerprint);
     NS_LossyConvertUCS2toASCII fingerprintStr(fingerprint);
     if (NS_FAILED(rv2)) return rv2;
-    rv2 = mScriptSecurityManager->GetCertificatePrincipal(fingerprintStr.get(), aPrincipal);
+    rv2 = mScriptSecurityManager->GetCertificatePrincipal(fingerprintStr.get(), nsnull, aPrincipal);
     if (NS_FAILED(rv2) || !*aPrincipal) return rv2;
 
     nsAutoString orgName;
     rv2 = pCert->GetOrganization(orgName);
     if (NS_FAILED(rv2)) return rv2;
     NS_LossyConvertUCS2toASCII  orgNameStr(orgName);
     rv2 = (*aPrincipal)->SetCommonName(orgNameStr.get());
     if (NS_FAILED(rv2)) return rv2;
