? calljs.patch
? jsj3250.dll
? jsj3250.exp
? jsj3250.ilk
? jsj3250.lib
? module.rc
? module.res
Index: nsCLiveconnect.cpp
===================================================================
RCS file: /m/pub/mozilla/js/src/liveconnect/nsCLiveconnect.cpp,v
retrieving revision 1.26
diff -u -r1.26 nsCLiveconnect.cpp
--- nsCLiveconnect.cpp	30 Oct 2002 03:15:59 -0000	1.26
+++ nsCLiveconnect.cpp	19 Feb 2003 00:11:06 -0000
@@ -69,21 +69,21 @@
 
 #include "nsCLiveconnect.h"
 
-#include "jsinterp.h"  // XXX private API so we can auto-push a JSStackFrame
-
+#include "jsinterp.h"  // XXX private API so we can auto-push a JSStackFrame
+#include "nsIScriptSecurityManager.h"
 #include "nsIPrincipal.h"
 #include "nsNetUtil.h"
 #include "nsISecurityContext.h"
-#include "nsIScriptSecurityManager.h"
 #include "prmem.h"
 
 static nsresult
-CreatePrincipal(nsISupports* securitySupports,
-                nsIPrincipal ** outPrincipal)
+CreatePrincipal(nsISupports* aSecuritySupports,
+                nsIScriptSecurityManager* aSecMan,
+                nsIPrincipal ** aOutPrincipal)
 {
     nsresult rv;
     nsCOMPtr<nsISecurityContext> securityContext(
-        do_QueryInterface(securitySupports, &rv));
+        do_QueryInterface(aSecuritySupports, &rv));
     if (NS_FAILED(rv)) return rv;
 
     char originBuf1[512];
@@ -113,11 +113,7 @@
         PR_Free(origin);
     if (NS_FAILED(rv)) return rv;
 
-    nsCOMPtr<nsIScriptSecurityManager> secMan(
-        do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv));
-    if (NS_FAILED(rv)) return rv;
-
-    return secMan->GetCodebasePrincipal(originURI, outPrincipal);
+    return aSecMan->GetCodebasePrincipal(originURI, aOutPrincipal);
 }
 
 /***************************************************************************/
@@ -131,7 +127,8 @@
 class AutoPushJSContext
 {
 public:
-    AutoPushJSContext(nsISupports* aSecuritySupports, JSContext *cx);
+    AutoPushJSContext(nsISupports* aSecuritySupports,
+                      JSContext *cx);
 
     ~AutoPushJSContext();
 
@@ -164,40 +161,53 @@
                 // Leave the reference to the mContextStack to
                 // indicate that we need to pop it in our dtor.                                               
             }
-
         }
     }
-
-    memset(&mFrame, 0, sizeof(mFrame));
-
-    // See if there are any scripts on the stack.
-    // If not, we need to add a dummy frame with a principal.
-    PRBool hasScript = PR_FALSE;
-    JSStackFrame* tempFP = cx->fp;
-    while (tempFP)
-    {
-        if (tempFP->script)
-        {
-            hasScript = PR_TRUE;
-            break;
-        }
-        tempFP = tempFP->down;
-    };
-
-    if (!hasScript)
-    {
-        nsCOMPtr<nsIPrincipal> principal;
-        if (aSecuritySupports)
-            mPushResult = CreatePrincipal(aSecuritySupports, getter_AddRefs(principal));
-        else
-        {
-            nsCOMPtr<nsIScriptSecurityManager> secMan(
-                do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &mPushResult));
-            if (NS_SUCCEEDED(mPushResult))
-                mPushResult = secMan->GetPrincipalFromContext(cx, getter_AddRefs(principal));
-        }
-
-        if (NS_SUCCEEDED(mPushResult))
+
+    nsCOMPtr<nsIScriptSecurityManager> secMan(
+        do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &mPushResult));
+
+    if (NS_FAILED(mPushResult))
+        return;
+
+    nsCOMPtr<nsIPrincipal> principal;
+    if (aSecuritySupports)
+        mPushResult = CreatePrincipal(aSecuritySupports, secMan, getter_AddRefs(principal));
+    else
+        mPushResult = secMan->GetPrincipalFromContext(cx, getter_AddRefs(principal));
+
+    if (NS_FAILED(mPushResult))
+    {
+        JS_ReportError(cx, "failed to get a principal");
+        return;
+    }
+
+    // See if Javascript is enabled for the current window
+    PRBool jsEnabled = PR_FALSE;
+    mPushResult = secMan->CanExecuteScripts(cx, principal, &jsEnabled);
+    if (!jsEnabled)
+        mPushResult = NS_ERROR_FAILURE;
+
+    memset(&mFrame, 0, sizeof(mFrame));
+
+    if (NS_SUCCEEDED(mPushResult))
+    {
+        // See if there are any scripts on the stack.
+        // If not, we need to add a dummy frame with a principal.
+
+        PRBool hasScript = PR_FALSE;
+        JSStackFrame* tempFP = cx->fp;
+        while (tempFP)
+        {
+            if (tempFP->script)
+            {
+                hasScript = PR_TRUE;
+                break;
+            }
+            tempFP = tempFP->down;
+        };
+
+        if (!hasScript)
         {
             JSPrincipals* jsprinc;
             principal->GetJSPrincipals(&jsprinc);
@@ -213,9 +223,7 @@
             }
             else
                 mPushResult = NS_ERROR_OUT_OF_MEMORY;
-        }
-        else
-            JS_ReportError(cx, "failed to get a principal");
+        }
     }
 }
 
