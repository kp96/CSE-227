{"bug_id":232186,"commitHash":"521d560","commit_info":{"sha":"521d560df779ce98b721445d49efdd1025b95786","commit":{"author":{"name":"neil%parkwaycc.co.uk","email":"neil%parkwaycc.co.uk","date":"2004-01-31T21:11:27Z"},"committer":{"name":"neil%parkwaycc.co.uk","email":"neil%parkwaycc.co.uk","date":"2004-01-31T21:11:27Z"},"message":"Bug 232186 Remove deprecated nsIPref usage from PKI chrome moa=kaie r=caillon sr=brendan","tree":{"sha":"5dc4e3c61e84a3a6e4dcabfc6e77d8f0e17e0bb2","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/5dc4e3c61e84a3a6e4dcabfc6e77d8f0e17e0bb2"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/521d560df779ce98b721445d49efdd1025b95786","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/521d560df779ce98b721445d49efdd1025b95786","html_url":"https://github.com/mozilla/gecko-dev/commit/521d560df779ce98b721445d49efdd1025b95786","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/521d560df779ce98b721445d49efdd1025b95786/comments","author":null,"committer":null,"parents":[{"sha":"fe7960ecb656cd98b48893ecf4d423c1a8845e47","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/fe7960ecb656cd98b48893ecf4d423c1a8845e47","html_url":"https://github.com/mozilla/gecko-dev/commit/fe7960ecb656cd98b48893ecf4d423c1a8845e47"}],"stats":{"total":100,"additions":53,"deletions":47},"files":[{"sha":"3da3245456806b6ed37688073c9f72cf1061b2f3","filename":"security/manager/pki/resources/content/crlImportDialog.js","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/mozilla/gecko-dev/blob/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/crlImportDialog.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/crlImportDialog.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/pki/resources/content/crlImportDialog.js?ref=521d560df779ce98b721445d49efdd1025b95786","patch":"@@ -24,12 +24,11 @@ const nsPKIParamBlock    = \"@mozilla.org/security/pkiparamblock;1\";\n const nsIPKIParamBlock    = Components.interfaces.nsIPKIParamBlock;\n const nsIX509Cert         = Components.interfaces.nsIX509Cert;\n const nsICRLInfo          = Components.interfaces.nsICRLInfo;\n-const nsIPref             = Components.interfaces.nsIPref;\n+const nsIPrefService      = Components.interfaces.nsIPrefService\n \n var pkiParams;\n var cert;\n var crl;\n-var prefs;\n \n function onLoad()\n {\n@@ -60,16 +59,17 @@ function onLoad()\n     var orgUnit = document.getElementById(\"orgUnitText\");\n     orgUnit.setAttribute(\"value\", crl.organizationalUnit);\n \n-    prefs = Components.classes[\"@mozilla.org/preferences;1\"].getService(nsIPref);\n     var autoupdateEnabledString   = \"security.crl.autoupdate.enable.\" + crl.nameInDb;\n     \n     var updateEnabled = false;\n     try {\n-      updateEnabled = prefs.GetBoolPref(autoupdateEnabledString);\n+      var prefService = Components.classes[\"@mozilla.org/preferences-service;1\"].getService(nsIPrefService);\n+      var prefBranch = prefService.getBranch(null);\n+      updateEnabled = prefBranch.getBoolPref(autoupdateEnabledString);\n       if(updateEnabled) {\n         var autoupdateURLString       = \"security.crl.autoupdate.url.\" + crl.nameInDb;\n-        prefs.SetCharPref(autoupdateURLString,crl.lastFetchURL);\n-        prefs.savePrefFile(null);\n+        prefBranch.setCharPref(autoupdateURLString, crl.lastFetchURL);\n+        prefService.savePrefFile(null);\n       }\n     }catch(exception){}\n "},{"sha":"0ecdab7aad5cf434386e5119d26309539fda4d4e","filename":"security/manager/pki/resources/content/crlManager.js","status":"modified","additions":17,"deletions":15,"changes":32,"blob_url":"https://github.com/mozilla/gecko-dev/blob/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/crlManager.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/crlManager.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/pki/resources/content/crlManager.js?ref=521d560df779ce98b721445d49efdd1025b95786","patch":"@@ -26,11 +26,12 @@ const nsICRLInfo = Components.interfaces.nsICRLInfo;\n const nsISupportsArray = Components.interfaces.nsISupportsArray;\n const nsIPKIParamBlock    = Components.interfaces.nsIPKIParamBlock;\n const nsPKIParamBlock    = \"@mozilla.org/security/pkiparamblock;1\";\n-const nsIPref             = Components.interfaces.nsIPref;\n+const nsIPrefService      = Components.interfaces.nsIPrefService;\n \n var crlManager;\n var crls;\n-var prefs;\n+var prefService;\n+var prefBranch;\n \n var autoupdateEnabledBaseString   = \"security.crl.autoupdate.enable.\";\n var autoupdateTimeTypeBaseString  = \"security.crl.autoupdate.timingType.\";\n@@ -47,8 +48,9 @@ function onLoad()\n   var i;\n \n   crlManager = Components.classes[nsCRLManager].getService(nsICRLManager);\n-  prefs = Components.classes[\"@mozilla.org/preferences;1\"].getService(nsIPref);\n   crls = crlManager.getCrls();\n+  prefService = Components.classes[\"@mozilla.org/preferences-service;1\"].getService(nsIPrefService);\n+  prefBranch = prefService.getBranch(null);\n   var bundle = srGetStrBundle(\"chrome://pippki/locale/pippki.properties\");\n   var autoupdateEnabledString;\n   var autoupdateErrCntString;\n@@ -65,12 +67,12 @@ function onLoad()\n     var enabledStr = bundle.GetStringFromName(\"crlAutoupdateNotEnabled\");\n     var status = \"\";\n     try{\n-      enabled = prefs.GetBoolPref(autoupdateEnabledString)\n+      enabled = prefBranch.getBoolPref(autoupdateEnabledString)\n       if(enabled){\n         enabledStr = bundle.GetStringFromName(\"crlAutoupdateEnabled\");\n       }\n       var cnt;\n-      cnt = prefs.GetIntPref(autoupdateErrCntString);\n+      cnt = prefBranch.getIntPref(autoupdateErrCntString);\n       if(cnt > 0){\n         status = bundle.GetStringFromName(\"crlAutoupdateFailed\");\n       } else {\n@@ -116,26 +118,26 @@ function DeleteCrlSelected() {\n   \n   //First, check if autoupdate was enabled for this crl\n   try {\n-    autoupdateEnabled = prefs.GetBoolPref(autoupdateEnabledBaseString + id);\n+    autoupdateEnabled = prefBranch.getBoolPref(autoupdateEnabledBaseString + id);\n     //Note, if the pref is not present, we get an exception right here,\n     //and autoupdateEnabled remains false\n     autoupdateParamAvailable = true;\n-    prefs.ClearUserPref(autoupdateEnabledBaseString + id);\n-    prefs.ClearUserPref(autoupdateTimeTypeBaseString + id);\n-    prefs.ClearUserPref(autoupdateTimeBaseString + id);\n-    prefs.ClearUserPref(autoupdateURLBaseString + id);\n-    prefs.ClearUserPref(autoupdateDayCntString + id);\n-    prefs.ClearUserPref(autoupdateFreqCntString + id);\n-    prefs.ClearUserPref(autoupdateErrCntBaseString + id);\n-    prefs.ClearUserPref(autoupdateErrDetailBaseString + id);\n+    prefBranch.clearUserPref(autoupdateEnabledBaseString + id);\n+    prefBranch.clearUserPref(autoupdateTimeTypeBaseString + id);\n+    prefBranch.clearUserPref(autoupdateTimeBaseString + id);\n+    prefBranch.clearUserPref(autoupdateURLBaseString + id);\n+    prefBranch.clearUserPref(autoupdateDayCntString + id);\n+    prefBranch.clearUserPref(autoupdateFreqCntString + id);\n+    prefBranch.clearUserPref(autoupdateErrCntBaseString + id);\n+    prefBranch.clearUserPref(autoupdateErrDetailBaseString + id);\n   } catch(Exception){}\n \n   //Once we have deleted the prefs that can be deleted, we save the \n   //file if relevant, restart the scheduler, and once we are successful \n   //in doind that, we try to delete the crl \n   try{\n     if(autoupdateParamAvailable){\n-      prefs.savePrefFile(null);\n+      prefService.savePrefFile(null);\n     }\n \n     if(autoupdateEnabled){"},{"sha":"72271e40fad886eb1adcad9d94629cb01f6a54fc","filename":"security/manager/pki/resources/content/pref-ciphers.js","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/mozilla/gecko-dev/blob/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/pref-ciphers.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/pref-ciphers.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/pki/resources/content/pref-ciphers.js?ref=521d560df779ce98b721445d49efdd1025b95786","patch":"@@ -36,15 +36,17 @@\n  *\n  * ***** END LICENSE BLOCK ***** */\n \n-var gPrefs = null;\n+var gPrefService = null;\n+var gPrefBranch = null;\n \n function onLoad() {\n   doSetOKCancel(doOK, doCancel);\n \n   // Set checkboxes from prefs\n-  const nsIPref = Components.interfaces.nsIPref;\n+  const nsIPrefService = Components.interfaces.nsIPrefService;\n \n-  gPrefs = Components.classes[\"@mozilla.org/preferences;1\"].getService(nsIPref);\n+  gPrefService = Components.classes[\"@mozilla.org/preferences-service;1\"].getService(nsIPrefService);\n+  gPrefBranch = gPrefService.getBranch(null);\n \n   // Enumerate each checkbox on this page and set value\n   var prefElements = document.getElementsByAttribute(\"prefstring\", \"*\");\n@@ -54,12 +56,12 @@ function onLoad() {\n     var prefValue = false;\n \n     try {\n-      prefValue = gPrefs.GetBoolPref(prefString);\n+      prefValue = gPrefBranch.getBoolPref(prefString);\n     } catch(e) { /* Put debug output here */ }\n \n     element.setAttribute(\"checked\", prefValue);\n     // disable xul element if the pref is locked.\n-    if (gPrefs.PrefIsLocked(prefString)) {\n+    if (gPrefBranch.prefIsLocked(prefString)) {\n       element.disabled=true;\n     }\n   }\n@@ -85,10 +87,10 @@ function doOK() {\n       prefValue = (prefValue == \"true\");\n     }\n \n-    gPrefs.SetBoolPref(prefString, prefValue);\n+    gPrefBranch.setBoolPref(prefString, prefValue);\n   }\n \n-  gPrefs.savePrefFile(null);\n+  gPrefService.savePrefFile(null);\n  } catch(e) { }\n \n  window.close();"},{"sha":"f6a39edbb399192b5f009a72827abeb6cd47b9a4","filename":"security/manager/pki/resources/content/pref-crlupdate.js","status":"modified","additions":19,"deletions":17,"changes":36,"blob_url":"https://github.com/mozilla/gecko-dev/blob/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/pref-crlupdate.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/pref-crlupdate.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/pki/resources/content/pref-crlupdate.js?ref=521d560df779ce98b721445d49efdd1025b95786","patch":"@@ -24,11 +24,12 @@ const nsICRLManager = Components.interfaces.nsICRLManager;\n const nsCRLManager  = \"@mozilla.org/security/crlmanager;1\";\n const nsIPKIParamBlock    = Components.interfaces.nsIPKIParamBlock;\n const nsICRLInfo          = Components.interfaces.nsICRLInfo;\n-const nsIPref             = Components.interfaces.nsIPref;\n+const nsIPrefService      = Components.interfaces.nsIPrefService;\n  \n var crl;\n var bundle;\n-var prefs;\n+var prefService;\n+var prefBranch;\n var updateTypeRadio;\n var enabledCheckBox;\n var timeBasedRadio;\n@@ -61,7 +62,8 @@ function onLoad()\n   autoupdateErrDetailString = autoupdateErrDetailString + crl.nameInDb;\n \n   bundle = srGetStrBundle(\"chrome://pippki/locale/pippki.properties\");\n-  prefs = Components.classes[\"@mozilla.org/preferences;1\"].getService(nsIPref);\n+  prefService = Components.classes[\"@mozilla.org/preferences-service;1\"].getService(nsIPrefService);\n+  prefBranch = prefService.getBranch(null);\n \n   updateTypeRadio = document.getElementById(\"autoUpdateType\");\n   enabledCheckBox = document.getElementById(\"enableCheckBox\");\n@@ -95,7 +97,7 @@ function initializeSelection()\n   var advertisedMenuNode;\n   \n   try {\n-    var isEnabled = prefs.GetBoolPref(autoupdateEnabledString);\n+    var isEnabled = prefBranch.getBoolPref(autoupdateEnabledString);\n     enabledCheckBox.checked = isEnabled;\n   } catch(exception){\n     enabledCheckBox.checked = false;\n@@ -114,7 +116,7 @@ function initializeSelection()\n   \n   //Set up the initial selections based on defaults and prefs, if any\n   try{\n-    var timingPref = prefs.GetIntPref(autoupdateTimeTypeString);\n+    var timingPref = prefBranch.getIntPref(autoupdateTimeTypeString);\n     if(timingPref != null) {\n       if(timingPref == crlManager.TYPE_AUTOUPDATE_TIME_BASED) {\n         if(hasNextUpdate){\n@@ -144,7 +146,7 @@ function initializeSelection()\n   //Now, retrieving the day count\n   var timeBasedBox = document.getElementById(\"nextUpdateDay\");\n   try {\n-    var dayCnt = prefs.GetCharPref(autoupdateDayCntString);\n+    var dayCnt = prefBranch.getCharPref(autoupdateDayCntString);\n     //alert(dayCnt);\n     if(dayCnt != null){\n       timeBasedBox.value = dayCnt;\n@@ -157,7 +159,7 @@ function initializeSelection()\n \n   var freqBasedBox = document.getElementById(\"nextUpdateFreq\");\n   try {\n-    var freqCnt = prefs.GetCharPref(autoupdateFreqCntString);\n+    var freqCnt = prefBranch.getCharPref(autoupdateFreqCntString);\n     //alert(freqCnt);\n     if(freqCnt != null){\n       freqBasedBox.value = freqCnt;\n@@ -173,8 +175,8 @@ function initializeSelection()\n   var cnt = 0;\n   var text;\n   try{\n-    cnt = prefs.GetIntPref(autoupdateErrCntString);\n-    txt = prefs.GetCharPref(autoupdateErrDetailString);\n+    cnt = prefBranch.getIntPref(autoupdateErrCntString);\n+    txt = prefBranch.getCharPref(autoupdateErrDetailString);\n   }catch(exception){}\n \n   if( cnt > 0 ){\n@@ -204,31 +206,31 @@ function onAccept()\n      return false;\n \n    //set enable pref\n-   prefs.SetBoolPref(autoupdateEnabledString, enabledCheckBox.checked );\n+   prefBranch.setBoolPref(autoupdateEnabledString, enabledCheckBox.checked );\n    \n    //set URL TYPE and value prefs - always to last fetch url - till we have anything else available\n-   prefs.SetCharPref(autoupdateURLString,crl.lastFetchURL);\n+   prefBranch.setCharPref(autoupdateURLString, crl.lastFetchURL);\n    \n    var timingTypeId = updateTypeRadio.selectedItem.id;\n    var updateTime;\n    var dayCnt = (document.getElementById(\"nextUpdateDay\")).value;\n    var freqCnt = (document.getElementById(\"nextUpdateFreq\")).value;\n \n    if(timingTypeId == \"timeBasedRadio\"){\n-     prefs.SetIntPref(autoupdateTimeTypeString,crlManager.TYPE_AUTOUPDATE_TIME_BASED);\n+     prefBranch.setIntPref(autoupdateTimeTypeString, crlManager.TYPE_AUTOUPDATE_TIME_BASED);\n      updateTime = crlManager.computeNextAutoUpdateTime(crl, crlManager.TYPE_AUTOUPDATE_TIME_BASED, dayCnt);\n    } else {\n-     prefs.SetIntPref(autoupdateTimeTypeString,crlManager.TYPE_AUTOUPDATE_FREQ_BASED);\n+     prefBranch.setIntPref(autoupdateTimeTypeString, crlManager.TYPE_AUTOUPDATE_FREQ_BASED);\n      updateTime = crlManager.computeNextAutoUpdateTime(crl, crlManager.TYPE_AUTOUPDATE_FREQ_BASED, freqCnt);\n    }\n \n    //alert(updateTime);\n-   prefs.SetCharPref(autoupdateTimeString,updateTime); \n-   prefs.SetCharPref(autoupdateDayCntString,dayCnt);\n-   prefs.SetCharPref(autoupdateFreqCntString,freqCnt);\n+   prefBranch.setCharPref(autoupdateTimeString, updateTime); \n+   prefBranch.setCharPref(autoupdateDayCntString, dayCnt);\n+   prefBranch.setCharPref(autoupdateFreqCntString, freqCnt);\n \n    //Save Now\n-   prefs.savePrefFile(null);\n+   prefService.savePrefFile(null);\n    \n    crlManager.rescheduleCRLAutoUpdate();\n    //Close dialog by returning true"},{"sha":"16f1aaa3388dd1cba0f277329865355432b79d79","filename":"security/manager/pki/resources/content/resetpassword.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/resetpassword.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/521d560df779ce98b721445d49efdd1025b95786/security/manager/pki/resources/content/resetpassword.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/pki/resources/content/resetpassword.js?ref=521d560df779ce98b721445d49efdd1025b95786","patch":"@@ -53,9 +53,9 @@ function resetPassword()\n   var token = pk11db.findTokenByName(tokenName);\n   token.reset();\n \n-  var pref = Components.classes['@mozilla.org/preferences;1'];\n+  var pref = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService);\n   if (pref) {\n-    pref = pref.getService(Components.interfaces.nsIPrefBranch);\n+    pref = pref.getBranch(null);\n     try {\n       if (pref.getBoolPref(\"wallet.crypto\")) {\n         // data in wallet is encrypted, clear it"}]},"blames":["cc76b7eb","31db9b54","a16a9521","432f3e94","090cc567","cc76b7eb","31db9b54","a1a76076","8ac4991f5","31db9b54","cc76b7eb","5592ed3a","432f3e94","0ef6c11c","d215909f"]}