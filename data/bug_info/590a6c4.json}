{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas590a6c4\""},"diff":[{"chunks":[{"content":"@@ -50,10 +50,11 @@ MODULE_NAME     = nsXBMModule","changes":[{"type":"normal","normal":true,"ln1":50,"ln2":50,"content":" LIBXUL_LIBRARY  = 1"},{"type":"normal","normal":true,"ln1":51,"ln2":51,"content":" "},{"type":"normal","normal":true,"ln1":52,"ln2":52,"content":" REQUIRES\t= xpcom \\"},{"type":"del","del":true,"ln":53,"content":"-\t\t  gfx \\"},{"type":"del","del":true,"ln":54,"content":"-\t\t  imglib2 \\"},{"type":"del","del":true,"ln":55,"content":"-\t\t  thebes \\"},{"type":"del","del":true,"ln":56,"content":"-\t\t  $(NULL)"},{"type":"add","add":true,"ln":53,"content":"+\t\t\t  string \\"},{"type":"add","add":true,"ln":54,"content":"+\t\t\t  gfx \\"},{"type":"add","add":true,"ln":55,"content":"+\t\t\t  thebes \\"},{"type":"add","add":true,"ln":56,"content":"+\t\t\t  imglib2 \\"},{"type":"add","add":true,"ln":57,"content":"+\t\t\t  $(NULL)"},{"type":"normal","normal":true,"ln1":57,"ln2":58,"content":" "},{"type":"normal","normal":true,"ln1":58,"ln2":59,"content":" CPPSRCS        = nsXBMDecoder.cpp"},{"type":"normal","normal":true,"ln1":59,"ln2":60,"content":" "}],"oldStart":50,"oldLines":10,"newStart":50,"newLines":11}],"deletions":4,"additions":5,"from":"modules/libpr0n/decoders/xbm/Makefile.in","to":"modules/libpr0n/decoders/xbm/Makefile.in","index":["3334742..cf1f802","100644"]},{"chunks":[{"content":"@@ -55,9 +55,19 @@","changes":[{"type":"normal","normal":true,"ln1":55,"ln2":55,"content":" #include \"nsIProperties.h\""},{"type":"normal","normal":true,"ln1":56,"ln2":56,"content":" #include \"nsISupportsPrimitives.h\""},{"type":"normal","normal":true,"ln1":57,"ln2":57,"content":" "},{"type":"add","add":true,"ln":58,"content":"+#include \"gfxColor.h\""},{"type":"add","add":true,"ln":59,"content":"+#include \"nsIImage.h\""},{"type":"add","add":true,"ln":60,"content":"+#include \"nsIInterfaceRequestorUtils.h\""},{"type":"add","add":true,"ln":61,"content":"+"},{"type":"add","add":true,"ln":62,"content":"+// Static colormap"},{"type":"add","add":true,"ln":63,"content":"+static const PRUint32 kColors[2] = {"},{"type":"add","add":true,"ln":64,"content":"+    GFX_PACKED_PIXEL(0, 0, 0, 0),     // Transparent "},{"type":"add","add":true,"ln":65,"content":"+    GFX_PACKED_PIXEL(255, 0, 0, 0)    // Black"},{"type":"add","add":true,"ln":66,"content":"+};"},{"type":"add","add":true,"ln":67,"content":"+"},{"type":"normal","normal":true,"ln1":58,"ln2":68,"content":" NS_IMPL_ISUPPORTS1(nsXBMDecoder, imgIDecoder)"},{"type":"normal","normal":true,"ln1":59,"ln2":69,"content":" "},{"type":"del","del":true,"ln":60,"content":"-nsXBMDecoder::nsXBMDecoder() : mBuf(nsnull), mPos(nsnull), mAlphaRow(nsnull)"},{"type":"add","add":true,"ln":70,"content":"+nsXBMDecoder::nsXBMDecoder() : mBuf(nsnull), mPos(nsnull), mImageData(nsnull)"},{"type":"normal","normal":true,"ln1":61,"ln2":71,"content":" {"},{"type":"normal","normal":true,"ln1":62,"ln2":72,"content":" }"},{"type":"normal","normal":true,"ln1":63,"ln2":73,"content":" "}],"oldStart":55,"oldLines":9,"newStart":55,"newLines":19},{"content":"@@ -65,9 +75,6 @@ nsXBMDecoder::~nsXBMDecoder()","changes":[{"type":"normal","normal":true,"ln1":65,"ln2":75,"content":" {"},{"type":"normal","normal":true,"ln1":66,"ln2":76,"content":"     if (mBuf)"},{"type":"normal","normal":true,"ln1":67,"ln2":77,"content":"         free(mBuf);"},{"type":"del","del":true,"ln":68,"content":"-"},{"type":"del","del":true,"ln":69,"content":"-    if (mAlphaRow)"},{"type":"del","del":true,"ln":70,"content":"-        free(mAlphaRow);"},{"type":"normal","normal":true,"ln1":71,"ln2":78,"content":" }"},{"type":"normal","normal":true,"ln1":72,"ln2":79,"content":" "},{"type":"normal","normal":true,"ln1":73,"ln2":80,"content":" NS_IMETHODIMP nsXBMDecoder::Init(imgILoad *aLoad)"}],"oldStart":65,"oldLines":9,"newStart":75,"newLines":6},{"content":"@@ -87,28 +94,18 @@ NS_IMETHODIMP nsXBMDecoder::Init(imgILoad *aLoad)","changes":[{"type":"normal","normal":true,"ln1":87,"ln2":94,"content":" "},{"type":"normal","normal":true,"ln1":88,"ln2":95,"content":"     mCurRow = mBufSize = mWidth = mHeight = 0;"},{"type":"normal","normal":true,"ln1":89,"ln2":96,"content":"     mState = RECV_HEADER;"},{"type":"del","del":true,"ln":90,"content":"-    mHasNoAlpha = PR_TRUE;"},{"type":"normal","normal":true,"ln1":91,"ln2":97,"content":" "},{"type":"normal","normal":true,"ln1":92,"ln2":98,"content":"     return NS_OK;"},{"type":"normal","normal":true,"ln1":93,"ln2":99,"content":" }"},{"type":"normal","normal":true,"ln1":94,"ln2":100,"content":" "},{"type":"normal","normal":true,"ln1":95,"ln2":101,"content":" NS_IMETHODIMP nsXBMDecoder::Close()"},{"type":"normal","normal":true,"ln1":96,"ln2":102,"content":" {"},{"type":"del","del":true,"ln":97,"content":"-    if (mHasNoAlpha) {"},{"type":"del","del":true,"ln":98,"content":"-        nsCOMPtr<nsIImage> img(do_GetInterface(mFrame));"},{"type":"del","del":true,"ln":99,"content":"-        img->SetHasNoAlpha();"},{"type":"del","del":true,"ln":100,"content":"-    }"},{"type":"del","del":true,"ln":101,"content":"-"},{"type":"normal","normal":true,"ln1":102,"ln2":103,"content":"     mObserver->OnStopContainer(nsnull, mImage);"},{"type":"normal","normal":true,"ln1":103,"ln2":104,"content":"     mObserver->OnStopDecode(nsnull, NS_OK, nsnull);"},{"type":"normal","normal":true,"ln1":104,"ln2":105,"content":"     mObserver = nsnull;"},{"type":"normal","normal":true,"ln1":105,"ln2":106,"content":"     mImage = nsnull;"},{"type":"normal","normal":true,"ln1":106,"ln2":107,"content":"     mFrame = nsnull;"},{"type":"del","del":true,"ln":107,"content":"-"},{"type":"del","del":true,"ln":108,"content":"-    if (mAlphaRow) {"},{"type":"del","del":true,"ln":109,"content":"-        free(mAlphaRow);"},{"type":"del","del":true,"ln":110,"content":"-        mAlphaRow = nsnull;"},{"type":"del","del":true,"ln":111,"content":"-    }"},{"type":"add","add":true,"ln":108,"content":"+    mImageData = nsnull;"},{"type":"normal","normal":true,"ln1":112,"ln2":109,"content":" "},{"type":"normal","normal":true,"ln1":113,"ln2":110,"content":"     return NS_OK;"},{"type":"normal","normal":true,"ln1":114,"ln2":111,"content":" }"}],"oldStart":87,"oldLines":28,"newStart":94,"newLines":18},{"content":"@@ -206,19 +203,8 @@ nsresult nsXBMDecoder::ProcessData(const char* aData, PRUint32 aCount) {","changes":[{"type":"normal","normal":true,"ln1":206,"ln2":203,"content":"             }"},{"type":"normal","normal":true,"ln1":207,"ln2":204,"content":"         }"},{"type":"normal","normal":true,"ln1":208,"ln2":205,"content":" "},{"type":"del","del":true,"ln":209,"content":"-        mImage->AppendFrame(mFrame);"},{"type":"del","del":true,"ln":210,"content":"-        mObserver->OnStartFrame(nsnull, mFrame);"},{"type":"del","del":true,"ln":211,"content":"-"},{"type":"del","del":true,"ln":212,"content":"-        PRUint32 bpr;"},{"type":"del","del":true,"ln":213,"content":"-        mFrame->GetImageBytesPerRow(&bpr);"},{"type":"del","del":true,"ln":214,"content":"-        PRUint32 abpr;"},{"type":"del","del":true,"ln":215,"content":"-        mFrame->GetAlphaBytesPerRow(&abpr);"},{"type":"del","del":true,"ln":216,"content":"-"},{"type":"del","del":true,"ln":217,"content":"-        mAlphaRow = (PRUint8*)malloc(abpr);"},{"type":"del","del":true,"ln":218,"content":"-        if (!mAlphaRow) {"},{"type":"del","del":true,"ln":219,"content":"-          mState = RECV_DONE;"},{"type":"del","del":true,"ln":220,"content":"-          return NS_ERROR_OUT_OF_MEMORY;"},{"type":"del","del":true,"ln":221,"content":"-        }"},{"type":"add","add":true,"ln":206,"content":"+        PRUint32 imageLen;"},{"type":"add","add":true,"ln":207,"content":"+        mFrame->GetImageData((PRUint8**)&mImageData, &imageLen);"},{"type":"normal","normal":true,"ln1":222,"ln2":208,"content":" "},{"type":"normal","normal":true,"ln1":223,"ln2":209,"content":"         mState = RECV_SEEK;"},{"type":"normal","normal":true,"ln1":224,"ln2":210,"content":" "}],"oldStart":206,"oldLines":19,"newStart":203,"newLines":8},{"content":"@@ -236,12 +222,8 @@ nsresult nsXBMDecoder::ProcessData(const char* aData, PRUint32 aCount) {","changes":[{"type":"normal","normal":true,"ln1":236,"ln2":222,"content":"         }"},{"type":"normal","normal":true,"ln1":237,"ln2":223,"content":"     }"},{"type":"normal","normal":true,"ln1":238,"ln2":224,"content":"     if (mState == RECV_DATA) {"},{"type":"del","del":true,"ln":239,"content":"-        PRUint32 bpr;"},{"type":"del","del":true,"ln":240,"content":"-        mFrame->GetImageBytesPerRow(&bpr);"},{"type":"del","del":true,"ln":241,"content":"-        PRUint32 abpr;"},{"type":"del","del":true,"ln":242,"content":"-        mFrame->GetAlphaBytesPerRow(&abpr);"},{"type":"del","del":true,"ln":243,"content":"-        PRBool hiByte = PR_TRUE;"},{"type":"del","del":true,"ln":244,"content":"-        PRBool chunkHasNoAlpha = PR_TRUE;"},{"type":"add","add":true,"ln":225,"content":"+        nsCOMPtr<nsIImage> img = do_GetInterface(mFrame);"},{"type":"add","add":true,"ln":226,"content":"+        PRUint32 *ar = mImageData + mCurRow * mWidth + mCurCol;"},{"type":"normal","normal":true,"ln1":245,"ln2":227,"content":" "},{"type":"normal","normal":true,"ln1":246,"ln2":228,"content":"         do {"},{"type":"normal","normal":true,"ln1":247,"ln2":229,"content":"             PRUint32 pixel = strtoul(mPos, &endPtr, 0);"}],"oldStart":236,"oldLines":12,"newStart":222,"newLines":8},{"content":"@@ -257,53 +239,39 @@ nsresult nsXBMDecoder::ProcessData(const char* aData, PRUint32 aCount) {","changes":[{"type":"normal","normal":true,"ln1":257,"ln2":239,"content":"             if (!*endPtr) {"},{"type":"normal","normal":true,"ln1":258,"ln2":240,"content":"                 // Need more data"},{"type":"normal","normal":true,"ln1":259,"ln2":241,"content":"                 return NS_OK;"},{"type":"del","del":true,"ln":260,"content":"-            } else if (*endPtr != ',') {"},{"type":"add","add":true,"ln":242,"content":"+            }"},{"type":"add","add":true,"ln":243,"content":"+            if (*endPtr != ',') {"},{"type":"normal","normal":true,"ln1":261,"ln2":244,"content":"                 *endPtr = '\\0';"},{"type":"normal","normal":true,"ln1":262,"ln2":245,"content":"                 mState = RECV_DONE;  // strange character (or ending '}')"},{"type":"add","add":true,"ln":246,"content":"+            } else {"},{"type":"add","add":true,"ln":247,"content":"+                // Skip the comma"},{"type":"add","add":true,"ln":248,"content":"+                endPtr++;"},{"type":"normal","normal":true,"ln1":263,"ln2":249,"content":"             }"},{"type":"del","del":true,"ln":264,"content":"-            if (!mIsX10 || !hiByte)"},{"type":"del","del":true,"ln":265,"content":"-                mPos = endPtr; // go to next value only when done with this one"},{"type":"del","del":true,"ln":266,"content":"-            if (mIsX10) {"},{"type":"del","del":true,"ln":267,"content":"-                // handle X10 flavor short values"},{"type":"del","del":true,"ln":268,"content":"-                if (hiByte)"},{"type":"del","del":true,"ln":269,"content":"-                    pixel >>= 8;"},{"type":"del","del":true,"ln":270,"content":"-                hiByte = !hiByte;"},{"type":"add","add":true,"ln":250,"content":"+            mPos = endPtr;"},{"type":"add","add":true,"ln":251,"content":"+            PRUint32 numPixels = 8;"},{"type":"add","add":true,"ln":252,"content":"+            if (mIsX10) { // X10 use 16bits values, but bytes are swapped"},{"type":"add","add":true,"ln":253,"content":"+                pixel = (pixel >> 8) | ((pixel&0xFF) << 8);"},{"type":"add","add":true,"ln":254,"content":"+                numPixels = 16;"},{"type":"normal","normal":true,"ln1":271,"ln2":255,"content":"             }"},{"type":"del","del":true,"ln":272,"content":"-"},{"type":"del","del":true,"ln":273,"content":"-            PRUint32 *ar = ((PRUint32*)mAlphaRow) + mCurCol;"},{"type":"del","del":true,"ln":274,"content":"-            const int alphas = PR_MIN(8, mWidth - mCurCol);"},{"type":"del","del":true,"ln":275,"content":"-            for (int i = 0; i < alphas; i++) {"},{"type":"del","del":true,"ln":276,"content":"-                const PRUint8 val = ((pixel & (1 << i)) >> i) ? 255 : 0;"},{"type":"del","del":true,"ln":277,"content":"-                *ar++ = (val << 24) | 0;"},{"type":"del","del":true,"ln":278,"content":"-                if (val == 0)"},{"type":"del","del":true,"ln":279,"content":"-                    chunkHasNoAlpha = PR_FALSE;"},{"type":"add","add":true,"ln":256,"content":"+            numPixels = PR_MIN(numPixels, mWidth - mCurCol);"},{"type":"add","add":true,"ln":257,"content":"+            for (PRUint32 i = numPixels; i > 0; --i) {"},{"type":"add","add":true,"ln":258,"content":"+                *ar++ = kColors[pixel & 1];"},{"type":"add","add":true,"ln":259,"content":"+                pixel >>= 1;"},{"type":"normal","normal":true,"ln1":280,"ln2":260,"content":"             }"},{"type":"del","del":true,"ln":281,"content":"-"},{"type":"del","del":true,"ln":282,"content":"-            mCurCol = PR_MIN(mCurCol + 8, mWidth);"},{"type":"add","add":true,"ln":261,"content":"+            mCurCol += numPixels;"},{"type":"normal","normal":true,"ln1":283,"ln2":262,"content":"             if (mCurCol == mWidth || mState == RECV_DONE) {"},{"type":"del","del":true,"ln":284,"content":"-                mFrame->SetImageData(mAlphaRow, abpr, mCurRow * abpr);"},{"type":"del","del":true,"ln":285,"content":"-"},{"type":"normal","normal":true,"ln1":286,"ln2":263,"content":"                 nsIntRect r(0, mCurRow, mWidth, 1);"},{"type":"add","add":true,"ln":264,"content":"+                img->ImageUpdated(nsnull, nsImageUpdateFlags_kBitsChanged, &r);"},{"type":"normal","normal":true,"ln1":287,"ln2":265,"content":"                 mObserver->OnDataAvailable(nsnull, mFrame, &r);"},{"type":"normal","normal":true,"ln1":288,"ln2":266,"content":" "},{"type":"del","del":true,"ln":289,"content":"-                if ((mCurRow + 1) == mHeight) {"},{"type":"add","add":true,"ln":267,"content":"+                mCurRow++;"},{"type":"add","add":true,"ln":268,"content":"+                if (mCurRow == mHeight) {"},{"type":"normal","normal":true,"ln1":290,"ln2":269,"content":"                     mState = RECV_DONE;"},{"type":"normal","normal":true,"ln1":291,"ln2":270,"content":"                     return mObserver->OnStopFrame(nsnull, mFrame);"},{"type":"normal","normal":true,"ln1":292,"ln2":271,"content":"                 }"},{"type":"del","del":true,"ln":293,"content":"-                mCurRow++;"},{"type":"normal","normal":true,"ln1":294,"ln2":272,"content":"                 mCurCol = 0;"},{"type":"normal","normal":true,"ln1":295,"ln2":273,"content":"             }"},{"type":"del","del":true,"ln":296,"content":"-"},{"type":"del","del":true,"ln":297,"content":"-            // Skip the comma"},{"type":"del","del":true,"ln":298,"content":"-            NS_ASSERTION(mState != RECV_DATA || *mPos == ',' ||"},{"type":"del","del":true,"ln":299,"content":"-                         (mIsX10 && hiByte),"},{"type":"del","del":true,"ln":300,"content":"-                         \"Must be a comma\");"},{"type":"del","del":true,"ln":301,"content":"-            if (*mPos == ',')"},{"type":"del","del":true,"ln":302,"content":"-                mPos++;"},{"type":"normal","normal":true,"ln1":303,"ln2":274,"content":"         } while ((mState == RECV_DATA) && *mPos);"},{"type":"del","del":true,"ln":304,"content":"-"},{"type":"del","del":true,"ln":305,"content":"-        if (!chunkHasNoAlpha)"},{"type":"del","del":true,"ln":306,"content":"-            mHasNoAlpha = PR_FALSE;"},{"type":"normal","normal":true,"ln1":307,"ln2":275,"content":"     }"},{"type":"normal","normal":true,"ln1":308,"ln2":276,"content":" "},{"type":"normal","normal":true,"ln1":309,"ln2":277,"content":"     return NS_OK;"}],"oldStart":257,"oldLines":53,"newStart":239,"newLines":39}],"deletions":66,"additions":34,"from":"modules/libpr0n/decoders/xbm/nsXBMDecoder.cpp","to":"modules/libpr0n/decoders/xbm/nsXBMDecoder.cpp","index":["d2bf215..74ea2b6","100644"]},{"chunks":[{"content":"@@ -86,11 +86,10 @@ private:","changes":[{"type":"normal","normal":true,"ln1":86,"ln2":86,"content":"     PRUint32 mXHotspot;"},{"type":"normal","normal":true,"ln1":87,"ln2":87,"content":"     PRUint32 mYHotspot;"},{"type":"normal","normal":true,"ln1":88,"ln2":88,"content":" "},{"type":"del","del":true,"ln":89,"content":"-    PRUint8* mAlphaRow; // alpha data for the row"},{"type":"add","add":true,"ln":89,"content":"+    PRUint32* mImageData;    // Pointer into the Cairo image data"},{"type":"normal","normal":true,"ln1":90,"ln2":90,"content":" "},{"type":"normal","normal":true,"ln1":91,"ln2":91,"content":"     PRPackedBool mIsCursor;"},{"type":"normal","normal":true,"ln1":92,"ln2":92,"content":"     PRPackedBool mIsX10; // X10 flavor XBM?"},{"type":"del","del":true,"ln":93,"content":"-    PRPackedBool mHasNoAlpha;"},{"type":"normal","normal":true,"ln1":94,"ln2":93,"content":" "},{"type":"normal","normal":true,"ln1":95,"ln2":94,"content":"     enum {"},{"type":"normal","normal":true,"ln1":96,"ln2":95,"content":"         RECV_HEADER,"}],"oldStart":86,"oldLines":11,"newStart":86,"newLines":10}],"deletions":2,"additions":1,"from":"modules/libpr0n/decoders/xbm/nsXBMDecoder.h","to":"modules/libpr0n/decoders/xbm/nsXBMDecoder.h","index":["34cde06..77065bc","100644"]}]}