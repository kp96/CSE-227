{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas4f984e3\""},"diff":[{"chunks":[{"content":"@@ -375,6 +375,24 @@ void nsListControlFrame::PaintFocus(nsIRenderingContext& aRC, nsPoint aPt)","changes":[{"type":"normal","normal":true,"ln1":375,"ln2":375,"content":"   nsCSSRendering::DrawDashedSides(0, aRC, dirty, borderStyle, colors, fRect, innerRect, 0, nsnull);"},{"type":"normal","normal":true,"ln1":376,"ln2":376,"content":" }"},{"type":"normal","normal":true,"ln1":377,"ln2":377,"content":" "},{"type":"add","add":true,"ln":378,"content":"+void"},{"type":"add","add":true,"ln":379,"content":"+nsListControlFrame::InvalidateFocus()"},{"type":"add","add":true,"ln":380,"content":"+{"},{"type":"add","add":true,"ln":381,"content":"+  if (mFocused != this)"},{"type":"add","add":true,"ln":382,"content":"+    return;"},{"type":"add","add":true,"ln":383,"content":"+"},{"type":"add","add":true,"ln":384,"content":"+  nsIFrame* containerFrame = GetOptionsContainer();"},{"type":"add","add":true,"ln":385,"content":"+  if (containerFrame) {"},{"type":"add","add":true,"ln":386,"content":"+    // Invalidating from the containerFrame because that's where our focus"},{"type":"add","add":true,"ln":387,"content":"+    // is drawn."},{"type":"add","add":true,"ln":388,"content":"+    // The origin of the scrollport is the origin of containerFrame."},{"type":"add","add":true,"ln":389,"content":"+    nsRect invalidateArea = containerFrame->GetOverflowRect();"},{"type":"add","add":true,"ln":390,"content":"+    nsRect emptyFallbackArea(0, 0, GetScrollPortSize().width, CalcFallbackRowHeight(0));"},{"type":"add","add":true,"ln":391,"content":"+    invalidateArea.UnionRect(invalidateArea, emptyFallbackArea);"},{"type":"add","add":true,"ln":392,"content":"+    containerFrame->Invalidate(invalidateArea);"},{"type":"add","add":true,"ln":393,"content":"+  }"},{"type":"add","add":true,"ln":394,"content":"+}"},{"type":"add","add":true,"ln":395,"content":"+"},{"type":"normal","normal":true,"ln1":378,"ln2":396,"content":" //---------------------------------------------------------"},{"type":"normal","normal":true,"ln1":379,"ln2":397,"content":" // Frames are not refcounted, no need to AddRef"},{"type":"normal","normal":true,"ln1":380,"ln2":398,"content":" NS_IMETHODIMP"}],"oldStart":375,"oldLines":6,"newStart":375,"newLines":24},{"content":"@@ -851,6 +869,7 @@ nsListControlFrame::SingleSelection(PRInt32 aClickedIndex, PRBool aDoToggle)","changes":[{"type":"normal","normal":true,"ln1":851,"ln2":869,"content":"   ScrollToIndex(aClickedIndex);"},{"type":"normal","normal":true,"ln1":852,"ln2":870,"content":"   mStartSelectionIndex = aClickedIndex;"},{"type":"normal","normal":true,"ln1":853,"ln2":871,"content":"   mEndSelectionIndex = aClickedIndex;"},{"type":"add","add":true,"ln":872,"content":"+  InvalidateFocus();"},{"type":"normal","normal":true,"ln1":854,"ln2":873,"content":"   return wasChanged;"},{"type":"normal","normal":true,"ln1":855,"ln2":874,"content":" }"},{"type":"normal","normal":true,"ln1":856,"ln2":875,"content":" "}],"oldStart":851,"oldLines":6,"newStart":869,"newLines":7},{"content":"@@ -947,6 +966,7 @@ nsListControlFrame::PerformSelection(PRInt32 aClickedIndex,","changes":[{"type":"normal","normal":true,"ln1":947,"ln2":966,"content":"       } else {"},{"type":"normal","normal":true,"ln1":948,"ln2":967,"content":"         mEndSelectionIndex = aClickedIndex;"},{"type":"normal","normal":true,"ln1":949,"ln2":968,"content":"       }"},{"type":"add","add":true,"ln":969,"content":"+      InvalidateFocus();"},{"type":"normal","normal":true,"ln1":950,"ln2":970,"content":"     } else if (aIsControl) {"},{"type":"normal","normal":true,"ln1":951,"ln2":971,"content":"       wasChanged = SingleSelection(aClickedIndex, PR_TRUE);"},{"type":"normal","normal":true,"ln1":952,"ln2":972,"content":"     } else {"}],"oldStart":947,"oldLines":6,"newStart":966,"newLines":7},{"content":"@@ -1298,13 +1318,15 @@ nsListControlFrame::ResetList(PRBool aAllowScrolling)","changes":[{"type":"normal","normal":true,"ln1":1298,"ln2":1318,"content":" "},{"type":"normal","normal":true,"ln1":1299,"ln2":1319,"content":"   mStartSelectionIndex = kNothingSelected;"},{"type":"normal","normal":true,"ln1":1300,"ln2":1320,"content":"   mEndSelectionIndex = kNothingSelected;"},{"type":"del","del":true,"ln":1301,"content":"-"},{"type":"add","add":true,"ln":1321,"content":"+  InvalidateFocus();"},{"type":"normal","normal":true,"ln1":1302,"ln2":1322,"content":"   // Combobox will redisplay itself with the OnOptionSelected event"},{"type":"normal","normal":true,"ln1":1303,"ln2":1323,"content":" } "},{"type":"normal","normal":true,"ln1":1304,"ln2":1324,"content":"  "},{"type":"normal","normal":true,"ln1":1305,"ln2":1325,"content":" void "},{"type":"normal","normal":true,"ln1":1306,"ln2":1326,"content":" nsListControlFrame::SetFocus(PRBool aOn, PRBool aRepaint)"},{"type":"normal","normal":true,"ln1":1307,"ln2":1327,"content":" {"},{"type":"add","add":true,"ln":1328,"content":"+  InvalidateFocus();"},{"type":"add","add":true,"ln":1329,"content":"+"},{"type":"normal","normal":true,"ln1":1308,"ln2":1330,"content":"   if (aOn) {"},{"type":"normal","normal":true,"ln1":1309,"ln2":1331,"content":"     ComboboxFocusSet();"},{"type":"normal","normal":true,"ln1":1310,"ln2":1332,"content":"     mFocused = this;"}],"oldStart":1298,"oldLines":13,"newStart":1318,"newLines":15},{"content":"@@ -1312,8 +1334,7 @@ nsListControlFrame::SetFocus(PRBool aOn, PRBool aRepaint)","changes":[{"type":"normal","normal":true,"ln1":1312,"ln2":1334,"content":"     mFocused = nsnull;"},{"type":"normal","normal":true,"ln1":1313,"ln2":1335,"content":"   }"},{"type":"normal","normal":true,"ln1":1314,"ln2":1336,"content":" "},{"type":"del","del":true,"ln":1315,"content":"-  // Make sure the SelectArea frame gets painted"},{"type":"del","del":true,"ln":1316,"content":"-  Invalidate(nsRect(0,0,mRect.width,mRect.height), PR_TRUE);"},{"type":"add","add":true,"ln":1337,"content":"+  InvalidateFocus();"},{"type":"normal","normal":true,"ln1":1317,"ln2":1338,"content":" }"},{"type":"normal","normal":true,"ln1":1318,"ln2":1339,"content":" "},{"type":"normal","normal":true,"ln1":1319,"ln2":1340,"content":" void nsListControlFrame::ComboboxFocusSet()"}],"oldStart":1312,"oldLines":8,"newStart":1334,"newLines":7},{"content":"@@ -1491,6 +1512,7 @@ nsListControlFrame::RemoveOption(nsPresContext* aPresContext, PRInt32 aIndex)","changes":[{"type":"normal","normal":true,"ln1":1491,"ln2":1512,"content":"     }    "},{"type":"normal","normal":true,"ln1":1492,"ln2":1513,"content":"   }"},{"type":"normal","normal":true,"ln1":1493,"ln2":1514,"content":" "},{"type":"add","add":true,"ln":1515,"content":"+  InvalidateFocus();"},{"type":"normal","normal":true,"ln1":1494,"ln2":1516,"content":"   return NS_OK;"},{"type":"normal","normal":true,"ln1":1495,"ln2":1517,"content":" }"},{"type":"normal","normal":true,"ln1":1496,"ln2":1518,"content":" "}],"oldStart":1491,"oldLines":6,"newStart":1512,"newLines":7},{"content":"@@ -1633,6 +1655,7 @@ nsListControlFrame::OnSetSelectedIndex(PRInt32 aOldIndex, PRInt32 aNewIndex)","changes":[{"type":"normal","normal":true,"ln1":1633,"ln2":1655,"content":"   ScrollToIndex(aNewIndex);"},{"type":"normal","normal":true,"ln1":1634,"ln2":1656,"content":"   mStartSelectionIndex = aNewIndex;"},{"type":"normal","normal":true,"ln1":1635,"ln2":1657,"content":"   mEndSelectionIndex = aNewIndex;"},{"type":"add","add":true,"ln":1658,"content":"+  InvalidateFocus();"},{"type":"normal","normal":true,"ln1":1636,"ln2":1659,"content":" "},{"type":"normal","normal":true,"ln1":1637,"ln2":1660,"content":" #ifdef ACCESSIBILITY"},{"type":"normal","normal":true,"ln1":1638,"ln2":1661,"content":"   FireMenuItemActiveEvent();"}],"oldStart":1633,"oldLines":6,"newStart":1655,"newLines":7},{"content":"@@ -2209,12 +2232,6 @@ nsListControlFrame::MouseMove(nsIDOMEvent* aMouseEvent)","changes":[{"type":"normal","normal":true,"ln1":2209,"ln2":2232,"content":"       if (NS_SUCCEEDED(GetIndexFromDOMEvent(aMouseEvent, selectedIndex))) {"},{"type":"normal","normal":true,"ln1":2210,"ln2":2233,"content":"         PerformSelection(selectedIndex, PR_FALSE, PR_FALSE);"},{"type":"normal","normal":true,"ln1":2211,"ln2":2234,"content":"       }"},{"type":"del","del":true,"ln":2212,"content":"-"},{"type":"del","del":true,"ln":2213,"content":"-      // Make sure the SelectArea frame gets painted"},{"type":"del","del":true,"ln":2214,"content":"-      // XXX this shouldn't be needed, but other places in this code do it"},{"type":"del","del":true,"ln":2215,"content":"-      // and if we don't do this, invalidation doesn't happen when we move out"},{"type":"del","del":true,"ln":2216,"content":"-      // of the top-level window. We should track this down and fix it --- roc"},{"type":"del","del":true,"ln":2217,"content":"-      Invalidate(nsRect(0,0,mRect.width,mRect.height), PR_TRUE);"},{"type":"normal","normal":true,"ln1":2218,"ln2":2235,"content":"     }"},{"type":"normal","normal":true,"ln1":2219,"ln2":2236,"content":"   } else {// XXX - temporary until we get drag events"},{"type":"normal","normal":true,"ln1":2220,"ln2":2237,"content":"     if (mButtonDown) {"}],"oldStart":2209,"oldLines":12,"newStart":2232,"newLines":6},{"content":"@@ -2720,6 +2737,7 @@ nsListControlFrame::KeyPress(nsIDOMEvent* aKeyEvent)","changes":[{"type":"normal","normal":true,"ln1":2720,"ln2":2737,"content":"     if (isControl && charcode != ' ') {"},{"type":"normal","normal":true,"ln1":2721,"ln2":2738,"content":"       mStartSelectionIndex = newIndex;"},{"type":"normal","normal":true,"ln1":2722,"ln2":2739,"content":"       mEndSelectionIndex = newIndex;"},{"type":"add","add":true,"ln":2740,"content":"+      InvalidateFocus();"},{"type":"normal","normal":true,"ln1":2723,"ln2":2741,"content":"       ScrollToIndex(newIndex);"},{"type":"normal","normal":true,"ln1":2724,"ln2":2742,"content":"     } else if (mControlSelectMode && charcode == ' ') {"},{"type":"normal","normal":true,"ln1":2725,"ln2":2743,"content":"       wasChanged = SingleSelection(newIndex, PR_TRUE);"}],"oldStart":2720,"oldLines":6,"newStart":2737,"newLines":7},{"content":"@@ -2737,10 +2755,6 @@ nsListControlFrame::KeyPress(nsIDOMEvent* aKeyEvent)","changes":[{"type":"normal","normal":true,"ln1":2737,"ln2":2755,"content":"       FireMenuItemActiveEvent();"},{"type":"normal","normal":true,"ln1":2738,"ln2":2756,"content":"     }"},{"type":"normal","normal":true,"ln1":2739,"ln2":2757,"content":" #endif"},{"type":"del","del":true,"ln":2740,"content":"-"},{"type":"del","del":true,"ln":2741,"content":"-    // Make sure the SelectArea frame gets painted"},{"type":"del","del":true,"ln":2742,"content":"-    Invalidate(nsRect(0,0,mRect.width,mRect.height), PR_TRUE);"},{"type":"del","del":true,"ln":2743,"content":"-"},{"type":"normal","normal":true,"ln1":2744,"ln2":2758,"content":"   }"},{"type":"normal","normal":true,"ln1":2745,"ln2":2759,"content":" "},{"type":"normal","normal":true,"ln1":2746,"ln2":2760,"content":"   return NS_OK;"}],"oldStart":2737,"oldLines":10,"newStart":2755,"newLines":6}],"deletions":13,"additions":27,"from":"layout/forms/nsListControlFrame.cpp","to":"layout/forms/nsListControlFrame.cpp","index":["b048221..cc4645f","100644"]},{"chunks":[{"content":"@@ -245,6 +245,13 @@ public:","changes":[{"type":"normal","normal":true,"ln1":245,"ln2":245,"content":"    * frame"},{"type":"normal","normal":true,"ln1":246,"ln2":246,"content":"    */"},{"type":"normal","normal":true,"ln1":247,"ln2":247,"content":"   void PaintFocus(nsIRenderingContext& aRC, nsPoint aPt);"},{"type":"add","add":true,"ln":248,"content":"+  /**"},{"type":"add","add":true,"ln":249,"content":"+   * If this frame IsFocused(), invalidates an area that includes anything"},{"type":"add","add":true,"ln":250,"content":"+   * that PaintFocus will or could have painted --- basically the whole"},{"type":"add","add":true,"ln":251,"content":"+   * GetOptionsContainer, plus some extra stuff if there are no options. This"},{"type":"add","add":true,"ln":252,"content":"+   * must be called every time mEndSelectionIndex changes."},{"type":"add","add":true,"ln":253,"content":"+   */"},{"type":"add","add":true,"ln":254,"content":"+  void InvalidateFocus();"},{"type":"normal","normal":true,"ln1":248,"ln2":255,"content":" "},{"type":"normal","normal":true,"ln1":249,"ln2":256,"content":"   /**"},{"type":"normal","normal":true,"ln1":250,"ln2":257,"content":"    * Function to calculate the height a row, for use with the \"size\" attribute."}],"oldStart":245,"oldLines":6,"newStart":245,"newLines":13}],"deletions":0,"additions":7,"from":"layout/forms/nsListControlFrame.h","to":"layout/forms/nsListControlFrame.h","index":["84a993f..7a888cd","100644"]}]}