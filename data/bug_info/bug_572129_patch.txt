From: Blake Kaplan <mrbkap@gmail.com>

Fix bug 572129

diff --git a/content/events/src/nsDOMDataTransfer.cpp b/content/events/src/nsDOMDataTransfer.cpp
--- a/content/events/src/nsDOMDataTransfer.cpp
+++ b/content/events/src/nsDOMDataTransfer.cpp
@@ -1,9 +1,10 @@
 /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 sw=2 et tw=79: */
 /* ***** BEGIN LICENSE BLOCK *****
  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
  *
  * The contents of this file are subject to the Mozilla Public License Version
  * 1.1 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
  *
@@ -440,29 +441,38 @@ nsDOMDataTransfer::MozGetDataAt(const ns
   nsAutoString format;
   GetRealFormat(aFormat, format);
 
   nsTArray<TransferItem>& item = mItems[aIndex];
 
   // allow access to any data in the drop and dragdrop events, or if the
   // UniversalBrowserRead privilege is set, otherwise only allow access to
   // data from the same principal.
-  nsIPrincipal* principal = nsnull;
-  if (mEventType != NS_DRAGDROP_DROP && mEventType != NS_DRAGDROP_DRAGDROP &&
-      !nsContentUtils::IsCallerTrustedForCapability("UniversalBrowserRead"))
-    principal = GetCurrentPrincipal();
 
   PRUint32 count = item.Length();
   for (PRUint32 i = 0; i < count; i++) {
     TransferItem& formatitem = item[i];
     if (formatitem.mFormat.Equals(format)) {
-      PRBool subsumes;
-      if (formatitem.mPrincipal && principal &&
-          (NS_FAILED(principal->Subsumes(formatitem.mPrincipal, &subsumes)) || !subsumes))
-        return NS_ERROR_DOM_SECURITY_ERR;
+      if (formatitem.mPrincipal &&
+          !nsContentUtils::IsCallerTrustedForCapability("UniversalBrowserRead")) {
+        if (mEventType != NS_DRAGDROP_DROP && mEventType != NS_DRAGDROP_DRAGDROP) {
+          PRBool subsumes;
+          nsIPrincipal* principal = GetCurrentPrincipal();
+          if (principal &&
+              (NS_FAILED(principal->Subsumes(formatitem.mPrincipal, &subsumes)) ||
+               !subsumes))
+            return NS_ERROR_DOM_SECURITY_ERR;
+        } else {
+          nsIScriptSecurityManager *ssm = nsContentUtils::GetSecurityManager();
+          PRBool isSystem;
+          if (NS_FAILED(ssm->IsSystemPrincipal(formatitem.mPrincipal, &isSystem)) ||
+              isSystem)
+            return NS_ERROR_DOM_SECURITY_ERR;
+        }
+      }
 
       if (!formatitem.mData)
         FillInExternalDragData(formatitem, aIndex);
       *aData = formatitem.mData;
       NS_IF_ADDREF(*aData);
       return NS_OK;
     }
   }
