diff -r 3c230b561fa2 security/manager/pki/resources/content/device_manager.js
--- a/security/manager/pki/resources/content/device_manager.js	Tue Nov 10 16:42:19 2009 -0600
+++ b/security/manager/pki/resources/content/device_manager.js	Thu Nov 12 21:01:40 2009 +0100
@@ -387,7 +387,7 @@
     }
   } catch (e) {
     var alertStr = bundle.GetStringFromName("login_failed"); 
-    alert(alertStr);
+    doPrompt(alertStr);
   }
   enableButtons();
 }
@@ -537,7 +537,7 @@
       case nsIPKCS11Slot.SLOT_UNINITIALIZED:
       case nsIPKCS11Slot.SLOT_READY:
         // Token has either no or an empty password.
-        alert(bundle.GetStringFromName("fips_nonempty_password_required"));
+        doPrompt(bundle.GetStringFromName("fips_nonempty_password_required"));
         return;
     }
   }
diff -r 3c230b561fa2 security/manager/pki/resources/content/editcerts.js
--- a/security/manager/pki/resources/content/editcerts.js	Tue Nov 10 16:42:19 2009 -0600
+++ b/security/manager/pki/resources/content/editcerts.js	Thu Nov 12 21:01:40 2009 +0100
@@ -44,6 +44,13 @@
 var certdb;
 var cert;
 
+function doPrompt(msg)
+{
+  let prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].
+    getService(Components.interfaces.nsIPromptService);
+  prompts.alert(window, null, msg);
+}
+
 function setWindowName()
 {
   var dbkey = self.name;
@@ -235,7 +242,7 @@
    else
    {
       var bundle = srGetStrBundle("chrome://pippki/locale/pippki.properties");
-      alert(bundle.GetStringFromName("issuerCertNotFound"));
+      doPrompt(bundle.GetStringFromName("issuerCertNotFound"));
    }
 }
 
diff -r 3c230b561fa2 security/manager/pki/resources/content/password.js
--- a/security/manager/pki/resources/content/password.js	Tue Nov 10 16:42:19 2009 -0600
+++ b/security/manager/pki/resources/content/password.js	Thu Nov 12 21:01:40 2009 +0100
@@ -47,6 +47,13 @@
 var tokenName="";
 var pw1;
 
+function doPrompt(msg)
+{
+  let prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].
+    getService(Components.interfaces.nsIPromptService);
+  prompts.alert(window, null, msg);
+}
+
 function onLoad()
 {
   document.documentElement.getButton("accept").disabled = true;
@@ -196,18 +203,18 @@
             var secmoddb = Components.classes[nsPKCS11ModuleDB].getService(nsIPKCS11ModuleDB);
             if (secmoddb.isFIPSEnabled) {
               // empty passwords are not allowed in FIPS mode
-              alert(bundle.GetStringFromName("pw_change2empty_in_fips_mode"));
+              doPrompt(bundle.GetStringFromName("pw_change2empty_in_fips_mode"));
               passok = 0;
             }
           }
           if (passok) {
             token.changePassword(oldpw, pw1.value);
             if (pw1.value == "") {
-              alert(bundle.GetStringFromName("pw_erased_ok")
+              doPrompt(bundle.GetStringFromName("pw_erased_ok")
                     + " "
                     + bundle.GetStringFromName("pw_empty_warning"));
             } else {
-              alert(bundle.GetStringFromName("pw_change_ok")); 
+              doPrompt(bundle.GetStringFromName("pw_change_ok")); 
             }
             success = true;
           }
@@ -215,15 +222,15 @@
       } else {
         oldpwbox.focus();
         oldpwbox.setAttribute("value", "");
-        alert(bundle.GetStringFromName("incorrect_pw")); 
+        doPrompt(bundle.GetStringFromName("incorrect_pw")); 
       }
     } catch (e) {
-      alert(bundle.GetStringFromName("failed_pw_change")); 
+      doPrompt(bundle.GetStringFromName("failed_pw_change")); 
     }
   } else {
     token.initPassword(pw1.value);
     if (pw1.value == "") {
-      alert(bundle.GetStringFromName("pw_not_wanted")
+      doPrompt(bundle.GetStringFromName("pw_not_wanted")
             + " " 
             + bundle.GetStringFromName("pw_empty_warning"));
     }
@@ -267,7 +274,7 @@
 // upper and lower case characters
 
   var pw=document.getElementById('pw1').value;
-//  alert("password='" + pw +"'");
+//  doPrompt("password='" + pw +"'");
 
 //length of the password
   var pwlength=(pw.length);
diff -r 3c230b561fa2 security/manager/pki/resources/content/pref-crlupdate.js
--- a/security/manager/pki/resources/content/pref-crlupdate.js	Tue Nov 10 16:42:19 2009 -0600
+++ b/security/manager/pki/resources/content/pref-crlupdate.js	Thu Nov 12 21:01:40 2009 +0100
@@ -60,6 +60,13 @@
 var autoupdateDayCntString    = "security.crl.autoupdate.dayCnt.";
 var autoupdateFreqCntString   = "security.crl.autoupdate.freqCnt.";
 
+function doPrompt(msg)
+{
+  let prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].
+    getService(Components.interfaces.nsIPromptService);
+  prompts.alert(window, null, msg);
+}
+
 function onLoad()
 {
   crlManager = Components.classes[nsCRLManager].getService(nsICRLManager);
@@ -162,7 +169,7 @@
   var timeBasedBox = document.getElementById("nextUpdateDay");
   try {
     var dayCnt = prefBranch.getCharPref(autoupdateDayCntString);
-    //alert(dayCnt);
+    //doPrompt(dayCnt);
     if(dayCnt != null){
       timeBasedBox.value = dayCnt;
     } else {
@@ -175,7 +182,7 @@
   var freqBasedBox = document.getElementById("nextUpdateFreq");
   try {
     var freqCnt = prefBranch.getCharPref(autoupdateFreqCntString);
-    //alert(freqCnt);
+    //doPrompt(freqCnt);
     if(freqCnt != null){
       freqBasedBox.value = freqCnt;
     } else {
@@ -234,7 +241,7 @@
      updateTime = crlManager.computeNextAutoUpdateTime(crl, crlManager.TYPE_AUTOUPDATE_FREQ_BASED, freqCnt);
    }
 
-   //alert(updateTime);
+   //doPrompt(updateTime);
    prefBranch.setCharPref(autoupdateTimeString, updateTime); 
    prefBranch.setCharPref(autoupdateDayCntString, dayCnt);
    prefBranch.setCharPref(autoupdateFreqCntString, freqCnt);
@@ -254,13 +261,13 @@
 
    var tmp = parseFloat(dayCnt);
    if(!(tmp > 0.0)){
-     alert(bundle.GetStringFromName("crlAutoUpdateDayCntError"));
+     doPrompt(bundle.GetStringFromName("crlAutoUpdateDayCntError"));
      return false;
    }
    
    tmp = parseFloat(freqCnt);
    if(!(tmp > 0.0)){
-     alert(bundle.GetStringFromName("crlAutoUpdtaeFreqCntError"));
+     doPrompt(bundle.GetStringFromName("crlAutoUpdtaeFreqCntError"));
      return false;
    }
    
diff -r 3c230b561fa2 security/manager/pki/resources/content/viewCertDetails.js
--- a/security/manager/pki/resources/content/viewCertDetails.js	Tue Nov 10 16:42:19 2009 -0600
+++ b/security/manager/pki/resources/content/viewCertDetails.js	Thu Nov 12 21:01:40 2009 +0100
@@ -54,6 +54,13 @@
 
 var bundle;
 
+function doPrompt(msg)
+{
+  let prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].
+    getService(Components.interfaces.nsIPromptService);
+  prompts.alert(window, null, msg);
+}
+
 function AddCertChain(node, chain, idPrefix)
 {
   var idfier = idPrefix+"chain_";
@@ -297,7 +304,7 @@
 
   var tree = document.getElementById('treesetDump');
   if (tree.currentIndex < 0) {
-    alert("No items are selected."); //This should never happen.
+    doPrompt("No items are selected."); //This should never happen.
   } else {
     var item = tree.contentView.getItemAtIndex(tree.currentIndex);
     var dbKey = item.firstChild.firstChild.getAttribute('display');
