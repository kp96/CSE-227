{"bug_id":232068,"commitHash":"d023625","commit_info":{"sha":"d023625a0e715c4b58bb56491737838a2434bc98","commit":{"author":{"name":"kjh-5727%comcast.net","email":"kjh-5727%comcast.net","date":"2004-09-07T18:54:02Z"},"committer":{"name":"kjh-5727%comcast.net","email":"kjh-5727%comcast.net","date":"2004-09-07T18:54:02Z"},"message":"Bug 232068: security should use newer nsIPrefService APIs instead of nsIPref. Patch by Mikael Parknert (mikael@parknert.se), r=bienvenu, sr=darin.","tree":{"sha":"4e82805266c14155e6564b1dd11f3b9724793fe2","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/4e82805266c14155e6564b1dd11f3b9724793fe2"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/d023625a0e715c4b58bb56491737838a2434bc98","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/d023625a0e715c4b58bb56491737838a2434bc98","html_url":"https://github.com/mozilla/gecko-dev/commit/d023625a0e715c4b58bb56491737838a2434bc98","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/d023625a0e715c4b58bb56491737838a2434bc98/comments","author":null,"committer":null,"parents":[{"sha":"826b81b285e29973e19216ab897235fd52e900c5","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/826b81b285e29973e19216ab897235fd52e900c5","html_url":"https://github.com/mozilla/gecko-dev/commit/826b81b285e29973e19216ab897235fd52e900c5"}],"stats":{"total":183,"additions":88,"deletions":95},"files":[{"sha":"a3c559df6d6775b8aecde03d09d4cba6443f8b69","filename":"security/manager/boot/src/nsSecurityWarningDialogs.cpp","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/boot/src/nsSecurityWarningDialogs.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/boot/src/nsSecurityWarningDialogs.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/boot/src/nsSecurityWarningDialogs.cpp?ref=d023625a0e715c4b58bb56491737838a2434bc98","patch":"@@ -46,10 +46,11 @@\n #include \"nsIPrompt.h\"\n #include \"nsIInterfaceRequestor.h\"\n #include \"nsIInterfaceRequestorUtils.h\"\n+#include \"nsIPrefService.h\"\n+#include \"nsIPrefBranch.h\"\n \n NS_IMPL_THREADSAFE_ISUPPORTS1(nsSecurityWarningDialogs, nsISecurityWarningDialogs)\n \n-static NS_DEFINE_CID(kPrefCID, NS_PREF_CID);\n static NS_DEFINE_CID(kCStringBundleServiceCID,  NS_STRINGBUNDLESERVICE_CID);\n \n #define STRING_BUNDLE_URL    \"chrome://communicator/locale/security.properties\"\n@@ -73,7 +74,7 @@ nsSecurityWarningDialogs::Init()\n {\n   nsresult rv;\n \n-  mPref = do_GetService(kPrefCID, &rv);\n+  mPrefBranch = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);\n   if (NS_FAILED(rv)) return rv;\n \n   nsCOMPtr<nsIStringBundleService> service = do_GetService(kCStringBundleServiceCID, &rv);\n@@ -147,7 +148,7 @@ nsSecurityWarningDialogs::AlertDialog(nsIInterfaceRequestor *ctx, const char *pr\n \n   // Get user's preference for this alert\n   PRBool prefValue;\n-  rv = mPref->GetBoolPref(prefName, &prefValue);\n+  rv = mPrefBranch->GetBoolPref(prefName, &prefValue);\n   if (NS_FAILED(rv)) prefValue = PR_TRUE;\n \n   // Stop if alert is not requested\n@@ -162,7 +163,7 @@ nsSecurityWarningDialogs::AlertDialog(nsIInterfaceRequestor *ctx, const char *pr\n   showOncePref += \".show_once\";\n \n   PRBool showOnce = PR_FALSE;\n-  mPref->GetBoolPref(showOncePref.get(), &showOnce);\n+  mPrefBranch->GetBoolPref(showOncePref.get(), &showOnce);\n \n   if (showOnce)\n     prefValue = PR_FALSE;\n@@ -186,9 +187,9 @@ nsSecurityWarningDialogs::AlertDialog(nsIInterfaceRequestor *ctx, const char *pr\n   if (NS_FAILED(rv)) return rv;\n       \n   if (!prefValue) {\n-    mPref->SetBoolPref(prefName, PR_FALSE);\n+    mPrefBranch->SetBoolPref(prefName, PR_FALSE);\n   } else if (showOnce) {\n-    mPref->SetBoolPref(showOncePref.get(), PR_FALSE);\n+    mPrefBranch->SetBoolPref(showOncePref.get(), PR_FALSE);\n   }\n \n   return rv;\n@@ -233,7 +234,7 @@ nsSecurityWarningDialogs::ConfirmDialog(nsIInterfaceRequestor *ctx, const char *\n   PRBool prefValue = PR_TRUE;\n   \n   if (prefName != nsnull) {\n-    rv = mPref->GetBoolPref(prefName, &prefValue);\n+    rv = mPrefBranch->GetBoolPref(prefName, &prefValue);\n     if (NS_FAILED(rv)) prefValue = PR_TRUE;\n   }\n   \n@@ -248,7 +249,7 @@ nsSecurityWarningDialogs::ConfirmDialog(nsIInterfaceRequestor *ctx, const char *\n   showOncePref += \".show_once\";\n \n   PRBool showOnce = PR_FALSE;\n-  mPref->GetBoolPref(showOncePref.get(), &showOnce);\n+  mPrefBranch->GetBoolPref(showOncePref.get(), &showOnce);\n \n   if (showOnce)\n     prefValue = PR_FALSE;\n@@ -301,9 +302,9 @@ nsSecurityWarningDialogs::ConfirmDialog(nsIInterfaceRequestor *ctx, const char *\n   *_result = (buttonPressed != 1);\n \n   if (!prefValue && prefName != nsnull) {\n-    mPref->SetBoolPref(prefName, PR_FALSE);\n+    mPrefBranch->SetBoolPref(prefName, PR_FALSE);\n   } else if (prefValue && showOnce) {\n-    mPref->SetBoolPref(showOncePref.get(), PR_FALSE);\n+    mPrefBranch->SetBoolPref(showOncePref.get(), PR_FALSE);\n   }\n \n   return rv;"},{"sha":"8c9456abbba6f2718bbfe9f4a90910959f515144","filename":"security/manager/boot/src/nsSecurityWarningDialogs.h","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/boot/src/nsSecurityWarningDialogs.h","raw_url":"https://github.com/mozilla/gecko-dev/raw/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/boot/src/nsSecurityWarningDialogs.h","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/boot/src/nsSecurityWarningDialogs.h?ref=d023625a0e715c4b58bb56491737838a2434bc98","patch":"@@ -41,7 +41,7 @@\n #define nsSecurityWarningDialogs_h\n \n #include \"nsISecurityWarningDialogs.h\"\n-#include \"nsIPref.h\"\n+#include \"nsIPrefBranch.h\"\n #include \"nsIStringBundle.h\"\n #include \"nsCOMPtr.h\"\n \n@@ -64,7 +64,7 @@ class nsSecurityWarningDialogs : public nsISecurityWarningDialogs\n                    const PRUnichar *messageName, \n                    const PRUnichar *showAgainName, PRBool* _result);\n   nsCOMPtr<nsIStringBundle> mStringBundle;\n-  nsCOMPtr<nsIPref> mPref;\n+  nsCOMPtr<nsIPrefBranch> mPrefBranch;\n };\n \n #define NS_SECURITYWARNINGDIALOGS_CID \\"},{"sha":"3ab50f658162e203ac88bb39c724cbf46d3c33cb","filename":"security/manager/pki/src/nsNSSDialogs.h","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/pki/src/nsNSSDialogs.h","raw_url":"https://github.com/mozilla/gecko-dev/raw/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/pki/src/nsNSSDialogs.h","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/pki/src/nsNSSDialogs.h?ref=d023625a0e715c4b58bb56491737838a2434bc98","patch":"@@ -51,7 +51,6 @@\n \n #include \"nsCOMPtr.h\"\n #include \"nsIStringBundle.h\"\n-#include \"nsIPref.h\"\n \n #define NS_NSSDIALOGS_CID \\\n   { 0x518e071f, 0x1dd2, 0x11b2, \\"},{"sha":"2e21d239759737b158d64d340175b7cc6c2bacfb","filename":"security/manager/ssl/src/nsCMSSecureMessage.cpp","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsCMSSecureMessage.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsCMSSecureMessage.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsCMSSecureMessage.cpp?ref=d023625a0e715c4b58bb56491737838a2434bc98","patch":"@@ -55,7 +55,8 @@\n #include \"cms.h\"\n \n #include \"nsIServiceManager.h\"\n-#include \"nsIPref.h\"\n+#include \"nsIPrefService.h\"\n+#include \"nsIPrefBranch.h\"\n \n #include \"prlog.h\"\n #ifdef PR_LOGGING\n@@ -96,8 +97,7 @@ GetCertByPrefID(const char *certID, char **_retval)\n \n   *_retval = 0;\n \n-  static NS_DEFINE_CID(kPrefCID, NS_PREF_CID);\n-  nsCOMPtr<nsIPref> prefs = do_GetService(kPrefCID, &rv);\n+  nsCOMPtr<nsIPrefBranch> prefs = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);\n   if (NS_FAILED(rv)) {\n     goto done;\n   }"},{"sha":"82e9a747899e695639cf3e579deb6503025659b6","filename":"security/manager/ssl/src/nsCRLManager.cpp","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsCRLManager.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsCRLManager.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsCRLManager.cpp?ref=d023625a0e715c4b58bb56491737838a2434bc98","patch":"@@ -48,6 +48,8 @@\n #include \"nsIPrompt.h\"\n #include \"nsICertificateDialogs.h\"\n #include \"nsArray.h\"\n+#include \"nsIPrefService.h\"\n+#include \"nsIPrefBranch.h\"\n #include \"nsNSSShutDown.h\"\n \n #include \"nsNSSCertHeader.h\"\n@@ -224,7 +226,8 @@ nsCRLManager::ImportCrl (PRUint8 *aData, PRUint32 aLength, nsIURI * aURI, PRUint\n     if(crlKey == nsnull){\n       return NS_ERROR_FAILURE;\n     }\n-    nsCOMPtr<nsIPref> pref = do_GetService(NS_PREF_CONTRACTID,&rv);\n+    nsCOMPtr<nsIPrefService> prefSvc = do_GetService(NS_PREFSERVICE_CONTRACTID,&rv);\n+    nsCOMPtr<nsIPrefBranch> pref = do_GetService(NS_PREFSERVICE_CONTRACTID,&rv);\n     if (NS_FAILED(rv)){\n       return rv;\n     }\n@@ -282,7 +285,6 @@ nsCRLManager::ImportCrl (PRUint8 *aData, PRUint32 aLength, nsIURI * aURI, PRUint\n       pref->SetCharPref(updateUrlPrefStr.get(),updateURL.get());\n       \n       pref->SetIntPref(updateErrCntPrefStr.get(),0);\n-      pref->SavePrefFile(nsnull);\n       \n       if(toBeRescheduled == PR_TRUE){\n         nsAutoString hashKey(crlKey);\n@@ -297,14 +299,13 @@ nsCRLManager::ImportCrl (PRUint8 *aData, PRUint32 aLength, nsIURI * aURI, PRUint\n       updateErrDetailPrefStr.AppendWithConversion(crlKey);\n       errMsg.AssignWithConversion(errorMessage.get());\n       rv = pref->GetIntPref(updateErrCntPrefStr.get(),&errCnt);\n-      if( (NS_FAILED(rv)) || (errCnt ==0)){\n-        pref->SetIntPref(updateErrCntPrefStr.get(),1);\n-      }else{\n-        pref->SetIntPref(updateErrCntPrefStr.get(),errCnt+1);\n-      }\n+      if(NS_FAILED(rv))\n+        errCnt = 0;\n+\n+      pref->SetIntPref(updateErrCntPrefStr.get(),errCnt+1);\n       pref->SetCharPref(updateErrDetailPrefStr.get(),errMsg.get());\n-      pref->SavePrefFile(nsnull);\n     }\n+    prefSvc->SavePrefFile(nsnull);\n   }\n \n   return rv;"},{"sha":"bc3eb24732cd374a7871a044685563f4bb4e4d6e","filename":"security/manager/ssl/src/nsNSSCertificateDB.cpp","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsNSSCertificateDB.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsNSSCertificateDB.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsNSSCertificateDB.cpp?ref=d023625a0e715c4b58bb56491737838a2434bc98","patch":"@@ -53,6 +53,8 @@\n #include \"nsReadableUtils.h\"\n #include \"nsArray.h\"\n #include \"nsNSSShutDown.h\"\n+#include \"nsIPrefService.h\"\n+#include \"nsIPrefBranch.h\"\n \n #include \"nspr.h\"\n extern \"C\" {\n@@ -1239,10 +1241,10 @@ nsNSSCertificateDB::getCertNames(CERTCertList *certList,\n NS_IMETHODIMP \n nsNSSCertificateDB::GetIsOcspOn(PRBool *aOcspOn)\n {\n-  nsCOMPtr<nsIPref> prefService = do_GetService(NS_PREF_CONTRACTID);\n+  nsCOMPtr<nsIPrefBranch> pref = do_GetService(NS_PREFSERVICE_CONTRACTID);\n \n   PRInt32 ocspEnabled;\n-  prefService->GetIntPref(\"security.OCSP.enabled\", &ocspEnabled);\n+  pref->GetIntPref(\"security.OCSP.enabled\", &ocspEnabled);\n   *aOcspOn = ( ocspEnabled == 0 ) ? PR_FALSE : PR_TRUE; \n   return NS_OK;\n }"},{"sha":"de95fc1f42631f40e3276bd428948cb840306959","filename":"security/manager/ssl/src/nsNSSComponent.cpp","status":"modified","additions":53,"deletions":62,"changes":115,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsNSSComponent.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsNSSComponent.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsNSSComponent.cpp?ref=d023625a0e715c4b58bb56491737838a2434bc98","patch":"@@ -60,7 +60,9 @@\n #include \"nsNSSCertificate.h\"\n #include \"nsNSSHelper.h\"\n #include \"prlog.h\"\n-#include \"nsIPref.h\"\n+#include \"nsIPrefService.h\"\n+#include \"nsIPrefBranch.h\"\n+#include \"nsIPrefBranchInternal.h\"\n #include \"nsIDateTimeFormat.h\"\n #include \"nsDateTimeFormatCID.h\"\n #include \"nsAutoLock.h\"\n@@ -288,7 +290,7 @@ nsNSSComponent::~nsNSSComponent()\n #endif /*DEBUG*/ \n #endif /*XP_MAC*/\n \n-static void setOCSPOptions(nsIPref * pref);\n+static void setOCSPOptions(nsIPrefBranch * pref);\n \n NS_IMETHODIMP\n nsNSSComponent::PIPBundleFormatStringFromName(const char *name,\n@@ -344,7 +346,7 @@ nsNSSComponent::SkipOcsp()\n NS_IMETHODIMP\n nsNSSComponent::SkipOcspOff()\n {\n-  setOCSPOptions(mPref);\n+  setOCSPOptions(mPrefBranch);\n   return NS_OK;\n }\n \n@@ -606,7 +608,7 @@ nsresult nsNSSComponent::GetNSSCipherIDFromPrefString(const nsACString &aPrefStr\n   return NS_ERROR_NOT_AVAILABLE;\n }\n \n-static void setOCSPOptions(nsIPref * pref)\n+static void setOCSPOptions(nsIPrefBranch * pref)\n {\n   nsNSSShutDownPreventionLock locker;\n   // Set up OCSP //\n@@ -626,8 +628,8 @@ static void setOCSPOptions(nsIPref * pref)\n       char *url = nsnull;\n \n       // Get the signing CA and service url //\n-      pref->CopyCharPref(\"security.OCSP.signingCA\", &signingCA);\n-      pref->CopyCharPref(\"security.OCSP.URL\", &url);\n+      pref->GetCharPref(\"security.OCSP.signingCA\", &signingCA);\n+      pref->GetCharPref(\"security.OCSP.URL\", &url);\n \n       // Set OCSP up\n       CERT_EnableOCSPChecking(CERT_GetDefaultCertDB());\n@@ -712,7 +714,7 @@ nsresult nsNSSComponent::getParamsForNextCrlToDownload(nsAutoString *url, PRTime\n   char *tempUrl;\n   nsresult rv;\n   \n-  nsCOMPtr<nsIPref> pref = do_GetService(NS_PREF_CONTRACTID,&rv);\n+  nsCOMPtr<nsIPrefBranch> pref = do_GetService(NS_PREFSERVICE_CONTRACTID,&rv);\n   if(NS_FAILED(rv)){\n     return rv;\n   }\n@@ -1111,7 +1113,7 @@ nsNSSComponent::InitializeNSS(PRBool showWarningBox)\n   #endif\n \n     PRBool supress_warning_preference = PR_FALSE;\n-    rv = mPref->GetBoolPref(\"security.suppress_nss_rw_impossible_warning\", &supress_warning_preference);\n+    rv = mPrefBranch->GetBoolPref(\"security.suppress_nss_rw_impossible_warning\", &supress_warning_preference);\n \n     if (NS_FAILED(rv)) {\n       supress_warning_preference = PR_FALSE;\n@@ -1164,16 +1166,16 @@ nsNSSComponent::InitializeNSS(PRBool showWarningBox)\n \n       PK11_SetPasswordFunc(PK11PasswordPrompt);\n \n-      // Register a callback so we can inform NSS when these prefs change\n-      mPref->RegisterCallback(\"security.\", nsNSSComponent::PrefChangedCallback,\n-                              (void*) this);\n+      // Register an observer so we can inform NSS when these prefs change\n+      nsCOMPtr<nsIPrefBranchInternal> pbi = do_QueryInterface(mPrefBranch);\n+      pbi->AddObserver(\"security.\", this, PR_FALSE);\n \n       PRBool enabled;\n-      mPref->GetBoolPref(\"security.enable_ssl2\", &enabled);\n+      mPrefBranch->GetBoolPref(\"security.enable_ssl2\", &enabled);\n       SSL_OptionSetDefault(SSL_ENABLE_SSL2, enabled);\n-      mPref->GetBoolPref(\"security.enable_ssl3\", &enabled);\n+      mPrefBranch->GetBoolPref(\"security.enable_ssl3\", &enabled);\n       SSL_OptionSetDefault(SSL_ENABLE_SSL3, enabled);\n-      mPref->GetBoolPref(\"security.enable_tls\", &enabled);\n+      mPrefBranch->GetBoolPref(\"security.enable_tls\", &enabled);\n       SSL_OptionSetDefault(SSL_ENABLE_TLS, enabled);\n \n       // Disable any ciphers that NSS might have enabled by default\n@@ -1185,7 +1187,7 @@ nsNSSComponent::InitializeNSS(PRBool showWarningBox)\n \n       // Now only set SSL/TLS ciphers we knew about at compile time\n       for (CipherPref* cp = CipherPrefs; cp->pref; ++cp) {\n-        mPref->GetBoolPref(cp->pref, &enabled);\n+        mPrefBranch->GetBoolPref(cp->pref, &enabled);\n \n         SSL_CipherPrefSetDefault(cp->id, enabled);\n       }\n@@ -1201,7 +1203,7 @@ nsNSSComponent::InitializeNSS(PRBool showWarningBox)\n       PORT_SetUCS2_ASCIIConversionFunction(pip_ucs2_ascii_conversion_fn);\n \n       // Set up OCSP //\n-      setOCSPOptions(mPref);\n+      setOCSPOptions(mPrefBranch);\n \n       InstallLoadableRoots();\n \n@@ -1246,9 +1248,9 @@ nsNSSComponent::ShutdownNSS()\n \n     PK11_SetPasswordFunc((PK11PasswordFunc)nsnull);\n \n-    if (mPref) {\n-      mPref->UnregisterCallback(\"security.\", nsNSSComponent::PrefChangedCallback,\n-                                (void*) this);\n+    if (mPrefBranch) {\n+      nsCOMPtr<nsIPrefBranchInternal> pbi = do_QueryInterface(mPrefBranch);\n+      pbi->RemoveObserver(\"security.\", this);\n     }\n \n     SSL_ClearSessionCache();\n@@ -1281,9 +1283,9 @@ nsNSSComponent::Init()\n     return rv;\n   }      \n \n-  if (!mPref) {\n-    mPref = do_GetService(NS_PREF_CONTRACTID);\n-    NS_ASSERTION(mPref, \"Unable to get pref service\");\n+  if (!mPrefBranch) {\n+    mPrefBranch = do_GetService(NS_PREFSERVICE_CONTRACTID);\n+    NS_ASSERTION(mPrefBranch, \"Unable to get pref service\");\n   }\n \n   // Do that before NSS init, to make sure we won't get unloaded.\n@@ -1515,44 +1517,6 @@ nsNSSComponent::RandomUpdate(void *entropy, PRInt32 bufLen)\n   return NS_OK;\n }\n \n-int PR_CALLBACK\n-nsNSSComponent::PrefChangedCallback(const char* aPrefName, void* data)\n-{\n-  nsNSSComponent* nss = NS_STATIC_CAST(nsNSSComponent*, data);\n-  if (nss)\n-    nss->PrefChanged(aPrefName);\n-  return 0;\n-}\n-\n-void\n-nsNSSComponent::PrefChanged(const char* prefName)\n-{\n-  nsNSSShutDownPreventionLock locker;\n-  PRBool enabled;\n-\n-  if (!nsCRT::strcmp(prefName, \"security.enable_ssl2\")) {\n-    mPref->GetBoolPref(\"security.enable_ssl2\", &enabled);\n-    SSL_OptionSetDefault(SSL_ENABLE_SSL2, enabled);\n-  } else if (!nsCRT::strcmp(prefName, \"security.enable_ssl3\")) {\n-    mPref->GetBoolPref(\"security.enable_ssl3\", &enabled);\n-    SSL_OptionSetDefault(SSL_ENABLE_SSL3, enabled);\n-  } else if (!nsCRT::strcmp(prefName, \"security.enable_tls\")) {\n-    mPref->GetBoolPref(\"security.enable_tls\", &enabled);\n-    SSL_OptionSetDefault(SSL_ENABLE_TLS, enabled);\n-  } else if (!nsCRT::strcmp(prefName, \"security.OCSP.enabled\")) {\n-    setOCSPOptions(mPref);\n-  } else {\n-    /* Look through the cipher table and set according to pref setting */\n-    for (CipherPref* cp = CipherPrefs; cp->pref; ++cp) {\n-      if (!nsCRT::strcmp(prefName, cp->pref)) {\n-        mPref->GetBoolPref(cp->pref, &enabled);\n-        SSL_CipherPrefSetDefault(cp->id, enabled);\n-        break;\n-      }\n-    }\n-  }\n-}\n-\n #define DEBUG_PSM_PROFILE\n \n #ifdef DEBUG_PSM_PROFILE\n@@ -1698,7 +1662,33 @@ nsNSSComponent::Observe(nsISupports *aSubject, const char *aTopic,\n     PK11_LogoutAll();\n     LogoutAuthenticatedPK11();\n   }\n+  else if (nsCRT::strcmp(aTopic, NS_PREFBRANCH_PREFCHANGE_TOPIC_ID) == 0) { \n+    nsNSSShutDownPreventionLock locker;\n+    PRBool enabled;\n+    NS_ConvertUCS2toUTF8  prefName(someData);\n \n+    if (prefName.Equals(\"security.enable_ssl2\")) {\n+      mPrefBranch->GetBoolPref(\"security.enable_ssl2\", &enabled);\n+      SSL_OptionSetDefault(SSL_ENABLE_SSL2, enabled);\n+    } else if (prefName.Equals(\"security.enable_ssl3\")) {\n+      mPrefBranch->GetBoolPref(\"security.enable_ssl3\", &enabled);\n+      SSL_OptionSetDefault(SSL_ENABLE_SSL3, enabled);\n+    } else if (prefName.Equals(\"security.enable_tls\")) {\n+      mPrefBranch->GetBoolPref(\"security.enable_tls\", &enabled);\n+      SSL_OptionSetDefault(SSL_ENABLE_TLS, enabled);\n+    } else if (prefName.Equals(\"security.OCSP.enabled\")) {\n+      setOCSPOptions(mPrefBranch);\n+    } else {\n+      /* Look through the cipher table and set according to pref setting */\n+      for (CipherPref* cp = CipherPrefs; cp->pref; ++cp) {\n+        if (prefName.Equals(cp->pref)) {\n+          mPrefBranch->GetBoolPref(cp->pref, &enabled);\n+          SSL_CipherPrefSetDefault(cp->id, enabled);\n+          break;\n+        }\n+      }\n+    }\n+  }\n \n #ifdef DEBUG\n   else if (nsCRT::strcmp(aTopic, PROFILE_CHANGE_NET_TEARDOWN_TOPIC) == 0) {\n@@ -2112,7 +2102,7 @@ PSMContentDownloader::handleContentDownloadError(nsresult errCode)\n       nsCString errMsg;\n       PRInt32 errCnt;\n \n-      nsCOMPtr<nsIPref> pref = do_GetService(NS_PREF_CONTRACTID,&rv);\n+      nsCOMPtr<nsIPrefBranch> pref = do_GetService(NS_PREFSERVICE_CONTRACTID,&rv);\n       if(NS_FAILED(rv)){\n         return rv;\n       }\n@@ -2129,7 +2119,8 @@ PSMContentDownloader::handleContentDownloadError(nsresult errCode)\n         pref->SetIntPref(updateErrCntPrefStr.get(),errCnt+1);\n       }\n       pref->SetCharPref(updateErrDetailPrefStr.get(),errMsg.get());\n-      pref->SavePrefFile(nsnull);\n+      nsCOMPtr<nsIPrefService> prefSvc(do_QueryInterface(pref));\n+      prefSvc->SavePrefFile(nsnull);\n     }else{\n       nsString message;\n       nsCOMPtr<nsIWindowWatcher> wwatch(do_GetService(NS_WINDOWWATCHER_CONTRACTID));"},{"sha":"ad12dddc5afc4160a62c7d4528d7888b00df0060","filename":"security/manager/ssl/src/nsNSSComponent.h","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsNSSComponent.h","raw_url":"https://github.com/mozilla/gecko-dev/raw/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsNSSComponent.h","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsNSSComponent.h?ref=d023625a0e715c4b58bb56491737838a2434bc98","patch":"@@ -50,7 +50,7 @@\n #include \"nsIEntropyCollector.h\"\n #include \"nsString.h\"\n #include \"nsIStringBundle.h\"\n-#include \"nsIPref.h\"\n+#include \"nsIPrefBranch.h\"\n #include \"nsIObserver.h\"\n #include \"nsIObserverService.h\"\n #include \"nsWeakReference.h\"\n@@ -208,8 +208,6 @@ class nsNSSComponent : public nsISignatureVerifier,\n   nsresult ConfigureInternalPKCS11Token();\n   nsresult RegisterPSMContentListener();\n   nsresult RegisterObservers();\n-  static int PR_CALLBACK PrefChangedCallback(const char* aPrefName, void* data);\n-  void PrefChanged(const char* aPrefName);\n   nsresult DownloadCrlSilently();\n   nsresult PostCRLImportEvent(nsCAutoString *urlString, PSMContentDownloader *psmDownloader);\n   nsresult getParamsForNextCrlToDownload(nsAutoString *url, PRTime *time, nsAutoString *key);\n@@ -218,7 +216,7 @@ class nsNSSComponent : public nsISignatureVerifier,\n   nsCOMPtr<nsIScriptSecurityManager> mScriptSecurityManager;\n   nsCOMPtr<nsIStringBundle> mPIPNSSBundle;\n   nsCOMPtr<nsIURIContentListener> mPSMContentListener;\n-  nsCOMPtr<nsIPref> mPref;\n+  nsCOMPtr<nsIPrefBranch> mPrefBranch;\n   nsCOMPtr<nsITimer> mTimer;\n   PRBool mNSSInitialized;\n   PRBool mObserversRegistered;"},{"sha":"505f2bea44b09a62a2f1daf209f575cd0da8357a","filename":"security/manager/ssl/src/nsNSSIOLayer.cpp","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/mozilla/gecko-dev/blob/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsNSSIOLayer.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/d023625a0e715c4b58bb56491737838a2434bc98/security/manager/ssl/src/nsNSSIOLayer.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/security/manager/ssl/src/nsNSSIOLayer.cpp?ref=d023625a0e715c4b58bb56491737838a2434bc98","patch":"@@ -45,7 +45,8 @@\n #include \"prlog.h\"\n #include \"prnetdb.h\"\n #include \"nsIPrompt.h\"\n-#include \"nsIPref.h\"\n+#include \"nsIPrefService.h\"\n+#include \"nsIPrefBranch.h\"\n #include \"nsIServiceManager.h\"\n #include \"nsIWebProgressListener.h\"\n #include \"nsIChannel.h\"\n@@ -1794,9 +1795,9 @@ nsresult nsGetUserCertChoice(SSM_UserCertChoice* certChoice)\n \n \tNS_ENSURE_ARG_POINTER(certChoice);\n \n-\tnsCOMPtr<nsIPref> prefService = do_GetService(NS_PREF_CONTRACTID);\n+\tnsCOMPtr<nsIPrefBranch> pref = do_GetService(NS_PREFSERVICE_CONTRACTID);\n \n-\tret = prefService->CopyCharPref(\"security.default_personal_cert\", &mode);\n+\tret = pref->GetCharPref(\"security.default_personal_cert\", &mode);\n \tif (NS_FAILED(ret)) {\n \t\tgoto loser;\n \t}"}]},"blames":["2a3ea54e","377bfd51","c54ac86e","2a3ea54e","9538b977","2a1a86b9","1a64376d9","87002d36a","31db9b54","c114606c","d007c347","ec415449","31db9b54","c114606c","d007c347","a16a9521","fc9a85803","4e954931d","cc76b7eb1","63804c667","e554d8362","1d88f0bc1","614c6cd81","a16a95211","8ac4991f5","dd4098926","d007c347b","d3a44165b","4f540afa3","a856cfb63","9b4cb2b2d","d1493d111","8661fd979","d7c9f3136","6741a52ed","d07f0ac0c","0e64d4352","4e7194601","b6f99631b","2c3a905fd","63804c667","8661fd979","d885acfcc","0e64d4352","24e6ca57c","dc7ad98e6","090cc567a","4f540afa3","cc76b7eb1","93e0fc7d1","4e954931","1b721304","7e7264a8","d3d24104","f0c96eaf","d22065d5"]}