Index: calendar/base/content/calendar-event-dialog.js
===================================================================
RCS file: /cvsroot/mozilla/calendar/base/content/calendar-event-dialog.js,v
retrieving revision 1.67
diff -u -8 -p -r1.67 calendar-event-dialog.js
--- calendar/base/content/calendar-event-dialog.js	19 Jan 2008 21:47:56 -0000	1.67
+++ calendar/base/content/calendar-event-dialog.js	2 Feb 2008 20:09:35 -0000
@@ -227,26 +227,29 @@ function loadDialog(item)
     } else {
         // no calendar attached to item
         // select first entry in calendar list as default
         document.getElementById("item-calendar").selectedIndex = 0;
     }
 
     /* Categories */
     try {
-        var categoriesString = getLocalizedPref("calendar.categories.names");
-        var categoriesList = categoriesString.split( "," );
+        var categoriesList = getPrefCategoriesArray();
 
         // insert the category already in the menulist so it doesn't get lost
-        var itemCategory = item.getProperty("CATEGORIES");
-        if (itemCategory) {
-            if (categoriesString.indexOf(itemCategory) == -1)
-                categoriesList[categoriesList.length] = itemCategory;
+        var itemProperty = item.getProperty("CATEGORIES");
+        if (itemProperty) {
+            var itemCategories = categoriesStringToArray(itemProperty);
+            for each (var itemCategory in itemCategories) {
+                if (!categoriesList.some(function(cat){ return cat == itemCategory; })){
+                    categoriesList.push(itemCategory);
+                }
+            }
         }
-        categoriesList.sort();
+        sortArrayByLocaleCollator(categoriesList);
 
         var oldMenulist = document.getElementById("item-categories");
         while (oldMenulist.hasChildNodes()) {
             oldMenulist.removeChild(oldMenulist.lastChild);
         }
 
         var categoryMenuList = document.getElementById("item-categories");
         var indexToSelect = 0;
@@ -403,17 +406,17 @@ function saveDialog(item)
     } else {
         item.recurrenceInfo = null;
     }
 
     /* Category */
     var category = getElementValue("item-categories");
 
     if (category != "NONE") {
-       setItemProperty(item, "CATEGORIES", category);
+       setItemProperty(item, "CATEGORIES", categoriesArrayToString([category]));
     } else {
        item.deleteProperty("CATEGORIES");
     }
 
     if (!gDetailsShown) {
         // We never showed the items in the 'More' box.  That means that clone()
         // took care of it, so just return now
         dump(item.icalString + '\n');
@@ -1173,18 +1176,17 @@ function categorySelect(aValue) {
 
 // Trick the dialog into thinking we're the categories pane
 var gCategoriesPane = {
     saveCategory: function eventDialog_saveCategory(aName, aColor) {
         //Check to make sure another category doesn't have the same name
         var promptService = 
                  Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                            .getService(Components.interfaces.nsIPromptService);
-        var categoriesString = getLocalizedPref("calendar.categories.names");
-        var categoriesList = categoriesString.split( "," );
+        var categoriesList = getPrefCategoriesArray();
         for each (cat in categoriesList) {
             if (aName.toLowerCase() == cat.toLowerCase()) {
                 var repTitle = calGetString("calendar", "categoryReplaceTitle");
                 var rep = calGetString("calendar", "categoryReplace");
                 if (promptService.confirm(null, repTitle, rep)) {
                     var categoryNameFix = formatStringForCSSRule(aName);
                     setPref("calendar.category.color." + categoryNameFix,
                             "CHAR",
@@ -1195,19 +1197,19 @@ var gCategoriesPane = {
         }
 
         if (aName.length == 0) {
             promptService.alert(null, null, noBlankCategories);
             return;
         }
 
         categoriesList.push(aName);
-        categoriesList.sort();
+        sortArrayByLocaleCollator(categoriesList);
 
-        setLocalizedPref("calendar.categories.names", categoriesList.join(','));
+        setPrefCategoriesFromArray(categoriesList);
 
         if (aColor) {
             var categoryNameFix = formatStringForCSSRule(aName);
             setPref("calendar.category.color." + categoryNameFix, "CHAR", aColor);
         }
         var catList = document.getElementById("item-categories");
         var index = categoriesList.indexOf(aName);
         catList.insertItemAt(index, aName, aName);
Index: calendar/base/content/calendar-management.js
===================================================================
RCS file: /cvsroot/mozilla/calendar/base/content/calendar-management.js,v
retrieving revision 1.20
diff -u -8 -p -r1.20 calendar-management.js
--- calendar/base/content/calendar-management.js	16 Jan 2008 10:39:06 -0000	1.20
+++ calendar/base/content/calendar-management.js	2 Feb 2008 20:09:37 -0000
@@ -163,22 +163,57 @@ function calendarListInitCategoryColors(
         gCachedStyleSheet = getStyleSheet(cssUri);
     }
 
     var prefService = Components.classes["@mozilla.org/preferences-service;1"]
                       .getService(Components.interfaces.nsIPrefService);
     var categoryPrefBranch = prefService.getBranch("calendar.category.color.");
     var categories = categoryPrefBranch.getChildList("", {});
 
+    // check category preference name syntax
+    categories = calendarConvertObsoleteColorPrefs(categoryPrefBranch, categories);
+
     // Update all categories
     for each (var category in categories) {
         updateStyleSheetForObject(category, gCachedStyleSheet);
     }
 }
 
+/**
+ * Remove illegally formatted category names from the array coloredCategories
+ * so they don't cause CSS errors.  For each illegal colored category c, if
+ * its color preference has not yet been replaced with a converted preference
+ * with key formatStringForCSSRule(c), create the preference with the
+ * converted key and with the previous preference value, and clear the old
+ * preference.  (For most users who upgrade and do not later add colors with a
+ * downgrade version, this should convert any illegal preferences once, so
+ * future runs have no illegal preferences.)
+ * @param categoryPrefBranch prefBranch for "calendar.category.color."
+ * @param coloredCategories array of preference name suffixes under the prefBranch.
+ * @return same array with each illegal name replaced with formatted name if
+ * it doesn't already exist, or simply removed from array if it does.
+ */
+function calendarConvertObsoleteColorPrefs(categoryPrefBranch, coloredCategories) {
+    for (var i in coloredCategories) {
+        var category = coloredCategories[i];
+        if (category.search(/[^_0-9a-z-]/) != -1) {
+            var categoryFix = formatStringForCSSRule(category);
+            if (!categoryPrefBranch.prefHasUserValue(categoryFix)) {
+                var color = categoryPrefBranch.getCharPref(category);
+                categoryPrefBranch.setCharPref(categoryFix, color);
+                categoryPrefBranch.clearUserPref(category); // not usable
+                coloredCategories[i] = categoryFix;  // replace illegal name
+            } else {
+                coloredCategories.splice(i, 1); // remove illegal name
+            }
+        }
+    }
+    return coloredCategories;
+}
+
 function calendarListUpdateColor(aCalendar) {
     var selectorPrefix = "treechildren::-moz-tree-cell";
 
     var color = aCalendar.getProperty("color");
     if (!color) {
         return;
     }
     var selector = selectorPrefix + "color-"  + color.substr(1);
Index: calendar/base/content/calendar-month-view.xml
===================================================================
RCS file: /cvsroot/mozilla/calendar/base/content/calendar-month-view.xml,v
retrieving revision 1.99
diff -u -8 -p -r1.99 calendar-month-view.xml
--- calendar/base/content/calendar-month-view.xml	28 Jan 2008 20:01:46 -0000	1.99
+++ calendar/base/content/calendar-month-view.xml	2 Feb 2008 20:09:38 -0000
@@ -517,24 +517,23 @@
               box.setAttribute("item-calendar", itd.item.calendar.uri.spec);
               box.setAttribute("tooltip", "itemTooltip");
 
               if (itd.item.hashId in this.monthView.mFlashingEvents) {
                 box.setAttribute("flashing", "true");
               }
 
               var categoriesSelectorList = "";
-              if (itd.item.getProperty("CATEGORIES") != null) {
-                var categoriesList = itd.item.getProperty("CATEGORIES").split(",");
-                for (var i = 0; i < categoriesList.length; i++ ) {
-                  // Remove illegal chars.
-                  categoriesList[i] = formatStringForCSSRule(categoriesList[i]);
-                }
-                categoriesSelectorList = categoriesList.join(" ");
+              var categoriesProperty = itd.item.getProperty("CATEGORIES");
+              if (categoriesProperty) {
+                var categoriesArray = categoriesStringToArray(categoriesProperty);
+                var cssClassesArray = categoriesArray.map(formatStringForCSSRule);
+                categoriesSelectorList = cssClassesArray.join(" ");
               }
+
               box.setAttribute("item-category", categoriesSelectorList);
 
               this.dayitems.insertBefore(box, before);
 
               box.calendarView = this.monthView;
               box.item = itd.item;
               box.occurrence = itd.item;
               box.parentBox = this;
Index: calendar/base/content/calendar-view-core.xml
===================================================================
RCS file: /cvsroot/mozilla/calendar/base/content/calendar-view-core.xml,v
retrieving revision 1.24
diff -u -8 -p -r1.24 calendar-view-core.xml
--- calendar/base/content/calendar-view-core.xml	25 Jan 2008 14:17:27 -0000	1.24
+++ calendar/base/content/calendar-view-core.xml	2 Feb 2008 20:09:39 -0000
@@ -201,23 +201,21 @@
         <body><![CDATA[
           var container = document.getAnonymousElementByAttribute(this,
                                                                   "anonid",
                                                                   "event-container");
           var item = this.mOccurrence
           container.setAttribute("item-calendar", item.calendar.uri.spec);
 
           var categoriesSelectorList = "";
-          if (item.getProperty("CATEGORIES") != null) {
-            var categoriesList = item.getProperty("CATEGORIES").split(",");
-            for (var i = 0; i < categoriesList.length; i++ ) {
-              // Remove illegal chars.
-              categoriesList[i] = formatStringForCSSRule(categoriesList[i]);
-            }
-            categoriesSelectorList = categoriesList.join(" ");
+          var categoriesProperty = item.getProperty("CATEGORIES");
+          if (categoriesProperty) {
+            var categoriesArray = categoriesStringToArray(categoriesProperty);
+            var cssClassesArray = categoriesArray.map(formatStringForCSSRule);
+            categoriesSelectorList = cssClassesArray.join(" ");
           }
 
           var box = document.
               getAnonymousElementByAttribute(this,"anonid","category-box");
           if (box) {
               box.categories = categoriesSelectorList;
               box = document.
                   getAnonymousElementByAttribute(this,"anonid","eventbox");
Index: calendar/base/content/calendar-views.js
===================================================================
RCS file: /cvsroot/mozilla/calendar/base/content/calendar-views.js,v
retrieving revision 1.36
diff -u -8 -p -r1.36 calendar-views.js
--- calendar/base/content/calendar-views.js	19 Jan 2008 21:47:56 -0000	1.36
+++ calendar/base/content/calendar-views.js	2 Feb 2008 20:09:39 -0000
@@ -405,40 +405,45 @@ function getStyleSheet(aStyleSheetPath) 
         if (sheet.href == aStyleSheetPath) {
             return sheet;
         }
     }
     // Avoid the js strict "function does not always return a value" warning.
     return null;
 }
 
-// Updates the style rules for a particular object.  If the object is a
-// category (and hence doesn't have a uri), we set the border color.  If
-// it's a calendar, we set the background color
+/**
+ * Updates the style rules for a particular object.  If the object is a
+ * category (and hence doesn't have a uri), we set the category bar color.
+ * If it's a calendar, we set the background color and contrasting text color.
+ * @param aObject either a calendar (with a .uri), or the category color
+ * pref key suffix [the non-unicode part after "calendar.category.color.",
+ * equivalent to formatStringForCSSRule(categoryNameInUnicode)].
+ */
 function updateStyleSheetForObject(aObject, aSheet) {
     var selectorPrefix, name, ruleUpdaterFunc;
     if (aObject.uri) {
-        // This is a calendar, so we're going to set the background color
+        // For a calendar, set background and contrasting text colors
         name = aObject.uri.spec;
         selectorPrefix = "item-calendar=";
         ruleUpdaterFunc = function calendarRuleFunc(aRule, aIndex) {
             var color = aObject.getProperty('color');
             if (!color) {
                 color = "#A8C2E1";
             }
             aRule.style.backgroundColor = color;
             aRule.style.color = getContrastingTextColor(color);
         };
     } else {
-        // This is a category, where we set the border.  Also note that we 
-        // use the ~= selector, since there could be multiple categories
-        name = formatStringForCSSRule(aObject);
+        // For a category, set the category bar color.  Also note that
+        // it uses the ~= selector, since there could be multiple categories.
+        name = aObject;
         selectorPrefix = "item-category~=";
         ruleUpdaterFunc = function categoryRuleFunc(aRule, aIndex) {
-            var color = getPrefSafe("calendar.category.color."+aObject, null);
+            var color = getPrefSafe("calendar.category.color."+name, null);
             if (color) {
                 aRule.style.backgroundColor = color;
             } else {
                 aSheet.deleteRule(aIndex);
             }
         };
     }
 
Index: calendar/base/content/preferences/categories.js
===================================================================
RCS file: /cvsroot/mozilla/calendar/base/content/preferences/categories.js,v
retrieving revision 1.7
diff -u -8 -p -r1.7 categories.js
--- calendar/base/content/preferences/categories.js	19 Jan 2008 21:47:55 -0000	1.7
+++ calendar/base/content/preferences/categories.js	2 Feb 2008 20:09:39 -0000
@@ -62,38 +62,33 @@ var gCategoriesPane = {
 
         // A list of preferences to be reverted when the dialog is cancelled.
         // It needs to be a property of the parent to be visible onCancel
         if (!parent.backupPrefList) {
             parent.backupPrefList = [];
         }
 
         var categories = document.getElementById("calendar.categories.names").value;
-
-        // If no categories are configured load a default set from properties file
-        if (!categories || categories == "") {
-            categories = calGetString("categories", "categories");
-            document.getElementById("calendar.categories.names").value = categories;
-        }
-
-        gCategoryList = categories.split(",");
+        gCategoryList = categoriesStringToArray(categories);
         
         // When categories is empty, split returns an array containing one empty
         // string, rather than an empty array. This results in an empty listbox
         // child with no corresponding category.
         if (gCategoryList.length == 1 && !gCategoryList[0].length) {
             gCategoryList.pop();
         }
 
         this.updateCategoryList();
     },
 
     updateCategoryList: function () {
-        gCategoryList.sort();
-        document.getElementById("calendar.categories.names").value = gCategoryList.join(",");
+        sortArrayByLocaleCollator(gCategoryList);
+        document.getElementById("calendar.categories.names").value =
+            categoriesArrayToString(gCategoryList);
+
         var listbox = document.getElementById("categorieslist");
 
         listbox.clearSelection();
         document.getElementById("editCButton").disabled = "true";
         document.getElementById("deleteCButton").disabled = "true";
 
         while (listbox.lastChild.id != "categoryColumns")
             listbox.removeChild(listbox.lastChild);
Index: calendar/base/src/calUtils.js
===================================================================
RCS file: /cvsroot/mozilla/calendar/base/src/calUtils.js,v
retrieving revision 1.72
diff -u -8 -p -r1.72 calUtils.js
--- calendar/base/src/calUtils.js	27 Jan 2008 17:55:03 -0000	1.72
+++ calendar/base/src/calUtils.js	2 Feb 2008 20:09:41 -0000
@@ -161,22 +161,50 @@ function calendarDefaultTimezone() {
             setPref("calendar.timezone.local", "CHAR", calendarDefaultTimezone.mTz.tzid);
         }
     }
     return calendarDefaultTimezone.mTz;
 }
 
 /**
  * Format the given string to work inside a CSS rule selector
+ * (and as part of a non-unicode preference key).
  *
- * @param aString       The string to format
- * @return              The formatted string
+ * Replaces each space ' ' char with '_'.
+ * Replaces each char other than ascii digits and letters, with '-uxHHH-'
+ * where HHH is unicode in hexadecimal (variable length, terminated by the '-').
+ *
+ * Ensures: result only contains ascii digits, letters,'-', and '_'.
+ * Ensures: result is invertible, so (f(a) = f(b)) implies (a = b).
+ *   also means f is not idempotent, so (a != f(a)) implies (f(a) != f(f(a))).
+ * Ensures: result must be lowercase.
+ * Rationale: preference keys require 8bit chars, and ascii chars are legible
+ *              in most fonts (in case user edits PROFILE/prefs.js).
+ *            CSS class names in Gecko 1.8 seem to require lowercase,
+ *              no punctuation, and of course no spaces.
+ *   nmchar		[_a-zA-Z0-9-]|{nonascii}|{escape}
+ *   name		{nmchar}+
+ *   http://www.w3.org/TR/CSS21/grammar.html#scanner
+ *
+ * @param aString       The unicode string to format
+ * @return              The formatted string using only chars [_a-zA-Z0-9-]
  */
 function formatStringForCSSRule(aString) {
-    return aString.replace(/ /g, "_").toLowerCase();
+    function toReplacement(ch) {
+        // char code is natural number (positive integer)
+        var nat = ch.charCodeAt(0);
+        switch(nat) {
+            case 0x20: // space
+                return "_";
+            default:
+                return "-ux" + nat.toString(16) + "-"; // lowercase
+        }
+    }
+    // Result must be lowercase or style rule will not work.
+    return aString.toLowerCase().replace(/[^a-zA-Z0-9]/g, toReplacement);
 }
 
 /**
  * We're going to do everything in our power, short of rumaging through the
  * user's actual file-system, to figure out the time-zone they're in.  The
  * deciding factors are the offsets given by (northern-hemisphere) summer and
  * winter JSdates.  However, when available, we also use the name of the
  * timezone in the JSdate, or a string-bundle term from the locale.
@@ -975,16 +1003,90 @@ function getLocalizedPref(aPrefName, aDe
         result = pb2.getComplexValue(aPrefName, Components.interfaces.nsISupportsString).data;
     } catch(ex) {
         return aDefault;
     }
     return result;
 }
 
 /**
+ * Get array of category names from preferences or locale default,
+ * unescaping any commas in each category name.
+ * @return array of category names
+ */
+function getPrefCategoriesArray() {
+    var categories = getLocalizedPref("calendar.categories.names", null);
+    // If no categories are configured load a default set from properties file
+    if (!categories || categories == "") {
+        categories = calGetString("categories", "categories");
+        setLocalizedPref("calendar.categories.names", categories);
+    }
+    return categoriesStringToArray(categories);
+}
+
+/**
+ * Convert categories string to list of category names.
+ *
+ * Stored categories may include escaped commas within a name.
+ * Split categories string at commas, but not at escaped commas (\,).
+ * Afterward, replace escaped commas (\,) with commas (,) in each name.
+ * @param aCategoriesPrefValue string from "calendar.categories.names" pref,
+ * which may contain escaped commas (\,) in names.
+ * @return list of category names
+ */
+function categoriesStringToArray(aCategories) {
+    // \u001A is the unicode "SUBSTITUTE" character
+    function revertCommas(name) { return name.replace(/\u001A/g, ","); }
+    return aCategories.replace(/\\,/g, "\u001A").split(",").map(revertCommas);
+}
+
+/**
+ * Set categories preference, escaping any commas in category names.
+ * @param aCategoriesArray array of category names,
+ * may contain unescaped commas which will be escaped in combined pref.
+ */
+function setPrefCategoriesFromArray(aCategoriesArray) {
+    setLocalizedPref("calendar.categories.names",
+                     categoriesArrayToString(aCategoriesList));
+}
+
+/**
+ * Convert array of category names to string.
+ *
+ * Category names may contain commas (,).  Escape commas (\,) in each,
+ * then join them in comma separated string for storage.
+ * @param aSortedCategoriesArray sorted array of category names,
+ * may contain unescaped commas, which will be escaped in combined string.
+ */
+function categoriesArrayToString(aSortedCategoriesArray) {
+    function escapeComma(category) { return category.replace(/,/g,"\\,"); }
+    return aSortedCategoriesArray.map(escapeComma).join(",");
+}
+
+/**
+ * Sort an array of strings according to the current locale.
+ * Modifies aStringArray, returning it sorted.
+ */
+function sortArrayByLocaleCollator(aStringArray) {
+    // get a current locale string collator for compareEvents
+    var localeService =
+        Components
+        .classes["@mozilla.org/intl/nslocaleservice;1"]
+        .getService(Components.interfaces.nsILocaleService);
+    var localeCollator =
+        Components
+        .classes["@mozilla.org/intl/collation-factory;1"]
+        .getService(Components.interfaces.nsICollationFactory)
+        .CreateCollation(localeService.getApplicationLocale());
+    function compare(a, b) { return localeCollator.compareString(0, a, b); }
+    aStringArray.sort(compare);
+    return aStringArray;
+}
+
+/**
  * Gets the value of a string in a .properties file
  *
  * @param aBundleName  the name of the properties file.  It is assumed that the
  *                     file lives in chrome://calendar/locale/
  * @param aStringName  the name of the string within the properties file
  * @param aParams      optional array of parameters to format the string
  */
 function calGetString(aBundleName, aStringName, aParams) {
Index: calendar/prototypes/wcap/sun-calendar-event-dialog.js
===================================================================
RCS file: /cvsroot/mozilla/calendar/prototypes/wcap/sun-calendar-event-dialog.js,v
retrieving revision 1.60
diff -u -8 -p -r1.60 sun-calendar-event-dialog.js
--- calendar/prototypes/wcap/sun-calendar-event-dialog.js	30 Jan 2008 19:50:45 -0000	1.60
+++ calendar/prototypes/wcap/sun-calendar-event-dialog.js	2 Feb 2008 20:09:43 -0000
@@ -330,41 +330,36 @@ function loadDialog(item) {
 
     // no calendar attached to item
     // select first entry in calendar list as default
     if (!calendarToUse) {
         document.getElementById("item-calendar").selectedIndex = 0;
     }
 
     // Categories
-    var categoriesString = getLocalizedPref("calendar.categories.names", "");
-
-    // If no categories are configured load a default set from properties file
-    if (!categoriesString || categoriesString == "") {
-        categoriesString = calGetString("categories", "categories");
-        setLocalizedPref("calendar.categories.names", categoriesString);
-    }
-
-    var categoriesList = categoriesString.split(",");
+    var categoriesList = getPrefCategoriesArray();
     
     // When categoriesString is empty, split returns an array containing one
     // empty string, rather than an empty array. This results in an empty
     // menulist item with no corresponding category.
     if (categoriesList.length == 1 && !categoriesList[0].length) {
         categoriesList.pop();
     }
 
     // insert the category already in the menulist so it doesn't get lost
-    var itemCategory = item.getProperty("CATEGORIES");
-    if (itemCategory) {
-        if (categoriesString.indexOf(itemCategory) == -1) {
-            categoriesList[categoriesList.length] = itemCategory;
+    var itemProperty = item.getProperty("CATEGORIES");
+    if (itemProperty) {
+        var itemCategories = categoriesStringToArray(itemProperty);
+        for each (var itemCategory in itemCategories) {
+            if (!categoriesList.some(function(cat){ return cat == itemCategory; })){
+                categoriesList.push(itemCategory);
+            }
         }
     }
-    categoriesList.sort();
+    sortArrayByLocaleCollator(categoriesList);
 
     var oldMenulist = document.getElementById("item-categories");
     while (oldMenulist.hasChildNodes()) {
         oldMenulist.removeChild(oldMenulist.lastChild);
     }
 
     var categoryMenuList = document.getElementById("item-categories");
     var indexToSelect = 0;
@@ -813,17 +808,17 @@ function saveDialog(item) {
         }
         setItemProperty(item, "PERCENT-COMPLETE", percentCompleteInteger);
     }
 
     // Category
     var category = getElementValue("item-categories");
 
     if (category != "NONE") {
-       setItemProperty(item, "CATEGORIES", category);
+       setItemProperty(item, "CATEGORIES", categoriesArrayToString([category]));
     } else {
        item.deleteProperty("CATEGORIES");
     }
 
     // URL
     setItemProperty(item, "URL", gURL, "attachments");
 
     // Description
