From: Boris Zbarsky <bzbarsky@mit.edu>
Bug 493495.  Protect against recursive attempts to report a security exception in cases when the URI objects involved can't be accessed due to being implemented as a JS component.  r+sr=mrbkap

diff --git a/caps/src/nsScriptSecurityManager.cpp b/caps/src/nsScriptSecurityManager.cpp
--- a/caps/src/nsScriptSecurityManager.cpp
+++ b/caps/src/nsScriptSecurityManager.cpp
@@ -121,21 +121,33 @@ JSValIDToString(JSContext *cx, const jsv
 {
     JSAutoRequest ar(cx);
     JSString *str = JS_ValueToString(cx, idval);
     if(!str)
         return nsnull;
     return reinterpret_cast<PRUnichar*>(JS_GetStringChars(str));
 }
 
+static PRUint32 sInPrincipalDomainOrigin;
+class nsAutoInPrincipalDomainOriginSetter {
+public:
+    nsAutoInPrincipalDomainOriginSetter() {
+        ++sInPrincipalDomainOrigin;
+    }
+    ~nsAutoInPrincipalDomainOriginSetter() {
+        --sInPrincipalDomainOrigin;
+    }
+};
+
 static
 nsresult
 GetPrincipalDomainOrigin(nsIPrincipal* aPrincipal,
                          nsACString& aOrigin)
 {
+  nsAutoInPrincipalDomainOriginSetter autoSetter;
   aOrigin.Truncate();
 
   nsCOMPtr<nsIURI> uri;
   aPrincipal->GetDomain(getter_AddRefs(uri));
   if (!uri) {
     aPrincipal->GetURI(getter_AddRefs(uri));
   }
   NS_ENSURE_TRUE(uri, NS_ERROR_UNEXPECTED);
@@ -806,37 +818,41 @@ nsScriptSecurityManager::CheckPropertyAc
             stringName.AssignLiteral("SetPropertyDeniedOrigins");
             break;
         case nsIXPCSecurityManager::ACCESS_CALL_METHOD:
             stringName.AssignLiteral("CallMethodDeniedOrigins");
         }
 
         NS_ConvertUTF8toUTF16 className(classInfoData.GetName());
         nsCAutoString subjectOrigin;
-        GetPrincipalDomainOrigin(subjectPrincipal, subjectOrigin);
+        if (!sInPrincipalDomainOrigin) {
+            GetPrincipalDomainOrigin(subjectPrincipal, subjectOrigin);
+        } else {
+            subjectOrigin.AssignLiteral("the security manager");
+        }
         NS_ConvertUTF8toUTF16 subjectOriginUnicode(subjectOrigin);
 
         nsCAutoString objectOrigin;
-        if (objectPrincipal) {
+        if (!sInPrincipalDomainOrigin && objectPrincipal) {
             GetPrincipalDomainOrigin(objectPrincipal, objectOrigin);
         }
         NS_ConvertUTF8toUTF16 objectOriginUnicode(objectOrigin);
             
         nsXPIDLString errorMsg;
         const PRUnichar *formatStrings[] =
         {
             subjectOriginUnicode.get(),
             className.get(),
             JSValIDToString(cx, aProperty),
             objectOriginUnicode.get()
         };
 
         PRUint32 length = NS_ARRAY_LENGTH(formatStrings);
 
-        if (!objectPrincipal) {
+        if (sInPrincipalDomainOrigin || !objectPrincipal) {
             stringName.AppendLiteral("OnlySubject");
             --length;
         }
         
         // We need to keep our existing failure rv and not override it
         // with a likely success code from the following string bundle
         // call in order to throw the correct security exception later.
         nsresult rv2 = sStrBundle->FormatStringFromName(stringName.get(),
