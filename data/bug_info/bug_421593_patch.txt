Index: commandLine.js
===================================================================
--- commandLine.js	(revision 454)
+++ commandLine.js	(working copy)
@@ -62,13 +62,21 @@
             }
 
             var scriptToEval = expr;
+
+            // If we want to use a specific |this|, wrap the expression with Function.apply()
+            // and inject the new |this| into the sandbox so it's easily accessible.
             if (thisValue) {
                 // XXX is this safe if we're recycling the sandbox?
                 sandbox.__thisValue__ = thisValue;
-                // XXX this loses any value returned by expr.
-                scriptToEval = " (function() { " + expr + " }).apply(__thisValue__);";
+                scriptToEval = "(function() { return " + scriptToEval + " }).apply(__thisValue__);";
             }
 
+            // Page scripts expect |window| to be the global object, not the
+            // sandbox object itself. Stick window into the scope chain so
+            // assignments like |foo = bar| are effectively |window.foo =
+            // bar|, else the page won't see the new value.
+            scriptToEval = "with (window) { " + scriptToEval + " };";
+
             try {
                 result = Components.utils.evalInSandbox(scriptToEval, sandbox);
             } catch (e) {
Index: debugger.js
===================================================================
--- debugger.js	(revision 454)
+++ debugger.js	(working copy)
@@ -76,7 +76,7 @@
         var scriptToEval = js;
         if (scope && scope.thisValue) {
             // XXX need to stick scope.thisValue somewhere... frame.scope.globalObject?
-            scriptToEval = " (function() { " + js + " }).apply(__thisValue__);";
+            scriptToEval = " (function() { return " + js + " }).apply(__thisValue__);";
         }
 
         // This seem to be safe; eval'ing a getter property in content that tries to
