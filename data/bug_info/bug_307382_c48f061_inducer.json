{"bug_id":307382,"commitHash":"c48f061","commit_info":{"sha":"c48f061d3c97a25f13b761f6ab364c0228b22d9a","commit":{"author":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2005-09-09T18:43:45Z"},"committer":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2005-09-09T18:43:45Z"},"message":"Remove the security.checkloaduri preference.  Please to be using the\ncheckloaduri CAPS policy instead, since that's less likely to let you shoot\nyourself in the foot.\n\nBug 307382, r=caillon, sr=dveditz","tree":{"sha":"8c6d9dd0a80a2745aa2ed9f7132d656d75299241","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/8c6d9dd0a80a2745aa2ed9f7132d656d75299241"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/c48f061d3c97a25f13b761f6ab364c0228b22d9a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/c48f061d3c97a25f13b761f6ab364c0228b22d9a","html_url":"https://github.com/mozilla/gecko-dev/commit/c48f061d3c97a25f13b761f6ab364c0228b22d9a","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/c48f061d3c97a25f13b761f6ab364c0228b22d9a/comments","author":null,"committer":null,"parents":[{"sha":"9612499f1c812169c7c881b70e75e04ef5ea7f03","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/9612499f1c812169c7c881b70e75e04ef5ea7f03","html_url":"https://github.com/mozilla/gecko-dev/commit/9612499f1c812169c7c881b70e75e04ef5ea7f03"}],"stats":{"total":48,"additions":20,"deletions":28},"files":[{"sha":"923ae69466da564f9eecc664e3ec5f5efb47d0f8","filename":"caps/src/nsScriptSecurityManager.cpp","status":"modified","additions":20,"deletions":28,"changes":48,"blob_url":"https://github.com/mozilla/gecko-dev/blob/c48f061d3c97a25f13b761f6ab364c0228b22d9a/caps/src/nsScriptSecurityManager.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/c48f061d3c97a25f13b761f6ab364c0228b22d9a/caps/src/nsScriptSecurityManager.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/caps/src/nsScriptSecurityManager.cpp?ref=c48f061d3c97a25f13b761f6ab364c0228b22d9a","patch":"@@ -1311,43 +1311,35 @@ nsScriptSecurityManager::CheckLoadURIWithPrincipal(nsIPrincipal* aPrincipal,\n     {\n         if (targetScheme.LowerCaseEqualsASCII(protocolList[i].name))\n         {\n-            PRBool doCheck = PR_FALSE;\n             switch (protocolList[i].action)\n             {\n             case AllowProtocol:\n                 // everyone can access these schemes.\n                 return NS_OK;\n             case PrefControlled:\n-                // Allow access if pref is false\n                 {\n-                    mSecurityPref->SecurityGetBoolPref(\"security.checkloaduri\",\n-                                                       &doCheck);\n-                    if (doCheck)\n-                    {\n-                        // resource: and chrome: are equivalent, securitywise\n-                        if (sourceScheme.EqualsLiteral(\"chrome\") ||\n-                            sourceScheme.EqualsLiteral(\"resource\"))\n-                            return NS_OK;\n-\n-                        // Now check capability policies\n-                        static const char loadURIPrefGroup[] = \"checkloaduri\";\n-\n-                        SecurityLevel secLevel;\n-                        rv = LookupPolicy(aPrincipal,\n-                                          (char*)loadURIPrefGroup,\n-                                          sEnabledID,\n-                                          nsIXPCSecurityManager::ACCESS_GET_PROPERTY, \n-                                          nsnull, &secLevel);\n-                        if (NS_SUCCEEDED(rv) && secLevel.level == SCRIPT_SECURITY_ALL_ACCESS)\n-                        {\n-                            // OK for this site!\n-                            return NS_OK;\n-                        }\n+                    // resource: and chrome: are equivalent, securitywise\n+                    if (sourceScheme.EqualsLiteral(\"chrome\") ||\n+                        sourceScheme.EqualsLiteral(\"resource\"))\n+                        return NS_OK;\n+\n+                    // Now check capability policies\n+                    static const char loadURIPrefGroup[] = \"checkloaduri\";\n \n-                        ReportError(nsnull, errorTag, sourceURI, aTargetURI);\n-                        return NS_ERROR_DOM_BAD_URI;\n+                    SecurityLevel secLevel;\n+                    rv = LookupPolicy(aPrincipal,\n+                                      (char*)loadURIPrefGroup,\n+                                      sEnabledID,\n+                                      nsIXPCSecurityManager::ACCESS_GET_PROPERTY, \n+                                      nsnull, &secLevel);\n+                    if (NS_SUCCEEDED(rv) && secLevel.level == SCRIPT_SECURITY_ALL_ACCESS)\n+                    {\n+                        // OK for this site!\n+                        return NS_OK;\n                     }\n-                    return NS_OK;\n+\n+                    ReportError(nsnull, errorTag, sourceURI, aTargetURI);\n+                    return NS_ERROR_DOM_BAD_URI;\n                 }\n             case ChromeProtocol:\n                 if (aFlags & nsIScriptSecurityManager::ALLOW_CHROME)"}]},"blames":["1b5e7659","08b3a165","060e388a","ea5d4185","6f5d99be","f1137e89","f9c13993","4ede7671"]}