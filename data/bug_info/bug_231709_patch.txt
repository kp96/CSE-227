Index: security/manager/ssl/src/nsNSSComponent.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsNSSComponent.cpp,v
retrieving revision 1.112
diff -p -u -d -r1.112 nsNSSComponent.cpp
--- security/manager/ssl/src/nsNSSComponent.cpp	21 Oct 2003 22:11:49 -0000	1.112
+++ security/manager/ssl/src/nsNSSComponent.cpp	23 Jan 2004 05:37:12 -0000
@@ -1383,16 +1383,17 @@ nsNSSComponent::VerifySignature(const ch
                                 PRInt32* aErrorCode,
                                 nsIPrincipal** aPrincipal)
 {
+  if (!aPrincipal || !aErrorCode) {
+    return NS_ERROR_NULL_POINTER;
+  }
+
+  *aErrorCode = 0;
+  *aPrincipal = nsnull;
+
   nsNSSShutDownPreventionLock locker;
   SEC_PKCS7DecoderContext * p7_ctxt = nsnull;
   SEC_PKCS7ContentInfo * p7_info = nsnull; 
   unsigned char hash[SHA1_LENGTH]; 
-  PRBool rv;
-
-  if (!aPrincipal || !aErrorCode)
-    return NS_ERROR_NULL_POINTER;
-  *aErrorCode = 0;
-  *aPrincipal = nsnull;
 
   p7_ctxt = SEC_PKCS7DecoderStart(ContentCallback,
                         nsnull,
@@ -1434,43 +1435,53 @@ nsNSSComponent::VerifySignature(const ch
   }
 
   //-- Verify signature
-  rv = SEC_PKCS7VerifyDetachedSignature(p7_info, certUsageObjectSigner, &digest, HASH_AlgSHA1, PR_TRUE);
-  if (rv != PR_TRUE) {
+  PRBool verified = SEC_PKCS7VerifyDetachedSignature(p7_info,
+                                                     certUsageObjectSigner,
+                                                     &digest, HASH_AlgSHA1,
+                                                     PR_TRUE);
+  // SEC_PKCS7VerifyDetachedSignature returns a SECStatus cast to PRBool,
+  // so we have to explicitly check |if (verified != PR_TRUE)| here, rather
+  // than check |if (!verified)|
+  if (verified != PR_TRUE) {
     *aErrorCode = PR_GetError();
   }
 
   // Get the signing cert //
   CERTCertificate *cert = p7_info->content.signedData->signerInfos[0]->cert;
   if (cert) {
-    nsresult rv2;
     nsCOMPtr<nsIX509Cert> pCert = new nsNSSCertificate(cert);
+    if (!pCert) {
+      return NS_ERROR_OUT_OF_MEMORY;
+    }
+
+    nsresult rv;
     if (!mScriptSecurityManager) {
       nsAutoLock lock(mutex);
       // re-test the condition to prevent double initialization
       if (!mScriptSecurityManager) {
         mScriptSecurityManager = 
-           do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv2);
-        if (NS_FAILED(rv2)) return rv2;
+           do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);
+        if (NS_FAILED(rv)) return rv;
       }
     }
+
     //-- Create a certificate principal with id and organization data
     nsAutoString fingerprint;
-    rv2 = pCert->GetSha1Fingerprint(fingerprint);
-    NS_LossyConvertUCS2toASCII fingerprintStr(fingerprint);
-    if (NS_FAILED(rv2)) return rv2;
+    rv = pCert->GetSha1Fingerprint(fingerprint);
+    if (NS_FAILED(rv)) return rv;
     nsCOMPtr<nsIPrincipal> certPrincipal;
-    rv2 = mScriptSecurityManager->GetCertificatePrincipal(fingerprintStr.get(), nsnull,
-                                                          getter_AddRefs(certPrincipal));
-    if (NS_FAILED(rv2) || !certPrincipal) return rv2;
+    rv = mScriptSecurityManager->
+      GetCertificatePrincipal(NS_LossyConvertUTF16toASCII(fingerprint).get(),
+                              nsnull, getter_AddRefs(certPrincipal));
+    if (NS_FAILED(rv) || !certPrincipal) return rv;
 
     nsAutoString orgName;
-    rv2 = pCert->GetOrganization(orgName);
-    if (NS_FAILED(rv2)) return rv2;
-    NS_LossyConvertUCS2toASCII  orgNameStr(orgName);
-    rv2 = certPrincipal->SetCommonName(orgNameStr.get());
-    if (NS_FAILED(rv2)) return rv2;
+    rv = pCert->GetOrganization(orgName);
+    if (NS_FAILED(rv)) return rv;
+    rv = certPrincipal->SetCommonName(NS_LossyConvertUTF16toASCII(orgName).get());
+    if (NS_FAILED(rv)) return rv;
 
-    *aPrincipal = certPrincipal;
+    NS_ADDREF(*aPrincipal = certPrincipal);
   }
 
   if (p7_info) {
