{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas24958ce\""},"diff":[{"chunks":[{"content":"@@ -133,18 +133,6 @@ interface gfxIImageFrame : nsISupports","changes":[{"type":"normal","normal":true,"ln1":133,"ln2":133,"content":"   void getImageData([array, size_is(length)] out PRUint8 bits, out unsigned long length);"},{"type":"normal","normal":true,"ln1":134,"ln2":134,"content":" "},{"type":"normal","normal":true,"ln1":135,"ln2":135,"content":"   /**"},{"type":"del","del":true,"ln":136,"content":"-   * Sets \\a length bytes of \\a data in this object."},{"type":"del","del":true,"ln":137,"content":"-   * @param offset The offset from the first pixel in bytes.  To set"},{"type":"del","del":true,"ln":138,"content":"-   *   data beginning with the first (top left) pixel in the image, \\a offset"},{"type":"del","del":true,"ln":139,"content":"-   *   should be 0; to set data beginning with, for example, the sixth pixel in"},{"type":"del","del":true,"ln":140,"content":"-   *   the first row of a RGBA32 image, the offset should be 20."},{"type":"del","del":true,"ln":141,"content":"-   * @attension should we use PRUint32 instead?"},{"type":"del","del":true,"ln":142,"content":"-   */"},{"type":"del","del":true,"ln":143,"content":"-  void setImageData([array, size_is(length), const] in PRUint8 data,"},{"type":"del","del":true,"ln":144,"content":"-                    in unsigned long length,"},{"type":"del","del":true,"ln":145,"content":"-                    in long offset);"},{"type":"del","del":true,"ln":146,"content":"-"},{"type":"del","del":true,"ln":147,"content":"-  /**"},{"type":"normal","normal":true,"ln1":148,"ln2":136,"content":"    * Lock image pixels before addressing the data directly"},{"type":"normal","normal":true,"ln1":149,"ln2":137,"content":"    */"},{"type":"normal","normal":true,"ln1":150,"ln2":138,"content":"   void lockImageData();"}],"oldStart":133,"oldLines":18,"newStart":133,"newLines":6},{"content":"@@ -155,37 +143,6 @@ interface gfxIImageFrame : nsISupports","changes":[{"type":"normal","normal":true,"ln1":155,"ln2":143,"content":"   void unlockImageData();"},{"type":"normal","normal":true,"ln1":156,"ln2":144,"content":" "},{"type":"normal","normal":true,"ln1":157,"ln2":145,"content":" "},{"type":"del","del":true,"ln":158,"content":"-"},{"type":"del","del":true,"ln":159,"content":"-  /* alpha stuff.. used for _A1 and _A8 formated images */"},{"type":"del","del":true,"ln":160,"content":"-  readonly attribute unsigned long alphaBytesPerRow;"},{"type":"del","del":true,"ln":161,"content":"-"},{"type":"del","del":true,"ln":162,"content":"-  /**"},{"type":"del","del":true,"ln":163,"content":"-   * returns the number of bytes allocated for the alpha mask"},{"type":"del","del":true,"ln":164,"content":"-   */"},{"type":"del","del":true,"ln":165,"content":"-  readonly attribute unsigned long alphaDataLength;"},{"type":"del","del":true,"ln":166,"content":"-"},{"type":"del","del":true,"ln":167,"content":"-  // XXX do we copy here?  lets not..."},{"type":"del","del":true,"ln":168,"content":"-  void getAlphaData([array, size_is(length)] out PRUint8 bits, out unsigned long length);"},{"type":"del","del":true,"ln":169,"content":"-"},{"type":"del","del":true,"ln":170,"content":"-  /**"},{"type":"del","del":true,"ln":171,"content":"-   * Sets \\a length bytes of \\a data in this object."},{"type":"del","del":true,"ln":172,"content":"-   */"},{"type":"del","del":true,"ln":173,"content":"-  void setAlphaData([array, size_is(length), const] in PRUint8 data,"},{"type":"del","del":true,"ln":174,"content":"-                    in unsigned long length,"},{"type":"del","del":true,"ln":175,"content":"-                    in long offset);"},{"type":"del","del":true,"ln":176,"content":"-"},{"type":"del","del":true,"ln":177,"content":"-  /**"},{"type":"del","del":true,"ln":178,"content":"-   * Lock alpha pixels before addressing the data directly"},{"type":"del","del":true,"ln":179,"content":"-   */"},{"type":"del","del":true,"ln":180,"content":"-  void lockAlphaData();"},{"type":"del","del":true,"ln":181,"content":"-"},{"type":"del","del":true,"ln":182,"content":"-  /**"},{"type":"del","del":true,"ln":183,"content":"-   * Unlock alpha pixels"},{"type":"del","del":true,"ln":184,"content":"-   */"},{"type":"del","del":true,"ln":185,"content":"-  void unlockAlphaData();"},{"type":"del","del":true,"ln":186,"content":"-"},{"type":"del","del":true,"ln":187,"content":"-"},{"type":"del","del":true,"ln":188,"content":"-"},{"type":"normal","normal":true,"ln1":189,"ln2":146,"content":"   /* GIF Specific methods.  These should be in a different class or interface. */"},{"type":"normal","normal":true,"ln1":190,"ln2":147,"content":" "},{"type":"normal","normal":true,"ln1":191,"ln2":148,"content":"   /**"}],"oldStart":155,"oldLines":37,"newStart":143,"newLines":6},{"content":"@@ -199,9 +156,4 @@ interface gfxIImageFrame : nsISupports","changes":[{"type":"normal","normal":true,"ln1":199,"ln2":156,"content":"    * moment"},{"type":"normal","normal":true,"ln1":200,"ln2":157,"content":"    */"},{"type":"normal","normal":true,"ln1":201,"ln2":158,"content":"   attribute long frameDisposalMethod;"},{"type":"del","del":true,"ln":202,"content":"-"},{"type":"del","del":true,"ln":203,"content":"-  /* frame background color"},{"type":"del","del":true,"ln":204,"content":"-   * GIF specific, should be in a GIF specific frame"},{"type":"del","del":true,"ln":205,"content":"-   */  "},{"type":"del","del":true,"ln":206,"content":"-  attribute gfx_color backgroundColor;"},{"type":"normal","normal":true,"ln1":207,"ln2":159,"content":" };"}],"oldStart":199,"oldLines":9,"newStart":156,"newLines":4}],"deletions":48,"additions":0,"from":"gfx/idl/gfxIImageFrame.idl","to":"gfx/idl/gfxIImageFrame.idl","index":["9081520..7658a23","100644"]},{"chunks":[{"content":"@@ -45,9 +45,7 @@ NS_IMPL_ISUPPORTS2(gfxImageFrame, gfxIImageFrame, nsIInterfaceRequestor)","changes":[{"type":"normal","normal":true,"ln1":45,"ln2":45,"content":" gfxImageFrame::gfxImageFrame() :"},{"type":"normal","normal":true,"ln1":46,"ln2":46,"content":"   mInitialized(PR_FALSE),"},{"type":"normal","normal":true,"ln1":47,"ln2":47,"content":"   mMutable(PR_TRUE),"},{"type":"del","del":true,"ln":48,"content":"-  mHasBackgroundColor(PR_FALSE),"},{"type":"normal","normal":true,"ln1":49,"ln2":48,"content":"   mTimeout(100),"},{"type":"del","del":true,"ln":50,"content":"-  mBackgroundColor(0),"},{"type":"normal","normal":true,"ln1":51,"ln2":49,"content":"   mDisposalMethod(0)"},{"type":"normal","normal":true,"ln1":52,"ln2":50,"content":" {"},{"type":"normal","normal":true,"ln1":53,"ln2":51,"content":"   /* member initializers and constructor code */"}],"oldStart":45,"oldLines":9,"newStart":45,"newLines":7},{"content":"@@ -104,7 +102,6 @@ NS_IMETHODIMP gfxImageFrame::Init(PRInt32 aX, PRInt32 aY, PRInt32 aWidth, PRInt3","changes":[{"type":"normal","normal":true,"ln1":104,"ln2":102,"content":"   NS_ASSERTION(mImage, \"creation of image failed\");"},{"type":"normal","normal":true,"ln1":105,"ln2":103,"content":"   if (NS_FAILED(rv)) return rv;"},{"type":"normal","normal":true,"ln1":106,"ln2":104,"content":" "},{"type":"del","del":true,"ln":107,"content":"-  gfx_depth depth = aDepth;"},{"type":"normal","normal":true,"ln1":108,"ln2":105,"content":"   nsMaskRequirements maskReq;"},{"type":"normal","normal":true,"ln1":109,"ln2":106,"content":" "},{"type":"normal","normal":true,"ln1":110,"ln2":107,"content":"   switch (aFormat) {"}],"oldStart":104,"oldLines":7,"newStart":102,"newLines":6},{"content":"@@ -135,11 +132,9 @@ NS_IMETHODIMP gfxImageFrame::Init(PRInt32 aX, PRInt32 aY, PRInt32 aWidth, PRInt3","changes":[{"type":"normal","normal":true,"ln1":135,"ln2":132,"content":"     break;"},{"type":"normal","normal":true,"ln1":136,"ln2":133,"content":"   }"},{"type":"normal","normal":true,"ln1":137,"ln2":134,"content":" "},{"type":"del","del":true,"ln":138,"content":"-  rv = mImage->Init(aWidth, aHeight, depth, maskReq);"},{"type":"add","add":true,"ln":135,"content":"+  rv = mImage->Init(aWidth, aHeight, aDepth, maskReq);"},{"type":"normal","normal":true,"ln1":139,"ln2":136,"content":"   if (NS_FAILED(rv)) return rv;"},{"type":"normal","normal":true,"ln1":140,"ln2":137,"content":" "},{"type":"del","del":true,"ln":141,"content":"-  mTopToBottom = mImage->GetIsRowOrderTopToBottom();"},{"type":"del","del":true,"ln":142,"content":"-"},{"type":"normal","normal":true,"ln1":143,"ln2":138,"content":"   mInitialized = PR_TRUE;"},{"type":"normal","normal":true,"ln1":144,"ln2":139,"content":"   return NS_OK;"},{"type":"normal","normal":true,"ln1":145,"ln2":140,"content":" }"}],"oldStart":135,"oldLines":11,"newStart":132,"newLines":9},{"content":"@@ -276,98 +271,6 @@ NS_IMETHODIMP gfxImageFrame::GetImageData(PRUint8 **aData, PRUint32 *length)","changes":[{"type":"normal","normal":true,"ln1":276,"ln2":271,"content":"   return NS_OK;"},{"type":"normal","normal":true,"ln1":277,"ln2":272,"content":" }"},{"type":"normal","normal":true,"ln1":278,"ln2":273,"content":" "},{"type":"del","del":true,"ln":279,"content":"-/* void setImageData ([array, size_is (length), const] in PRUint8 data, in unsigned long length, in long offset); */"},{"type":"del","del":true,"ln":280,"content":"-NS_IMETHODIMP gfxImageFrame::SetImageData(const PRUint8 *aData, PRUint32 aLength, PRInt32 aOffset)"},{"type":"del","del":true,"ln":281,"content":"-{"},{"type":"del","del":true,"ln":282,"content":"-  return SetData(aData, aLength, aOffset, PR_FALSE);"},{"type":"del","del":true,"ln":283,"content":"-}"},{"type":"del","del":true,"ln":284,"content":"-"},{"type":"del","del":true,"ln":285,"content":"-nsresult gfxImageFrame::SetData(const PRUint8 *aData, PRUint32 aLength, "},{"type":"del","del":true,"ln":286,"content":"-                                PRInt32 aOffset, PRBool aSetAlpha)"},{"type":"del","del":true,"ln":287,"content":"-{"},{"type":"del","del":true,"ln":288,"content":"-  if (!mInitialized)"},{"type":"del","del":true,"ln":289,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":290,"content":"-"},{"type":"del","del":true,"ln":291,"content":"-  NS_ASSERTION(mMutable, \"trying to set data on an immutable frame\");"},{"type":"del","del":true,"ln":292,"content":"-  NS_ASSERTION(!(aOffset<0), \"can't have a negative offset\");"},{"type":"del","del":true,"ln":293,"content":"-  if (!mMutable || aOffset < 0)"},{"type":"del","del":true,"ln":294,"content":"-    return NS_ERROR_FAILURE;"},{"type":"del","del":true,"ln":295,"content":"-"},{"type":"del","del":true,"ln":296,"content":"-  if (aSetAlpha && !mImage->GetHasAlphaMask())"},{"type":"del","del":true,"ln":297,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":298,"content":"-"},{"type":"del","del":true,"ln":299,"content":"-  if (aLength == 0)"},{"type":"del","del":true,"ln":300,"content":"-    return NS_OK;"},{"type":"del","del":true,"ln":301,"content":"-"},{"type":"del","del":true,"ln":302,"content":"-  mImage->LockImagePixels(aSetAlpha);"},{"type":"del","del":true,"ln":303,"content":"-  PRUint8 *imgData = aSetAlpha ? mImage->GetAlphaBits() : mImage->GetBits();"},{"type":"del","del":true,"ln":304,"content":"-  const PRUint32 rowStride = aSetAlpha ? mImage->GetAlphaLineStride() : mImage->GetLineStride();"},{"type":"del","del":true,"ln":305,"content":"-  const PRUint32 dataLength = rowStride * mSize.height;"},{"type":"del","del":true,"ln":306,"content":"-  const PRUint32 numRowsToSet = 1 + ((aLength-1) / rowStride);"},{"type":"del","del":true,"ln":307,"content":"-  const PRUint32 firstRowToSet = (aOffset / rowStride);"},{"type":"del","del":true,"ln":308,"content":"-"},{"type":"del","del":true,"ln":309,"content":"-  // Independent from which order the rows are sorted in, "},{"type":"del","del":true,"ln":310,"content":"-  // the number of bytes to set + offset should never exceed the image data space"},{"type":"del","del":true,"ln":311,"content":"-  if ((((PRUint32)aOffset + aLength) > dataLength) || !imgData) {"},{"type":"del","del":true,"ln":312,"content":"-    mImage->UnlockImagePixels(aSetAlpha);"},{"type":"del","del":true,"ln":313,"content":"-    return NS_ERROR_FAILURE;"},{"type":"del","del":true,"ln":314,"content":"-  }"},{"type":"del","del":true,"ln":315,"content":"-"},{"type":"del","del":true,"ln":316,"content":"-  if (mTopToBottom) {"},{"type":"del","del":true,"ln":317,"content":"-    // Easy situation"},{"type":"del","del":true,"ln":318,"content":"-    if (aData)"},{"type":"del","del":true,"ln":319,"content":"-      memcpy(imgData + aOffset, aData, aLength);"},{"type":"del","del":true,"ln":320,"content":"-    else"},{"type":"del","del":true,"ln":321,"content":"-      memset(imgData + aOffset, 0, aLength);"},{"type":"del","del":true,"ln":322,"content":"-  } else {"},{"type":"del","del":true,"ln":323,"content":"-    // Rows are stored in reverse order (BottomToTop) from those supplied (TopToBottom)"},{"type":"del","del":true,"ln":324,"content":"-    // yOffset is the offset into the reversed image data for firstRowToSet"},{"type":"del","del":true,"ln":325,"content":"-    PRUint32 xOffset = aOffset % rowStride;"},{"type":"del","del":true,"ln":326,"content":"-    PRUint32 yOffset = (mSize.height - firstRowToSet - 1) * rowStride;"},{"type":"del","del":true,"ln":327,"content":"-    if (aData) {"},{"type":"del","del":true,"ln":328,"content":"-      // Set the image data in reverse order"},{"type":"del","del":true,"ln":329,"content":"-      for (PRUint32 i=0; i<numRowsToSet; i++) {"},{"type":"del","del":true,"ln":330,"content":"-        PRUint32 lengthOfRowToSet = rowStride - xOffset;"},{"type":"del","del":true,"ln":331,"content":"-        lengthOfRowToSet = PR_MIN(lengthOfRowToSet, aLength);"},{"type":"del","del":true,"ln":332,"content":"-        memcpy(imgData + yOffset + xOffset, aData, lengthOfRowToSet);"},{"type":"del","del":true,"ln":333,"content":"-        aData += lengthOfRowToSet;"},{"type":"del","del":true,"ln":334,"content":"-        aLength -= lengthOfRowToSet;"},{"type":"del","del":true,"ln":335,"content":"-        yOffset -= rowStride;"},{"type":"del","del":true,"ln":336,"content":"-        xOffset = 0;"},{"type":"del","del":true,"ln":337,"content":"-      }"},{"type":"del","del":true,"ln":338,"content":"-    } else {"},{"type":"del","del":true,"ln":339,"content":"-      // Clear the image data in reverse order"},{"type":"del","del":true,"ln":340,"content":"-      if (xOffset) {"},{"type":"del","del":true,"ln":341,"content":"-        // First row, if not starting at first column"},{"type":"del","del":true,"ln":342,"content":"-        PRUint32 lengthOfRowToSet = rowStride - xOffset;"},{"type":"del","del":true,"ln":343,"content":"-        lengthOfRowToSet = PR_MIN(lengthOfRowToSet, aLength);"},{"type":"del","del":true,"ln":344,"content":"-        memset(imgData + yOffset + xOffset, 0, lengthOfRowToSet);"},{"type":"del","del":true,"ln":345,"content":"-        aLength -= lengthOfRowToSet;"},{"type":"del","del":true,"ln":346,"content":"-        yOffset -= rowStride;"},{"type":"del","del":true,"ln":347,"content":"-      }"},{"type":"del","del":true,"ln":348,"content":"-      if (aLength > rowStride) {"},{"type":"del","del":true,"ln":349,"content":"-        // Zero all the whole rows"},{"type":"del","del":true,"ln":350,"content":"-        const PRUint32 wholeRows = rowStride * (PRUint32)(aLength / rowStride);"},{"type":"del","del":true,"ln":351,"content":"-        memset(imgData + yOffset - (wholeRows - rowStride), 0, wholeRows);"},{"type":"del","del":true,"ln":352,"content":"-        aLength -= wholeRows;"},{"type":"del","del":true,"ln":353,"content":"-        yOffset -= wholeRows;"},{"type":"del","del":true,"ln":354,"content":"-      }"},{"type":"del","del":true,"ln":355,"content":"-      if (aLength) {"},{"type":"del","del":true,"ln":356,"content":"-        // Last incomplete row"},{"type":"del","del":true,"ln":357,"content":"-        memset(imgData + yOffset, 0, aLength);"},{"type":"del","del":true,"ln":358,"content":"-      }"},{"type":"del","del":true,"ln":359,"content":"-    }"},{"type":"del","del":true,"ln":360,"content":"-  }"},{"type":"del","del":true,"ln":361,"content":"-  mImage->UnlockImagePixels(aSetAlpha);"},{"type":"del","del":true,"ln":362,"content":"-"},{"type":"del","del":true,"ln":363,"content":"-  if (!aSetAlpha) {"},{"type":"del","del":true,"ln":364,"content":"-    // adjust for aLength < rowStride"},{"type":"del","del":true,"ln":365,"content":"-    nsIntRect r(0, firstRowToSet, mSize.width, numRowsToSet);"},{"type":"del","del":true,"ln":366,"content":"-    mImage->ImageUpdated(nsnull, nsImageUpdateFlags_kBitsChanged, &r);"},{"type":"del","del":true,"ln":367,"content":"-  }"},{"type":"del","del":true,"ln":368,"content":"-  return NS_OK;"},{"type":"del","del":true,"ln":369,"content":"-}"},{"type":"del","del":true,"ln":370,"content":"-"},{"type":"normal","normal":true,"ln1":371,"ln2":274,"content":" /* void lockImageData (); */"},{"type":"normal","normal":true,"ln1":372,"ln2":275,"content":" NS_IMETHODIMP gfxImageFrame::LockImageData()"},{"type":"normal","normal":true,"ln1":373,"ln2":276,"content":" {"}],"oldStart":276,"oldLines":98,"newStart":271,"newLines":6},{"content":"@@ -386,64 +289,6 @@ NS_IMETHODIMP gfxImageFrame::UnlockImageData()","changes":[{"type":"normal","normal":true,"ln1":386,"ln2":289,"content":"   return mImage->UnlockImagePixels(PR_FALSE);"},{"type":"normal","normal":true,"ln1":387,"ln2":290,"content":" }"},{"type":"normal","normal":true,"ln1":388,"ln2":291,"content":" "},{"type":"del","del":true,"ln":389,"content":"-/* readonly attribute unsigned long alphaBytesPerRow; */"},{"type":"del","del":true,"ln":390,"content":"-NS_IMETHODIMP gfxImageFrame::GetAlphaBytesPerRow(PRUint32 *aBytesPerRow)"},{"type":"del","del":true,"ln":391,"content":"-{"},{"type":"del","del":true,"ln":392,"content":"-  if (!mInitialized || !mImage->GetHasAlphaMask())"},{"type":"del","del":true,"ln":393,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":394,"content":"-"},{"type":"del","del":true,"ln":395,"content":"-  *aBytesPerRow = mImage->GetAlphaLineStride();"},{"type":"del","del":true,"ln":396,"content":"-  return NS_OK;"},{"type":"del","del":true,"ln":397,"content":"-}"},{"type":"del","del":true,"ln":398,"content":"-"},{"type":"del","del":true,"ln":399,"content":"-/* readonly attribute unsigned long alphaDataLength; */"},{"type":"del","del":true,"ln":400,"content":"-NS_IMETHODIMP gfxImageFrame::GetAlphaDataLength(PRUint32 *aBitsLength)"},{"type":"del","del":true,"ln":401,"content":"-{"},{"type":"del","del":true,"ln":402,"content":"-  if (!mInitialized || !mImage->GetHasAlphaMask())"},{"type":"del","del":true,"ln":403,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":404,"content":"-"},{"type":"del","del":true,"ln":405,"content":"-  *aBitsLength = mImage->GetAlphaLineStride() * mSize.height;"},{"type":"del","del":true,"ln":406,"content":"-  return NS_OK;"},{"type":"del","del":true,"ln":407,"content":"-}"},{"type":"del","del":true,"ln":408,"content":"-"},{"type":"del","del":true,"ln":409,"content":"-/* void getAlphaData([array, size_is(length)] out PRUint8 bits, out unsigned long length); */"},{"type":"del","del":true,"ln":410,"content":"-NS_IMETHODIMP gfxImageFrame::GetAlphaData(PRUint8 **aData, PRUint32 *length)"},{"type":"del","del":true,"ln":411,"content":"-{"},{"type":"del","del":true,"ln":412,"content":"-  if (!mInitialized || !mImage->GetHasAlphaMask())"},{"type":"del","del":true,"ln":413,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":414,"content":"-"},{"type":"del","del":true,"ln":415,"content":"-  NS_ASSERTION(mMutable, \"trying to get data on an immutable frame\");"},{"type":"del","del":true,"ln":416,"content":"-"},{"type":"del","del":true,"ln":417,"content":"-  *aData = mImage->GetAlphaBits();"},{"type":"del","del":true,"ln":418,"content":"-  *length = mImage->GetAlphaLineStride() * mSize.height;"},{"type":"del","del":true,"ln":419,"content":"-"},{"type":"del","del":true,"ln":420,"content":"-  return NS_OK;"},{"type":"del","del":true,"ln":421,"content":"-}"},{"type":"del","del":true,"ln":422,"content":"-"},{"type":"del","del":true,"ln":423,"content":"-/* void setAlphaData ([array, size_is (length), const] in PRUint8 data, in unsigned long length, in long offset); */"},{"type":"del","del":true,"ln":424,"content":"-NS_IMETHODIMP gfxImageFrame::SetAlphaData(const PRUint8 *aData, PRUint32 aLength, PRInt32 aOffset)"},{"type":"del","del":true,"ln":425,"content":"-{"},{"type":"del","del":true,"ln":426,"content":"-  return SetData(aData, aLength, aOffset, PR_TRUE);"},{"type":"del","del":true,"ln":427,"content":"-}"},{"type":"del","del":true,"ln":428,"content":"-"},{"type":"del","del":true,"ln":429,"content":"-/* void lockAlphaData (); */"},{"type":"del","del":true,"ln":430,"content":"-NS_IMETHODIMP gfxImageFrame::LockAlphaData()"},{"type":"del","del":true,"ln":431,"content":"-{"},{"type":"del","del":true,"ln":432,"content":"-  if (!mInitialized || !mImage->GetHasAlphaMask())"},{"type":"del","del":true,"ln":433,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":434,"content":"-"},{"type":"del","del":true,"ln":435,"content":"-  return mImage->LockImagePixels(PR_TRUE);"},{"type":"del","del":true,"ln":436,"content":"-}"},{"type":"del","del":true,"ln":437,"content":"-"},{"type":"del","del":true,"ln":438,"content":"-/* void unlockAlphaData (); */"},{"type":"del","del":true,"ln":439,"content":"-NS_IMETHODIMP gfxImageFrame::UnlockAlphaData()"},{"type":"del","del":true,"ln":440,"content":"-{"},{"type":"del","del":true,"ln":441,"content":"-  if (!mInitialized || !mImage->GetHasAlphaMask())"},{"type":"del","del":true,"ln":442,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":443,"content":"-"},{"type":"del","del":true,"ln":444,"content":"-  return mImage->UnlockImagePixels(PR_TRUE);"},{"type":"del","del":true,"ln":445,"content":"-}"},{"type":"del","del":true,"ln":446,"content":"-"},{"type":"normal","normal":true,"ln1":447,"ln2":292,"content":" /* attribute long timeout; */"},{"type":"normal","normal":true,"ln1":448,"ln2":293,"content":" NS_IMETHODIMP gfxImageFrame::GetTimeout(PRInt32 *aTimeout)"},{"type":"normal","normal":true,"ln1":449,"ln2":294,"content":" {"}],"oldStart":386,"oldLines":64,"newStart":289,"newLines":6},{"content":"@@ -498,25 +343,6 @@ NS_IMETHODIMP gfxImageFrame::SetFrameDisposalMethod(PRInt32 aFrameDisposalMethod","changes":[{"type":"normal","normal":true,"ln1":498,"ln2":343,"content":"   return NS_OK;"},{"type":"normal","normal":true,"ln1":499,"ln2":344,"content":" }"},{"type":"normal","normal":true,"ln1":500,"ln2":345,"content":" "},{"type":"del","del":true,"ln":501,"content":"-/* attribute gfx_color backgroundColor; */"},{"type":"del","del":true,"ln":502,"content":"-NS_IMETHODIMP gfxImageFrame::GetBackgroundColor(gfx_color *aBackgroundColor)"},{"type":"del","del":true,"ln":503,"content":"-{"},{"type":"del","del":true,"ln":504,"content":"-  if (!mInitialized || !mHasBackgroundColor)"},{"type":"del","del":true,"ln":505,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":506,"content":"-"},{"type":"del","del":true,"ln":507,"content":"-  *aBackgroundColor = mBackgroundColor;"},{"type":"del","del":true,"ln":508,"content":"-  return NS_OK;"},{"type":"del","del":true,"ln":509,"content":"-}"},{"type":"del","del":true,"ln":510,"content":"-NS_IMETHODIMP gfxImageFrame::SetBackgroundColor(gfx_color aBackgroundColor)"},{"type":"del","del":true,"ln":511,"content":"-{"},{"type":"del","del":true,"ln":512,"content":"-  if (!mInitialized)"},{"type":"del","del":true,"ln":513,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":514,"content":"-"},{"type":"del","del":true,"ln":515,"content":"-  mBackgroundColor = aBackgroundColor;"},{"type":"del","del":true,"ln":516,"content":"-  mHasBackgroundColor = PR_TRUE;"},{"type":"del","del":true,"ln":517,"content":"-  return NS_OK;"},{"type":"del","del":true,"ln":518,"content":"-}"},{"type":"del","del":true,"ln":519,"content":"-"},{"type":"normal","normal":true,"ln1":520,"ln2":346,"content":" NS_IMETHODIMP gfxImageFrame::GetInterface(const nsIID & aIID, void * *result)"},{"type":"normal","normal":true,"ln1":521,"ln2":347,"content":" {"},{"type":"normal","normal":true,"ln1":522,"ln2":348,"content":"   if (!mInitialized)"}],"oldStart":498,"oldLines":25,"newStart":343,"newLines":6}],"deletions":175,"additions":1,"from":"gfx/src/shared/gfxImageFrame.cpp","to":"gfx/src/shared/gfxImageFrame.cpp","index":["6194105..060667c","100644"]},{"chunks":[{"content":"@@ -71,21 +71,13 @@ protected:","changes":[{"type":"normal","normal":true,"ln1":71,"ln2":71,"content":"   nsIntSize mSize;"},{"type":"normal","normal":true,"ln1":72,"ln2":72,"content":" "},{"type":"normal","normal":true,"ln1":73,"ln2":73,"content":" private:"},{"type":"del","del":true,"ln":74,"content":"-  nsresult  SetData(const PRUint8 *aData, PRUint32 aLength, "},{"type":"del","del":true,"ln":75,"content":"-                    PRInt32 aOffset, PRBool aSetAlpha);"},{"type":"del","del":true,"ln":76,"content":"-"},{"type":"normal","normal":true,"ln1":77,"ln2":74,"content":"   nsCOMPtr<nsIImage> mImage;"},{"type":"normal","normal":true,"ln1":78,"ln2":75,"content":" "},{"type":"normal","normal":true,"ln1":79,"ln2":76,"content":"   PRPackedBool mInitialized;"},{"type":"normal","normal":true,"ln1":80,"ln2":77,"content":"   PRPackedBool mMutable;"},{"type":"del","del":true,"ln":81,"content":"-  PRPackedBool mHasBackgroundColor;"},{"type":"del","del":true,"ln":82,"content":"-  PRPackedBool mTopToBottom;"},{"type":"normal","normal":true,"ln1":83,"ln2":78,"content":"   gfx_format   mFormat;"},{"type":"normal","normal":true,"ln1":84,"ln2":79,"content":" "},{"type":"del","del":true,"ln":85,"content":"-  PRInt32 mTimeout; // -1 means display forever"},{"type":"del","del":true,"ln":86,"content":"-  nsIntPoint mOffset;"},{"type":"del","del":true,"ln":87,"content":"-"},{"type":"del","del":true,"ln":88,"content":"-  gfx_color mBackgroundColor;"},{"type":"del","del":true,"ln":89,"content":"-"},{"type":"del","del":true,"ln":90,"content":"-  PRInt32   mDisposalMethod;"},{"type":"add","add":true,"ln":80,"content":"+  PRInt32      mTimeout; // -1 means display forever"},{"type":"add","add":true,"ln":81,"content":"+  nsIntPoint   mOffset;"},{"type":"add","add":true,"ln":82,"content":"+  PRInt32      mDisposalMethod;"},{"type":"normal","normal":true,"ln1":91,"ln2":83,"content":" };"}],"oldStart":71,"oldLines":21,"newStart":71,"newLines":13}],"deletions":11,"additions":3,"from":"gfx/src/shared/gfxImageFrame.h","to":"gfx/src/shared/gfxImageFrame.h","index":["59aa4cc..d9f2514","100644"]}]}