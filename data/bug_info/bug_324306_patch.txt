Index: camino/PreferencePanes/Security/SecurityPane.h
===================================================================
RCS file: /cvsroot/mozilla/camino/PreferencePanes/Security/SecurityPane.h,v
retrieving revision 1.4
diff -u -8 -r1.4 SecurityPane.h
--- camino/PreferencePanes/Security/SecurityPane.h	8 Sep 2005 00:26:24 -0000	1.4
+++ camino/PreferencePanes/Security/SecurityPane.h	30 Jun 2006 12:15:00 -0000
@@ -42,17 +42,20 @@
 
 class nsIPref;
 
 @interface OrgMozillaChimeraPreferenceSecurity : PreferencePaneBase
 {
   IBOutlet NSButton* mLeaveEncrypted;
   IBOutlet NSButton* mLoadLowGrade;
   IBOutlet NSButton* mViewMixed;  
+
+  IBOutlet NSMatrix* mCertificateBehavior;
 }
 
 -(IBAction) clickEnableLeaveEncrypted:(id)sender;
 -(IBAction) clickEnableLoadLowGrade:(id)sender;
 -(IBAction) clickEnableViewMixed:(id)sender;
 
+-(IBAction)clickCertificateSelectionBehavior:(id)sender;
 -(IBAction)showCertificates:(id)sender;
 
 @end
Index: camino/PreferencePanes/Security/SecurityPane.mm
===================================================================
RCS file: /cvsroot/mozilla/camino/PreferencePanes/Security/SecurityPane.mm,v
retrieving revision 1.8
diff -u -8 -r1.8 SecurityPane.mm
--- camino/PreferencePanes/Security/SecurityPane.mm	8 Sep 2005 00:26:24 -0000	1.8
+++ camino/PreferencePanes/Security/SecurityPane.mm	30 Jun 2006 12:15:00 -0000
@@ -36,42 +36,49 @@
  * ***** END LICENSE BLOCK ***** */
  
 #import "SecurityPane.h"
 
 #include "nsServiceManagerUtils.h"
 #include "nsIPref.h"
 
 // prefs for showing security dialogs
-#define WEAK_SITE_PREF       "security.warn_entering_weak"
 #define LEAVE_SITE_PREF      "security.warn_leaving_secure"
 #define MIXEDCONTENT_PREF    "security.warn_viewing_mixed"
 
+const unsigned int kSelectAutomaticallyMatrixRowValue = 0;
+const unsigned int kAskEveryTimeMatrixRowValue        = 1;
 
 @implementation OrgMozillaChimeraPreferenceSecurity
 
 - (void)dealloc
 {
   [super dealloc];
 }
 
 - (void)updateButtons
 {
   // Set initial value on Security checkboxes
   PRBool leaveEncrypted = PR_TRUE;
   mPrefService->GetBoolPref(LEAVE_SITE_PREF, &leaveEncrypted);
   [mLeaveEncrypted setState:(leaveEncrypted ? NSOnState : NSOffState)];
-  
-  PRBool loadLowGrade = PR_TRUE;
-  mPrefService->GetBoolPref(WEAK_SITE_PREF, &loadLowGrade);
-  [mLoadLowGrade setState:(loadLowGrade ? NSOnState : NSOffState)];
 
   PRBool viewMixed = PR_TRUE;
   mPrefService->GetBoolPref(MIXEDCONTENT_PREF, &viewMixed);
   [mViewMixed setState:(viewMixed ? NSOnState : NSOffState)];
+
+  BOOL gotPref;
+  NSString* certificateBehavior = [self getStringPref:"security.default_personal_cert" withSuccess:&gotPref];
+  if (gotPref) {
+    if ([certificateBehavior isEqual:@"Select Automatically"])
+      [mCertificateBehavior selectCellAtRow:kSelectAutomaticallyMatrixRowValue column:0];
+    else if ([certificateBehavior isEqual:@"Ask Every Time"])
+      [mCertificateBehavior selectCellAtRow:kAskEveryTimeMatrixRowValue column:0];
+  }
+
 }
 
 
 - (void)mainViewDidLoad
 {
   if ( !mPrefService )
     return;
 
@@ -91,24 +98,29 @@
 // Set prefs for warnings/alerts wrt secure sites
 //
 
 -(IBAction) clickEnableViewMixed:(id)sender
 {
   [self setPref:MIXEDCONTENT_PREF toBoolean:[sender state] == NSOnState];
 }
 
--(IBAction) clickEnableLoadLowGrade:(id)sender
+-(IBAction) clickEnableLeaveEncrypted:(id)sender
 {
-  [self setPref:WEAK_SITE_PREF toBoolean:[sender state] == NSOnState];
+  [self setPref:LEAVE_SITE_PREF toBoolean:[sender state] == NSOnState];
 }
 
--(IBAction) clickEnableLeaveEncrypted:(id)sender
+-(IBAction)clickCertificateSelectionBehavior:(id)sender
 {
-  [self setPref:LEAVE_SITE_PREF toBoolean:[sender state] == NSOnState];
+  unsigned int row = [mCertificateBehavior selectedRow];
+
+  if (row == kSelectAutomaticallyMatrixRowValue)
+    [self setPref:"security.default_personal_cert" toString:@"Select Automatically"];
+  else // row == kAskEveryTimeMatrixRowValue
+    [self setPref:"security.default_personal_cert" toString:@"Ask Every Time"];
 }
 
 -(IBAction)showCertificates:(id)sender
 {
   // we'll just fire off a notification and let the application show the UI
   NSDictionary* userInfoDict = [NSDictionary dictionaryWithObject:[mLeaveEncrypted window]  // any view's window
                                                            forKey:@"parent_window"];
   [[NSNotificationCenter defaultCenter] postNotificationName:@"ShowCertificatesNotification"
