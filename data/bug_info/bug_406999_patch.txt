Index: mozilla/security/manager/ssl/src/nsIdentityChecking.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsIdentityChecking.cpp,v
retrieving revision 1.4
diff -u -8 -p -r1.4 nsIdentityChecking.cpp
--- mozilla/security/manager/ssl/src/nsIdentityChecking.cpp	21 Nov 2007 22:28:13 -0000	1.4
+++ mozilla/security/manager/ssl/src/nsIdentityChecking.cpp	5 Dec 2007 18:09:36 -0000
@@ -51,16 +51,20 @@
 #include "nsNSSCleaner.h"
 
 #ifdef DEBUG
 #ifndef PSM_ENABLE_TEST_EV_ROOTS
 #define PSM_ENABLE_TEST_EV_ROOTS
 #endif
 #endif
 
+#ifdef PR_LOGGING
+extern PRLogModuleInfo* gPIPNSSLog;
+#endif
+
 NSSCleanupAutoPtrClass(CERTCertificate, CERT_DestroyCertificate)
 NSSCleanupAutoPtrClass(CERTCertList, CERT_DestroyCertList)
 NSSCleanupAutoPtrClass_WithParam(SECItem, SECITEM_FreeItem, TrueParam, PR_TRUE)
 
 #define CONST_OID static const unsigned char
 #define OI(x) { siDEROID, (unsigned char *)x, sizeof x }
 
 struct nsMyTrustedEVInfo
@@ -502,26 +506,36 @@ NS_IMETHODIMP
 nsNSSSocketInfo::GetIsExtendedValidation(PRBool* aIsEV)
 {
   NS_ENSURE_ARG(aIsEV);
   *aIsEV = PR_FALSE;
 
   if (!mCert)
     return NS_OK;
 
-  return mCert->GetIsExtendedValidation(aIsEV);
+  nsresult rv;
+  nsCOMPtr<nsIIdentityInfo> idinfo = do_QueryInterface(mCert, &rv);
+  if (NS_FAILED(rv))
+    return rv;
+
+  return idinfo->GetIsExtendedValidation(aIsEV);
 }
 
 NS_IMETHODIMP
 nsNSSSocketInfo::GetValidEVPolicyOid(nsACString &outDottedOid)
 {
   if (!mCert)
     return NS_OK;
 
-  return mCert->GetValidEVPolicyOid(outDottedOid);
+  nsresult rv;
+  nsCOMPtr<nsIIdentityInfo> idinfo = do_QueryInterface(mCert, &rv);
+  if (NS_FAILED(rv))
+    return rv;
+
+  return idinfo->GetValidEVPolicyOid(outDottedOid);
 }
 
 nsresult
 nsNSSCertificate::hasValidEVOidTag(SECOidTag &resultOidTag, PRBool &validEV)
 {
   nsNSSShutDownPreventionLock locker;
   if (isAlreadyShutDown())
     return NS_ERROR_NOT_AVAILABLE;
@@ -554,55 +568,81 @@ nsNSSCertificate::hasValidEVOidTag(SECOi
                             | CERT_REV_FLAG_CRL
                             ;
   cvin[2].type = cert_pi_end;
 
   CERTValOutParam cvout[2];
   cvout[0].type = cert_po_trustAnchor;
   cvout[1].type = cert_po_end;
 
+  PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("calling CERT_PKIXVerifyCert nss cert %p\n", mCert));
   rv = CERT_PKIXVerifyCert(mCert, certificateUsageSSLServer,
                            cvin, cvout, nsnull);
   if (rv != SECSuccess)
     return NS_OK;
 
   CERTCertificate *issuerCert = cvout[0].value.pointer.cert;
   CERTCertificateCleaner issuerCleaner(issuerCert);
 
   validEV = isApprovedForEV(oid_tag, issuerCert);
   if (validEV)
     resultOidTag = oid_tag;
  
   return NS_OK;
 }
 
+nsresult
+nsNSSCertificate::getValidEVOidTag(SECOidTag &resultOidTag, PRBool &validEV)
+{
+  if (mCachedEVStatus != ev_status_unknown) {
+    validEV = (mCachedEVStatus == ev_status_valid);
+    if (validEV)
+      resultOidTag = mCachedEVOidTag;
+    return NS_OK;
+  }
+
+  nsresult rv = hasValidEVOidTag(resultOidTag, validEV);
+  if (NS_SUCCEEDED(rv)) {
+    if (validEV) {
+      mCachedEVOidTag = resultOidTag;
+    }
+    mCachedEVStatus = validEV ? ev_status_valid : ev_status_invalid;
+  }
+  return rv;
+}
+
 NS_IMETHODIMP
 nsNSSCertificate::GetIsExtendedValidation(PRBool* aIsEV)
 {
   nsNSSShutDownPreventionLock locker;
   if (isAlreadyShutDown())
     return NS_ERROR_NOT_AVAILABLE;
 
   NS_ENSURE_ARG(aIsEV);
   *aIsEV = PR_FALSE;
 
+  if (mCachedEVStatus != ev_status_unknown) {
+    *aIsEV = (mCachedEVStatus == ev_status_valid);
+    return NS_OK;
+  }
+
   SECOidTag oid_tag;
-  return hasValidEVOidTag(oid_tag, *aIsEV);
+  return getValidEVOidTag(oid_tag, *aIsEV);
 }
 
 NS_IMETHODIMP
 nsNSSCertificate::GetValidEVPolicyOid(nsACString &outDottedOid)
 {
   nsNSSShutDownPreventionLock locker;
   if (isAlreadyShutDown())
     return NS_ERROR_NOT_AVAILABLE;
 
   SECOidTag oid_tag;
   PRBool valid;
-  nsresult rv = hasValidEVOidTag(oid_tag, valid);
+  nsresult rv = getValidEVOidTag(oid_tag, valid);
   if (NS_FAILED(rv))
     return rv;
 
   if (valid) {
     SECOidData *oid_data = SECOID_FindOIDByTag(oid_tag);
     if (!oid_data)
       return NS_ERROR_FAILURE;
 
Index: mozilla/security/manager/ssl/src/nsNSSCertificate.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsNSSCertificate.cpp,v
retrieving revision 1.135
diff -u -8 -p -r1.135 nsNSSCertificate.cpp
--- mozilla/security/manager/ssl/src/nsNSSCertificate.cpp	28 Nov 2007 22:22:13 -0000	1.135
+++ mozilla/security/manager/ssl/src/nsNSSCertificate.cpp	5 Dec 2007 18:09:37 -0000
@@ -152,30 +152,32 @@ nsNSSCertificate::InitFromDER(char *cert
 
   mCert = aCert;
   return PR_TRUE;
 }
 
 nsNSSCertificate::nsNSSCertificate(CERTCertificate *cert) : 
                                            mCert(nsnull),
                                            mPermDelete(PR_FALSE),
-                                           mCertType(CERT_TYPE_NOT_YET_INITIALIZED)
+                                           mCertType(CERT_TYPE_NOT_YET_INITIALIZED),
+                                           mCachedEVStatus(ev_status_unknown)
 {
   nsNSSShutDownPreventionLock locker;
   if (isAlreadyShutDown())
     return;
 
   if (cert) 
     mCert = CERT_DupCertificate(cert);
 }
 
 nsNSSCertificate::nsNSSCertificate() : 
   mCert(nsnull),
   mPermDelete(PR_FALSE),
-  mCertType(CERT_TYPE_NOT_YET_INITIALIZED)
+  mCertType(CERT_TYPE_NOT_YET_INITIALIZED),
+  mCachedEVStatus(ev_status_unknown)
 {
 }
 
 nsNSSCertificate::~nsNSSCertificate()
 {
   nsNSSShutDownPreventionLock locker;
   if (isAlreadyShutDown())
     return;
Index: mozilla/security/manager/ssl/src/nsNSSCertificate.h
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsNSSCertificate.h,v
retrieving revision 1.36
diff -u -8 -p -r1.36 nsNSSCertificate.h
--- mozilla/security/manager/ssl/src/nsNSSCertificate.h	23 Oct 2007 18:30:17 -0000	1.36
+++ mozilla/security/manager/ssl/src/nsNSSCertificate.h	5 Dec 2007 18:09:37 -0000
@@ -93,17 +93,23 @@ private:
   nsCOMPtr<nsIASN1Object> mASN1Structure;
   nsresult CreateASN1Struct();
   nsresult CreateTBSCertificateASN1Struct(nsIASN1Sequence **retSequence,
                                           nsINSSComponent *nssComponent);
   nsresult GetSortableDate(PRTime aTime, nsAString &_aSortableDate);
   virtual void virtualDestroyNSSReference();
   void destructorSafeDestroyNSSReference();
   PRBool InitFromDER(char* certDER, int derLen);  // return false on failure
+
+  enum { 
+    ev_status_unknown = -1, ev_status_invalid = 0, ev_status_valid = 1
+  } mCachedEVStatus;
+  SECOidTag mCachedEVOidTag;
   nsresult hasValidEVOidTag(SECOidTag &resultOidTag, PRBool &validEV);
+  nsresult getValidEVOidTag(SECOidTag &resultOidTag, PRBool &validEV);
 };
 
 class nsNSSCertList: public nsIX509CertList
 {
 public:
   NS_DECL_ISUPPORTS
   NS_DECL_NSIX509CERTLIST
 
