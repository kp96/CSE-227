Index: browser/base/content/browser.js
===================================================================
RCS file: /cvsroot/mozilla/browser/base/content/browser.js,v
retrieving revision 1.477
diff -u -8 -Ffunction -r1.477 browser.js
--- browser/base/content/browser.js	12 Aug 2005 05:55:25 -0000	1.477
+++ browser/base/content/browser.js	12 Aug 2005 06:37:02 -0000
@@ -19,27 +19,28 @@
 # Portions created by the Initial Developer are Copyright (C) 1998
 # the Initial Developer. All Rights Reserved.
 #
 # Contributor(s):
 #   Blake Ross <blake@cs.stanford.edu>
 #   David Hyatt <hyatt@mozilla.org>
 #   Peter Annema <disttsc@bart.nl>
 #   Dean Tessman <dean_tessman@hotmail.com>
-#   Kevin Puetz (puetzk@iastate.edu)
+#   Kevin Puetz <puetzk@iastate.edu>
 #   Ben Goodger <ben@netscape.com>
 #   Pierre Chanial <chanial@noos.fr>
 #   Jason Eager <jce2@po.cwru.edu>
 #   Joe Hewitt <hewitt@netscape.com>
 #   Alec Flett <alecf@netscape.com>
 #   Asaf Romano <mozilla.mano@sent.com>
 #   Jason Barnabe <jason_barnabe@fastmail.fm>
 #   Peter Parente <parente@cs.unc.edu>
 #   Giorgio Maone <g.maone@informaction.com>
 #   Tom Germeau <tom.germeau@epigoon.com>
+#   Jesse Ruderman <jruderman@gmail.com>
 #
 # Alternatively, the contents of this file may be used under the terms of
 # either the GNU General Public License Version 2 or later (the "GPL"), or
 # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 # in which case the provisions of the GPL or the LGPL are applicable instead
 # of those above. If you wish to allow use of your version of this file only
 # under the terms of either the GPL or the LGPL, and not to allow others to
 # use your version of this file under the terms of the MPL, indicate your
@@ -2587,19 +2588,19 @@   onDragExit: function (aEvent, aDragSes
     {
       var statusTextFld = document.getElementById("statusbar-display");
       statusTextFld.label = "";
       aEvent.target.removeAttribute("dragover");
     },
   onDrop: function (aEvent, aXferData, aDragSession)
     {
       var xferData = aXferData.data.split("\n");
-      var uri = xferData[0] ? xferData[0] : xferData[1];
-      if (uri)
-        openNewTabWith(uri, aXferData, aEvent, false);
+      var url = xferData[0] ? xferData[0] : xferData[1];
+      if (url)
+        openNewTabWith(url, null, null, aEvent);
     },
   getSupportedFlavours: function ()
     {
       var flavourSet = new FlavourSet();
       flavourSet.appendFlavour("text/unicode");
       flavourSet.appendFlavour("text/x-moz-url");
       flavourSet.appendFlavour("application/x-moz-file", "nsIFile");
       return flavourSet;
@@ -2618,19 +2619,19 @@   onDragExit: function (aEvent, aDragSes
     {
       var statusTextFld = document.getElementById("statusbar-display");
       statusTextFld.label = "";
       aEvent.target.removeAttribute("dragover");
     },
   onDrop: function (aEvent, aXferData, aDragSession)
     {
       var xferData = aXferData.data.split("\n");
-      var uri = xferData[0] ? xferData[0] : xferData[1];
-      if (uri)
-        openNewWindowWith(uri, aXferData, null, false);
+      var url = xferData[0] ? xferData[0] : xferData[1];
+      if (url)
+        openNewWindowWith(url, null, null);
     },
   getSupportedFlavours: function ()
     {
       var flavourSet = new FlavourSet();
       flavourSet.appendFlavour("text/unicode");
       flavourSet.appendFlavour("text/x-moz-url");
       flavourSet.appendFlavour("application/x-moz-file", "nsIFile");
       return flavourSet;
@@ -3968,16 +3969,19 @@ function nsContextMenu( xulMenu ) {
     this.onImage           = false;
     this.onLoadedImage     = false;
     this.onLink            = false;
     this.onMailtoLink      = false;
     this.onSaveableLink    = false;
     this.onMetaDataItem    = false;
     this.onMathML          = false;
     this.link              = false;
+    this.linkURL           = "";
+    this.linkURI           = null;
+    this.linkProtocol      = null;
     this.inFrame           = false;
     this.hasBGImage        = false;
     this.isTextSelected    = false;
     this.isContentSelected = false;
     this.inDirList         = false;
     this.shouldDisplay     = true;
 
     // Initialize new menu.
@@ -4035,26 +4039,23 @@     initNavigationItems : function () {
 
         // XXX: Stop is determined in navigator.js; the canStop broadcaster is broken
         //this.setItemAttrFromNode( "context-stop", "disabled", "canStop" );
     },
     initSaveItems : function () {
         this.showItem( "context-savepage", !( this.inDirList || this.isContentSelected || this.onTextInput || this.onLink || this.onImage ));
         this.showItem( "context-sendpage", !( this.inDirList || this.isContentSelected || this.onTextInput || this.onLink || this.onImage ));
 
-        // Save link depends on whether we're in a link.
+        // Save+Send link depends on whether we're in a link.
         this.showItem( "context-savelink", this.onSaveableLink );
+        this.showItem( "context-sendlink", this.onSaveableLink );
 
-        // Save image depends on whether there is one.
+        // Save+Send image depends on whether we're on an image.
         this.showItem( "context-saveimage", this.onLoadedImage );
-
         this.showItem( "context-sendimage", this.onImage );
-
-        // Send link depends on whether we're in a link.
-        this.showItem( "context-sendlink", this.onSaveableLink );
     },
     initViewItems : function () {
         // View source is always OK, unless in directory listing.
         this.showItem( "context-viewpartialsource-selection", this.isContentSelected );
         this.showItem( "context-viewpartialsource-mathml", this.onMathML && !this.isContentSelected );
         this.showItem( "context-viewsource", !( this.inDirList || this.onImage || this.isContentSelected || this.onLink || this.onTextInput ) );
         this.showItem( "context-viewinfo", !( this.inDirList || this.onImage || this.isContentSelected || this.onLink || this.onTextInput ) );
 
@@ -4065,34 +4066,18 @@     initViewItems : function () {
 #ifdef HAVE_SHELL_SERVICE
         // Only enable Set as Desktop Background if we can get the shell service.
         var shell = getShellService();
         if (shell)
           haveSetDesktopBackground = true;
 #endif
         this.showItem( "context-setDesktopBackground", haveSetDesktopBackground && this.onLoadedImage );
 
-        if ( haveSetDesktopBackground && this.onLoadedImage ) {
-            // Disable the Set as Desktop Background menu item if we're still trying
-            // to load the image or the load failed
-            const nsIImageLoadingContent = Components.interfaces.nsIImageLoadingContent;
-            var disableDesktopBackground = false;
-            if (("complete" in this.target) && !this.target.complete)
-                disableSetWallpaper = true;
-            else if (makeURI(this.target.src).scheme == "javascript")
-                disableDesktopBackground = true;
-            else if (this.target instanceof nsIImageLoadingContent) {
-                var request = this.target.QueryInterface(nsIImageLoadingContent)
-                                  .getRequest(nsIImageLoadingContent.CURRENT_REQUEST);
-                if (!request)
-                    disableDesktopBackground = true;
-            }
-               
-            this.setItemAttr( "context-setDesktopBackground", "disabled", disableDesktopBackground);
-        }
+        if ( haveSetDesktopBackground && this.onLoadedImage )
+            this.setItemAttr( "context-setDesktopBackground", "disabled", this.disableSetDesktopBackground());
 
         // View Image depends on whether an image was clicked on.
         this.showItem( "context-viewimage", this.onImage  && !this.onStandaloneImage );
 
         // View background image depends on whether there is one.
         this.showItem( "context-viewbgimage", !( this.inDirList || this.onImage || this.isContentSelected || this.onLink || this.onTextInput ) );
         this.showItem( "context-sep-viewbgimage", !( this.inDirList || this.onImage || this.isContentSelected || this.onLink || this.onTextInput ) );
         this.setItemAttr( "context-viewbgimage", "disabled", this.hasBGImage ? null : "true");
@@ -4184,46 +4169,56 @@     initMetadataItems : function () {
     },
     // Set various context menu attributes based on the state of the world.
     setTarget : function ( node ) {
         const xulNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
         if ( node.namespaceURI == xulNS ) {
           this.shouldDisplay = false;
           return;
         }
+
         // Initialize contextual info.
-        this.onImage    = false;
-        this.onLoadedImage = false;
+        this.onImage           = false;
+        this.onLoadedImage     = false;
         this.onStandaloneImage = false;
-        this.onMetaDataItem = false;
-        this.onTextInput = false;
-        this.onKeywordField = false;
-        this.imageURL   = "";
-        this.onLink     = false;
-        this.onMathML   = false;
-        this.inFrame    = false;
-        this.hasBGImage = false;
-        this.bgImageURL = "";
+        this.onMetaDataItem    = false;
+        this.onTextInput       = false;
+        this.onKeywordField    = false;
+        this.imageURL          = "";
+        this.onLink            = false;
+        this.linkURL           = "";
+        this.linkURI           = null;
+        this.linkProtocol      = "";
+        this.onMathML          = false;
+        this.inFrame           = false;
+        this.hasBGImage        = false;
+        this.bgImageURL        = "";
 
         // Remember the node that was clicked.
         this.target = node;
+        
+        // Remember the URL of the document containing the node
+        // for referrer header and for security checks.
+        this.docURL = node.ownerDocument.location.href;
 
-        // See if the user clicked on an image.
+        // First, do checks for nodes that never have children.
         if ( this.target.nodeType == Node.ELEMENT_NODE ) {
+            // See if the user clicked on an image.
             if ( this.target instanceof Components.interfaces.nsIImageLoadingContent && this.target.currentURI  ) {
                 this.onImage = true;
+                this.onMetaDataItem = true;
+                        
                 var request = this.target.getRequest( Components.interfaces.nsIImageLoadingContent.CURRENT_REQUEST );
                 if (request && (request.imageStatus & request.STATUS_SIZE_AVAILABLE))
                     this.onLoadedImage = true;
                 this.imageURL = this.target.currentURI.spec;
 
                 if ( this.target.ownerDocument instanceof ImageDocument)
                    this.onStandaloneImage = true;
             } else if ( this.target instanceof HTMLInputElement ) {
-               type = this.target.getAttribute("type");
                this.onTextInput = this.isTargetATextBox(this.target);
                this.onKeywordField = this.isTargetAKeywordField(this.target);
             } else if ( this.target instanceof HTMLTextAreaElement ) {
                  this.onTextInput = true;
             } else if ( this.target instanceof HTMLHtmlElement ) {
                // pages with multiple <body>s are lame. we'll teach them a lesson.
                var bodyElt = this.target.ownerDocument.getElementsByTagName("body")[0];
                if ( bodyElt ) {
@@ -4266,62 +4261,49 @@                                       ge
                         }
                     } else {
                         root = root.parentNode;
                     }
                 }
             }
         }
 
-        // We have meta data on images.
-        this.onMetaDataItem = this.onImage;
-
-        // See if the user clicked on MathML
-        const NS_MathML = "http://www.w3.org/1998/Math/MathML";
-        if ((this.target.nodeType == Node.TEXT_NODE &&
-             this.target.parentNode.namespaceURI == NS_MathML)
-             || (this.target.namespaceURI == NS_MathML))
-          this.onMathML = true;
-
-        // See if the user clicked in a frame.
-        if ( this.target.ownerDocument != window.content.document ) {
-            this.inFrame = true;
-        }
-
-        // Bubble out, looking for items of interest
+        // Second, bubble out, looking for items of interest that can have childen.
+        // Always pick the innermost link, background image, etc.
+        
         const XMLNS = "http://www.w3.org/XML/1998/namespace";
         var elem = this.target;
         while ( elem ) {
             if ( elem.nodeType == Node.ELEMENT_NODE ) {
+            
                 // Link?
                 if ( !this.onLink &&
-                    ( (elem instanceof HTMLAnchorElement && elem.href) ||
-                      elem instanceof HTMLAreaElement ||
-                      elem instanceof HTMLLinkElement ||
-                      elem.getAttributeNS( "http://www.w3.org/1999/xlink", "type") == "simple" ) ) {
-                    // Clicked on a link.
+                     ( (elem instanceof HTMLAnchorElement && elem.href) ||
+                        elem instanceof HTMLAreaElement ||
+                        elem instanceof HTMLLinkElement ||
+                        elem.getAttributeNS( "http://www.w3.org/1999/xlink", "type") == "simple" ) ) {
+                    
+                    // Target is a link or a descendant of a link.
                     this.onLink = true;
                     this.onMetaDataItem = true;
+                    
                     // Remember corresponding element.
                     this.link = elem;
-                    this.onMailtoLink = this.isLinkType( "mailto:", this.link );
-                    // Remember if it is saveable.
+                    this.linkURL = this.getLinkURL();
+                    this.linkURI = this.getLinkURI();
+                    this.linkProtocol = this.getLinkProtocol();
+                    this.onMailtoLink = (this.linkProtocol == "mailto");
                     this.onSaveableLink = this.isLinkSaveable( this.link );
                 }
 
-                // Text input?
-                if ( !this.onTextInput ) {
-                    // Clicked on a link.
-                    this.onTextInput = this.isTargetATextBox(elem);
-                }
-
                 // Metadata item?
                 if ( !this.onMetaDataItem ) {
-                    // We currently display metadata on anything which fits
-                    // the below test.
+                    // We display metadata on anything which fits
+                    // the below test, as well as for links and images
+                    // (which set this.onMetaDataItem to true elsewhere)
                     if ( ( elem instanceof HTMLQuoteElement && elem.cite)    ||
                          ( elem instanceof HTMLTableElement && elem.summary) ||
                          ( elem instanceof HTMLModElement &&
                              ( elem.cite || elem.dateTime ) )                ||
                          ( elem instanceof HTMLElement &&
                              ( elem.title || elem.lang ) )                   ||
                          elem.getAttributeNS(XMLNS, "lang") ) {
                         this.onMetaDataItem = true;
@@ -4337,86 +4319,71 @@                                       ge
                         this.hasBGImage = true;
                         this.bgImageURL = makeURLAbsolute( elem.baseURI,
                                                            bgImgUrl );
                     }
                 }
             }
             elem = elem.parentNode;
         }
+        
+        // See if the user clicked on MathML
+        const NS_MathML = "http://www.w3.org/1998/Math/MathML";
+        if ((this.target.nodeType == Node.TEXT_NODE &&
+             this.target.parentNode.namespaceURI == NS_MathML)
+             || (this.target.namespaceURI == NS_MathML))
+          this.onMathML = true;
+
+        // See if the user clicked in a frame.
+        if ( this.target.ownerDocument != window.content.document ) {
+            this.inFrame = true;
+        }
+
     },
     // Returns the computed style attribute for the given element.
     getComputedStyle: function( elem, prop ) {
          return elem.ownerDocument.defaultView.getComputedStyle( elem, '' ).getPropertyValue( prop );
     },
     // Returns a "url"-type computed style attribute value, with the url() stripped.
     getComputedURL: function( elem, prop ) {
          var url = elem.ownerDocument.defaultView.getComputedStyle( elem, '' ).getPropertyCSSValue( prop );
          return ( url.primitiveType == CSSPrimitiveValue.CSS_URI ) ? url.getStringValue() : null;
     },
-    // Returns true iff clicked on link is saveable.
+    // Returns true if clicked-on link targets a resource that can be saved.
     isLinkSaveable : function ( link ) {
         // We don't do the Right Thing for news/snews yet, so turn them off
         // until we do.
-        return !(this.isLinkType( "mailto:" , link )     ||
-                 this.isLinkType( "javascript:" , link ) ||
-                 this.isLinkType( "news:", link )        ||
-                 this.isLinkType( "snews:", link ) );
-    },
-    // Returns true iff clicked on link is of type given.
-    isLinkType : function ( linktype, link ) {
-        try {
-            // Test for missing protocol property.
-            if ( !link.protocol ) {
-                // We must resort to testing the URL string :-(.
-                var protocol;
-                var wrapper = link;
-                if (wrapper.href) {
-                    protocol = wrapper.href.substr(0, linktype.length);
-                } else {
-                    protocol = wrapper.getAttributeNS("http://www.w3.org/1999/xlink","href");
-                    if (protocol) {
-                        protocol = protocol.substr(0, linktype.length);
-                    }
-                }
-                return protocol.toLowerCase() === linktype;
-            } else {
-                // Presume all but javascript: urls are saveable.
-                return link.protocol.toLowerCase() === linktype;
-            }
-        } catch (e) {
-            // something was wrong with the link,
-            // so we won't be able to save it anyway
-            return false;
-        }
+        return this.linkProtocol && !(
+                 this.linkProtocol == "mailto"     ||
+                 this.linkProtocol == "javascript" ||
+                 this.linkProtocol == "news"       ||
+                 this.linkProtocol == "snews"      );
     },
+
     // Open linked-to URL in a new window.
     openLink : function () {
-        // Determine linked-to URL.
-        openNewWindowWith(this.linkURL(), this.link, true);
+        openNewWindowWith(this.linkURL, this.docURL, null);
     },
     // Open linked-to URL in a new tab.
     openLinkInTab : function () {
-        // Determine linked-to URL.
-        openNewTabWith(this.linkURL(), this.link, null, true);
+        openNewTabWith(this.linkURL, this.docURL, null, null);
     },
     // Open frame in a new tab.
     openFrameInTab : function () {
-        // Determine linked-to URL.
-        openNewTabWith(this.target.ownerDocument.location.href, null, null, true);
+        openNewTabWith(this.target.ownerDocument.location.href, null, null, null);
     },
     // Reload clicked-in frame.
     reloadFrame : function () {
         this.target.ownerDocument.location.reload();
     },
     // Open clicked-in frame in its own window.
     openFrame : function () {
-        openNewWindowWith(this.target.ownerDocument.location.href, null, true);
+        openNewWindowWith(this.target.ownerDocument.location.href, null, null);
     },
-    // Open clicked-in frame in the same window
+    // Open clicked-in frame in the same window.
     showOnlyThisFrame : function () {
         window.loadURI(this.target.ownerDocument.location.href, null, null);
     },
     // View Partial Source
     viewPartialSource : function ( context ) {
         var focusedWindow = document.commandDispatcher.focusedWindow;
         if (focusedWindow == window)
           focusedWindow = content;
@@ -4447,62 +4414,91 @@     viewFrameSource : function () {
     viewInfo : function () {
       BrowserPageInfo();
     },
     viewFrameInfo : function () {
       BrowserPageInfo(this.target.ownerDocument);
     },
     // Change current window to the URL of the image.
     viewImage : function (e) {
-        urlSecurityCheck( this.imageURL, document )
+        urlSecurityCheck( this.imageURL, this.docURL );
         openUILink( this.imageURL, e );
     },
     // Change current window to the URL of the background image.
     viewBGImage : function (e) {
-        urlSecurityCheck( this.bgImageURL, document )
+        urlSecurityCheck( this.bgImageURL, this.docURL );
         openUILink( this.bgImageURL, e );
     },
+    disableSetDesktopBackground: function() {
+        // Disable the Set as Desktop Background menu item if we're still trying
+        // to load the image or the load failed.
+        const nsIImageLoadingContent = Components.interfaces.nsIImageLoadingContent;
+        if (("complete" in this.target) && !this.target.complete)
+            return true;
+        else if (makeURI(this.target.src).scheme == "javascript")
+            return true;
+        else if (this.target instanceof nsIImageLoadingContent) {
+            var request = this.target.QueryInterface(nsIImageLoadingContent)
+                              .getRequest(nsIImageLoadingContent.CURRENT_REQUEST);
+            if (!request)
+                return true;
+        }
+        
+        return false;
+    },
     setDesktopBackground: function() {
+      // Paranoia: check disableSetDesktopBackground again, in case the
+      // image changed since the context menu was initiated.
+      if (this.disableSetDesktopBackground())
+        return;
+
+      urlSecurityCheck(this.target.src, this.docURL);
+
       // Confirm since it's annoying if you hit this accidentally.
       const kDesktopBackgroundURL = 
                     "chrome://browser/content/setDesktopBackground.xul";
 #ifdef XP_MACOSX
+      // On Mac, the Set Desktop Background window is not modal.
+      // Don't open more than one Set Desktop Background window.
       var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                          .getService(Components.interfaces.nsIWindowMediator);
       var dbWin = wm.getMostRecentWindow("Shell:SetDesktopBackground");
       if (dbWin) {
         dbWin.gSetBackground.init(this.target);
         dbWin.focus();
       }
       else {
         openDialog(kDesktopBackgroundURL, "",
                    "centerscreen,chrome,dialog=no,dependent,resizable=no",
                    this.target);
       }
 #else
+      // On non-Mac platforms, the Set Wallpaper dialog is modal.
       openDialog(kDesktopBackgroundURL, "",
                  "centerscreen,chrome,dialog,modal,dependent",
                  this.target);
 #endif
     },
     // Save URL of clicked-on frame.
     saveFrame : function () {
         saveDocument( this.target.ownerDocument );
     },
     // Save URL of clicked-on link.
     saveLink : function () {
-        saveURL( this.linkURL(), this.linkText(), null, true, false );
+        urlSecurityCheck(this.imageURL, this.docURL);
+        saveURL( this.linkURL, this.linkText(), null, true, false, makeURI(this.docURL) );
     },
     sendLink : function () {
-        MailIntegration.sendMessage( this.linkURL(), "" ); // we don't know the title of the link so pass in an empty string
+        MailIntegration.sendMessage( this.linkURL, "" ); // we don't know the title of the link so pass in an empty string
     },
     // Save URL of clicked-on image.
     saveImage : function () {
+        urlSecurityCheck(this.imageURL, this.docURL);
         saveImageURL( this.imageURL, null, "SaveImageTitle", false,
-                      false, getReferrer(document) );
+                      false, makeURI(this.docURL) );
     },
     sendImage : function () {
         MailIntegration.sendMessage(this.imageURL, "");
     },
     toggleImageBlocking : function (aBlock) {
       var nsIPermissionManager = Components.interfaces.nsIPermissionManager;
       var permissionmanager =
         Components.classes["@mozilla.org/permissionmanager;1"]
@@ -4523,17 +4519,17 @@     isImageBlocked : function() {
 
       return permissionmanager.testPermission(uri, "image") == nsIPermissionManager.DENY_ACTION;
     },
     // Generate email address and put it on clipboard.
     copyEmail : function () {
         // Copy the comma-separated list of email addresses only.
         // There are other ways of embedding email addresses in a mailto:
         // link, but such complex parsing is beyond us.
-        var url = this.linkURL();
+        var url = this.linkURL;
         var qmark = url.indexOf( "?" );
         var addresses;
 
         if ( qmark > 7 ) {                   // 7 == length of "mailto:"
             addresses = url.substring( 7, qmark );
         } else {
             addresses = url.substr( 7 );
         }
@@ -4633,58 +4629,70 @@     cloneNode : function ( item ) {
         for ( var i = 0; i < attrs.length; i++ ) {
             var attr = attrs.item( i );
             node.setAttribute( attr.nodeName, attr.nodeValue );
         }
 
         // Voila!
         return node;
     },
-    // Generate fully-qualified URL for clicked-on link.
-    linkURL : function () {
-        var wrapper = this.link;
-        if (wrapper.href) {
-          return wrapper.href;
+    // Generate fully qualified URL for clicked-on link.
+    getLinkURL : function () {
+        var href = this.link.href;
+        
+        if (href) {
+          return href;
         }
-        var href = wrapper.getAttributeNS("http://www.w3.org/1999/xlink",
+
+        var href = this.link.getAttributeNS("http://www.w3.org/1999/xlink",
                                           "href");
+
         if (!href || !href.match(/\S/)) {
           throw "Empty href"; // Without this we try to save as the current doc, for example, HTML case also throws if empty
         }
-        href = makeURLAbsolute(wrapper.baseURI, href);
+        href = makeURLAbsolute(this.link.baseURI, href);
         return href;
     },
+    
+    getLinkURI : function () {
+         var ioService = Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
+         try {
+           return ioService.newURI(this.linkURL, null, null);
+         } catch (ex) {
+           // e.g. empty URL string
+           return null;
+         }
+    },
+    
+    getLinkProtocol : function () {
+        if (this.linkURI) {
+            return this.linkURI.scheme; // can be |undefined|
+        } else {
+            return null;
+        }
+    },
+
     // Get text of link.
     linkText : function () {
         var text = gatherTextUnder( this.link );
         if (!text || !text.match(/\S/)) {
           text = this.link.getAttribute("title");
           if (!text || !text.match(/\S/)) {
             text = this.link.getAttribute("alt");
             if (!text || !text.match(/\S/)) {
-              var wrapper = this.link;
-
-              if (wrapper.href) {
-                text = wrapper.href;
-              } else {
-                text = wrapper.getAttributeNS("http://www.w3.org/1999/xlink",
-                                              "href");
-                if (text && text.match(/\S/)) {
-                  text = makeURLAbsolute(wrapper.baseURI, text);
-                }
-              }
+              text = this.linkURL;
             }
           }
         }
 
         return text;
     },
 
-    //Get selected object and convert it to a string to get
-    //selected text.   Only use the first 15 chars.
+    // Get selected object and convert it to a string to get
+    // selected text.   Only display the first 15 chars.
     isTextSelection : function() {
         var result = false;
         var selection = this.searchSelected(16);
 
         var searchSelectText;
         if (selection) {
             searchSelectText = selection.toString();
             if (searchSelectText.length > 15)
@@ -4963,52 +4971,54 @@          // mimic that WinIE functionali
        gPrefService.getBoolPref("middlemouse.contentLoadURL")) {
      middleMousePaste(event);
    }
    return true;
  }
 
 function handleLinkClick(event, href, linkNode)
 {
+  var docURL = event.target.ownerDocument.location.href;
+
   switch (event.button) {
     case 0:
 #ifdef XP_MACOSX
       if (event.metaKey) { // Cmd
 #else
       if (event.ctrlKey) {
 #endif
-        openNewTabWith(href, linkNode, event, true);
+        openNewTabWith(href, docURL, null, event);
         event.preventBubble();
         return true;
       }
                                                        // if left button clicked
       if (event.shiftKey) {
-        openNewWindowWith(href, linkNode, true);
+        openNewWindowWith(href, docURL, null);
         event.preventBubble();
         return true;
       }
 
       if (event.altKey) {
-        saveURL(href, linkNode ? gatherTextUnder(linkNode) : "", null, true, true);
+        saveURL(href, linkNode ? gatherTextUnder(linkNode) : "", null, true, true, makeURI(docURL));
         return true;
       }
 
       return false;
     case 1:                                                         // if middle button clicked
       var tab;
       try {
         tab = gPrefService.getBoolPref("browser.tabs.opentabfor.middleclick")
       }
       catch(ex) {
         tab = true;
       }
       if (tab)
-        openNewTabWith(href, linkNode, event, true);
+        openNewTabWith(href, docURL, null, event);
       else
-        openNewWindowWith(href, linkNode, true);
+        openNewWindowWith(href, docURL, null);
       event.preventBubble();
       return true;
   }
   return false;
 }
 
 function middleMousePaste(event)
 {
Index: toolkit/content/contentAreaUtils.js
===================================================================
RCS file: /cvsroot/mozilla/toolkit/content/contentAreaUtils.js,v
retrieving revision 1.76
diff -u -8 -Ffunction -r1.76 contentAreaUtils.js
--- toolkit/content/contentAreaUtils.js	10 Aug 2005 20:21:44 -0000	1.76
+++ toolkit/content/contentAreaUtils.js	12 Aug 2005 06:37:03 -0000
@@ -33,26 +33,32 @@
 # use your version of this file under the terms of the MPL, indicate your
 # decision by deleting the provisions above and replace them with the notice
 # and other provisions required by the GPL or the LGPL. If you do not delete
 # the provisions above, a recipient may use your version of this file under
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK *****
 
-/**
- * Determine whether or not a given focused DOMWindow is in the content
- * area.
- **/
 
-// linkNode is not used anymore
-function openNewTabWith(href, linkNode, event, securityCheck, postData, sendReferrer)
+/**
+ * openNewTabWith: opens a new tab with the given URL.
+ *
+ * @param href The URL to open (as a string).
+ * @param sourceURL The URL of the document from which the URL came, or null.
+ *          This is used to set the referrer header and to do a security check of whether
+ *          the document as allowed to reference the URL.
+ *          If null, there will be no referrer header and no security check.
+ * @param postData Form POST data, or null.
+ * @param event The triggering event (for the purpose of determining whether to open in the background), or null
+ */ 
+function openNewTabWith(href, sourceURL, postData, event)
 {
-  if (securityCheck)
-    urlSecurityCheck(href, document); 
+  if (sourceURL)
+    urlSecurityCheck(href, sourceURL);
 
   var prefSvc = Components.classes["@mozilla.org/preferences-service;1"]
                           .getService(Components.interfaces.nsIPrefService);
   prefSvc = prefSvc.getBranch(null);
 
   // should we open it in a new tab?
   var loadInBackground = true;
   try {
@@ -69,58 +75,58 @@ function openNewTabWith(href, linkNode, 
   var wintype = document.firstChild.getAttribute('windowtype');
   var originCharset;
   if (wintype == "navigator:browser")
     originCharset = window.content.document.characterSet;
 
   // open link in new tab
   var browser = top.document.getElementById("content");
 
-  // If sendReferrer is not specified, default to true
-  var referrer = (sendReferrer == false) ? null : getReferrer(document);
+  var referrerURI = sourceURL ? makeURI(sourceURL) : null;
 
-  browser.loadOneTab(href, referrer, originCharset, postData, loadInBackground);
+  browser.loadOneTab(href, referrerURI, originCharset, postData, loadInBackground);
 }
 
-// linkNode is not used anymore
-function openNewWindowWith(href, linkNode, securityCheck, postData, sendReferrer)
+function openNewWindowWith(href, sourceURL, postData)
 {
-  if (securityCheck)
-    urlSecurityCheck(href, document);
+  if (sourceURL)
+    urlSecurityCheck(href, sourceURL);
 
   // if and only if the current window is a browser window and it has a document with a character
   // set, then extract the current charset menu setting from the current document and use it to
   // initialize the new browser window...
   var charsetArg = null;
   var wintype = document.firstChild.getAttribute('windowtype');
   if (wintype == "navigator:browser")
     charsetArg = "charset=" + window.content.document.characterSet;
 
-  // If sendReferrer is not specified, default to true
-  var referrer = (sendReferrer == false) ? null : getReferrer(document);
+  var referrerURI = sourceURL ? makeURI(sourceURL) : null;
 
-  window.openDialog(getBrowserURL(), "_blank", "chrome,all,dialog=no", href, charsetArg, referrer, postData);
+  window.openDialog(getBrowserURL(), "_blank", "chrome,all,dialog=no", href, charsetArg, referrerURI, postData);
 }
 
-function urlSecurityCheck(url, doc) 
+/**
+ * urlSecurityCheck: JavaScript wrapper for CheckLoadURI.
+ * If |sourceURL| is not allowed to link to |url|, this function throws with an error message.
+ *
+ * @param url The URL a page has linked to.
+ * @param sourceURL The URL of the document from which the URL came.
+ */
+function urlSecurityCheck(url, sourceURL)
 {
-  // URL Loading Security Check
-  var focusedWindow = doc.commandDispatcher.focusedWindow;
-  var sourceURL = getContentFrameURI(focusedWindow);
-
   var sourceURI = makeURI(sourceURL);
   var destURI = makeURI(url);
 
   const nsIScriptSecurityManager = Components.interfaces.nsIScriptSecurityManager;
   var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
                          .getService(nsIScriptSecurityManager);
   try {
     secMan.checkLoadURI(sourceURI, destURI, nsIScriptSecurityManager.STANDARD);
   } catch (e) {
-    throw "Load of " + url + " denied.";
+    throw "Load of " + url + " from " + sourceURL + " denied.";
   }
 }
 
 function webPanelSecurityCheck(aSourceURL, aDestURL) {
   var sourceURI = makeURI(aSourceURL);
   var destURI = makeURI(aDestURL);
 
   const nsIScriptSecurityManager = Components.interfaces.nsIScriptSecurityManager;
@@ -137,38 +143,16 @@ function webPanelSecurityCheck(aSourceUR
 function isContentFrame(aFocusedWindow)
 {
   if (!aFocusedWindow)
     return false;
 
   return (aFocusedWindow.top == window.content);
 }
 
-function getContentFrameURI(aFocusedWindow)
-{
-  var contentFrame = isContentFrame(aFocusedWindow) ? aFocusedWindow : window.content;
-  if (contentFrame)
-    return contentFrame.location.href;
-  else
-    return null;
-}
-
-function getReferrer(doc)
-{
-  var focusedWindow = doc.commandDispatcher.focusedWindow;
-  var sourceURL = getContentFrameURI(focusedWindow);
-
-  if (sourceURL) {
-    try {
-      return makeURI(sourceURL);
-    }
-    catch (e) { }
-  }
-  return null;
-}
 
 const kSaveAsType_Complete = 0;   // Save document with attached objects
 // const kSaveAsType_URL = 1;     // Save document or URL by itself
 const kSaveAsType_Text = 2;       // Save document, converting to plain text. 
 
 // Clientelle: (Make sure you don't break any of these)
 //  - File    ->  Save Page/Frame As...
 //  - Context ->  Save Page/Frame As...
