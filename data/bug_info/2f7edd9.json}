{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas2f7edd9\""},"diff":[{"chunks":[{"content":"@@ -837,32 +837,28 @@ nsAccessNode::GetLanguage(nsAString& aLanguage)","changes":[{"type":"normal","normal":true,"ln1":837,"ln2":837,"content":" PRBool"},{"type":"normal","normal":true,"ln1":838,"ln2":838,"content":" nsAccessNode::GetARIARole(nsIContent *aContent, nsString& aRole)"},{"type":"normal","normal":true,"ln1":839,"ln2":839,"content":" {"},{"type":"del","del":true,"ln":840,"content":"-  nsAutoString prefix;"},{"type":"del","del":true,"ln":841,"content":"-  PRBool strictPrefixChecking = PR_TRUE;"},{"type":"normal","normal":true,"ln1":842,"ln2":840,"content":"   aRole.Truncate();"},{"type":"normal","normal":true,"ln1":843,"ln2":841,"content":" "},{"type":"del","del":true,"ln":844,"content":"-  if (aContent->IsNodeOfType(nsINode::eHTML)) { // HTML node"},{"type":"add","add":true,"ln":842,"content":"+  PRBool allowPrefixLookup = PR_TRUE;"},{"type":"add","add":true,"ln":843,"content":"+"},{"type":"add","add":true,"ln":844,"content":"+  if (aContent->IsNodeOfType(nsINode::eHTML)) {"},{"type":"normal","normal":true,"ln1":845,"ln2":845,"content":"     // Allow non-namespaced role attribute in HTML"},{"type":"del","del":true,"ln":846,"content":"-    aContent->GetAttr(kNameSpaceID_None, nsAccessibilityAtoms::role, aRole);"},{"type":"del","del":true,"ln":847,"content":"-    // Find non-namespaced role attribute on HTML node"},{"type":"add","add":true,"ln":846,"content":"+    if (!aContent->GetAttr(kNameSpaceID_None, nsAccessibilityAtoms::role, aRole)) {"},{"type":"add","add":true,"ln":847,"content":"+      return PR_FALSE;"},{"type":"add","add":true,"ln":848,"content":"+    }"},{"type":"normal","normal":true,"ln1":848,"ln2":849,"content":"     nsCOMPtr<nsIDOMNSDocument> doc(do_QueryInterface(aContent->GetDocument()));"},{"type":"normal","normal":true,"ln1":849,"ln2":850,"content":"     if (doc) {"},{"type":"del","del":true,"ln":850,"content":"-      // In text/html we are hardcoded to allow the exact prefix \"wairole:\" to "},{"type":"del","del":true,"ln":851,"content":"-      // always indicate that we are using the WAI roles."},{"type":"del","del":true,"ln":852,"content":"-      // This allows ARIA to be used within text/html where namespaces cannot be defined."},{"type":"del","del":true,"ln":853,"content":"-      // We also now relax the prefix checking, which means no prefix is required to use WAI Roles"},{"type":"normal","normal":true,"ln1":854,"ln2":851,"content":"       nsAutoString mimeType;"},{"type":"normal","normal":true,"ln1":855,"ln2":852,"content":"       doc->GetContentType(mimeType);"},{"type":"normal","normal":true,"ln1":856,"ln2":853,"content":"       if (mimeType.EqualsLiteral(\"text/html\")) {"},{"type":"del","del":true,"ln":857,"content":"-        prefix = NS_LITERAL_STRING(\"wairole:\");"},{"type":"del","del":true,"ln":858,"content":"-        strictPrefixChecking = PR_FALSE;"},{"type":"add","add":true,"ln":854,"content":"+        allowPrefixLookup = PR_FALSE;"},{"type":"normal","normal":true,"ln1":859,"ln2":855,"content":"       }"},{"type":"normal","normal":true,"ln1":860,"ln2":856,"content":"     }"},{"type":"normal","normal":true,"ln1":861,"ln2":857,"content":"   }"},{"type":"del","del":true,"ln":862,"content":"-"},{"type":"del","del":true,"ln":863,"content":"-  // Try namespaced-role attribute (xhtml or xhtml2 namespace) -- allowed in any kind of content"},{"type":"del","del":true,"ln":864,"content":"-  if (aRole.IsEmpty() && !aContent->GetAttr(kNameSpaceID_XHTML, nsAccessibilityAtoms::role, aRole) &&"},{"type":"del","del":true,"ln":865,"content":"-      !aContent->GetAttr(kNameSpaceID_XHTML2_Unofficial, nsAccessibilityAtoms::role, aRole)) {"},{"type":"add","add":true,"ln":858,"content":"+  // In non-HTML content, use XHTML namespaced-role attribute"},{"type":"add","add":true,"ln":859,"content":"+  // XXX We still support XHTML2 for now because of XUL content, but will migrate to XHTML after FF3"},{"type":"add","add":true,"ln":860,"content":"+  else if (!aContent->GetAttr(kNameSpaceID_XHTML, nsAccessibilityAtoms::role, aRole) &&"},{"type":"add","add":true,"ln":861,"content":"+           !aContent->GetAttr(kNameSpaceID_XHTML2_Unofficial, nsAccessibilityAtoms::role, aRole)) {"},{"type":"normal","normal":true,"ln1":866,"ln2":862,"content":"     return PR_FALSE;"},{"type":"normal","normal":true,"ln1":867,"ln2":863,"content":"   }"},{"type":"normal","normal":true,"ln1":868,"ln2":864,"content":" "}],"oldStart":837,"oldLines":32,"newStart":837,"newLines":28},{"content":"@@ -871,16 +867,23 @@ nsAccessNode::GetARIARole(nsIContent *aContent, nsString& aRole)","changes":[{"type":"normal","normal":true,"ln1":871,"ln2":867,"content":"   if (!hasPrefix) {"},{"type":"normal","normal":true,"ln1":872,"ln2":868,"content":"     // * No prefix* -- not a QName"},{"type":"normal","normal":true,"ln1":873,"ln2":869,"content":"     // Just return entire string as long as prefix is not currently required"},{"type":"del","del":true,"ln":874,"content":"-    if (strictPrefixChecking) {"},{"type":"del","del":true,"ln":875,"content":"-      // Prefix was required and we didn't have one"},{"type":"del","del":true,"ln":876,"content":"-      aRole.Truncate();"},{"type":"del","del":true,"ln":877,"content":"-      return PR_FALSE;"},{"type":"del","del":true,"ln":878,"content":"-    }"},{"type":"normal","normal":true,"ln1":879,"ln2":870,"content":"     return PR_TRUE;"},{"type":"normal","normal":true,"ln1":880,"ln2":871,"content":"   }"},{"type":"normal","normal":true,"ln1":881,"ln2":872,"content":" "},{"type":"del","del":true,"ln":882,"content":"-  // * Has prefix * -- is a QName (role=\"prefix:rolename\")"},{"type":"del","del":true,"ln":883,"content":"-  if (strictPrefixChecking) {  // Not text/html, we need to actually find the WAIRole prefix"},{"type":"add","add":true,"ln":873,"content":"+  // Has prefix -- is a QName (role=\"prefix:rolename\")"},{"type":"add","add":true,"ln":874,"content":"+"},{"type":"add","add":true,"ln":875,"content":"+  // Check hardcoded 'wairole:' prefix"},{"type":"add","add":true,"ln":876,"content":"+  NS_NAMED_LITERAL_STRING(hardcodedWairolePrefix, \"wairole:\");"},{"type":"add","add":true,"ln":877,"content":"+  if (StringBeginsWith(aRole, hardcodedWairolePrefix)) {"},{"type":"add","add":true,"ln":878,"content":"+    // The exact prefix \"wairole:\" is reserved to "},{"type":"add","add":true,"ln":879,"content":"+    // always indicate that we are using WAI roles."},{"type":"add","add":true,"ln":880,"content":"+    aRole.Cut(0, hardcodedWairolePrefix.Length());"},{"type":"add","add":true,"ln":881,"content":"+    return PR_TRUE;"},{"type":"add","add":true,"ln":882,"content":"+  }"},{"type":"add","add":true,"ln":883,"content":"+"},{"type":"add","add":true,"ln":884,"content":"+  // Check for prefix mapped with xmlns:prefixname=\"\""},{"type":"add","add":true,"ln":885,"content":"+  nsAutoString prefix;"},{"type":"add","add":true,"ln":886,"content":"+  if (allowPrefixLookup) {  // Not text/html, so we will try to find the WAIRole prefix"},{"type":"normal","normal":true,"ln1":884,"ln2":887,"content":"     // QI to nsIDOM3Node causes some overhead. Unfortunately we need to do this each"},{"type":"normal","normal":true,"ln1":885,"ln2":888,"content":"     // time there is a prefixed role attribute, because the prefix to namespace mappings"},{"type":"normal","normal":true,"ln1":886,"ln2":889,"content":"     // can change within any subtree via the xmlns attribute"}],"oldStart":871,"oldLines":16,"newStart":867,"newLines":23},{"content":"@@ -890,15 +893,14 @@ nsAccessNode::GetARIARole(nsIContent *aContent, nsString& aRole)","changes":[{"type":"normal","normal":true,"ln1":890,"ln2":893,"content":"       NS_NAMED_LITERAL_STRING(kWAIRoles_Namespace, \"http://www.w3.org/2005/01/wai-rdf/GUIRoleTaxonomy#\");"},{"type":"normal","normal":true,"ln1":891,"ln2":894,"content":"       dom3Node->LookupPrefix(kWAIRoles_Namespace, prefix);"},{"type":"normal","normal":true,"ln1":892,"ln2":895,"content":"       prefix += ':';"},{"type":"add","add":true,"ln":896,"content":"+      PRUint32 length = prefix.Length();"},{"type":"add","add":true,"ln":897,"content":"+      if (length > 1 && StringBeginsWith(aRole, prefix)) {"},{"type":"add","add":true,"ln":898,"content":"+        // Is a QName (role=\"prefix:rolename\"), and prefix matches WAI Role prefix"},{"type":"add","add":true,"ln":899,"content":"+        // Trim the WAI Role prefix off"},{"type":"add","add":true,"ln":900,"content":"+        aRole.Cut(0, length);"},{"type":"add","add":true,"ln":901,"content":"+      }"},{"type":"normal","normal":true,"ln1":893,"ln2":902,"content":"     }"},{"type":"normal","normal":true,"ln1":894,"ln2":903,"content":"   }"},{"type":"normal","normal":true,"ln1":895,"ln2":904,"content":" "},{"type":"del","del":true,"ln":896,"content":"-  PRUint32 length = prefix.Length();"},{"type":"del","del":true,"ln":897,"content":"-  if (length > 1 && StringBeginsWith(aRole, prefix)) {"},{"type":"del","del":true,"ln":898,"content":"-    // Is a QName (role=\"prefix:rolename\"), and prefix matches WAI Role prefix"},{"type":"del","del":true,"ln":899,"content":"-    // Trim the WAI Role prefix off"},{"type":"del","del":true,"ln":900,"content":"-    aRole.Cut(0, length);"},{"type":"del","del":true,"ln":901,"content":"-  }"},{"type":"del","del":true,"ln":902,"content":"-"},{"type":"normal","normal":true,"ln1":903,"ln2":905,"content":"   return PR_TRUE;"},{"type":"normal","normal":true,"ln1":904,"ln2":906,"content":" }"}],"oldStart":890,"oldLines":15,"newStart":893,"newLines":14}],"deletions":29,"additions":31,"from":"accessible/src/base/nsAccessNode.cpp","to":"accessible/src/base/nsAccessNode.cpp","index":["38cf7de..6436cec","100755"]},{"chunks":[{"content":"@@ -585,7 +585,7 @@ nsAccUtils::FindNeighbourPointingToNode(nsIContent *aForNode,","changes":[{"type":"normal","normal":true,"ln1":585,"ln2":585,"content":" {"},{"type":"normal","normal":true,"ln1":586,"ln2":586,"content":"   NS_ASSERTION(aAriaProperty == eAria_none || !aRelationAttr,"},{"type":"normal","normal":true,"ln1":587,"ln2":587,"content":"                \"Cannot pass in both an ARIA relation property and an atom relation. Choose one\");"},{"type":"del","del":true,"ln":588,"content":"-  NS_ASSERTION(aAriaProperty != eAria_none || !aTagName,"},{"type":"add","add":true,"ln":588,"content":"+  NS_ASSERTION(aAriaProperty == eAria_none || !aTagName,"},{"type":"normal","normal":true,"ln1":589,"ln2":589,"content":"                \"Cannot use aTagName with ARIA relation property, because ARIA relations apply to any tag\");"},{"type":"normal","normal":true,"ln1":590,"ln2":590,"content":"   nsCOMPtr<nsIContent> binding;"},{"type":"normal","normal":true,"ln1":591,"ln2":591,"content":"   nsAutoString controlID;"}],"oldStart":585,"oldLines":7,"newStart":585,"newLines":7}],"deletions":1,"additions":1,"from":"accessible/src/base/nsAccessibilityUtils.cpp","to":"accessible/src/base/nsAccessibilityUtils.cpp","index":["fd4806a..121ca04","100755"]},{"chunks":[{"content":"@@ -1044,16 +1044,13 @@ nsDocAccessible::AttributeChangedImpl(nsIContent* aContent, PRInt32 aNameSpaceID","changes":[{"type":"normal","normal":true,"ln1":1044,"ln2":1044,"content":"     return;"},{"type":"normal","normal":true,"ln1":1045,"ln2":1045,"content":"   }"},{"type":"normal","normal":true,"ln1":1046,"ln2":1046,"content":" "},{"type":"del","del":true,"ln":1047,"content":"-  if (aNameSpaceID == kNameSpaceID_XHTML2_Unofficial ||"},{"type":"del","del":true,"ln":1048,"content":"-      aNameSpaceID == kNameSpaceID_XHTML) {"},{"type":"del","del":true,"ln":1049,"content":"-    if (aAttribute == nsAccessibilityAtoms::role)"},{"type":"del","del":true,"ln":1050,"content":"-      InvalidateCacheSubtree(aContent, nsIAccessibleEvent::EVENT_DOM_SIGNIFICANT_CHANGE);"},{"type":"del","del":true,"ln":1051,"content":"-    return;"},{"type":"del","del":true,"ln":1052,"content":"-  }"},{"type":"del","del":true,"ln":1053,"content":"-"},{"type":"del","del":true,"ln":1054,"content":"-  if (aAttribute == nsAccessibilityAtoms::href ||"},{"type":"add","add":true,"ln":1047,"content":"+  if (aAttribute == nsAccessibilityAtoms::role ||"},{"type":"add","add":true,"ln":1048,"content":"+      aAttribute == nsAccessibilityAtoms::href ||"},{"type":"normal","normal":true,"ln1":1055,"ln2":1049,"content":"       aAttribute == nsAccessibilityAtoms::onclick ||"},{"type":"normal","normal":true,"ln1":1056,"ln2":1050,"content":"       aAttribute == nsAccessibilityAtoms::droppable) {"},{"type":"add","add":true,"ln":1051,"content":"+    // Not worth the expense to ensure which namespace these are in"},{"type":"add","add":true,"ln":1052,"content":"+    // It doesn't kill use to recreate the accessible even if the attribute was used"},{"type":"add","add":true,"ln":1053,"content":"+    // in the wrong namespace or an element that doesn't support it"},{"type":"normal","normal":true,"ln1":1057,"ln2":1054,"content":"     InvalidateCacheSubtree(aContent, nsIAccessibleEvent::EVENT_DOM_SIGNIFICANT_CHANGE);"},{"type":"normal","normal":true,"ln1":1058,"ln2":1055,"content":"     return;"},{"type":"normal","normal":true,"ln1":1059,"ln2":1056,"content":"   }"}],"oldStart":1044,"oldLines":16,"newStart":1044,"newLines":13}],"deletions":8,"additions":5,"from":"accessible/src/base/nsDocAccessible.cpp","to":"accessible/src/base/nsDocAccessible.cpp","index":["da3829c..be72aba","100644"]}]}