Index: content/xbl/src/nsXBLDocumentInfo.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xbl/src/nsXBLDocumentInfo.cpp,v
retrieving revision 1.37
diff -p -U10 -r1.37 nsXBLDocumentInfo.cpp
--- content/xbl/src/nsXBLDocumentInfo.cpp	19 Oct 2005 18:45:14 -0000	1.37
+++ content/xbl/src/nsXBLDocumentInfo.cpp	21 Oct 2005 08:58:05 -0000
@@ -83,40 +83,53 @@ public:
                                   nsIDOMEvent** aDOMEvent,
                                   PRUint32 aFlags,
                                   nsEventStatus* aEventStatus);
   virtual JSObject *GetGlobalJSObject();
   virtual void OnFinalize(JSObject *aObject);
   virtual void SetScriptsEnabled(PRBool aEnabled, PRBool aFireTimeouts);
   virtual nsresult SetNewArguments(PRUint32 aArgc, void* aArgv);
 
   // nsIScriptObjectPrincipal methods
   virtual nsIPrincipal* GetPrincipal();
-    
+
 protected:
   virtual ~nsXBLDocGlobalObject();
 
   nsCOMPtr<nsIScriptContext> mScriptContext;
   JSObject *mJSObject;    // XXX JS language rabies bigotry badness
 
   nsIScriptGlobalObjectOwner* mGlobalObjectOwner; // weak reference
   static JSClass gSharedGlobalClass;
+  friend JSBool doCheckAccess(JSContext *cx, JSObject *obj, jsval id,
+                              PRUint32 accessType);
 };
 
 static JSBool
 doCheckAccess(JSContext *cx, JSObject *obj, jsval id, PRUint32 accessType)
 {
   nsIScriptSecurityManager *ssm = nsContentUtils::GetSecurityManager();
   if (!ssm) {
     ::JS_ReportError(cx, "Unable to verify access to a global object property.");
     return JS_FALSE;
   }
 
+  // Make sure to actually operate on our object, and not some object further
+  // down on the proto chain.
+  while (JS_GET_CLASS(cx, obj) != &nsXBLDocGlobalObject::gSharedGlobalClass) {
+    obj = ::JS_GetPrototype(cx, obj);
+    if (!obj) {
+      // XXX Eh?
+      ::JS_ReportError(cx, "Invalid access to a global object property.");
+      return JS_FALSE;
+    }
+  }
+
   nsresult rv = ssm->CheckPropertyAccess(cx, obj, JS_GET_CLASS(cx, obj)->name,
                                          id, accessType);
   return NS_SUCCEEDED(rv);
 }
 
 PR_STATIC_CALLBACK(JSBool)
 nsXBLDocGlobalObject_getProperty(JSContext *cx, JSObject *obj,
                                  jsval id, jsval *vp)
 {
   return doCheckAccess(cx, obj, id, nsIXPCSecurityManager::ACCESS_GET_PROPERTY);
