{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Base252fc2\""},"diff":[{"chunks":[{"content":"@@ -41,11 +41,13 @@","changes":[{"type":"normal","normal":true,"ln1":41,"ln2":41,"content":" #include \"jsapi.h\""},{"type":"normal","normal":true,"ln1":42,"ln2":42,"content":" #include \"nsIPrincipal.h\""},{"type":"normal","normal":true,"ln1":43,"ln2":43,"content":" "},{"type":"add","add":true,"ln":44,"content":"+class nsCString;"},{"type":"add","add":true,"ln":45,"content":"+"},{"type":"normal","normal":true,"ln1":44,"ln2":46,"content":" struct nsJSPrincipals : JSPrincipals"},{"type":"normal","normal":true,"ln1":45,"ln2":47,"content":" {"},{"type":"normal","normal":true,"ln1":46,"ln2":48,"content":"   static nsresult Startup();"},{"type":"normal","normal":true,"ln1":47,"ln2":49,"content":"   nsJSPrincipals();"},{"type":"del","del":true,"ln":48,"content":"-  nsresult Init(nsIPrincipal* aPrincipal, const char *aCodebase);"},{"type":"add","add":true,"ln":50,"content":"+  nsresult Init(nsIPrincipal* aPrincipal, const nsCString& aCodebase);"},{"type":"normal","normal":true,"ln1":49,"ln2":51,"content":"   ~nsJSPrincipals(void);"},{"type":"normal","normal":true,"ln1":50,"ln2":52,"content":" "},{"type":"normal","normal":true,"ln1":51,"ln2":53,"content":"   nsIPrincipal *nsIPrincipalPtr; // [WEAK] it owns us."}],"oldStart":41,"oldLines":11,"newStart":41,"newLines":13}],"deletions":1,"additions":3,"from":"caps/include/nsJSPrincipals.h","to":"caps/include/nsJSPrincipals.h","index":["1bc0173..782ac02","100644"]},{"chunks":[{"content":"@@ -103,7 +103,7 @@ public:","changes":[{"type":"normal","normal":true,"ln1":103,"ln2":103,"content":" protected:"},{"type":"normal","normal":true,"ln1":104,"ln2":104,"content":"   nsJSPrincipals mJSPrincipals;"},{"type":"normal","normal":true,"ln1":105,"ln2":105,"content":"   nsTArray< nsAutoPtr<nsHashtable> > mAnnotations;"},{"type":"del","del":true,"ln":106,"content":"-  nsHashtable mCapabilities;"},{"type":"add","add":true,"ln":106,"content":"+  nsHashtable* mCapabilities;"},{"type":"normal","normal":true,"ln1":107,"ln2":107,"content":"   nsCString mPrefName;"},{"type":"normal","normal":true,"ln1":108,"ln2":108,"content":"   static PRInt32 sCapabilitiesOrdinal;"},{"type":"normal","normal":true,"ln1":109,"ln2":109,"content":" "}],"oldStart":103,"oldLines":7,"newStart":103,"newLines":7}],"deletions":1,"additions":1,"from":"caps/include/nsPrincipal.h","to":"caps/include/nsPrincipal.h","index":["2f0c599..a4e5ad4","100755"]},{"chunks":[{"content":"@@ -47,6 +47,7 @@","changes":[{"type":"normal","normal":true,"ln1":47,"ln2":47,"content":" #include \"nsIJSRuntimeService.h\""},{"type":"normal","normal":true,"ln1":48,"ln2":48,"content":" #include \"nsIServiceManager.h\""},{"type":"normal","normal":true,"ln1":49,"ln2":49,"content":" #include \"nsMemory.h\""},{"type":"add","add":true,"ln":50,"content":"+#include \"nsStringBuffer.h\""},{"type":"normal","normal":true,"ln1":50,"ln2":51,"content":" "},{"type":"normal","normal":true,"ln1":51,"ln2":52,"content":" JS_STATIC_DLL_CALLBACK(void *)"},{"type":"normal","normal":true,"ln1":52,"ln2":53,"content":" nsGetPrincipalArray(JSContext *cx, JSPrincipals *prin)"}],"oldStart":47,"oldLines":6,"newStart":47,"newLines":7},{"content":"@@ -198,7 +199,7 @@ nsJSPrincipals::nsJSPrincipals()","changes":[{"type":"normal","normal":true,"ln1":198,"ln2":199,"content":" }"},{"type":"normal","normal":true,"ln1":199,"ln2":200,"content":" "},{"type":"normal","normal":true,"ln1":200,"ln2":201,"content":" nsresult"},{"type":"del","del":true,"ln":201,"content":"-nsJSPrincipals::Init(nsIPrincipal *aPrincipal, const char *aCodebase)"},{"type":"add","add":true,"ln":202,"content":"+nsJSPrincipals::Init(nsIPrincipal *aPrincipal, const nsCString& aCodebase)"},{"type":"normal","normal":true,"ln1":202,"ln2":203,"content":" {"},{"type":"normal","normal":true,"ln1":203,"ln2":204,"content":"     if (nsIPrincipalPtr) {"},{"type":"normal","normal":true,"ln1":204,"ln2":205,"content":"         NS_ERROR(\"Init called twice!\");"}],"oldStart":198,"oldLines":7,"newStart":199,"newLines":7},{"content":"@@ -206,15 +207,30 @@ nsJSPrincipals::Init(nsIPrincipal *aPrincipal, const char *aCodebase)","changes":[{"type":"normal","normal":true,"ln1":206,"ln2":207,"content":"     }"},{"type":"normal","normal":true,"ln1":207,"ln2":208,"content":" "},{"type":"normal","normal":true,"ln1":208,"ln2":209,"content":"     nsIPrincipalPtr = aPrincipal;"},{"type":"del","del":true,"ln":209,"content":"-    codebase = PL_strdup(aCodebase);"},{"type":"del","del":true,"ln":210,"content":"-    if (!codebase)"},{"type":"del","del":true,"ln":211,"content":"-        return NS_ERROR_OUT_OF_MEMORY;"},{"type":"add","add":true,"ln":210,"content":"+    nsStringBuffer* buf = nsStringBuffer::FromString(aCodebase);"},{"type":"add","add":true,"ln":211,"content":"+    char* data;"},{"type":"add","add":true,"ln":212,"content":"+    if (buf) {"},{"type":"add","add":true,"ln":213,"content":"+        buf->AddRef();"},{"type":"add","add":true,"ln":214,"content":"+        data = static_cast<char*>(buf->Data());"},{"type":"add","add":true,"ln":215,"content":"+    } else {"},{"type":"add","add":true,"ln":216,"content":"+        PRUint32 len = aCodebase.Length();"},{"type":"add","add":true,"ln":217,"content":"+        buf = nsStringBuffer::Alloc(len + 1); // addrefs"},{"type":"add","add":true,"ln":218,"content":"+        if (!buf) {"},{"type":"add","add":true,"ln":219,"content":"+            return NS_ERROR_OUT_OF_MEMORY;"},{"type":"add","add":true,"ln":220,"content":"+        }"},{"type":"add","add":true,"ln":221,"content":"+        data = static_cast<char*>(buf->Data());"},{"type":"add","add":true,"ln":222,"content":"+        memcpy(data, aCodebase.get(), len);"},{"type":"add","add":true,"ln":223,"content":"+        data[len] = '\\0';"},{"type":"add","add":true,"ln":224,"content":"+    }"},{"type":"add","add":true,"ln":225,"content":"+    "},{"type":"add","add":true,"ln":226,"content":"+    codebase = data;"},{"type":"normal","normal":true,"ln1":212,"ln2":227,"content":" "},{"type":"normal","normal":true,"ln1":213,"ln2":228,"content":"     return NS_OK;"},{"type":"normal","normal":true,"ln1":214,"ln2":229,"content":" }"},{"type":"normal","normal":true,"ln1":215,"ln2":230,"content":" "},{"type":"normal","normal":true,"ln1":216,"ln2":231,"content":" nsJSPrincipals::~nsJSPrincipals()"},{"type":"normal","normal":true,"ln1":217,"ln2":232,"content":" {"},{"type":"del","del":true,"ln":218,"content":"-    if (codebase)"},{"type":"del","del":true,"ln":219,"content":"-        PL_strfree(codebase);"},{"type":"add","add":true,"ln":233,"content":"+    if (codebase) {"},{"type":"add","add":true,"ln":234,"content":"+        nsStringBuffer::FromData(codebase)->Release();"},{"type":"add","add":true,"ln":235,"content":"+    }"},{"type":"normal","normal":true,"ln1":220,"ln2":236,"content":" }"}],"oldStart":206,"oldLines":15,"newStart":207,"newLines":30}],"deletions":6,"additions":22,"from":"caps/src/nsJSPrincipals.cpp","to":"caps/src/nsJSPrincipals.cpp","index":["efd471c..0180d9a","100644"]},{"chunks":[{"content":"@@ -90,6 +90,8 @@ nsNullPrincipal::~nsNullPrincipal()","changes":[{"type":"normal","normal":true,"ln1":90,"ln2":90,"content":" {"},{"type":"normal","normal":true,"ln1":91,"ln2":91,"content":" }"},{"type":"normal","normal":true,"ln1":92,"ln2":92,"content":" "},{"type":"add","add":true,"ln":93,"content":"+#define NS_NULLPRINCIPAL_PREFIX NS_NULLPRINCIPAL_SCHEME \":\""},{"type":"add","add":true,"ln":94,"content":"+"},{"type":"normal","normal":true,"ln1":93,"ln2":95,"content":" nsresult"},{"type":"normal","normal":true,"ln1":94,"ln2":96,"content":" nsNullPrincipal::Init()"},{"type":"normal","normal":true,"ln1":95,"ln2":97,"content":" {"}],"oldStart":90,"oldLines":6,"newStart":90,"newLines":8},{"content":"@@ -106,15 +108,21 @@ nsNullPrincipal::Init()","changes":[{"type":"normal","normal":true,"ln1":106,"ln2":108,"content":"   char* chars = id.ToString();"},{"type":"normal","normal":true,"ln1":107,"ln2":109,"content":"   NS_ENSURE_TRUE(chars, NS_ERROR_OUT_OF_MEMORY);"},{"type":"normal","normal":true,"ln1":108,"ln2":110,"content":" "},{"type":"del","del":true,"ln":109,"content":"-  nsCAutoString str(NS_NULLPRINCIPAL_SCHEME \":\");"},{"type":"del","del":true,"ln":110,"content":"-  PRUint32 prefixLen = str.Length();"},{"type":"normal","normal":true,"ln1":111,"ln2":111,"content":"   PRUint32 suffixLen = strlen(chars);"},{"type":"add","add":true,"ln":112,"content":"+  PRUint32 prefixLen = NS_ARRAY_LENGTH(NS_NULLPRINCIPAL_PREFIX) - 1;"},{"type":"add","add":true,"ln":113,"content":"+"},{"type":"add","add":true,"ln":114,"content":"+  // Use an nsCString so we only do the allocation once here and then share"},{"type":"add","add":true,"ln":115,"content":"+  // with nsJSPrincipals"},{"type":"add","add":true,"ln":116,"content":"+  nsCString str;"},{"type":"add","add":true,"ln":117,"content":"+  str.SetCapacity(prefixLen + suffixLen);"},{"type":"normal","normal":true,"ln1":112,"ln2":118,"content":" "},{"type":"add","add":true,"ln":119,"content":"+  str.Append(NS_NULLPRINCIPAL_PREFIX);"},{"type":"normal","normal":true,"ln1":113,"ln2":120,"content":"   str.Append(chars);"},{"type":"normal","normal":true,"ln1":114,"ln2":121,"content":" "},{"type":"normal","normal":true,"ln1":115,"ln2":122,"content":"   PR_Free(chars);"},{"type":"normal","normal":true,"ln1":116,"ln2":123,"content":"   "},{"type":"normal","normal":true,"ln1":117,"ln2":124,"content":"   if (str.Length() != prefixLen + suffixLen) {"},{"type":"add","add":true,"ln":125,"content":"+    NS_WARNING(\"Out of memory allocating null-principal URI\");"},{"type":"normal","normal":true,"ln1":118,"ln2":126,"content":"     return NS_ERROR_OUT_OF_MEMORY;"},{"type":"normal","normal":true,"ln1":119,"ln2":127,"content":"   }"},{"type":"normal","normal":true,"ln1":120,"ln2":128,"content":" "}],"oldStart":106,"oldLines":15,"newStart":108,"newLines":21},{"content":"@@ -129,7 +137,7 @@ nsNullPrincipal::Init()","changes":[{"type":"normal","normal":true,"ln1":129,"ln2":137,"content":" "},{"type":"normal","normal":true,"ln1":130,"ln2":138,"content":"   NS_TryToSetImmutable(mURI);"},{"type":"normal","normal":true,"ln1":131,"ln2":139,"content":" "},{"type":"del","del":true,"ln":132,"content":"-  return mJSPrincipals.Init(this, str.get());"},{"type":"add","add":true,"ln":140,"content":"+  return mJSPrincipals.Init(this, str);"},{"type":"normal","normal":true,"ln1":133,"ln2":141,"content":" }"},{"type":"normal","normal":true,"ln1":134,"ln2":142,"content":" "},{"type":"normal","normal":true,"ln1":135,"ln2":143,"content":" /**"}],"oldStart":129,"oldLines":7,"newStart":137,"newLines":7}],"deletions":3,"additions":11,"from":"caps/src/nsNullPrincipal.cpp","to":"caps/src/nsNullPrincipal.cpp","index":["6979582..f66f7d5","100644"]},{"chunks":[{"content":"@@ -103,7 +103,7 @@ nsPrincipal::Release()","changes":[{"type":"normal","normal":true,"ln1":103,"ln2":103,"content":" }"},{"type":"normal","normal":true,"ln1":104,"ln2":104,"content":" "},{"type":"normal","normal":true,"ln1":105,"ln2":105,"content":" nsPrincipal::nsPrincipal()"},{"type":"del","del":true,"ln":106,"content":"-  : mCapabilities(7),"},{"type":"add","add":true,"ln":106,"content":"+  : mCapabilities(nsnull),"},{"type":"normal","normal":true,"ln1":107,"ln2":107,"content":"     mSecurityPolicy(nsnull),"},{"type":"normal","normal":true,"ln1":108,"ln2":108,"content":"     mTrusted(PR_FALSE),"},{"type":"normal","normal":true,"ln1":109,"ln2":109,"content":"     mInitialized(PR_FALSE),"}],"oldStart":103,"oldLines":7,"newStart":103,"newLines":7},{"content":"@@ -134,14 +134,14 @@ nsPrincipal::Init(const nsACString& aCertFingerprint,","changes":[{"type":"normal","normal":true,"ln1":134,"ln2":134,"content":"   if (!aCertFingerprint.IsEmpty()) {"},{"type":"normal","normal":true,"ln1":135,"ln2":135,"content":"     rv = SetCertificate(aCertFingerprint, aSubjectName, aPrettyName, aCert);"},{"type":"normal","normal":true,"ln1":136,"ln2":136,"content":"     if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":137,"content":"-      rv = mJSPrincipals.Init(this, mCert->fingerprint.get());"},{"type":"add","add":true,"ln":137,"content":"+      rv = mJSPrincipals.Init(this, mCert->fingerprint);"},{"type":"normal","normal":true,"ln1":138,"ln2":138,"content":"     }"},{"type":"normal","normal":true,"ln1":139,"ln2":139,"content":"   }"},{"type":"normal","normal":true,"ln1":140,"ln2":140,"content":"   else {"},{"type":"normal","normal":true,"ln1":141,"ln2":141,"content":"     nsCAutoString spec;"},{"type":"normal","normal":true,"ln1":142,"ln2":142,"content":"     rv = mCodebase->GetSpec(spec);"},{"type":"normal","normal":true,"ln1":143,"ln2":143,"content":"     if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":144,"content":"-      rv = mJSPrincipals.Init(this, spec.get());"},{"type":"add","add":true,"ln":144,"content":"+      rv = mJSPrincipals.Init(this, spec);"},{"type":"normal","normal":true,"ln1":145,"ln2":145,"content":"     }"},{"type":"normal","normal":true,"ln1":146,"ln2":146,"content":"   }"},{"type":"normal","normal":true,"ln1":147,"ln2":147,"content":" "}],"oldStart":134,"oldLines":14,"newStart":134,"newLines":14},{"content":"@@ -153,6 +153,7 @@ nsPrincipal::Init(const nsACString& aCertFingerprint,","changes":[{"type":"normal","normal":true,"ln1":153,"ln2":153,"content":" nsPrincipal::~nsPrincipal(void)"},{"type":"normal","normal":true,"ln1":154,"ln2":154,"content":" {"},{"type":"normal","normal":true,"ln1":155,"ln2":155,"content":"   SetSecurityPolicy(nsnull); "},{"type":"add","add":true,"ln":156,"content":"+  delete mCapabilities;"},{"type":"normal","normal":true,"ln1":156,"ln2":157,"content":" }"},{"type":"normal","normal":true,"ln1":157,"ln2":158,"content":" "},{"type":"normal","normal":true,"ln1":158,"ln2":159,"content":" NS_IMETHODIMP"}],"oldStart":153,"oldLines":6,"newStart":153,"newLines":7},{"content":"@@ -309,11 +310,13 @@ NS_IMETHODIMP","changes":[{"type":"normal","normal":true,"ln1":309,"ln2":310,"content":" nsPrincipal::CanEnableCapability(const char *capability, PRInt16 *result)"},{"type":"normal","normal":true,"ln1":310,"ln2":311,"content":" {"},{"type":"normal","normal":true,"ln1":311,"ln2":312,"content":"   // If this principal is marked invalid, can't enable any capabilities"},{"type":"del","del":true,"ln":312,"content":"-  nsCStringKey invalidKey(sInvalid);"},{"type":"del","del":true,"ln":313,"content":"-  if (mCapabilities.Exists(&invalidKey)) {"},{"type":"del","del":true,"ln":314,"content":"-    *result = nsIPrincipal::ENABLE_DENIED;"},{"type":"add","add":true,"ln":313,"content":"+  if (mCapabilities) {"},{"type":"add","add":true,"ln":314,"content":"+    nsCStringKey invalidKey(sInvalid);"},{"type":"add","add":true,"ln":315,"content":"+    if (mCapabilities->Exists(&invalidKey)) {"},{"type":"add","add":true,"ln":316,"content":"+      *result = nsIPrincipal::ENABLE_DENIED;"},{"type":"normal","normal":true,"ln1":315,"ln2":317,"content":" "},{"type":"del","del":true,"ln":316,"content":"-    return NS_OK;"},{"type":"add","add":true,"ln":318,"content":"+      return NS_OK;"},{"type":"add","add":true,"ln":319,"content":"+    }"},{"type":"normal","normal":true,"ln1":317,"ln2":320,"content":"   }"},{"type":"normal","normal":true,"ln1":318,"ln2":321,"content":" "},{"type":"normal","normal":true,"ln1":319,"ln2":322,"content":"   if (!mCert && !mTrusted) {"}],"oldStart":309,"oldLines":11,"newStart":310,"newLines":13},{"content":"@@ -353,7 +356,8 @@ nsPrincipal::CanEnableCapability(const char *capability, PRInt16 *result)","changes":[{"type":"normal","normal":true,"ln1":353,"ln2":356,"content":"     PRInt32 len = space ? space - start : strlen(start);"},{"type":"normal","normal":true,"ln1":354,"ln2":357,"content":"     nsCAutoString capString(start, len);"},{"type":"normal","normal":true,"ln1":355,"ln2":358,"content":"     nsCStringKey key(capString);"},{"type":"del","del":true,"ln":356,"content":"-    PRInt16 value = (PRInt16)NS_PTR_TO_INT32(mCapabilities.Get(&key));"},{"type":"add","add":true,"ln":359,"content":"+    PRInt16 value ="},{"type":"add","add":true,"ln":360,"content":"+      mCapabilities ? (PRInt16)NS_PTR_TO_INT32(mCapabilities->Get(&key)) : 0;"},{"type":"normal","normal":true,"ln1":357,"ln2":361,"content":"     if (value == 0 || value == nsIPrincipal::ENABLE_UNKNOWN) {"},{"type":"normal","normal":true,"ln1":358,"ln2":362,"content":"       // We don't know whether we can enable this capability,"},{"type":"normal","normal":true,"ln1":359,"ln2":363,"content":"       // so we should ask the user."}],"oldStart":353,"oldLines":7,"newStart":356,"newLines":8},{"content":"@@ -379,14 +383,18 @@ nsPrincipal::SetCanEnableCapability(const char *capability,","changes":[{"type":"normal","normal":true,"ln1":379,"ln2":383,"content":"                                     PRInt16 canEnable)"},{"type":"normal","normal":true,"ln1":380,"ln2":384,"content":" {"},{"type":"normal","normal":true,"ln1":381,"ln2":385,"content":"   // If this principal is marked invalid, can't enable any capabilities"},{"type":"add","add":true,"ln":386,"content":"+  if (!mCapabilities) {"},{"type":"add","add":true,"ln":387,"content":"+    mCapabilities = new nsHashtable(7);  // XXXbz gets bumped up to 16 anyway"},{"type":"add","add":true,"ln":388,"content":"+    NS_ENSURE_TRUE(mCapabilities, NS_ERROR_OUT_OF_MEMORY);"},{"type":"add","add":true,"ln":389,"content":"+  }"},{"type":"normal","normal":true,"ln1":382,"ln2":390,"content":" "},{"type":"normal","normal":true,"ln1":383,"ln2":391,"content":"   nsCStringKey invalidKey(sInvalid);"},{"type":"del","del":true,"ln":384,"content":"-  if (mCapabilities.Exists(&invalidKey)) {"},{"type":"add","add":true,"ln":392,"content":"+  if (mCapabilities->Exists(&invalidKey)) {"},{"type":"normal","normal":true,"ln1":385,"ln2":393,"content":"     return NS_OK;"},{"type":"normal","normal":true,"ln1":386,"ln2":394,"content":"   }"},{"type":"normal","normal":true,"ln1":387,"ln2":395,"content":" "},{"type":"normal","normal":true,"ln1":388,"ln2":396,"content":"   if (PL_strcmp(capability, sInvalid) == 0) {"},{"type":"del","del":true,"ln":389,"content":"-    mCapabilities.Reset();"},{"type":"add","add":true,"ln":397,"content":"+    mCapabilities->Reset();"},{"type":"normal","normal":true,"ln1":390,"ln2":398,"content":"   }"},{"type":"normal","normal":true,"ln1":391,"ln2":399,"content":" "},{"type":"normal","normal":true,"ln1":392,"ln2":400,"content":"   const char *start = capability;"}],"oldStart":379,"oldLines":14,"newStart":383,"newLines":18},{"content":"@@ -395,7 +403,7 @@ nsPrincipal::SetCanEnableCapability(const char *capability,","changes":[{"type":"normal","normal":true,"ln1":395,"ln2":403,"content":"     int len = space ? space - start : strlen(start);"},{"type":"normal","normal":true,"ln1":396,"ln2":404,"content":"     nsCAutoString capString(start, len);"},{"type":"normal","normal":true,"ln1":397,"ln2":405,"content":"     nsCStringKey key(capString);"},{"type":"del","del":true,"ln":398,"content":"-    mCapabilities.Put(&key, NS_INT32_TO_PTR(canEnable));"},{"type":"add","add":true,"ln":406,"content":"+    mCapabilities->Put(&key, NS_INT32_TO_PTR(canEnable));"},{"type":"normal","normal":true,"ln1":399,"ln2":407,"content":"     if (!space) {"},{"type":"normal","normal":true,"ln1":400,"ln2":408,"content":"       break;"},{"type":"normal","normal":true,"ln1":401,"ln2":409,"content":"     }"}],"oldStart":395,"oldLines":7,"newStart":403,"newLines":7},{"content":"@@ -667,7 +675,7 @@ nsPrincipal::InitFromPersistent(const char* aPrefName,","changes":[{"type":"normal","normal":true,"ln1":667,"ln2":675,"content":"                                 PRBool aIsCert,"},{"type":"normal","normal":true,"ln1":668,"ln2":676,"content":"                                 PRBool aTrusted)"},{"type":"normal","normal":true,"ln1":669,"ln2":677,"content":" {"},{"type":"del","del":true,"ln":670,"content":"-  NS_PRECONDITION(mCapabilities.Count() == 0,"},{"type":"add","add":true,"ln":678,"content":"+  NS_PRECONDITION(!mCapabilities || mCapabilities->Count() == 0,"},{"type":"normal","normal":true,"ln1":671,"ln2":679,"content":"                   \"mCapabilities was already initialized?\");"},{"type":"normal","normal":true,"ln1":672,"ln2":680,"content":"   NS_PRECONDITION(mAnnotations.Length() == 0,"},{"type":"normal","normal":true,"ln1":673,"ln2":681,"content":"                   \"mAnnotations was already initialized?\");"}],"oldStart":667,"oldLines":7,"newStart":675,"newLines":7},{"content":"@@ -699,7 +707,7 @@ nsPrincipal::InitFromPersistent(const char* aPrefName,","changes":[{"type":"normal","normal":true,"ln1":699,"ln2":707,"content":"     mOrigin = nsnull;"},{"type":"normal","normal":true,"ln1":700,"ln2":708,"content":"   }"},{"type":"normal","normal":true,"ln1":701,"ln2":709,"content":" "},{"type":"del","del":true,"ln":702,"content":"-  rv = mJSPrincipals.Init(this, aToken.get());"},{"type":"add","add":true,"ln":710,"content":"+  rv = mJSPrincipals.Init(this, aToken);"},{"type":"normal","normal":true,"ln1":703,"ln2":711,"content":"   NS_ENSURE_SUCCESS(rv, rv);"},{"type":"normal","normal":true,"ln1":704,"ln2":712,"content":" "},{"type":"normal","normal":true,"ln1":705,"ln2":713,"content":"   //-- Save the preference name"}],"oldStart":699,"oldLines":7,"newStart":707,"newLines":7},{"content":"@@ -836,10 +844,12 @@ nsPrincipal::GetPreferences(char** aPrefName, char** aID,","changes":[{"type":"normal","normal":true,"ln1":836,"ln2":844,"content":" "},{"type":"normal","normal":true,"ln1":837,"ln2":845,"content":"   //-- Capabilities"},{"type":"normal","normal":true,"ln1":838,"ln2":846,"content":"   nsCAutoString grantedListStr, deniedListStr;"},{"type":"del","del":true,"ln":839,"content":"-  CapabilityList capList = CapabilityList();"},{"type":"del","del":true,"ln":840,"content":"-  capList.granted = &grantedListStr;"},{"type":"del","del":true,"ln":841,"content":"-  capList.denied = &deniedListStr;"},{"type":"del","del":true,"ln":842,"content":"-  mCapabilities.Enumerate(AppendCapability, (void*)&capList);"},{"type":"add","add":true,"ln":847,"content":"+  if (mCapabilities) {"},{"type":"add","add":true,"ln":848,"content":"+    CapabilityList capList = CapabilityList();"},{"type":"add","add":true,"ln":849,"content":"+    capList.granted = &grantedListStr;"},{"type":"add","add":true,"ln":850,"content":"+    capList.denied = &deniedListStr;"},{"type":"add","add":true,"ln":851,"content":"+    mCapabilities->Enumerate(AppendCapability, (void*)&capList);"},{"type":"add","add":true,"ln":852,"content":"+  }"},{"type":"normal","normal":true,"ln1":843,"ln2":853,"content":" "},{"type":"normal","normal":true,"ln1":844,"ln2":854,"content":"   if (!grantedListStr.IsEmpty()) {"},{"type":"normal","normal":true,"ln1":845,"ln2":855,"content":"     grantedListStr.Truncate(grantedListStr.Length() - 1);"}],"oldStart":836,"oldLines":10,"newStart":844,"newLines":12},{"content":"@@ -910,12 +920,9 @@ nsPrincipal::Read(nsIObjectInputStream* aStream)","changes":[{"type":"normal","normal":true,"ln1":910,"ln2":920,"content":"   PRBool hasCapabilities;"},{"type":"normal","normal":true,"ln1":911,"ln2":921,"content":"   nsresult rv = aStream->ReadBoolean(&hasCapabilities);"},{"type":"normal","normal":true,"ln1":912,"ln2":922,"content":"   if (NS_SUCCEEDED(rv) && hasCapabilities) {"},{"type":"del","del":true,"ln":913,"content":"-    // We want to use one of the nsHashtable constructors, but don't want to"},{"type":"del","del":true,"ln":914,"content":"-    // generally have mCapabilities be a pointer... and nsHashtable has no"},{"type":"del","del":true,"ln":915,"content":"-    // reasonable copy-constructor.  Placement-new to the rescue!"},{"type":"del","del":true,"ln":916,"content":"-    mCapabilities.~nsHashtable();"},{"type":"del","del":true,"ln":917,"content":"-    new (&mCapabilities) nsHashtable(aStream, ReadAnnotationEntry,"},{"type":"del","del":true,"ln":918,"content":"-                                     FreeAnnotationEntry, &rv);"},{"type":"add","add":true,"ln":923,"content":"+    mCapabilities = new nsHashtable(aStream, ReadAnnotationEntry,"},{"type":"add","add":true,"ln":924,"content":"+                                    FreeAnnotationEntry, &rv);"},{"type":"add","add":true,"ln":925,"content":"+    NS_ENSURE_TRUE(mCapabilities, NS_ERROR_OUT_OF_MEMORY);"},{"type":"normal","normal":true,"ln1":919,"ln2":926,"content":"   }"},{"type":"normal","normal":true,"ln1":920,"ln2":927,"content":" "},{"type":"normal","normal":true,"ln1":921,"ln2":928,"content":"   if (NS_FAILED(rv)) {"}],"oldStart":910,"oldLines":12,"newStart":920,"newLines":9},{"content":"@@ -1008,10 +1015,10 @@ nsPrincipal::Write(nsIObjectOutputStream* aStream)","changes":[{"type":"normal","normal":true,"ln1":1008,"ln2":1015,"content":"   // mAnnotations is transient data associated to specific JS stack frames.  We"},{"type":"normal","normal":true,"ln1":1009,"ln2":1016,"content":"   // don't want to serialize that."},{"type":"normal","normal":true,"ln1":1010,"ln2":1017,"content":"   "},{"type":"del","del":true,"ln":1011,"content":"-  PRBool hasCapabilities = (mCapabilities.Count() > 0);"},{"type":"add","add":true,"ln":1018,"content":"+  PRBool hasCapabilities = (mCapabilities && mCapabilities->Count() > 0);"},{"type":"normal","normal":true,"ln1":1012,"ln2":1019,"content":"   nsresult rv = aStream->WriteBoolean(hasCapabilities);"},{"type":"normal","normal":true,"ln1":1013,"ln2":1020,"content":"   if (NS_SUCCEEDED(rv) && hasCapabilities) {"},{"type":"del","del":true,"ln":1014,"content":"-    rv = mCapabilities.Write(aStream, WriteScalarValue);"},{"type":"add","add":true,"ln":1021,"content":"+    rv = mCapabilities->Write(aStream, WriteScalarValue);"},{"type":"normal","normal":true,"ln1":1015,"ln2":1022,"content":"   }"},{"type":"normal","normal":true,"ln1":1016,"ln2":1023,"content":" "},{"type":"normal","normal":true,"ln1":1017,"ln2":1024,"content":"   if (NS_FAILED(rv)) {"}],"oldStart":1008,"oldLines":10,"newStart":1015,"newLines":10}],"deletions":25,"additions":32,"from":"caps/src/nsPrincipal.cpp","to":"caps/src/nsPrincipal.cpp","index":["05b68c5..f279eff","100755"]},{"chunks":[{"content":"@@ -280,10 +280,20 @@ nsSystemPrincipal::nsSystemPrincipal()","changes":[{"type":"normal","normal":true,"ln1":280,"ln2":280,"content":" {"},{"type":"normal","normal":true,"ln1":281,"ln2":281,"content":" }"},{"type":"normal","normal":true,"ln1":282,"ln2":282,"content":" "},{"type":"add","add":true,"ln":283,"content":"+#define SYSTEM_PRINCIPAL_SPEC \"[System Principal]\""},{"type":"add","add":true,"ln":284,"content":"+"},{"type":"normal","normal":true,"ln1":283,"ln2":285,"content":" nsresult"},{"type":"normal","normal":true,"ln1":284,"ln2":286,"content":" nsSystemPrincipal::Init()"},{"type":"normal","normal":true,"ln1":285,"ln2":287,"content":" {"},{"type":"del","del":true,"ln":286,"content":"-    return mJSPrincipals.Init(this, \"[System Principal]\"); "},{"type":"add","add":true,"ln":288,"content":"+    // Use an nsCString so we only do the allocation once here and then"},{"type":"add","add":true,"ln":289,"content":"+    // share with nsJSPrincipals"},{"type":"add","add":true,"ln":290,"content":"+    nsCString str(SYSTEM_PRINCIPAL_SPEC);"},{"type":"add","add":true,"ln":291,"content":"+    if (!str.EqualsLiteral(SYSTEM_PRINCIPAL_SPEC)) {"},{"type":"add","add":true,"ln":292,"content":"+        NS_WARNING(\"Out of memory initializing system principal\");"},{"type":"add","add":true,"ln":293,"content":"+        return NS_ERROR_OUT_OF_MEMORY;"},{"type":"add","add":true,"ln":294,"content":"+    }"},{"type":"add","add":true,"ln":295,"content":"+    "},{"type":"add","add":true,"ln":296,"content":"+    return mJSPrincipals.Init(this, str);"},{"type":"normal","normal":true,"ln1":287,"ln2":297,"content":" }"},{"type":"normal","normal":true,"ln1":288,"ln2":298,"content":" "},{"type":"normal","normal":true,"ln1":289,"ln2":299,"content":" nsSystemPrincipal::~nsSystemPrincipal(void)"}],"oldStart":280,"oldLines":10,"newStart":280,"newLines":20}],"deletions":1,"additions":11,"from":"caps/src/nsSystemPrincipal.cpp","to":"caps/src/nsSystemPrincipal.cpp","index":["47bbfb1..e384742","100644"]}]}