# HG changeset patch
# User Mike Hommey <mh+mozilla@glandium.org>
# Date 1360275999 -3600
# Node ID abfaf72f901aecab6477bbf4bb61892724aaeebb
# Parent  07b997774e05866e2858cdccac3328e65618c3e4
Bug 648407 - Support loading the folded library on Android

diff --git a/mozglue/android/APKOpen.cpp b/mozglue/android/APKOpen.cpp
--- a/mozglue/android/APKOpen.cpp
+++ b/mozglue/android/APKOpen.cpp
@@ -312,20 +312,26 @@ SHELL_WRAPPER7(notifyGotNextMessage, jin
 SHELL_WRAPPER2(notifyReadingMessageListFailed, jint, jint)
 SHELL_WRAPPER2(notifyFilePickerResult, jstring, jlong)
 SHELL_WRAPPER1_WITH_RETURN(getSurfaceBits, jobject, jobject)
 SHELL_WRAPPER1(onFullScreenPluginHidden, jobject)
 SHELL_WRAPPER1_WITH_RETURN(getNextMessageFromQueue, jobject, jobject)
 SHELL_WRAPPER2(onSurfaceTextureFrameAvailable, jobject, jint)
 
 static void * xul_handle = NULL;
+#ifndef MOZ_FOLD_LIBS
 static void * sqlite_handle = NULL;
-static void * nss_handle = NULL;
 static void * nspr_handle = NULL;
 static void * plc_handle = NULL;
+#else
+#define sqlite_handle nss_handle
+#define nspr_handle nss_handle
+#define plc_handle nss_handle
+#endif
+static void * nss_handle = NULL;
 
 template <typename T> inline void
 xul_dlsym(const char *symbolName, T *value)
 {
   *value = (T) (uintptr_t) __wrap_dlsym(xul_handle, symbolName);
 }
 
 #if defined(MOZ_CRASHREPORTER)
@@ -500,18 +506,28 @@ loadGeckoLibs(const char *apkName)
                       (usage2.ru_stime.tv_sec - usage1.ru_stime.tv_sec)*1000 + (usage2.ru_stime.tv_usec - usage1.ru_stime.tv_usec)/1000,
                       usage2.ru_majflt-usage1.ru_majflt);
 
   XRE_StartupTimelineRecord(LINKER_INITIALIZED, t0);
   XRE_StartupTimelineRecord(LIBRARIES_LOADED, t1);
   return SUCCESS;
 }
 
-static int loadSQLiteLibs(const char *apkName)
+static mozglueresult loadNSSLibs(const char *apkName);
+
+static mozglueresult
+loadSQLiteLibs(const char *apkName)
 {
+  if (sqlite_handle)
+    return SUCCESS;
+
+#ifdef MOZ_FOLD_LIBS
+  if (loadNSSLibs(apkName) != SUCCESS)
+    return FAILURE;
+#else
   chdir(getenv("GRE_HOME"));
 
   RefPtr<Zip> zip = new Zip(apkName);
   if (!lib_mapping) {
     lib_mapping = (struct mapping_info *)calloc(MAX_MAPPING_INFO, sizeof(*lib_mapping));
   }
 
 #ifdef MOZ_CRASHREPORTER
@@ -527,69 +543,77 @@ static int loadSQLiteLibs(const char *ap
   free(file_ids);
   file_ids = NULL;
 #endif
 
   if (!sqlite_handle) {
     __android_log_print(ANDROID_LOG_ERROR, "GeckoLibLoad", "Couldn't get a handle to libmozsqlite3!");
     return FAILURE;
   }
+#endif
 
   setup_sqlite_functions(sqlite_handle);
   return SUCCESS;
 }
 
 static mozglueresult
 loadNSSLibs(const char *apkName)
 {
+  if (nss_handle && nspr_handle && plc_handle)
+    return SUCCESS;
+
   chdir(getenv("GRE_HOME"));
 
   RefPtr<Zip> zip = new Zip(apkName);
   if (!lib_mapping) {
     lib_mapping = (struct mapping_info *)calloc(MAX_MAPPING_INFO, sizeof(*lib_mapping));
   }
 
 #ifdef MOZ_CRASHREPORTER
   file_ids = (char *)extractBuf("lib.id", zip);
 #endif
 
   char *file = new char[strlen(apkName) + sizeof("!/libnss3.so")];
   sprintf(file, "%s!/libnss3.so", apkName);
   nss_handle = __wrap_dlopen(file, RTLD_GLOBAL | RTLD_LAZY);
   delete [] file;
 
+#ifndef MOZ_FOLD_LIBS
   file = new char[strlen(apkName) + sizeof("!/libnspr4.so")];
   sprintf(file, "%s!/libnspr4.so", apkName);
   nspr_handle = __wrap_dlopen(file, RTLD_GLOBAL | RTLD_LAZY);
   delete [] file;
 
   file = new char[strlen(apkName) + sizeof("!/libplc4.so")];
   sprintf(file, "%s!/libplc4.so", apkName);
   plc_handle = __wrap_dlopen(file, RTLD_GLOBAL | RTLD_LAZY);
   delete [] file;
+#endif
 
 #ifdef MOZ_CRASHREPORTER
   free(file_ids);
   file_ids = NULL;
 #endif
 
   if (!nss_handle) {
     __android_log_print(ANDROID_LOG_ERROR, "GeckoLibLoad", "Couldn't get a handle to libnss3!");
     return FAILURE;
   }
 
+#ifndef MOZ_FOLD_LIBS
   if (!nspr_handle) {
     __android_log_print(ANDROID_LOG_ERROR, "GeckoLibLoad", "Couldn't get a handle to libnspr4!");
     return FAILURE;
   }
 
   if (!plc_handle) {
     __android_log_print(ANDROID_LOG_ERROR, "GeckoLibLoad", "Couldn't get a handle to libplc4!");
     return FAILURE;
   }
+#endif
 
   return setup_nss_functions(nss_handle, nspr_handle, plc_handle);
 }
 
 extern "C" NS_EXPORT void JNICALL
 Java_org_mozilla_gecko_GeckoAppShell_loadGeckoLibsNative(JNIEnv *jenv, jclass jGeckoAppShellClass, jstring jApkName)
 {
   const char* str;
diff --git a/mozglue/android/Makefile.in b/mozglue/android/Makefile.in
--- a/mozglue/android/Makefile.in
+++ b/mozglue/android/Makefile.in
@@ -14,16 +14,20 @@ LIBRARY_NAME     = android
 FORCE_STATIC_LIB = 1
 STL_FLAGS=
 FAIL_ON_WARNINGS := 1
 
 DEFINES += \
   -DANDROID_PACKAGE_NAME='"$(ANDROID_PACKAGE_NAME)"' \
   $(NULL)
 
+ifdef MOZ_FOLD_LIBS
+DEFINES += -DMOZ_FOLD_LIBS
+endif
+
 CPPSRCS = \
   nsGeckoUtils.cpp \
   APKOpen.cpp \
   SQLiteBridge.cpp \
 	NSSBridge.cpp \
   $(NULL)
 
 LOCAL_INCLUDES += -I$(DEPTH)/build
