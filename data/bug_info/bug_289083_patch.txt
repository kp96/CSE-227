Index: caps/include/nsScriptSecurityManager.h
===================================================================
RCS file: /cvsroot/mozilla/caps/include/nsScriptSecurityManager.h,v
retrieving revision 1.78.20.2
diff -u -9 -p -r1.78.20.2 nsScriptSecurityManager.h
--- caps/include/nsScriptSecurityManager.h	24 Oct 2004 12:04:33 -0000	1.78.20.2
+++ caps/include/nsScriptSecurityManager.h	6 Apr 2005 08:03:48 -0000
@@ -412,19 +412,19 @@ private:
     GetSubjectPrincipal(JSContext* cx, nsIPrincipal** result);
 
     nsresult
     GetFramePrincipal(JSContext* cx, JSStackFrame* fp, nsIPrincipal** result);
                                                      
     nsresult
     GetScriptPrincipal(JSContext* cx, JSScript* script, nsIPrincipal** result);
 
     nsresult
-    GetFunctionObjectPrincipal(JSContext* cx, JSObject* obj, 
+    GetFunctionObjectPrincipal(JSContext* cx, JSObject* obj, JSStackFrame *fp,
                                nsIPrincipal** result);
 
     nsresult
     GetPrincipalAndFrame(JSContext *cx,
                          nsIPrincipal** result,
                          JSStackFrame** frameResult);
 
     static PRBool
     CheckConfirmDialog(JSContext* cx, nsIPrincipal* aPrincipal,
Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.229.6.6.2.1
diff -u -9 -p -r1.229.6.6.2.1 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	4 Apr 2005 20:32:20 -0000	1.229.6.6.2.1
+++ caps/src/nsScriptSecurityManager.cpp	6 Apr 2005 08:03:49 -0000
@@ -1386,19 +1386,19 @@ nsScriptSecurityManager::CheckLoadURIStr
     return CheckLoadURI(source, target, aFlags);
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::CheckFunctionAccess(JSContext *aCx, void *aFunObj,
                                              void *aTargetObj)
 {
     //-- This check is called for event handlers
     nsCOMPtr<nsIPrincipal> subject;
-    nsresult rv = GetFunctionObjectPrincipal(aCx, (JSObject *)aFunObj,
+    nsresult rv = GetFunctionObjectPrincipal(aCx, (JSObject *)aFunObj, nsnull,
                                              getter_AddRefs(subject));
     //-- If subject is null, get a principal from the function object's scope.
     if (NS_SUCCEEDED(rv) && !subject)
     {
 #ifdef DEBUG
         {
             JSFunction *fun =
                 (JSFunction *)JS_GetPrivate(aCx, (JSObject *)aFunObj);
             JSScript *script = JS_GetFunctionScript(aCx, fun);
@@ -1787,39 +1787,62 @@ nsScriptSecurityManager::GetScriptPrinci
         return NS_ERROR_FAILURE;
     NS_ADDREF(*result);
     return NS_OK;
 
 }
 
 nsresult
 nsScriptSecurityManager::GetFunctionObjectPrincipal(JSContext *cx,
                                                     JSObject *obj,
+                                                    JSStackFrame *fp,
                                                     nsIPrincipal **result)
 {
     JSFunction *fun = (JSFunction *) JS_GetPrivate(cx, obj);
-    JSScript *script = JS_GetFunctionScript(cx, fun);
+    JSScript *funScript = JS_GetFunctionScript(cx, fun);
 
     nsCOMPtr<nsIPrincipal> scriptPrincipal;
-    if (script)
+    if (funScript)
     {
-        if (JS_GetFunctionObject(fun) != obj)
+        JSScript *frameScript = nsnull;
+
+        if (fp) {
+            frameScript = JS_GetFrameScript(cx, fp);
+        }
+
+        nsresult rv;
+        if (frameScript && frameScript != funScript) {
+            // There is a frame script, and it's different than the
+            // function script. In this case we're dealing with either
+            // an eval() or a JS created script object, and in those
+            // cases the principal we want is in the frames script,
+            // not in the functions script. The functions script is
+            // where the code is compiled, not where the code came
+            // from, and we want the principal for where the code came
+            // from.
+            rv = GetScriptPrincipal(cx, frameScript,
+                                    getter_AddRefs(scriptPrincipal));
+        }
+        else if (JS_GetFunctionObject(fun) != obj)
         {
             // Function is a clone, its prototype was precompiled from
             // brutally shared chrome. For this case only, get the
             // principals from the clone's scope since there's no
             // reliable principals compiled into the function.
             return doGetObjectPrincipal(cx, obj, result);
         }
+        else
+        {
+            rv = GetScriptPrincipal(cx, funScript,
+                                    getter_AddRefs(scriptPrincipal));
+        }
 
-        if (NS_FAILED(GetScriptPrincipal(cx, script,
-                                         getter_AddRefs(scriptPrincipal))))
+        if (NS_FAILED(rv))
             return NS_ERROR_FAILURE;
-
     }
 
     NS_IF_ADDREF(*result = scriptPrincipal);
 
     return NS_OK;
 }
 
 nsresult
 nsScriptSecurityManager::GetFramePrincipal(JSContext *cx,
@@ -1828,19 +1851,19 @@ nsScriptSecurityManager::GetFramePrincip
 {
     JSObject *obj = JS_GetFrameFunctionObject(cx, fp);
     if (!obj)
     {
         // Must be in a top-level script. Get principal from the script.
         JSScript *script = JS_GetFrameScript(cx, fp);
         return GetScriptPrincipal(cx, script, result);
     }
 
-    nsresult rv = GetFunctionObjectPrincipal(cx, obj, result);
+    nsresult rv = GetFunctionObjectPrincipal(cx, obj, fp, result);
 
 #ifdef DEBUG
     if (NS_SUCCEEDED(rv) && !*result)
     {
         JSFunction *fun = (JSFunction *)JS_GetPrivate(cx, obj);
         JSScript *script = JS_GetFunctionScript(cx, fun);
 
         NS_ASSERTION(!script, "Null principal for non-native function!");
     }
