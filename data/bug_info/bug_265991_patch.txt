Index: mozilla/security/manager/ssl/src/nsPKCS12Blob.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsPKCS12Blob.cpp,v
retrieving revision 1.42
diff -u -p -r1.42 nsPKCS12Blob.cpp
--- mozilla/security/manager/ssl/src/nsPKCS12Blob.cpp	5 Nov 2004 15:23:35 -0000	1.42
+++ mozilla/security/manager/ssl/src/nsPKCS12Blob.cpp	10 Nov 2005 09:57:47 -0000
@@ -151,18 +151,25 @@ nsPKCS12Blob::ImportFromFile(nsILocalFil
   rv = mToken->Login(PR_TRUE);
   if (NS_FAILED(rv)) return rv;
   
-  int wantRetry;
+  RetryReason wantRetry;
   
   do {
-    rv = ImportFromFileHelper(file, wantRetry);
+    rv = ImportFromFileHelper(file, im_standard_prompt, wantRetry);
+    
+    if (NS_SUCCEEDED(rv) && wantRetry == rr_auto_retry_empty_password_flavors)
+    {
+      rv = ImportFromFileHelper(file, im_try_zero_length_secitem, wantRetry);
+    }
   }
-  while (NS_SUCCEEDED(rv) && wantRetry);
+  while (NS_SUCCEEDED(rv) && (wantRetry != rr_do_not_retry));
   
   return rv;
 }
 
 nsresult
-nsPKCS12Blob::ImportFromFileHelper(nsILocalFile *file, PRBool &aWantRetry)
+nsPKCS12Blob::ImportFromFileHelper(nsILocalFile *file, 
+                                   nsPKCS12Blob::ImportMode aImportMode,
+                                   nsPKCS12Blob::RetryReason &aWantRetry)
 {
   nsNSSShutDownPreventionLock locker;
   nsresult rv;
@@ -172,18 +179,25 @@ nsPKCS12Blob::ImportFromFileHelper(nsILo
 
   PK11SlotInfo *slot=nsnull;
   nsXPIDLString tokenName;
+  unicodePw.data = NULL;
   
-  aWantRetry = PR_FALSE;
+  aWantRetry = rr_do_not_retry;
 
-  // get file password (unicode)
-  unicodePw.data = NULL;
-  rv = getPKCS12FilePassword(&unicodePw);
-  if (NS_FAILED(rv)) goto finish;
-  if (unicodePw.data == NULL) {
-    handleError(PIP_PKCS12_USER_CANCELED);
-    return NS_OK;
+  if (aImportMode == im_try_zero_length_secitem)
+  {
+    unicodePw.len = 0;
   }
-
+  else
+  {
+    // get file password (unicode)
+    rv = getPKCS12FilePassword(&unicodePw);
+    if (NS_FAILED(rv)) goto finish;
+    if (unicodePw.data == NULL) {
+      handleError(PIP_PKCS12_USER_CANCELED);
+      return NS_OK;
+    }
+  }
+  
   mToken->GetTokenName(getter_Copies(tokenName));
   {
     NS_ConvertUTF16toUTF8 tokenNameCString(tokenName);
@@ -229,9 +243,22 @@ finish:
   // for every error possible.
   if (srv != SECSuccess) {
     if (SEC_ERROR_BAD_PASSWORD == PORT_GetError()) {
-      aWantRetry = PR_TRUE;
+      if (unicodePw.len == sizeof(PRUnichar))
+      {
+        // no password chars available, 
+        // unicodeToItem allocated space for the trailing zero character only.
+        aWantRetry = rr_auto_retry_empty_password_flavors;
+      }
+      else
+      {
+        aWantRetry = rr_bad_password;
+        handleError(PIP_PKCS12_NSS_ERROR);
+      }
+    }
+    else
+    {
+      handleError(PIP_PKCS12_NSS_ERROR);
     }
-    handleError(PIP_PKCS12_NSS_ERROR);
   } else if (NS_FAILED(rv)) { 
     handleError(PIP_PKCS12_RESTORE_FAILED);
   }
Index: mozilla/security/manager/ssl/src/nsPKCS12Blob.h
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsPKCS12Blob.h,v
retrieving revision 1.13
diff -u -p -r1.13 nsPKCS12Blob.h
--- mozilla/security/manager/ssl/src/nsPKCS12Blob.h	27 Apr 2004 23:04:34 -0000	1.13
+++ mozilla/security/manager/ssl/src/nsPKCS12Blob.h	10 Nov 2005 09:57:48 -0000
@@ -91,7 +91,23 @@ private:
   nsresult inputToDecoder(SEC_PKCS12DecoderContext *, nsILocalFile *);
   void unicodeToItem(const PRUnichar *, SECItem *);
   PRBool handleError(int myerr = 0);
-  nsresult ImportFromFileHelper(nsILocalFile *file, PRBool &aWantRetry);
+
+  // RetryReason and ImportMode are used when importing a PKCS12 file.
+  // There are two reasons that cause us to retry:
+  // - When the password entered by the user is incorrect.
+  //   The user will be prompted to try again.
+  // - When the user entered a zero length password.
+  //   An empty password should be represented as an empty
+  //   string (a SECItem that contains a single terminating
+  //   NULL UTF16 character), but some applications use a
+  //   zero length SECItem.
+  //   We try both variations, zero length item and empty string,
+  //   without giving a user prompt when trying the different empty password flavors.
+  
+  enum RetryReason { rr_do_not_retry, rr_bad_password, rr_auto_retry_empty_password_flavors };
+  enum ImportMode { im_standard_prompt, im_try_zero_length_secitem };
+  
+  nsresult ImportFromFileHelper(nsILocalFile *file, ImportMode aImportMode, RetryReason &aWantRetry);
 
   // NSPR file I/O for temporary digest file
   PRFileDesc *mTmpFile;
