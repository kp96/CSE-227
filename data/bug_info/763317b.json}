{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas763317b\""},"diff":[{"chunks":[{"content":"@@ -1824,29 +1824,10 @@ NS_IMETHODIMP nsHTMLEditor::Paste(PRInt32 aSelectionType)","changes":[{"type":"normal","normal":true,"ln1":1824,"ln2":1824,"content":" {"},{"type":"normal","normal":true,"ln1":1825,"ln2":1825,"content":"   ForceCompositionEnd();"},{"type":"normal","normal":true,"ln1":1826,"ln2":1826,"content":" "},{"type":"del","del":true,"ln":1827,"content":"-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"del","del":true,"ln":1828,"content":"-  if (!ps)"},{"type":"del","del":true,"ln":1829,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":1830,"content":"-"},{"type":"del","del":true,"ln":1831,"content":"-  // Fire the paste event."},{"type":"del","del":true,"ln":1832,"content":"-  nsCOMPtr<nsIDOMNode> eventTarget;"},{"type":"del","del":true,"ln":1833,"content":"-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));"},{"type":"del","del":true,"ln":1834,"content":"-  // On failure to get event target, just forget about it and don't fire."},{"type":"del","del":true,"ln":1835,"content":"-  if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":1836,"content":"-    nsEventStatus status = nsEventStatus_eIgnore;"},{"type":"del","del":true,"ln":1837,"content":"-    nsEvent evt(PR_TRUE, NS_PASTE);"},{"type":"del","del":true,"ln":1838,"content":"-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,"},{"type":"del","del":true,"ln":1839,"content":"-                                nsnull, &status);"},{"type":"del","del":true,"ln":1840,"content":"-    // if event handler return'd false (PreventDefault)"},{"type":"del","del":true,"ln":1841,"content":"-    if (status == nsEventStatus_eConsumeNoDefault)"},{"type":"del","del":true,"ln":1842,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":1843,"content":"-"},{"type":"del","del":true,"ln":1844,"content":"-    // Did the event handler cause the editor to be destroyed?"},{"type":"del","del":true,"ln":1845,"content":"-    // (ie. the input element was removed from the document)"},{"type":"del","del":true,"ln":1846,"content":"-    // Don't proceed with paste."},{"type":"del","del":true,"ln":1847,"content":"-    if (mDidPreDestroy)"},{"type":"del","del":true,"ln":1848,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":1849,"content":"-  }"},{"type":"add","add":true,"ln":1827,"content":"+  PRBool preventDefault;"},{"type":"add","add":true,"ln":1828,"content":"+  nsresult rv = FireClipboardEvent(NS_PASTE, &preventDefault);"},{"type":"add","add":true,"ln":1829,"content":"+  if (NS_FAILED(rv) || preventDefault)"},{"type":"add","add":true,"ln":1830,"content":"+    return rv;"},{"type":"normal","normal":true,"ln1":1850,"ln2":1831,"content":" "},{"type":"normal","normal":true,"ln1":1851,"ln2":1832,"content":"   // Get Clipboard Service"},{"type":"normal","normal":true,"ln1":1852,"ln2":1833,"content":"   nsCOMPtr<nsIClipboard> clipboard(do_GetService(\"@mozilla.org/widget/clipboard;1\", &rv));"}],"oldStart":1824,"oldLines":29,"newStart":1824,"newLines":10},{"content":"@@ -1959,26 +1940,9 @@ NS_IMETHODIMP nsHTMLEditor::CanPaste(PRInt32 aSelectionType, PRBool *aCanPaste)","changes":[{"type":"normal","normal":true,"ln1":1959,"ln2":1940,"content":"   NS_ENSURE_ARG_POINTER(aCanPaste);"},{"type":"normal","normal":true,"ln1":1960,"ln2":1941,"content":"   *aCanPaste = PR_FALSE;"},{"type":"normal","normal":true,"ln1":1961,"ln2":1942,"content":" "},{"type":"del","del":true,"ln":1962,"content":"-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"del","del":true,"ln":1963,"content":"-  if (!ps)"},{"type":"del","del":true,"ln":1964,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":1965,"content":"-"},{"type":"del","del":true,"ln":1966,"content":"-  // Fire the beforepaste event.  If the event handler requests to prevent"},{"type":"del","del":true,"ln":1967,"content":"-  // default behavior, set *aCanPaste = true.  (IE-style behavior)"},{"type":"del","del":true,"ln":1968,"content":"-  nsCOMPtr<nsIDOMNode> eventTarget;"},{"type":"del","del":true,"ln":1969,"content":"-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));"},{"type":"del","del":true,"ln":1970,"content":"-  // On failure to get event target, just forget about it and don't fire."},{"type":"del","del":true,"ln":1971,"content":"-  if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":1972,"content":"-    nsEventStatus status = nsEventStatus_eIgnore;"},{"type":"del","del":true,"ln":1973,"content":"-    nsEvent evt(PR_TRUE, NS_BEFOREPASTE);"},{"type":"del","del":true,"ln":1974,"content":"-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,"},{"type":"del","del":true,"ln":1975,"content":"-                                nsnull, &status);"},{"type":"del","del":true,"ln":1976,"content":"-    // if event handler return'd false (PreventDefault)"},{"type":"del","del":true,"ln":1977,"content":"-    if (status == nsEventStatus_eConsumeNoDefault) {"},{"type":"del","del":true,"ln":1978,"content":"-      *aCanPaste = PR_TRUE;"},{"type":"del","del":true,"ln":1979,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":1980,"content":"-    }"},{"type":"del","del":true,"ln":1981,"content":"-  }"},{"type":"add","add":true,"ln":1943,"content":"+  nsresult rv = FireClipboardEvent(NS_BEFOREPASTE, aCanPaste);"},{"type":"add","add":true,"ln":1944,"content":"+  if (NS_FAILED(rv) || *aCanPaste)"},{"type":"add","add":true,"ln":1945,"content":"+    return rv;"},{"type":"normal","normal":true,"ln1":1982,"ln2":1946,"content":"   "},{"type":"normal","normal":true,"ln1":1983,"ln2":1947,"content":"   // can't paste if readonly"},{"type":"normal","normal":true,"ln1":1984,"ln2":1948,"content":"   if (!IsModifiable())"}],"oldStart":1959,"oldLines":26,"newStart":1940,"newLines":9}],"deletions":43,"additions":7,"from":"editor/libeditor/html/nsHTMLDataTransfer.cpp","to":"editor/libeditor/html/nsHTMLDataTransfer.cpp","index":["d46c0af..f9873ab","100644"]},{"chunks":[{"content":"@@ -427,29 +427,10 @@ NS_IMETHODIMP nsPlaintextEditor::Paste(PRInt32 aSelectionType)","changes":[{"type":"normal","normal":true,"ln1":427,"ln2":427,"content":" {"},{"type":"normal","normal":true,"ln1":428,"ln2":428,"content":"   ForceCompositionEnd();"},{"type":"normal","normal":true,"ln1":429,"ln2":429,"content":" "},{"type":"del","del":true,"ln":430,"content":"-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"del","del":true,"ln":431,"content":"-  if (!ps)"},{"type":"del","del":true,"ln":432,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":433,"content":"-"},{"type":"del","del":true,"ln":434,"content":"-  // Fire the paste event."},{"type":"del","del":true,"ln":435,"content":"-  nsCOMPtr<nsIDOMNode> eventTarget;"},{"type":"del","del":true,"ln":436,"content":"-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));"},{"type":"del","del":true,"ln":437,"content":"-  // On failure to get event target, just forget about it and don't fire."},{"type":"del","del":true,"ln":438,"content":"-  if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":439,"content":"-    nsEventStatus status = nsEventStatus_eIgnore;"},{"type":"del","del":true,"ln":440,"content":"-    nsEvent evt(PR_TRUE, NS_PASTE);"},{"type":"del","del":true,"ln":441,"content":"-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,"},{"type":"del","del":true,"ln":442,"content":"-                                nsnull, &status);"},{"type":"del","del":true,"ln":443,"content":"-    // if event handler return'd false (PreventDefault)"},{"type":"del","del":true,"ln":444,"content":"-    if (status == nsEventStatus_eConsumeNoDefault)"},{"type":"del","del":true,"ln":445,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":446,"content":"-"},{"type":"del","del":true,"ln":447,"content":"-    // Did the event handler cause the editor to be destroyed?"},{"type":"del","del":true,"ln":448,"content":"-    // (ie. the input element was removed from the document)"},{"type":"del","del":true,"ln":449,"content":"-    // Don't proceed with paste, as it will crash."},{"type":"del","del":true,"ln":450,"content":"-    if (mDidPreDestroy)"},{"type":"del","del":true,"ln":451,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":452,"content":"-  }"},{"type":"add","add":true,"ln":430,"content":"+  PRBool preventDefault;"},{"type":"add","add":true,"ln":431,"content":"+  nsresult rv = FireClipboardEvent(NS_PASTE, &preventDefault);"},{"type":"add","add":true,"ln":432,"content":"+  if (NS_FAILED(rv) || preventDefault)"},{"type":"add","add":true,"ln":433,"content":"+    return rv;"},{"type":"normal","normal":true,"ln1":453,"ln2":434,"content":" "},{"type":"normal","normal":true,"ln1":454,"ln2":435,"content":"   // Get Clipboard Service"},{"type":"normal","normal":true,"ln1":455,"ln2":436,"content":"   nsCOMPtr<nsIClipboard> clipboard(do_GetService(\"@mozilla.org/widget/clipboard;1\", &rv));"}],"oldStart":427,"oldLines":29,"newStart":427,"newLines":10},{"content":"@@ -483,27 +464,10 @@ NS_IMETHODIMP nsPlaintextEditor::CanPaste(PRInt32 aSelectionType, PRBool *aCanPa","changes":[{"type":"normal","normal":true,"ln1":483,"ln2":464,"content":"   NS_ENSURE_ARG_POINTER(aCanPaste);"},{"type":"normal","normal":true,"ln1":484,"ln2":465,"content":"   *aCanPaste = PR_FALSE;"},{"type":"normal","normal":true,"ln1":485,"ln2":466,"content":" "},{"type":"del","del":true,"ln":486,"content":"-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"del","del":true,"ln":487,"content":"-  if (!ps)"},{"type":"del","del":true,"ln":488,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":489,"content":"-"},{"type":"del","del":true,"ln":490,"content":"-  // Fire the beforepaste event.  If the event handler requests to prevent"},{"type":"del","del":true,"ln":491,"content":"-  // default behavior, set *aCanPaste = true.  (IE-style behavior)"},{"type":"del","del":true,"ln":492,"content":"-  nsCOMPtr<nsIDOMNode> eventTarget;"},{"type":"del","del":true,"ln":493,"content":"-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));"},{"type":"del","del":true,"ln":494,"content":"-  // On failure to get event target, just forget about it and don't fire."},{"type":"del","del":true,"ln":495,"content":"-  if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":496,"content":"-    nsEventStatus status = nsEventStatus_eIgnore;"},{"type":"del","del":true,"ln":497,"content":"-    nsEvent evt(PR_TRUE, NS_BEFOREPASTE);"},{"type":"del","del":true,"ln":498,"content":"-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,"},{"type":"del","del":true,"ln":499,"content":"-                                nsnull, &status);"},{"type":"del","del":true,"ln":500,"content":"-    // if event handler return'd false (PreventDefault)"},{"type":"del","del":true,"ln":501,"content":"-    if (status == nsEventStatus_eConsumeNoDefault) {"},{"type":"del","del":true,"ln":502,"content":"-      *aCanPaste = PR_TRUE;"},{"type":"del","del":true,"ln":503,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":504,"content":"-    }"},{"type":"del","del":true,"ln":505,"content":"-  }"},{"type":"del","del":true,"ln":506,"content":"-  "},{"type":"add","add":true,"ln":467,"content":"+  nsresult rv = FireClipboardEvent(NS_BEFOREPASTE, aCanPaste);"},{"type":"add","add":true,"ln":468,"content":"+  if (NS_FAILED(rv) || *aCanPaste)"},{"type":"add","add":true,"ln":469,"content":"+    return rv;"},{"type":"add","add":true,"ln":470,"content":"+"},{"type":"normal","normal":true,"ln1":507,"ln2":471,"content":"   // can't paste if readonly"},{"type":"normal","normal":true,"ln1":508,"ln2":472,"content":"   if (!IsModifiable())"},{"type":"normal","normal":true,"ln1":509,"ln2":473,"content":"     return NS_OK;"}],"oldStart":483,"oldLines":27,"newStart":464,"newLines":10}],"deletions":44,"additions":8,"from":"editor/libeditor/text/nsPlaintextDataTransfer.cpp","to":"editor/libeditor/text/nsPlaintextDataTransfer.cpp","index":["a06ebd6..31370e3","100644"]},{"chunks":[{"content":"@@ -1148,25 +1148,50 @@ nsresult nsPlaintextEditor::GetClipboardEventTarget(nsIDOMNode** aEventTarget)","changes":[{"type":"normal","normal":true,"ln1":1148,"ln2":1148,"content":"   return nsCopySupport::GetClipboardEventTarget(selection, aEventTarget);"},{"type":"normal","normal":true,"ln1":1149,"ln2":1149,"content":" }"},{"type":"normal","normal":true,"ln1":1150,"ln2":1150,"content":" "},{"type":"del","del":true,"ln":1151,"content":"-NS_IMETHODIMP nsPlaintextEditor::Cut()"},{"type":"add","add":true,"ln":1151,"content":"+nsresult nsPlaintextEditor::FireClipboardEvent(PRUint32 msg,"},{"type":"add","add":true,"ln":1152,"content":"+                                               PRBool* aPreventDefault)"},{"type":"normal","normal":true,"ln1":1152,"ln2":1153,"content":" {"},{"type":"add","add":true,"ln":1154,"content":"+  *aPreventDefault = PR_FALSE;"},{"type":"add","add":true,"ln":1155,"content":"+"},{"type":"normal","normal":true,"ln1":1153,"ln2":1156,"content":"   nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"normal","normal":true,"ln1":1154,"ln2":1157,"content":"   if (!ps)"},{"type":"normal","normal":true,"ln1":1155,"ln2":1158,"content":"     return NS_ERROR_NOT_INITIALIZED;"},{"type":"normal","normal":true,"ln1":1156,"ln2":1159,"content":" "},{"type":"del","del":true,"ln":1157,"content":"-  // Fire the cut event."},{"type":"add","add":true,"ln":1160,"content":"+  // Unsafe to fire event during reflow (bug 396108)"},{"type":"add","add":true,"ln":1161,"content":"+  PRBool isReflowing = PR_TRUE;"},{"type":"add","add":true,"ln":1162,"content":"+  nsresult rv = ps->IsReflowLocked(&isReflowing);"},{"type":"add","add":true,"ln":1163,"content":"+  if (NS_FAILED(rv) || isReflowing)"},{"type":"add","add":true,"ln":1164,"content":"+    return NS_OK;"},{"type":"add","add":true,"ln":1165,"content":"+"},{"type":"normal","normal":true,"ln1":1158,"ln2":1166,"content":"   nsCOMPtr<nsIDOMNode> eventTarget;"},{"type":"del","del":true,"ln":1159,"content":"-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));"},{"type":"del","del":true,"ln":1160,"content":"-  // On failure to get event target, just forget about it and don't fire."},{"type":"del","del":true,"ln":1161,"content":"-  if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":1162,"content":"-    nsEventStatus status = nsEventStatus_eIgnore;"},{"type":"del","del":true,"ln":1163,"content":"-    nsEvent evt(PR_TRUE, NS_CUT);"},{"type":"del","del":true,"ln":1164,"content":"-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,"},{"type":"del","del":true,"ln":1165,"content":"-                                nsnull, &status);"},{"type":"del","del":true,"ln":1166,"content":"-    // if event handler return'd false (PreventDefault)"},{"type":"del","del":true,"ln":1167,"content":"-    if (status == nsEventStatus_eConsumeNoDefault)"},{"type":"del","del":true,"ln":1168,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":1169,"content":"-  }"},{"type":"add","add":true,"ln":1167,"content":"+  rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));"},{"type":"add","add":true,"ln":1168,"content":"+  if (NS_FAILED(rv))"},{"type":"add","add":true,"ln":1169,"content":"+    // On failure to get event target, just forget about it and don't fire."},{"type":"add","add":true,"ln":1170,"content":"+    return NS_OK;"},{"type":"add","add":true,"ln":1171,"content":"+"},{"type":"add","add":true,"ln":1172,"content":"+  nsEventStatus status = nsEventStatus_eIgnore;"},{"type":"add","add":true,"ln":1173,"content":"+  nsEvent evt(PR_TRUE, msg);"},{"type":"add","add":true,"ln":1174,"content":"+  nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,"},{"type":"add","add":true,"ln":1175,"content":"+                              nsnull, &status);"},{"type":"add","add":true,"ln":1176,"content":"+  // if event handler return'd false (PreventDefault)"},{"type":"add","add":true,"ln":1177,"content":"+  if (status == nsEventStatus_eConsumeNoDefault)"},{"type":"add","add":true,"ln":1178,"content":"+    *aPreventDefault = PR_TRUE;"},{"type":"add","add":true,"ln":1179,"content":"+"},{"type":"add","add":true,"ln":1180,"content":"+  // Did the event handler cause the editor to be destroyed? (ie. the input"},{"type":"add","add":true,"ln":1181,"content":"+  // element was removed from the document)  Don't proceed with command,"},{"type":"add","add":true,"ln":1182,"content":"+  // could crash, definitely does during paste."},{"type":"add","add":true,"ln":1183,"content":"+  if (mDidPreDestroy)"},{"type":"add","add":true,"ln":1184,"content":"+    return NS_ERROR_NOT_INITIALIZED;"},{"type":"add","add":true,"ln":1185,"content":"+"},{"type":"add","add":true,"ln":1186,"content":"+  return NS_OK;"},{"type":"add","add":true,"ln":1187,"content":"+}"},{"type":"add","add":true,"ln":1188,"content":"+"},{"type":"add","add":true,"ln":1189,"content":"+NS_IMETHODIMP nsPlaintextEditor::Cut()"},{"type":"add","add":true,"ln":1190,"content":"+{"},{"type":"add","add":true,"ln":1191,"content":"+  PRBool preventDefault;"},{"type":"add","add":true,"ln":1192,"content":"+  nsresult rv = FireClipboardEvent(NS_CUT, &preventDefault);"},{"type":"add","add":true,"ln":1193,"content":"+  if (NS_FAILED(rv) || preventDefault)"},{"type":"add","add":true,"ln":1194,"content":"+    return rv;"},{"type":"normal","normal":true,"ln1":1170,"ln2":1195,"content":" "},{"type":"normal","normal":true,"ln1":1171,"ln2":1196,"content":"   nsCOMPtr<nsISelection> selection;"},{"type":"normal","normal":true,"ln1":1172,"ln2":1197,"content":"   rv = GetSelection(getter_AddRefs(selection));"}],"oldStart":1148,"oldLines":25,"newStart":1148,"newLines":50},{"content":"@@ -1177,6 +1202,8 @@ NS_IMETHODIMP nsPlaintextEditor::Cut()","changes":[{"type":"normal","normal":true,"ln1":1177,"ln2":1202,"content":"   if (NS_SUCCEEDED(selection->GetIsCollapsed(&isCollapsed)) && isCollapsed)"},{"type":"normal","normal":true,"ln1":1178,"ln2":1203,"content":"     return NS_OK;  // just return ok so no JS error is thrown"},{"type":"normal","normal":true,"ln1":1179,"ln2":1204,"content":" "},{"type":"add","add":true,"ln":1205,"content":"+  // ps should be guaranteed by FireClipboardEvent not failing"},{"type":"add","add":true,"ln":1206,"content":"+  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"normal","normal":true,"ln1":1180,"ln2":1207,"content":"   rv = ps->DoCopy();"},{"type":"normal","normal":true,"ln1":1181,"ln2":1208,"content":"   if (NS_SUCCEEDED(rv))"},{"type":"normal","normal":true,"ln1":1182,"ln2":1209,"content":"     rv = DeleteSelection(eNone);"}],"oldStart":1177,"oldLines":6,"newStart":1202,"newLines":8},{"content":"@@ -1188,26 +1215,9 @@ NS_IMETHODIMP nsPlaintextEditor::CanCut(PRBool *aCanCut)","changes":[{"type":"normal","normal":true,"ln1":1188,"ln2":1215,"content":"   NS_ENSURE_ARG_POINTER(aCanCut);"},{"type":"normal","normal":true,"ln1":1189,"ln2":1216,"content":"   *aCanCut = PR_FALSE;"},{"type":"normal","normal":true,"ln1":1190,"ln2":1217,"content":" "},{"type":"del","del":true,"ln":1191,"content":"-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"del","del":true,"ln":1192,"content":"-  if (!ps)"},{"type":"del","del":true,"ln":1193,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":1194,"content":"-"},{"type":"del","del":true,"ln":1195,"content":"-  // Fire the beforecut event.  If the event handler requests to prevent"},{"type":"del","del":true,"ln":1196,"content":"-  // default behavior, set *aCanCut = true.  (IE-style behavior)"},{"type":"del","del":true,"ln":1197,"content":"-  nsCOMPtr<nsIDOMNode> eventTarget;"},{"type":"del","del":true,"ln":1198,"content":"-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));"},{"type":"del","del":true,"ln":1199,"content":"-  // On failure to get event target, just forget about it and don't fire."},{"type":"del","del":true,"ln":1200,"content":"-  if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":1201,"content":"-    nsEventStatus status = nsEventStatus_eIgnore;"},{"type":"del","del":true,"ln":1202,"content":"-    nsEvent evt(PR_TRUE, NS_BEFORECUT);"},{"type":"del","del":true,"ln":1203,"content":"-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,"},{"type":"del","del":true,"ln":1204,"content":"-                                nsnull, &status);"},{"type":"del","del":true,"ln":1205,"content":"-    // if event handler return'd false (PreventDefault)"},{"type":"del","del":true,"ln":1206,"content":"-    if (status == nsEventStatus_eConsumeNoDefault) {"},{"type":"del","del":true,"ln":1207,"content":"-      *aCanCut = PR_TRUE;"},{"type":"del","del":true,"ln":1208,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":1209,"content":"-    }"},{"type":"del","del":true,"ln":1210,"content":"-  }"},{"type":"add","add":true,"ln":1218,"content":"+  nsresult rv = FireClipboardEvent(NS_BEFORECUT, aCanCut);"},{"type":"add","add":true,"ln":1219,"content":"+  if (NS_FAILED(rv) || *aCanCut)"},{"type":"add","add":true,"ln":1220,"content":"+    return rv;"},{"type":"normal","normal":true,"ln1":1211,"ln2":1221,"content":" "},{"type":"normal","normal":true,"ln1":1212,"ln2":1222,"content":"   nsCOMPtr<nsISelection> selection;"},{"type":"normal","normal":true,"ln1":1213,"ln2":1223,"content":"   rv = GetSelection(getter_AddRefs(selection));"}],"oldStart":1188,"oldLines":26,"newStart":1215,"newLines":9},{"content":"@@ -1223,26 +1233,13 @@ NS_IMETHODIMP nsPlaintextEditor::CanCut(PRBool *aCanCut)","changes":[{"type":"normal","normal":true,"ln1":1223,"ln2":1233,"content":" "},{"type":"normal","normal":true,"ln1":1224,"ln2":1234,"content":" NS_IMETHODIMP nsPlaintextEditor::Copy()"},{"type":"normal","normal":true,"ln1":1225,"ln2":1235,"content":" {"},{"type":"del","del":true,"ln":1226,"content":"-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"del","del":true,"ln":1227,"content":"-  if (!ps)"},{"type":"del","del":true,"ln":1228,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"del","del":true,"ln":1229,"content":"-"},{"type":"del","del":true,"ln":1230,"content":"-  // Fire the copy event."},{"type":"del","del":true,"ln":1231,"content":"-  nsCOMPtr<nsIDOMNode> eventTarget;"},{"type":"del","del":true,"ln":1232,"content":"-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));"},{"type":"del","del":true,"ln":1233,"content":"-  // On failure to get event target, just forget about it and don't fire."},{"type":"del","del":true,"ln":1234,"content":"-  if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":1235,"content":"-    nsEventStatus status = nsEventStatus_eIgnore;"},{"type":"del","del":true,"ln":1236,"content":"-    nsEvent evt(PR_TRUE, NS_COPY);"},{"type":"del","del":true,"ln":1237,"content":"-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,"},{"type":"del","del":true,"ln":1238,"content":"-                                nsnull, &status);"},{"type":"del","del":true,"ln":1239,"content":"-    // if event handler return'd false (PreventDefault)"},{"type":"del","del":true,"ln":1240,"content":"-    if (status == nsEventStatus_eConsumeNoDefault)"},{"type":"del","del":true,"ln":1241,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":1242,"content":"-    // the affect of the event handler closing the window here has been"},{"type":"del","del":true,"ln":1243,"content":"-    // tested, it works without crashes."},{"type":"del","del":true,"ln":1244,"content":"-  }"},{"type":"add","add":true,"ln":1236,"content":"+  PRBool preventDefault;"},{"type":"add","add":true,"ln":1237,"content":"+  nsresult rv = FireClipboardEvent(NS_COPY, &preventDefault);"},{"type":"add","add":true,"ln":1238,"content":"+  if (NS_FAILED(rv) || preventDefault)"},{"type":"add","add":true,"ln":1239,"content":"+    return rv;"},{"type":"normal","normal":true,"ln1":1245,"ln2":1240,"content":" "},{"type":"add","add":true,"ln":1241,"content":"+  // ps should be guaranteed by FireClipboardEvent not failing"},{"type":"add","add":true,"ln":1242,"content":"+  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"normal","normal":true,"ln1":1246,"ln2":1243,"content":"   return ps->DoCopy();"},{"type":"normal","normal":true,"ln1":1247,"ln2":1244,"content":" }"},{"type":"normal","normal":true,"ln1":1248,"ln2":1245,"content":" "}],"oldStart":1223,"oldLines":26,"newStart":1233,"newLines":13},{"content":"@@ -1251,27 +1248,10 @@ NS_IMETHODIMP nsPlaintextEditor::CanCopy(PRBool *aCanCopy)","changes":[{"type":"normal","normal":true,"ln1":1251,"ln2":1248,"content":"   NS_ENSURE_ARG_POINTER(aCanCopy);"},{"type":"normal","normal":true,"ln1":1252,"ln2":1249,"content":"   *aCanCopy = PR_FALSE;"},{"type":"normal","normal":true,"ln1":1253,"ln2":1250,"content":" "},{"type":"del","del":true,"ln":1254,"content":"-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);"},{"type":"del","del":true,"ln":1255,"content":"-  if (!ps)"},{"type":"del","del":true,"ln":1256,"content":"-    return NS_ERROR_NOT_INITIALIZED;"},{"type":"add","add":true,"ln":1251,"content":"+  nsresult rv = FireClipboardEvent(NS_BEFORECOPY, aCanCopy);"},{"type":"add","add":true,"ln":1252,"content":"+  if (NS_FAILED(rv) || *aCanCopy)"},{"type":"add","add":true,"ln":1253,"content":"+    return rv;"},{"type":"normal","normal":true,"ln1":1257,"ln2":1254,"content":" "},{"type":"del","del":true,"ln":1258,"content":"-  // Fire the beforecopy event.  If the event handler requests to prevent"},{"type":"del","del":true,"ln":1259,"content":"-  // default behavior, set *aCopyable = true.  (IE-style behavior)"},{"type":"del","del":true,"ln":1260,"content":"-  nsCOMPtr<nsIDOMNode> eventTarget;"},{"type":"del","del":true,"ln":1261,"content":"-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));"},{"type":"del","del":true,"ln":1262,"content":"-  // On failure to get event target, just forget about it and don't fire."},{"type":"del","del":true,"ln":1263,"content":"-  if (NS_SUCCEEDED(rv)) {"},{"type":"del","del":true,"ln":1264,"content":"-    nsEventStatus status = nsEventStatus_eIgnore;"},{"type":"del","del":true,"ln":1265,"content":"-    nsEvent evt(PR_TRUE, NS_BEFORECOPY);"},{"type":"del","del":true,"ln":1266,"content":"-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,"},{"type":"del","del":true,"ln":1267,"content":"-                                nsnull, &status);"},{"type":"del","del":true,"ln":1268,"content":"-    // if event handler return'd false (PreventDefault)"},{"type":"del","del":true,"ln":1269,"content":"-    if (status == nsEventStatus_eConsumeNoDefault) {"},{"type":"del","del":true,"ln":1270,"content":"-      *aCanCopy = PR_TRUE;"},{"type":"del","del":true,"ln":1271,"content":"-      return NS_OK;"},{"type":"del","del":true,"ln":1272,"content":"-    }"},{"type":"del","del":true,"ln":1273,"content":"-  }"},{"type":"del","del":true,"ln":1274,"content":"-  "},{"type":"normal","normal":true,"ln1":1275,"ln2":1255,"content":"   nsCOMPtr<nsISelection> selection;"},{"type":"normal","normal":true,"ln1":1276,"ln2":1256,"content":"   rv = GetSelection(getter_AddRefs(selection));"},{"type":"normal","normal":true,"ln1":1277,"ln2":1257,"content":"   if (NS_FAILED(rv)) return rv;"}],"oldStart":1251,"oldLines":27,"newStart":1248,"newLines":10}],"deletions":72,"additions":52,"from":"editor/libeditor/text/nsPlaintextEditor.cpp","to":"editor/libeditor/text/nsPlaintextEditor.cpp","index":["5457ff9..c0c5ef81","100644"]},{"chunks":[{"content":"@@ -216,7 +216,8 @@ protected:","changes":[{"type":"normal","normal":true,"ln1":216,"ln2":216,"content":" "},{"type":"normal","normal":true,"ln1":217,"ln2":217,"content":"   // Wrapper for nsCopySupport::GetClipboardEventTarget, finds target to fire"},{"type":"normal","normal":true,"ln1":218,"ln2":218,"content":"   // [cut,copy,paste] and [beforecut,beforecopy,beforepaste] events at."},{"type":"del","del":true,"ln":219,"content":"-  virtual nsresult GetClipboardEventTarget(nsIDOMNode** aEventTarget);"},{"type":"add","add":true,"ln":219,"content":"+  nsresult GetClipboardEventTarget(nsIDOMNode** aEventTarget);"},{"type":"add","add":true,"ln":220,"content":"+  nsresult FireClipboardEvent(PRUint32 msg, PRBool* aPreventDefault);"},{"type":"normal","normal":true,"ln1":220,"ln2":221,"content":" "},{"type":"normal","normal":true,"ln1":221,"ln2":222,"content":" // Data members"},{"type":"normal","normal":true,"ln1":222,"ln2":223,"content":" protected:"}],"oldStart":216,"oldLines":7,"newStart":216,"newLines":8}],"deletions":1,"additions":2,"from":"editor/libeditor/text/nsPlaintextEditor.h","to":"editor/libeditor/text/nsPlaintextEditor.h","index":["14dc662..a4ed2b5","100644"]}]}