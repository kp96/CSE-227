Index: dom/src/base/nsGlobalWindow.cpp
===================================================================
RCS file: /cvsroot/mozilla/dom/src/base/nsGlobalWindow.cpp,v
retrieving revision 1.652.2.2.2.37.2.8
diff -u -p -9 -r1.652.2.2.2.37.2.8 nsGlobalWindow.cpp
--- dom/src/base/nsGlobalWindow.cpp	22 Jun 2005 01:52:31 -0000	1.652.2.2.2.37.2.8
+++ dom/src/base/nsGlobalWindow.cpp	2 Jul 2005 08:08:49 -0000
@@ -135,18 +135,20 @@
 #include "nsIJSNativeInitializer.h"
 #include "nsIFullScreen.h"
 #include "nsIStringBundle.h"
 #include "nsIScriptEventManager.h" // For GetInterface()
 #include "nsIConsoleService.h"
 #include "nsIControllerContext.h"
 #include "nsGlobalWindowCommands.h"
 #include "nsAutoPtr.h"
 #include "nsIPrincipalObsolete.h"
+#include "nsIURIFixup.h"
+#include "nsCDefaultURIFixup.h"
 
 #include "plbase64.h"
 
 #include "nsIPrintSettings.h"
 
 #include "nsWindowRoot.h"
 #include "nsNetCID.h"
 
 // XXX An unfortunate dependency exists here (two XUL files).
@@ -2412,40 +2414,88 @@ GlobalWindowImpl::IsCallerChrome()
 
   return is_caller_chrome;
 }
 
 void
 GlobalWindowImpl::MakeScriptDialogTitle(const nsAString &aInTitle, nsAString &aOutTitle)
 {
   aOutTitle.Truncate(0);
 
-  // Load the string to be prepended to titles for script
-  // confirm/alert/prompt boxes.
+  // Try to get a host from the running principal -- this will do the right
+  // thing for javascript: and data: documents.
 
-  nsresult rv;
-  nsCOMPtr<nsIStringBundleService> stringBundleService =
-     do_GetService(kCStringBundleServiceCID, &rv);
+  nsresult rv = NS_OK;
+  nsCOMPtr<nsIPrincipal> principal;
+  NS_WARN_IF_FALSE(sSecMan, "Global Window has no security manager!");
+  if (sSecMan) {
+    rv = sSecMan->GetSubjectPrincipal(getter_AddRefs(principal));
+
+    if (NS_SUCCEEDED(rv) && principal) {
+      nsCOMPtr<nsIURI> uri;
+      rv = principal->GetURI(getter_AddRefs(uri));
+      if (NS_SUCCEEDED(rv) && uri) {
+
+        // remove user:pass for privacy and spoof prevention
+
+        nsCOMPtr<nsIURIFixup> fixup(do_GetService(NS_URIFIXUP_CONTRACTID));
+        if (fixup) {
+          nsCOMPtr<nsIURI> fixedURI;
+          nsresult rv = fixup->CreateExposableURI(uri, getter_AddRefs(fixedURI));
+          if (NS_SUCCEEDED(rv) && fixedURI) {
+            nsCAutoString host;
+            fixedURI->GetHost(host);
+
+            if (!host.IsEmpty()) {
+
+              // if this URI has a host we'll show it. For other schemes
+              // (e.g. file:) we fall back to the localized generic string
+
+              nsCAutoString prepath;
+              fixedURI->GetPrePath(prepath);
+
+              aOutTitle = NS_ConvertUTF8toUTF16(prepath);
+              if (!aInTitle.IsEmpty())
+                aOutTitle.Append(NS_LITERAL_STRING(" - ") + aInTitle);
+            }
+          }
+        }
+      }
+    }
+    else { // failed to get subject principal
+      NS_WARNING("No script principal? Who is calling alert/confirm/prompt?!");
+    }
+  }
 
-  if (NS_SUCCEEDED(rv) && stringBundleService) {
-    nsCOMPtr<nsIStringBundle> stringBundle;
-    rv = stringBundleService->CreateBundle(kDOMBundleURL,
-       getter_AddRefs(stringBundle));
-
-    if (stringBundle) {
-      nsAutoString inTitle(aInTitle);
-      nsXPIDLString tempString;
-      const PRUnichar *formatStrings[1];
-      formatStrings[0] = inTitle.get();
-      rv = stringBundle->FormatStringFromName(
-        NS_LITERAL_STRING("ScriptDlgTitle").get(),
-        formatStrings, 1, getter_Copies(tempString));
-      if (tempString)
-        aOutTitle = tempString.get();
+  if (aOutTitle.IsEmpty()) {
+
+    // We didn't find a host so use the generic title modifier.
+    // Load the string to be prepended to titles for script
+    // confirm/alert/prompt boxes.
+
+    nsCOMPtr<nsIStringBundleService> stringBundleService =
+       do_GetService(kCStringBundleServiceCID, &rv);
+
+    if (NS_SUCCEEDED(rv) && stringBundleService) {
+      nsCOMPtr<nsIStringBundle> stringBundle;
+      rv = stringBundleService->CreateBundle(kDOMBundleURL,
+         getter_AddRefs(stringBundle));
+
+      if (stringBundle) {
+        nsAutoString inTitle(aInTitle);
+        nsXPIDLString tempString;
+        const PRUnichar *formatStrings[1];
+        formatStrings[0] = inTitle.get();
+        rv = stringBundle->FormatStringFromName(
+          NS_LITERAL_STRING("ScriptDlgTitle").get(),
+          formatStrings, 1, getter_Copies(tempString));
+        if (tempString)
+          aOutTitle = tempString.get();
+      }
     }
   }
 
   // Just in case
   if (aOutTitle.IsEmpty()) {
     NS_WARNING("could not get ScriptDlgTitle string from string bundle");
     aOutTitle.Assign(NS_LITERAL_STRING("[Script] "));
     aOutTitle.Append(aInTitle);
   }
