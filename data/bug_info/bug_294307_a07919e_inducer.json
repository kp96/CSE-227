{"bug_id":294307,"commitHash":"a07919e","commit_info":{"sha":"a07919e4a91fec843b8b2096bb4d6a5633d73878","commit":{"author":{"name":"bugzilla%arlen.demon.co.uk","email":"bugzilla%arlen.demon.co.uk","date":"2006-03-01T22:08:19Z"},"committer":{"name":"bugzilla%arlen.demon.co.uk","email":"bugzilla%arlen.demon.co.uk","date":"2006-03-01T22:08:19Z"},"message":"Bug 294307 seamonkey mailnews doing too-permissive content policy checks\nNow defaults the decision to reject so when NS_ENSURE_SUCCESS errors content is rejected\np=me r=mscott sr=bienvenu","tree":{"sha":"9b1f8c512a0c6105f71ef6541ba57ef9e774319c","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/9b1f8c512a0c6105f71ef6541ba57ef9e774319c"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/a07919e4a91fec843b8b2096bb4d6a5633d73878","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/a07919e4a91fec843b8b2096bb4d6a5633d73878","html_url":"https://github.com/mozilla/gecko-dev/commit/a07919e4a91fec843b8b2096bb4d6a5633d73878","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/a07919e4a91fec843b8b2096bb4d6a5633d73878/comments","author":null,"committer":null,"parents":[{"sha":"11662c264fb3452f7cf3087afcd2b9f9741303d1","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/11662c264fb3452f7cf3087afcd2b9f9741303d1","html_url":"https://github.com/mozilla/gecko-dev/commit/11662c264fb3452f7cf3087afcd2b9f9741303d1"}],"stats":{"total":16,"additions":12,"deletions":4},"files":[{"sha":"164f3b6a1f5fe7ceee56a910e1b0f73d20cae53f","filename":"mailnews/base/src/nsMsgContentPolicy.cpp","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/mozilla/gecko-dev/blob/a07919e4a91fec843b8b2096bb4d6a5633d73878/mailnews/base/src/nsMsgContentPolicy.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/a07919e4a91fec843b8b2096bb4d6a5633d73878/mailnews/base/src/nsMsgContentPolicy.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mailnews/base/src/nsMsgContentPolicy.cpp?ref=a07919e4a91fec843b8b2096bb4d6a5633d73878","patch":"@@ -283,6 +283,9 @@ nsMsgContentPolicy::ShouldLoad(PRUint32          aContentType,\n   if (NS_SUCCEEDED(rv) && (isChrome || isRes || isAbout))\n     return rv;\n \n+  // Now default to reject so when NS_ENSURE_SUCCESS errors content is rejected\n+  *aDecision = nsIContentPolicy::REJECT_REQUEST;\n+\n   // if aContentLocation is a protocol we handle (imap, pop3, mailbox, etc)\n   // or is a chrome url, then allow the load\n   nsCAutoString contentScheme;\n@@ -311,7 +314,10 @@ nsMsgContentPolicy::ShouldLoad(PRUint32          aContentType,\n   NS_ENSURE_SUCCESS(rv, rv);\n \n   if (isExposedProtocol || isChrome)\n+  {\n+    *aDecision = nsIContentPolicy::ACCEPT;\n     return rv;\n+  }\n \n   // for unexposed protocols, we never try to load any of them with the exception of http and https.\n   // this means we never even try to load urls that we don't handle ourselves like ftp and gopher.\n@@ -322,16 +328,16 @@ nsMsgContentPolicy::ShouldLoad(PRUint32          aContentType,\n   rv |= aContentLocation->SchemeIs(\"https\", &isHttps);\n \n   if (!NS_SUCCEEDED(rv) || (!isHttp && !isHttps))\n-  {\n-    *aDecision = nsIContentPolicy::REJECT_REQUEST;\n     return rv;\n-  }\n \n   // Look into http and https more closely to determine if the load should be allowed\n \n   // If we do not block remote content then return with an accept content here\n   if (!mBlockRemoteImages)\n+  {\n+    *aDecision = nsIContentPolicy::ACCEPT;\n     return NS_OK;\n+  }\n \n   // now do some more detective work to better refine our decision...\n   // (1) examine the msg hdr value for the remote content policy on this particular message to\n@@ -380,7 +386,10 @@ nsMsgContentPolicy::ShouldLoad(PRUint32          aContentType,\n   // Case #1 and #2: special case RSS. Allow urls that are RSS feeds to show remote image (Bug #250246)\n   // Honor the message specific remote content policy\n   if (isRSS || remoteContentPolicy == kAllowRemoteContent || authorInWhiteList || trustedDomain)\n+  {\n+    *aDecision = nsIContentPolicy::ACCEPT;\n     return rv;\n+  }\n \n   if (!remoteContentPolicy) // kNoRemoteContentPolicy means we have never set a value on the message\n     msgHdr->SetUint32Property(\"remoteContentPolicy\", kBlockRemoteContent);\n@@ -395,7 +404,6 @@ nsMsgContentPolicy::ShouldLoad(PRUint32          aContentType,\n   NS_ENSURE_TRUE(msgHdrSink, rv);\n   msgHdrSink->OnMsgHasRemoteContent(msgHdr); // notify the UI to show the remote content hdr bar so the user can overide\n \n-  *aDecision = nsIContentPolicy::REJECT_REQUEST;\n   return rv;\n }\n "}]},"blames":["f1ac5403","7660d9cd"]}