Index: toolkit/content/contentAreaUtils.js
===================================================================
RCS file: /home/bzbarsky/mozilla/cvs-mirror/mozilla/toolkit/content/contentAreaUtils.js,v
retrieving revision 1.83
diff -u -p -d -8 -r1.83 contentAreaUtils.js
--- toolkit/content/contentAreaUtils.js	3 Apr 2006 23:17:51 -0000	1.83
+++ toolkit/content/contentAreaUtils.js	20 Apr 2006 21:15:31 -0000
@@ -112,24 +112,21 @@ function openNewWindowWith(href, sourceU
  * urlSecurityCheck: JavaScript wrapper for CheckLoadURI.
  * If |sourceURL| is not allowed to link to |url|, this function throws with an error message.
  *
  * @param url The URL a page has linked to.
  * @param sourceURL The URL of the document from which the URL came.
  */
 function urlSecurityCheck(url, sourceURL)
 {
-  var sourceURI = makeURI(sourceURL);
-  var destURI = makeURI(url);
-
   const nsIScriptSecurityManager = Components.interfaces.nsIScriptSecurityManager;
   var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
                          .getService(nsIScriptSecurityManager);
   try {
-    secMan.checkLoadURI(sourceURI, destURI, nsIScriptSecurityManager.STANDARD);
+    secMan.checkLoadURIStr(sourceURL, url, nsIScriptSecurityManager.STANDARD);
   } catch (e) {
     throw "Load of " + url + " from " + sourceURL + " denied.";
   }
 }
 
 function webPanelSecurityCheck(aSourceURL, aDestURL) {
   var sourceURI = makeURI(aSourceURL);
   var destURI = makeURI(aDestURL);
Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /home/bzbarsky/mozilla/cvs-mirror/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.294
diff -u -p -d -8 -r1.294 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	17 Apr 2006 23:19:44 -0000	1.294
+++ caps/src/nsScriptSecurityManager.cpp	25 Apr 2006 03:19:17 -0000
@@ -78,16 +78,18 @@
 #include "nsISecurityCheckedComponent.h"
 #include "nsIPrefBranch2.h"
 #include "nsIJSRuntimeService.h"
 #include "nsIObserverService.h"
 #include "nsIContent.h"
 #include "nsAutoPtr.h"
 #include "nsAboutProtocolUtils.h"
 #include "nsIClassInfo.h"
+#include "nsIURIFixup.h"
+#include "nsCDefaultURIFixup.h"
 
 static NS_DEFINE_CID(kZipReaderCID, NS_ZIPREADER_CID);
 
 nsIIOService    *nsScriptSecurityManager::sIOService = nsnull;
 nsIXPConnect    *nsScriptSecurityManager::sXPConnect = nsnull;
 nsIStringBundle *nsScriptSecurityManager::sStrBundle = nsnull;
 JSRuntime       *nsScriptSecurityManager::sRuntime   = 0;
 
@@ -1481,21 +1483,51 @@ nsScriptSecurityManager::CheckLoadURIStr
                                          const nsACString& aTargetURIStr,
                                          PRUint32 aFlags)
 {
     // FIXME: bug 327244 -- this function should really die...  Really truly.
     nsCOMPtr<nsIURI> source;
     nsresult rv = NS_NewURI(getter_AddRefs(source), aSourceURIStr,
                             nsnull, nsnull, sIOService);
     NS_ENSURE_SUCCESS(rv, rv);
+
     nsCOMPtr<nsIURI> target;
     rv = NS_NewURI(getter_AddRefs(target), aTargetURIStr,
                    nsnull, nsnull, sIOService);
     NS_ENSURE_SUCCESS(rv, rv);
-    return CheckLoadURI(source, target, aFlags);
+
+    rv = CheckLoadURI(source, target, aFlags);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    // Now start testing fixup -- since aTargetURIStr is a string, not
+    // an nsIURI, we may well end up fixing it up before loading.
+    // Note: This needs to stay in sync with the nsIURIFixup api.
+    nsCOMPtr<nsIURIFixup> fixup = do_GetService(NS_URIFIXUP_CONTRACTID);
+    if (!fixup) {
+        return rv;
+    }
+
+    PRUint32 flags[] = {
+        nsIURIFixup::FIXUP_FLAG_NONE,
+        nsIURIFixup::FIXUP_FLAG_ALLOW_KEYWORD_LOOKUP,
+        nsIURIFixup::FIXUP_FLAGS_MAKE_ALTERNATE_URI,
+        nsIURIFixup::FIXUP_FLAG_ALLOW_KEYWORD_LOOKUP |
+        nsIURIFixup::FIXUP_FLAGS_MAKE_ALTERNATE_URI
+    };
+
+    for (PRUint32 i = 0; i < NS_ARRAY_LENGTH(flags); ++i) {
+        rv = fixup->CreateFixupURI(aTargetURIStr, flags[i],
+                                   getter_AddRefs(target));
+        NS_ENSURE_SUCCESS(rv, rv);
+
+        rv = CheckLoadURI(source, target, aFlags);
+        NS_ENSURE_SUCCESS(rv, rv);
+    }
+
+    return rv;
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::CheckFunctionAccess(JSContext *aCx, void *aFunObj,
                                              void *aTargetObj)
 {
     // This check is called for event handlers
     nsresult rv;
