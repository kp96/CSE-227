# HG changeset patch
# Parent d2f3b160dd8bd623bd31eb8fcd844a49fc12a1ca
# User aceman <acelists@atlas.sk>
Bug 732807 - convert mailnews/extensions/smime to Services.jsm. r=standard8

diff --git a/mailnews/extensions/smime/content/am-smime.js b/mailnews/extensions/smime/content/am-smime.js
--- a/mailnews/extensions/smime/content/am-smime.js
+++ b/mailnews/extensions/smime/content/am-smime.js
@@ -32,16 +32,18 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
+Components.utils.import("resource://gre/modules/Services.jsm");
+
 const nsIX509CertDB = Components.interfaces.nsIX509CertDB;
 const nsX509CertDBContractID = "@mozilla.org/security/x509certdb;1";
 const nsIX509Cert = Components.interfaces.nsIX509Cert;
 
 const email_recipient_cert_usage = 5;
 const email_signing_cert_usage = 4;
 
 var gIdentity;
@@ -164,30 +166,28 @@ function smimeOnAcceptEditor()
 
   smimeSave();
 
   return true;
 }
 
 function onLockPreference()
 {
-  var initPrefString = "mail.identity"; 
-  var finalPrefString; 
-
-  var prefService = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService);
+  var initPrefString = "mail.identity";
+  var finalPrefString;
 
   var allPrefElements = [
     { prefstring:"signingCertSelectButton", id:"signingCertSelectButton"},
     { prefstring:"encryptionCertSelectButton", id:"encryptionCertSelectButton"},
     { prefstring:"sign_mail", id:"identity.sign_mail"},
     { prefstring:"encryptionpolicy", id:"encryptionChoices"}
   ];
 
   finalPrefString = initPrefString + "." + gIdentity.key + ".";
-  gSmimePrefbranch = prefService.getBranch(finalPrefString);
+  gSmimePrefbranch = Services.prefs.getBranch(finalPrefString);
 
   disableIfLocked( allPrefElements );
 }
 
 
 // Does the work of disabling an element given the array which contains xul id/prefstring pairs.
 // Also saves the id/locked state in an array so that other areas of the code can avoid
 // stomping on the disabled state indiscriminately.
@@ -221,48 +221,30 @@ function disableIfLocked( prefstrArray )
         else if (id == "encryptionCertSelectButton") {
           document.getElementById("encryptionCertClearButton").setAttribute("disabled", "true");
         }
       }
     }
   }
 }
 
-function getPromptService()
-{
-  var ifps = Components.interfaces.nsIPromptService;
-  var promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].getService();
-  if (promptService) {
-    promptService = promptService.QueryInterface(ifps);
-  }
-  return promptService;
-}
-
 function alertUser(message)
 {
-  var ps = getPromptService();
-  if (ps) {
-    ps.alert(
-      window,
-      gBrandBundle.getString("brandShortName"), 
-      message);
-  }
+  Services.prompt.alert(window,
+                        gBrandBundle.getString("brandShortName"),
+                        message);
 }
 
 function askUser(message)
 {
-  var ps = getPromptService();
-  if (!ps)
-    return false;
-
-  var button = ps.confirmEx(
+  let button = Services.prompt.confirmEx(
     window,
-    gBrandBundle.getString("brandShortName"), 
+    gBrandBundle.getString("brandShortName"),
     message,
-    ps.STD_YES_NO_BUTTONS,
+    Services.prompt.STD_YES_NO_BUTTONS,
     null,
     null,
     null,
     null,
     {});
   // confirmEx returns button index:
   return (button == 0);
 }
@@ -449,33 +431,29 @@ function smimeClearCert(smime_cert)
 
   enableCertSelectButtons();
 }
 
 function openCertManager()
 {
   // Check for an existing certManager window and focus it; it's not
   // application modal.
-  var windowMediator = Components.classes["@mozilla.org/appshell/window-mediator;1"]
-                                 .getService(Components.interfaces.nsIWindowMediator);
-  var lastCertManager = windowMediator.getMostRecentWindow("mozilla:certmanager");
+  let lastCertManager = Services.wm.getMostRecentWindow("mozilla:certmanager");
   if (lastCertManager)
     lastCertManager.focus();
   else
     window.openDialog("chrome://pippki/content/certManager.xul", "",
                       "centerscreen,resizable=yes,dialog=no");
 }
 
 function openDeviceManager()
 {
   // Check for an existing deviceManager window and focus it; it's not
   // application modal.
-  var windowMediator = Components.classes["@mozilla.org/appshell/window-mediator;1"]
-                                 .getService(Components.interfaces.nsIWindowMediator);
-  var lastCertManager = windowMediator.getMostRecentWindow("mozilla:devicemanager");
+  let lastCertManager = Services.wm.getMostRecentWindow("mozilla:devicemanager");
   if (lastCertManager)
     lastCertManager.focus();
   else
     window.openDialog("chrome://pippki/content/device_manager.xul", "",
                       "centerscreen,resizable=yes,dialog=no");
 }
 
 function smimeOnLoadEditor()
diff --git a/mailnews/extensions/smime/content/certFetchingStatus.js b/mailnews/extensions/smime/content/certFetchingStatus.js
--- a/mailnews/extensions/smime/content/certFetchingStatus.js
+++ b/mailnews/extensions/smime/content/certFetchingStatus.js
@@ -40,16 +40,18 @@
 
   Display modal dialog with message and stop button.
   In onload, kick off binding to LDAP.
   When bound, kick off the searches.
   On finding certificates, import into permanent cert database.
   When all searches are finished, close the dialog.
 */
 
+Components.utils.import("resource://gre/modules/Services.jsm");
+
 const nsIX509CertDB = Components.interfaces.nsIX509CertDB;
 const nsX509CertDB = "@mozilla.org/security/x509certdb;1";
 const CertAttribute = "usercertificate;binary";
 
 var gEmailAddresses;
 var gDirectoryPref;
 var gLdapServerURL;
 var gLdapConnection;
@@ -68,33 +70,27 @@ function onLoad()
     return;
   }
 
   setTimeout(search, 1);
 }
 
 function search()
 {
-  var prefService =
-    Components.classes["@mozilla.org/preferences-service;1"]
-      .getService(Components.interfaces.nsIPrefService);
-  var prefs = prefService.getBranch(null);
-
   // get the login to authenticate as, if there is one
   try {
-    gLogin = prefs.getComplexValue(gDirectoryPref + ".auth.dn", Components.interfaces.nsISupportsString).data;
+    gLogin = Services.prefs.getComplexValue(gDirectoryPref + ".auth.dn", Components.interfaces.nsISupportsString).data;
   } catch (ex) {
     // if we don't have this pref, no big deal
   }
 
   try {
-    let url = prefs.getCharPref(gDirectoryPref + ".uri");
+    let url = Services.prefs.getCharPref(gDirectoryPref + ".uri");
 
-    gLdapServerURL = Components.classes["@mozilla.org/network/io-service;1"]
-      .getService(Components.interfaces.nsIIOService)
+    gLdapServerURL = Services.io
       .newURI(url, null, null).QueryInterface(Components.interfaces.nsILDAPURL);
 
     gLdapConnection = Components.classes["@mozilla.org/network/ldap-connection;1"]
       .createInstance().QueryInterface(Components.interfaces.nsILDAPConnection);
 
     gLdapConnection.init(gLdapServerURL, gLogin, new boundListener(),
       null, Components.interfaces.nsILDAPConnection.VERSION3);
 
@@ -141,32 +137,30 @@ function getLDAPOperation()
                         null);
 }
 
 function getPassword()
 {
   // we only need a password if we are using credentials
   if (gLogin)
   {
-    var windowWatcherSvc = Components.classes["@mozilla.org/embedcomp/window-watcher;1"]
-                            .getService(Components.interfaces.nsIWindowWatcher);
-    var authPrompter = windowWatcherSvc.getNewAuthPrompter(window.QueryInterface(Components.interfaces.nsIDOMWindow));    
-    var strBundle = document.getElementById('bundle_ldap');
-    var password = { value: "" };
-    
+    let authPrompter = Services.ww.getNewAuthPrompter(window.QueryInterface(Components.interfaces.nsIDOMWindow));
+    let strBundle = document.getElementById('bundle_ldap');
+    let password = { value: "" };
+
     // nsLDAPAutocompleteSession uses asciiHost instead of host for the prompt text, I think we should be
-    // consistent. 
-    if (authPrompter.promptPassword(strBundle.getString("authPromptTitle"),  
+    // consistent.
+    if (authPrompter.promptPassword(strBundle.getString("authPromptTitle"),
                                      strBundle.getFormattedString("authPromptText", [gLdapServerURL.asciiHost]),
                                      gLdapServerURL.spec,
                                      authPrompter.SAVE_PASSWORD_PERMANENTLY,
                                      password))
-      return password.value;       
+      return password.value;
   }
-  
+
   return null;
 }
 
 function kickOffBind()
 {
   try {
     getLDAPOperation();
     gLdapOperation.simpleBind(getPassword());
diff --git a/mailnews/extensions/smime/content/msgCompSMIMEOverlay.js b/mailnews/extensions/smime/content/msgCompSMIMEOverlay.js
--- a/mailnews/extensions/smime/content/msgCompSMIMEOverlay.js
+++ b/mailnews/extensions/smime/content/msgCompSMIMEOverlay.js
@@ -32,16 +32,18 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
+Components.utils.import("resource://gre/modules/Services.jsm");
+
 // Account encryption policy values:
 // const kEncryptionPolicy_Never = 0;
 // 'IfPossible' was used by ns4.
 // const kEncryptionPolicy_IfPossible = 1;
 const kEncryptionPolicy_Always = 2;
 
 var gEncryptedURIService =
         Components.classes["@mozilla.org/messenger-smime/smime-encrypted-uris-service;1"]
@@ -133,25 +135,20 @@ function smimeComposeOnUnload()
 
 function showNeedSetupInfo()
 {
   let compSmimeBundle = document.getElementById("bundle_comp_smime");
   let brandBundle = document.getElementById("bundle_brand");
   if (!compSmimeBundle || !brandBundle)
     return;
 
-  var ifps = Components.interfaces.nsIPromptService;
-  let promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
-                                .getService(ifps);
-
-  let buttonPressed =
-    promptService.confirmEx(window,
-                            brandBundle.getString("brandShortName"),
-                            compSmimeBundle.getString("NeedSetup"),
-                            ifps.STD_YES_NO_BUTTONS, 0, 0, 0, null, {});
+  let buttonPressed = Services.prompt.confirmEx(window,
+    brandBundle.getString("brandShortName"),
+    compSmimeBundle.getString("NeedSetup"),
+    Services.prompt.STD_YES_NO_BUTTONS, 0, 0, 0, null, {});
   if (buttonPressed == 0)
     openHelp("sign-encrypt", "chrome://communicator/locale/help/suitehelp.rdf");
 }
 
 function toggleEncryptMessage()
 {
   if (!gSMFields)
     return;
diff --git a/mailnews/extensions/smime/content/msgCompSecurityInfo.js b/mailnews/extensions/smime/content/msgCompSecurityInfo.js
--- a/mailnews/extensions/smime/content/msgCompSecurityInfo.js
+++ b/mailnews/extensions/smime/content/msgCompSecurityInfo.js
@@ -29,16 +29,18 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
+Components.utils.import("resource://gre/modules/Services.jsm");
+
 var gListBox;
 var gViewButton;
 var gBundle;
 
 var gEmailAddresses;
 var gCertStatusSummaries;
 var gCertIssuedInfos;
 var gCertExpiresInfos;
@@ -144,72 +146,67 @@ function onLoad()
       if (!gCerts.value[j])
       {
         missing[missing.length] = gEmailAddresses.value[j];
       }
     }
 
     if (missing.length > 0)
     {
-      var prefService = 
-        Components.classes["@mozilla.org/preferences-service;1"]
-          .getService(Components.interfaces.nsIPrefService);
-      var sPrefs = prefService.getBranch(null);
-
-      var autocompleteLdap = false;
-      autocompleteLdap = sPrefs.getBoolPref("ldap_2.autoComplete.useDirectory");
+      var autocompleteLdap = Services.prefs
+        .getBoolPref("ldap_2.autoComplete.useDirectory");
 
       if (autocompleteLdap)
       {
         var autocompleteDirectory = null;
-        autocompleteDirectory = sPrefs.getCharPref(
-          "ldap_2.autoComplete.directoryServer");
-
-        if(params.currentIdentity.overrideGlobalPref) {
+        if (params.currentIdentity.overrideGlobalPref) {
           autocompleteDirectory = params.currentIdentity.directoryServer;
+        } else {
+          autocompleteDirectory = Services.prefs
+            .getCharPref("ldap_2.autoComplete.directoryServer");
         }
 
         if (autocompleteDirectory)
         {
           window.openDialog('chrome://messenger-smime/content/certFetchingStatus.xul',
             '',
-            'chrome,resizable=1,modal=1,dialog=1', 
+            'chrome,resizable=1,modal=1,dialog=1',
             autocompleteDirectory,
             missing
           );
         }
       }
     }
   }
 
   if (gBundle)
   {
     var yes_string = gBundle.getString("StatusYes");
     var no_string = gBundle.getString("StatusNo");
     var not_possible_string = gBundle.getString("StatusNotPossible");
 
     var signed_element = document.getElementById("signed");
     var encrypted_element = document.getElementById("encrypted");
-    
+
     if (params.smFields.requireEncryptMessage)
     {
       if (params.isEncryptionCertAvailable && canEncrypt.value)
       {
         encrypted_element.value = yes_string;
       }
       else
       {
         encrypted_element.value = not_possible_string;
       }
     }
     else
     {
       encrypted_element.value = no_string;
     }
-    
+
     if (params.smFields.signMessage)
     {
       if (params.isSigningCertAvailable)
       {
         signed_element.value = yes_string;
       }
       else
       {
@@ -218,23 +215,23 @@ function onLoad()
     }
     else
     {
       signed_element.value = no_string;
     }
   }
 
   var imax = gCount.value;
-  
+
   for (var i = 0; i < imax; ++i)
   {
     var listitem  = document.createElement("listitem");
 
     listitem.appendChild(createCell(gEmailAddresses.value[i]));
-    
+
     if (!gCerts.value[i])
     {
       listitem.appendChild(createCell(gBundle.getString("StatusNotFound")));
     }
     else
     {
       listitem.appendChild(createCell(getStatusExplanation(gCertStatusSummaries.value[i])));
       listitem.appendChild(createCell(gCertIssuedInfos.value[i]));
@@ -281,9 +278,8 @@ function doHelpButton()
 }
 
 function createCell(label)
 {
   var cell = document.createElement("listcell");
   cell.setAttribute("label", label)
   return cell;
 }
-
diff --git a/mailnews/extensions/smime/content/msgReadSMIMEOverlay.js b/mailnews/extensions/smime/content/msgReadSMIMEOverlay.js
--- a/mailnews/extensions/smime/content/msgReadSMIMEOverlay.js
+++ b/mailnews/extensions/smime/content/msgReadSMIMEOverlay.js
@@ -30,16 +30,18 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
+Components.utils.import("resource://gre/modules/Services.jsm");
+
 var gEncryptionStatus = -1;
 var gSignatureStatus = -1;
 var gSignerCert = null;
 var gEncryptionCert = null;
 
 addEventListener("load", smimeReadOnLoad, false);
 
 function smimeReadOnLoad()
@@ -60,22 +62,21 @@ function smimeReadOnUnload()
 
 function showImapSignatureUnknown()
 {
   let readSmimeBundle = document.getElementById("bundle_read_smime");
   let brandBundle = document.getElementById("bundle_brand");
   if (!readSmimeBundle || !brandBundle)
     return;
 
-  let promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
-                                .getService(Components.interfaces.nsIPromptService);
-  if (promptService &&
-      promptService.confirm(window, brandBundle.getString("brandShortName"),
-                                    readSmimeBundle.getString("ImapOnDemand")))
+  if (Services.prompt.confirm(window, brandBundle.getString("brandShortName"),
+                              readSmimeBundle.getString("ImapOnDemand")))
+  {
     gDBView.reloadMessageWithAllParts();
+  }
 }
 
 function showMessageReadSecurityInfo()
 {
   let gSignedUINode = document.getElementById("signedHdrIcon");
   if (gSignedUINode && gSignedUINode.getAttribute("signed") == "unknown")
   {
     showImapSignatureUnknown();
diff --git a/mailnews/extensions/smime/content/msgReadSecurityInfo.js b/mailnews/extensions/smime/content/msgReadSecurityInfo.js
--- a/mailnews/extensions/smime/content/msgReadSecurityInfo.js
+++ b/mailnews/extensions/smime/content/msgReadSecurityInfo.js
@@ -66,22 +66,22 @@ function onLoad()
   var isupport = pkiParams.getISupportAtIndex(1);
   if (isupport) {
     gSignerCert = isupport.QueryInterface(nsIX509Cert);
   }
   isupport = pkiParams.getISupportAtIndex(2);
   if (isupport) {
     gEncryptionCert = isupport.QueryInterface(nsIX509Cert);
   }
-  
+
   params = pkiParams.QueryInterface(nsIDialogParamBlock);
-  
+
   gSignatureStatus = params.GetInt(1);
   gEncryptionStatus = params.GetInt(2);
-  
+
   var bundle = document.getElementById("bundle_smime_read_info");
 
   if (bundle) {
     var sigInfoLabel = null;
     var sigInfoHeader = null;
     var sigInfo = null;
     var sigInfo_clueless = false;
 
@@ -142,27 +142,27 @@ function onLoad()
       case nsICMSMessageErrors.VERIFY_ERROR_PROCESSING:
       case nsICMSMessageErrors.VERIFY_MALFORMED_SIGNATURE:
         sigInfoLabel = "SIInvalidLabel";
         sigInfoHeader = "SIInvalidHeader";
         sigInfo_clueless = true;
         break;
     }
 
-    
+
     document.getElementById("signatureLabel").value = 
       bundle.getString(sigInfoLabel);
 
     var label;
     if (sigInfoHeader) {
       label = document.getElementById("signatureHeader");
       label.collapsed = false;
       label.value = bundle.getString(sigInfoHeader);
     }
-    
+
     var str;
     if (sigInfo) {
       str = bundle.getString(sigInfo);
     }
     else if (sigInfo_clueless) {
       str = bundle.getString("SIClueless") + " (" + gSignatureStatus + ")";
     }
     setText("signatureExplanation", str);
@@ -200,26 +200,26 @@ function onLoad()
     document.getElementById("encryptionLabel").value = 
       bundle.getString(encInfoLabel);
 
     if (encInfoHeader) {
       label = document.getElementById("encryptionHeader");
       label.collapsed = false;
       label.value = bundle.getString(encInfoHeader);
     }
-    
+
     if (encInfo) {
       str = bundle.getString(encInfo);
     }
     else if (encInfo_clueless) {
       str = bundle.getString("EIClueless");
     }
     setText("encryptionExplanation", str);
   }
-  
+
   if (gSignerCert) {
     document.getElementById("signatureCert").collapsed = false;
     if (gSignerCert.subjectName) {
       document.getElementById("signedBy").value = gSignerCert.commonName;
     }
     if (gSignerCert.emailAddress) {
       document.getElementById("signerEmail").value = gSignerCert.emailAddress;
     }
