# HG changeset patch
# User Blake Kaplan <mrbkap@gmail.com>
# Date 1269297997 25200
# Node ID 2cf18052b8ee839900551edb876866ab2695ee49
# Parent d6d331e05fcae961ea217393d67c1881be47fa04
Bug 546573 - EnsureInnerWindow from wrappers. r=jst sr=bzbarsky

diff --git a/content/html/content/test/test_bug430351.html b/content/html/content/test/test_bug430351.html
--- a/content/html/content/test/test_bug430351.html
+++ b/content/html/content/test/test_bug430351.html
@@ -75,16 +75,23 @@ var focusableElements = [
     "<iframe src=\"about:blank\"></iframe>",
     "<iframe src=\"about:blank\" disabled></iframe>",
     "<iframe src=\"about:blank\" tabindex=\"-1\"></iframe>",
     "<iframe src=\"about:blank\" tabindex=\"0\"></iframe>",
     "<iframe src=\"about:blank\" tabindex=\"0\" disabled></iframe>",
     "<iframe src=\"about:blank\" tabindex=\"1\"></iframe>",
     "<iframe src=\"about:blank\" contenteditable=\"true\"></iframe>",
 
+    "<iframe></iframe>",
+    "<iframe tabindex=\"-1\"></iframe>",
+    "<iframe tabindex=\"0\"></iframe>",
+    "<iframe tabindex=\"0\" disabled></iframe>",
+    "<iframe tabindex=\"1\"></iframe>",
+    "<iframe disabled></iframe>",
+
     "<img tabindex=\"-1\">",
     "<img tabindex=\"0\">",
     "<img tabindex=\"0\" disabled>",
     "<img tabindex=\"1\">",
 
     "<input>",
     "<input tabindex=\"-1\">",
     "<input tabindex=\"0\">",
@@ -174,23 +181,16 @@ var nonFocusableElements = [
 
     "<button type=\"submit\" tabindex=\"0\" disabled></button>",
     "<button type=\"submit\" disabled></button>",
 
     "<div></div>",
     "<div tabindex=\"0\" disabled></div>",
     "<div disabled></div>",
 
-    "<iframe></iframe>",
-    "<iframe tabindex=\"-1\"></iframe>",
-    "<iframe tabindex=\"0\"></iframe>",
-    "<iframe tabindex=\"0\" disabled></iframe>",
-    "<iframe tabindex=\"1\"></iframe>",
-    "<iframe disabled></iframe>",
-
     "<img>",
     "<img disabled>",
     "<img contenteditable=\"true\">",
 
     "<img usemap=\"#map\">",
     "<img usemap=\"#map\" tabindex=\"-1\">",
     "<img usemap=\"#map\" tabindex=\"0\">",
     "<img usemap=\"#map\" tabindex=\"0\" disabled>",
@@ -275,22 +275,29 @@ var focusableInContentEditable = [
     "<embed tabindex=\"-1\">",
     "<embed tabindex=\"0\">",
     "<embed tabindex=\"0\" disabled>",
     "<embed tabindex=\"1\">",
     "<embed disabled>",
     "<embed contenteditable=\"true\">",
 
     "<iframe src=\"about:blank\"></iframe>",
+    "<iframe></iframe>",
     "<iframe src=\"about:blank\" disabled></iframe>",
+    "<iframe disabled></iframe>",
     "<iframe src=\"about:blank\" tabindex=\"-1\"></iframe>",
+    "<iframe tabindex=\"-1\"></iframe>",
     "<iframe src=\"about:blank\" tabindex=\"0\"></iframe>",
+    "<iframe tabindex=\"0\"></iframe>",
     "<iframe src=\"about:blank\" tabindex=\"0\" disabled></iframe>",
+    "<iframe tabindex=\"0\" disabled></iframe>",
     "<iframe src=\"about:blank\" tabindex=\"1\"></iframe>",
+    "<iframe tabindex=\"1\"></iframe>",
     "<iframe src=\"about:blank\" contenteditable=\"true\"></iframe>",
+    "<iframe contenteditable=\"true\"></iframe>",
 
     "<img tabindex=\"-1\">",
     "<img tabindex=\"0\">",
     "<img tabindex=\"0\" disabled>",
     "<img tabindex=\"1\">",
 
     "<input>",
     "<input tabindex=\"-1\">",
diff --git a/js/src/xpconnect/src/XPCCrossOriginWrapper.cpp b/js/src/xpconnect/src/XPCCrossOriginWrapper.cpp
--- a/js/src/xpconnect/src/XPCCrossOriginWrapper.cpp
+++ b/js/src/xpconnect/src/XPCCrossOriginWrapper.cpp
@@ -385,16 +385,18 @@ WrapObject(JSContext *cx, JSObject *pare
     return JS_TRUE;
   }
 
   if (!wn &&
       !(wn = XPCWrappedNative::GetAndMorphWrappedNativeOfJSObject(cx, wrappedObj))) {
     return JS_TRUE;
   }
 
+  CheckWindow(wn);
+
   XPCJSRuntime *rt = nsXPConnect::GetRuntimeInstance();
 
   // The parent must be the inner global object for its scope.
   parent = JS_GetGlobalForObject(cx, parent);
 
   JSClass *clasp = parent->getClass();
   if (clasp->flags & JSCLASS_IS_EXTENDED) {
     JSExtendedClass *xclasp = reinterpret_cast<JSExtendedClass *>(clasp);
diff --git a/js/src/xpconnect/src/XPCNativeWrapper.cpp b/js/src/xpconnect/src/XPCNativeWrapper.cpp
--- a/js/src/xpconnect/src/XPCNativeWrapper.cpp
+++ b/js/src/xpconnect/src/XPCNativeWrapper.cpp
@@ -1250,16 +1250,18 @@ XPCNativeWrapper::AttachNewConstructorOb
                                     &found);
 }
 
 // static
 JSObject *
 XPCNativeWrapper::GetNewOrUsed(JSContext *cx, XPCWrappedNative *wrapper,
                                JSObject *scope, nsIPrincipal *aObjectPrincipal)
 {
+  CheckWindow(wrapper);
+
   if (aObjectPrincipal) {
     nsIScriptSecurityManager *ssm = GetSecurityManager();
 
     PRBool isSystem;
     nsresult rv = ssm->IsSystemPrincipal(aObjectPrincipal, &isSystem);
     if (NS_SUCCEEDED(rv) && !isSystem) {
       jsval v = OBJECT_TO_JSVAL(wrapper->GetFlatJSObject());
       if (!CreateExplicitWrapper(cx, wrapper, true, &v)) {
diff --git a/js/src/xpconnect/src/XPCSafeJSObjectWrapper.cpp b/js/src/xpconnect/src/XPCSafeJSObjectWrapper.cpp
--- a/js/src/xpconnect/src/XPCSafeJSObjectWrapper.cpp
+++ b/js/src/xpconnect/src/XPCSafeJSObjectWrapper.cpp
@@ -306,16 +306,22 @@ WrapObject(JSContext *cx, JSObject *scop
     return ThrowException(NS_ERROR_INVALID_ARG, cx);
   }
 
   SLIM_LOG_WILL_MORPH(cx, objToWrap);
   if (IS_SLIM_WRAPPER(objToWrap) && !MorphSlimWrapper(cx, objToWrap)) {
     return ThrowException(NS_ERROR_FAILURE, cx);
   }
 
+  XPCWrappedNative *wn =
+    XPCWrappedNative::GetWrappedNativeOfJSObject(cx, objToWrap);
+  if (wn) {
+    CheckWindow(wn);
+  }
+
   JSObject *wrapperObj =
     JS_NewObjectWithGivenProto(cx, &SJOWClass.base, nsnull, scope);
 
   if (!wrapperObj) {
     // JS_NewObjectWithGivenProto already threw.
     return JS_FALSE;
   }
 
diff --git a/js/src/xpconnect/src/XPCWrapper.cpp b/js/src/xpconnect/src/XPCWrapper.cpp
--- a/js/src/xpconnect/src/XPCWrapper.cpp
+++ b/js/src/xpconnect/src/XPCWrapper.cpp
@@ -37,16 +37,17 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "XPCWrapper.h"
 #include "XPCNativeWrapper.h"
+#include "nsPIDOMWindow.h"
 
 namespace XPCWrapper {
 
 const PRUint32 sWrappedObjSlot = 1;
 const PRUint32 sFlagsSlot = 0;
 const PRUint32 sNumSlots = 2;
 JSFastNative sEvalNative = nsnull;
 
@@ -159,16 +160,45 @@ static JSClass IteratorClass = {
   JS_PropertyStub, JS_PropertyStub,
   JS_PropertyStub, JS_PropertyStub,
   JS_EnumerateStub, JS_ResolveStub,
   JS_ConvertStub, IteratorFinalize,
 
   JSCLASS_NO_OPTIONAL_MEMBERS
 };
 
+void
+CheckWindow(XPCWrappedNative *wn)
+{
+  JSClass *clasp = wn->GetFlatJSObject()->getClass();
+
+  // Censor objects that can't be windows.
+  switch (clasp->name[0]) {
+    case 'C': // ChromeWindow?
+      if (clasp->name[1] != 'h') {
+        return;
+      }
+
+      break;
+    case 'M': // ModalContentWindow
+      break;
+    case 'W': // Window
+      break;
+    default:
+      return;
+  }
+
+  nsCOMPtr<nsPIDOMWindow> pwin(do_QueryWrappedNative(wn));
+  if (!pwin || pwin->IsInnerWindow()) {
+    return;
+  }
+
+  pwin->EnsureInnerWindow();
+}
+
 JSBool
 RewrapObject(JSContext *cx, JSObject *scope, JSObject *obj, WrapperType hint,
              jsval *vp)
 {
   obj = UnsafeUnwrapSecurityWrapper(cx, obj);
   if (!obj) {
     // A wrapper wrapping NULL (such as XPCNativeWrapper.prototype).
     *vp = JSVAL_NULL;
diff --git a/js/src/xpconnect/src/XPCWrapper.h b/js/src/xpconnect/src/XPCWrapper.h
--- a/js/src/xpconnect/src/XPCWrapper.h
+++ b/js/src/xpconnect/src/XPCWrapper.h
@@ -413,16 +413,23 @@ WrapFunction(JSContext *cx, JSObject *wr
              JSBool isNativeWrapper)
 {
   return isNativeWrapper
          ? XPCNativeWrapper::WrapFunction(cx, funobj, v)
          : XPCCrossOriginWrapper::WrapFunction(cx, wrapperObj, funobj, v);
 }
 
 /**
+ * Given a JSObject that might represent a Window object, ensures that the
+ * window object has an inner window.
+ */
+void
+CheckWindow(XPCWrappedNative *wn);
+
+/**
  * Given a potentially-wrapped object, creates a wrapper for it.
  */
 JSBool
 RewrapObject(JSContext *cx, JSObject *scope, JSObject *obj, WrapperType hint,
              jsval *vp);
 
 JSObject *
 UnsafeUnwrapSecurityWrapper(JSContext *cx, JSObject *obj);
