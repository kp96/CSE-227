Index: netwerk/base/src/nsProxyAutoConfig.js
===================================================================
RCS file: /cvsroot/mozilla/netwerk/base/src/nsProxyAutoConfig.js,v
retrieving revision 1.46
diff -p -U8 -r1.46 nsProxyAutoConfig.js
--- netwerk/base/src/nsProxyAutoConfig.js	14 Mar 2007 18:47:44 -0000	1.46
+++ netwerk/base/src/nsProxyAutoConfig.js	14 Jun 2007 19:25:58 -0000
@@ -47,41 +47,16 @@
 const kDNS_CONTRACTID = "@mozilla.org/network/dns-service;1";
 const kPAC_CONTRACTID = "@mozilla.org/network/proxy-auto-config;1";
 const kPAC_CID = Components.ID("{63ac8c66-1dd2-11b2-b070-84d00d3eaece}");
 
 const nsISupports        = Components.interfaces.nsISupports;
 const nsIProxyAutoConfig = Components.interfaces.nsIProxyAutoConfig;
 const nsIDNSService      = Components.interfaces.nsIDNSService;
 
-// Loaded once per PAC script, this is a safe way for the supplied functions
-// that require chrome privileges to turn a random untrusted object into a
-// string.
-var safeToString = null;
-function myToString(thisp) {
-    return thisp + '';
-}
-
-// This is like safeToString, except that it calls a given function with a
-// given this and arguments.
-var callFunction = null;
-function myCall(fun) {
-    var args = [];
-    for (var i = 1; i < arguments.length; i++)
-        args.push(arguments[i]);
-    return fun.apply(this, args);
-}
-
-// Like the above, except that this gets a property off of an untrusted
-// object.
-var safeGetProperty = null;
-function myGet(thisp, id) {
-    return thisp[id];
-}
-
 // implementor of nsIProxyAutoConfig
 function nsProxyAutoConfig() {};
 
 nsProxyAutoConfig.prototype = {
     // sandbox in which we eval loaded autoconfig js file
     _sandBox: null, 
 
     // ptr to eval'ed FindProxyForURL function
@@ -92,64 +67,51 @@ nsProxyAutoConfig.prototype = {
             iid.Equals(nsISupports))
             return this;
         throw Components.results.NS_ERROR_NO_INTERFACE;
     },
 
     init: function(pacURI, pacText) {
         // remove PAC configuration if requested
         if (pacURI == "" || pacText == "") {
-            this._findProxyForURL = null;
             this._sandBox = null;
             return;
         }
 
         // allocate a fresh Sandbox to clear global scope for new PAC script
         this._sandBox = new Components.utils.Sandbox(pacURI);
         Components.utils.evalInSandbox(pacUtils, this._sandBox);
 
-        safeToString =
-            Components.utils.evalInSandbox("(" + myToString.toSource() + ")",
-                                           this._sandBox);
-        callFunction =
-            Components.utils.evalInSandbox("(" + myCall.toSource() + ")",
-                                           this._sandBox);
-
-        // Clone callFunction.call onto our callFunction so that the PAC
-        // script can't monkey with Function.prototype.call and confuse us.
-        callFunction.call = Function.prototype.call;
-
-        safeGetProperty =
-            Components.utils.evalInSandbox("(" + myGet.toSource() + ")",
-                                           this._sandBox);
-
         // add predefined functions to pac
         this._sandBox.importFunction(myIpAddress);
         this._sandBox.importFunction(dnsResolve);
         this._sandBox.importFunction(proxyAlert, "alert");
 
         // evaluate loaded js file
         Components.utils.evalInSandbox(pacText, this._sandBox);
-        this._findProxyForURL =
-            safeGetProperty(this._sandBox, "FindProxyForURL");
+
+        // We can no longer trust this._sandBox. Touching it directly can
+        // cause all sorts of pain, so wrap it in an XPCSafeJSObjectWrapper
+        // and do all of our work through there.
+        this._sandBox = new XPCSafeJSObjectWrapper(this._sandBox);
     },
 
     getProxyForURI: function(testURI, testHost) {
-        if (!this._findProxyForURL)
+        if (!("FindProxyForURL" in this._sandBox))
             return null;
 
         // Call the original function
-        return callFunction.call(this._sandBox, this._findProxyForURL,
-                                 testURI, testHost);
+        return this._sandBox.FindProxyForURL(testURI, testHost);
     }
 }
 
 function proxyAlert(msg) {
     // Ensure that we have a string.
-    msg = safeToString(msg);
+    if (typeof msg != "string")
+        msg = new XPCSafeJSObjectWraper(msg).toString();
 
     try {
         // It would appear that the console service is threadsafe.
         var cns = Components.classes["@mozilla.org/consoleservice;1"]
                             .getService(Components.interfaces.nsIConsoleService);
         cns.logStringMessage("PAC-alert: "+msg);
     } catch (e) {
         dump("PAC: proxyAlert ERROR: "+e+"\n");
@@ -162,17 +124,18 @@ function myIpAddress() {
         return dns.resolve(dns.myHostName, 0).getNextAddrAsString();
     } catch (e) {
         return '127.0.0.1';
     }
 }
 
 // wrapper for resolving hostnames called by PAC file
 function dnsResolve(host) {
-    host = safeToString(host);
+    if (typeof host != "string")
+        host = new XPCSafeJSObjectWrapper(host).toString();
 
     try {
         return dns.resolve(host, 0).getNextAddrAsString();
     } catch (e) {
         return null;
     }
 }
 
