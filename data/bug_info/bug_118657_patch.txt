? .DS_Store
? src/.DS_Store
Index: src/Makefile.in
===================================================================
RCS file: /cvsroot/mozilla/embedding/components/find/src/Makefile.in,v
retrieving revision 1.11
diff -u -r1.11 Makefile.in
--- src/Makefile.in	6 Nov 2002 02:59:38 -0000	1.11
+++ src/Makefile.in	18 Mar 2003 03:01:19 -0000
@@ -39,6 +39,9 @@
 		  necko \
 		  unicharutil \
 		  lwbrk \
+		  js \
+		  xpconnect \
+		  caps \
 		  $(NULL)
 
 CPPSRCS		= nsWebBrowserFind.cpp \
Index: src/nsWebBrowserFind.cpp
===================================================================
RCS file: /cvsroot/mozilla/embedding/components/find/src/nsWebBrowserFind.cpp,v
retrieving revision 1.23
diff -u -r1.23 nsWebBrowserFind.cpp
--- src/nsWebBrowserFind.cpp	1 Mar 2003 00:56:23 -0000	1.23
+++ src/nsWebBrowserFind.cpp	18 Mar 2003 03:01:19 -0000
@@ -30,11 +30,14 @@
 
 #include "nsIComponentManager.h"
 #include "nsIScriptGlobalObject.h"
+#include "nsIScriptSecurityManager.h"
+#include "nsIJSContextStack.h"
 #include "nsIInterfaceRequestor.h"
 #include "nsIInterfaceRequestorUtils.h"
 #include "nsIDOMWindow.h"
 #include "nsIDOMWindowInternal.h"
 #include "nsPIDOMWindow.h"
+#include "nsIURI.h"
 #include "nsIDocShell.h"
 #include "nsIEnumerator.h"
 #include "nsIDocShellTreeItem.h"
@@ -87,13 +90,12 @@
 /* boolean findNext (); */
 NS_IMETHODIMP nsWebBrowserFind::FindNext(PRBool *outDidFind)
 {
-    nsresult rv;
-
     NS_ENSURE_ARG_POINTER(outDidFind);
     *outDidFind = PR_FALSE;
 
     NS_ENSURE_TRUE(CanFindNext(), NS_ERROR_NOT_INITIALIZED);
 
+    nsresult rv = NS_OK;
     nsCOMPtr<nsIDOMWindow> searchFrame = do_QueryReferent(mCurrentSearchFrame);
     NS_ENSURE_TRUE(searchFrame, NS_ERROR_NOT_INITIALIZED);
 
@@ -624,13 +626,40 @@
 
     *aDidFind = PR_FALSE;
 
-    nsresult rv = NS_OK;
-    nsCOMPtr<nsIPresShell> presShell;
-
     nsCOMPtr<nsIDOMDocument> domDoc;    
-    rv = aWindow->GetDocument(getter_AddRefs(domDoc));
+    nsresult rv = aWindow->GetDocument(getter_AddRefs(domDoc));
+    NS_ENSURE_SUCCESS(rv, rv);
+    if (!domDoc) return NS_ERROR_FAILURE;
+
+    // Do security check, to ensure that the frame we're searching
+    // is from the same origin as the frame from which the Find is
+    // being run.
+
+    // Get JSContext from stack
+    nsCOMPtr<nsIJSContextStack> stack = do_GetService("@mozilla.org/js/xpc/ContextStack;1");
+    NS_ENSURE_TRUE(stack, NS_ERROR_FAILURE);
+
+    JSContext *cx = nsnull;
+    rv = stack->Peek(&cx);
+    NS_ENSURE_SUCCESS(rv, rv);
+    if (!cx)
+      return NS_ERROR_FAILURE;
+
+    // Get the security manager and do the same-origin check
+    nsCOMPtr<nsIScriptSecurityManager> secMan = do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);
     NS_ENSURE_SUCCESS(rv, rv);
-    NS_ENSURE_ARG_POINTER(domDoc);
+
+    // get a uri for the window
+    nsCOMPtr<nsIDocument> theDoc = do_QueryInterface(domDoc);
+    if (!theDoc) return NS_ERROR_FAILURE;
+
+    nsCOMPtr<nsIURI> docURI;
+    rv = theDoc->GetDocumentURL(getter_AddRefs(docURI));
+    NS_ENSURE_SUCCESS(rv, rv);
+    
+    rv = secMan->CheckSameOrigin(cx, docURI);
+    NS_ENSURE_SUCCESS(rv, rv);
+
 
     // if this is a different frame to last time, throw away the mTSFind
     // and make a new one. The nsIFindAndReplace is *not* stateless;
@@ -642,6 +671,8 @@
     rv = GetDocShellFromWindow(aWindow, getter_AddRefs(docShell));
     NS_ENSURE_SUCCESS(rv, rv);
     NS_ENSURE_ARG_POINTER(docShell);
+
+    nsCOMPtr<nsIPresShell> presShell;
     docShell->GetPresShell(getter_AddRefs(presShell));
     NS_ENSURE_ARG_POINTER(presShell);
 
