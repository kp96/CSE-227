Index: netwerk/base/src/nsProxyAutoConfig.js
===================================================================
RCS file: /cvsroot/mozilla/netwerk/base/src/nsProxyAutoConfig.js,v
retrieving revision 1.45
diff -p -U8 -r1.45 nsProxyAutoConfig.js
--- netwerk/base/src/nsProxyAutoConfig.js	9 Feb 2007 22:51:49 -0000	1.45
+++ netwerk/base/src/nsProxyAutoConfig.js	19 Feb 2007 01:26:49 -0000
@@ -58,19 +58,21 @@ const nsIDNSService      = Components.in
 var safeToString = null;
 function myToString(thisp) {
     return thisp + '';
 }
 
 // This is like safeToString, except that it calls a given function with a
 // given this and arguments.
 var callFunction = null;
-function myCall(fun, thisp) {
-    var args = Array.prototype.slice.call(arguments, 2);
-    return fun.apply(thisp, args);
+function myCall(fun) {
+    var args = [];
+    for (var i = 1; i < arguments.length; i++)
+        args.push(arguments[i]);
+    return fun.apply(this, args);
 }
 
 // Like the above, except that this gets a property off of an untrusted
 // object.
 var safeGetProperty = null;
 function myGet(thisp, id) {
     return thisp[id];
 }
@@ -105,16 +107,21 @@ nsProxyAutoConfig.prototype = {
         Components.utils.evalInSandbox(pacUtils, this._sandBox);
 
         safeToString =
             Components.utils.evalInSandbox("(" + myToString.toSource() + ")",
                                            this._sandBox);
         callFunction =
             Components.utils.evalInSandbox("(" + myCall.toSource() + ")",
                                            this._sandBox);
+
+        // Clone callFunction.call onto our callFunction so that the PAC
+        // script can't monkey with Function.prototype.call and confuse us.
+        callFunction.call = Function.prototype.call;
+
         safeGetProperty =
             Components.utils.evalInSandbox("(" + myGet.toSource() + ")",
                                            this._sandBox);
 
         // add predefined functions to pac
         this._sandBox.importFunction(myIpAddress);
         this._sandBox.importFunction(dnsResolve);
         this._sandBox.importFunction(proxyAlert, "alert");
@@ -125,18 +132,18 @@ nsProxyAutoConfig.prototype = {
             safeGetProperty(this._sandBox, "FindProxyForURL");
     },
 
     getProxyForURI: function(testURI, testHost) {
         if (!this._findProxyForURL)
             return null;
 
         // Call the original function
-        return callFunction(this._findProxyForURL, this._sandBox,
-                            testURI, testHost);
+        return callFunction.call(this._sandBox, this._findProxyForURL,
+                                 testURI, testHost);
     }
 }
 
 function proxyAlert(msg) {
     // Ensure that we have a string.
     msg = safeToString(msg);
 
     try {
