Index: modules/oji/src/ProxyClassLoader.cpp
===================================================================
RCS file: /cvsroot/mozilla/modules/oji/src/ProxyClassLoader.cpp,v
retrieving revision 1.17
diff -p -U8 -r1.17 ProxyClassLoader.cpp
--- modules/oji/src/ProxyClassLoader.cpp	28 Nov 2005 23:56:39 -0000	1.17
+++ modules/oji/src/ProxyClassLoader.cpp	22 Jun 2006 19:50:51 -0000
@@ -1,9 +1,10 @@
 /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* vim: set ts=4 sw=4 et tw=78: */
 /* ***** BEGIN LICENSE BLOCK *****
  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
  *
  * The contents of this file are subject to the Mozilla Public License Version
  * 1.1 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
  *
@@ -57,45 +58,67 @@
  * hopefully aren't any security concerns with exposing this to scripts,
  * as the constructor is private, and the class loader itself can
  * only load classes from the document's URL and below.
  */
 static nsresult getScriptClassLoader(JNIEnv* env, jobject* classloader)
 {
     // get the current JSContext from the context stack service.
     nsresult rv;
-    nsCOMPtr<nsIJSContextStack> contexts = do_GetService("@mozilla.org/js/xpc/ContextStack;1", &rv);
+    nsCOMPtr<nsIJSContextStack> contexts =
+        do_GetService("@mozilla.org/js/xpc/ContextStack;1", &rv);
     if (NS_FAILED(rv)) return rv;
     JSContext* cx;
     rv = contexts->Peek(&cx);
     if (NS_FAILED(rv)) return rv;
     
-    // lookup "window.navigator.javaclasses", if it exists, this is the class loader bound
-    // to this page.
+    // lookup "window.navigator.javaclasses", if it exists, this is the class
+    // loader bound to this page.
     JSObject* window = JS_GetGlobalObject(cx);
     if (!window) return NS_ERROR_FAILURE;
 
-    jsval navigator;
-    if (!JS_GetProperty(cx, window, "navigator", &navigator)) return NS_ERROR_FAILURE;
+    jsval navigator = JSVAL_NULL;
+    if (!JS_LookupProperty(cx, window, "navigator", &navigator))
+        return NS_ERROR_FAILURE;
     
-    jsval javaclasses;
-    if (JS_GetProperty(cx, JSVAL_TO_OBJECT(navigator), "javaclasses", &javaclasses)) {
-        // unwrap this, the way LiveConnect does it.
+    jsval javaclasses = JSVAL_NULL;
+    if (!JSVAL_IS_PRIMITIVE(navigator)) {
+        uintN attrs;
+        JSBool found;
+
+        // Make sure that we pull out the correct javaclasses object that we
+        // set.  Since content can't spoof READONLY or PERMANANT properties,
+        // their presence on this property indicates that this truely is the
+        // correct object.
+        JSObject *obj = JSVAL_TO_OBJECT(navigator);
+        if (!JS_GetPropertyAttributes(cx, obj, "javaclasses", &attrs, &found))
+            return NS_ERROR_FAILURE;
+        if ((~attrs & (JSPROP_READONLY | JSPROP_PERMANENT)) == 0 &&
+            !JS_GetProperty(cx, obj, "javaclasses", &javaclasses)) {
+            return NS_ERROR_FAILURE;
+        }
+
+        // Unwrap this, the way LiveConnect does it. Note that this function
+        // checks if javaclasses is primitive or not.
         if (JSJ_ConvertJSValueToJavaObject(cx, javaclasses, classloader))
             return NS_OK;
     }
 
-    // use default netscape.oji.ProxyClassLoaderFactory (which is no longer supported in recent JRE) as the classloader
-    jclass netscape_oji_ProxyClassLoaderFac = env->FindClass("netscape/oji/ProxyClassLoaderFactory");
+    // use default netscape.oji.ProxyClassLoaderFactory (which is no longer
+    // supported in recent JRE) as the classloader
+    jclass netscape_oji_ProxyClassLoaderFac =
+        env->FindClass("netscape/oji/ProxyClassLoaderFactory");
     if (!netscape_oji_ProxyClassLoaderFac) {
         env->ExceptionClear();
         return NS_ERROR_FAILURE;
     }
-    jmethodID staticMethodID = env->GetStaticMethodID(netscape_oji_ProxyClassLoaderFac, "createClassLoader",
-						      "(Ljava/lang/String;)Ljava/lang/ClassLoader;");
+    jmethodID staticMethodID =
+        env->GetStaticMethodID(netscape_oji_ProxyClassLoaderFac,
+                               "createClassLoader",
+                               "(Ljava/lang/String;)Ljava/lang/ClassLoader;");
     if (!staticMethodID) {
         env->ExceptionClear();
         return NS_ERROR_FAILURE;
     }
 
     // Obtain the URL of the document of the currently running script. This will
     // be used as the default location to download classes from.
     nsCOMPtr<nsIScriptSecurityManager> secMan =
@@ -125,40 +148,46 @@ static nsresult getScriptClassLoader(JNI
     if (NS_FAILED(rv)) return rv;
     
     jstring jspec = env->NewStringUTF(spec.get());
     if (!jspec) {
         env->ExceptionClear();
         return NS_ERROR_FAILURE;
     }
 
-    // In order to have permission to create classloader, we need to grant enough permission
+    // In order to have permission to create classloader, we need to grant
+    // enough permission
     nsISecurityContext* origContext = nsnull;
     if (NS_FAILED(GetSecurityContext(env, &origContext))) {
-	return NS_ERROR_FAILURE;
+        return NS_ERROR_FAILURE;
     }
     nsCOMPtr<nsISecurityContext> nullContext(new nsCNullSecurityContext());
     if (!nullContext) {
-	return NS_ERROR_OUT_OF_MEMORY;
+        return NS_ERROR_OUT_OF_MEMORY;
     }
     
     SetSecurityContext(env, nullContext);
-    *classloader = env->CallStaticObjectMethod(netscape_oji_ProxyClassLoaderFac, staticMethodID, jspec);
+    *classloader = env->CallStaticObjectMethod(netscape_oji_ProxyClassLoaderFac,
+                                               staticMethodID, jspec);
     SetSecurityContext(env, origContext);
     if (!*classloader) {
         env->ExceptionClear();
         return NS_ERROR_FAILURE;
     }
 
     env->DeleteLocalRef(jspec);
     env->DeleteLocalRef(netscape_oji_ProxyClassLoaderFac);
     
     // now, cache the class loader in "window.navigator.javaclasses"
-    if (JSJ_ConvertJavaObjectToJSValue(cx, *classloader, &javaclasses)) {
-        JS_SetProperty(cx, JSVAL_TO_OBJECT(navigator), "javaclasses", &javaclasses);
+    if (!JSVAL_IS_PRIMITIVE(navigator) &&
+        JSJ_ConvertJavaObjectToJSValue(cx, *classloader, &javaclasses) &&
+        !JS_DefineProperty(cx, JSVAL_TO_OBJECT(navigator), "javaclasses",
+                           javaclasses, NULL, NULL, JSPROP_ENUMERATE |
+                           JSPROP_READONLY | JSPROP_PERMANENT)) {
+        return NS_ERROR_FAILURE;
     }
     
     return NS_OK;
 }
 
 jclass ProxyFindClass(JNIEnv* env, const char* name)
 {
     do {
