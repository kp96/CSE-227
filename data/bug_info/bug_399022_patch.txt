Index: mozilla/security/manager/ssl/src/nsCertTree.h
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsCertTree.h,v
retrieving revision 1.15
diff -u -1 -0 -p -r1.15 nsCertTree.h
--- mozilla/security/manager/ssl/src/nsCertTree.h	3 Oct 2007 11:49:55 -0000	1.15
+++ mozilla/security/manager/ssl/src/nsCertTree.h	8 Oct 2007 22:48:11 -0000
@@ -147,23 +147,24 @@ private:
   nsCOMPtr<nsITreeBoxObject>  mTree;
   nsCOMPtr<nsITreeSelection>  mSelection;
   treeArrayEl                *mTreeArray;
   PRInt32                         mNumOrgs;
   PRInt32                         mNumRows;
   PLDHashTable mCompareCache;
   nsCOMPtr<nsINSSComponent> mNSSComponent;
   nsCOMPtr<nsICertOverrideService> mOverrideService;
 
   treeArrayEl *GetThreadDescAtIndex(PRInt32 _index);
-  nsIX509Cert *GetCertAtIndex(PRInt32 _index, PRInt32 *outAbsoluteCertOffset = nsnull);
-  nsCertTreeDispInfo *GetDispInfoAtIndex(PRInt32 index,  
-                                         PRInt32 *outAbsoluteCertOffset = nsnull);
+  already_AddRefed<nsIX509Cert> 
+    GetCertAtIndex(PRInt32 _index, PRInt32 *outAbsoluteCertOffset = nsnull);
+  already_AddRefed<nsCertTreeDispInfo> 
+    GetDispInfoAtIndex(PRInt32 index, PRInt32 *outAbsoluteCertOffset = nsnull);
   void FreeCertArray();
   nsresult UpdateUIContents();
 
   nsresult GetCertsByTypeFromCertList(CERTCertList *aCertList,
                                       PRUint32 aType,
                                       nsCertCompareFunc  aCertCmpFn,
                                       void              *aCertCmpFnArg);
 
   nsCOMPtr<nsIMutableArray> mCellText;
 
Index: mozilla/security/manager/ssl/src/nsCertTree.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsCertTree.cpp,v
retrieving revision 1.59
diff -u -1 -0 -p -r1.59 nsCertTree.cpp
--- mozilla/security/manager/ssl/src/nsCertTree.cpp	3 Oct 2007 11:49:55 -0000	1.59
+++ mozilla/security/manager/ssl/src/nsCertTree.cpp	8 Oct 2007 22:48:12 -0000
@@ -284,38 +284,38 @@ nsCertTree::GetThreadDescAtIndex(PRInt32
     }
     idx++;
     if (idx > index) break;
   }
   return nsnull;
 }
 
 //  GetCertAtIndex
 //
 //  If the row at index is a cert, return that cert.  Otherwise, return null.
-nsIX509Cert *
+already_AddRefed<nsIX509Cert>
 nsCertTree::GetCertAtIndex(PRInt32 index, PRInt32 *outAbsoluteCertOffset)
 {
   nsRefPtr<nsCertTreeDispInfo> certdi =
-    getter_AddRefs(GetDispInfoAtIndex(index, outAbsoluteCertOffset));
+    GetDispInfoAtIndex(index, outAbsoluteCertOffset);
   if (!certdi)
     return nsnull;
 
   nsIX509Cert *rawPtr = nsnull;
   if (certdi->mAddonInfo) {
     rawPtr = certdi->mAddonInfo->mCert;
     NS_IF_ADDREF(rawPtr);
   }
   return rawPtr;
 }
 
 //  If the row at index is a cert, return that cert.  Otherwise, return null.
-nsCertTreeDispInfo *
+already_AddRefed<nsCertTreeDispInfo>
 nsCertTree::GetDispInfoAtIndex(PRInt32 index, 
                                PRInt32 *outAbsoluteCertOffset)
 {
   int i, idx = 0, cIndex = 0, nc;
   if (index < 0) return nsnull;
   // Loop over the threads
   for (i=0; i<mNumOrgs; i++) {
     if (index == idx) return nsnull; // index is for thread
     idx++; // get past the thread
     nc = (mTreeArray[i].open) ? mTreeArray[i].numChildren : 0;
@@ -599,21 +599,20 @@ nsCertTree::GetCertsByTypeFromCertList(C
       if (wantThisCert) {
         nsCertTreeDispInfo *certdi = new nsCertTreeDispInfo;
         if (!certdi)
           return NS_ERROR_OUT_OF_MEMORY;
 
         certdi->mAddonInfo = certai;
         certai->mUsageCount++;
         certdi->mTypeOfEntry = nsCertTreeDispInfo::direct_db;
         // not necessary: certdi->mHostWithPort.Clear();
         certdi->mOverrideBits = nsCertOverride::ob_None;
-        NS_IF_ADDREF(certdi);
         mDispInfo.InsertElementAt(InsertPosition, certdi);
         ++count;
         ++InsertPosition;
       }
       if (addOverrides && cos) {
         nsCertAndArrayAndPositionAndCounterAndTracker cap;
         cap.certai = certai;
         cap.array = &mDispInfo;
         cap.position = InsertPosition;
         cap.counter = 0;
@@ -827,24 +826,21 @@ nsCertTree::DeleteEntryObject(PRUint32 i
             if (srv == SECSuccess) {
               CERT_ChangeCertTrust(CERT_GetDefaultCertDB(), nsscert, &trust);
             }
           }
         }
         else {
           canRemoveEntry = PR_TRUE;
         }
       }
 
-      nsCertTreeDispInfo *certdi2 = mDispInfo.ElementAt(certIndex);
       mDispInfo.RemoveElementAt(certIndex);
-      NS_IF_RELEASE(certdi2);
-      certdi2 = 0;
 
       if (canRemoveEntry) {
         RemoveCacheEntry(cert);
         certdb->DeleteCertificate(cert);
       }
 
       delete [] mTreeArray;
       mTreeArray = nsnull;
       return UpdateUIContents();
     }
@@ -861,46 +857,46 @@ nsCertTree::DeleteEntryObject(PRUint32 i
 //
 //  Begin nsITreeView methods
 //
 /////////////////////////////////////////////////////////////////////////////
 
 /* nsIX509Cert getCert(in unsigned long index); */
 NS_IMETHODIMP
 nsCertTree::GetCert(PRUint32 aIndex, nsIX509Cert **_cert)
 {
   NS_ENSURE_ARG(_cert);
-  *_cert = GetCertAtIndex(aIndex);
+  *_cert = GetCertAtIndex(aIndex).get();
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCertTree::GetTreeItem(PRUint32 aIndex, nsICertTreeItem **_treeitem)
 {
   NS_ENSURE_ARG(_treeitem);
 
   nsRefPtr<nsCertTreeDispInfo> certdi = 
-    getter_AddRefs(GetDispInfoAtIndex(aIndex));
+    GetDispInfoAtIndex(aIndex);
   if (!certdi)
     return NS_ERROR_FAILURE;
 
   *_treeitem = certdi;
   NS_IF_ADDREF(*_treeitem);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCertTree::IsHostPortOverride(PRUint32 aIndex, PRBool *_retval)
 {
   NS_ENSURE_ARG(_retval);
 
   nsRefPtr<nsCertTreeDispInfo> certdi = 
-    getter_AddRefs(GetDispInfoAtIndex(aIndex));
+    GetDispInfoAtIndex(aIndex);
   if (!certdi)
     return NS_ERROR_FAILURE;
 
   *_retval = (certdi->mTypeOfEntry == nsCertTreeDispInfo::host_port_override);
   return NS_OK;
 }
 
 /* readonly attribute long rowCount; */
 NS_IMETHODIMP 
 nsCertTree::GetRowCount(PRInt32 *aRowCount)
@@ -1107,21 +1103,21 @@ nsCertTree::GetCellText(PRInt32 row, nsI
   if (el != nsnull) {
     if (NS_LITERAL_STRING("certcol").Equals(colID))
       _retval.Assign(el->orgName);
     else
       _retval.Truncate();
     return NS_OK;
   }
 
   PRInt32 absoluteCertOffset;
   nsRefPtr<nsCertTreeDispInfo> certdi = 
-    getter_AddRefs(GetDispInfoAtIndex(row, &absoluteCertOffset));
+    GetDispInfoAtIndex(row, &absoluteCertOffset);
   if (!certdi)
     return NS_ERROR_FAILURE;
 
   nsCOMPtr<nsIX509Cert> cert = nsnull;
   if (certdi->mAddonInfo) {
     cert = certdi->mAddonInfo->mCert;
   }
 
   PRInt32 colIndex;
   col->GetIndex(&colIndex);
@@ -1389,21 +1385,21 @@ nsCertTree::dumpMap()
     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("OPEN[%d]", mTreeArray[i].open));
     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("INDEX[%d]", mTreeArray[i].certIndex));
     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("NCHILD[%d]", mTreeArray[i].numChildren));
   }
   for (int i=0; i<mNumRows; i++) {
     treeArrayEl *el = GetThreadDescAtIndex(i);
     if (el != nsnull) {
       nsAutoString td(el->orgName);
       PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("thread desc[%d]: %s", i, NS_LossyConvertUTF16toASCII(td).get()));
     }
-    nsCOMPtr<nsIX509Cert> ct = getter_AddRefs(GetCertAtIndex(i));
+    nsCOMPtr<nsIX509Cert> ct = GetCertAtIndex(i);
     if (ct != nsnull) {
       PRUnichar *goo;
       ct->GetCommonName(&goo);
       nsAutoString doo(goo);
       PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("cert [%d]: %s", i, NS_LossyConvertUTF16toASCII(doo).get()));
     }
   }
 }
 #endif
 
