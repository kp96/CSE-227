{"bug_id":289655,"commitHash":"f02076f","commit_info":{"sha":"f02076fb6fd44802e45cf1da42f3407f5ddb25fe","commit":{"author":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2005-11-16T02:12:21Z"},"committer":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2005-11-16T02:12:21Z"},"message":"Get principals for XPConnect wrapped natives off their scope instead of walking\ntheir parent chain.  Add some asserts to check that this actually does give the\nsame result, which it should with splitwindow.  Bug 289655, r=dbradley, sr=jst","tree":{"sha":"8b1e10f917cafa127c7161170ddd0c81fd5847b3","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/8b1e10f917cafa127c7161170ddd0c81fd5847b3"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/f02076fb6fd44802e45cf1da42f3407f5ddb25fe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/f02076fb6fd44802e45cf1da42f3407f5ddb25fe","html_url":"https://github.com/mozilla/gecko-dev/commit/f02076fb6fd44802e45cf1da42f3407f5ddb25fe","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/comments","author":null,"committer":null,"parents":[{"sha":"e28b1599b2859f59427264618c181e2173837da1","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/e28b1599b2859f59427264618c181e2173837da1","html_url":"https://github.com/mozilla/gecko-dev/commit/e28b1599b2859f59427264618c181e2173837da1"}],"stats":{"total":157,"additions":139,"deletions":18},"files":[{"sha":"3c144cc0cbe122a4f25f2fede52b2f082c602c72","filename":"caps/include/nsScriptSecurityManager.h","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/mozilla/gecko-dev/blob/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/caps/include/nsScriptSecurityManager.h","raw_url":"https://github.com/mozilla/gecko-dev/raw/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/caps/include/nsScriptSecurityManager.h","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/caps/include/nsScriptSecurityManager.h?ref=f02076fb6fd44802e45cf1da42f3407f5ddb25fe","patch":"@@ -386,7 +386,11 @@ class nsScriptSecurityManager : public nsIScriptSecurityManager,\n     // Returns null if a principal cannot be found; generally callers\n     // should error out at that point.\n     static nsIPrincipal*\n-    doGetObjectPrincipal(JSContext *cx, JSObject *obj);\n+    doGetObjectPrincipal(JSContext *cx, JSObject *obj\n+#ifdef DEBUG\n+                         , PRBool aAllowShortCircuit = PR_TRUE\n+#endif\n+                         );\n \n     // Returns null if a principal cannot be found.  Note that rv can be NS_OK\n     // when this happens -- this means that there was no JS running."},{"sha":"998a3d4ef34e3b7dc676d728b87ddd228fbcbc3c","filename":"caps/src/nsScriptSecurityManager.cpp","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/mozilla/gecko-dev/blob/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/caps/src/nsScriptSecurityManager.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/caps/src/nsScriptSecurityManager.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/caps/src/nsScriptSecurityManager.cpp?ref=f02076fb6fd44802e45cf1da42f3407f5ddb25fe","patch":"@@ -2083,7 +2083,11 @@ nsScriptSecurityManager::GetObjectPrincipal(JSContext *aCx, JSObject *aObj,\n \n // static\n nsIPrincipal*\n-nsScriptSecurityManager::doGetObjectPrincipal(JSContext *aCx, JSObject *aObj)\n+nsScriptSecurityManager::doGetObjectPrincipal(JSContext *aCx, JSObject *aObj\n+#ifdef DEBUG\n+                                              , PRBool aAllowShortCircuit\n+#endif\n+                                              )\n {\n     NS_ASSERTION(aCx && aObj, \"Bad call to doGetObjectPrincipal()!\");\n     nsIPrincipal* result = nsnull;\n@@ -2097,7 +2101,6 @@ nsScriptSecurityManager::doGetObjectPrincipal(JSContext *aCx, JSObject *aObj)\n         {\n             // No need to refcount |priv| here.\n             nsISupports *priv = (nsISupports *)JS_GetPrivate(aCx, aObj);\n-            nsCOMPtr<nsIScriptObjectPrincipal> objPrin;\n \n             /*\n              * If it's a wrapped native (as most\n@@ -2107,16 +2110,37 @@ nsScriptSecurityManager::doGetObjectPrincipal(JSContext *aCx, JSObject *aObj)\n             nsCOMPtr<nsIXPConnectWrappedNative> xpcWrapper =\n                 do_QueryInterface(priv);\n \n-            if (xpcWrapper)\n+            if (NS_LIKELY(xpcWrapper != nsnull))\n             {\n-                objPrin = do_QueryWrappedNative(xpcWrapper);\n+#ifdef DEBUG\n+                if (aAllowShortCircuit)\n+                {\n+#endif\n+                    result = xpcWrapper->GetObjectPrincipal();\n+#ifdef DEBUG\n+                }\n+                else\n+                {\n+                    nsCOMPtr<nsIScriptObjectPrincipal> objPrin;\n+                    objPrin = do_QueryWrappedNative(xpcWrapper);\n+                    if (objPrin)\n+                    {\n+                        result = objPrin->GetPrincipal();\n+                    }                    \n+                }\n+#endif\n             }\n             else\n             {\n+                nsCOMPtr<nsIScriptObjectPrincipal> objPrin;\n                 objPrin = do_QueryInterface(priv);\n+                if (objPrin)\n+                {\n+                    result = objPrin->GetPrincipal();\n+                }\n             }\n \n-            if (objPrin && (result = objPrin->GetPrincipal()))\n+            if (result)\n             {\n                 break;\n             }\n@@ -2125,6 +2149,10 @@ nsScriptSecurityManager::doGetObjectPrincipal(JSContext *aCx, JSObject *aObj)\n         aObj = JS_GetParent(aCx, aObj);\n     } while (aObj);\n \n+    NS_ASSERTION(!aAllowShortCircuit ||\n+                 result == doGetObjectPrincipal(aCx, aObj, PR_FALSE),\n+                 \"Principal mismatch.  Not good\");\n+    \n     return result;\n }\n "},{"sha":"0999d598c01293592ee268e76bce53dac9ca9fc3","filename":"js/src/xpconnect/idl/nsIXPConnect.idl","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/mozilla/gecko-dev/blob/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/idl/nsIXPConnect.idl","raw_url":"https://github.com/mozilla/gecko-dev/raw/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/idl/nsIXPConnect.idl","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/js/src/xpconnect/idl/nsIXPConnect.idl?ref=f02076fb6fd44802e45cf1da42f3407f5ddb25fe","patch":"@@ -147,14 +147,20 @@ interface nsIXPConnectWrappedNative;\n interface nsIInterfaceInfo;\n interface nsIXPCSecurityManager;\n \n+%{C++\n+#ifndef XPCONNECT_STANDALONE\n+class nsIPrincipal;\n+#endif\n+%}\n+\n /***************************************************************************/\n [uuid(8916a320-d118-11d3-8f3a-0010a4e73d9a)]\n interface nsIXPConnectJSObjectHolder : nsISupports\n {\n     readonly attribute JSObjectPtr      JSObject;\n };\n \n-[uuid(215DBE02-94A7-11d2-BA58-00805F8A5DD7)]\n+[uuid(7021D99D-6344-4CC0-96E7-943ED58792B8)]\n interface nsIXPConnectWrappedNative : nsIXPConnectJSObjectHolder\n {\n     /* attribute 'JSObject' inherited from nsIXPConnectJSObjectHolder */\n@@ -179,12 +185,28 @@ interface nsIXPConnectWrappedNative : nsIXPConnectJSObjectHolder\n      */\n     voidPtrPtr GetSecurityInfoAddress();\n \n+    /*\n+     * NOTE: Add new IDL methods _before_ the C++ block below if you\n+     * add them.  Otherwise the vtable won't be what xpidl thinks it\n+     * is, since GetObjectPrincipal() is virtual.\n+     */\n+\n %{C++\n     /**\n      * Faster access to the native object from C++.  Will never return null.\n      */\n     nsISupports* Native() const { return mIdentity; }\n \n+#ifndef XPCONNECT_STANDALONE\n+    /**\n+     * Get the object principal for this wrapper.  Note that this may well end\n+     * up being null; in that case one should seek principals elsewhere.  Null\n+     * here does NOT indicate system principal or no principals at all, just\n+     * that this wrapper doesn't have an intrinsic one.\n+     */\n+    virtual nsIPrincipal* GetObjectPrincipal() const = 0;   \n+#endif\n+    \n protected:\n     nsISupports *mIdentity;\n public:"},{"sha":"6462dac1b417e89f4310cc41238c86a3f62e6341","filename":"js/src/xpconnect/src/xpccomponents.cpp","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/mozilla/gecko-dev/blob/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/src/xpccomponents.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/src/xpccomponents.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/js/src/xpconnect/src/xpccomponents.cpp?ref=f02076fb6fd44802e45cf1da42f3407f5ddb25fe","patch":"@@ -2250,16 +2250,8 @@ nsXPCComponents_utils_Sandbox::CallOrConstruct(nsIXPConnectWrappedNative *wrappe\n     if (!sandbox)\n         return ThrowAndFail(NS_ERROR_XPC_UNEXPECTED, cx, _retval);\n \n-    rv = xpc->InitClasses(cx, sandbox);\n-    if (NS_SUCCEEDED(rv) &&\n-        !JS_DefineFunctions(cx, sandbox, SandboxFunctions)) {\n-        rv = NS_ERROR_FAILURE;\n-    }\n-    if (NS_FAILED(rv))\n-        return ThrowAndFail(NS_ERROR_XPC_UNEXPECTED, cx, _retval);\n-\n+    // Make sure to set up principals on the sandbox before initing classes\n     nsIScriptObjectPrincipal *sop = nsnull;\n-\n     if (JSVAL_IS_STRING(argv[0])) {\n         JSString *codebasestr = JSVAL_TO_STRING(argv[0]);\n         nsCAutoString codebase(JS_GetStringBytes(codebasestr),\n@@ -2316,6 +2308,17 @@ nsXPCComponents_utils_Sandbox::CallOrConstruct(nsIXPConnectWrappedNative *wrappe\n         return ThrowAndFail(NS_ERROR_XPC_UNEXPECTED, cx, _retval);\n     }\n \n+    // After this point |sop| will be released when |sandbox| is\n+    // finalized, so no need to worry about it from now on.\n+\n+    rv = xpc->InitClasses(cx, sandbox);\n+    if (NS_SUCCEEDED(rv) &&\n+        !JS_DefineFunctions(cx, sandbox, SandboxFunctions)) {\n+        rv = NS_ERROR_FAILURE;\n+    }\n+    if (NS_FAILED(rv))\n+        return ThrowAndFail(NS_ERROR_XPC_UNEXPECTED, cx, _retval);\n+\n     if (vp)\n         *vp = OBJECT_TO_JSVAL(sandbox);\n "},{"sha":"92f85cbb75a0b3a94f1362566f3fddcf9caf9379","filename":"js/src/xpconnect/src/xpcprivate.h","status":"modified","additions":27,"deletions":2,"changes":29,"blob_url":"https://github.com/mozilla/gecko-dev/blob/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/src/xpcprivate.h","raw_url":"https://github.com/mozilla/gecko-dev/raw/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/src/xpcprivate.h","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/js/src/xpconnect/src/xpcprivate.h?ref=f02076fb6fd44802e45cf1da42f3407f5ddb25fe","patch":"@@ -109,8 +109,11 @@\n #include \"nsSupportsArray.h\"\n \n #include \"nsIXPCScriptNotify.h\"  // used to notify: ScriptEvaluated\n+\n #ifndef XPCONNECT_STANDALONE\n #define XPC_USE_SECURITY_CHECKED_COMPONENT\n+#include \"nsIScriptObjectPrincipal.h\"\n+#include \"nsIPrincipal.h\"\n #endif\n \n #ifdef XPC_USE_SECURITY_CHECKED_COMPONENT\n@@ -1025,6 +1028,13 @@ class XPCWrappedNativeScope\n     JSObject*\n     GetPrototypeJSObject() const {return mPrototypeJSObject;}\n \n+#ifndef XPCONNECT_STANDALONE\n+    nsIPrincipal*\n+    GetPrincipal() const\n+    {return mScriptObjectPrincipal ?\n+         mScriptObjectPrincipal->GetPrincipal() : nsnull;}\n+#endif\n+    \n     JSObject*\n     GetPrototypeJSFunction() const {return mPrototypeJSFunction;}\n \n@@ -1088,9 +1098,22 @@ class XPCWrappedNativeScope\n     ClassInfo2WrappedNativeProtoMap* mWrappedNativeProtoMap;\n     nsXPCComponents*                 mComponents;\n     XPCWrappedNativeScope*           mNext;\n+    // The JS global object for this scope.  If non-null, this will be the\n+    // default parent for the XPCWrappedNatives that have us as the scope,\n+    // unless a PreCreate hook overrides it.  Note that this _may_ be null (see\n+    // constructor).\n     JSObject*                        mGlobalJSObject;\n     JSObject*                        mPrototypeJSObject;\n     JSObject*                        mPrototypeJSFunction;\n+\n+#ifndef XPCONNECT_STANDALONE\n+    // The script object principal instance corresponding to our current global\n+    // JS object.\n+    // XXXbz what happens if someone calls JS_SetPrivate on mGlobalJSObject.\n+    // How do we deal?  Do we need to?  I suspect this isn't worth worrying\n+    // about, since all of our scope objects are verified as not doing that.\n+    nsCOMPtr<nsIScriptObjectPrincipal> mScriptObjectPrincipal;\n+#endif\n };\n \n /***************************************************************************/\n@@ -1787,6 +1810,10 @@ class XPCWrappedNative : public nsIXPConnectWrappedNative\n     NS_DECL_NSIXPCONNECTJSOBJECTHOLDER\n     NS_DECL_NSIXPCONNECTWRAPPEDNATIVE\n \n+#ifndef XPCONNECT_STANDALONE\n+    virtual nsIPrincipal* GetObjectPrincipal() const;\n+#endif\n+\n     JSBool\n     IsValid() const {return nsnull != mFlatJSObject;}\n \n@@ -2866,8 +2893,6 @@ class nsXPCThreadJSContextStackImpl : public nsIThreadJSContextStack,\n \n #ifndef XPCONNECT_STANDALONE\n #include \"nsIScriptSecurityManager.h\"\n-#include \"nsIPrincipal.h\"\n-#include \"nsIScriptObjectPrincipal.h\"\n \n class BackstagePass : public nsIScriptObjectPrincipal, public nsIXPCScriptable\n {"},{"sha":"15e484e798d62d829b9fce70a996f76b75561717","filename":"js/src/xpconnect/src/xpcwrappednative.cpp","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/mozilla/gecko-dev/blob/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/src/xpcwrappednative.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/src/xpcwrappednative.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/js/src/xpconnect/src/xpcwrappednative.cpp?ref=f02076fb6fd44802e45cf1da42f3407f5ddb25fe","patch":"@@ -2360,6 +2360,20 @@ NS_IMETHODIMP XPCWrappedNative::GetJSObjectPrototype(JSObject * *aJSObjectProtot\n     return NS_OK;\n }\n \n+#ifndef XPCONNECT_STANDALONE\n+nsIPrincipal*\n+XPCWrappedNative::GetObjectPrincipal() const\n+{\n+    nsIPrincipal* principal = GetScope()->GetPrincipal();\n+#ifdef DEBUG\n+    nsCOMPtr<nsIScriptObjectPrincipal> objPrin(do_QueryInterface(mIdentity));\n+    NS_ASSERTION(!objPrin || objPrin->GetPrincipal() == principal,\n+                 \"Principal mismatch.  Expect bad things to happen\");\n+#endif\n+    return principal;\n+}\n+#endif\n+\n /* readonly attribute nsIXPConnect XPConnect; */\n NS_IMETHODIMP XPCWrappedNative::GetXPConnect(nsIXPConnect * *aXPConnect)\n {"},{"sha":"50411b09f1eb97f7e165f4ce6204de72c61dc7ad","filename":"js/src/xpconnect/src/xpcwrappednativescope.cpp","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/mozilla/gecko-dev/blob/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/src/xpcwrappednativescope.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/f02076fb6fd44802e45cf1da42f3407f5ddb25fe/js/src/xpconnect/src/xpcwrappednativescope.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/js/src/xpconnect/src/xpcwrappednativescope.cpp?ref=f02076fb6fd44802e45cf1da42f3407f5ddb25fe","patch":"@@ -176,6 +176,31 @@ XPCWrappedNativeScope::SetGlobal(XPCCallContext& ccx, JSObject* aGlobal)\n     // nsXPConnect::InitClassesWithNewWrappedGlobal.\n \n     mGlobalJSObject = aGlobal;\n+#ifndef XPCONNECT_STANDALONE\n+    mScriptObjectPrincipal = nsnull;\n+    // Now init our script object principal, if the new global has one\n+    if (aGlobal)\n+    {\n+        JSContext* cx = ccx.GetJSContext();\n+        const JSClass* jsClass = JS_GetClass(cx, aGlobal);\n+        if (jsClass && !(~jsClass->flags & (JSCLASS_HAS_PRIVATE |\n+                                            JSCLASS_PRIVATE_IS_NSISUPPORTS)))\n+        {\n+            // Our global has an nsISupports native pointer.  Let's\n+            // see whether it's what we want.\n+            nsISupports* priv = (nsISupports*)JS_GetPrivate(cx, aGlobal);\n+            nsCOMPtr<nsIXPConnectWrappedNative> native =\n+                do_QueryInterface(priv);\n+            if (native)\n+            {\n+                mScriptObjectPrincipal = do_QueryWrappedNative(native);\n+            }\n+            if (!mScriptObjectPrincipal) {\n+                mScriptObjectPrincipal = do_QueryInterface(priv);\n+            }\n+        }\n+    }\n+#endif\n \n     // Lookup 'globalObject.Object.prototype' for our wrapper's proto\n     {"}]},"blames":["6d36e81b","beae4f79","6d36e81b","f7460d02","ef9c82db","eef6de84","f70ebcae","90a78e10","e171eaba","b9b46b0f","1077614f","84bfc894","a47dae7c","ea706038","5874e12c","ef9c82db","d98f4dca","7ab8e93b","50e43040","4d342dc5","ea706038","ea706038"]}