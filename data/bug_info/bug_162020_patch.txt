Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.235
diff -u -p -6 -r1.235 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	24 May 2004 13:31:51 -0000	1.235
+++ caps/src/nsScriptSecurityManager.cpp	5 Jun 2004 08:18:42 -0000
@@ -2138,12 +2138,13 @@ nsScriptSecurityManager::CheckConfirmDia
                                           getter_Copies(message));
     if (NS_FAILED(rv))
         return PR_FALSE;
 
     PRInt32 buttonPressed = 1; // If the user exits by clicking the close box, assume No (button 1)
     rv = prompter->ConfirmEx(title.get(), message.get(),
+                             (nsIPrompt::BUTTON_DELAY_ENABLE) +
                              (nsIPrompt::BUTTON_POS_1_DEFAULT) +
                              (nsIPrompt::BUTTON_TITLE_YES * nsIPrompt::BUTTON_POS_0) +
                              (nsIPrompt::BUTTON_TITLE_NO * nsIPrompt::BUTTON_POS_1),
                              nsnull, nsnull, nsnull, check.get(), checkValue, &buttonPressed);
 
     if (NS_FAILED(rv))
Index: embedding/components/windowwatcher/public/nsIPromptService.idl
===================================================================
RCS file: /cvsroot/mozilla/embedding/components/windowwatcher/public/nsIPromptService.idl,v
retrieving revision 1.14
diff -u -p -6 -r1.14 nsIPromptService.idl
--- embedding/components/windowwatcher/public/nsIPromptService.idl	24 May 2004 13:31:15 -0000	1.14
+++ embedding/components/windowwatcher/public/nsIPromptService.idl	5 Jun 2004 08:18:42 -0000
@@ -130,13 +130,16 @@ interface nsIPromptService : nsISupports
   const unsigned long BUTTON_TITLE_REVERT        = 7;
 
   const unsigned long BUTTON_TITLE_IS_STRING     = 127;
   
   const unsigned long BUTTON_POS_0_DEFAULT       = 0 << 24;
   const unsigned long BUTTON_POS_1_DEFAULT       = 1 << 24;
-  const unsigned long BUTTON_POS_2_DEFAULT       = 2 << 24;    
+  const unsigned long BUTTON_POS_2_DEFAULT       = 2 << 24;
+
+  /* used for security dialogs, buttons are initially disabled */
+  const unsigned long BUTTON_DELAY_ENABLE        = 1 << 26;
   
   const unsigned long STD_OK_CANCEL_BUTTONS      = (BUTTON_TITLE_OK * BUTTON_POS_0) +
                                                     (BUTTON_TITLE_CANCEL * BUTTON_POS_1);
 
   PRInt32 confirmEx(in nsIDOMWindow parent,
                  in wstring dialogTitle,
Index: embedding/components/windowwatcher/public/nsPIPromptService.idl
===================================================================
RCS file: /cvsroot/mozilla/embedding/components/windowwatcher/public/nsPIPromptService.idl,v
retrieving revision 1.8
diff -u -p -6 -r1.8 nsPIPromptService.idl
--- embedding/components/windowwatcher/public/nsPIPromptService.idl	24 May 2004 13:31:15 -0000	1.8
+++ embedding/components/windowwatcher/public/nsPIPromptService.idl	5 Jun 2004 08:18:42 -0000
@@ -49,12 +49,13 @@ interface nsPIPromptService : nsISupport
 %{C++
   enum {eMsg=0, eCheckboxMsg=1, eIconClass=2, eTitleMessage=3, eEditfield1Msg=4,
         eEditfield2Msg=5, eEditfield1Value=6, eEditfield2Value=7,
         eButton0Text=8, eButton1Text=9, eButton2Text=10, eButton3Text=11,
         eDialogTitle=12};
   enum {eButtonPressed=0, eCheckboxState=1, eNumberButtons=2,
-        eNumberEditfields=3, eEditField1Password=4, eDefaultButton=5};
+        eNumberEditfields=3, eEditField1Password=4, eDefaultButton=5,
+        eDelayButtonEnable=6};
 %}
 
    void doDialog(in nsIDOMWindow aParent, in nsIDialogParamBlock aParamBlock, in string aChromeURL);
 };
 
Index: embedding/components/windowwatcher/src/nsPromptService.cpp
===================================================================
RCS file: /cvsroot/mozilla/embedding/components/windowwatcher/src/nsPromptService.cpp,v
retrieving revision 1.27
diff -u -p -6 -r1.27 nsPromptService.cpp
--- embedding/components/windowwatcher/src/nsPromptService.cpp	24 May 2004 13:33:28 -0000	1.27
+++ embedding/components/windowwatcher/src/nsPromptService.cpp	5 Jun 2004 08:18:43 -0000
@@ -288,12 +288,14 @@ nsPromptService::ConfirmEx(nsIDOMWindow 
   int buttonIDs[] = { eButton0Text, eButton1Text, eButton2Text };
   const PRUnichar* buttonStrings[] = { button0Title, button1Title, button2Title };
 
 #define BUTTON_DEFAULT_MASK 0x03000000
 
   block->SetInt(eDefaultButton, (buttonFlags & BUTTON_DEFAULT_MASK) >> 24);
+  block->SetInt(eDelayButtonEnable, buttonFlags & BUTTON_DELAY_ENABLE);
+ 
   PRInt32 numberButtons = 0;
   for (int i = 0; i < 3; i++) { 
     
     nsXPIDLString buttonTextStr;
     const PRUnichar* buttonText = 0;
     switch (buttonFlags & 0xff) {
Index: modules/libpref/src/init/all.js
===================================================================
RCS file: /cvsroot/mozilla/modules/libpref/src/init/all.js,v
retrieving revision 3.524
diff -u -p -6 -r3.524 all.js
--- modules/libpref/src/init/all.js	23 May 2004 09:15:17 -0000	3.524
+++ modules/libpref/src/init/all.js	5 Jun 2004 08:18:47 -0000
@@ -642,12 +642,14 @@ pref("font.language.group",             
 pref("images.dither", "auto");
 pref("security.directory",              "");
 
 pref("signed.applets.codebase_principal_support", false);
 pref("security.checkloaduri", true);
 pref("security.xpconnect.plugin.unrestricted", true);
+// security-sensitive dialogs should delay focus. In milliseconds.
+pref("security.dialog_enable_delay", 2000);
 
 // Modifier key prefs: default to Windows settings,
 // menu access key = alt, accelerator key = control.
 // Use 17 for Ctrl, 18 for Alt, 224 for Meta, 0 for none. Mac settings in macprefs.js
 pref("ui.key.accelKey", 17);
 pref("ui.key.generalAccessKey", 18);
Index: netwerk/base/public/nsIPrompt.idl
===================================================================
RCS file: /cvsroot/mozilla/netwerk/base/public/nsIPrompt.idl,v
retrieving revision 1.24
diff -u -p -6 -r1.24 nsIPrompt.idl
--- netwerk/base/public/nsIPrompt.idl	24 May 2004 13:31:33 -0000	1.24
+++ netwerk/base/public/nsIPrompt.idl	5 Jun 2004 08:18:47 -0000
@@ -84,14 +84,17 @@ interface nsIPrompt : nsISupports
     const unsigned long BUTTON_TITLE_REVERT        = 7;
 
     const unsigned long BUTTON_TITLE_IS_STRING     = 127;
     
     const unsigned long BUTTON_POS_0_DEFAULT       = 0 << 24;
     const unsigned long BUTTON_POS_1_DEFAULT       = 1 << 24;
-    const unsigned long BUTTON_POS_2_DEFAULT       = 2 << 24;    
-   
+    const unsigned long BUTTON_POS_2_DEFAULT       = 2 << 24;
+
+    /* used for security dialogs, buttons are initially disabled */
+    const unsigned long BUTTON_DELAY_ENABLE        = 1 << 26;
+
     const unsigned long STD_OK_CANCEL_BUTTONS      = (BUTTON_TITLE_OK * BUTTON_POS_0) +
                                                     (BUTTON_TITLE_CANCEL * BUTTON_POS_1);
 
     PRInt32 confirmEx(in wstring dialogTitle,
                    in wstring text,
                    in unsigned long buttonFlags,
Index: xpinstall/res/content/institems.js
===================================================================
RCS file: /cvsroot/mozilla/xpinstall/res/content/institems.js,v
retrieving revision 1.16
diff -u -p -6 -r1.16 institems.js
--- xpinstall/res/content/institems.js	17 Apr 2004 14:37:28 -0000	1.16
+++ xpinstall/res/content/institems.js	5 Jun 2004 08:18:47 -0000
@@ -96,15 +96,32 @@ function onLoad()
     addTreeItem(row++, moduleName, URL, certName);
   }
 
   // Move default+focus from |accept| to |cancel| button.
   var aButton = document.documentElement.getButton("accept");
   aButton.setAttribute("default", false);
+  aButton.setAttribute("label", gBundle.getString("OK"));
+  aButton.setAttribute("disabled", true);
+
   aButton = document.documentElement.getButton("cancel");
   aButton.focus();
   aButton.setAttribute("default", true);
+
+  // start timer to re-enable buttons
+  var delayInterval = 2000;
+  try {
+    var prefs = Components.classes["@mozilla.org/preferences-service;1"]
+                .getService(Components.interfaces.nsIPrefBranch);
+    delayInterval = prefs.getIntPref("security.dialog_enable_delay");
+  } catch (e) {}
+  setTimeout(reenableInstallButtons, delayInterval);
+}
+
+function reenableInstallButtons()
+{
+    document.documentElement.getButton("accept").setAttribute("disabled", false);
 }
 
 function onAccept()
 {
   // set the accept button in the param block
   if (gParam)
Index: xpfe/global/resources/content/commonDialog.js
===================================================================
RCS file: /cvsroot/mozilla/xpfe/global/resources/content/commonDialog.js,v
retrieving revision 1.52
diff -u -p -6 -r1.52 commonDialog.js
--- xpfe/global/resources/content/commonDialog.js	24 May 2004 13:33:51 -0000	1.52
+++ xpfe/global/resources/content/commonDialog.js	5 Jun 2004 08:18:48 -0000
@@ -160,33 +160,62 @@ function commonDialogOnLoad()
 
   // initialize the checkbox
   setCheckbox(gCommonDialogParam.GetString(1), gCommonDialogParam.GetInt(1));
 
   if (gCommonDialogParam.GetInt(3) == 0) // If no text fields
   {
+    var dButton;
     var defaultButton = gCommonDialogParam.GetInt(5);
     switch (defaultButton) {
       case 3:
-        document.documentElement.getButton("extra2").focus();
+        dButton = document.documentElement.getButton("extra2");
         break;
       case 2:
-        document.documentElement.getButton("extra1").focus();
+        dButton = document.documentElement.getButton("extra1");
         break;
       case 1:
-        document.documentElement.getButton("cancel").focus();
+        dButton = document.documentElement.getButton("cancel");
         break;
       default:
       case 0:
-        document.documentElement.getButton("accept").focus();
+        dButton = document.documentElement.getButton("accept");
         break;
     }
+    // move the default attribute and focus from the accept button
+    // to the one specified in the dialog params
+    document.documentElement.getButton("accept").setAttribute("default",false);
+    dButton.setAttribute("default", true);
+    dButton.focus();
+  }
+
+  if (gCommonDialogParam.GetInt(6) != 0) // delay button enable
+  {
+    var delayInterval = 2000;
+    try {
+      var prefs = Components.classes["@mozilla.org/preferences-service;1"]
+                  .getService(Components.interfaces.nsIPrefBranch);
+      delayInterval = prefs.getIntPref("security.dialog_enable_delay");
+    } catch (e) {}
+
+    document.documentElement.getButton("accept").disabled = true;
+    document.documentElement.getButton("extra1").disabled = true;
+    document.documentElement.getButton("extra2").disabled = true;
+
+    setTimeout(commonDialogReenableButtons, delayInterval);
   }
 
   getAttention();
 }
 
+function commonDialogReenableButtons()
+{
+    document.documentElement.getButton("accept").disabled = false;
+    document.documentElement.getButton("extra1").disabled = false;
+    document.documentElement.getButton("extra2").disabled = false;
+}
+
 function initTextbox(aName, aLabelIndex, aValueIndex, aAlwaysLabel)
 {
   unHideElementById(aName+"Container");
 
   var label = aLabelIndex < 0 ? "" : gCommonDialogParam.GetString(aLabelIndex);
   if (label || aAlwaysLabel && !label)
