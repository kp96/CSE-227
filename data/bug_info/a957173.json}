{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basa957173\""},"diff":[{"chunks":[{"content":"@@ -41,7 +41,7 @@","changes":[{"type":"normal","normal":true,"ln1":41,"ln2":41,"content":" interface nsIAccessible;"},{"type":"normal","normal":true,"ln1":42,"ln2":42,"content":" interface nsIAccessibleEvent;"},{"type":"normal","normal":true,"ln1":43,"ln2":43,"content":" "},{"type":"del","del":true,"ln":44,"content":"-[uuid(03932812-53d1-4dc7-965d-6b6ad8a872b1)]"},{"type":"add","add":true,"ln":44,"content":"+[uuid(af05f83c-6fd2-48c1-b1c3-811857472421)]"},{"type":"normal","normal":true,"ln1":45,"ln2":45,"content":" interface nsPIAccessible : nsISupports"},{"type":"normal","normal":true,"ln1":46,"ln2":46,"content":" {"},{"type":"normal","normal":true,"ln1":47,"ln2":47,"content":"   /**"}],"oldStart":41,"oldLines":7,"newStart":41,"newLines":7},{"content":"@@ -65,6 +65,11 @@ interface nsPIAccessible : nsISupports","changes":[{"type":"normal","normal":true,"ln1":65,"ln2":65,"content":"   void getCachedParent(out nsIAccessible aAccParent);"},{"type":"normal","normal":true,"ln1":66,"ln2":66,"content":" "},{"type":"normal","normal":true,"ln1":67,"ln2":67,"content":"   /**"},{"type":"add","add":true,"ln":68,"content":"+   * Return first child accessible only if cached."},{"type":"add","add":true,"ln":69,"content":"+   */"},{"type":"add","add":true,"ln":70,"content":"+  void getCachedFirstChild(out nsIAccessible aAccFirstChild);"},{"type":"add","add":true,"ln":71,"content":"+"},{"type":"add","add":true,"ln":72,"content":"+  /**"},{"type":"normal","normal":true,"ln1":68,"ln2":73,"content":"    * Set the child count to -1 (unknown) and null out cached child pointers"},{"type":"normal","normal":true,"ln1":69,"ln2":74,"content":"    */"},{"type":"normal","normal":true,"ln1":70,"ln2":75,"content":"   void invalidateChildren();"}],"oldStart":65,"oldLines":6,"newStart":65,"newLines":11}],"deletions":1,"additions":6,"from":"accessible/public/nsPIAccessible.idl","to":"accessible/public/nsPIAccessible.idl","index":["893be0a..53c3288","100644"]},{"chunks":[{"content":"@@ -444,6 +444,16 @@ nsAccessible::GetKeyboardShortcut(nsAString& aAccessKey)","changes":[{"type":"normal","normal":true,"ln1":444,"ln2":444,"content":" "},{"type":"normal","normal":true,"ln1":445,"ln2":445,"content":" NS_IMETHODIMP nsAccessible::SetParent(nsIAccessible *aParent)"},{"type":"normal","normal":true,"ln1":446,"ln2":446,"content":" {"},{"type":"add","add":true,"ln":447,"content":"+#ifdef DEBUG"},{"type":"add","add":true,"ln":448,"content":"+  if (aParent && aParent != mParent) {"},{"type":"add","add":true,"ln":449,"content":"+    nsCOMPtr<nsPIAccessible> privParent = do_QueryInterface(mParent);"},{"type":"add","add":true,"ln":450,"content":"+    if (privParent) {"},{"type":"add","add":true,"ln":451,"content":"+      nsCOMPtr<nsIAccessible> firstChild;"},{"type":"add","add":true,"ln":452,"content":"+      privParent->GetCachedFirstChild(getter_AddRefs(firstChild));"},{"type":"add","add":true,"ln":453,"content":"+      NS_ASSERTION(firstChild != this, \"Reparenting other node's first child!\");"},{"type":"add","add":true,"ln":454,"content":"+    }"},{"type":"add","add":true,"ln":455,"content":"+  }"},{"type":"add","add":true,"ln":456,"content":"+#endif"},{"type":"normal","normal":true,"ln1":447,"ln2":457,"content":"   mParent = aParent;"},{"type":"normal","normal":true,"ln1":448,"ln2":458,"content":"   return NS_OK;"},{"type":"normal","normal":true,"ln1":449,"ln2":459,"content":" }"}],"oldStart":444,"oldLines":6,"newStart":444,"newLines":16},{"content":"@@ -588,6 +598,17 @@ NS_IMETHODIMP nsAccessible::GetCachedParent(nsIAccessible **  aParent)","changes":[{"type":"normal","normal":true,"ln1":588,"ln2":598,"content":"   return NS_OK;"},{"type":"normal","normal":true,"ln1":589,"ln2":599,"content":" }"},{"type":"normal","normal":true,"ln1":590,"ln2":600,"content":" "},{"type":"add","add":true,"ln":601,"content":"+NS_IMETHODIMP nsAccessible::GetCachedFirstChild(nsIAccessible **  aFirstChild)"},{"type":"add","add":true,"ln":602,"content":"+{"},{"type":"add","add":true,"ln":603,"content":"+  *aFirstChild = nsnull;"},{"type":"add","add":true,"ln":604,"content":"+  if (!mWeakShell) {"},{"type":"add","add":true,"ln":605,"content":"+    // This node has been shut down"},{"type":"add","add":true,"ln":606,"content":"+    return NS_ERROR_FAILURE;"},{"type":"add","add":true,"ln":607,"content":"+  }"},{"type":"add","add":true,"ln":608,"content":"+  NS_IF_ADDREF(*aFirstChild = mFirstChild);"},{"type":"add","add":true,"ln":609,"content":"+  return NS_OK;"},{"type":"add","add":true,"ln":610,"content":"+}"},{"type":"add","add":true,"ln":611,"content":"+"},{"type":"normal","normal":true,"ln1":591,"ln2":612,"content":"   /* readonly attribute nsIAccessible nextSibling; */"},{"type":"normal","normal":true,"ln1":592,"ln2":613,"content":" NS_IMETHODIMP nsAccessible::GetNextSibling(nsIAccessible * *aNextSibling) "},{"type":"normal","normal":true,"ln1":593,"ln2":614,"content":" { "}],"oldStart":588,"oldLines":6,"newStart":598,"newLines":17},{"content":"@@ -655,6 +676,16 @@ NS_IMETHODIMP nsAccessible::GetFirstChild(nsIAccessible * *aFirstChild)","changes":[{"type":"normal","normal":true,"ln1":655,"ln2":676,"content":"   PRInt32 numChildren;"},{"type":"normal","normal":true,"ln1":656,"ln2":677,"content":"   GetChildCount(&numChildren);  // Make sure we cache all of the children"},{"type":"normal","normal":true,"ln1":657,"ln2":678,"content":" "},{"type":"add","add":true,"ln":679,"content":"+#ifdef DEBUG"},{"type":"add","add":true,"ln":680,"content":"+  nsCOMPtr<nsPIAccessible> firstChild(do_QueryInterface(mFirstChild));"},{"type":"add","add":true,"ln":681,"content":"+  if (firstChild) {"},{"type":"add","add":true,"ln":682,"content":"+    nsCOMPtr<nsIAccessible> realParent;"},{"type":"add","add":true,"ln":683,"content":"+    firstChild->GetCachedParent(getter_AddRefs(realParent));"},{"type":"add","add":true,"ln":684,"content":"+    NS_ASSERTION(!realParent || realParent == this,"},{"type":"add","add":true,"ln":685,"content":"+                 \"Two accessibles have the same first child accessible.\");"},{"type":"add","add":true,"ln":686,"content":"+  }"},{"type":"add","add":true,"ln":687,"content":"+#endif"},{"type":"add","add":true,"ln":688,"content":"+"},{"type":"normal","normal":true,"ln1":658,"ln2":689,"content":"   NS_IF_ADDREF(*aFirstChild = mFirstChild);"},{"type":"normal","normal":true,"ln1":659,"ln2":690,"content":" "},{"type":"normal","normal":true,"ln1":660,"ln2":691,"content":"   return NS_OK;  "}],"oldStart":655,"oldLines":6,"newStart":676,"newLines":16}],"deletions":0,"additions":31,"from":"accessible/src/base/nsAccessible.cpp","to":"accessible/src/base/nsAccessible.cpp","index":["ed9b9d0..a00e854","100644"]},{"chunks":[{"content":"@@ -1549,6 +1549,15 @@ NS_IMETHODIMP nsDocAccessible::FlushPendingEvents()","changes":[{"type":"normal","normal":true,"ln1":1549,"ln2":1549,"content":"     accessibleEvent->GetEventType(&eventType);"},{"type":"normal","normal":true,"ln1":1550,"ln2":1550,"content":"     if (eventType == nsIAccessibleEvent::EVENT_DOM_CREATE || "},{"type":"normal","normal":true,"ln1":1551,"ln2":1551,"content":"         eventType == nsIAccessibleEvent::EVENT_ASYNCH_SHOW) {"},{"type":"add","add":true,"ln":1552,"content":"+      nsCOMPtr<nsIAccessible> containerAccessible;"},{"type":"add","add":true,"ln":1553,"content":"+      if (accessible) {"},{"type":"add","add":true,"ln":1554,"content":"+        accessible->GetParent(getter_AddRefs(containerAccessible));"},{"type":"add","add":true,"ln":1555,"content":"+        nsCOMPtr<nsPIAccessible> privateContainerAccessible ="},{"type":"add","add":true,"ln":1556,"content":"+          do_QueryInterface(containerAccessible);"},{"type":"add","add":true,"ln":1557,"content":"+        if (privateContainerAccessible)"},{"type":"add","add":true,"ln":1558,"content":"+          privateContainerAccessible->InvalidateChildren();"},{"type":"add","add":true,"ln":1559,"content":"+      }"},{"type":"add","add":true,"ln":1560,"content":"+"},{"type":"normal","normal":true,"ln1":1552,"ln2":1561,"content":"       // Also fire text changes if the node being created could affect the text in an nsIAccessibleText parent."},{"type":"normal","normal":true,"ln1":1553,"ln2":1562,"content":"       // When a node is being made visible or is inserted, the text in an ancestor hyper text will gain characters"},{"type":"normal","normal":true,"ln1":1554,"ln2":1563,"content":"       // At this point we now have the frame and accessible for this node if there is one. That is why we"}],"oldStart":1549,"oldLines":6,"newStart":1549,"newLines":15},{"content":"@@ -1557,8 +1566,10 @@ NS_IMETHODIMP nsDocAccessible::FlushPendingEvents()","changes":[{"type":"normal","normal":true,"ln1":1557,"ln2":1566,"content":"       nsCOMPtr<nsIDOMNode> domNode;"},{"type":"normal","normal":true,"ln1":1558,"ln2":1567,"content":"       accessibleEvent->GetDOMNode(getter_AddRefs(domNode));"},{"type":"normal","normal":true,"ln1":1559,"ln2":1568,"content":"       if (domNode && domNode != mDOMNode) {"},{"type":"del","del":true,"ln":1560,"content":"-        nsCOMPtr<nsIAccessible> containerAccessible;"},{"type":"del","del":true,"ln":1561,"content":"-        GetAccessibleInParentChain(domNode, getter_AddRefs(containerAccessible));"},{"type":"add","add":true,"ln":1569,"content":"+        if (!containerAccessible)"},{"type":"add","add":true,"ln":1570,"content":"+          GetAccessibleInParentChain(domNode,"},{"type":"add","add":true,"ln":1571,"content":"+                                     getter_AddRefs(containerAccessible));"},{"type":"add","add":true,"ln":1572,"content":"+"},{"type":"normal","normal":true,"ln1":1562,"ln2":1573,"content":"         nsCOMPtr<nsIAccessibleTextChangeEvent> textChangeEvent ="},{"type":"normal","normal":true,"ln1":1563,"ln2":1574,"content":"           CreateTextChangeEventForNode(containerAccessible, domNode, accessible, PR_TRUE, PR_TRUE);"},{"type":"normal","normal":true,"ln1":1564,"ln2":1575,"content":"         if (textChangeEvent) {"}],"oldStart":1557,"oldLines":8,"newStart":1566,"newLines":10},{"content":"@@ -1831,11 +1842,6 @@ NS_IMETHODIMP nsDocAccessible::InvalidateCacheSubtree(nsIContent *aChild,","changes":[{"type":"normal","normal":true,"ln1":1831,"ln2":1842,"content":"   // and there is always one of those."},{"type":"normal","normal":true,"ln1":1832,"ln2":1843,"content":" "},{"type":"normal","normal":true,"ln1":1833,"ln2":1844,"content":"   if (aChild && !isHiding) {"},{"type":"del","del":true,"ln":1834,"content":"-    nsCOMPtr<nsPIAccessible> privateContainerAccessible ="},{"type":"del","del":true,"ln":1835,"content":"-      do_QueryInterface(containerAccessible);"},{"type":"del","del":true,"ln":1836,"content":"-    if (privateContainerAccessible) {"},{"type":"del","del":true,"ln":1837,"content":"-      privateContainerAccessible->InvalidateChildren();"},{"type":"del","del":true,"ln":1838,"content":"-    }"},{"type":"normal","normal":true,"ln1":1839,"ln2":1845,"content":"     // Fire EVENT_SHOW, EVENT_MENUPOPUP_START for newly visible content."},{"type":"normal","normal":true,"ln1":1840,"ln2":1846,"content":"     // Fire after a short timer, because we want to make sure the view has been"},{"type":"normal","normal":true,"ln1":1841,"ln2":1847,"content":"     // updated to make this accessible content visible. If we don't wait,"}],"oldStart":1831,"oldLines":11,"newStart":1842,"newLines":6}],"deletions":7,"additions":13,"from":"accessible/src/base/nsDocAccessible.cpp","to":"accessible/src/base/nsDocAccessible.cpp","index":["be72aba..56a4971","100644"]}]}