Index: nsScriptSecurityManager.cpp
===================================================================
RCS file: /cvs/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.229.6.6.2.6
diff -p -u -1 -2 -r1.229.6.6.2.6 nsScriptSecurityManager.cpp
--- nsScriptSecurityManager.cpp	9 May 2005 20:30:21 -0000	1.229.6.6.2.6
+++ nsScriptSecurityManager.cpp	10 May 2005 21:30:26 -0000
@@ -1118,64 +1118,59 @@ nsScriptSecurityManager::CheckLoadURIFro
         return NS_ERROR_FAILURE;
     JS_ReportError(cx, "Access to '%s' from script denied", spec.get());
     return NS_ERROR_DOM_BAD_URI;
 }
 
 nsresult
 nsScriptSecurityManager::GetBaseURIScheme(nsIURI* aURI, char** aScheme)
 {
     if (!aURI)
        return NS_ERROR_FAILURE;
 
     nsresult rv;
-    nsCOMPtr<nsIURI> uri(aURI);
 
     //-- get the source scheme
     nsCAutoString scheme;
-    rv = uri->GetScheme(scheme);
+    rv = aURI->GetScheme(scheme);
     if (NS_FAILED(rv)) return rv;
 
-    //-- If uri is a view-source URI, drill down to the base URI
+    //-- If aURI is a view-source URI, drill down to the base URI
     nsCAutoString path;
-    while(PL_strcmp(scheme.get(), "view-source") == 0)
+    if (PL_strcmp(scheme.get(), "view-source") == 0)
     {
-        rv = uri->GetPath(path);
+        rv = aURI->GetPath(path);
         if (NS_FAILED(rv)) return rv;
-        rv = NS_NewURI(getter_AddRefs(uri), path, nsnull, nsnull, sIOService);
-        if (NS_FAILED(rv)) return rv;
-        rv = uri->GetScheme(scheme);
+        nsCOMPtr<nsIURI> innerURI;
+        rv = NS_NewURI(getter_AddRefs(innerURI), path, nsnull, nsnull,
+                       sIOService);
         if (NS_FAILED(rv)) return rv;
+        return nsScriptSecurityManager::GetBaseURIScheme(innerURI, aScheme);
     }
 
-    //-- If uri is a jar URI, drill down again
-    nsCOMPtr<nsIJARURI> jarURI;
-    PRBool isJAR = PR_FALSE;
-    while((jarURI = do_QueryInterface(uri)))
-    {
-        jarURI->GetJARFile(getter_AddRefs(uri));
-        isJAR = PR_TRUE;
-    }
-    if (!uri) return NS_ERROR_FAILURE;
-    if (isJAR)
+    //-- If aURI is a jar URI, drill down again
+    nsCOMPtr<nsIJARURI> jarURI = do_QueryInterface(aURI);
+    if (jarURI)
     {
-        rv = uri->GetScheme(scheme);
-        if (NS_FAILED(rv)) return rv;
+        nsCOMPtr<nsIURI> innerURI;
+        jarURI->GetJARFile(getter_AddRefs(innerURI));
+        if (!innerURI) return NS_ERROR_FAILURE;
+        return nsScriptSecurityManager::GetBaseURIScheme(innerURI, aScheme);
     }
 
-    //-- if uri is an about uri, distinguish 'safe' and 'unsafe' about URIs
+    //-- if aURI is an about uri, distinguish 'safe' and 'unsafe' about URIs
     static const char aboutScheme[] = "about";
     if(nsCRT::strcasecmp(scheme.get(), aboutScheme) == 0)
     {
         nsCAutoString spec;
-        if(NS_FAILED(uri->GetAsciiSpec(spec)))
+        if(NS_FAILED(aURI->GetAsciiSpec(spec)))
             return NS_ERROR_FAILURE;
         const char* page = spec.get() + sizeof(aboutScheme);
         if ((strcmp(page, "blank") == 0)   ||
             (strcmp(page, "") == 0)        ||
             (strcmp(page, "mozilla") == 0) ||
             (strcmp(page, "logo") == 0)    ||
             (strcmp(page, "credits") == 0))
         {
             *aScheme = nsCRT::strdup("about safe");
             return *aScheme ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
         }
     }
