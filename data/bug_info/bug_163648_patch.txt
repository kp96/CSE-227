? netwerk/base/src/neckobase_s.lib
? netwerk/base/src/neckobase_s.pdb
Index: modules/libpref/src/init/all.js
===================================================================
RCS file: /m/pub/mozilla/modules/libpref/src/init/all.js,v
retrieving revision 3.419
diff -u -r3.419 all.js
--- modules/libpref/src/init/all.js	8 Oct 2002 06:03:35 -0000	3.419
+++ modules/libpref/src/init/all.js	8 Oct 2002 23:25:25 -0000
@@ -417,6 +417,13 @@
 // prevents necko connecting to ports 1-5 unless the protocol
 // overrides.
 
+// Prevent using external protocol handlers for these schemes
+pref("network.protocol-handler.external.hcp", false);
+pref("network.protocol-handler.external.vbscript", false);
+pref("network.protocol-handler.external.javascript", false);
+pref("network.protocol-handler.external.ms-help", false);
+pref("network.protocol-handler.external.vnd.ms.radio", false);
+
 pref("network.hosts.smtp_server",           "mail");
 pref("network.hosts.pop_server",            "mail");
 pref("network.protocols.useSystemDefaults",   false); // set to true if user links should use system default handlers
Index: netwerk/base/src/nsIOService.cpp
===================================================================
RCS file: /m/pub/mozilla/netwerk/base/src/nsIOService.cpp,v
retrieving revision 1.156
diff -u -r1.156 nsIOService.cpp
--- netwerk/base/src/nsIOService.cpp	13 Sep 2002 19:32:29 -0000	1.156
+++ netwerk/base/src/nsIOService.cpp	8 Oct 2002 23:25:25 -0000
@@ -384,14 +384,17 @@
     if (NS_SUCCEEDED(rv)) return NS_OK;
 
     PRBool externalProtocol = PR_FALSE;
+    PRBool listedProtocol   = PR_TRUE;
     nsCOMPtr<nsIPrefBranch> prefBranch;
     GetPrefBranch(getter_AddRefs(prefBranch));
     if (prefBranch) {
         nsCAutoString externalProtocolPref("network.protocol-handler.external.");
         externalProtocolPref += scheme;
         rv = prefBranch->GetBoolPref(externalProtocolPref.get(), &externalProtocol);
-        if (NS_FAILED(rv))
+        if (NS_FAILED(rv)) {
             externalProtocol = PR_FALSE;
+            listedProtocol   = PR_FALSE;
+        }
     }
 
     if (!externalProtocol) {
@@ -400,10 +403,14 @@
         ToLowerCase(contractID);
 
         rv = CallGetService(contractID.get(), result);
+
+        // If the pref for this protocol was explicitly set to false,
+        // stop here and do not invoke the default handler.
+        if (NS_FAILED(rv) && listedProtocol)
+            return NS_ERROR_UNKNOWN_PROTOCOL;
     }
     
-    if (externalProtocol || NS_FAILED(rv)) 
-    {
+    if (externalProtocol || NS_FAILED(rv)) {
       // okay we don't have a protocol handler to handle this url type, so use the default protocol handler.
       // this will cause urls to get dispatched out to the OS ('cause we can't do anything with them) when 
       // we try to read from a channel created by the default protocol handler.
