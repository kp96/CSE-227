diff --git a/security/manager/ssl/src/nsNSSCertTrust.cpp b/security/manager/ssl/src/nsNSSCertTrust.cpp
--- a/security/manager/ssl/src/nsNSSCertTrust.cpp
+++ b/security/manager/ssl/src/nsNSSCertTrust.cpp
@@ -361,6 +361,6 @@ PRBool
 PRBool
 nsNSSCertTrust::hasTrust(unsigned int t, unsigned int v)
 {
-  return (t & v);
+  return !!(t & v);
 }
 
diff --git a/security/manager/ssl/src/nsNSSCertificateDB.cpp b/security/manager/ssl/src/nsNSSCertificateDB.cpp
--- a/security/manager/ssl/src/nsNSSCertificateDB.cpp
+++ b/security/manager/ssl/src/nsNSSCertificateDB.cpp
@@ -407,9 +407,9 @@ nsNSSCertificateDB::handleCACertDownload
 
   nsNSSCertTrust trust;
   trust.SetValidCA();
-  trust.AddCATrust(trustBits & nsIX509CertDB::TRUSTED_SSL,
-                   trustBits & nsIX509CertDB::TRUSTED_EMAIL,
-                   trustBits & nsIX509CertDB::TRUSTED_OBJSIGN);
+  trust.AddCATrust(!!(trustBits & nsIX509CertDB::TRUSTED_SSL),
+                   !!(trustBits & nsIX509CertDB::TRUSTED_EMAIL),
+                   !!(trustBits & nsIX509CertDB::TRUSTED_OBJSIGN));
 
   SECStatus srv = CERT_AddTempCertToPerm(tmpCert, 
                                          const_cast<char*>(nickname.get()), 
@@ -1018,9 +1018,9 @@ nsNSSCertificateDB::SetCertTrust(nsIX509
   if (type == nsIX509Cert::CA_CERT) {
     // always start with untrusted and move up
     trust.SetValidCA();
-    trust.AddCATrust(trusted & nsIX509CertDB::TRUSTED_SSL,
-                     trusted & nsIX509CertDB::TRUSTED_EMAIL,
-                     trusted & nsIX509CertDB::TRUSTED_OBJSIGN);
+    trust.AddCATrust(!!(trusted & nsIX509CertDB::TRUSTED_SSL),
+                     !!(trusted & nsIX509CertDB::TRUSTED_EMAIL),
+                     !!(trusted & nsIX509CertDB::TRUSTED_OBJSIGN));
     srv = CERT_ChangeCertTrust(CERT_GetDefaultCertDB(), 
                                nsscert,
                                trust.GetTrust());
@@ -1034,7 +1034,7 @@ nsNSSCertificateDB::SetCertTrust(nsIX509
   } else if (type == nsIX509Cert::EMAIL_CERT) {
     // always start with untrusted and move up
     trust.SetValidPeer();
-    trust.AddPeerTrust(0, trusted & nsIX509CertDB::TRUSTED_EMAIL, 0);
+    trust.AddPeerTrust(0, !!(trusted & nsIX509CertDB::TRUSTED_EMAIL), 0);
     srv = CERT_ChangeCertTrust(CERT_GetDefaultCertDB(), 
                                nsscert,
                                trust.GetTrust());
diff --git a/security/manager/ssl/src/nsNSSIOLayer.cpp b/security/manager/ssl/src/nsNSSIOLayer.cpp
--- a/security/manager/ssl/src/nsNSSIOLayer.cpp
+++ b/security/manager/ssl/src/nsNSSIOLayer.cpp
@@ -2554,7 +2554,7 @@ static PRBool hasExplicitKeyUsageNonRepu
   unsigned char keyUsage = keyUsageItem.data[0];
   PORT_Free (keyUsageItem.data);
 
-  return (keyUsage & KU_NON_REPUDIATION);
+  return !!(keyUsage & KU_NON_REPUDIATION);
 }
 
 /*
diff --git a/security/manager/ssl/src/nsPKCS12Blob.cpp b/security/manager/ssl/src/nsPKCS12Blob.cpp
--- a/security/manager/ssl/src/nsPKCS12Blob.cpp
+++ b/security/manager/ssl/src/nsPKCS12Blob.cpp
@@ -327,7 +327,7 @@ isExtractable(SECKEYPrivateKey *privKey)
     return PR_FALSE;
   }
   if ((value.len == 1) && (value.data != NULL)) {
-    isExtractable = *(CK_BBOOL*)value.data;
+    isExtractable = !!(*(CK_BBOOL*)value.data);
   }
   SECITEM_FreeItem(&value, PR_FALSE);
   return isExtractable;
@@ -828,12 +828,12 @@ pip_ucs2_ascii_conversion_fn(PRBool toUn
   return PR_TRUE;
 }
 
-PRBool
+void
 nsPKCS12Blob::handleError(int myerr)
 {
   nsPSMUITracker tracker;
   if (tracker.isUIForbidden()) {
-    return PR_FALSE;
+    return;
   }
 
   nsresult rv;
@@ -842,7 +842,7 @@ nsPKCS12Blob::handleError(int myerr)
   PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("PKCS12: NSS/NSPR error(%d)", prerr));
   PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("PKCS12: I called(%d)", myerr));
   nsCOMPtr<nsINSSComponent> nssComponent(do_GetService(kNSSComponentCID, &rv));
-  if (NS_FAILED(rv)) return PR_FALSE;
+  if (NS_FAILED(rv)) return;
   nsCOMPtr<nsIPrompt> errPrompt;
   nsCOMPtr<nsIWindowWatcher> wwatch(do_GetService(NS_WINDOWWATCHER_CONTRACTID));
   if (wwatch) {
@@ -852,42 +852,42 @@ nsPKCS12Blob::handleError(int myerr)
       NS_GetProxyForObject(NS_PROXY_TO_MAIN_THREAD,
                            NS_GET_IID(nsIPrompt), errPrompt,
                            NS_PROXY_SYNC, getter_AddRefs(proxyPrompt));
-      if (!proxyPrompt) return PR_FALSE;
+      if (!proxyPrompt) return;
     } else {
-      return PR_FALSE;
+      return;
     }
   } else {
-    return PR_FALSE;
+    return;
   }
   nsAutoString errorMsg;
   switch (myerr) {
   case PIP_PKCS12_RESTORE_OK:
     rv = nssComponent->GetPIPNSSBundleString("SuccessfulP12Restore", errorMsg);
-    if (NS_FAILED(rv)) return rv;
+    if (NS_FAILED(rv)) return;
     errPrompt->Alert(nsnull, errorMsg.get());
-    return PR_TRUE;
+    return;
   case PIP_PKCS12_BACKUP_OK:
     rv = nssComponent->GetPIPNSSBundleString("SuccessfulP12Backup", errorMsg);
-    if (NS_FAILED(rv)) return rv;
+    if (NS_FAILED(rv)) return;
     errPrompt->Alert(nsnull, errorMsg.get());
-    return PR_TRUE;
+    return;
   case PIP_PKCS12_USER_CANCELED:
-    return PR_TRUE;  /* Just ignore it for now */
+    return;  /* Just ignore it for now */
   case PIP_PKCS12_NOSMARTCARD_EXPORT:
     rv = nssComponent->GetPIPNSSBundleString("PKCS12InfoNoSmartcardBackup", errorMsg);
-    if (NS_FAILED(rv)) return rv;
+    if (NS_FAILED(rv)) return;
     errPrompt->Alert(nsnull, errorMsg.get());
-    return PR_TRUE;
+    return;
   case PIP_PKCS12_RESTORE_FAILED:
     rv = nssComponent->GetPIPNSSBundleString("PKCS12UnknownErrRestore", errorMsg);
-    if (NS_FAILED(rv)) return rv;
+    if (NS_FAILED(rv)) return;
     errPrompt->Alert(nsnull, errorMsg.get());
-    return PR_TRUE;
+    return;
   case PIP_PKCS12_BACKUP_FAILED:
     rv = nssComponent->GetPIPNSSBundleString("PKCS12UnknownErrBackup", errorMsg);
-    if (NS_FAILED(rv)) return rv;
+    if (NS_FAILED(rv)) return;
     errPrompt->Alert(nsnull, errorMsg.get());
-    return PR_TRUE;
+    return;
   case PIP_PKCS12_NSS_ERROR:
     switch (prerr) {
     // The following errors have the potential to be "handled", by asking
@@ -904,41 +904,39 @@ nsPKCS12Blob::handleError(int myerr)
       //     but then again, how would it?  anyway, convey the info below
     case SEC_ERROR_PKCS12_PRIVACY_PASSWORD_INCORRECT:
       rv = nssComponent->GetPIPNSSBundleString("PKCS12PasswordInvalid", errorMsg);
-      if (NS_FAILED(rv)) return rv;
+      if (NS_FAILED(rv)) return;
       errPrompt->Alert(nsnull, errorMsg.get());
     break;
 #endif
     case SEC_ERROR_BAD_PASSWORD:
       rv = nssComponent->GetPIPNSSBundleString("PK11BadPassword", errorMsg);
-      if (NS_FAILED(rv)) return rv;
+      if (NS_FAILED(rv)) return;
       errPrompt->Alert(nsnull, errorMsg.get());
       break;
     case SEC_ERROR_BAD_DER:
     case SEC_ERROR_PKCS12_CORRUPT_PFX_STRUCTURE:
     case SEC_ERROR_PKCS12_INVALID_MAC:
       rv = nssComponent->GetPIPNSSBundleString("PKCS12DecodeErr", errorMsg);
-      if (NS_FAILED(rv)) return rv;
+      if (NS_FAILED(rv)) return;
       errPrompt->Alert(nsnull, errorMsg.get());
       break;
     case SEC_ERROR_PKCS12_DUPLICATE_DATA:
       rv = nssComponent->GetPIPNSSBundleString("PKCS12DupData", errorMsg);
-      if (NS_FAILED(rv)) return rv;
+      if (NS_FAILED(rv)) return;
       errPrompt->Alert(nsnull, errorMsg.get());
       break;
     default:
       rv = nssComponent->GetPIPNSSBundleString("PKCS12UnknownErr", errorMsg);
-      if (NS_FAILED(rv)) return rv;
+      if (NS_FAILED(rv)) return;
       errPrompt->Alert(nsnull, errorMsg.get());
     }
     break;
   case 0: 
   default:
     rv = nssComponent->GetPIPNSSBundleString("PKCS12UnknownErr", errorMsg);
-    if (NS_FAILED(rv)) return rv;
+    if (NS_FAILED(rv)) return;
     errPrompt->Alert(nsnull, errorMsg.get());
     break;
   }
-  if (NS_FAILED(rv)) return rv;
-  return keepGoing;
 }
 
diff --git a/security/manager/ssl/src/nsPKCS12Blob.h b/security/manager/ssl/src/nsPKCS12Blob.h
--- a/security/manager/ssl/src/nsPKCS12Blob.h
+++ b/security/manager/ssl/src/nsPKCS12Blob.h
@@ -90,7 +90,7 @@ private:
   nsresult newPKCS12FilePassword(SECItem *);
   nsresult inputToDecoder(SEC_PKCS12DecoderContext *, nsILocalFile *);
   void unicodeToItem(const PRUnichar *, SECItem *);
-  PRBool handleError(int myerr = 0);
+  void handleError(int myerr = 0);
 
   // RetryReason and ImportMode are used when importing a PKCS12 file.
   // There are two reasons that cause us to retry:
