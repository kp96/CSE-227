diff --git a/mailnews/base/public/nsIMsgIncomingServer.idl b/mailnews/base/public/nsIMsgIncomingServer.idl
--- a/mailnews/base/public/nsIMsgIncomingServer.idl
+++ b/mailnews/base/public/nsIMsgIncomingServer.idl
@@ -26,7 +26,7 @@ interface nsIMsgPluggableStore;
  * often you will want to add extra interfaces that give you server-specific
  * attributes and methods.
  */
-[scriptable, uuid(cf46d3ce-bf1e-40b5-8749-53d1424638b3)]
+[scriptable, uuid(80f305e1-a04b-4795-97af-72a86681c76c)]
 interface nsIMsgIncomingServer : nsISupports {
 
   /**
@@ -88,8 +88,8 @@ interface nsIMsgIncomingServer : nsISupp
   void onUserOrHostNameChanged(in ACString oldName, in ACString newName,
                                in bool hostnameChanged);
 
-  /* cleartext version of the password */
-  attribute ACString password;
+  /// cleartext utf16 version of the password
+  attribute AString password;
 
   /**
    * Attempts to get the password first from the password manager, if that
@@ -107,7 +107,7 @@ interface nsIMsgIncomingServer : nsISupp
    *       if the prompt was presented to the user but the user cancelled the
    *       prompt.
    */
-  ACString getPasswordWithUI(in AString aPromptString, in AString aPromptTitle,
+  AString getPasswordWithUI(in AString aPromptString, in AString aPromptTitle,
                              in nsIMsgWindow aMsgWindow);
 
   /* forget the password in memory and in single signon database */
diff --git a/mailnews/base/src/nsMsgAccountManager.cpp b/mailnews/base/src/nsMsgAccountManager.cpp
--- a/mailnews/base/src/nsMsgAccountManager.cpp
+++ b/mailnews/base/src/nsMsgAccountManager.cpp
@@ -963,7 +963,7 @@ hashCleanupOnExit(nsCStringHashKey::KeyT
       folder = do_QueryInterface(root);
       if (folder)
       {
-         nsCString passwd;
+         nsString passwd;
          bool serverRequiresPasswordForAuthentication = true;
          bool isImap = type.EqualsLiteral("imap");
          if (isImap)
diff --git a/mailnews/base/util/nsMsgIncomingServer.cpp b/mailnews/base/util/nsMsgIncomingServer.cpp
--- a/mailnews/base/util/nsMsgIncomingServer.cpp
+++ b/mailnews/base/util/nsMsgIncomingServer.cpp
@@ -644,13 +644,13 @@ nsMsgIncomingServer::ToString(nsAString&
   return NS_OK;
 }
 
-NS_IMETHODIMP nsMsgIncomingServer::SetPassword(const nsACString& aPassword)
+NS_IMETHODIMP nsMsgIncomingServer::SetPassword(const nsAString& aPassword)
 {
   m_password = aPassword;
   return NS_OK;
 }
 
-NS_IMETHODIMP nsMsgIncomingServer::GetPassword(nsACString& aPassword)
+NS_IMETHODIMP nsMsgIncomingServer::GetPassword(nsAString& aPassword)
 {
   aPassword = m_password;
   return NS_OK;
@@ -719,7 +719,7 @@ nsresult nsMsgIncomingServer::GetPasswor
         rv = logins[i]->GetPassword(password);
         NS_ENSURE_SUCCESS(rv, rv);
 
-        m_password = NS_LossyConvertUTF16toASCII(password);
+        m_password = password;
         break;
       }
     }
@@ -732,7 +732,7 @@ NS_IMETHODIMP
 nsMsgIncomingServer::GetPasswordWithUI(const nsAString& aPromptMessage, const
                                        nsAString& aPromptTitle,
                                        nsIMsgWindow* aMsgWindow,
-                                       nsACString& aPassword)
+                                       nsAString& aPassword)
 {
   nsresult rv = NS_OK;
 
@@ -787,7 +787,7 @@ nsMsgIncomingServer::GetPasswordWithUI(c
       // and getter_Copies.
       PRUnichar *uniPassword = nsnull;
       if (!aPassword.IsEmpty())
-        uniPassword = ToNewUnicode(NS_ConvertASCIItoUTF16(aPassword));
+        uniPassword = ToNewUnicode(aPassword);
 
       bool okayValue = true;
       rv = dialog->PromptPassword(PromiseFlatString(aPromptTitle).get(),
@@ -795,8 +795,6 @@ nsMsgIncomingServer::GetPasswordWithUI(c
                                   NS_ConvertASCIItoUTF16(serverUri).get(),
                                   nsIAuthPrompt::SAVE_PASSWORD_PERMANENTLY,
                                   &uniPassword, &okayValue);
-      nsAutoString uniPasswordAdopted;
-      uniPasswordAdopted.Adopt(uniPassword);
       NS_ENSURE_SUCCESS(rv, rv);
 
       if (!okayValue) // if the user pressed cancel, just return an empty string;
@@ -806,7 +804,7 @@ nsMsgIncomingServer::GetPasswordWithUI(c
       }
 
       // we got a password back...so remember it
-      rv = SetPassword(NS_LossyConvertUTF16toASCII(uniPasswordAdopted));
+      rv = SetPassword(nsDependentString(uniPassword));
       NS_ENSURE_SUCCESS(rv, rv);
     } // if we got a prompt dialog
     else
@@ -866,7 +864,7 @@ nsMsgIncomingServer::ForgetPassword()
   }
   NS_FREE_XPCOM_ISUPPORTS_POINTER_ARRAY(count, logins);
 
-  return SetPassword(EmptyCString());
+  return SetPassword(EmptyString());
 }
 
 NS_IMETHODIMP
diff --git a/mailnews/base/util/nsMsgIncomingServer.h b/mailnews/base/util/nsMsgIncomingServer.h
--- a/mailnews/base/util/nsMsgIncomingServer.h
+++ b/mailnews/base/util/nsMsgIncomingServer.h
@@ -87,7 +87,7 @@ private:
   nsCOMPtr<nsIMsgFilterPlugin> mFilterPlugin;  // XXX should be a list
 
 protected:
-  nsCString m_password;
+  nsString m_password;
   bool m_canHaveFilters;
   bool m_displayStartupPage;
   bool mPerformingBiff;
diff --git a/mailnews/base/util/nsMsgProtocol.cpp b/mailnews/base/util/nsMsgProtocol.cpp
--- a/mailnews/base/util/nsMsgProtocol.cpp
+++ b/mailnews/base/util/nsMsgProtocol.cpp
@@ -949,7 +949,7 @@ nsresult nsMsgProtocol::DoGSSAPIStep2(ns
     return rv;
 }
 
-nsresult nsMsgProtocol::DoNtlmStep1(const char *username, const char *password, nsCString &response)
+nsresult nsMsgProtocol::DoNtlmStep1(const char *username, const PRUnichar *password, nsCString &response)
 {
     nsresult rv;
 
@@ -959,7 +959,7 @@ nsresult nsMsgProtocol::DoNtlmStep1(cons
         return rv;
 
     m_authModule->Init(nsnull, 0, nsnull, NS_ConvertUTF8toUTF16(username).get(),
-                       NS_ConvertUTF8toUTF16(password).get());
+                       password);
 
     void *outBuf;
     PRUint32 outBufLen;
diff --git a/mailnews/base/util/nsMsgProtocol.h b/mailnews/base/util/nsMsgProtocol.h
--- a/mailnews/base/util/nsMsgProtocol.h
+++ b/mailnews/base/util/nsMsgProtocol.h
@@ -123,7 +123,7 @@ protected:
 
   virtual nsresult InitFromURI(nsIURI *aUrl);
 
-  nsresult DoNtlmStep1(const char *username, const char *password, nsCString &response);
+  nsresult DoNtlmStep1(const char *username, const  PRUnichar *password, nsCString &response);
   nsresult DoNtlmStep2(nsCString &commandResponse, nsCString &response);
 
   nsresult DoGSSAPIStep1(const char *service, const char *username, nsCString &response);
@@ -160,7 +160,7 @@ protected:
   nsCString                   m_ContentType;
   PRInt32                     mContentLength;
 
-  nsCString m_lastPasswordSent; // used to prefill the password prompt
+  nsString m_lastPasswordSent; // used to prefill the password prompt
 
   // private helper routine used by subclasses to quickly get a reference to the correct prompt dialog
   // for a mailnews url. 
diff --git a/mailnews/compose/public/nsIMsgComposeParams.idl b/mailnews/compose/public/nsIMsgComposeParams.idl
--- a/mailnews/compose/public/nsIMsgComposeParams.idl
+++ b/mailnews/compose/public/nsIMsgComposeParams.idl
@@ -52,7 +52,7 @@ interface nsIMsgCompFormat {
 };
 
 
-[scriptable, uuid(930895f2-d610-43f4-9e3c-25e1d1fe4143)]
+[scriptable, uuid(1a49907d-6532-4df4-846b-75e6d3a7a362)]
 interface nsIMsgComposeParams : nsISupports {
   attribute MSG_ComposeType       type;
   attribute MSG_ComposeFormat     format;
@@ -62,8 +62,8 @@ interface nsIMsgComposeParams : nsISuppo
   attribute nsIMsgCompFields      composeFields;
   attribute boolean               bodyIsLink;
 
-  attribute nsIMsgSendListener	  sendListener;
-  attribute string                smtpPassword;
+  attribute nsIMsgSendListener    sendListener;
+  attribute AString               smtpPassword;
   attribute nsIMsgDBHdr           origMsgHdr;
 
   /**
diff --git a/mailnews/compose/public/nsIMsgSend.idl b/mailnews/compose/public/nsIMsgSend.idl
--- a/mailnews/compose/public/nsIMsgSend.idl
+++ b/mailnews/compose/public/nsIMsgSend.idl
@@ -219,7 +219,7 @@ interface nsIMsgSend : nsISupports
                               in nsIDOMWindow aParentWindow,
                               in nsIMsgProgress aProgress,
                               in nsIMsgSendListener aListener,
-                              in string aPassword,
+                              in AString aPassword,
                               in AUTF8String aOriginalMsgURI,
                               in MSG_ComposeType aType);
 
diff --git a/mailnews/compose/public/nsISmtpServer.idl b/mailnews/compose/public/nsISmtpServer.idl
--- a/mailnews/compose/public/nsISmtpServer.idl
+++ b/mailnews/compose/public/nsISmtpServer.idl
@@ -18,7 +18,7 @@ interface nsIMsgWindow;
  * Most of the attributes will set/get preferences from the main preferences
  * file.
  */
-[scriptable, uuid(a53dce6c-cd81-495c-83bc-45a65df1f08e)]
+[scriptable, uuid(61da4822-5db3-405e-99ca-7c36783851a1)]
 interface nsISmtpServer : nsISupports {
 
   /// A unique identifier for the server.
@@ -43,7 +43,7 @@ interface nsISmtpServer : nsISupports {
    * It can be specified/saved here to avoid prompting the user constantly for
    * the sending password.
    */
-  attribute ACString password;
+  attribute AString password;
 
   /// Returns a displayname of the format hostname:port or just hostname
   readonly attribute string displayname;
@@ -89,7 +89,7 @@ interface nsISmtpServer : nsISupports {
    * @return              The password to use (may be null if no password was
    *                      obtained).
    */  
-  ACString getPasswordWithUI(in wstring promptString, in wstring promptTitle,
+  AString getPasswordWithUI(in wstring promptString, in wstring promptTitle,
                            in nsIAuthPrompt netPrompt);
 
   /**
@@ -108,7 +108,7 @@ interface nsISmtpServer : nsISupports {
    */  
   void getUsernamePasswordWithUI(in wstring promptString, in wstring promptTitle,
                                  in nsIAuthPrompt netPrompt, out ACString userid,
-                                 out ACString password);
+                                 out AString password);
 
   /**
    * Calling this will *remove* the saved password for this server from the
diff --git a/mailnews/compose/public/nsISmtpService.idl b/mailnews/compose/public/nsISmtpService.idl
--- a/mailnews/compose/public/nsISmtpService.idl
+++ b/mailnews/compose/public/nsISmtpService.idl
@@ -54,7 +54,7 @@ interface nsISmtpService : nsISupports {
    */
   void sendMailMessage(in nsIFile aFilePath, in string aRecipients, 
                        in nsIMsgIdentity aSenderIdentity,
-                       in string aPassword,
+                       in AString aPassword,
                        in nsIUrlListener aUrlListener, 
                        in nsIMsgStatusFeedback aStatusListener, 
                        in nsIInterfaceRequestor aNotificationCallbacks,
diff --git a/mailnews/compose/src/nsMsgCompose.cpp b/mailnews/compose/src/nsMsgCompose.cpp
--- a/mailnews/compose/src/nsMsgCompose.cpp
+++ b/mailnews/compose/src/nsMsgCompose.cpp
@@ -966,8 +966,8 @@ nsMsgCompose::Initialize(nsIMsgComposePa
   if(externalSendListener)
     AddMsgSendListener( externalSendListener );
 
-  nsCString smtpPassword;
-  aParams->GetSmtpPassword(getter_Copies(smtpPassword));
+  nsString smtpPassword;
+  aParams->GetSmtpPassword(smtpPassword);
   mSmtpPassword = smtpPassword;
 
   aParams->GetHtmlToQuote(mHtmlToQuote);
@@ -1142,7 +1142,7 @@ nsresult nsMsgCompose::_SendMsg(MSG_Deli
                     m_window,                           // nsIDOMWindow                      *parentWindow;
                     mProgress,                          // nsIMsgProgress                    *progress,
                     sendListener,                       // listener
-                    mSmtpPassword.get(),
+                    mSmtpPassword,
                     mOriginalMsgURI,
                     mType);
 
diff --git a/mailnews/compose/src/nsMsgCompose.h b/mailnews/compose/src/nsMsgCompose.h
--- a/mailnews/compose/src/nsMsgCompose.h
+++ b/mailnews/compose/src/nsMsgCompose.h
@@ -117,7 +117,7 @@ private:
   nsMsgDispositionState                     mDraftDisposition;
   nsCOMPtr <nsIMsgDBHdr>                    mOrigMsgHdr;
 
-  nsCString                                 mSmtpPassword;
+  nsString                                 mSmtpPassword;
   nsCString                                 mHtmlToQuote;
 
   nsTObserverArray<nsCOMPtr<nsIMsgComposeStateListener> > mStateListeners;
diff --git a/mailnews/compose/src/nsMsgComposeParams.cpp b/mailnews/compose/src/nsMsgComposeParams.cpp
--- a/mailnews/compose/src/nsMsgComposeParams.cpp
+++ b/mailnews/compose/src/nsMsgComposeParams.cpp
@@ -155,14 +155,12 @@ NS_IMETHODIMP nsMsgComposeParams::SetSen
 }
 
 /* attribute string smtpPassword; */
-NS_IMETHODIMP nsMsgComposeParams::GetSmtpPassword(char * *aSmtpPassword)
+NS_IMETHODIMP nsMsgComposeParams::GetSmtpPassword(nsAString &aSmtpPassword)
 {
-  NS_ENSURE_ARG_POINTER(aSmtpPassword);
-  
-  *aSmtpPassword = ToNewCString(mSMTPPassword);
+  aSmtpPassword = mSMTPPassword;
   return NS_OK;
 }
-NS_IMETHODIMP nsMsgComposeParams::SetSmtpPassword(const char * aSmtpPassword)
+NS_IMETHODIMP nsMsgComposeParams::SetSmtpPassword(const nsAString &aSmtpPassword)
 {
   mSMTPPassword = aSmtpPassword;
   return NS_OK;
diff --git a/mailnews/compose/src/nsMsgComposeParams.h b/mailnews/compose/src/nsMsgComposeParams.h
--- a/mailnews/compose/src/nsMsgComposeParams.h
+++ b/mailnews/compose/src/nsMsgComposeParams.h
@@ -23,7 +23,7 @@ public:
   nsCOMPtr<nsIMsgCompFields>    mComposeFields;
   bool                          mBodyIsLink;
   nsCOMPtr<nsIMsgSendListener>  mSendListener;
-  nsCString                     mSMTPPassword;
+  nsString                     mSMTPPassword;
   nsCOMPtr<nsIMsgDBHdr>         mOrigMsgHdr;
   nsCString                     mHtmlToQuote;
 };
diff --git a/mailnews/compose/src/nsMsgSend.cpp b/mailnews/compose/src/nsMsgSend.cpp
--- a/mailnews/compose/src/nsMsgSend.cpp
+++ b/mailnews/compose/src/nsMsgSend.cpp
@@ -3241,7 +3241,7 @@ nsMsgComposeAndSend::Init(
               PRUint32 attachment1_body_length,
               nsIArray *attachments,
               nsIArray *preloaded_attachments,
-              const char *password,
+              const nsAString &password,
               const nsACString &aOriginalMsgURI,
               MSG_ComposeType aType)
 {
@@ -3657,7 +3657,7 @@ nsMsgComposeAndSend::DeliverFileAsMail()
 
     nsCOMPtr<nsIURI> runningUrl;
     rv = smtpService->SendMailMessage(mTempFile, buf, mUserIdentity,
-                                      mSmtpPassword.get(), deliveryListener, msgStatus,
+                                      mSmtpPassword, deliveryListener, msgStatus,
                                       callbacks, mCompFields->GetDSN(),
                                       getter_AddRefs(runningUrl),
                                       getter_AddRefs(mRunningRequest));
@@ -4182,7 +4182,7 @@ nsMsgComposeAndSend::CreateAndSendMessag
               nsIDOMWindow                      *parentWindow,
               nsIMsgProgress                    *progress,
               nsIMsgSendListener                *aListener,
-              const char                        *password,
+              const nsAString                   &password,
               const nsACString                  &aOriginalMsgURI,
               MSG_ComposeType                   aType
               )
@@ -4256,7 +4256,7 @@ nsMsgComposeAndSend::CreateRFC822Message
             aMsgType, aMsgBody,
             aMsgBodyLength,
             nsnull, aAttachments,
-            nsnull, EmptyCString(), nsnull);
+            EmptyString(), EmptyCString(), nsnull);
 
   if (NS_FAILED(rv) && mSendReport)
     mSendReport->SetError(nsIMsgSendReport::process_Current, rv, false);
@@ -4310,7 +4310,7 @@ nsMsgComposeAndSend::SendMessageFile(
             digest_p, false, mode, msgToReplace,
             nsnull, nsnull, nsnull,
             nsnull, nsnull,
-            password, EmptyCString(), nsnull);
+            EmptyString(), EmptyCString(), nsnull);
 
   if (NS_SUCCEEDED(rv))
     rv = DeliverMessage();
diff --git a/mailnews/compose/src/nsMsgSend.h b/mailnews/compose/src/nsMsgSend.h
--- a/mailnews/compose/src/nsMsgSend.h
+++ b/mailnews/compose/src/nsMsgSend.h
@@ -212,7 +212,7 @@ public:
                    PRUint32         attachment1_body_length,
                    nsIArray   *attachments,
                    nsIArray     *preloaded_attachments,
-                   const char       *password,
+                   const nsAString &password,
                    const nsACString &aOriginalMsgURI,
                    MSG_ComposeType  aType);
 
@@ -379,7 +379,7 @@ private:
   nsresult AddXForwardedMessageIdHeader();
 
   nsCOMPtr<nsIMsgSendReport>  mSendReport;
-  nsCString                   mSmtpPassword;            // store the smtp Password use during a send
+  nsString                    mSmtpPassword;            // store the smtp Password use during a send
 };
 
 //
diff --git a/mailnews/compose/src/nsSmtpProtocol.cpp b/mailnews/compose/src/nsSmtpProtocol.cpp
--- a/mailnews/compose/src/nsSmtpProtocol.cpp
+++ b/mailnews/compose/src/nsSmtpProtocol.cpp
@@ -1255,7 +1255,7 @@ PRInt32 nsSmtpProtocol::AuthLoginStep1()
   PRInt32 status = 0;
   nsCString username;
   char *base64Str = nsnull;
-  nsCAutoString password;
+  nsAutoString password;
   nsCOMPtr<nsISmtpServer> smtpServer;
   rv = m_runningURL->GetSmtpServer(getter_AddRefs(smtpServer));
   if (NS_FAILED(rv)) return NS_ERROR_FAILURE;
@@ -1278,6 +1278,8 @@ PRInt32 nsSmtpProtocol::AuthLoginStep1()
     m_urlErrorState = NS_ERROR_SMTP_PASSWORD_UNDEFINED;
     return NS_ERROR_SMTP_PASSWORD_UNDEFINED;
   }
+  nsCString asciiPassword;
+  asciiPassword.Assign(NS_ConvertUTF16toUTF8(password));
 
   if (m_currentAuthMethod == SMTP_AUTH_CRAM_MD5_ENABLED)
   {
@@ -1304,7 +1306,7 @@ PRInt32 nsSmtpProtocol::AuthLoginStep1()
     PR_snprintf(&plain_string[1], 510, "%s", username.get());
     len += username.Length();
     len++; /* second <NUL> char */
-    PR_snprintf(&plain_string[len], 511-len, "%s", password.get());
+    PR_snprintf(&plain_string[len], 511-len, "%s", asciiPassword.get());
     len += password.Length();
 
     base64Str = PL_Base64Encode(plain_string, len, nsnull);
@@ -1339,13 +1341,15 @@ PRInt32 nsSmtpProtocol::AuthLoginStep2()
   PRInt32 status = 0;
   nsresult rv;
   nsCAutoString password;
+  nsAutoString uniPassword;
 
-  GetPassword(password);
-  if (password.IsEmpty())
+  GetPassword(uniPassword);
+  if (uniPassword.IsEmpty())
   {
     m_urlErrorState = NS_ERROR_SMTP_PASSWORD_UNDEFINED;
     return NS_ERROR_SMTP_PASSWORD_UNDEFINED;
   }
+  CopyUTF16toUTF8(uniPassword, password);
   PR_LOG(SMTPLogModule, PR_LOG_MAX, ("SMTP AuthLoginStep2"));
 
   if (!password.IsEmpty())
@@ -1939,7 +1943,7 @@ nsresult nsSmtpProtocol::LoadUrl(nsIURI 
 }
 
 nsresult
-nsSmtpProtocol::GetPassword(nsCString &aPassword)
+nsSmtpProtocol::GetPassword(nsString &aPassword)
 {
     nsresult rv;
     nsCOMPtr<nsISmtpUrl> smtpUrl = do_QueryInterface(m_runningURL, &rv);
@@ -1992,7 +1996,8 @@ nsSmtpProtocol::GetPassword(nsCString &a
  * is the username.
  */
 nsresult
-nsSmtpProtocol::PromptForPassword(nsISmtpServer *aSmtpServer, nsISmtpUrl *aSmtpUrl, const PRUnichar **formatStrings, nsACString &aPassword)
+nsSmtpProtocol::PromptForPassword(nsISmtpServer *aSmtpServer, nsISmtpUrl *aSmtpUrl,
+                                  const PRUnichar **formatStrings, nsAString &aPassword)
 {
   nsCOMPtr<nsIStringBundleService> stringService =
     mozilla::services::GetStringBundleService();
@@ -2031,7 +2036,7 @@ nsSmtpProtocol::PromptForPassword(nsISmt
 
 nsresult
 nsSmtpProtocol::GetUsernamePassword(nsACString &aUsername,
-                                    nsACString &aPassword)
+                                    nsAString &aPassword)
 {
     nsresult rv;
     nsCOMPtr<nsISmtpUrl> smtpUrl = do_QueryInterface(m_runningURL, &rv);
diff --git a/mailnews/compose/src/nsSmtpProtocol.h b/mailnews/compose/src/nsSmtpProtocol.h
--- a/mailnews/compose/src/nsSmtpProtocol.h
+++ b/mailnews/compose/src/nsSmtpProtocol.h
@@ -193,11 +193,11 @@ private:
     PRInt32 SendMessageInFile();
 
     void AppendHelloArgument(nsACString& aResult);
-    nsresult GetPassword(nsCString &aPassword);
-    nsresult GetUsernamePassword(nsACString &aUsername, nsACString &aPassword);
+    nsresult GetPassword(nsString &aPassword);
+    nsresult GetUsernamePassword(nsACString &aUsername, nsAString &aPassword);
     nsresult PromptForPassword(nsISmtpServer *aSmtpServer, nsISmtpUrl *aSmtpUrl, 
                                const PRUnichar **formatStrings, 
-                               nsACString &aPassword);
+                               nsAString &aPassword);
 
     void    InitPrefAuthMethods(PRInt32 authMethodPrefValue);
     nsresult ChooseAuthMethod();
diff --git a/mailnews/compose/src/nsSmtpServer.cpp b/mailnews/compose/src/nsSmtpServer.cpp
--- a/mailnews/compose/src/nsSmtpServer.cpp
+++ b/mailnews/compose/src/nsSmtpServer.cpp
@@ -252,7 +252,7 @@ nsSmtpServer::SetUsername(const nsACStri
 }
 
 NS_IMETHODIMP
-nsSmtpServer::GetPassword(nsACString& aPassword)
+nsSmtpServer::GetPassword(nsAString& aPassword)
 {
     if (m_password.IsEmpty() && !m_logonFailed)
     {
@@ -358,7 +358,7 @@ nsSmtpServer::VerifyLogon(nsIUrlListener
 
 
 NS_IMETHODIMP
-nsSmtpServer::SetPassword(const nsACString& aPassword)
+nsSmtpServer::SetPassword(const nsAString& aPassword)
 {
   m_password = aPassword;
   return NS_OK;
@@ -368,7 +368,7 @@ NS_IMETHODIMP
 nsSmtpServer::GetPasswordWithUI(const PRUnichar *aPromptMessage,
                                 const PRUnichar *aPromptTitle,
                                 nsIAuthPrompt* aDialog,
-                                nsACString &aPassword)
+                                nsAString &aPassword)
 {
   if (!m_password.IsEmpty())
     return GetPassword(aPassword);
@@ -394,13 +394,10 @@ nsSmtpServer::GetPasswordWithUI(const PR
     aPassword.Truncate();
     return NS_MSG_PASSWORD_PROMPT_CANCELLED;
   }
-
-  NS_LossyConvertUTF16toASCII password(uniPassword);
-
-  rv = SetPassword(password);
+  aPassword = uniPassword;
+  rv = SetPassword(aPassword);
   NS_ENSURE_SUCCESS(rv, rv);
 
-  aPassword = password;
   return NS_OK;
 }
 
@@ -409,7 +406,7 @@ nsSmtpServer::GetUsernamePasswordWithUI(
                                 PRUnichar *aPromptTitle,
                                 nsIAuthPrompt* aDialog,
                                 nsACString &aUsername,
-                                nsACString &aPassword)
+                                nsAString &aPassword)
 {
   nsresult rv;
   if (!m_password.IsEmpty())
@@ -427,14 +424,13 @@ nsSmtpServer::GetUsernamePasswordWithUI(
   NS_ENSURE_SUCCESS(rv, rv);
 
   nsString uniUsername;
-  nsString uniPassword;
   bool okayValue = true;
 
   rv = aDialog->PromptUsernameAndPassword(aPromptTitle, aPromptMessage,
                                           NS_ConvertASCIItoUTF16(serverUri).get(),
                                           nsIAuthPrompt::SAVE_PASSWORD_PERMANENTLY,
                                           getter_Copies(uniUsername),
-                                          getter_Copies(uniPassword),
+                                          getter_Copies(aPassword),
                                           &okayValue);
   NS_ENSURE_SUCCESS(rv, rv);
 
@@ -452,13 +448,10 @@ nsSmtpServer::GetUsernamePasswordWithUI(
   rv = SetUsername(username);
   NS_ENSURE_SUCCESS(rv, rv);
 
-  NS_LossyConvertUTF16toASCII password(uniPassword);
-
-  rv = SetPassword(password);
+  rv = SetPassword(aPassword);
   NS_ENSURE_SUCCESS(rv, rv);
 
   aUsername = username;
-  aPassword = password;
   return NS_OK;
 }
 
@@ -513,7 +506,7 @@ nsSmtpServer::ForgetPassword()
   }
   NS_FREE_XPCOM_ISUPPORTS_POINTER_ARRAY(count, logins);
 
-  rv = SetPassword(EmptyCString());
+  rv = SetPassword(EmptyString());
   m_logonFailed = true;
   return rv;
 }
diff --git a/mailnews/compose/src/nsSmtpServer.h b/mailnews/compose/src/nsSmtpServer.h
--- a/mailnews/compose/src/nsSmtpServer.h
+++ b/mailnews/compose/src/nsSmtpServer.h
@@ -30,7 +30,7 @@ private:
     nsresult getPrefs();
     void getIntPrefWithDefault(const char *prefName, PRInt32 *val,
                                PRInt32 defval);
-    nsCString m_password;
+    nsString m_password;
     bool m_logonFailed;
 };
 
diff --git a/mailnews/compose/src/nsSmtpService.cpp b/mailnews/compose/src/nsSmtpService.cpp
--- a/mailnews/compose/src/nsSmtpService.cpp
+++ b/mailnews/compose/src/nsSmtpService.cpp
@@ -78,7 +78,7 @@ NS_IMPL_ISUPPORTS2(nsSmtpService, nsISmt
 NS_IMETHODIMP nsSmtpService::SendMailMessage(nsIFile * aFilePath,
                                         const char * aRecipients, 
                                         nsIMsgIdentity * aSenderIdentity,
-                                        const char * aPassword,
+                                        const nsAString & aPassword,
                                         nsIUrlListener * aUrlListener, 
                                         nsIMsgStatusFeedback *aStatusFeedback,
                                         nsIInterfaceRequestor* aNotificationCallbacks,
@@ -94,8 +94,8 @@ NS_IMETHODIMP nsSmtpService::SendMailMes
 
   if (NS_SUCCEEDED(rv) && smtpServer)
   {
-    if (aPassword && *aPassword)
-      smtpServer->SetPassword(nsDependentCString(aPassword));
+    if (!aPassword.IsEmpty())
+      smtpServer->SetPassword(aPassword);
 
     // this ref counts urlToRun
     rv = NS_MsgBuildSmtpUrl(aFilePath, smtpServer, aRecipients, aSenderIdentity,
diff --git a/mailnews/extensions/mdn/src/nsMsgMdnGenerator.cpp b/mailnews/extensions/mdn/src/nsMsgMdnGenerator.cpp
--- a/mailnews/extensions/mdn/src/nsMsgMdnGenerator.cpp
+++ b/mailnews/extensions/mdn/src/nsMsgMdnGenerator.cpp
@@ -858,7 +858,7 @@ nsresult nsMsgMdnGenerator::SendMdnMsg()
 
     nsCOMPtr<nsIRequest> aRequest;
     smtpService->SendMailMessage(m_file, m_dntRrt.get(), m_identity,
-                                     nsnull, this, nsnull, nsnull, false, nsnull,
+                                     EmptyString(), this, nsnull, nsnull, false, nsnull,
                                      getter_AddRefs(aRequest));
 
     return NS_OK;
diff --git a/mailnews/imap/public/nsIIMAPHostSessionList.h b/mailnews/imap/public/nsIIMAPHostSessionList.h
--- a/mailnews/imap/public/nsIIMAPHostSessionList.h
+++ b/mailnews/imap/public/nsIIMAPHostSessionList.h
@@ -36,7 +36,7 @@ public:
 
   // Passwords
   NS_IMETHOD  GetPasswordForHost(const char *serverKey, nsString &result) = 0;
-  NS_IMETHOD  SetPasswordForHost(const char *serverKey, const char *password) = 0;
+  NS_IMETHOD  SetPasswordForHost(const char *serverKey, const nsAString &password) = 0;
   NS_IMETHOD  GetPasswordVerifiedOnline(const char *serverKey, bool &result) = 0;
   NS_IMETHOD  SetPasswordVerifiedOnline(const char *serverKey) = 0;
 
diff --git a/mailnews/imap/public/nsIImapIncomingServer.idl b/mailnews/imap/public/nsIImapIncomingServer.idl
--- a/mailnews/imap/public/nsIImapIncomingServer.idl
+++ b/mailnews/imap/public/nsIImapIncomingServer.idl
@@ -22,7 +22,7 @@ interface nsMsgImapDeleteModels
   const long DeleteNoTrash = 2; /* delete is shift delete - don't create or use trash */
 };
 
-[scriptable, uuid(ea6a0765-07b8-40df-924c-9004ed707251)]
+[scriptable, uuid(85d4f75b-39ef-4200-a3ac-3300e2c6df10)]
 interface nsIImapIncomingServer : nsISupports {
 
   attribute long maximumConnectionsNumber;
@@ -97,7 +97,7 @@ interface nsIImapIncomingServer : nsISup
    *       if the prompt was presented to the user but the user cancelled the
    *       prompt.
    */
-  ACString PromptPassword(in nsIMsgWindow aWindow);
+  AString PromptPassword(in nsIMsgWindow aWindow);
   attribute boolean doingLsub;
 
   ACString getUriWithNamespacePrefixIfNecessary(in long namespaceType, in ACString originalUri);
diff --git a/mailnews/imap/public/nsIImapProtocol.idl b/mailnews/imap/public/nsIImapProtocol.idl
--- a/mailnews/imap/public/nsIImapProtocol.idl
+++ b/mailnews/imap/public/nsIImapProtocol.idl
@@ -15,7 +15,7 @@ interface nsIMsgFolder;
 interface nsIImapHostSessionList;
 interface nsIMsgWindow;
 
-[scriptable, uuid(177f4140-37ad-4828-880c-42d4ee5d2015)]
+[scriptable, uuid(ae5e6409-1e8a-4848-8e61-ee482e157ae1)]
 interface nsIImapProtocol : nsISupports {
   void LoadImapUrl(in nsIURI aUrl, in nsISupports aConsumer);
 
@@ -65,7 +65,5 @@ interface nsIImapProtocol : nsISupports 
   void GetSelectedMailboxName(out string folderName);
   // Reset folder connection to authenticated state
   void ResetToAuthenticatedState();
-
-  void OverrideConnectionInfo(in wstring pHost, in unsigned short pPort, in string pCookieData);
 };
 
diff --git a/mailnews/imap/public/nsIImapServerSink.idl b/mailnews/imap/public/nsIImapServerSink.idl
--- a/mailnews/imap/public/nsIImapServerSink.idl
+++ b/mailnews/imap/public/nsIImapServerSink.idl
@@ -16,7 +16,7 @@ interface nsIImapMockChannel;
  * nsIImapServerSink is designed to be used as a proxy to the application's UI
  * thread from the running IMAP threads.
  */
-[scriptable, uuid(33184087-eadc-4b5d-aad6-14cf6e6a43af)]
+[scriptable, uuid(61749da3-6883-4cbc-a8d7-e3bb5336f286)]
 interface nsIImapServerSink : nsISupports {
   /**
    * Check if the given folder path is a possible IMAP mailbox.
@@ -133,7 +133,7 @@ interface nsIImapServerSink : nsISupport
    */
   void asyncGetPassword(in nsIImapProtocol aProtocol,
                         in boolean aNewPasswordRequested,
-                        out ACString aPassword);
+                        out AString aPassword);
 
   attribute boolean userAuthenticated;
   void setMailServerUrls(in ACString manageMailAccount, in ACString manageLists, in ACString manageFilters);
diff --git a/mailnews/imap/src/nsIMAPHostSessionList.cpp b/mailnews/imap/src/nsIMAPHostSessionList.cpp
--- a/mailnews/imap/src/nsIMAPHostSessionList.cpp
+++ b/mailnews/imap/src/nsIMAPHostSessionList.cpp
@@ -23,7 +23,6 @@ nsIMAPHostInfo::nsIMAPHostInfo(const cha
   NS_ASSERTION(server, "*** Fatal null imap incoming server...\n");
   server->GetServerDirectory(fOnlineDir);
   fNextHost = NULL;
-  fCachedPassword = NULL;
   fCapabilityFlags = kCapabilityUndefined;
   fHierarchyDelimiters = NULL;
 #ifdef DEBUG_bienvenu1
@@ -51,7 +50,6 @@ nsIMAPHostInfo::nsIMAPHostInfo(const cha
 
 nsIMAPHostInfo::~nsIMAPHostInfo()
 {
-  PR_Free(fCachedPassword);
   PR_Free(fHierarchyDelimiters);
   delete fNamespaceList;
   delete fTempNamespaceList;
@@ -155,21 +153,17 @@ NS_IMETHODIMP nsIMAPHostSessionList::Get
   PR_EnterMonitor(gCachedHostInfoMonitor);
   nsIMAPHostInfo *host = FindHost(serverKey);
   if (host)
-    CopyASCIItoUTF16(nsDependentCString(host->fCachedPassword), result);
+    result = host->fCachedPassword;
   PR_ExitMonitor(gCachedHostInfoMonitor);
   return (host == NULL) ? NS_ERROR_ILLEGAL_VALUE : NS_OK;
 }
 
-NS_IMETHODIMP nsIMAPHostSessionList::SetPasswordForHost(const char *serverKey, const char *password)
+NS_IMETHODIMP nsIMAPHostSessionList::SetPasswordForHost(const char *serverKey, const nsAString &password)
 {
   PR_EnterMonitor(gCachedHostInfoMonitor);
   nsIMAPHostInfo *host = FindHost(serverKey);
   if (host)
-  {
-    PR_FREEIF(host->fCachedPassword);
-    if (password)
-      host->fCachedPassword = NS_strdup(password);
-  }
+    host->fCachedPassword = password;
   PR_ExitMonitor(gCachedHostInfoMonitor);
   return (host == NULL) ? NS_ERROR_ILLEGAL_VALUE : NS_OK;
 }
diff --git a/mailnews/imap/src/nsIMAPHostSessionList.h b/mailnews/imap/src/nsIMAPHostSessionList.h
--- a/mailnews/imap/src/nsIMAPHostSessionList.h
+++ b/mailnews/imap/src/nsIMAPHostSessionList.h
@@ -24,7 +24,7 @@ public:
   ~nsIMAPHostInfo();
 protected:
   nsCString fServerKey;
-  char *fCachedPassword;
+  nsString fCachedPassword;
   nsCString fOnlineDir;
   nsIMAPHostInfo *fNextHost;
   eIMAPCapabilityFlags fCapabilityFlags;
@@ -68,7 +68,7 @@ public:
 
   // Passwords
   NS_IMETHOD GetPasswordForHost(const char *serverKey, nsString &result);
-  NS_IMETHOD SetPasswordForHost(const char *serverKey, const char *password);
+  NS_IMETHOD SetPasswordForHost(const char *serverKey, const nsAString &password);
   NS_IMETHOD GetPasswordVerifiedOnline(const char *serverKey, bool &result);
   NS_IMETHOD SetPasswordVerifiedOnline(const char *serverKey);
 
diff --git a/mailnews/imap/src/nsImapIncomingServer.cpp b/mailnews/imap/src/nsImapIncomingServer.cpp
--- a/mailnews/imap/src/nsImapIncomingServer.cpp
+++ b/mailnews/imap/src/nsImapIncomingServer.cpp
@@ -948,7 +948,7 @@ NS_IMETHODIMP nsImapIncomingServer::Rese
 NS_IMETHODIMP
 nsImapIncomingServer::PerformExpand(nsIMsgWindow *aMsgWindow)
 {
-  nsCString password;
+  nsString password;
   nsresult rv;
   rv = GetPassword(password);
   NS_ENSURE_SUCCESS(rv, rv);
@@ -2126,7 +2126,7 @@ NS_IMETHODIMP nsImapIncomingServer::Forg
 NS_IMETHODIMP
 nsImapIncomingServer::AsyncGetPassword(nsIImapProtocol *aProtocol,
                                        bool aNewPasswordRequested,
-                                       nsACString &aPassword)
+                                       nsAString &aPassword)
 {
   if (m_password.IsEmpty())
   {
@@ -2152,7 +2152,7 @@ nsImapIncomingServer::AsyncGetPassword(n
 
 NS_IMETHODIMP
 nsImapIncomingServer::PromptPassword(nsIMsgWindow *aMsgWindow,
-                                  nsACString &aPassword)
+                                     nsAString &aPassword)
 {
   nsString passwordTitle;
   IMAPGetStringByID(IMAP_ENTER_PASSWORD_PROMPT_TITLE, getter_Copies(passwordTitle));
diff --git a/mailnews/imap/src/nsImapProtocol.cpp b/mailnews/imap/src/nsImapProtocol.cpp
--- a/mailnews/imap/src/nsImapProtocol.cpp
+++ b/mailnews/imap/src/nsImapProtocol.cpp
@@ -437,7 +437,6 @@ nsImapProtocol::nsImapProtocol() : nsMsg
   m_hierarchyNameState = kNoOperationInProgress;
   m_discoveryStatus = eContinue;
 
-  m_overRideUrlConnectionInfo = false;
   // m_dataOutputBuf is used by Send Data
   m_dataOutputBuf = (char *) PR_CALLOC(sizeof(char) * OUTPUT_BUFFER_SIZE);
   m_allocatedSize = OUTPUT_BUFFER_SIZE;
@@ -786,28 +785,15 @@ nsresult nsImapProtocol::SetupWithUrl(ns
         if (NS_FAILED(rv))
           proxyInfo = nsnull;
 
-        const nsACString *socketHost;
-        PRUint16 socketPort;
-
-        if (m_overRideUrlConnectionInfo)
-        {
-          socketHost = &m_logonHost;
-          socketPort = m_logonPort;
-        }
-        else
-        {
-          socketHost = &m_realHostName;
-          socketPort = port;
-        }
         rv = socketService->CreateTransport(&connectionType, connectionType != nsnull,
-                                            *socketHost, socketPort, proxyInfo,
+                                            m_realHostName, port, proxyInfo,
                                             getter_AddRefs(m_transport));
         if (NS_FAILED(rv) && m_socketType == nsMsgSocketType::trySTARTTLS)
         {
           connectionType = nsnull;
           m_socketType = nsMsgSocketType::plain;
           rv = socketService->CreateTransport(&connectionType, connectionType != nsnull,
-                                              *socketHost, socketPort, proxyInfo,
+                                              m_realHostName, port, proxyInfo,
                                               getter_AddRefs(m_transport));
         }
         // remember so we can know whether we can issue a start tls or not...
@@ -5553,14 +5539,14 @@ void nsImapProtocol::ResetAuthMethods()
   m_failedAuthMethods = 0;
 }
 
-nsresult nsImapProtocol::AuthLogin(const char *userName, const nsCString &password, eIMAPCapabilityFlag flag)
+nsresult nsImapProtocol::AuthLogin(const char *userName, const nsString &aPassword, eIMAPCapabilityFlag flag)
 {
   ProgressEventFunctionUsingId (IMAP_STATUS_SENDING_AUTH_LOGIN);
   IncrementCommandTagNumber();
 
   char * currentCommand=nsnull;
   nsresult rv;
-
+  NS_ConvertUTF16toUTF8 password(aPassword);
   PR_LOG(IMAP, PR_LOG_DEBUG, ("IMAP: trying auth method 0x%X", m_currentAuthMethod));
 
   if (flag & kHasAuthExternalCapability)
@@ -5570,7 +5556,7 @@ nsresult nsImapProtocol::AuthLogin(const
       command.Append(" authenticate EXTERNAL " );
       command.Append(base64UserName);
       command.Append(CRLF);
-	  PR_Free(base64UserName);
+      PR_Free(base64UserName);
       rv = SendData(command.get());
       ParseIMAPandCheckForNewMail();
       nsImapServerResponseParser &parser = GetServerStateParser();
@@ -5678,7 +5664,7 @@ nsresult nsImapProtocol::AuthLogin(const
     if (GetServerStateParser().LastCommandSuccessful())
     {
       nsCAutoString cmd;
-      rv = DoNtlmStep1(userName, password.get(), cmd);
+      rv = DoNtlmStep1(userName, aPassword.get(), cmd);
       NS_ENSURE_SUCCESS(rv, rv);
       cmd += CRLF;
       rv = SendData(cmd.get());
@@ -5768,7 +5754,9 @@ nsresult nsImapProtocol::AuthLogin(const
     // if the password contains a \, login will fail
     // turn foo\bar into foo\\bar
     nsCAutoString correctedPassword;
-    EscapeUserNamePasswordString(password.get(), &correctedPassword);
+    // We're assuming old style login doesn't want UTF-8
+    EscapeUserNamePasswordString(NS_LossyConvertUTF16toASCII(aPassword).get(),
+                                 &correctedPassword);
     command.Append(correctedPassword);
     command.Append("\"" CRLF);
     rv = SendData(command.get(), true /* suppress logging */);
@@ -5789,7 +5777,7 @@ nsresult nsImapProtocol::AuthLogin(const
   PR_Free(currentCommand);
   NS_ENSURE_SUCCESS(rv, rv);
   return GetServerStateParser().LastCommandSuccessful() ?
-        NS_OK : NS_ERROR_FAILURE;
+           NS_OK : NS_ERROR_FAILURE;
 }
 
 void nsImapProtocol::OnLSubFolders()
@@ -8091,18 +8079,11 @@ nsresult nsImapProtocol::GetMsgWindow(ns
  *    (which is NS_SUCCEEDED!) when user cancelled
  *    NS_FAILED(rv) for other errors
  */
-nsresult nsImapProtocol::GetPassword(nsCString &password,
+nsresult nsImapProtocol::GetPassword(nsString &password,
                                      bool newPasswordRequested)
 {
   // we are in the imap thread so *NEVER* try to extract the password with UI
-  // if logon redirection has changed the password, use the cookie as the password
-  if (m_overRideUrlConnectionInfo)
-  {
-    password.Assign(m_logonCookie);
-    return NS_OK;
-  }
-
-  NS_ENSURE_TRUE(m_imapServerSink, NS_ERROR_NULL_POINTER);
+ NS_ENSURE_TRUE(m_imapServerSink, NS_ERROR_NULL_POINTER);
   NS_ENSURE_TRUE(m_server, NS_ERROR_NULL_POINTER);
   nsresult rv;
   nsCOMPtr<nsIMsgIncomingServer> server = do_QueryReferent(m_server, &rv);
@@ -8117,10 +8098,9 @@ nsresult nsImapProtocol::GetPassword(nsC
     NS_ENSURE_TRUE(msgWindow, NS_ERROR_NOT_AVAILABLE); // biff case
 
     // Get the password from pw manager (harddisk) or user (dialog)
-    nsCAutoString pwd; // GetPasswordWithUI truncates the password on Cancel
-    rv = m_imapServerSink->AsyncGetPassword(this,
-                                                     newPasswordRequested,
-                                                     password);
+    nsAutoString pwd; // GetPasswordWithUI truncates the password on Cancel
+    rv = m_imapServerSink->AsyncGetPassword(this, newPasswordRequested,
+                                            password);
     if (password.IsEmpty())
     {
       PRIntervalTime sleepTime = kImapSleepTime;
@@ -8150,7 +8130,7 @@ nsImapProtocol::OnPromptStart(bool *aRes
 
   *aResult = false;
   GetMsgWindow(getter_AddRefs(msgWindow));
-  nsCString password = m_lastPasswordSent;
+  nsString password = m_lastPasswordSent;
   rv = imapServer->PromptPassword(msgWindow, password);
   m_password = password;
   m_passwordStatus = rv;
@@ -8192,7 +8172,7 @@ bool nsImapProtocol::TryToLogon()
   NS_ENSURE_TRUE(m_imapServerSink, false);
   bool loginSucceeded = false;
   bool skipLoop = false;
-  nsCAutoString password;
+  nsAutoString password;
   nsCAutoString userName;
 
   nsresult rv = ChooseAuthMethod();
@@ -8338,7 +8318,7 @@ bool nsImapProtocol::TryToLogon()
             PR_LOG(IMAP, PR_LOG_WARN, ("new password button pressed."));
             // Forget the current password
             password.Truncate();
-            m_hostSessionList->SetPasswordForHost(GetImapServerKey(), nsnull);
+            m_hostSessionList->SetPasswordForHost(GetImapServerKey(), EmptyString());
             m_imapServerSink->ForgetPassword();
             m_password.Truncate();
             PR_LOG(IMAP, PR_LOG_WARN, ("password resetted (nulled)"));
@@ -8371,7 +8351,7 @@ bool nsImapProtocol::TryToLogon()
   {
     PR_LOG(IMAP, PR_LOG_DEBUG, ("login succeeded"));
     bool passwordAlreadyVerified;
-    m_hostSessionList->SetPasswordForHost(GetImapServerKey(), password.get());
+    m_hostSessionList->SetPasswordForHost(GetImapServerKey(), password);
     rv = m_hostSessionList->GetPasswordVerifiedOnline(GetImapServerKey(), passwordAlreadyVerified);
     if (NS_SUCCEEDED(rv) && !passwordAlreadyVerified)
       m_hostSessionList->SetPasswordVerifiedOnline(GetImapServerKey());
@@ -8464,15 +8444,6 @@ nsImapProtocol::GetShowDeletedMessages()
     return rv;
 }
 
-NS_IMETHODIMP nsImapProtocol::OverrideConnectionInfo(const PRUnichar *pHost, PRUint16 pPort, const char *pCookieData)
-{
-  m_logonHost = NS_LossyConvertUTF16toASCII(pHost);
-  m_logonPort = pPort;
-  m_logonCookie = pCookieData;
-  m_overRideUrlConnectionInfo = true;
-  return NS_OK;
-}
-
 bool nsImapProtocol::CheckNeeded()
 {
   if (m_flagChangeCount >= kFlagChangesBeforeCheck)
diff --git a/mailnews/imap/src/nsImapProtocol.h b/mailnews/imap/src/nsImapProtocol.h
--- a/mailnews/imap/src/nsImapProtocol.h
+++ b/mailnews/imap/src/nsImapProtocol.h
@@ -353,7 +353,7 @@ private:
   // If we get an async password prompt, this is where the UI thread
   // stores the password, before notifying the imap thread of the password
   // via the m_passwordReadyMonitor.
-  nsCString m_password;
+  nsString m_password;
   // Set to the result of nsImapServer::PromptPassword
   nsresult    m_passwordStatus;
 
@@ -459,7 +459,7 @@ private:
   void StartTLS();
 
   // login related methods.
-  nsresult GetPassword(nsCString &password, bool aNewPasswordRequested);
+  nsresult GetPassword(nsString &password, bool aNewPasswordRequested);
   void InitPrefAuthMethods(PRInt32 authMethodPrefValue);
   nsresult ChooseAuthMethod();
   void MarkAuthMethodAsFailed(eIMAPCapabilityFlags failedAuthMethod);
@@ -474,7 +474,7 @@ private:
   void Language(); // set the language on the server if it supports it
   void Namespace();
   void InsecureLogin(const char *userName, const nsCString &password);
-  nsresult AuthLogin(const char *userName, const nsCString &password, eIMAPCapabilityFlag flag);
+  nsresult AuthLogin(const char *userName, const nsString &password, eIMAPCapabilityFlag flag);
   void ProcessAuthenticatedStateURL();
   void ProcessAfterAuthenticated();
   void ProcessSelectedStateURL();
@@ -604,15 +604,8 @@ private:
 
   bool m_fromHeaderSeen;
 
-  // these settings allow clients to override various pieces of the connection info from the url
-  bool m_overRideUrlConnectionInfo;
+  nsString mAcceptLanguages;
 
-  nsCString m_logonHost;
-  nsCString m_logonCookie;
-  PRInt16 m_logonPort;
-  
-  nsString mAcceptLanguages;
-  
   // progress stuff
   void SetProgressString(PRInt32 stringId);
   
diff --git a/mailnews/imap/src/nsSyncRunnableHelpers.cpp b/mailnews/imap/src/nsSyncRunnableHelpers.cpp
--- a/mailnews/imap/src/nsSyncRunnableHelpers.cpp
+++ b/mailnews/imap/src/nsSyncRunnableHelpers.cpp
@@ -439,7 +439,7 @@ NS_SYNCRUNNABLEMETHOD2(ImapServerSink, F
 NS_SYNCRUNNABLEMETHOD2(ImapServerSink, FEAlertWithID, PRInt32, nsIMsgMailNewsUrl *)
 NS_SYNCRUNNABLEMETHOD2(ImapServerSink, FEAlertFromServer, const nsACString &, nsIMsgMailNewsUrl *)
 NS_SYNCRUNNABLEMETHOD0(ImapServerSink, CommitNamespaces)
-NS_SYNCRUNNABLEMETHOD3(ImapServerSink, AsyncGetPassword, nsIImapProtocol *, bool, nsACString &)
+NS_SYNCRUNNABLEMETHOD3(ImapServerSink, AsyncGetPassword, nsIImapProtocol *, bool, nsAString &)
 NS_SYNCRUNNABLEATTRIBUTE(ImapServerSink, UserAuthenticated, bool)
 NS_SYNCRUNNABLEMETHOD3(ImapServerSink, SetMailServerUrls, const nsACString &, const nsACString &, const nsACString &)
 NS_SYNCRUNNABLEMETHOD1(ImapServerSink, GetArbitraryHeaders, nsACString &)
diff --git a/mailnews/local/src/nsPop3Protocol.cpp b/mailnews/local/src/nsPop3Protocol.cpp
--- a/mailnews/local/src/nsPop3Protocol.cpp
+++ b/mailnews/local/src/nsPop3Protocol.cpp
@@ -765,7 +765,7 @@ NS_IMETHODIMP nsPop3Protocol::OnPromptSt
   nsCOMPtr<nsIMsgIncomingServer> server = do_QueryInterface(m_pop3Server, &rv);
   NS_ENSURE_SUCCESS(rv, rv);
 
-  nsCAutoString passwordResult;
+  nsAutoString passwordResult;
 
   // pass the failed password into the password prompt so that
   // it will be pre-filled, in case it failed because of a
@@ -2090,7 +2090,9 @@ PRInt32 nsPop3Protocol::SendUsername()
     nsCAutoString cmd;
 
     if (m_currentAuthMethod == POP3_HAS_AUTH_NTLM)
-        (void) DoNtlmStep1(m_username.get(), m_passwordResult.get(), cmd);
+        (void) DoNtlmStep1(m_username.get(),
+                           m_passwordResult.get(),
+                           cmd);
     else if (m_currentAuthMethod == POP3_HAS_AUTH_CRAM_MD5)
         cmd = "AUTH CRAM-MD5";
     else if (m_currentAuthMethod == POP3_HAS_AUTH_PLAIN)
@@ -2158,7 +2160,8 @@ PRInt32 nsPop3Protocol::SendPassword()
 
     if (decodedChallenge)
       rv = MSGCramMD5(decodedChallenge, strlen(decodedChallenge),
-                      m_passwordResult.get(), m_passwordResult.Length(), digest);
+                      NS_LossyConvertUTF16toASCII(m_passwordResult).get(),
+                      m_passwordResult.Length(), digest);
     else
       rv = NS_ERROR_NULL_POINTER;
 
@@ -2190,7 +2193,8 @@ PRInt32 nsPop3Protocol::SendPassword()
     unsigned char digest[DIGEST_LENGTH];
 
     rv = MSGApopMD5(m_ApopTimestamp.get(), m_ApopTimestamp.Length(),
-                    m_passwordResult.get(), m_passwordResult.Length(), digest);
+                    NS_LossyConvertUTF16toASCII(m_passwordResult).get(),
+                    m_passwordResult.Length(), digest);
 
     if (NS_SUCCEEDED(rv))
     {
@@ -2236,7 +2240,8 @@ PRInt32 nsPop3Protocol::SendPassword()
     PR_snprintf(&plain_string[1], 510, "%s", m_username.get());
     len += m_username.Length();
     len++; /* second <NUL> char */
-    PR_snprintf(&plain_string[len], 511-len, "%s", m_passwordResult.get());
+    PR_snprintf(&plain_string[len], 511-len, "%s",
+                NS_ConvertUTF16toUTF8(m_passwordResult).get());
     len += m_passwordResult.Length();
 
     char *base64Str = PL_Base64Encode(plain_string, len, nsnull);
@@ -2247,8 +2252,8 @@ PRInt32 nsPop3Protocol::SendPassword()
   {
     PR_LOG(POP3LOGMODULE, PR_LOG_DEBUG, ("LOGIN password"));
     char * base64Str =
-        PL_Base64Encode(m_passwordResult.get(), m_passwordResult.Length(),
-                        nsnull);
+        PL_Base64Encode(NS_LossyConvertUTF16toASCII(m_passwordResult).get(),
+                        m_passwordResult.Length(), nsnull);
     cmd = base64Str;
     PR_Free(base64Str);
   }
@@ -2256,7 +2261,7 @@ PRInt32 nsPop3Protocol::SendPassword()
   {
     PR_LOG(POP3LOGMODULE, PR_LOG_DEBUG, ("PASS password"));
     cmd = "PASS ";
-    cmd += m_passwordResult;
+    cmd += NS_LossyConvertUTF16toASCII(m_passwordResult);
   }
   else
   {
diff --git a/mailnews/local/src/nsPop3Protocol.h b/mailnews/local/src/nsPop3Protocol.h
--- a/mailnews/local/src/nsPop3Protocol.h
+++ b/mailnews/local/src/nsPop3Protocol.h
@@ -291,7 +291,7 @@ private:
   nsCString m_GSSAPICache;
 
   // Used for asynchronous password prompts to store the password temporarily.
-  nsCString m_passwordResult;
+  nsString m_passwordResult;
 
   // progress state information
   void UpdateProgressPercent (PRUint32 totalDone, PRUint32 total);
diff --git a/mailnews/local/test/unit/test_pop3PasswordFailure.js b/mailnews/local/test/unit/test_pop3PasswordFailure.js
--- a/mailnews/local/test/unit/test_pop3PasswordFailure.js
+++ b/mailnews/local/test/unit/test_pop3PasswordFailure.js
@@ -11,7 +11,10 @@
 
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
+load("../../../resources/logHelper.js");
 load("../../../resources/alertTestUtils.js");
+load("../../../resources/mailTestUtils.js");
+load("../../../resources/asyncTestUtils.js");
 
 var test = null;
 var server;
@@ -19,6 +22,7 @@ var daemon;
 var incomingServer;
 var pop3Service;
 var attempt = 0;
+var loginMgr;
 
 const kUserName = "testpop3";
 const kInvalidPassword = "pop3test";
@@ -91,6 +95,7 @@ var urlListener =
 
       // If we've just cancelled, expect binding aborted rather than success.
       do_check_eq(result, attempt == 2 ? Cr.NS_BINDING_ABORTED : 0);
+      async_driver();
     }
     catch (e) {
       // If we have an error, clean up nicely before we throw it.
@@ -105,14 +110,26 @@ var urlListener =
   }
 };
 
+// Definition of tests
+var tests = [
+  getMail1,
+  getMail2,
+  end_test
+]
+
 function actually_run_test() {
   server.start(POP3_PORT);
   daemon.setMessages(["message1.eml"]);
+  async_run_tests(tests);
+}
 
+function getMail1()
+{
   dump("\nGet Mail 1\n");
 
   // Now get mail
   getPopMail();
+  yield false;
 
   dump("\nGot Mail 1\n");
 
@@ -120,7 +137,7 @@ function actually_run_test() {
 
   // Check that we haven't forgetton the login even though we've retried and
   // canceled.
-  let loginMgr = Cc["@mozilla.org/login-manager;1"].getService(Ci.nsILoginManager);
+  loginMgr = Cc["@mozilla.org/login-manager;1"].getService(Ci.nsILoginManager);
 
   let count = {};
   let logins = loginMgr.findLogins(count, "mailbox://localhost", null,
@@ -131,21 +148,31 @@ function actually_run_test() {
   do_check_eq(logins[0].password, kInvalidPassword);
 
   server.resetTest();
+  yield true;
+}
 
+function getMail2()
+{
   dump("\nGet Mail 2\n");
 
   // Now get the mail
   getPopMail();
-
+  yield false;
   dump("\nGot Mail 2\n");
 
   // Now check the new one has been saved.
-  logins = loginMgr.findLogins(count, "mailbox://localhost", null,
+  let count = {};
+  let logins = loginMgr.findLogins(count, "mailbox://localhost", null,
                                "mailbox://localhost");
 
   do_check_eq(count.value, 1);
   do_check_eq(logins[0].username, kUserName);
   do_check_eq(logins[0].password, kValidPassword);
+  yield true;
+}
+
+function end_test()
+{
   do_test_finished();
 }
 
diff --git a/mailnews/mapi/mapihook/src/msgMapiHook.cpp b/mailnews/mapi/mapihook/src/msgMapiHook.cpp
--- a/mailnews/mapi/mapihook/src/msgMapiHook.cpp
+++ b/mailnews/mapi/mapihook/src/msgMapiHook.cpp
@@ -303,9 +303,6 @@ nsresult nsMapiHook::BlindSendMail (unsi
   nsMAPIConfiguration * pMapiConfig = nsMAPIConfiguration::GetMAPIConfiguration() ;
   if (!pMapiConfig) return NS_ERROR_FAILURE ;  // get the singelton obj
   PRUnichar * password = pMapiConfig->GetPassword(aSession) ;
-  // password
-  nsCAutoString smtpPassword;
-  LossyCopyUTF16toASCII(password, smtpPassword);
 
   // Id key
   nsCString MsgIdKey;
@@ -336,7 +333,7 @@ nsresult nsMapiHook::BlindSendMail (unsi
   pMsgComposeParams->SetIdentity(pMsgId);
   pMsgComposeParams->SetComposeFields(aCompFields);
   pMsgComposeParams->SetSendListener(sendListener) ;
-  pMsgComposeParams->SetSmtpPassword(smtpPassword.get());
+  pMsgComposeParams->SetSmtpPassword(nsDependentString(password));
 
   // create the nsIMsgCompose object to send the object
   nsCOMPtr<nsIMsgCompose> pMsgCompose (do_CreateInstance(NS_MSGCOMPOSE_CONTRACTID, &rv));
