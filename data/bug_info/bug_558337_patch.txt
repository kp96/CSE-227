diff --git a/security/manager/ssl/src/nsNSSCertificateDB.cpp b/security/manager/ssl/src/nsNSSCertificateDB.cpp
--- a/security/manager/ssl/src/nsNSSCertificateDB.cpp
+++ b/security/manager/ssl/src/nsNSSCertificateDB.cpp
@@ -1443,43 +1443,86 @@ nsNSSCertificateDB::FindEmailSigningCert
 
   *_retval = static_cast<nsIX509Cert*>(nssCert);
 
 loser:
   if (cert) CERT_DestroyCertificate(cert);
   return rv;
 }
 
+PRBool nsNSSCertificateDB::CertContainsEmailAddress(const char *aEmailAddress, CERTCertificate *aCert)
+{
+  if (!aEmailAddress || !aCert)
+    return PR_FALSE;
+  
+  nsDependentCString testAddr(aEmailAddress);
+
+  for (const char *aAddr = CERT_GetFirstEmailAddress(aCert)
+       ;
+       aAddr
+       ;
+       aAddr = CERT_GetNextEmailAddress(aCert, aAddr)) {
+
+    if (testAddr.EqualsIgnoreCase(aAddr))
+      return PR_TRUE;
+  }
+
+  return PR_FALSE;
+}
+
 NS_IMETHODIMP
 nsNSSCertificateDB::FindCertByEmailAddress(nsISupports *aToken, const char *aEmailAddress, nsIX509Cert **_retval)
 {
   nsNSSShutDownPreventionLock locker;
   CERTCertificate *any_cert = CERT_FindCertByNicknameOrEmailAddr(CERT_GetDefaultCertDB(), (char*)aEmailAddress);
   if (!any_cert)
     return NS_ERROR_FAILURE;
 
   CERTCertificateCleaner certCleaner(any_cert);
     
-  // any_cert now contains a cert with the right subject, but it might not have the correct usage
+  // any_cert now contains a cert with the right subject, but it might have the wrong usage,
+  // let's search for all the other paired/grouped certificates with same subject.
+  // (Unfortunately this may expand the list to certs with a different email address.)
   CERTCertList *certlist = CERT_CreateSubjectCertList(
     nsnull, CERT_GetDefaultCertDB(), &any_cert->derSubject, PR_Now(), PR_TRUE);
   if (!certlist)
     return NS_ERROR_FAILURE;  
 
   CERTCertListCleaner listCleaner(certlist);
 
   if (SECSuccess != CERT_FilterCertListByUsage(certlist, certUsageEmailRecipient, PR_FALSE))
     return NS_ERROR_FAILURE;
   
   if (CERT_LIST_END(CERT_LIST_HEAD(certlist), certlist))
     return NS_ERROR_FAILURE;
-  
-  nsNSSCertificate *nssCert = new nsNSSCertificate(CERT_LIST_HEAD(certlist)->cert);
-  if (!nssCert)
-    return NS_ERROR_OUT_OF_MEMORY;
+
+  nsNSSCertificate *nssCert = nsnull;
+  for (CERTCertListNode *node = CERT_LIST_HEAD(certlist);
+       !CERT_LIST_END(node, certlist);
+       node = CERT_LIST_NEXT(node)) {
+    if (!node->cert ||
+        !CertContainsEmailAddress(aEmailAddress, node->cert))
+      continue;
+    
+    nssCert = new nsNSSCertificate(node->cert);
+    if (!nssCert)
+      return NS_ERROR_OUT_OF_MEMORY;
+    
+    break;
+  }
+
+  if (!nssCert) {
+    // We didn't find a cert with the correct usage, matching the subject of the cert
+    // returned by our initial lookup (CERT_FindCertByNicknameOrEmailAddr).
+    // TODO: If we end up here, we should search for additional candidate certs.
+    // (On the other hand, it might not be necessary, because the result of our lookup 
+    //  has probably been based on the hidden "S/Mime profile",
+    //  that stores the prefered email encryption cert by email address.)
+    return NS_ERROR_FAILURE;
+  }
 
   NS_ADDREF(nssCert);
   *_retval = static_cast<nsIX509Cert*>(nssCert);
   return NS_OK;
 }
 
 /* nsIX509Cert constructX509FromBase64 (in string base64); */
 NS_IMETHODIMP
diff --git a/security/manager/ssl/src/nsNSSCertificateDB.h b/security/manager/ssl/src/nsNSSCertificateDB.h
--- a/security/manager/ssl/src/nsNSSCertificateDB.h
+++ b/security/manager/ssl/src/nsNSSCertificateDB.h
@@ -76,16 +76,17 @@ private:
                     PRUint32      type, 
                     PRUint32     *_count,
                     PRUnichar  ***_certNameList);
 
   CERTDERCerts *getCertsFromPackage(PRArenaPool *arena, PRUint8 *data, 
                                     PRUint32 length);
   nsresult handleCACertDownload(nsIArray *x509Certs, 
                                 nsIInterfaceRequestor *ctx);
+  PRBool CertContainsEmailAddress(const char *aEmailAddress, CERTCertificate *aCert);
 };
 
 #define NS_X509CERTDB_CID { /* fb0bbc5c-452e-4783-b32c-80124693d871 */ \
     0xfb0bbc5c,                                                        \
     0x452e,                                                            \
     0x4783,                                                            \
     {0xb3, 0x2c, 0x80, 0x12, 0x46, 0x93, 0xd8, 0x71}                   \
   }
