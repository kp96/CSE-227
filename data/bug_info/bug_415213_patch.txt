Index: mozilla/security/manager/boot/src/nsSecureBrowserUIImpl.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/boot/src/nsSecureBrowserUIImpl.cpp,v
retrieving revision 1.66
diff -u -u -8 -p -r1.66 nsSecureBrowserUIImpl.cpp
--- mozilla/security/manager/boot/src/nsSecureBrowserUIImpl.cpp	3 Dec 2007 22:09:27 -0000	1.66
+++ mozilla/security/manager/boot/src/nsSecureBrowserUIImpl.cpp	1 Feb 2008 04:51:32 -0000
@@ -991,17 +991,17 @@ void nsSecureBrowserUIImpl::ObtainEventS
     NS_QueryNotificationCallbacks(channel, mToplevelEventSink);
 }
 
 nsresult nsSecureBrowserUIImpl::UpdateSecurityState(nsIRequest* aRequest)
 {
   lockIconState newSecurityState;
 
   PRBool showWarning = PR_FALSE;
-  lockIconState warnSecurityState;
+  lockIconState warnSecurityState = lis_no_security;
 
   if (mNewToplevelSecurityState & STATE_IS_SECURE)
   {
     if (mNewToplevelSecurityState & STATE_SECURE_LOW
         ||
         mNewToplevelSecurityState & STATE_SECURE_MED)
     {
       if (mSubRequestsBrokenSecurity
Index: mozilla/security/manager/ssl/src/nsNSSIOLayer.h
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsNSSIOLayer.h,v
retrieving revision 1.40
diff -u -u -8 -p -r1.40 nsNSSIOLayer.h
--- mozilla/security/manager/ssl/src/nsNSSIOLayer.h	14 Jan 2008 15:45:07 -0000	1.40
+++ mozilla/security/manager/ssl/src/nsNSSIOLayer.h	1 Feb 2008 04:51:32 -0000
@@ -69,16 +69,17 @@ class nsSSLSocketThreadData
 {
 public:
   nsSSLSocketThreadData();
   ~nsSSLSocketThreadData();
 
   PRBool ensure_buffer_size(PRInt32 amount);
   
   enum ssl_state { 
+    ssl_invalid,       // used for initializating, should never occur
     ssl_idle,          // not in use by SSL thread, no activity pending
     ssl_pending_write, // waiting for SSL thread to complete writing
     ssl_pending_read,  // waiting for SSL thread to complete reading
     ssl_writing_done,  // SSL write completed, results are ready
     ssl_reading_done   // SSL read completed, results are ready
   };
   
   ssl_state mSSLState;
Index: mozilla/security/manager/ssl/src/nsRecentBadCerts.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsRecentBadCerts.cpp,v
retrieving revision 1.5
diff -u -u -8 -p -r1.5 nsRecentBadCerts.cpp
--- mozilla/security/manager/ssl/src/nsRecentBadCerts.cpp	22 Jan 2008 23:43:12 -0000	1.5
+++ mozilla/security/manager/ssl/src/nsRecentBadCerts.cpp	1 Feb 2008 04:51:32 -0000
@@ -89,19 +89,19 @@ nsRecentBadCertsService::GetRecentBadCer
   nsRefPtr<nsSSLStatus> status = new nsSSLStatus();
   if (!status)
     return NS_ERROR_OUT_OF_MEMORY;
 
   SECItem foundDER;
   foundDER.len = 0;
   foundDER.data = nsnull;
 
-  PRBool isDomainMismatch;
-  PRBool isNotValidAtThisTime;
-  PRBool isUntrusted;
+  PRBool isDomainMismatch = PR_FALSE;
+  PRBool isNotValidAtThisTime = PR_FALSE;
+  PRBool isUntrusted = PR_FALSE;
 
   {
     nsAutoMonitor lock(monitor);
     for (size_t i=0; i<const_recently_seen_list_size; ++i) {
       if (mCerts[i].mHostWithPort.Equals(aHostNameWithPort)) {
         SECStatus srv = SECITEM_CopyItem(nsnull, &foundDER, &mCerts[i].mDERCert);
         if (srv != SECSuccess)
           return NS_ERROR_OUT_OF_MEMORY;
Index: mozilla/security/manager/ssl/src/nsSSLThread.cpp
===================================================================
RCS file: /cvsroot/mozilla/security/manager/ssl/src/nsSSLThread.cpp,v
retrieving revision 1.12
diff -u -u -8 -p -r1.12 nsSSLThread.cpp
--- mozilla/security/manager/ssl/src/nsSSLThread.cpp	18 Sep 2007 00:31:37 -0000	1.12
+++ mozilla/security/manager/ssl/src/nsSSLThread.cpp	1 Feb 2008 04:51:32 -0000
@@ -484,17 +484,17 @@ PRInt32 nsSSLThread::requestRead(nsNSSSo
   if (!ssl_thread_singleton || !si || !buf || !amount || !ssl_thread_singleton->mThreadHandle)
   {
     PR_SetError(PR_UNKNOWN_ERROR, 0);
     return -1;
   }
 
   PRBool this_socket_is_busy = PR_FALSE;
   PRBool some_other_socket_is_busy = PR_FALSE;
-  nsSSLSocketThreadData::ssl_state my_ssl_state;
+  nsSSLSocketThreadData::ssl_state my_ssl_state = nsSSLSocketThreadData::ssl_invalid;
   PRFileDesc *blockingFD = nsnull;
 
   {
     nsAutoLock threadLock(ssl_thread_singleton->mMutex);
 
     if (ssl_thread_singleton->mExitRequested) {
       PR_SetError(PR_UNKNOWN_ERROR, 0);
       return -1;
@@ -711,17 +711,17 @@ PRInt32 nsSSLThread::requestWrite(nsNSSS
   if (!ssl_thread_singleton || !si || !buf || !amount || !ssl_thread_singleton->mThreadHandle)
   {
     PR_SetError(PR_UNKNOWN_ERROR, 0);
     return -1;
   }
 
   PRBool this_socket_is_busy = PR_FALSE;
   PRBool some_other_socket_is_busy = PR_FALSE;
-  nsSSLSocketThreadData::ssl_state my_ssl_state;
+  nsSSLSocketThreadData::ssl_state my_ssl_state = nsSSLSocketThreadData::ssl_invalid;
   PRFileDesc *blockingFD = nsnull;
   
   {
     nsAutoLock threadLock(ssl_thread_singleton->mMutex);
     
     if (ssl_thread_singleton->mExitRequested) {
       PR_SetError(PR_UNKNOWN_ERROR, 0);
       return -1;
