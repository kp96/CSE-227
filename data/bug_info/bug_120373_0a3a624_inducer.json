{"bug_id":120373,"commitHash":"0a3a624","commit_info":{"sha":"0a3a6241492676d80676502466689d527d7fd1cf","commit":{"author":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2006-11-10T23:49:08Z"},"committer":{"name":"bzbarsky%mit.edu","email":"bzbarsky%mit.edu","date":"2006-11-10T23:49:08Z"},"message":"Make it possible for protocol handlers to configure how CheckLoadURI should\ntreat them via their protocol flags.  Remove the protocol list we used before.\nBug 120373, r=dveditz, sr=darin","tree":{"sha":"ac57278fb1be694124fe1d8331439cf3bf064378","url":"https://api.github.com/repos/mozilla/gecko-dev/git/trees/ac57278fb1be694124fe1d8331439cf3bf064378"},"url":"https://api.github.com/repos/mozilla/gecko-dev/git/commits/0a3a6241492676d80676502466689d527d7fd1cf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/mozilla/gecko-dev/commits/0a3a6241492676d80676502466689d527d7fd1cf","html_url":"https://github.com/mozilla/gecko-dev/commit/0a3a6241492676d80676502466689d527d7fd1cf","comments_url":"https://api.github.com/repos/mozilla/gecko-dev/commits/0a3a6241492676d80676502466689d527d7fd1cf/comments","author":null,"committer":null,"parents":[{"sha":"48b44f6b42a701ffbdefd8ccfe9109cacc1a6fa0","url":"https://api.github.com/repos/mozilla/gecko-dev/commits/48b44f6b42a701ffbdefd8ccfe9109cacc1a6fa0","html_url":"https://github.com/mozilla/gecko-dev/commit/48b44f6b42a701ffbdefd8ccfe9109cacc1a6fa0"}],"stats":{"total":555,"additions":347,"deletions":208},"files":[{"sha":"519893674fd601071d95c8e41d31d696b34dd088","filename":"browser/base/content/browser.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/browser/base/content/browser.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/browser/base/content/browser.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/browser/base/content/browser.js?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -2451,7 +2451,7 @@ var urlbarObserver = {\n           gURLBar.value = url;\n           const nsIScriptSecMan = Components.interfaces.nsIScriptSecurityManager;\n           urlSecurityCheck(gURLBar.value, gBrowser.currentURI.spec,\n-                           nsIScriptSecMan.DISALLOW_SCRIPT_OR_DATA);\n+                           nsIScriptSecMan.DISALLOW_INHERIT_PRINCIPAL);\n           handleURLBarCommand();\n         } catch (ex) {}\n       }\n@@ -2869,7 +2869,7 @@ var goButtonObserver = {\n \n         const nsIScriptSecMan = Components.interfaces.nsIScriptSecurityManager;\n         urlSecurityCheck(url, gBrowser.currentURI.spec,\n-                         nsIScriptSecMan.DISALLOW_SCRIPT_OR_DATA);\n+                         nsIScriptSecMan.DISALLOW_INHERIT_PRINCIPAL);\n         loadURI(url, null, postData.value, true);\n       } catch (ex) {}\n     },"},{"sha":"2ad5526a376b47a4f606e18e2eb2959837ca1261","filename":"browser/components/bookmarks/src/nsBookmarksFeedHandler.cpp","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/browser/components/bookmarks/src/nsBookmarksFeedHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/browser/components/bookmarks/src/nsBookmarksFeedHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/browser/components/bookmarks/src/nsBookmarksFeedHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -911,8 +911,7 @@ nsFeedLoadListener::IsLinkValid(const PRUnichar *aURI)\n         return PR_FALSE;\n \n     rv = mSecMan->CheckLoadURI(mURI, linkuri,\n-                               nsIScriptSecurityManager::DISALLOW_FROM_MAIL |\n-                               nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA);\n+                               nsIScriptSecurityManager::DISALLOW_INHERIT_PRINCIPAL);\n     if (NS_FAILED(rv))\n         return PR_FALSE;\n "},{"sha":"c23349950ecc65eebf006b39d8d753152c791f87","filename":"browser/components/feeds/src/FeedWriter.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/browser/components/feeds/src/FeedWriter.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/browser/components/feeds/src/FeedWriter.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/browser/components/feeds/src/FeedWriter.js?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -135,7 +135,7 @@ FeedWriter.prototype = {\n     var secman = \n         Cc[\"@mozilla.org/scriptsecuritymanager;1\"].\n         getService(Ci.nsIScriptSecurityManager);    \n-    const flags = Ci.nsIScriptSecurityManager.DISALLOW_SCRIPT_OR_DATA;\n+    const flags = Ci.nsIScriptSecurityManager.DISALLOW_INHERIT_PRINCIPAL;\n     try {\n       secman.checkLoadURIStr(this._window.location.href, uri, flags);\n       // checkLoadURIStr will throw if the link URI should not be loaded per "},{"sha":"eec5e378aa489d63d484c9bd89babce714b269d6","filename":"calendar/lightning/components/calItipProtocolHandler.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/calendar/lightning/components/calItipProtocolHandler.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/calendar/lightning/components/calItipProtocolHandler.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/calendar/lightning/components/calItipProtocolHandler.js?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -127,7 +127,7 @@ ItipProtocolHandler.prototype = {\n         return this;\n     },\n     \n-    protocolFlags: CI.nsIProtocolHandler.URI_NORELATIVE,\n+    protocolFlags: CI.nsIProtocolHandler.URI_NORELATIVE | CI.nsIProtocolHandler.URI_DANGEROUS_TO_LOAD,\n     allowPort: function () { return false; },\n     isSecure: false,\n     newURI: function (spec, charSet, baseURI)"},{"sha":"51126dc7702b3fc662a41e71992ef4ab2ac1250c","filename":"caps/idl/nsIScriptSecurityManager.idl","status":"modified","additions":23,"deletions":6,"changes":29,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/caps/idl/nsIScriptSecurityManager.idl","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/caps/idl/nsIScriptSecurityManager.idl","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/caps/idl/nsIScriptSecurityManager.idl?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -41,7 +41,7 @@\n interface nsIURI;\n \n \n-[scriptable, uuid(5a46e611-cf4a-4407-a5b4-002fcf051120)]\n+[scriptable, uuid(5ed0b9b8-e7f4-4b55-9805-7ab857b335a1)]\n interface nsIScriptSecurityManager : nsIXPCSecurityManager\n {\n     ///////////////// Security Checks //////////////////\n@@ -79,18 +79,35 @@ interface nsIScriptSecurityManager : nsIXPCSecurityManager\n     // Default permissions\n     const unsigned long STANDARD = 0;\n \n-    // If the source is mail, disallow the load\n-    const unsigned long DISALLOW_FROM_MAIL = 1 << 0;\n+    // Indicate that the load is a load of a new document that is not\n+    // user-triggered.  Here \"user-triggered\" could be broadly interpreted --\n+    // for example, scripted sets of window.location.href might be treated as\n+    // \"user-triggered\" in some circumstances.  A typical example of a load\n+    // that is not user-triggered is a <meta> refresh load.  If this flag is\n+    // set, the load will be denied if the originating principal's URI has the\n+    // nsIProtocolHandler::URI_FORBIDS_AUTOMATIC_DOCUMENT_REPLACEMENT flag set.\n+    const unsigned long LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT = 1 << 0;\n \n-    // Allow the loading of chrome URLs by non-chrome URLs\n+    // Allow the loading of chrome URLs by non-chrome URLs.  Use with great\n+    // care!  This will actually allow the loading of any URI which has the\n+    // nsIProtocolHandler::URI_IS_UI_RESOURCE protocol handler flag set.  Ths\n+    // probably means at least chrome: and resource:.\n     const unsigned long ALLOW_CHROME = 1 << 1;\n \n-    // Don't allow javascript: and data: URLs to load\n-    const unsigned long DISALLOW_SCRIPT_OR_DATA = 1 << 2;\n+    // Don't allow URLs which would inherit the caller's principal (such as\n+    // javascript: or data:) to load.  See\n+    // nsIProtocolHandler::URI_INHERITS_SECURITY_CONTEXT.\n+    const unsigned long DISALLOW_INHERIT_PRINCIPAL = 1 << 2;\n+\n+    // Alias for DISALLOW_INHERIT_PRINCIPAL for backwards compat with\n+    // JS-implemented extensions.\n+    const unsigned long DISALLOW_SCRIPT_OR_DATA = DISALLOW_INHERIT_PRINCIPAL;\n \n     // Don't allow javascript: URLs to load\n     //   WARNING: Support for this value was added in Mozilla 1.7.8 and\n     //   Firefox 1.0.4.  Use in prior versions WILL BE IGNORED.\n+    // When using this, make sure that you actually want DISALLOW_SCRIPT, not\n+    // DISALLOW_INHERIT_PRINCIPAL\n     const unsigned long DISALLOW_SCRIPT = 1 << 3;\n \n     /**"},{"sha":"ea89e196106196f5dff37e32bbbc84e3e3b20880","filename":"caps/include/nsScriptSecurityManager.h","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/caps/include/nsScriptSecurityManager.h","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/caps/include/nsScriptSecurityManager.h","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/caps/include/nsScriptSecurityManager.h?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -424,9 +424,6 @@ class nsScriptSecurityManager : public nsIScriptSecurityManager,\n     nsIPrincipal*\n     doGetSubjectPrincipal(nsresult* rv);\n     \n-    static nsresult\n-    GetBaseURIScheme(nsIURI* aURI, nsCString& aScheme);\n-\n     static nsresult \n     ReportError(JSContext* cx, const nsAString& messageTag,\n                 nsIURI* aSource, nsIURI* aTarget);"},{"sha":"e714be1a8a4f584763046881bf68fd175abcdd4e","filename":"caps/src/nsScriptSecurityManager.cpp","status":"modified","additions":162,"deletions":140,"changes":302,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/caps/src/nsScriptSecurityManager.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/caps/src/nsScriptSecurityManager.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/caps/src/nsScriptSecurityManager.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -1164,26 +1164,6 @@ nsScriptSecurityManager::CheckLoadURIFromScript(JSContext *cx, nsIURI *aURI)\n     return NS_ERROR_DOM_BAD_URI;\n }\n \n-// static\n-nsresult\n-nsScriptSecurityManager::GetBaseURIScheme(nsIURI* aURI,\n-                                          nsCString& aScheme)\n-{\n-    if (!aURI)\n-       return NS_ERROR_FAILURE;\n-\n-    nsresult rv;\n-\n-    // Get the innermost URI\n-    nsCOMPtr<nsIURI> uri = NS_GetInnermostURI(aURI);\n-\n-    //-- get the source scheme\n-    rv = uri->GetScheme(aScheme);\n-    if (NS_FAILED(rv)) return rv;\n-\n-    return NS_OK;\n-}\n-\n NS_IMETHODIMP\n nsScriptSecurityManager::CheckLoadURI(nsIURI *aSourceURI, nsIURI *aTargetURI,\n                                       PRUint32 aFlags)\n@@ -1203,6 +1183,29 @@ nsScriptSecurityManager::CheckLoadURI(nsIURI *aSourceURI, nsIURI *aTargetURI,\n     return CheckLoadURIWithPrincipal(sourcePrincipal, aTargetURI, aFlags);\n }\n \n+/**\n+ * Helper method to handle cases where a flag passed to\n+ * CheckLoadURIWithPrincipal means denying loading if the given URI has certain\n+ * nsIProtocolHandler flags set.\n+ * @return if success, access is allowed. Otherwise, deny access\n+ */\n+static nsresult\n+DenyAccessIfURIHasFlags(nsIURI* aURI, PRUint32 aURIFlags)\n+{\n+    NS_PRECONDITION(aURI, \"Must have URI!\");\n+    \n+    PRBool uriHasFlags;\n+    nsresult rv =\n+        NS_URIChainHasFlags(aURI, aURIFlags, &uriHasFlags);\n+    NS_ENSURE_SUCCESS(rv, rv);\n+\n+    if (uriHasFlags) {\n+        return NS_ERROR_DOM_BAD_URI;\n+    }\n+\n+    return NS_OK;\n+}\n+\n NS_IMETHODIMP\n nsScriptSecurityManager::CheckLoadURIWithPrincipal(nsIPrincipal* aPrincipal,\n                                                    nsIURI *aTargetURI,\n@@ -1212,10 +1215,10 @@ nsScriptSecurityManager::CheckLoadURIWithPrincipal(nsIPrincipal* aPrincipal,\n     // If someone passes a flag that we don't understand, we should\n     // fail, because they may need a security check that we don't\n     // provide.\n-    NS_ENSURE_FALSE(aFlags & ~(nsIScriptSecurityManager::DISALLOW_FROM_MAIL |\n+    NS_ENSURE_FALSE(aFlags & ~(nsIScriptSecurityManager::LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT |\n                                nsIScriptSecurityManager::ALLOW_CHROME |\n                                nsIScriptSecurityManager::DISALLOW_SCRIPT |\n-                               nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA),\n+                               nsIScriptSecurityManager::DISALLOW_INHERIT_PRINCIPAL),\n                     NS_ERROR_UNEXPECTED);\n     NS_ENSURE_ARG_POINTER(aPrincipal);\n \n@@ -1229,35 +1232,45 @@ nsScriptSecurityManager::CheckLoadURIWithPrincipal(nsIPrincipal* aPrincipal,\n \n     NS_ASSERTION(sourceURI, \"Non-system principals passed to CheckLoadURIWithPrincipal must have a URI!\");\n     \n-    //-- get the source scheme\n-    nsCAutoString sourceScheme;\n-    nsresult rv = GetBaseURIScheme(sourceURI, sourceScheme);\n-    if (NS_FAILED(rv)) return rv;\n+    // Automatic loads are not allowed from certain protocols.\n+    if (aFlags & nsIScriptSecurityManager::LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT) {\n+        nsresult rv =\n+            DenyAccessIfURIHasFlags(sourceURI,\n+                                    nsIProtocolHandler::URI_FORBIDS_AUTOMATIC_DOCUMENT_REPLACEMENT);\n+        NS_ENSURE_SUCCESS(rv, rv);\n+    }\n \n-    // Some loads are not allowed from mail/news messages\n-    if ((aFlags & nsIScriptSecurityManager::DISALLOW_FROM_MAIL) &&\n-        (sourceScheme.LowerCaseEqualsLiteral(\"mailbox\") ||\n-         sourceScheme.LowerCaseEqualsLiteral(\"imap\")    ||\n-         sourceScheme.LowerCaseEqualsLiteral(\"news\")))\n-    {\n-        return NS_ERROR_DOM_BAD_URI;\n+    // If DISALLOW_INHERIT_PRINCIPAL is set, we prevent loading of URIs which\n+    // would do such inheriting.  That would be URIs that do not have their own\n+    // security context.\n+    if (aFlags & nsIScriptSecurityManager::DISALLOW_INHERIT_PRINCIPAL) {\n+        nsresult rv =\n+            DenyAccessIfURIHasFlags(aTargetURI,\n+                                    nsIProtocolHandler::URI_INHERITS_SECURITY_CONTEXT);\n+        NS_ENSURE_SUCCESS(rv, rv);\n     }\n \n+    // If either URI is a nested URI, get the base URI\n+    nsCOMPtr<nsIURI> sourceBaseURI = NS_GetInnermostURI(sourceURI);\n+    nsCOMPtr<nsIURI> targetBaseURI = NS_GetInnermostURI(aTargetURI);\n+\n     //-- get the target scheme\n     nsCAutoString targetScheme;\n-    rv = GetBaseURIScheme(aTargetURI, targetScheme);\n+    nsresult rv = targetBaseURI->GetScheme(targetScheme);\n     if (NS_FAILED(rv)) return rv;\n \n-    //-- Some callers do not allow loading javascript: or data: URLs\n-    if (((aFlags & (nsIScriptSecurityManager::DISALLOW_SCRIPT |\n-                    nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA)) &&\n-         targetScheme.Equals(\"javascript\")) ||\n-        ((aFlags & nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA) &&\n-         targetScheme.Equals(\"data\")))\n+    //-- Some callers do not allow loading javascript:\n+    if ((aFlags & nsIScriptSecurityManager::DISALLOW_SCRIPT) &&\n+         targetScheme.EqualsLiteral(\"javascript\"))\n     {\n        return NS_ERROR_DOM_BAD_URI;\n     }\n \n+    //-- get the source scheme\n+    nsCAutoString sourceScheme;\n+    rv = sourceURI->GetScheme(sourceScheme);\n+    if (NS_FAILED(rv)) return rv;\n+\n     if (targetScheme.Equals(sourceScheme,\n                             nsCaseInsensitiveCStringComparator()) &&\n         !sourceScheme.LowerCaseEqualsLiteral(NS_NULLPRINCIPAL_SCHEME))\n@@ -1267,107 +1280,115 @@ nsScriptSecurityManager::CheckLoadURIWithPrincipal(nsIPrincipal* aPrincipal,\n         return NS_OK;\n     }\n \n-    //-- If the schemes don't match, the policy is specified in this table.\n-    enum Action { AllowProtocol, DenyProtocol, PrefControlled, ChromeProtocol};\n-    static const struct\n-    {\n-        const char *name;\n-        Action action;\n-    } protocolList[] =\n-    {\n-        //-- Keep the most commonly used protocols at the top of the list\n-        //   to increase performance\n-        { \"http\",            AllowProtocol  },\n-        { \"chrome\",          ChromeProtocol },\n-        { \"file\",            PrefControlled },\n-        { \"https\",           AllowProtocol  },\n-        { \"moz-anno\",        DenyProtocol   },\n-        { \"mailbox\",         DenyProtocol   },\n-        { \"pop\",             AllowProtocol  },\n-        { \"imap\",            DenyProtocol   },\n-        { \"pop3\",            DenyProtocol   },\n-        { \"news\",            AllowProtocol  },\n-        { \"javascript\",      AllowProtocol  },\n-        { \"ftp\",             AllowProtocol  },\n-        { \"moz-safe-about\",  AllowProtocol  },\n-        { \"about\",           DenyProtocol   },\n-        { \"mailto\",          AllowProtocol  },\n-        { \"aim\",             AllowProtocol  },\n-        { \"data\",            AllowProtocol  },\n-        { \"keyword\",         DenyProtocol   },\n-        { \"resource\",        ChromeProtocol },\n-        { \"gopher\",          AllowProtocol  },\n-        { \"datetime\",        DenyProtocol   },\n-        { \"finger\",          AllowProtocol  },\n-        { \"res\",             DenyProtocol   },\n-        { \"x-jsd\",           ChromeProtocol },\n-\n-        // Don't allow random people to load null-principal URIs.  Not like it\n-        // matters _that_ much, since we won't have a useful handler for them,\n-        // but...\n-        { NS_NULLPRINCIPAL_SCHEME, DenyProtocol }\n-    };\n-\n     NS_NAMED_LITERAL_STRING(errorTag, \"CheckLoadURIError\");\n-    for (unsigned i=0; i < sizeof(protocolList)/sizeof(protocolList[0]); i++)\n-    {\n-        if (targetScheme.LowerCaseEqualsASCII(protocolList[i].name))\n-        {\n-            switch (protocolList[i].action)\n-            {\n-            case AllowProtocol:\n-                // everyone can access these schemes.\n-                return NS_OK;\n-            case PrefControlled:\n-                {\n-                    // resource: and chrome: are equivalent, securitywise\n-                    // That's bogus!!  Fix this.  But watch out for\n-                    // the view-source stylesheet?\n-                    if (sourceScheme.EqualsLiteral(\"chrome\") ||\n-                        sourceScheme.EqualsLiteral(\"resource\"))\n-                        return NS_OK;\n-\n-                    // Now check capability policies\n-                    static const char loadURIPrefGroup[] = \"checkloaduri\";\n-                    ClassInfoData nameData(nsnull, loadURIPrefGroup);\n+    \n+    // If the schemes don't match, the policy is specified by the protocol\n+    // flags on the target URI.  Note that the order of policy checks here is\n+    // very important!  We start from most restrictive and work our way down.\n+    // Note that since we're working with the innermost URI, we can just use\n+    // the methods that work on chains of nested URIs and they will only look\n+    // at the flags for our one URI.\n+\n+    // Check for system target URI\n+    rv = DenyAccessIfURIHasFlags(targetBaseURI,\n+                                 nsIProtocolHandler::URI_DANGEROUS_TO_LOAD);\n+    if (NS_FAILED(rv)) {\n+        // Deny access, since the origin principal is not system\n+        ReportError(nsnull, errorTag, sourceURI, aTargetURI);\n+        return rv;\n+    }\n \n-                    SecurityLevel secLevel;\n-                    rv = LookupPolicy(aPrincipal, nameData, sEnabledID,\n-                                      nsIXPCSecurityManager::ACCESS_GET_PROPERTY, \n-                                      nsnull, &secLevel);\n-                    if (NS_SUCCEEDED(rv) && secLevel.level == SCRIPT_SECURITY_ALL_ACCESS)\n-                    {\n-                        // OK for this site!\n-                        return NS_OK;\n-                    }\n+    // Check for chrome target URI\n+    PRBool hasFlags;\n+    rv = NS_URIChainHasFlags(targetBaseURI,\n+                             nsIProtocolHandler::URI_IS_UI_RESOURCE,\n+                             &hasFlags);\n+    NS_ENSURE_SUCCESS(rv, rv);\n+    if (hasFlags) {\n+        if (aFlags & nsIScriptSecurityManager::ALLOW_CHROME) {\n+            return NS_OK;\n+        }\n \n-                    ReportError(nsnull, errorTag, sourceURI, aTargetURI);\n-                    return NS_ERROR_DOM_BAD_URI;\n-                }\n-            case ChromeProtocol:\n-                if (aFlags & nsIScriptSecurityManager::ALLOW_CHROME)\n-                    return NS_OK;\n-                // resource: and chrome: are equivalent, securitywise\n-                // That's bogus!!  Fix this.  But watch out for\n-                // the view-source stylesheet?\n-                if (sourceScheme.EqualsLiteral(\"chrome\") ||\n-                    sourceScheme.EqualsLiteral(\"resource\"))\n-                    return NS_OK;\n-                ReportError(nsnull, errorTag, sourceURI, aTargetURI);\n-                return NS_ERROR_DOM_BAD_URI;\n-            case DenyProtocol:\n-                // Deny access\n-                ReportError(nsnull, errorTag, sourceURI, aTargetURI);\n-                return NS_ERROR_DOM_BAD_URI;\n-            }\n+        // resource: and chrome: are equivalent, securitywise\n+        // That's bogus!!  Fix this.  But watch out for\n+        // the view-source stylesheet?\n+        PRBool sourceIsChrome;\n+        rv = NS_URIChainHasFlags(sourceBaseURI,\n+                                 nsIProtocolHandler::URI_IS_UI_RESOURCE,\n+                                 &sourceIsChrome);\n+        NS_ENSURE_SUCCESS(rv, rv);\n+        if (sourceIsChrome) {\n+            return NS_OK;\n         }\n+        ReportError(nsnull, errorTag, sourceURI, aTargetURI);\n+        return NS_ERROR_DOM_BAD_URI;\n     }\n \n-    // If we reach here, we have an unknown protocol. Warn, but allow.\n-    // This is risky from a security standpoint, but allows flexibility\n-    // in installing new protocol handlers after initial ship.\n-    NS_WARNING(\"unknown protocol in nsScriptSecurityManager::CheckLoadURI\");\n+    // Check for target URI pointing to a file\n+    rv = NS_URIChainHasFlags(targetBaseURI,\n+                             nsIProtocolHandler::URI_IS_LOCAL_FILE,\n+                             &hasFlags);\n+    NS_ENSURE_SUCCESS(rv, rv);\n+    if (hasFlags) {\n+        // resource: and chrome: are equivalent, securitywise\n+        // That's bogus!!  Fix this.  But watch out for\n+        // the view-source stylesheet?\n+        PRBool sourceIsChrome;\n+        rv = NS_URIChainHasFlags(sourceURI,\n+                                 nsIProtocolHandler::URI_IS_UI_RESOURCE,\n+                                 &sourceIsChrome);\n+        NS_ENSURE_SUCCESS(rv, rv);\n+        if (sourceIsChrome) {\n+            return NS_OK;\n+        }\n+\n+        // Now check capability policies\n+        static const char loadURIPrefGroup[] = \"checkloaduri\";\n+        ClassInfoData nameData(nsnull, loadURIPrefGroup);\n+\n+        SecurityLevel secLevel;\n+        rv = LookupPolicy(aPrincipal, nameData, sEnabledID,\n+                          nsIXPCSecurityManager::ACCESS_GET_PROPERTY, \n+                          nsnull, &secLevel);\n+        if (NS_SUCCEEDED(rv) && secLevel.level == SCRIPT_SECURITY_ALL_ACCESS)\n+        {\n+            // OK for this site!\n+            return NS_OK;\n+        }\n \n+        ReportError(nsnull, errorTag, sourceURI, aTargetURI);\n+        return NS_ERROR_DOM_BAD_URI;\n+    }\n+\n+    // OK, everyone is allowed to load this, since unflagged handlers are\n+    // deprecated but treated as URI_LOADABLE_BY_ANYONE.  But check whether we\n+    // need to warn.  At some point we'll want to make this warning into an\n+    // error and treat unflagged handlers as URI_DANGEROUS_TO_LOAD.\n+    rv = NS_URIChainHasFlags(targetBaseURI,\n+                             nsIProtocolHandler::URI_LOADABLE_BY_ANYONE,\n+                             &hasFlags);\n+    NS_ENSURE_SUCCESS(rv, rv);\n+    if (!hasFlags) {\n+        nsXPIDLString message;\n+        NS_ConvertASCIItoUTF16 ucsTargetScheme(targetScheme);\n+        const PRUnichar* formatStrings[] = { ucsTargetScheme.get() };\n+        rv = sStrBundle->\n+            FormatStringFromName(NS_LITERAL_STRING(\"ProtocolFlagError\").get(),\n+                                 formatStrings,\n+                                 NS_ARRAY_LENGTH(formatStrings),\n+                                 getter_Copies(message));\n+        if (NS_SUCCEEDED(rv)) {\n+            nsCOMPtr<nsIConsoleService> console(\n+              do_GetService(\"@mozilla.org/consoleservice;1\"));\n+            NS_ENSURE_TRUE(console, NS_ERROR_FAILURE);\n+\n+            console->LogStringMessage(message.get());\n+#ifdef DEBUG\n+            fprintf(stderr, \"%s\\n\", NS_ConvertUTF16toUTF8(message).get());\n+#endif\n+        }\n+    }\n+    \n     return NS_OK;\n }\n \n@@ -1873,12 +1894,12 @@ NS_IMETHODIMP\n nsScriptSecurityManager::GetCodebasePrincipal(nsIURI *aURI,\n                                               nsIPrincipal **result)\n {\n-    PRBool noContext;\n+    PRBool inheritsPrincipal;\n     nsresult rv =\n         NS_URIChainHasFlags(aURI,\n-                            nsIProtocolHandler::URI_HAS_NO_SECURITY_CONTEXT,\n-                            &noContext);\n-    if (NS_FAILED(rv) || noContext) {\n+                            nsIProtocolHandler::URI_INHERITS_SECURITY_CONTEXT,\n+                            &inheritsPrincipal);\n+    if (NS_FAILED(rv) || inheritsPrincipal) {\n         return CallCreateInstance(NS_NULLPRINCIPAL_CONTRACTID, result);\n     }\n     \n@@ -2951,8 +2972,9 @@ nsScriptSecurityManager::OnChannelRedirect(nsIChannel* oldChannel,\n \n     NS_ENSURE_STATE(oldURI && newURI);\n \n-    const PRUint32 flags = nsIScriptSecurityManager::DISALLOW_FROM_MAIL |\n-                           nsIScriptSecurityManager::DISALLOW_SCRIPT;\n+    const PRUint32 flags =\n+        nsIScriptSecurityManager::LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT |\n+        nsIScriptSecurityManager::DISALLOW_SCRIPT;\n     return CheckLoadURI(oldURI, newURI, flags);\n }\n "},{"sha":"d3691bd5e2b0da852cbff94ffcefcb1928d8e17d","filename":"chrome/src/nsChromeProtocolHandler.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/chrome/src/nsChromeProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/chrome/src/nsChromeProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/chrome/src/nsChromeProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -406,7 +406,7 @@ nsChromeProtocolHandler::AllowPort(PRInt32 port, const char *scheme, PRBool *_re\n NS_IMETHODIMP\n nsChromeProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_STD;\n+    *result = URI_STD | URI_IS_UI_RESOURCE;\n     return NS_OK;\n }\n "},{"sha":"062a9a1eb5158f09e1d1c81ce68cbe1e5800405d","filename":"content/base/src/nsGenericElement.cpp","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/content/base/src/nsGenericElement.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/content/base/src/nsGenericElement.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/content/base/src/nsGenericElement.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -3009,9 +3009,10 @@ nsGenericElement::TriggerLink(nsPresContext* aPresContext,\n     nsCOMPtr<nsIScriptSecurityManager> securityManager = \n              do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);\n     if (NS_SUCCEEDED(rv)) {\n-      PRUint32 flag = aIsUserTriggered ?\n-                      (PRUint32) nsIScriptSecurityManager::STANDARD :\n-                      (PRUint32) nsIScriptSecurityManager::DISALLOW_FROM_MAIL;\n+      PRUint32 flag =\n+        aIsUserTriggered ?\n+        (PRUint32) nsIScriptSecurityManager::STANDARD :\n+        (PRUint32) nsIScriptSecurityManager::LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT;\n       proceed =\n         securityManager->CheckLoadURIWithPrincipal(NodePrincipal(), aLinkURI,\n                                                    flag);"},{"sha":"0d9e7516292d02770d842f52929051353d61a756","filename":"content/html/document/src/nsHTMLFragmentContentSink.cpp","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/content/html/document/src/nsHTMLFragmentContentSink.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/content/html/document/src/nsHTMLFragmentContentSink.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/content/html/document/src/nsHTMLFragmentContentSink.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -1041,9 +1041,10 @@ nsHTMLParanoidFragmentSink::AddAttributes(const nsIParserNode& aNode,\n       nsCOMPtr<nsIURI> attrURI;\n       rv = NS_NewURI(getter_AddRefs(attrURI), v, nsnull, baseURI);\n       if (NS_SUCCEEDED(rv)) {\n-        rv = secMan->CheckLoadURIWithPrincipal(mTargetDocument->NodePrincipal(),\n-                                               attrURI,\n-                                               nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA);\n+        rv = secMan->\n+          CheckLoadURIWithPrincipal(mTargetDocument->NodePrincipal(),\n+                attrURI,\n+                nsIScriptSecurityManager::DISALLOW_INHERIT_PRINCIPAL);\n       }\n     }\n     "},{"sha":"20c79774045182b45a09aeeb6feb4ceadeec7fb0","filename":"content/html/document/src/nsWyciwygProtocolHandler.cpp","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/content/html/document/src/nsWyciwygProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/content/html/document/src/nsWyciwygProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/content/html/document/src/nsWyciwygProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -127,6 +127,8 @@ nsWyciwygProtocolHandler::NewChannel(nsIURI* url, nsIChannel* *result)\n NS_IMETHODIMP\n nsWyciwygProtocolHandler::GetProtocolFlags(PRUint32 *result) \n {\n-  *result = URI_NORELATIVE | URI_NOAUTH;\n+  // Should this be an an nsINestedURI?  We don't really want random\n+  // webpages loading these URIs...\n+  *result = URI_NORELATIVE | URI_NOAUTH | URI_DANGEROUS_TO_LOAD;\n   return NS_OK;\n }"},{"sha":"20eca606983c162bd498b30b61b1139a61d20f50","filename":"content/xml/document/src/nsXMLFragmentContentSink.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/content/xml/document/src/nsXMLFragmentContentSink.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/content/xml/document/src/nsXMLFragmentContentSink.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/content/xml/document/src/nsXMLFragmentContentSink.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -574,7 +574,7 @@ nsXHTMLParanoidFragmentSink::AddAttributes(const PRUnichar** aAtts,\n   // use this to check for safe URIs in the few attributes that allow them\n   nsIScriptSecurityManager* secMan = nsContentUtils::GetSecurityManager();\n   nsCOMPtr<nsIURI> baseURI;\n-  PRUint32 flags = nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA;\n+  PRUint32 flags = nsIScriptSecurityManager::DISALLOW_INHERIT_PRINCIPAL;\n \n   // scrub URI attributes that point at dangerous content\n   // We have to do this here, because this is where we have a base URI,"},{"sha":"4b7c3e59c374a85e0cb0d3410f0c108c0d228344","filename":"directory/xpcom/base/src/nsLDAPProtocolHandler.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/directory/xpcom/base/src/nsLDAPProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/directory/xpcom/base/src/nsLDAPProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/directory/xpcom/base/src/nsLDAPProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -83,7 +83,7 @@ nsLDAPProtocolHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsLDAPProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-  *result = URI_NORELATIVE;\n+  *result = URI_NORELATIVE | URI_DANGEROUS_TO_LOAD;\n   return NS_OK;\n }\n "},{"sha":"12fbcb696c105a4a379949662fe25fb4688970c6","filename":"docshell/base/nsDocShell.cpp","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/docshell/base/nsDocShell.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/docshell/base/nsDocShell.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/docshell/base/nsDocShell.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -4359,9 +4359,10 @@ nsDocShell::SetupRefreshURIFromHeader(nsIURI * aBaseURI,\n             securityManager(do_GetService\n                             (NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv));\n         if (NS_SUCCEEDED(rv)) {\n-            rv = securityManager->CheckLoadURI(aBaseURI, uri,\n-                                               nsIScriptSecurityManager::\n-                                               DISALLOW_FROM_MAIL);\n+            rv = securityManager->\n+                CheckLoadURI(aBaseURI, uri,\n+                             nsIScriptSecurityManager::\n+                             LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT);\n             if (NS_SUCCEEDED(rv)) {\n                 // Since we can't travel back in time yet, just pretend\n                 // negative numbers do nothing at all.\n@@ -8824,7 +8825,7 @@ nsDocShell::URIInheritsSecurityContext(nsIURI* aURI, PRBool* aResult)\n     // Note: about:blank URIs do NOT inherit the security context from the\n     // current document, which is what this function tests for...\n     return NS_URIChainHasFlags(aURI,\n-                               nsIProtocolHandler::URI_HAS_NO_SECURITY_CONTEXT,\n+                               nsIProtocolHandler::URI_INHERITS_SECURITY_CONTEXT,\n                                aResult);\n }\n "},{"sha":"884bfce5c28c902004b73ca476d68526668b66c5","filename":"dom/locales/en-US/chrome/security/caps.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/dom/locales/en-US/chrome/security/caps.properties","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/dom/locales/en-US/chrome/security/caps.properties","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/dom/locales/en-US/chrome/security/caps.properties?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -48,6 +48,7 @@ SetPropertyDenied = Permission denied to set property %S.%S\n CallMethodDenied = Permission denied to call method %S.%S\n CreateWrapperDenied = Permission denied to create wrapper for object of class %S\n ExtensionCapability = Unknown: %S\n+ProtocolFlagError = Warning: Protocol handler for '%S' doesn't advertise a security policy.  While loads of such protocols are allowed for now, this is deprecated.  Please see the documentation in nsIProtocolHandler.idl.\n #\n # The following descriptions are shown in the EnableCapabilityQuery dialog\n #"},{"sha":"19e5062ff4564475181aa0ddbd7cb78886fb9f3e","filename":"dom/src/jsurl/nsJSProtocolHandler.cpp","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/dom/src/jsurl/nsJSProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/dom/src/jsurl/nsJSProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/dom/src/jsurl/nsJSProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -962,7 +962,8 @@ nsJSProtocolHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsJSProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_NORELATIVE | URI_NOAUTH | URI_HAS_NO_SECURITY_CONTEXT;\n+    *result = URI_NORELATIVE | URI_NOAUTH | URI_INHERITS_SECURITY_CONTEXT |\n+        URI_LOADABLE_BY_ANYONE;\n     return NS_OK;\n }\n "},{"sha":"f5a19471ee8ec39b8e91b868c7ed6b075516bcc2","filename":"embedding/minimo/chromelite/nsSimpleChromeHandler.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/embedding/minimo/chromelite/nsSimpleChromeHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/embedding/minimo/chromelite/nsSimpleChromeHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/embedding/minimo/chromelite/nsSimpleChromeHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -167,7 +167,7 @@ nsSimpleChromeHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsSimpleChromeHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_STD;\n+    *result = URI_STD | URI_IS_UI_RESOURCE;\n     return NS_OK;\n }\n "},{"sha":"af4cbe769571c77d93ee3d07630bf2424b926ff4","filename":"embedding/tests/wxEmbed/GeckoProtocolHandler.cpp","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/embedding/tests/wxEmbed/GeckoProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/embedding/tests/wxEmbed/GeckoProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/embedding/tests/wxEmbed/GeckoProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -218,6 +218,9 @@ NS_IMETHODIMP GeckoProtocolHandlerImpl::GetDefaultPort(PRInt32 *aDefaultPort)\n /* readonly attribute unsigned long protocolFlags; */\n NS_IMETHODIMP GeckoProtocolHandlerImpl::GetProtocolFlags(PRUint32 *aProtocolFlags)\n {\n+    // XXXbz Not setting any of the protocol security flags for now, because I\n+    // have no idea what this is used for.  Whoever uses it should set the\n+    // flags.\n     *aProtocolFlags = URI_NORELATIVE | URI_NOAUTH;\n     return NS_OK;\n }"},{"sha":"45769f8a32458f2cce48b505db90c9254038b814","filename":"extensions/datetime/nsDateTimeHandler.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/extensions/datetime/nsDateTimeHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/extensions/datetime/nsDateTimeHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/extensions/datetime/nsDateTimeHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -88,7 +88,7 @@ nsDateTimeHandler::GetDefaultPort(PRInt32 *result) {\n \n NS_IMETHODIMP\n nsDateTimeHandler::GetProtocolFlags(PRUint32 *result) {\n-    *result = URI_NORELATIVE | URI_NOAUTH | ALLOWS_PROXY;\n+    *result = URI_NORELATIVE | URI_NOAUTH | ALLOWS_PROXY | URI_DANGEROUS_TO_LOAD;\n     return NS_OK;\n }\n "},{"sha":"7bb3fe228d3210ee57f85fa58597396475c1e20e","filename":"extensions/finger/nsFingerHandler.cpp","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/extensions/finger/nsFingerHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/extensions/finger/nsFingerHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/extensions/finger/nsFingerHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -90,7 +90,8 @@ nsFingerHandler::GetDefaultPort(PRInt32 *result) {\n \n NS_IMETHODIMP\n nsFingerHandler::GetProtocolFlags(PRUint32 *result) {\n-    *result = URI_NORELATIVE | URI_NOAUTH | ALLOWS_PROXY;\n+    *result = URI_NORELATIVE | URI_NOAUTH | ALLOWS_PROXY |\n+        URI_LOADABLE_BY_ANYONE;\n     return NS_OK;\n }\n "},{"sha":"ac8e103367ed0e123ad9fdb824542d4f91352330","filename":"extensions/gnomevfs/nsGnomeVFSProtocolHandler.cpp","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/extensions/gnomevfs/nsGnomeVFSProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/extensions/gnomevfs/nsGnomeVFSProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/extensions/gnomevfs/nsGnomeVFSProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -860,8 +860,8 @@ nsGnomeVFSProtocolHandler::GetDefaultPort(PRInt32 *aDefaultPort)\n NS_IMETHODIMP\n nsGnomeVFSProtocolHandler::GetProtocolFlags(PRUint32 *aProtocolFlags)\n {\n-  // Is this true of all GnomeVFS URI types?\n-  *aProtocolFlags = URI_STD;\n+  // Is URI_STD true of all GnomeVFS URI types?\n+  *aProtocolFlags = URI_STD | URI_DANGEROUS_TO_LOAD;\n   return NS_OK;\n }\n "},{"sha":"5a800782a6ca34f0f681f44012bc2827cb14cee6","filename":"extensions/irc/js/lib/chatzilla-service.js","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/extensions/irc/js/lib/chatzilla-service.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/extensions/irc/js/lib/chatzilla-service.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/extensions/irc/js/lib/chatzilla-service.js?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -255,6 +255,10 @@ function IRCProtocolHandler(isSecure)\n IRCProtocolHandler.prototype.protocolFlags =\n                    nsIProtocolHandler.URI_NORELATIVE |\n                    nsIProtocolHandler.ALLOWS_PROXY;\n+if (\"URI_DANGEROUS_TO_LOAD\" in nsIProtocolHandler) {\n+  IRCProtocolHandler.prototype.protocolFlags |=\n+      nsIProtocolHandler.URI_LOADABLE_BY_ANYONE;\n+}\n \n IRCProtocolHandler.prototype.allowPort =\n function ircph_allowPort(port, scheme)"},{"sha":"c633d04148d6675d3f510bde8707491169e9972b","filename":"extensions/venkman/js/venkman-service.js","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/extensions/venkman/js/venkman-service.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/extensions/venkman/js/venkman-service.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/extensions/venkman/js/venkman-service.js?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -277,8 +277,12 @@ function JSDProtocolHandler()\n \n JSDProtocolHandler.prototype.scheme = \"x-jsd\";\n JSDProtocolHandler.prototype.defaultPort = JSD_DEFAULT_PORT;\n-JSDProtocolHandler.prototype.protocolFlags = nsIProtocolHandler.URI_NORELATIVE ||\n+JSDProtocolHandler.prototype.protocolFlags = nsIProtocolHandler.URI_NORELATIVE |\n                                              nsIProtocolHandler.URI_NOAUTH;\n+if (\"URI_DANGEROUS_TO_LOAD\" in nsIProtocolHandler) {\n+  JSDProtocolHandler.prototype.protocolFlags |=\n+      nsIProtocolHandler.URI_DANGEROUS_TO_LOAD;\n+}\n \n JSDProtocolHandler.prototype.allowPort =\n function jsdph_allowport (aPort, aScheme)"},{"sha":"db7aab392c5ae7df830ce384a43bdf1a6dd97333","filename":"mailnews/addrbook/src/nsAddbookProtocolHandler.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/addrbook/src/nsAddbookProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/addrbook/src/nsAddbookProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mailnews/addrbook/src/nsAddbookProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -85,7 +85,7 @@ NS_IMETHODIMP nsAddbookProtocolHandler::GetDefaultPort(PRInt32 *aDefaultPort)\n \n NS_IMETHODIMP nsAddbookProtocolHandler::GetProtocolFlags(PRUint32 *aUritype)\n {\n-  *aUritype = URI_STD;\n+  *aUritype = URI_STD | URI_LOADABLE_BY_ANYONE;\n   return NS_OK;\n }\n "},{"sha":"0d406b28ca20e5337127105ebeb7697fbf56d145","filename":"mailnews/base/src/nsCidProtocolHandler.cpp","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/base/src/nsCidProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/base/src/nsCidProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mailnews/base/src/nsCidProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -64,6 +64,7 @@ NS_IMETHODIMP nsCidProtocolHandler::GetDefaultPort(PRInt32 *aDefaultPort)\n \n NS_IMETHODIMP nsCidProtocolHandler::GetProtocolFlags(PRUint32 *aProtocolFlags)\n {\n+  // XXXbz so why does this protocol handler exist, exactly?\n   return NS_ERROR_NOT_IMPLEMENTED;\n }\n "},{"sha":"bf0466ddc60a1c0b6da49f1d2dcb9286a8bf2262","filename":"mailnews/compose/src/nsSmtpService.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/compose/src/nsSmtpService.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/compose/src/nsSmtpService.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mailnews/compose/src/nsSmtpService.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -306,7 +306,7 @@ nsSmtpService::AllowPort(PRInt32 port, const char *scheme, PRBool *_retval)\n \n NS_IMETHODIMP nsSmtpService::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_NORELATIVE | ALLOWS_PROXY;\n+    *result = URI_NORELATIVE | ALLOWS_PROXY | URI_LOADABLE_BY_ANYONE;\n     return NS_OK; \t\n }\n "},{"sha":"ef0277e4048feddf2d5106c838fc568560b1dc45","filename":"mailnews/imap/src/nsImapService.cpp","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/imap/src/nsImapService.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/imap/src/nsImapService.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mailnews/imap/src/nsImapService.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -2386,7 +2386,8 @@ NS_IMETHODIMP nsImapService::GetDefaultPort(PRInt32 *aDefaultPort)\n \n NS_IMETHODIMP nsImapService::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_STD | ALLOWS_PROXY;\n+    *result = URI_STD | URI_FORBIDS_AUTOMATIC_DOCUMENT_REPLACEMENT |\n+        URI_DANGEROUS_TO_LOAD | ALLOWS_PROXY;\n     return NS_OK;\n }\n "},{"sha":"cc88051761d90bcac02a1f933efcb423093ef7a9","filename":"mailnews/local/src/nsMailboxService.cpp","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/local/src/nsMailboxService.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/local/src/nsMailboxService.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mailnews/local/src/nsMailboxService.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -516,7 +516,8 @@ NS_IMETHODIMP nsMailboxService::AllowPort(PRInt32 port, const char *scheme, PRBo\n \n NS_IMETHODIMP nsMailboxService::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_STD;\n+    *result = URI_STD | URI_FORBIDS_AUTOMATIC_DOCUMENT_REPLACEMENT |\n+        URI_DANGEROUS_TO_LOAD;\n     return NS_OK; \t\n }\n "},{"sha":"90ba9f7c81471de46f56ded90196aea2d7074eb9","filename":"mailnews/local/src/nsPop3Service.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/local/src/nsPop3Service.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/local/src/nsPop3Service.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mailnews/local/src/nsPop3Service.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -287,7 +287,7 @@ NS_IMETHODIMP nsPop3Service::GetDefaultDoBiff(PRBool *aDoBiff)\n NS_IMETHODIMP nsPop3Service::GetProtocolFlags(PRUint32 *result)\n {\n     NS_ENSURE_ARG_POINTER(result);\n-    *result = URI_NORELATIVE | ALLOWS_PROXY;\n+    *result = URI_NORELATIVE | URI_DANGEROUS_TO_LOAD | ALLOWS_PROXY;\n     return NS_OK;\n }\n "},{"sha":"e4004d67704208730c5e1074b218c7a43148ad6a","filename":"mailnews/news/src/nsNntpService.cpp","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/news/src/nsNntpService.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/mailnews/news/src/nsNntpService.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/mailnews/news/src/nsNntpService.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -1382,7 +1382,8 @@ nsNntpService::GetDefaultServerPort(PRBool isSecure, PRInt32 *aDefaultPort)\n NS_IMETHODIMP nsNntpService::GetProtocolFlags(PRUint32 *aUritype)\n {\n     NS_ENSURE_ARG_POINTER(aUritype);\n-    *aUritype = URI_NORELATIVE | ALLOWS_PROXY;\n+    *aUritype = URI_NORELATIVE | URI_FORBIDS_AUTOMATIC_DOCUMENT_REPLACEMENT |\n+      URI_LOADABLE_BY_ANYONE | ALLOWS_PROXY;\n     return NS_OK;\n }\n "},{"sha":"3cc534be3d6ccd8a8e1e680105c027cfb7e5f806","filename":"modules/libjar/nsJARProtocolHandler.cpp","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/modules/libjar/nsJARProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/modules/libjar/nsJARProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/modules/libjar/nsJARProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -140,7 +140,9 @@ nsJARProtocolHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsJARProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_NORELATIVE | URI_NOAUTH;\n+    // URI_LOADABLE_BY_ANYONE, since it's our inner URI that will matter\n+    // anyway.\n+    *result = URI_NORELATIVE | URI_NOAUTH | URI_LOADABLE_BY_ANYONE;\n     /* Although jar uris have their own concept of relative urls\n        it is very different from the standard behaviour, so we\n        have to say norelative here! */"},{"sha":"4136c6f78c6d388263d0e54628bb4f97ee92b450","filename":"modules/libpr0n/decoders/icon/nsIconProtocolHandler.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/modules/libpr0n/decoders/icon/nsIconProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/modules/libpr0n/decoders/icon/nsIconProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/modules/libpr0n/decoders/icon/nsIconProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -83,7 +83,7 @@ NS_IMETHODIMP nsIconProtocolHandler::AllowPort(PRInt32 port, const char *scheme,\n \n NS_IMETHODIMP nsIconProtocolHandler::GetProtocolFlags(PRUint32 *result) \n {\n-  *result = URI_NORELATIVE | URI_NOAUTH;\n+  *result = URI_NORELATIVE | URI_NOAUTH | URI_IS_UI_RESOURCE;\n   return NS_OK;\n }\n "},{"sha":"dd4e15d82fc37b9b3b0ee20a97a6f9bb912aa59c","filename":"netwerk/base/public/nsIProtocolHandler.idl","status":"modified","additions":72,"deletions":4,"changes":76,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/base/public/nsIProtocolHandler.idl","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/base/public/nsIProtocolHandler.idl","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/base/public/nsIProtocolHandler.idl?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -135,12 +135,80 @@ interface nsIProtocolHandler : nsISupports\n     const unsigned long URI_NOAUTH = (1<<1);\n \n     /**\n-     * The URIs for this protocol have no inherent security context.  That is,\n-     * it's not possible to decide what a document loaded from one of these\n-     * URIs should be allowed to do.\n+     * The URIs for this protocol have no inherent security context, so\n+     * documents loaded via this protocol should inherit the security context\n+     * from the document that loads them.\n      */\n-    const unsigned long URI_HAS_NO_SECURITY_CONTEXT = (1<<4);\n+    const unsigned long URI_INHERITS_SECURITY_CONTEXT = (1<<4);\n \n+    /**\n+     * \"Automatic\" loads that would replace the document (e.g. <meta> refresh,\n+     * certain types of XLinks, possibly other loads that the application\n+     * decides are not user triggered) are not allowed if the originating (NOT\n+     * the target) URI has this protocol flag.  Note that the decision as to\n+     * what constitutes an \"automatic\" load is made externally, by the caller\n+     * of nsIScriptSecurityManager::CheckLoadURI.  See documentation for that\n+     * method for more information.\n+     *\n+     * A typical protocol that might want to set this flag is a protocol that\n+     * shows highly untrusted content in a viewing area that the user expects\n+     * to have a lot of control over, such as an e-mail reader.\n+     */\n+    const unsigned long URI_FORBIDS_AUTOMATIC_DOCUMENT_REPLACEMENT = (1<<5);\n+\n+    /**\n+     * +-------------------------------------------------------------------+\n+     * |                                                                   |\n+     * |  ALL PROTOCOL HANDLERS MUST SET ONE OF THE FOLLOWING FOUR FLAGS.  |\n+     * |                                                                   |\n+     * +-------------------------------------------------------------------+\n+     *\n+     * These flags are used to determine who is allowed to load URIs for this\n+     * protocol.  Note that if a URI is nested, only the flags for the\n+     * innermost URI matter.  See nsINestedURI.\n+     *\n+     * If none of these four flags are set, the URI must be treated as if it\n+     * had the URI_LOADABLE_BY_ANYONE flag set, for compatibility with protocol\n+     * handlers written against Gecko 1.8 or earlier.  In this case, there may\n+     * be run-time warning messages indicating that a \"default insecure\"\n+     * assumption is being made.  At some point in the futures (Mozilla 2.0,\n+     * most likely), these warnings will become errors.\n+     */\n+\n+    /**\n+     * The URIs for this protocol can be loaded by anyone.  For example, any\n+     * website should be allowed to trigger a load of a URI for this protocol.\n+     * Web-safe protocols like \"http\" should set this flag.\n+     */\n+    const unsigned long URI_LOADABLE_BY_ANYONE = (1<<6);\n+    \n+    /**\n+     * The URIs for this protocol are UNSAFE if loaded by untrusted (web)\n+     * content and may only be loaded by privileged code (for example, code\n+     * which has the system principal).  Various internal protocols should set\n+     * this flag.\n+     */\n+    const unsigned long URI_DANGEROUS_TO_LOAD = (1<<7);\n+    \n+    /**\n+     * The URIs for this protocol point to resources that are part of the\n+     * application's user interface.  There are cases when such resources may\n+     * be made accessible to untrusted content such as web pages, so this is\n+     * less restrictive than URI_DANGEROUS_TO_LOAD but more restrictive than\n+     * URI_LOADABLE_BY_ANYONE.  See the documentation for\n+     * nsIScriptSecurityManager::CheckLoadURI.\n+     */\n+    const unsigned long URI_IS_UI_RESOURCE = (1<<8);\n+\n+    /**\n+     * Loading of URIs for this protocol from other origins should only be\n+     * allowed if those origins should have access to the local filesystem.\n+     * It's up to the application to decide what origins should have such\n+     * access.  Protocols like \"file\" that point to local data should set this\n+     * flag.\n+     */\n+    const unsigned long URI_IS_LOCAL_FILE = (1<<9);\n+    \n     /**\n      * This protocol handler can be proxied via a proxy (socks or http)\n      * (e.g., irc, smtp, http, etc.).  If the protocol supports transparent"},{"sha":"594fc9a90ee8c829eaa7b8aebdc7a34356c5b6cb","filename":"netwerk/protocol/about/src/nsAboutProtocolHandler.cpp","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/about/src/nsAboutProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/about/src/nsAboutProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/protocol/about/src/nsAboutProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -77,7 +77,7 @@ nsAboutProtocolHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsAboutProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_NORELATIVE | URI_NOAUTH;\n+    *result = URI_NORELATIVE | URI_NOAUTH | URI_DANGEROUS_TO_LOAD;\n     return NS_OK;\n }\n \n@@ -204,7 +204,7 @@ nsSafeAboutProtocolHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsSafeAboutProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_NORELATIVE | URI_NOAUTH;\n+    *result = URI_NORELATIVE | URI_NOAUTH | URI_LOADABLE_BY_ANYONE;\n     return NS_OK;\n }\n "},{"sha":"609e7f10cc6681e100768183b49752ad5d4341f4","filename":"netwerk/protocol/data/src/nsDataHandler.cpp","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/data/src/nsDataHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/data/src/nsDataHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/protocol/data/src/nsDataHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -89,7 +89,8 @@ nsDataHandler::GetDefaultPort(PRInt32 *result) {\n \n NS_IMETHODIMP\n nsDataHandler::GetProtocolFlags(PRUint32 *result) {\n-    *result = URI_NORELATIVE | URI_NOAUTH | URI_HAS_NO_SECURITY_CONTEXT;\n+    *result = URI_NORELATIVE | URI_NOAUTH | URI_INHERITS_SECURITY_CONTEXT |\n+        URI_LOADABLE_BY_ANYONE;\n     return NS_OK;\n }\n "},{"sha":"5acf26508a3a86ed94959f1b5c50cc78be75b823","filename":"netwerk/protocol/file/src/nsFileProtocolHandler.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/file/src/nsFileProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/file/src/nsFileProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/protocol/file/src/nsFileProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -247,7 +247,7 @@ nsFileProtocolHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsFileProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_NOAUTH;\n+    *result = URI_NOAUTH | URI_IS_LOCAL_FILE;\n     return NS_OK;\n }\n "},{"sha":"a125361631adc71aab0bad1cf6fe46e0a0a1ca04","filename":"netwerk/protocol/ftp/src/nsFtpProtocolHandler.cpp","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/ftp/src/nsFtpProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/ftp/src/nsFtpProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/protocol/ftp/src/nsFtpProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -170,7 +170,8 @@ nsFtpProtocolHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsFtpProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_STD | ALLOWS_PROXY | ALLOWS_PROXY_HTTP; \n+    *result = URI_STD | ALLOWS_PROXY | ALLOWS_PROXY_HTTP |\n+        URI_LOADABLE_BY_ANYONE; \n     return NS_OK;\n }\n "},{"sha":"f1d0c3292b8fb389b429d78186d60f28ba882ddb","filename":"netwerk/protocol/gopher/src/nsGopherHandler.cpp","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/gopher/src/nsGopherHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/gopher/src/nsGopherHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/protocol/gopher/src/nsGopherHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -72,7 +72,8 @@ nsGopherHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsGopherHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_NORELATIVE | ALLOWS_PROXY | ALLOWS_PROXY_HTTP;\n+    *result = URI_NORELATIVE | ALLOWS_PROXY | ALLOWS_PROXY_HTTP |\n+      URI_LOADABLE_BY_ANYONE;\n     return NS_OK;\n }\n "},{"sha":"5fd3e58a2767f2365caca06146e946341ed5a8ae","filename":"netwerk/protocol/http/src/nsHttpHandler.cpp","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/http/src/nsHttpHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/http/src/nsHttpHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/protocol/http/src/nsHttpHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -1408,7 +1408,8 @@ nsHttpHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsHttpHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_STD | ALLOWS_PROXY | ALLOWS_PROXY_HTTP;\n+    *result = URI_STD | ALLOWS_PROXY | ALLOWS_PROXY_HTTP |\n+        URI_LOADABLE_BY_ANYONE;\n     return NS_OK;\n }\n "},{"sha":"575eb9665a8de26e2d35de67893c418350c5ef5a","filename":"netwerk/protocol/res/src/nsResProtocolHandler.cpp","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/res/src/nsResProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/res/src/nsResProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/protocol/res/src/nsResProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -208,7 +208,9 @@ nsResProtocolHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsResProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_STD;\n+    // XXXbz Is this really true for all resource: URIs?  Could we\n+    // somehow give different flags to some of them?\n+    *result = URI_STD | URI_IS_UI_RESOURCE;\n     return NS_OK;\n }\n "},{"sha":"6644a8e17f691dea07e6fc91350dd44c89a0f2d0","filename":"netwerk/protocol/viewsource/src/nsViewSourceHandler.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/viewsource/src/nsViewSourceHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/protocol/viewsource/src/nsViewSourceHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/protocol/viewsource/src/nsViewSourceHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -69,7 +69,7 @@ nsViewSourceHandler::GetDefaultPort(PRInt32 *result)\n NS_IMETHODIMP\n nsViewSourceHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_NORELATIVE | URI_NOAUTH;\n+    *result = URI_NORELATIVE | URI_NOAUTH | URI_LOADABLE_BY_ANYONE;\n     return NS_OK;\n }\n "},{"sha":"44cfcdae33ebb63ec998d17e5c2f1fe9b2cd8c9b","filename":"netwerk/test/unit/test_protocolproxyservice.js","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/test/unit/test_protocolproxyservice.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/netwerk/test/unit/test_protocolproxyservice.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/netwerk/test/unit/test_protocolproxyservice.js?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -60,7 +60,8 @@ TestProtocolHandler.prototype = {\n   defaultPort: -1,\n   protocolFlags: Components.interfaces.nsIProtocolHandler.URI_NOAUTH |\n                  Components.interfaces.nsIProtocolHandler.URI_NORELATIVE |\n-                 Components.interfaces.nsIProtocolHandler.ALLOWS_PROXY,\n+                 Components.interfaces.nsIProtocolHandler.ALLOWS_PROXY |\n+                 Components.interfaces.nsIProtocolHandler.URI_DANGEROUS_TO_LOAD,\n   newURI: function(spec, originCharset, baseURI) {\n     var uri = Components.classes[\"@mozilla.org/network/simple-uri;1\"]\n                         .createInstance(Components.interfaces.nsIURI);"},{"sha":"44aa87163281e5c7cd47b1fc0cdd13750289ef72","filename":"rdf/chrome/src/nsChromeProtocolHandler.cpp","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/rdf/chrome/src/nsChromeProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/rdf/chrome/src/nsChromeProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/rdf/chrome/src/nsChromeProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -519,7 +519,10 @@ nsChromeProtocolHandler::AllowPort(PRInt32 port, const char *scheme, PRBool *_re\n NS_IMETHODIMP\n nsChromeProtocolHandler::GetProtocolFlags(PRUint32 *result)\n {\n-    *result = URI_STD;\n+    // XXXbz we should probably have different flags for different package\n+    // types and put the things that ARE OK for random crap to load into a\n+    // separate package type!\n+    *result = URI_STD | URI_IS_UI_RESOURCE;\n     return NS_OK;\n }\n "},{"sha":"7264b391228dee388bae8f1fc8796d84d691f394","filename":"toolkit/components/places/src/nsAnnoProtocolHandler.cpp","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/toolkit/components/places/src/nsAnnoProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/toolkit/components/places/src/nsAnnoProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/toolkit/components/places/src/nsAnnoProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -83,13 +83,11 @@ nsAnnoProtocolHandler::GetDefaultPort(PRInt32 *aDefaultPort)\n \n \n // nsAnnoProtocolHandler::GetProtocolFlags\n-//\n-//    No special protocol flags.\n \n NS_IMETHODIMP\n nsAnnoProtocolHandler::GetProtocolFlags(PRUint32 *aProtocolFlags)\n {\n-  *aProtocolFlags = (URI_NORELATIVE | URI_NOAUTH);\n+  *aProtocolFlags = (URI_NORELATIVE | URI_NOAUTH | URI_DANGEROUS_TO_LOAD);\n   return NS_OK;\n }\n "},{"sha":"84886119fa9a224aedec241eecfcbca360890583","filename":"toolkit/components/places/src/nsLivemarkService.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/toolkit/components/places/src/nsLivemarkService.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/toolkit/components/places/src/nsLivemarkService.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/toolkit/components/places/src/nsLivemarkService.js?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -79,7 +79,7 @@ const FAV_CONTRACTID = \"@mozilla.org/browser/favicon-service;1\";\n const LG_CONTRACTID = \"@mozilla.org/network/load-group;1\";\n const FP_CONTRACTID = \"@mozilla.org/feed-processor;1\";\n const SEC_CONTRACTID = \"@mozilla.org/scriptsecuritymanager;1\";\n-const SEC_FLAGS = Ci.nsIScriptSecurityManager.DISALLOW_SCRIPT_OR_DATA;\n+const SEC_FLAGS = Ci.nsIScriptSecurityManager.DISALLOW_INHERIT_PRINCIPAL;\n \n // Check every hour\n const EXPIRATION = 3600000;"},{"sha":"cda957b3650778c5657db26303752e77faf66278","filename":"toolkit/content/widgets/text.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/toolkit/content/widgets/text.xml","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/toolkit/content/widgets/text.xml","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/toolkit/content/widgets/text.xml?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -316,7 +316,8 @@\n             var safeURI = ioService.newURI(\"about:blank\", null, null);\n \n             try {\n-              secMan.checkLoadURI(safeURI, uri, nsISSM.DISALLOW_SCRIPT_OR_DATA)\n+              secMan.checkLoadURI(safeURI, uri,\n+                                  nsISSM.DISALLOW_INHERIT_PRINCIPAL)\n             } catch (ex) {\n               var msg = \"Error: Cannot open a \" + uri.scheme + \": link using \\\n                          the text-link binding.\";"},{"sha":"f0fb95942fbaf18316780136bf978815bd6bbc8a","filename":"toolkit/mozapps/plugins/content/pluginInstallerWizard.js","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/toolkit/mozapps/plugins/content/pluginInstallerWizard.js","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/toolkit/mozapps/plugins/content/pluginInstallerWizard.js","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/toolkit/mozapps/plugins/content/pluginInstallerWizard.js?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -565,7 +565,9 @@ nsPluginInstallerWizard.prototype.showPluginResults = function (){\n \n nsPluginInstallerWizard.prototype.loadURL = function (aUrl){\n   // Check if the page where the plugin came from can load aUrl before\n-  // loading it, and do *not* allow loading javascript: or data: URIs.\n+  // loading it, and do *not* allow loading URIs that would inherit our\n+  // principal.\n+  \n   var pluginPage = window.opener.content.location.href;\n \n   const nsIScriptSecurityManager =\n@@ -575,7 +577,7 @@ nsPluginInstallerWizard.prototype.loadURL = function (aUrl){\n     .getService(nsIScriptSecurityManager);\n \n   secMan.checkLoadURIStr(pluginPage, aUrl,\n-                         nsIScriptSecurityManager.DISALLOW_SCRIPT_OR_DATA);\n+                         nsIScriptSecurityManager.DISALLOW_INHERIT_PRINCIPAL);\n \n   window.opener.open(aUrl);\n }"},{"sha":"2a26b1a46965518e3a5c7e4cd8766792ce2cc591","filename":"uriloader/exthandler/nsExternalProtocolHandler.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/uriloader/exthandler/nsExternalProtocolHandler.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/uriloader/exthandler/nsExternalProtocolHandler.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/uriloader/exthandler/nsExternalProtocolHandler.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -355,7 +355,7 @@ PRBool nsExternalProtocolHandler::HaveProtocolHandler(nsIURI * aURI)\n NS_IMETHODIMP nsExternalProtocolHandler::GetProtocolFlags(PRUint32 *aUritype)\n {\n     // Make it norelative since it is a simple uri\n-    *aUritype = URI_NORELATIVE | URI_NOAUTH | URI_HAS_NO_SECURITY_CONTEXT;\n+    *aUritype = URI_NORELATIVE | URI_NOAUTH | URI_LOADABLE_BY_ANYONE;\n     return NS_OK;\n }\n "},{"sha":"cdafac33df396b2a87cca1f6f54a16416f863564","filename":"xpinstall/src/nsJSInstallTriggerGlobal.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/mozilla/gecko-dev/blob/0a3a6241492676d80676502466689d527d7fd1cf/xpinstall/src/nsJSInstallTriggerGlobal.cpp","raw_url":"https://github.com/mozilla/gecko-dev/raw/0a3a6241492676d80676502466689d527d7fd1cf/xpinstall/src/nsJSInstallTriggerGlobal.cpp","contents_url":"https://api.github.com/repos/mozilla/gecko-dev/contents/xpinstall/src/nsJSInstallTriggerGlobal.cpp?ref=0a3a6241492676d80676502466689d527d7fd1cf","patch":"@@ -171,7 +171,7 @@ InstallTriggerCheckLoadURIFromScript(JSContext *cx, const nsAString& uriStr)\n \n     // are we allowed to load this one?\n     rv = secman->CheckLoadURIWithPrincipal(principal, uri,\n-                    nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA);\n+                    nsIScriptSecurityManager::DISALLOW_INHERIT_PRINCIPAL);\n     return rv;\n }\n "}]},"blames":["a54a330d","6f2cd336","9d614049","bb058821","5171657d","a5a0d89b","ee3b68e6","f64740e5","d30a1bda","f7460d02","f1137e89","6d36e81b","f7460d02","6f5d99be","41054417","4756b716","f7460d02","25ab5fff","4ede7671","8ca0c034","2b6e6516","1b5e7659","08b3a165","dbd7fed5","e3a6a4ed","9a60679a","9f0ff7ef","c48f061d","2d8e1237","eb23e762","060e388a","41054417","ec9d253f","66caced6","10d1c576","92c940aa","939cd017","02764816","6917b5d0","e91f8a14","f9510dc2","ab75327f","0c370688","6fa03a17","b5d51e41","6fa03a17","6917b5d0","5a2d9f0d","f6824e54","8563362d","2e2c7eae","722b5218","e9379f36","b6f6ad74","e67c6e5d","4ef7533a","5a2d9f0d","6917b5d0","41f2c6c6","f99a2809","3b79ba31","5a2d9f0d","6917b5d0","349e796f","5a2d9f0d","6917b5d0","73298e056","82a4c899","5a2d9f0d","92b1e3b6","03cc6639","4db40819","5a2d9f0d","6917b5d0","f1a6738b","76001cf8","e0c4831d","5a2d9f0d","6917b5d0","33bb1a8a","14753e4a","5a2d9f0d","6917b5d0","e0c4831d","5a2d9f0d","6917b5d0","5a2d9f0d","6917b5d0","f1a6738b","5a2d9f0d","6917b5d0","9940aa8e","5a2d9f0d","6917b5d0","e0c4831d","5a2d9f0d","6917b5d0","f1a6738b","b4b75daa","722b5218","cf763ddb3","5a2d9f0d2","6917b5d06","9509962b3","9bd1d6e8","5a2d9f0d","6917b5d0","c9938902","5a2d9f0d","6917b5d0","c9e74567","5a2d9f0d","6917b5d0","650b9d4d","697c78f1","6917b5d0","199c44a7","5a2d9f0d","6917b5d0","ad0a3a73","5a2d9f0d","6917b5d0","69c02d8e","6c4a94cb","6917b5d0","3da95cfe","939cd017","5a2d9f0d","6917b5d0","110f767d","7e42eae0","f3a88890","8c91e9b5","a3b1eda4","ba7012ad","5a2d9f0d","6917b5d0","f1a6738b","7b49950fe","d9102c621"]}