Index: caps/idl/nsIScriptSecurityManager.idl
===================================================================
RCS file: /cvsroot/mozilla/caps/idl/nsIScriptSecurityManager.idl,v
retrieving revision 1.63
diff -u -7 -p -r1.63 nsIScriptSecurityManager.idl
--- caps/idl/nsIScriptSecurityManager.idl	25 Apr 2004 16:55:15 -0000	1.63
+++ caps/idl/nsIScriptSecurityManager.idl	1 Feb 2005 05:27:05 -0000
@@ -36,15 +36,16 @@
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsISupports.idl"
 #include "nsIPrincipal.idl"
 #include "nsIXPCSecurityManager.idl"
 interface nsIURI;
 
-[scriptable, uuid(82bff35d-ebb7-4cb9-bb47-4f9ebdf11f77)]
+
+[scriptable, uuid(463eb1fa-9dac-4ca7-826f-1fc921971d3a)]
 interface nsIScriptSecurityManager : nsIXPCSecurityManager
 {
     ///////////////// Security Checks //////////////////
     /**
      * Checks whether the running script is allowed to access aProperty.
      */
     [noscript] void checkPropertyAccess(in JSContextPtr aJSContext,
@@ -114,15 +115,15 @@ interface nsIScriptSecurityManager : nsI
     void checkLoadURI(in nsIURI from, in nsIURI uri, 
                       in unsigned long flags);
 
     /**
      * Same as CheckLoadURI but takes string arguments for ease of use
      * by scripts
      */
-    void checkLoadURIStr(in string from, in string uri, 
+    void checkLoadURIStr(in AUTF8String from, in AUTF8String uri, 
                          in unsigned long flags);
 
     /**
      * Check that the function 'funObj' is allowed to run on 'targetObj'
      *
      * Will return error code NS_ERROR_DOM_SECURITY_ERR if the function
      * should not run
Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.243
diff -u -7 -p -r1.243 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	23 Jan 2005 21:02:36 -0000	1.243
+++ caps/src/nsScriptSecurityManager.cpp	1 Feb 2005 05:27:06 -0000
@@ -1399,25 +1399,24 @@ nsScriptSecurityManager::ReportError(JSC
         fprintf(stderr, "%s\n", NS_LossyConvertUCS2toASCII(message).get());
 #endif
     }
     return NS_OK;
 }
 
 NS_IMETHODIMP
-nsScriptSecurityManager::CheckLoadURIStr(const char* aSourceURIStr, const char* aTargetURIStr,
+nsScriptSecurityManager::CheckLoadURIStr(const nsACString& aSourceURIStr,
+                                         const nsACString& aTargetURIStr,
                                          PRUint32 aFlags)
 {
     nsCOMPtr<nsIURI> source;
-    nsresult rv = NS_NewURI(getter_AddRefs(source),
-                            nsDependentCString(aSourceURIStr),
+    nsresult rv = NS_NewURI(getter_AddRefs(source), aSourceURIStr,
                             nsnull, nsnull, sIOService);
     NS_ENSURE_SUCCESS(rv, rv);
     nsCOMPtr<nsIURI> target;
-    rv = NS_NewURI(getter_AddRefs(target),
-                   nsDependentCString(aTargetURIStr),
+    rv = NS_NewURI(getter_AddRefs(target), aTargetURIStr,
                    nsnull, nsnull, sIOService);
     NS_ENSURE_SUCCESS(rv, rv);
     return CheckLoadURI(source, target, aFlags);
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::CheckFunctionAccess(JSContext *aCx, void *aFunObj,
