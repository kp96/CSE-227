{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas22a9bb0\""},"diff":"\"22a9bb0 Free resources more sensibly when _cairo_scaled_font_init() fails. Use true NOOP mutex macros to avoid similar deadlocks in the future. b=378716 r+sr=vladimir a=vladimir\\ndiff --git a/gfx/cairo/README b/gfx/cairo/README\\nindex 529c76d..56c397c 100644\\n--- a/gfx/cairo/README\\n+++ b/gfx/cairo/README\\n@@ -39,3 +39,12 @@ nonfatal-assertions.patch: Make assertions non-fatal\\n \\n clone-similar-fallback.patch: Implement fallback for clone_similar.\\n \\n+scaled-font-create-deadlock.patch: the \\\"poor man's mutex\\\" that is provided\\n+for CAIRO_NO_MUTEX will deadlock if a recursive mutex lock occurs.\\n+It's also just a bunch of useless assignments for applications that makes\\n+all cairo calls from a single thread.  An example of where a deadlock occurs\\n+is the cairo_scaled_font_destroy() call from win32_scaled_font_create(),\\n+which is a bug, but it illustrates the dangers of that \\\"poor man's mutex\\\".\\n+The patch makes all mutex operations do nothing under CAIRO_NO_MUTEX and\\n+it fixes the bug in win32_scaled_font_create().\\n+See  https://bugzilla.mozilla.org/show_bug.cgi?id=378716\\ndiff --git a/gfx/cairo/cairo/src/cairo-mutex-type-private.h b/gfx/cairo/cairo/src/cairo-mutex-type-private.h\\nindex f588586..c2ec095 100644\\n--- a/gfx/cairo/cairo/src/cairo-mutex-type-private.h\\n+++ b/gfx/cairo/cairo/src/cairo-mutex-type-private.h\\n@@ -144,6 +144,17 @@ CAIRO_BEGIN_DECLS\\n \\n #if CAIRO_NO_MUTEX\\n \\n+/* No mutex at all */\\n+\\n+  typedef int cairo_mutex_t;\\n+\\n+# define CAIRO_MUTEX_INITIALIZE() CAIRO_MUTEX_NOOP\\n+# define CAIRO_MUTEX_LOCK(mutex) CAIRO_MUTEX_NOOP\\n+# define CAIRO_MUTEX_UNLOCK(mutex) CAIRO_MUTEX_NOOP\\n+# define CAIRO_MUTEX_NIL_INITIALIZER 0\\n+\\n+#elif CAIRO_POOR_MAN_MUTEX\\n+\\n /* A poor man's mutex */\\n \\n   typedef int cairo_mutex_t;\\ndiff --git a/gfx/cairo/cairo/src/cairo-win32-font.c b/gfx/cairo/cairo/src/cairo-win32-font.c\\nindex 64df7e2..4c2cce9 100644\\n--- a/gfx/cairo/cairo/src/cairo-win32-font.c\\n+++ b/gfx/cairo/cairo/src/cairo-win32-font.c\\n@@ -303,12 +303,15 @@ _win32_scaled_font_create (LOGFONTW                   *logfont,\\n     status = _cairo_scaled_font_init (&f->base, font_face,\\n \\t\\t\\t\\t      font_matrix, ctm, options,\\n \\t\\t\\t\\t      &cairo_win32_scaled_font_backend);\\n+    if (status) {\\n+\\tfree (f);\\n+\\treturn NULL;\\n+    }\\n \\n-    if (status == CAIRO_STATUS_SUCCESS)\\n-\\tstatus = _cairo_win32_scaled_font_set_metrics (f);\\n-\\n+    status = _cairo_win32_scaled_font_set_metrics (f);\\n     if (status) {\\n-\\tcairo_scaled_font_destroy (&f->base);\\n+\\t_cairo_scaled_font_fini (f);\\n+\\tfree (f);\\n \\treturn NULL;\\n     }\\n \\ndiff --git a/gfx/cairo/scaled-font-create-deadlock.patch b/gfx/cairo/scaled-font-create-deadlock.patch\\nnew file mode 100755\\nindex 0000000..ca1f566\\n--- /dev/null\\n+++ b/gfx/cairo/scaled-font-create-deadlock.patch\\n@@ -0,0 +1,88 @@\\n+Index: gfx/cairo/cairo/src/cairo-mutex-type-private.h\\n+===================================================================\\n+RCS file: /cvsroot/mozilla/gfx/cairo/cairo/src/cairo-mutex-type-private.h,v\\n+retrieving revision 1.6\\n+diff -p -u -1 -2 -r1.6 cairo-mutex-type-private.h\\n+--- gfx/cairo/cairo/src/cairo-mutex-type-private.h\\t24 Jul 2007 17:43:30 -0000\\t1.6\\n++++ gfx/cairo/cairo/src/cairo-mutex-type-private.h\\t29 Aug 2007 17:53:58 -0000\\n+@@ -135,24 +135,35 @@ CAIRO_BEGIN_DECLS\\n+  *   So, if for any reason finalizing static mutex'es is not needed\\n+  *   (eg. you never call CAIRO_MUTEX_FINALIZE), then\\n+  *   #define CAIRO_MUTEX_FINALIZE() CAIRO_MUTEX_NOOP\\n+  *\\n+  * - That is all.  If for any reason you think the above API is\\n+  *   not enough to implement cairo_mutex_t on your system, please\\n+  *   stop and write to the cairo mailing list about it.  DO NOT\\n+  *   poke around cairo-mutex-private.h for possible solutions.\\n+  */\\n+ \\n+ #if CAIRO_NO_MUTEX\\n+ \\n++/* No mutex at all */\\n++\\n++  typedef int cairo_mutex_t;\\n++\\n++# define CAIRO_MUTEX_INITIALIZE() CAIRO_MUTEX_NOOP\\n++# define CAIRO_MUTEX_LOCK(mutex) CAIRO_MUTEX_NOOP\\n++# define CAIRO_MUTEX_UNLOCK(mutex) CAIRO_MUTEX_NOOP\\n++# define CAIRO_MUTEX_NIL_INITIALIZER 0\\n++\\n++#elif CAIRO_POOR_MAN_MUTEX\\n++\\n+ /* A poor man's mutex */\\n+ \\n+   typedef int cairo_mutex_t;\\n+ \\n+ # define CAIRO_MUTEX_INITIALIZE() CAIRO_MUTEX_NOOP\\n+ # define CAIRO_MUTEX_LOCK(mutex) do { while (mutex) ; (mutex) = 1; } while (0)\\n+ # define CAIRO_MUTEX_UNLOCK(mutex) (mutex) = 0\\n+ # define CAIRO_MUTEX_NIL_INITIALIZER 0\\n+ \\n+ #elif HAVE_PTHREAD_H /*******************************************************/\\n+ \\n+ # include <pthread.h>\\n+Index: gfx/cairo/cairo/src/cairo-win32-font.c\\n+===================================================================\\n+RCS file: /cvsroot/mozilla/gfx/cairo/cairo/src/cairo-win32-font.c,v\\n+retrieving revision 1.33\\n+diff -p -u -1 -2 -r1.33 cairo-win32-font.c\\n+--- gfx/cairo/cairo/src/cairo-win32-font.c\\t2 Aug 2007 07:00:32 -0000\\t1.33\\n++++ gfx/cairo/cairo/src/cairo-win32-font.c\\t29 Aug 2007 17:53:58 -0000\\n+@@ -294,30 +294,33 @@ _win32_scaled_font_create (LOGFONTW     \\n+          */\\n+         f->scaled_hfont = face_hfont;\\n+     }\\n+     /* don't delete the hfont if we're using the one passed in to us */\\n+     f->delete_scaled_hfont = !f->scaled_hfont;\\n+ \\n+     cairo_matrix_multiply (&scale, font_matrix, ctm);\\n+     _compute_transform (f, &scale);\\n+ \\n+     status = _cairo_scaled_font_init (&f->base, font_face,\\n+ \\t\\t\\t\\t      font_matrix, ctm, options,\\n+ \\t\\t\\t\\t      &cairo_win32_scaled_font_backend);\\n++    if (status) {\\n++\\tfree (f);\\n++\\treturn NULL;\\n++    }\\n+ \\n+-    if (status == CAIRO_STATUS_SUCCESS)\\n+-\\tstatus = _cairo_win32_scaled_font_set_metrics (f);\\n+-\\n++    status = _cairo_win32_scaled_font_set_metrics (f);\\n+     if (status) {\\n+-\\tcairo_scaled_font_destroy (&f->base);\\n++\\t_cairo_scaled_font_fini (f);\\n++\\tfree (f);\\n+ \\treturn NULL;\\n+     }\\n+ \\n+     return &f->base;\\n+ }\\n+ \\n+ static cairo_status_t\\n+ _win32_scaled_font_set_world_transform (cairo_win32_scaled_font_t *scaled_font,\\n+ \\t\\t\\t\\t\\tHDC                        hdc)\\n+ {\\n+     XFORM xform;\\n+ \\n\""}