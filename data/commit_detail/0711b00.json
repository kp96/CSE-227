{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0711b00\""},"diff":"\"0711b00 Create a JSClass hook to allow object classes to easily support custom iteration without having to override __iterator__ in a resolve hook. bug 393306, r+a=brendan\\ndiff --git a/js/src/jsapi.h b/js/src/jsapi.h\\nindex 937562a..e80b715 100644\\n--- a/js/src/jsapi.h\\n+++ b/js/src/jsapi.h\\n@@ -1214,11 +1214,11 @@ struct JSExtendedClass {\\n     JSEqualityOp        equality;\\n     JSObjectOp          outerObject;\\n     JSObjectOp          innerObject;\\n+    JSIteratorOp        iteratorObject;\\n     void                (*reserved0)();\\n     void                (*reserved1)();\\n     void                (*reserved2)();\\n     void                (*reserved3)();\\n-    void                (*reserved4)();\\n };\\n \\n #define JSCLASS_HAS_PRIVATE             (1<<0)  /* objects have private slot */\\n@@ -1287,7 +1287,7 @@ struct JSExtendedClass {\\n \\n /* Initializer for unused members of statically initialized JSClass structs. */\\n #define JSCLASS_NO_OPTIONAL_MEMBERS     0,0,0,0,0,0,0,0\\n-#define JSCLASS_NO_RESERVED_MEMBERS     0,0,0,0,0\\n+#define JSCLASS_NO_RESERVED_MEMBERS     0,0,0,0\\n \\n /* For detailed comments on these function pointer types, see jspubtd.h. */\\n struct JSObjectOps {\\ndiff --git a/js/src/jsiter.c b/js/src/jsiter.c\\nindex 43dbfe6..8fe22ed 100644\\n--- a/js/src/jsiter.c\\n+++ b/js/src/jsiter.c\\n@@ -334,6 +334,8 @@ js_ValueToIterator(JSContext *cx, uintN flags, jsval *vp)\\n     JSObject *obj;\\n     JSTempValueRooter tvr;\\n     JSAtom *atom;\\n+    JSClass *clasp;\\n+    JSExtendedClass *xclasp;\\n     JSBool ok;\\n     JSObject *iterobj;\\n     jsval arg;\\n@@ -370,47 +372,60 @@ js_ValueToIterator(JSContext *cx, uintN flags, jsval *vp)\\n     JS_ASSERT(obj);\\n     JS_PUSH_TEMP_ROOT_OBJECT(cx, obj, &tvr);\\n \\n-    atom = cx->runtime->atomState.iteratorAtom;\\n-#if JS_HAS_XML_SUPPORT\\n-    if (OBJECT_IS_XML(cx, obj)) {\\n-        if (!js_GetXMLFunction(cx, obj, ATOM_TO_JSID(atom), vp))\\n+    clasp = OBJ_GET_CLASS(cx, obj);\\n+    if ((clasp->flags & JSCLASS_IS_EXTENDED) &&\\n+        (xclasp = (JSExtendedClass *) clasp)->iteratorObject) {\\n+        iterobj = xclasp->iteratorObject(cx, obj, !(flags & JSITER_FOREACH));\\n+        if (!iterobj)\\n             goto bad;\\n-    } else\\n+        *vp = OBJECT_TO_JSVAL(iterobj);\\n+    } else {\\n+        atom = cx->runtime->atomState.iteratorAtom;\\n+#if JS_HAS_XML_SUPPORT\\n+        if (OBJECT_IS_XML(cx, obj)) {\\n+            if (!js_GetXMLFunction(cx, obj, ATOM_TO_JSID(atom), vp))\\n+                goto bad;\\n+        } else\\n #endif\\n-    {\\n-        if (!OBJ_GET_PROPERTY(cx, obj, ATOM_TO_JSID(atom), vp))\\n-            goto bad;\\n-    }\\n+        {\\n+            if (!OBJ_GET_PROPERTY(cx, obj, ATOM_TO_JSID(atom), vp))\\n+                goto bad;\\n+        }\\n \\n-    if (JSVAL_IS_VOID(*vp)) {\\n-      default_iter:\\n-        /*\\n-         * Fail over to the default enumerating native iterator.\\n-         *\\n-         * Create iterobj with a NULL parent to ensure that we use the correct\\n-         * scope chain to lookup the iterator's constructor. Since we use the\\n-         * parent slot to keep track of the iterable, we must fix it up after.\\n-         */\\n-        iterobj = js_NewObject(cx, &js_IteratorClass, NULL, NULL);\\n-        if (!iterobj)\\n-            goto bad;\\n+        if (JSVAL_IS_VOID(*vp)) {\\n+          default_iter:\\n+            /*\\n+             * Fail over to the default enumerating native iterator.\\n+             *\\n+             * Create iterobj with a NULL parent to ensure that we use the\\n+             * correct scope chain to lookup the iterator's constructor. Since\\n+             * we use the parent slot to keep track of the iterable, we must\\n+             * fix it up after.\\n+             */\\n+            iterobj = js_NewObject(cx, &js_IteratorClass, NULL, NULL);\\n+            if (!iterobj)\\n+                goto bad;\\n \\n-        /* Store iterobj in *vp to protect it from GC (callers must root vp). */\\n-        *vp = OBJECT_TO_JSVAL(iterobj);\\n+            /* Store in *vp to protect it from GC (callers must root vp). */\\n+            *vp = OBJECT_TO_JSVAL(iterobj);\\n \\n-        if (!InitNativeIterator(cx, iterobj, obj, flags))\\n-            goto bad;\\n-    } else {\\n-        arg = BOOLEAN_TO_JSVAL((flags & JSITER_FOREACH) == 0);\\n-        if (!js_InternalInvoke(cx, obj, *vp, JSINVOKE_ITERATOR, 1, &arg, vp))\\n-            goto bad;\\n-        if (JSVAL_IS_PRIMITIVE(*vp)) {\\n-            const char *printable = js_AtomToPrintableString(cx, atom);\\n-            if (printable) {\\n-                js_ReportValueError2(cx, JSMSG_BAD_ITERATOR_RETURN,\\n-                                     JSDVG_SEARCH_STACK, *vp, NULL, printable);\\n+            if (!InitNativeIterator(cx, iterobj, obj, flags))\\n+                goto bad;\\n+        } else {\\n+            arg = BOOLEAN_TO_JSVAL((flags & JSITER_FOREACH) == 0);\\n+            if (!js_InternalInvoke(cx, obj, *vp, JSINVOKE_ITERATOR, 1, &arg,\\n+                                   vp)) {\\n+                goto bad;\\n+            }\\n+            if (JSVAL_IS_PRIMITIVE(*vp)) {\\n+                const char *printable = js_AtomToPrintableString(cx, atom);\\n+                if (printable) {\\n+                    js_ReportValueError2(cx, JSMSG_BAD_ITERATOR_RETURN,\\n+                                         JSDVG_SEARCH_STACK, *vp, NULL,\\n+                                         printable);\\n+                }\\n+                goto bad;\\n             }\\n-            goto bad;\\n         }\\n     }\\n \\ndiff --git a/js/src/jspubtd.h b/js/src/jspubtd.h\\nindex f72b5b3..6375703 100644\\n--- a/js/src/jspubtd.h\\n+++ b/js/src/jspubtd.h\\n@@ -525,6 +525,14 @@ typedef JSObject *\\n (* JS_DLL_CALLBACK JSObjectOp)(JSContext *cx, JSObject *obj);\\n \\n /*\\n+ * Hook that creates an iterator object for a given object. Returns the\\n+ * iterator object or null if an error or exception was thrown on cx.\\n+ */\\n+typedef JSObject *\\n+(* JS_DLL_CALLBACK JSIteratorOp)(JSContext *cx, JSObject *obj,\\n+                                 JSBool keysonly);\\n+\\n+/*\\n  * A generic type for functions taking a context, object, and property, with\\n  * no return value.  Used by JSObjectOps.dropProperty currently (see above,\\n  * JSDefinePropOp and JSLookupPropOp, for the object-locking protocol in which\\n\""}