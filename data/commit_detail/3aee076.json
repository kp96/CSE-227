{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas3aee076\""},"diff":"\"3aee076 fix window maximizing/resizing and visual corruption on resize. only report native size events, don't kick off a nested resize. b=396345 r=bent sr=roc a=roc\\ndiff --git a/widget/src/cocoa/nsCocoaWindow.mm b/widget/src/cocoa/nsCocoaWindow.mm\\nindex 94221ce..131b817 100644\\n--- a/widget/src/cocoa/nsCocoaWindow.mm\\n+++ b/widget/src/cocoa/nsCocoaWindow.mm\\n@@ -71,17 +71,6 @@ NS_IMPL_ISUPPORTS_INHERITED1(nsCocoaWindow, Inherited, nsPIWidgetCocoa)\\n // true *only when the sheet is actually showing*. Choose your test wisely.\\n \\n \\n-// returns the height of the title bar for a given cocoa NSWindow\\n-static float TitleBarHeightForWindow(NSWindow* aWindow)\\n-{\\n-  NS_ASSERTION(aWindow, \\\"Must have a window to calculate a title bar height!\\\");\\n-  \\n-  NSRect frameRect = [aWindow frame];\\n-  NSRect contentRect = [aWindow contentRectForFrameRect:frameRect];\\n-  return (frameRect.size.height - contentRect.size.height);\\n-}\\n-\\n-\\n // roll up any popup windows\\n static void RollUpPopups()\\n {\\n@@ -752,6 +741,9 @@ NS_IMETHODIMP nsCocoaWindow::Resize(PRInt32 aX, PRInt32 aY, PRInt32 aWidth, PRIn\\n \\n NS_IMETHODIMP nsCocoaWindow::Resize(PRInt32 aWidth, PRInt32 aHeight, PRBool aRepaint)\\n {\\n+  if (IsResizing())\\n+    return NS_OK;\\n+\\n   if (mWindow) {\\n     NSRect newFrame = [mWindow frame];\\n \\n@@ -768,14 +760,8 @@ NS_IMETHODIMP nsCocoaWindow::Resize(PRInt32 aWidth, PRInt32 aHeight, PRBool aRep\\n     StopResizing();\\n   }\\n \\n-  // report the actual size of the window because it can be restricted\\n-  NSRect finalWindowFrame = [mWindow contentRectForFrameRect:[mWindow frame]];\\n-  mBounds.width  = (nscoord)finalWindowFrame.size.width;\\n-  mBounds.height = (nscoord)finalWindowFrame.size.height;\\n-\\n-  // tell gecko to update all the child widgets\\n   ReportSizeEvent();\\n-  \\n+\\n   return NS_OK;\\n }\\n \\n@@ -952,13 +938,17 @@ nsCocoaWindow::DispatchEvent(nsGUIEvent* event, nsEventStatus& aStatus)\\n void\\n nsCocoaWindow::ReportSizeEvent()\\n {\\n+  NSRect windowFrame = [mWindow contentRectForFrameRect:[mWindow frame]];\\n+  mBounds.width  = nscoord(windowFrame.size.width);\\n+  mBounds.height = nscoord(windowFrame.size.height);\\n+\\n   nsSizeEvent sizeEvent(PR_TRUE, NS_SIZE, this);\\n   sizeEvent.time = PR_IntervalNow();\\n \\n   sizeEvent.windowSize = &mBounds;\\n   sizeEvent.mWinWidth  = mBounds.width;\\n   sizeEvent.mWinHeight = mBounds.height;\\n-  \\n+\\n   nsEventStatus status = nsEventStatus_eIgnore;\\n   DispatchEvent(&sizeEvent, status);\\n }\\n@@ -1126,13 +1116,10 @@ gfxASurface* nsCocoaWindow::GetThebesSurface()\\n \\n - (void)windowDidResize:(NSNotification *)aNotification\\n {\\n-  if (mGeckoWindow->IsResizing())\\n+  if (!mGeckoWindow || mGeckoWindow->IsResizing())\\n     return;\\n-  \\n-  // Gecko already compensates for the title bar, so we have to strip it out here.\\n-  NSRect frameRect = [[[aNotification object] contentView] frame];\\n-  mGeckoWindow->Resize(static_cast<PRInt32>(frameRect.size.width),\\n-                       static_cast<PRInt32>(frameRect.size.height), PR_TRUE);\\n+\\n+  mGeckoWindow->ReportSizeEvent();\\n }\\n \\n \\n\""}