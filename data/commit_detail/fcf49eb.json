{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basfcf49eb\""},"diff":"\"fcf49eb Bug 395249. switch nsSessionStartup to XPCOMUtils. r=dietrich, a=mconnor\\ndiff --git a/browser/components/sessionstore/src/nsSessionStartup.js b/browser/components/sessionstore/src/nsSessionStartup.js\\nindex 15bfa5b..8030351 100644\\n--- a/browser/components/sessionstore/src/nsSessionStartup.js\\n+++ b/browser/components/sessionstore/src/nsSessionStartup.js\\n@@ -1,75 +1,74 @@\\n-/* ***** BEGIN LICENSE BLOCK *****\\n- * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n- *\\n- * The contents of this file are subject to the Mozilla Public License Version\\n- * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n- * the License. You may obtain a copy of the License at\\n- * http://www.mozilla.org/MPL/\\n- *\\n- * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n- * for the specific language governing rights and limitations under the\\n- * License.\\n- *\\n- * The Original Code is the nsSessionStore component.\\n- *\\n- * The Initial Developer of the Original Code is\\n- * Simon Bünzli <zeniko@gmail.com>\\n- * Portions created by the Initial Developer are Copyright (C) 2006\\n- * the Initial Developer. All Rights Reserved.\\n- *\\n- * Contributor(s):\\n- *   Dietrich Ayala <autonome@gmail.com>\\n- *\\n- * Alternatively, the contents of this file may be used under the terms of\\n- * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n- * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n- * in which case the provisions of the GPL or the LGPL are applicable instead\\n- * of those above. If you wish to allow use of your version of this file only\\n- * under the terms of either the GPL or the LGPL, and not to allow others to\\n- * use your version of this file under the terms of the MPL, indicate your\\n- * decision by deleting the provisions above and replace them with the notice\\n- * and other provisions required by the GPL or the LGPL. If you do not delete\\n- * the provisions above, a recipient may use your version of this file under\\n- * the terms of any one of the MPL, the GPL or the LGPL.\\n- *\\n- * ***** END LICENSE BLOCK ***** */\\n+/* \\n+# ***** BEGIN LICENSE BLOCK *****\\n+# * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+# *\\n+# * The contents of this file are subject to the Mozilla Public License Version\\n+# * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+# * the License. You may obtain a copy of the License at\\n+# * http://www.mozilla.org/MPL/\\n+# *\\n+# * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+# * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+# * for the specific language governing rights and limitations under the\\n+# * License.\\n+# *\\n+# * The Original Code is the nsSessionStore component.\\n+# *\\n+# * The Initial Developer of the Original Code is\\n+# * Simon Bünzli <zeniko@gmail.com>\\n+# * Portions created by the Initial Developer are Copyright (C) 2006\\n+# * the Initial Developer. All Rights Reserved.\\n+# *\\n+# * Contributor(s):\\n+# *   Dietrich Ayala <autonome@gmail.com>\\n+# *\\n+# * Alternatively, the contents of this file may be used under the terms of\\n+# * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+# * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+# * in which case the provisions of the GPL or the LGPL are applicable instead\\n+# * of those above. If you wish to allow use of your version of this file only\\n+# * under the terms of either the GPL or the LGPL, and not to allow others to\\n+# * use your version of this file under the terms of the MPL, indicate your\\n+# * decision by deleting the provisions above and replace them with the notice\\n+# * and other provisions required by the GPL or the LGPL. If you do not delete\\n+# * the provisions above, a recipient may use your version of this file under\\n+# * the terms of any one of the MPL, the GPL or the LGPL.\\n+# *\\n+# * ***** END LICENSE BLOCK ***** \\n+*/\\n \\n /**\\n- * Session Storage and Restoration\\n- * \\n- * Overview\\n- * This service reads user's session file at startup, and makes a determination \\n- * as to whether the session should be restored. It will restore the session \\n- * under the circumstances described below.\\n- * \\n- * Crash Detection\\n- * The session file stores a session.state property, that \\n- * indicates whether the browser is currently running. When the browser shuts \\n- * down, the field is changed to \\\"stopped\\\". At startup, this field is read, and\\n- * if it's value is \\\"running\\\", then it's assumed that the browser had previously\\n- * crashed, or at the very least that something bad happened, and that we should\\n- * restore the session.\\n- * \\n- * Forced Restarts\\n- * In the event that a restart is required due to application update or extension\\n- * installation, set the browser.sessionstore.resume_session_once pref to true,\\n- * and the session will be restored the next time the browser starts.\\n- * \\n- * Always Resume\\n- * This service will always resume the session if the integer pref \\n- * browser.startup.page is set to 3.\\n- */\\n+# * Session Storage and Restoration\\n+# * \\n+# * Overview\\n+# * This service reads user's session file at startup, and makes a determination \\n+# * as to whether the session should be restored. It will restore the session \\n+# * under the circumstances described below.\\n+# * \\n+# * Crash Detection\\n+# * The session file stores a session.state property, that \\n+# * indicates whether the browser is currently running. When the browser shuts \\n+# * down, the field is changed to \\\"stopped\\\". At startup, this field is read, and\\n+# * if it's value is \\\"running\\\", then it's assumed that the browser had previously\\n+# * crashed, or at the very least that something bad happened, and that we should\\n+# * restore the session.\\n+# * \\n+# * Forced Restarts\\n+# * In the event that a restart is required due to application update or extension\\n+# * installation, set the browser.sessionstore.resume_session_once pref to true,\\n+# * and the session will be restored the next time the browser starts.\\n+# * \\n+# * Always Resume\\n+# * This service will always resume the session if the integer pref \\n+# * browser.startup.page is set to 3.\\n+*/\\n \\n /* :::::::: Constants and Helpers ::::::::::::::: */\\n \\n const Cc = Components.classes;\\n const Ci = Components.interfaces;\\n const Cr = Components.results;\\n-\\n-const CID = Components.ID(\\\"{ec7a6c20-e081-11da-8ad9-0800200c9a66}\\\");\\n-const CONTRACT_ID = \\\"@mozilla.org/browser/sessionstartup;1\\\";\\n-const CLASS_NAME = \\\"Browser Session Startup Service\\\";\\n+Components.utils.import(\\\"resource://gre/modules/XPCOMUtils.jsm\\\");\\n \\n const STATE_RUNNING_STR = \\\"running\\\";\\n \\n@@ -341,84 +340,24 @@ SessionStartup.prototype = {\\n     return null;\\n   },\\n \\n-/* ........ QueryInterface .............. */\\n-\\n-  QueryInterface: function(aIID) {\\n-    if (!aIID.equals(Ci.nsISupports) && !aIID.equals(Ci.nsIObserver) && \\n-      !aIID.equals(Ci.nsISupportsWeakReference) && \\n-      !aIID.equals(Ci.nsISessionStartup)) {\\n-      Components.returnCode = Cr.NS_ERROR_NO_INTERFACE;\\n-      return null;\\n-    }\\n-    \\n-    return this;\\n-  }\\n-};\\n-\\n-/* :::::::: Service Registration & Initialization ::::::::::::::: */\\n-\\n-/* ........ nsIModule .............. */\\n-\\n-const SessionStartupModule = {\\n-\\n-  getClassObject: function(aCompMgr, aCID, aIID) {\\n-    if (aCID.equals(CID)) {\\n-      return SessionStartupFactory;\\n-    }\\n-    \\n-    Components.returnCode = Cr.NS_ERROR_NOT_REGISTERED;\\n-    return null;\\n-  },\\n-\\n-  registerSelf: function(aCompMgr, aFileSpec, aLocation, aType) {\\n-    aCompMgr.QueryInterface(Ci.nsIComponentRegistrar);\\n-    aCompMgr.registerFactoryLocation(CID, CLASS_NAME, CONTRACT_ID, aFileSpec, aLocation, aType);\\n-\\n-    var catMan = Cc[\\\"@mozilla.org/categorymanager;1\\\"].\\n-                 getService(Ci.nsICategoryManager);\\n-    catMan.addCategoryEntry(\\\"app-startup\\\", CLASS_NAME, \\\"service,\\\" + CONTRACT_ID, true, true);\\n-  },\\n-\\n-  unregisterSelf: function(aCompMgr, aLocation, aType) {\\n-    aCompMgr.QueryInterface(Ci.nsIComponentRegistrar);\\n-    aCompMgr.unregisterFactoryLocation(CID, aLocation);\\n-\\n-    var catMan = Cc[\\\"@mozilla.org/categorymanager;1\\\"].\\n-                 getService(Ci.nsICategoryManager);\\n-    catMan.deleteCategoryEntry( \\\"app-startup\\\", \\\"service,\\\" + CONTRACT_ID, true);\\n-  },\\n-\\n-  canUnload: function(aCompMgr) {\\n-    return true;\\n-  }\\n-}\\n-\\n-/* ........ nsIFactory .............. */\\n+  /* ........ QueryInterface .............. */\\n+  QueryInterface : XPCOMUtils.generateQI([Ci.nsIObserver,\\n+                                          Ci.nsISupportsWeakReference,\\n+                                          Ci.nsISessionStartup]),\\n+  classDescription: \\\"Browser Session Startup Service\\\",\\n+  classID:          Components.ID(\\\"{ec7a6c20-e081-11da-8ad9-0800200c9a66}\\\"),\\n+  contractID:       \\\"@mozilla.org/browser/sessionstartup;1\\\",\\n \\n-const SessionStartupFactory = {\\n+  // get this contractID registered for certain categories via XPCOMUtils\\n+  _xpcom_categories: [\\n+    // make ourselves a startup observer\\n+    { category: \\\"app-startup\\\", service: true }\\n+  ]\\n \\n-  createInstance: function(aOuter, aIID) {\\n-    if (aOuter != null) {\\n-      Components.returnCode = Cr.NS_ERROR_NO_AGGREGATION;\\n-      return null;\\n-    }\\n-    \\n-    return (new SessionStartup()).QueryInterface(aIID);\\n-  },\\n-\\n-  lockFactory: function(aLock) { },\\n-\\n-  QueryInterface: function(aIID) {\\n-    if (!aIID.equals(Ci.nsISupports) && !aIID.equals(Ci.nsIModule) &&\\n-        !aIID.equals(Ci.nsIFactory) && !aIID.equals(Ci.nsISessionStartup)) {\\n-      Components.returnCode = Cr.NS_ERROR_NO_INTERFACE;\\n-      return null;\\n-    }\\n-    \\n-    return this;\\n-  }\\n };\\n \\n-function NSGetModule(aComMgr, aFileSpec) {\\n-  return SessionStartupModule;\\n+//module initialization\\n+function NSGetModule(aCompMgr, aFileSpec) {\\n+  return XPCOMUtils.generateModule([SessionStartup]);\\n }\\n+\\n\""}