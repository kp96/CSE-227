{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Base9fe109\""},"diff":"\"e9fe109 Bug 396232 - one sample.config for all platforms.  a=anodelman, r=bhearsum\\ndiff --git a/testing/performance/talos/config.py b/testing/performance/talos/config.py\\ndeleted file mode 100644\\nindex 5c4602d..0000000\\n--- a/testing/performance/talos/config.py\\n+++ /dev/null\\n@@ -1,55 +0,0 @@\\n-# ***** BEGIN LICENSE BLOCK *****\\n-# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n-#\\n-# The contents of this file are subject to the Mozilla Public License Version\\n-# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n-# the License. You may obtain a copy of the License at\\n-# http://www.mozilla.org/MPL/\\n-#\\n-# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n-# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n-# for the specific language governing rights and limitations under the\\n-# License.\\n-#\\n-# The Original Code is standalone Firefox Windows performance test.\\n-#\\n-# The Initial Developer of the Original Code is Google Inc.\\n-# Portions created by the Initial Developer are Copyright (C) 2006\\n-# the Initial Developer. All Rights Reserved.\\n-#\\n-# Contributor(s):\\n-#   Annie Sullivan <annie.sullivan@gmail.com> (original author)\\n-#   Alice Nodelman <anodelman@mozilla.com>\\n-#\\n-# Alternatively, the contents of this file may be used under the terms of\\n-# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n-# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n-# in which case the provisions of the GPL or the LGPL are applicable instead\\n-# of those above. If you wish to allow use of your version of this file only\\n-# under the terms of either the GPL or the LGPL, and not to allow others to\\n-# use your version of this file under the terms of the MPL, indicate your\\n-# decision by deleting the provisions above and replace them with the notice\\n-# and other provisions required by the GPL or the LGPL. If you do not delete\\n-# the provisions above, a recipient may use your version of this file under\\n-# the terms of any one of the MPL, the GPL or the LGPL.\\n-#\\n-# ***** END LICENSE BLOCK *****\\n-\\n-\\\"\\\"\\\"A list of constants containing the paths to programs and files\\n-   needed by the performance testing scripts.\\n-\\\"\\\"\\\"\\n-__author__ = 'annie.sullivan@gmail.com (Annie Sullivan)'\\n-\\n-\\\"\\\"\\\"The path to the file url to load when initializing/collecting information from the browser\\\"\\\"\\\"\\n-INIT_URL = 'file:///c:/mozilla/testing/performance/talos/getInfo.html'\\n-\\n-\\\"\\\"\\\"Dump results locally to csv\\\"\\\"\\\"\\n-TO_CSV = 0\\n-CSV_FILE = r'c:\\\\mozilla\\\\testing\\\\performance\\\\talos\\\\output\\\\out'\\n-\\\"\\\"\\\"URL for the results server\\\"\\\"\\\"\\n-TO_GRAPH_SERVER = 1\\n-RESULTS_SERVER = 'graphserver.url.here'\\n-RESULTS_LINK = '/bulk.cgi'\\n-\\n-\\\"\\\"\\\"Enable/disable debugging output\\\"\\\"\\\"\\n-DEBUG = 0\\ndiff --git a/testing/performance/talos/ffprocess.py b/testing/performance/talos/ffprocess.py\\nindex 854d314..2435afa 100755\\n--- a/testing/performance/talos/ffprocess.py\\n+++ b/testing/performance/talos/ffprocess.py\\n@@ -47,8 +47,6 @@ import re\\n import time\\n import subprocess\\n \\n-import config\\n-\\n if platform.system() == \\\"Linux\\\":\\n     from ffprocess_linux import *\\n elif platform.system() == \\\"Windows\\\":\\ndiff --git a/testing/performance/talos/ffprocess_linux.py b/testing/performance/talos/ffprocess_linux.py\\nindex 7a9154d..bf7e8f2 100644\\n--- a/testing/performance/talos/ffprocess_linux.py\\n+++ b/testing/performance/talos/ffprocess_linux.py\\n@@ -40,7 +40,6 @@ import signal\\n import os\\n from select import select\\n \\n-import config\\n \\n \\n def GenerateFirefoxCommandLine(firefox_path, profile_dir, url):\\ndiff --git a/testing/performance/talos/ffprocess_mac.py b/testing/performance/talos/ffprocess_mac.py\\nindex 66b5370..e2ff3b9 100644\\n--- a/testing/performance/talos/ffprocess_mac.py\\n+++ b/testing/performance/talos/ffprocess_mac.py\\n@@ -40,7 +40,6 @@ import subprocess\\n import signal\\n import os\\n import time\\n-import config\\n from select import select\\n \\n \\ndiff --git a/testing/performance/talos/ffprocess_win32.py b/testing/performance/talos/ffprocess_win32.py\\nindex 2cff6b3..83818e5 100644\\n--- a/testing/performance/talos/ffprocess_win32.py\\n+++ b/testing/performance/talos/ffprocess_win32.py\\n@@ -41,8 +41,6 @@ import win32pdhutil\\n import win32pipe\\n import msvcrt\\n \\n-import config\\n-\\n \\n def GenerateFirefoxCommandLine(firefox_path, profile_dir, url):\\n   \\\"\\\"\\\"Generates the command line for a process to run Firefox\\ndiff --git a/testing/performance/talos/ffsetup.py b/testing/performance/talos/ffsetup.py\\nindex aa2dec8..bf62bc1 100644\\n--- a/testing/performance/talos/ffsetup.py\\n+++ b/testing/performance/talos/ffsetup.py\\n@@ -53,7 +53,6 @@ import glob\\n \\n import utils\\n import ffprocess\\n-import config\\n \\n if platform.system() == \\\"Linux\\\":\\n     from ffprofile_unix import *\\n@@ -141,7 +140,7 @@ def InstallInBrowser(firefox_path, dir_path):\\n       else:\\n           utils.debug(\\\"WARNING: file already installed (\\\" + fromfile + \\\")\\\")\\n \\n-def InitializeNewProfile(firefox_path, profile_dir):\\n+def InitializeNewProfile(firefox_path, profile_dir, init_url):\\n   \\\"\\\"\\\"Runs Firefox with the new profile directory, to negate any performance\\n      hit that could occur as a result of starting up with a new profile.  \\n      Also kills the \\\"extra\\\" Firefox that gets spawned the first time Firefox\\n@@ -153,7 +152,7 @@ def InitializeNewProfile(firefox_path, profile_dir):\\n   \\\"\\\"\\\"\\n   PROFILE_REGEX = re.compile('__metrics(.*)__metrics', re.DOTALL|re.MULTILINE)\\n   res = 1\\n-  cmd = ffprocess.GenerateFirefoxCommandLine(firefox_path, profile_dir, config.INIT_URL)\\n+  cmd = ffprocess.GenerateFirefoxCommandLine(firefox_path, profile_dir, init_url)\\n   (match, timed_out) = ffprocess.RunProcessAndWaitForOutput(cmd,\\n                                                               'firefox',\\n                                                               PROFILE_REGEX,\\ndiff --git a/testing/performance/talos/run_tests.py b/testing/performance/talos/run_tests.py\\nindex 0b60977..685bdd6 100755\\n--- a/testing/performance/talos/run_tests.py\\n+++ b/testing/performance/talos/run_tests.py\\n@@ -57,9 +57,9 @@ import os\\n import string\\n import socket\\n socket.setdefaulttimeout(480)\\n+import getopt\\n \\n import utils\\n-import config\\n import post_file\\n import ttest\\n \\n@@ -83,11 +83,11 @@ def process_Request(post):\\n         str += line.split(\\\":\\\")[3] + \\\":\\\" + shortNames(line.split(\\\":\\\")[1]) + \\\":\\\" + line.split(\\\":\\\")[2] + '\\\\n'\\n   return str\\n \\n-def send_to_csv(results):\\n+def send_to_csv(csv_file, results):\\n   import csv\\n   for res in results:\\n     browser_dump, counter_dump = results[res]\\n-    writer = csv.writer(open(config.CSV_FILE + '_' +  res, \\\"wb\\\"))\\n+    writer = csv.writer(open(csv_file + '_' +  res, \\\"wb\\\"))\\n     if res == 'ts':\\n       i = 0\\n       writer.writerow(['i', 'val'])\\n@@ -110,19 +110,19 @@ def send_to_csv(results):\\n           i += 1\\n     for cd in counter_dump:\\n       for count_type in cd:\\n-        writer = csv.writer(open(config.CSV_FILE + '_' + res + '_' + count_type, \\\"wb\\\"))\\n+        writer = csv.writer(open(csv_file + '_' + res + '_' + count_type, \\\"wb\\\"))\\n         writer.writerow(['i', 'value'])\\n         i = 0\\n         for val in cd[count_type]:\\n           writer.writerow([i, val])\\n           i += 1\\n \\n-def post_chunk(id, filename):\\n+def post_chunk(results_server, results_link, id, filename):\\n   tmpf = open(filename, \\\"r\\\")\\n   file_data = tmpf.read()\\n   while True:\\n     try:\\n-      ret = post_file.post_multipart(config.RESULTS_SERVER, config.RESULTS_LINK, [(\\\"key\\\", \\\"value\\\")], [(\\\"filename\\\", filename, file_data)])\\n+      ret = post_file.post_multipart(results_server, results_link, [(\\\"key\\\", \\\"value\\\")], [(\\\"filename\\\", filename, file_data)])\\n     except IOError:\\n       print \\\"FAIL: IOError on sending data to the graph server\\\"\\n     else:\\n@@ -144,7 +144,7 @@ def chunk_list(val_list):\\n     val_list = val_list[end:len(val_list)]\\n   return chunks\\n \\n-def send_to_graph(title, date, browser_config, results):\\n+def send_to_graph(results_server, results_link, title, date, browser_config, results):\\n   tbox = title\\n   url_format = \\\"http://%s/%s\\\"\\n   link_format= \\\"<a href = \\\\\\\"%s\\\\\\\">%s</a>\\\"\\n@@ -185,7 +185,7 @@ def send_to_graph(title, date, browser_config, results):\\n           i += 1\\n     tmpf.flush()\\n     tmpf.close()\\n-    links += post_chunk(res, filename)\\n+    links += post_chunk(results_server, results_link, res, filename)\\n     os.remove(filename)\\n     for cd in counter_dump:\\n       for count_type in cd:\\n@@ -201,7 +201,7 @@ def send_to_graph(title, date, browser_config, results):\\n               i += 1\\n           tmpf.flush()\\n           tmpf.close()\\n-          chunk_link = post_chunk('%s_%s (%d values)' % (res, count_type, len(chunk)), filename)\\n+          chunk_link = post_chunk(results_server, results_link, '%s_%s (%d values)' % (res, count_type, len(chunk)), filename)\\n           os.remove(filename)\\n         links += chunk_link\\n     \\n@@ -215,7 +215,7 @@ def send_to_graph(title, date, browser_config, results):\\n       linkName += \\\"_T: \\\" + values[2]\\n     else:\\n       linkName += \\\"_1\\\"\\n-    url = url_format % (config.RESULTS_SERVER, values[0],)\\n+    url = url_format % (results_server, values[0],)\\n     link = link_format % (url, linkName,)\\n     print \\\"RETURN: \\\" + link\\n \\n@@ -230,6 +230,9 @@ def test_file(filename):\\n   tests = []\\n   title = ''\\n   testdate = ''\\n+  csv_file = ''\\n+  results_server = ''\\n+  results_link = ''\\n   results = {}\\n   \\n   # Read in the profile info from the YAML config file\\n@@ -241,6 +244,12 @@ def test_file(filename):\\n       title = yaml_config[item]\\n     elif item == 'testdate':\\n       testdate = yaml_config[item]\\n+    elif item == 'csv_file':\\n+       csv_file = os.path.normpath(yaml_config[item])\\n+    elif item == 'results_server':\\n+       results_server = yaml_config[item]\\n+    elif item == 'results_link' :\\n+       results_link = yaml_config[item]\\n   browser_config = {'preferences'  : yaml_config['preferences'],\\n                     'extensions'   : yaml_config['extensions'],\\n                     'firefox'      : yaml_config['firefox'],\\n@@ -248,7 +257,13 @@ def test_file(filename):\\n                     'buildid'      : yaml_config['buildid'],\\n                     'profile_path' : yaml_config['profile_path'],\\n                     'env'          : yaml_config['env'],\\n-                    'dirs'         : yaml_config['dirs']}\\n+                    'dirs'         : yaml_config['dirs'],\\n+                    'init_url'     : yaml_config['init_url']}\\n+  #normalize paths to work accross platforms\\n+  browser_config['firefox'] = os.path.normpath(browser_config['firefox'])\\n+  browser_config['profile_path'] = os.path.normpath(browser_config['profile_path'])\\n+  for dir in browser_config['dirs']:\\n+    browser_config['dirs'][dir] = os.path.normpath(browser_config['dirs'][dir])\\n   tests = yaml_config['tests']\\n   config_file.close()\\n   if (testdate != ''):\\n@@ -268,16 +283,20 @@ def test_file(filename):\\n     print \\\"Completed test: \\\" + test\\n \\n   #process the results\\n-  if config.TO_GRAPH_SERVER:\\n+  if (results_server != '') and (results_link != ''):\\n     #send results to the graph server\\n-    send_to_graph(title, date, browser_config, results)\\n-  if config.TO_CSV:\\n-    send_to_csv(results)\\n+    send_to_graph(results_server, results_link, title, date, browser_config, results)\\n+  if csv_file != '':\\n+    send_to_csv(csv_file, results)\\n   \\n if __name__=='__main__':\\n-\\n+  optlist, args = getopt.getopt(sys.argv[1:], 'd', ['debug'])\\n+  for o, a in optlist:\\n+    if o in ('-d', \\\"--debug\\\"):\\n+      print 'setting debug'\\n+      utils.setdebug(1)\\n   # Read in each config file and run the tests on it.\\n-  for i in range(1, len(sys.argv)):\\n-    utils.debug(\\\"running test file \\\" + sys.argv[i])\\n-    test_file(sys.argv[i])\\n+  for arg in args:\\n+    utils.debug(\\\"running test file \\\" + arg)\\n+    test_file(arg)\\n \\ndiff --git a/testing/performance/talos/sample.config b/testing/performance/talos/sample.config\\nindex aa4a9df..0ba8b80 100755\\n--- a/testing/performance/talos/sample.config\\n+++ b/testing/performance/talos/sample.config\\n@@ -3,14 +3,23 @@\\n # The title of the report\\r\\n title: firefox_testing\\r\\n \\r\\n+#*** output options ****\\r\\n+#uncomment to turn on dump to csv option\\r\\n+#csv_file: 'output/out'\\r\\n+#comment out next two lines to disable send to graph server\\r\\n+results_server: 'url.of.graphserver'\\r\\n+results_link: '/bulk.cgi'\\r\\n+\\r\\n # Path to Firefox to test\\r\\n-firefox: C:\\\\mozilla\\\\testing\\\\performance\\\\firefox\\\\firefox.exe\\r\\n+firefox: firefox/firefox.exe\\r\\n \\r\\n branch: testbranch\\r\\n \\r\\n buildid: testbuildid\\r\\n \\r\\n-profile_path: C:\\\\mozilla\\\\testing\\\\performance\\\\talos\\\\base_profile\\r\\n+profile_path: base_profile\\r\\n+\\r\\n+init_url: getInfo.html\\r\\n \\r\\n # Preferences to set in the test (use \\\"preferences : {}\\\" for no prefs)\\r\\n preferences : \\r\\n@@ -39,8 +48,8 @@ extensions : {}\\n #any directories whose contents need to be installed in the browser before running the tests\\r\\n # this assumes that the directories themselves already exist in the firefox path\\r\\n dirs:\\r\\n-  chrome : page_load_test\\\\chrome\\r\\n-  components : page_load_test\\\\components\\r\\n+  chrome : page_load_test/chrome\\r\\n+  components : page_load_test/components\\r\\n \\r\\n # Environment variables to set during test (use env: {} for none)\\r\\n env : \\r\\n@@ -63,19 +72,22 @@ env :\\n # to see how the data passed from the browser is processed see send_to_graph and send_to_csv in run_tests.py\\r\\n tests :\\r\\n   ts :\\r\\n-    url : file:///c:/mozilla/testing/performance/talos/startup_test/startup_test.html?begin=\\r\\n+    url : startup_test/startup_test.html?begin=\\r\\n     url_mod : str(int(time.time()*1000))\\r\\n     resolution : 1 \\r\\n     cycles : 20\\r\\n-    counters : []\\r\\n+    win_counters : []\\r\\n+    unix_counters : []\\r\\n   tp: \\r\\n-    url :  '-tp c:\\\\\\\\\\\\mozilla\\\\\\\\\\\\testing\\\\\\\\\\\\performance\\\\\\\\\\\\talos\\\\\\\\\\\\page_load_test\\\\\\\\\\\\manifest.txt -tpchrome -tpformat tinderbox -tpcycles 5'\\r\\n+    url :  '-tp page_load_test/manifest.txt -tpchrome -tpformat tinderbox -tpcycles 5'\\r\\n     resolution : 1\\r\\n     cycles : 1\\r\\n-    counters : ['Working Set', 'Private Bytes', '% Processor Time']\\r\\n+    win_counters : ['Working Set', 'Private Bytes', '% Processor Time']\\r\\n+    unix_counters : [ 'Private Bytes', 'RSS']\\r\\n   tp_js: \\r\\n     url : '\\\"http://localhost/page_load_test/framecycler.html?quit=1&cycles=5\\\"'\\r\\n     resolution : 1\\r\\n     cycles : 1\\r\\n-    counters : ['Working Set', 'Private Bytes', '% Processor Time']\\r\\n+    win_counters : ['Working Set', 'Private Bytes', '% Processor Time']\\r\\n+    unix_counters : [ 'Private Bytes', 'RSS']\\r\\n   \\r\\ndiff --git a/testing/performance/talos/ttest.py b/testing/performance/talos/ttest.py\\nindex 571070c..cf32b5b 100644\\n--- a/testing/performance/talos/ttest.py\\n+++ b/testing/performance/talos/ttest.py\\n@@ -63,10 +63,13 @@ import ffsetup\\n \\n if platform.system() == \\\"Linux\\\":\\n     from cmanager_linux import *\\n+    platform_type = 'unix_'\\n elif platform.system() == \\\"Windows\\\":\\n     from cmanager_win32 import *\\n+    platform_type = 'win_'\\n elif platform.system() == \\\"Darwin\\\":\\n     from cmanager_mac import *\\n+    platform_type = 'unix_'\\n \\n \\n # Regula expression for getting results from most tests\\n@@ -89,7 +92,8 @@ def runTest(browser_config, test_config):\\n   \\\"\\\"\\\"\\n  \\n   res = 0\\n-  counters = test_config['counters']\\n+  utils.debug(\\\"operating with platform_type : \\\" + platform_type)\\n+  counters = test_config[platform_type + 'counters']\\n   resolution = test_config['resolution']\\n   all_browser_results = []\\n   all_counter_results = []\\n@@ -106,7 +110,7 @@ def runTest(browser_config, test_config):\\n   # Run Firefox once with new profile so initializing it doesn't cause\\n   # a performance hit, and the second Firefox that gets created is properly\\n   # terminated.\\n-  res = ffsetup.InitializeNewProfile(browser_config['firefox'], profile_dir)\\n+  res = ffsetup.InitializeNewProfile(browser_config['firefox'], profile_dir, browser_config['init_url'])\\n   if not res:\\n     print \\\"FAIL: couldn't initialize firefox\\\"\\n     return (res, all_browser_results, all_counter_results)\\ndiff --git a/testing/performance/talos/utils.py b/testing/performance/talos/utils.py\\nindex 904090f..071971c 100755\\n--- a/testing/performance/talos/utils.py\\n+++ b/testing/performance/talos/utils.py\\n@@ -36,23 +36,27 @@\\n \\n \\\"\\\"\\\"Utility functions\\\"\\\"\\\"\\n \\n-import config\\n import os\\n-\\n+DEBUG = 0\\n saved_environment = {}\\n \\n+def setdebug(val):\\n+  global DEBUG\\n+  DEBUG = val\\n+\\n def debug(message):\\n   \\\"\\\"\\\"Prints a debug message to the console if the DEBUG switch is turned on \\n-     in config.py\\n+     debug switch is controlled through command line switch (-d or --debug)\\n      Args:\\n        message: string containing a debugging statement\\n      \\\"\\\"\\\"\\n-  if config.DEBUG == 1:\\n+  if DEBUG == 1:\\n     print message\\n \\n def setEnvironmentVars(newVars): \\n    \\\"\\\"\\\"Sets environment variables as specified by env, an array of variables \\n-   from config.py\\\"\\\"\\\"\\n+   from sample.config\\\"\\\"\\\"\\n+   global saved_environment\\n    env = os.environ\\n    for var in newVars:\\n      # save the old values so they can be restored later:\\n@@ -65,5 +69,6 @@ def setEnvironmentVars(newVars):\\n def restoreEnvironmentVars():\\n   \\\"\\\"\\\"Restores environment variables to the state they were in before \\n   setEnvironmentVars() was last called\\\"\\\"\\\"\\n+  global saved_environment\\n   for var in saved_environment:\\n     os.environ[var] = saved_environment[var]\\n\""}