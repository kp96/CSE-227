{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas76e443f\""},"diff":"\"76e443f Bug 226735: replace modal pre-submit save password dialog with post-submit bar. r=gavin\\ndiff --git a/browser/base/content/browser.js b/browser/base/content/browser.js\\nindex 8fed3a7..f969399f 100644\\n--- a/browser/base/content/browser.js\\n+++ b/browser/base/content/browser.js\\n@@ -3471,7 +3471,17 @@ nsBrowserStatusHandler.prototype =\\n       if (newIndexOfHash != -1)\\n         newSpec = newSpec.substr(0, newSpec.indexOf(\\\"#\\\"));\\n       if (newSpec != oldSpec) {\\n-        gBrowser.getNotificationBox(selectedBrowser).removeAllNotifications(true);\\n+        // Remove all the notifications, except for those which want to\\n+        // persist across the first location change.\\n+        var nBox = gBrowser.getNotificationBox(selectedBrowser);\\n+        for (var n = nBox.allNotifications.length - 1; n >= 0; n--) {\\n+          var notify = nBox.allNotifications[n];\\n+          if (notify.ignoreFirstLocationChange)\\n+            notify.ignoreFirstLocationChange = false;\\n+          else if (!notify.ignoreLocationChangeTimeout ||\\n+            (Date.now() / 1000) > notify.ignoreLocationChangeTimeout)\\n+            nBox.removeNotification(notify);\\n+        }\\n       }\\n     }\\n     selectedBrowser.lastURI = aLocationURI;\\ndiff --git a/toolkit/components/passwordmgr/public/Makefile.in b/toolkit/components/passwordmgr/public/Makefile.in\\nindex d057a15..7680dd4 100644\\n--- a/toolkit/components/passwordmgr/public/Makefile.in\\n+++ b/toolkit/components/passwordmgr/public/Makefile.in\\n@@ -48,6 +48,7 @@ XPIDLSRCS = \\\\\\n \\t\\tnsILoginInfo.idl \\\\\\n \\t\\tnsILoginManager.idl \\\\\\n \\t\\tnsILoginManagerStorage.idl \\\\\\n+\\t\\tnsILoginManagerPrompter.idl \\\\\\n \\t\\t$(NULL)\\n \\n include $(topsrcdir)/config/rules.mk\\ndiff --git a/toolkit/components/passwordmgr/public/nsILoginManager.idl b/toolkit/components/passwordmgr/public/nsILoginManager.idl\\nindex 1a205a6..84b4a86 100644\\n--- a/toolkit/components/passwordmgr/public/nsILoginManager.idl\\n+++ b/toolkit/components/passwordmgr/public/nsILoginManager.idl\\n@@ -155,7 +155,7 @@ interface nsILoginManager : nsISupports {\\n      *        the array's .length property, and supply an dummy object for\\n      *        this out param. For example: |findLogins({}, hostname, ...)|\\n      * @param aHostname\\n-     *        The hostname to restict searches to. When looking for form\\n+     *        The hostname to restrict searches to. When looking for form\\n      *        logins, this argument should be in origin URL format, without\\n      *        a pathname. For example: \\\"http://www.site.com\\\". For protocol\\n      *        logins (http//ftp), it should be the hostname with a port\\ndiff --git a/toolkit/components/passwordmgr/public/nsILoginManagerPrompter.idl b/toolkit/components/passwordmgr/public/nsILoginManagerPrompter.idl\\nnew file mode 100644\\nindex 0000000..2087d33\\n--- /dev/null\\n+++ b/toolkit/components/passwordmgr/public/nsILoginManagerPrompter.idl\\n@@ -0,0 +1,60 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is mozilla.org code.\\n+ *\\n+ * The Initial Developer of the Original Code is Mozilla Corporation.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *  Justin Dolske <dolske@mozilla.com> (original author)\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+\\n+#include \\\"nsISupports.idl\\\"\\n+\\n+interface nsILoginInfo;\\n+interface nsIDOMWindow;\\n+\\n+[scriptable, uuid(68b3cb59-51b8-4c57-bd7f-b2ce955a593d)]\\n+\\n+interface nsILoginManagerPrompter : nsISupports {\\n+    void init(in nsIDOMWindow aWindow);\\n+\\n+    void promptToSavePassword(in nsILoginInfo aLogin);\\n+\\n+    void promptToChangePassword(in AString aUsername);\\n+\\n+    void promptToChangePasswordWithUsernames(\\n+            in PRUint32 count,\\n+            [array, size_is(count)] in wstring usernames);\\n+};\\n+%{C++\\n+\\n+#define NS_LOGINMANAGERPROMPTER_CONTRACTID \\\"@mozilla.org/login-manager/prompter/;1\\\"\\n+\\n+%}\\ndiff --git a/toolkit/components/passwordmgr/public/nsILoginManagerStorage.idl b/toolkit/components/passwordmgr/public/nsILoginManagerStorage.idl\\nindex b9e30b9..3e41b39 100644\\n--- a/toolkit/components/passwordmgr/public/nsILoginManagerStorage.idl\\n+++ b/toolkit/components/passwordmgr/public/nsILoginManagerStorage.idl\\n@@ -179,7 +179,7 @@ interface nsILoginManagerStorage : nsISupports {\\n      *        the array's .length property, and supply an dummy object for\\n      *        this out param. For example: |findLogins({}, hostname, ...)|\\n      * @param aHostname\\n-     *        The hostname to restict searches to. When looking for form\\n+     *        The hostname to restrict searches to. When looking for form\\n      *        logins, this argument should be in origin URL format, without\\n      *        a pathname. For example: \\\"http://www.site.com\\\". For protocol\\n      *        logins (http//ftp), it should be the hostname with a port\\ndiff --git a/toolkit/components/passwordmgr/src/nsLoginManager.js b/toolkit/components/passwordmgr/src/nsLoginManager.js\\nindex 0524364..87f7b61 100644\\n--- a/toolkit/components/passwordmgr/src/nsLoginManager.js\\n+++ b/toolkit/components/passwordmgr/src/nsLoginManager.js\\n@@ -65,15 +65,6 @@ LoginManager.prototype = {\\n     },\\n \\n \\n-    __promptService : null, // Prompt service for user interaction\\n-    get _promptService() {\\n-        if (!this.__promptService)\\n-            this.__promptService = Cc[\\\"@mozilla.org/embedcomp/prompt-service;1\\\"]\\n-                                        .getService(Ci.nsIPromptService2);\\n-        return this.__promptService;\\n-    },\\n-\\n-\\n     __ioService: null, // IO service for string -> nsIURI conversion\\n     get _ioService() {\\n         if (!this.__ioService)\\n@@ -93,36 +84,6 @@ LoginManager.prototype = {\\n     },\\n \\n \\n-    __strBundle : null, // String bundle for L10N\\n-    get _strBundle() {\\n-        if (!this.__strBundle) {\\n-            var bunService = Cc[\\\"@mozilla.org/intl/stringbundle;1\\\"]\\n-                                    .getService(Ci.nsIStringBundleService);\\n-            this.__strBundle = bunService.createBundle(\\n-                        \\\"chrome://passwordmgr/locale/passwordmgr.properties\\\");\\n-            if (!this.__strBundle)\\n-                throw \\\"String bundle for Login Manager not present!\\\";\\n-        }\\n-\\n-        return this.__strBundle;\\n-    },\\n-\\n-\\n-    __brandBundle : null, // String bundle for L10N\\n-    get _brandBundle() {\\n-        if (!this.__brandBundle) {\\n-            var bunService = Cc[\\\"@mozilla.org/intl/stringbundle;1\\\"]\\n-                                    .getService(Ci.nsIStringBundleService);\\n-            this.__brandBundle = bunService.createBundle(\\n-                        \\\"chrome://branding/locale/brand.properties\\\");\\n-            if (!this.__brandBundle)\\n-                throw \\\"Branding string bundle not present!\\\";\\n-        }\\n-\\n-        return this.__brandBundle;\\n-    },\\n-\\n-\\n     __storage : null, // Storage component which contains the saved logins\\n     get _storage() {\\n         if (!this.__storage) {\\n@@ -239,7 +200,7 @@ LoginManager.prototype = {\\n                 this._pwmgr.log(\\\"Caught error in onFormSubmit: \\\" + e);\\n             }\\n \\n-            return true; // Always return true, or form submt will be canceled.\\n+            return true; // Always return true, or form submit will be canceled.\\n         },\\n \\n         // nsObserver\\n@@ -657,7 +618,7 @@ LoginManager.prototype = {\\n         }\\n \\n \\n-        // Locate the username field in the form by serarching backwards\\n+        // Locate the username field in the form by searching backwards\\n         // from the first passwordfield, assume the first text field is the\\n         // username. We might not find a username field if the user is\\n         // already logged in to the site. \\n@@ -763,11 +724,17 @@ LoginManager.prototype = {\\n             return (found ? existingLogin : null);\\n         }\\n \\n+        function getPrompter(aWindow) {\\n+            var prompterSvc = Cc[\\\"@mozilla.org/login-manager/prompter;1\\\"].\\n+                            createInstance(Ci.nsILoginManagerPrompter);\\n+            prompterSvc.init(aWindow);\\n+            return prompterSvc;\\n+        }\\n \\n \\n \\n         var doc = form.ownerDocument;\\n-        var win = doc.window;\\n+        var win = doc.defaultView;\\n \\n         // If password saving is disabled (globally or for host), bail out now.\\n         if (!this._remember)\\n@@ -830,15 +797,17 @@ LoginManager.prototype = {\\n             if (logins.length == 0) {\\n                 this.log(\\\"(no logins for this host -- pwchange ignored)\\\");\\n                 return;\\n-            } else if (logins.length == 1) {\\n+            }\\n+\\n+            var prompter = getPrompter(win);\\n+\\n+            if (logins.length == 1) {\\n                 username = logins[0].username;\\n-                ok = this._promptToChangePassword(win, username)\\n+                ok = prompter.promptToChangePassword(username);\\n             } else {\\n-                var usernames = [];\\n-                logins.forEach(function(l) { usernames.push(l.username); });\\n-\\n-                [ok, username] = this._promptToChangePasswordWithUsernames(\\n-                                                                win, usernames);\\n+                var usernames = logins.map(function (l) l.username);\\n+                [ok, username] = prompter.promptToChangePasswordWithUsernames(\\n+                                                                usernames);\\n             }\\n \\n             if (!ok)\\n@@ -884,19 +853,9 @@ LoginManager.prototype = {\\n         }\\n \\n \\n-        // Prompt user to save a new login.\\n-        var userChoice = this._promptToSaveLogin(win);\\n-\\n-        if (userChoice == 2) {\\n-            this.log(\\\"Disabling \\\" + hostname + \\\" logins by user request.\\\");\\n-            this.setLoginSavingEnabled(hostname, false);\\n-        } else if (userChoice == 0) {\\n-            this.log(\\\"Saving login for \\\" + hostname);\\n-            this.addLogin(formLogin);\\n-        } else {\\n-            // userChoice == 1 --> just ignore the login.\\n-            this.log(\\\"Ignoring login.\\\");\\n-        }\\n+        // Prompt user to save login (via dialog or notification bar)\\n+        prompter = getPrompter(win);\\n+        prompter.promptToSavePassword(formLogin);\\n     },\\n \\n \\n@@ -1093,143 +1052,7 @@ LoginManager.prototype = {\\n \\n         this.log(\\\"Found a matching login, filling in password.\\\");\\n         passwordField.value = match.password;\\n-    },\\n-\\n-\\n-\\n-\\n-\\n-\\n-    /* ---------- User Prompts ---------- */\\n-\\n-\\n-\\n-\\n-    /*\\n-     * _promptToSaveLogin\\n-     *\\n-     * Called when we detect a new login in a form submission,\\n-     * asks the user what to do.\\n-     *\\n-     * Return values:\\n-     *   0 - Save the login\\n-     *   1 - Ignore the login this time\\n-     *   2 - Never save logins for this site\\n-     */\\n-    _promptToSaveLogin : function (aWindow) {\\n-        const buttonFlags = Ci.nsIPrompt.BUTTON_POS_1_DEFAULT +\\n-            (Ci.nsIPrompt.BUTTON_TITLE_IS_STRING * Ci.nsIPrompt.BUTTON_POS_0) +\\n-            (Ci.nsIPrompt.BUTTON_TITLE_IS_STRING * Ci.nsIPrompt.BUTTON_POS_1) +\\n-            (Ci.nsIPrompt.BUTTON_TITLE_IS_STRING * Ci.nsIPrompt.BUTTON_POS_2);\\n-\\n-        var brandShortName =\\n-                this._brandBundle.GetStringFromName(\\\"brandShortName\\\");\\n-\\n-        var dialogText         = this._getLocalizedString(\\n-                                        \\\"savePasswordText\\\", [brandShortName]);\\n-        var dialogTitle        = this._getLocalizedString(\\n-                                        \\\"savePasswordTitle\\\");\\n-        var neverButtonText    = this._getLocalizedString(\\n-                                        \\\"neverForSiteButtonText\\\");\\n-        var rememberButtonText = this._getLocalizedString(\\n-                                        \\\"rememberButtonText\\\");\\n-        var notNowButtonText   = this._getLocalizedString(\\n-                                        \\\"notNowButtonText\\\");\\n-\\n-        this.log(\\\"Prompting user to save/ignore login\\\");\\n-        var result = this._promptService.confirmEx(aWindow,\\n-                                            dialogTitle, dialogText,\\n-                                            buttonFlags, rememberButtonText,\\n-                                            notNowButtonText, neverButtonText,\\n-                                            null, {});\\n-        return result;\\n-    },\\n-\\n-\\n-    /*\\n-     * _promptToChangePassword\\n-     *\\n-     * Called when we think we detect a password change for an existing\\n-     * login, when the form being submitted contains multiple password\\n-     * fields.\\n-     *\\n-     * Return values:\\n-     *   true  - Update the stored password\\n-     *   false - Do not update the stored password\\n-     */\\n-    _promptToChangePassword : function (aWindow, username) {\\n-        const buttonFlags = Ci.nsIPrompt.STD_YES_NO_BUTTONS;\\n-\\n-        var dialogText  = this._getLocalizedString(\\n-                                    \\\"passwordChangeText\\\", [username]);\\n-        var dialogTitle = this._getLocalizedString(\\n-                                    \\\"passwordChangeTitle\\\");\\n-\\n-        // returns 0 for yes, 1 for no.\\n-        var result = this._promptService.confirmEx(aWindow,\\n-                                dialogTitle, dialogText, buttonFlags,\\n-                                null, null, null,\\n-                                null, {});\\n-        return !result;\\n-    },\\n-\\n-\\n-    /*\\n-     * _promptToChangePasswordWithUsernames\\n-     *\\n-     * Called when we detect a password change in a form submission, but we\\n-     * don't know which existing login (username) it's for. Asks the user\\n-     * to select a username and confirm the password change.\\n-     *\\n-     * Returns multiple paramaters:\\n-     * [0] - User's respone to the dialog\\n-     *   true  = Update the stored password\\n-     *   false = Do not update the stored password\\n-     * [1] - The username selected\\n-     *   (null if [0] is false)\\n-     *  \\n-     */\\n-    _promptToChangePasswordWithUsernames : function (aWindow, usernames) {\\n-        const buttonFlags = Ci.nsIPrompt.STD_YES_NO_BUTTONS;\\n-\\n-        var dialogText  = this._getLocalizedString(\\\"userSelectText\\\");\\n-        var dialogTitle = this._getLocalizedString(\\\"passwordChangeTitle\\\");\\n-        var selectedUser = null, selectedIndex = { value: null };\\n-\\n-        // If user selects ok, outparam.value is set to the index\\n-        // of the selected username.\\n-        var ok = this._promptService.select(aWindow,\\n-                                dialogTitle, dialogText,\\n-                                usernames.length, usernames,\\n-                                selectedIndex);\\n-        if (ok)\\n-            selectedUser = usernames[selectedIndex.value];\\n-\\n-        return [ok, selectedUser];\\n-    },\\n-\\n-\\n-    /*\\n-     * _getLocalisedString\\n-     *\\n-     * Can be called as:\\n-     *   _getLocalisedString(\\\"key1\\\");\\n-     *   _getLocalizedString(\\\"key2\\\", [\\\"arg1\\\"]);\\n-     *   _getLocalizedString(\\\"key3\\\", [\\\"arg1\\\", \\\"arg2\\\"]);\\n-     *   (etc)\\n-     *\\n-     * Returns the localized string for the specified key,\\n-     * formatted if required.\\n-     *\\n-     */ \\n-    _getLocalizedString : function (key, formatArgs) {\\n-        if (formatArgs)\\n-            return this._strBundle.formatStringFromName(\\n-                                        key, formatArgs, formatArgs.length);\\n-        else\\n-            return this._strBundle.GetStringFromName(key);\\n     }\\n-\\n }; // end of LoginManager implementation\\n \\n \\ndiff --git a/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js b/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js\\nindex fad1529..23bc2fb 100644\\n--- a/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js\\n+++ b/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js\\n@@ -54,30 +54,13 @@ LoginManagerPromptFactory.prototype = {\\n \\n     classDescription : \\\"LoginManagerPromptFactory\\\",\\n     contractID : \\\"@mozilla.org/passwordmanager/authpromptfactory;1\\\",\\n-    classID : Components.ID(\\\"{447fc780-1d28-412a-91a1-466d48129c65}\\\"),\\n+    classID : Components.ID(\\\"{749e62f4-60ae-4569-a8a2-de78b649660e}\\\"),\\n     QueryInterface : XPCOMUtils.generateQI([Ci.nsIPromptFactory]),\\n \\n-    _promptService : null,\\n-    _pwmgr         : null,\\n-\\n-    _initialized : false,\\n-\\n     getPrompt : function (aWindow, aIID) {\\n-\\n-        if (!this._initialized) {\\n-            // Login manager service\\n-            this._pwmgr = Cc[\\\"@mozilla.org/login-manager;1\\\"]\\n-                                .getService(Ci.nsILoginManager);\\n-\\n-            // Prompt service for user interaction\\n-            this._promptService = Cc[\\\"@mozilla.org/embedcomp/prompt-service;1\\\"]\\n-                                    .getService(Ci.nsIPromptService2);\\n-\\n-            this._initialized = true;\\n-        }\\n-\\n-        return new LoginManagerPrompter(this._pwmgr, this._promptService,\\n-                                        aWindow).QueryInterface(aIID);\\n+        var prompt = new LoginManagerPrompter().QueryInterface(aIID);\\n+        prompt.init(aWindow);\\n+        return prompt;\\n     }\\n }; // end of LoginManagerPromptFactory implementation\\n \\n@@ -92,35 +75,78 @@ LoginManagerPromptFactory.prototype = {\\n /*\\n  * LoginManagerPrompter\\n  *\\n- * Implements nsIAuthPrompt2.\\n- *\\n- * Invoked by a channel for protocol-based authentication (eg HTTP\\n- * Authenticate, FTP login)\\n+ * Implements nsIAuthPrompt2 and nsILoginManagerPrompter.\\n+ * nsIAuthPrompt2 usage is invoked by a channel for protocol-based\\n+ * authentication (eg HTTP Authenticate, FTP login). nsILoginManagerPrompter\\n+ * is invoked by Login Manager for saving/changing a login.\\n  */\\n-function LoginManagerPrompter(pwmgr, promptService, window) {\\n-  this._pwmgr = pwmgr;\\n-  this._promptService = promptService;\\n-  this._window = window;\\n+function LoginManagerPrompter() {}\\n \\n-  this.log(\\\"===== initialized =====\\\");\\n-}\\n LoginManagerPrompter.prototype = {\\n \\n-    QueryInterface : XPCOMUtils.generateQI([Ci.nsIAuthPrompt2]),\\n+    classDescription : \\\"LoginManagerPrompter\\\",\\n+    contractID : \\\"@mozilla.org/login-manager/prompter;1\\\",\\n+    classID : Components.ID(\\\"{8aa66d77-1bbb-45a6-991e-b8f47751c291}\\\"),\\n+    QueryInterface : XPCOMUtils.generateQI(\\n+                        [Ci.nsIAuthPrompt2, Ci.nsILoginManagerPrompter]),\\n+\\n+    _window        : null,\\n+    _debug         : false,\\n+\\n+    __pwmgr : null, // Password Manager service\\n+    get _pwmgr() {\\n+        if (!this.__pwmgr)\\n+            this.__pwmgr = Cc[\\\"@mozilla.org/login-manager;1\\\"].\\n+                           getService(Ci.nsILoginManager);\\n+        return this.__pwmgr;\\n+    },\\n \\n     __logService : null, // Console logging service, used for debugging.\\n     get _logService() {\\n         if (!this.__logService)\\n-            this.__logService = Cc[\\\"@mozilla.org/consoleservice;1\\\"]\\n-                                    .getService(Ci.nsIConsoleService);\\n+            this.__logService = Cc[\\\"@mozilla.org/consoleservice;1\\\"].\\n+                                getService(Ci.nsIConsoleService);\\n         return this.__logService;\\n     },\\n \\n-    _promptService : null,\\n-    _pwmgr         : null,\\n-    _window        : null,\\n+    __promptService : null, // Prompt service for user interaction\\n+    get _promptService() {\\n+        if (!this.__promptService)\\n+            this.__promptService =\\n+                Cc[\\\"@mozilla.org/embedcomp/prompt-service;1\\\"].\\n+                getService(Ci.nsIPromptService2);\\n+        return this.__promptService;\\n+    },\\n \\n-    _debug         : false,\\n+\\n+    __strBundle : null, // String bundle for L10N\\n+    get _strBundle() {\\n+        if (!this.__strBundle) {\\n+            var bunService = Cc[\\\"@mozilla.org/intl/stringbundle;1\\\"].\\n+                             getService(Ci.nsIStringBundleService);\\n+            this.__strBundle = bunService.createBundle(\\n+                        \\\"chrome://passwordmgr/locale/passwordmgr.properties\\\");\\n+            if (!this.__strBundle)\\n+                throw \\\"String bundle for Login Manager not present!\\\";\\n+        }\\n+\\n+        return this.__strBundle;\\n+    },\\n+\\n+\\n+    __brandBundle : null, // String bundle for L10N\\n+    get _brandBundle() {\\n+        if (!this.__brandBundle) {\\n+            var bunService = Cc[\\\"@mozilla.org/intl/stringbundle;1\\\"].\\n+                             getService(Ci.nsIStringBundleService);\\n+            this.__brandBundle = bunService.createBundle(\\n+                        \\\"chrome://branding/locale/brand.properties\\\");\\n+            if (!this.__brandBundle)\\n+                throw \\\"Branding string bundle not present!\\\";\\n+        }\\n+\\n+        return this.__brandBundle;\\n+    },\\n \\n \\n     /*\\n@@ -137,6 +163,13 @@ LoginManagerPrompter.prototype = {\\n     },\\n \\n \\n+\\n+\\n+    /* ---------- nsIAuthPrompt2 prompts ---------- */\\n+\\n+\\n+\\n+\\n     /*\\n      * promptAuth\\n      *\\n@@ -145,41 +178,55 @@ LoginManagerPrompter.prototype = {\\n      * nsIChannel aChannel\\n      * int        aLevel\\n      * nsIAuthInformation aAuthInfo\\n-     * boolean    aConfirm\\n      */\\n-    promptAuth : function (aChannel, aLevel, aAuthInfo, aConfirm) {\\n-        var rememberLogin = false;\\n+    promptAuth : function (aChannel, aLevel, aAuthInfo) {\\n         var selectedLogin = null;\\n+        var checkbox = { value : false };\\n         var checkboxLabel = null;\\n \\n         this.log(\\\"===== promptAuth called =====\\\");\\n \\n+        // If the user submits a login but it fails, we need to remove the\\n+        // notification bar that was displayed. Conveniently, the user will be\\n+        // prompted for authentication again, which brings us here.\\n+        // XXX this isn't right if there are multiple logins on a page (eg,\\n+        // 2 images from different http realms). That seems like an edge case\\n+        // that we're probably not handling right anyway.\\n+        var notifyBox = this._getNotifyBox();\\n+        if (notifyBox)\\n+            this._removeSaveLoginNotification(notifyBox);\\n+\\n         var hostname, httpRealm;\\n         [hostname, httpRealm] = this._GetAuthKey(aChannel, aAuthInfo);\\n \\n-        if (this._pwmgr.getLoginSavingEnabled(hostname)) {\\n-            checkboxLabel = this.getLocalizedString(\\\"rememberPassword\\\");\\n \\n+        // Looks for existing logins to prefill the prompt with.\\n+        var foundLogins = this._pwmgr.findLogins({},\\n+                                        hostname, null, httpRealm);\\n \\n-            var foundLogins = this._pwmgr.findLogins({},\\n-                                            hostname, null, httpRealm);\\n-\\n-            // XXX Like the original code, we can't deal with multiple\\n-            // account selection. (bug 227632)\\n-            if (foundLogins.length > 0) {\\n-                selectedLogin = foundLogins[0];\\n-                this._SetAuthInfo(aAuthInfo, selectedLogin.username,\\n-                                             selectedLogin.password);\\n-                rememberLogin = true;\\n-            }\\n+        // XXX Like the original code, we can't deal with multiple\\n+        // account selection. (bug 227632)\\n+        if (foundLogins.length > 0) {\\n+            selectedLogin = foundLogins[0];\\n+            this._SetAuthInfo(aAuthInfo, selectedLogin.username,\\n+                                         selectedLogin.password);\\n+            checkbox.value = true;\\n         }\\n \\n+        var canRememberLogin = this._pwmgr.getLoginSavingEnabled(hostname);\\n+        \\n         // if checkboxLabel is null, the checkbox won't be shown at all.\\n-        var checkbox = { value : rememberLogin };\\n+        if (canRememberLogin && !notifyBox)\\n+            checkboxLabel = this._getLocalizedString(\\\"rememberPassword\\\");\\n \\n         var ok = this._promptService.promptAuth(this._window, aChannel,\\n                                 aLevel, aAuthInfo, checkboxLabel, checkbox);\\n-        rememberLogin = checkbox.value;\\n+\\n+        // If there's a notification box, use it to allow the user to\\n+        // determine if the login should be saved. If there isn't a\\n+        // notification box, only save the login if the user set the checkbox\\n+        // to do so.\\n+        var rememberLogin = notifyBox ? canRememberLogin : checkbox.value;\\n \\n         if (ok && rememberLogin) {\\n             var newLogin = Cc[\\\"@mozilla.org/login-manager/loginInfo;1\\\"]\\n@@ -194,9 +241,12 @@ LoginManagerPrompter.prototype = {\\n                 aAuthInfo.username != selectedLogin.username) {\\n \\n                 // add as new\\n-                this.log(\\\"Adding login for \\\" + aAuthInfo.username +\\n+                this.log(\\\"New login seen for \\\" + aAuthInfo.username +\\n                          \\\" @ \\\" + hostname + \\\" (\\\" + httpRealm + \\\")\\\");\\n-                this._pwmgr.addLogin(newLogin);\\n+                if (notifyBox)\\n+                    this._showSaveLoginNotification(notifyBox, newLogin);\\n+                else\\n+                    this._pwmgr.addLogin(newLogin);\\n \\n             } else if (selectedLogin &&\\n                        aAuthInfo.password != selectedLogin.password) {\\n@@ -219,6 +269,341 @@ LoginManagerPrompter.prototype = {\\n         return NS_ERROR_NOT_IMPLEMENTED;\\n     },\\n \\n+\\n+\\n+\\n+    /* ---------- nsILoginManagerPrompter prompts ---------- */\\n+\\n+\\n+\\n+\\n+    /*\\n+     * init\\n+     *\\n+     */\\n+    init : function (aWindow) {\\n+        this._window = aWindow;\\n+        this.log(\\\"===== initialized =====\\\");\\n+    },\\n+\\n+\\n+    /*\\n+     * promptToSavePassword\\n+     *\\n+     */\\n+    promptToSavePassword : function (aLogin) {\\n+        var notifyBox = this._getNotifyBox();\\n+\\n+        if (notifyBox)\\n+            this._showSaveLoginNotification(notifyBox, aLogin);\\n+        else\\n+            this._showSaveLoginDialog(aLogin);\\n+    },\\n+\\n+\\n+    /*\\n+     * _showSaveLoginNotification\\n+     *\\n+     * Displays a notification bar (rather than a popup), to allow the user to\\n+     * save the specified login. This allows the user to see the results of\\n+     * their login, and only save a login which they know worked.\\n+     *\\n+     */\\n+    _showSaveLoginNotification : function (aNotifyBox, aLogin) {\\n+\\n+        // Ugh. We can't use the strings from the popup window, because they\\n+        // have the access key marked in the string (eg \\\"Mo&zilla\\\"), along\\n+        // with some weird rules for handling access keys that do not occur\\n+        // in the string, for L10N. See commonDialog.js's setLabelForNode().\\n+        var neverButtonText =\\n+              this._getLocalizedString(\\\"notifyBarNeverForSiteButtonText\\\");\\n+        var neverButtonAccessKey =\\n+              this._getLocalizedString(\\\"notifyBarNeverForSiteButtonAccessKey\\\");\\n+        var rememberButtonText =\\n+              this._getLocalizedString(\\\"notifyBarRememberButtonText\\\");\\n+        var rememberButtonAccessKey =\\n+              this._getLocalizedString(\\\"notifyBarRememberButtonAccessKey\\\");\\n+\\n+        var brandShortName =\\n+              this._brandBundle.GetStringFromName(\\\"brandShortName\\\");\\n+        var notificationText  = this._getLocalizedString(\\n+                                        \\\"savePasswordText\\\", [brandShortName]);\\n+\\n+        // The callbacks in |buttons| have a closure to access the variables\\n+        // in scope here; set one to |this._pwmgr| so we can get back to pwmgr\\n+        // without a getService() call.\\n+        var pwmgr = this._pwmgr;\\n+\\n+\\n+        var buttons = [\\n+            // \\\"Remember\\\" button\\n+            {\\n+                label:     rememberButtonText,\\n+                accessKey: rememberButtonAccessKey,\\n+                popup:     null,\\n+                callback: function(aNotificationBar, aButton) {\\n+                    pwmgr.addLogin(aLogin);\\n+                }\\n+            },\\n+\\n+            // \\\"Never for this site\\\" button\\n+            {\\n+                label:     neverButtonText,\\n+                accessKey: neverButtonAccessKey,\\n+                popup:     null,\\n+                callback: function(aNotificationBar, aButton) {\\n+                    pwmgr.setLoginSavingEnabled(aLogin.hostname, false);\\n+                }\\n+            }\\n+\\n+            // \\\"Not now\\\" button not needed, as notification bar isn't modal.\\n+        ];\\n+\\n+\\n+        var oldBar = aNotifyBox.getNotificationWithValue(\\\"password-save\\\");\\n+        const priority = aNotifyBox.PRIORITY_INFO_MEDIUM;\\n+\\n+        this.log(\\\"Adding new save-password notification bar\\\");\\n+        var newBar = aNotifyBox.appendNotification(\\n+                                notificationText, \\\"password-save\\\",\\n+                                null, priority, buttons);\\n+\\n+        // The page we're going to hasn't loaded yet, so we want to persist\\n+        // across the first location change.\\n+        newBar.ignoreFirstLocationChange = true;\\n+\\n+        // Sites like Gmail perform a funky redirect dance before you end up\\n+        // at the post-authentication page. I don't see a good way to\\n+        // heuristically determine when to ignore such location changes, so\\n+        // we'll try ignoring location changes based on a time interval.\\n+        var now = Date.now() / 1000;\\n+        newBar.ignoreLocationChangeTimeout = now + 10; // 10 seconds\\n+\\n+        if (oldBar) {\\n+            this.log(\\\"(...and removing old save-password notification bar)\\\");\\n+            aNotifyBox.removeNotification(oldBar);\\n+        }\\n+    },\\n+\\n+\\n+    /*\\n+     * _removeSaveLoginNotification\\n+     *\\n+     */\\n+    _removeSaveLoginNotification : function (aNotifyBox) {\\n+\\n+        var oldBar = aNotifyBox.getNotificationWithValue(\\\"password-save\\\");\\n+\\n+        if (oldBar) {\\n+            this.log(\\\"Removing save-password notification bar.\\\");\\n+            aNotifyBox.removeNotification(oldBar);\\n+        }\\n+    },\\n+\\n+\\n+    /*\\n+     * _showSaveLoginDialog\\n+     *\\n+     * Called when we detect a new login in a form submission,\\n+     * asks the user what to do.\\n+     *\\n+     */\\n+    _showSaveLoginDialog : function (aLogin) {\\n+        const buttonFlags = Ci.nsIPrompt.BUTTON_POS_1_DEFAULT +\\n+            (Ci.nsIPrompt.BUTTON_TITLE_IS_STRING * Ci.nsIPrompt.BUTTON_POS_0) +\\n+            (Ci.nsIPrompt.BUTTON_TITLE_IS_STRING * Ci.nsIPrompt.BUTTON_POS_1) +\\n+            (Ci.nsIPrompt.BUTTON_TITLE_IS_STRING * Ci.nsIPrompt.BUTTON_POS_2);\\n+\\n+        var brandShortName =\\n+                this._brandBundle.GetStringFromName(\\\"brandShortName\\\");\\n+\\n+        var dialogText         = this._getLocalizedString(\\n+                                        \\\"savePasswordText\\\", [brandShortName]);\\n+        var dialogTitle        = this._getLocalizedString(\\n+                                        \\\"savePasswordTitle\\\");\\n+        var neverButtonText    = this._getLocalizedString(\\n+                                        \\\"neverForSiteButtonText\\\");\\n+        var rememberButtonText = this._getLocalizedString(\\n+                                        \\\"rememberButtonText\\\");\\n+        var notNowButtonText   = this._getLocalizedString(\\n+                                        \\\"notNowButtonText\\\");\\n+\\n+        this.log(\\\"Prompting user to save/ignore login\\\");\\n+        var userChoice = this._promptService.confirmEx(this._window,\\n+                                            dialogTitle, dialogText,\\n+                                            buttonFlags, rememberButtonText,\\n+                                            notNowButtonText, neverButtonText,\\n+                                            null, {});\\n+        //  Returns:\\n+        //   0 - Save the login\\n+        //   1 - Ignore the login this time\\n+        //   2 - Never save logins for this site\\n+        if (userChoice == 2) {\\n+            this.log(\\\"Disabling \\\" + aLogin.hostname + \\\" logins by request.\\\");\\n+            this._pwmgr.setLoginSavingEnabled(aLogin.hostname, false);\\n+        } else if (userChoice == 0) {\\n+            this.log(\\\"Saving login for \\\" + aLogin.hostname);\\n+            this._pwmgr.addLogin(aLogin.formLogin);\\n+        } else {\\n+            // userChoice == 1 --> just ignore the login.\\n+            this.log(\\\"Ignoring login.\\\");\\n+        }\\n+    },\\n+\\n+\\n+    /*\\n+     * promptToChangePassword\\n+     *\\n+     * Called when we think we detect a password change for an existing\\n+     * login, when the form being submitted contains multiple password\\n+     * fields.\\n+     *\\n+     * Return values:\\n+     *   true  - Update the stored password\\n+     *   false - Do not update the stored password\\n+     */\\n+    promptToChangePassword : function (aUsername) {\\n+        const buttonFlags = Ci.nsIPrompt.STD_YES_NO_BUTTONS;\\n+\\n+        var dialogText  = this._getLocalizedString(\\n+                                    \\\"passwordChangeText\\\", [aUsername]);\\n+        var dialogTitle = this._getLocalizedString(\\n+                                    \\\"passwordChangeTitle\\\");\\n+\\n+        // returns 0 for yes, 1 for no.\\n+        var result = this._promptService.confirmEx(this._window,\\n+                                dialogTitle, dialogText, buttonFlags,\\n+                                null, null, null,\\n+                                null, {});\\n+        return !result;\\n+    },\\n+\\n+\\n+    /*\\n+     * promptToChangePasswordWithUsernames\\n+     *\\n+     * Called when we detect a password change in a form submission, but we\\n+     * don't know which existing login (username) it's for. Asks the user\\n+     * to select a username and confirm the password change.\\n+     *\\n+     * Returns multiple parameters:\\n+     * [0] - User's response to the dialog\\n+     *   true  = Update the stored password\\n+     *   false = Do not update the stored password\\n+     * [1] - The username selected\\n+     *   (null if [0] is false)\\n+     *  \\n+     */\\n+    promptToChangePasswordWithUsernames : function (usernames) {\\n+        const buttonFlags = Ci.nsIPrompt.STD_YES_NO_BUTTONS;\\n+\\n+        var dialogText  = this._getLocalizedString(\\\"userSelectText\\\");\\n+        var dialogTitle = this._getLocalizedString(\\\"passwordChangeTitle\\\");\\n+        var selectedUser = null, selectedIndex = { value: null };\\n+\\n+        // If user selects ok, outparam.value is set to the index\\n+        // of the selected username.\\n+        var ok = this._promptService.select(this._window,\\n+                                dialogTitle, dialogText,\\n+                                usernames.length, usernames,\\n+                                selectedIndex);\\n+        if (ok)\\n+            selectedUser = usernames[selectedIndex.value];\\n+\\n+        return [ok, selectedUser];\\n+    },\\n+\\n+\\n+\\n+\\n+    /* ---------- Internal Methods ---------- */\\n+\\n+\\n+\\n+\\n+    /*\\n+     * _getNotifyBox\\n+     *\\n+     * Returns the notification box to this prompter, or null if there isn't\\n+     * a notification box available.\\n+     */\\n+    _getNotifyBox : function () {\\n+        try {\\n+            // Get topmost window, in case we're in a frame.\\n+            var notifyWindow = this._window.top\\n+\\n+            // Some sites pop up a temporary login window, when disappears\\n+            // upon submission of credentials. We want to put the notification\\n+            // bar in the opener window if this seems to be happening.\\n+            if (notifyWindow.opener) {\\n+                var chromeWin = notifyWindow\\n+                                    .QueryInterface(Ci.nsIInterfaceRequestor)\\n+                                    .getInterface(Ci.nsIWebNavigation)\\n+                                    .QueryInterface(Ci.nsIDocShellTreeItem)\\n+                                    .rootTreeItem\\n+                                    .QueryInterface(Ci.nsIInterfaceRequestor)\\n+                                    .getInterface(Ci.nsIDOMWindow);\\n+                var chromeDoc = chromeWin.document.documentElement;\\n+\\n+                // Check to see if the current window was opened with\\n+                // chrome disabled, and if so use the opener window.\\n+                if (chromeDoc.getAttribute(\\\"chromehidden\\\")) {\\n+                    this.log(\\\"Using opener window for notification bar.\\\");\\n+                    notifyWindow = notifyWindow.opener;\\n+                }\\n+            }\\n+\\n+\\n+            // Find the <browser> which contains notifyWindow, by looking\\n+            // through all the open windows and all the <browsers> in each.\\n+            var wm = Cc[\\\"@mozilla.org/appshell/window-mediator;1\\\"].\\n+                     getService(Ci.nsIWindowMediator);\\n+            var enumerator = wm.getEnumerator(\\\"navigator:browser\\\");\\n+            var tabbrowser = null;\\n+            var foundBrowser = null;\\n+\\n+            while (!foundBrowser && enumerator.hasMoreElements()) {\\n+                var win = enumerator.getNext();\\n+                tabbrowser = win.getBrowser(); \\n+                foundBrowser = tabbrowser.getBrowserForDocument(\\n+                                                  notifyWindow.document);\\n+            }\\n+\\n+            // Return the notificationBox associated with the browser.\\n+            if (foundBrowser)\\n+                return tabbrowser.getNotificationBox(foundBrowser)\\n+\\n+        } catch (e) {\\n+            // If any errors happen, just assume no notification box.\\n+            this.log(\\\"No notification box available: \\\" + e)\\n+        }\\n+\\n+        return null;\\n+    },\\n+\\n+\\n+    /*\\n+     * _getLocalisedString\\n+     *\\n+     * Can be called as:\\n+     *   _getLocalisedString(\\\"key1\\\");\\n+     *   _getLocalizedString(\\\"key2\\\", [\\\"arg1\\\"]);\\n+     *   _getLocalizedString(\\\"key3\\\", [\\\"arg1\\\", \\\"arg2\\\"]);\\n+     *   (etc)\\n+     *\\n+     * Returns the localized string for the specified key,\\n+     * formatted if required.\\n+     *\\n+     */ \\n+    _getLocalizedString : function (key, formatArgs) {\\n+        if (formatArgs)\\n+            return this._strBundle.formatStringFromName(\\n+                                        key, formatArgs, formatArgs.length);\\n+        else\\n+            return this._strBundle.GetStringFromName(key);\\n+    },\\n+\\n+\\n     // From /netwerk/base/public/nsNetUtil.h....\\n     /**\\n      * This function is a helper to get a protocol's default port if the\\n@@ -235,8 +620,8 @@ LoginManagerPrompter.prototype = {\\n         // Need the scheme first\\n         var scheme = aURI.scheme;\\n \\n-        var ioService = Cc[\\\"@mozilla.org/network/io-service;1\\\"]\\n-                            .getService(Ci.nsIIOService);\\n+        var ioService = Cc[\\\"@mozilla.org/network/io-service;1\\\"].\\n+                        getService(Ci.nsIIOService);\\n \\n         var handler = ioService.getProtocolHandler(scheme);\\n         port = handler.defaultPort;\\n@@ -265,8 +650,8 @@ LoginManagerPrompter.prototype = {\\n             var idnhost = info.host;\\n             var port    = info.port;\\n \\n-            var idnService = Cc[\\\"@mozilla.org/network/idn-service;1\\\"]\\n-                                .getService(Ci.nsIIDNService);\\n+            var idnService = Cc[\\\"@mozilla.org/network/idn-service;1\\\"].\\n+                             getService(Ci.nsIIDNService);\\n             host = idnService.convertUTF8toACE(idnhost);\\n         } else {\\n             var host = aChannel.URI.host;\\n@@ -325,27 +710,13 @@ LoginManagerPrompter.prototype = {\\n             aAuthInfo.username = username;\\n         }\\n         aAuthInfo.password = password;\\n-    },\\n-\\n-\\n-    _bundle : null,\\n-    getLocalizedString : function (key) {\\n-\\n-        if (!this._bundle) {\\n-            var bunService = Cc[\\\"@mozilla.org/intl/stringbundle;1\\\"]\\n-                                .getService(Ci.nsIStringBundleService);\\n-            this._bundle = bunService.createBundle(\\n-                        \\\"chrome://passwordmgr/locale/passwordmgr.properties\\\");\\n-\\n-            if (!this._bundle)\\n-                throw \\\"String bundle not present!\\\";\\n-        }\\n-\\n-        return this._bundle.GetStringFromName(key);\\n     }\\n+\\n }; // end of LoginManagerPrompter implementation\\n \\n-var component = [LoginManagerPromptFactory];\\n+var component = [LoginManagerPromptFactory, LoginManagerPrompter];\\n function NSGetModule(compMgr, fileSpec) {\\n     return XPCOMUtils.generateModule(component);\\n }\\n+\\n+\\ndiff --git a/toolkit/components/passwordmgr/src/storage-Legacy.js b/toolkit/components/passwordmgr/src/storage-Legacy.js\\nindex 21209ca..e199c2e 100644\\n--- a/toolkit/components/passwordmgr/src/storage-Legacy.js\\n+++ b/toolkit/components/passwordmgr/src/storage-Legacy.js\\n@@ -208,7 +208,7 @@ LoginManagerStorage_legacy.prototype = {\\n         // The specified login isn't encrypted, so we need to ensure\\n         // the logins we're comparing with are decrypted. We decrypt one entry\\n         // at a time, lest _decryptLogins return fewer entries and screw up\\n-        // indicies between the two.\\n+        // indices between the two.\\n         for (var i = 0; i < logins.length; i++) {\\n \\n             var [[decryptedLogin], userCanceled] =\\n@@ -374,7 +374,7 @@ LoginManagerStorage_legacy.prototype = {\\n         for each (var login in hostLogins) {\\n \\n             // If search arg is null, skip login unless it doesn't specify a\\n-            // httpRealm (ie, it's also null). If the seach arg is an empty\\n+            // httpRealm (ie, it's also null). If the search arg is an empty\\n             // string, always match.\\n             if (httpRealm == null) {\\n                 if (login.httpRealm != null)\\n@@ -387,7 +387,7 @@ LoginManagerStorage_legacy.prototype = {\\n             }\\n \\n             // If search arg is null, skip login unless it doesn't specify a\\n-            // action URL (ie, it's also null). If the seach arg is an empty\\n+            // action URL (ie, it's also null). If the search arg is an empty\\n             // string, always match.\\n             if (formSubmitURL == null) {\\n                 if (login.formSubmitURL != null)\\ndiff --git a/toolkit/locales/en-US/chrome/passwordmgr/passwordmgr.properties b/toolkit/locales/en-US/chrome/passwordmgr/passwordmgr.properties\\nindex 0e847ed..222a0a3 100644\\n--- a/toolkit/locales/en-US/chrome/passwordmgr/passwordmgr.properties\\n+++ b/toolkit/locales/en-US/chrome/passwordmgr/passwordmgr.properties\\n@@ -39,9 +39,13 @@ rememberValue = Use Password Manager to remember this value.\\n rememberPassword = Use Password Manager to remember this password.\\n savePasswordTitle = Confirm\\n savePasswordText = Do you want %S to remember this password?\\n-rememberButtonText = &Remember\\n notNowButtonText = &Not Now\\n neverForSiteButtonText = Ne&ver for This Site\\n+notifyBarNeverForSiteButtonText = Never for This Site\\n+notifyBarNeverForSiteButtonAccessKey = e\\n+rememberButtonText = &Remember\\n+notifyBarRememberButtonText = Remember\\n+notifyBarRememberButtonAccessKey = R\\n passwordChangeTitle = Confirm Password Change\\n passwordChangeText = Would you like to have Password Manager change the stored password for %S?\\n userSelectText = Please confirm which user you are changing the password for\\n\""}