{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0809936\""},"diff":"\"0809936 Bug 395311 - EM general code cleanup. r=dtownsend, a1.9=mconnor\\ndiff --git a/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties b/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties\\nindex bb335ee..7793aa0 100644\\n--- a/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties\\n+++ b/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties\\n@@ -113,5 +113,3 @@ goOnlineButtonAccesskey=G\\n \\n newUpdateWindowTitle=%S Add-on Updates\\n newUpdatesAvailableMsg=There are new updates available for your add-ons.\\n-\\n-toolkitName=Gecko Toolkit\\ndiff --git a/toolkit/mozapps/extensions/src/nsExtensionManager.js.in b/toolkit/mozapps/extensions/src/nsExtensionManager.js.in\\nindex 3ef7605..20bcd69 100644\\n--- a/toolkit/mozapps/extensions/src/nsExtensionManager.js.in\\n+++ b/toolkit/mozapps/extensions/src/nsExtensionManager.js.in\\n@@ -54,17 +54,6 @@ const Cr = Components.results;\\n \\n Components.utils.import(\\\"resource://gre/modules/XPCOMUtils.jsm\\\");\\n \\n-const nsIExtensionManager             = Ci.nsIExtensionManager;\\n-const nsIAddonUpdateCheckListener     = Ci.nsIAddonUpdateCheckListener;\\n-const nsIUpdateItem                   = Ci.nsIUpdateItem;\\n-const nsILocalFile                    = Ci.nsILocalFile;\\n-const nsILineInputStream              = Ci.nsILineInputStream;\\n-const nsIInstallLocation              = Ci.nsIInstallLocation;\\n-const nsIURL                          = Ci.nsIURL\\n-// XXXrstrong calling hasMoreElements on a nsIDirectoryEnumerator after\\n-// it has been removed will cause a crash on Mac OS X - bug 292823\\n-const nsIDirectoryEnumerator          = Ci.nsIDirectoryEnumerator;\\n-\\n const PREF_EM_CHECK_COMPATIBILITY     = \\\"extensions.checkCompatibility\\\";\\n const PREF_EM_CHECK_UPDATE_SECURITY   = \\\"extensions.checkUpdateSecurity\\\";\\n const PREF_EM_LAST_APP_VERSION        = \\\"extensions.lastAppVersion\\\";\\n@@ -100,8 +89,6 @@ const FILE_CHROME_MANIFEST            = \\\"chrome.manifest\\\";\\n \\n const UNKNOWN_XPCOM_ABI               = \\\"unknownABI\\\";\\n \\n-const FILE_LOGFILE                    = \\\"extensionmanager.log\\\";\\n-\\n const FILE_DEFAULT_THEME_JAR          = \\\"classic.jar\\\";\\n const TOOLKIT_ID                      = \\\"toolkit@mozilla.org\\\"\\n \\n@@ -144,7 +131,6 @@ const XMLURI_PARSE_ERROR              = \\\"http://www.mozilla.org/newlayout/xml/pa\\n const URI_GENERIC_ICON_XPINSTALL      = \\\"chrome://mozapps/skin/xpinstall/xpinstallItemGeneric.png\\\";\\n const URI_GENERIC_ICON_THEME          = \\\"chrome://mozapps/skin/extensions/themeGeneric.png\\\";\\n const URI_XPINSTALL_CONFIRM_DIALOG    = \\\"chrome://mozapps/content/xpinstall/xpinstallConfirm.xul\\\";\\n-const URI_FINALIZE_DIALOG             = \\\"chrome://mozapps/content/extensions/finalize.xul\\\";\\n const URI_EXTENSIONS_PROPERTIES       = \\\"chrome://mozapps/locale/extensions/extensions.properties\\\";\\n const URI_BRAND_PROPERTIES            = \\\"chrome://branding/locale/brand.properties\\\";\\n const URI_DOWNLOADS_PROPERTIES        = \\\"chrome://mozapps/locale/downloads/downloads.properties\\\";\\n@@ -228,19 +214,6 @@ var BundleManager = {\\n       this._appName = brandBundle.GetStringFromName(\\\"brandShortName\\\");\\n     }\\n     return this._appName;\\n-  },\\n-\\n-  _toolkitName: \\\"\\\",\\n-\\n-  /**\\n-   * The toolkit's display name.\\n-   */\\n-  get toolkitName() {\\n-    if (!this._toolkitName) {\\n-      var brandBundle = this.getBundle(URI_EXTENSIONS_PROPERTIES)\\n-      this._toolkitName = brandBundle.GetStringFromName(\\\"toolkitName\\\");\\n-    }\\n-    return this._toolkitName;\\n   }\\n };\\n \\n@@ -381,11 +354,11 @@ function getDirNoCreate(key, pathArray) {\\n function getDirInternal(key, pathArray, shouldCreate) {\\n   var fileLocator = Cc[\\\"@mozilla.org/file/directory_service;1\\\"].\\n                     getService(Ci.nsIProperties);\\n-  var dir = fileLocator.get(key, nsILocalFile);\\n+  var dir = fileLocator.get(key, Ci.nsILocalFile);\\n   for (var i = 0; i < pathArray.length; ++i) {\\n     dir.append(pathArray[i]);\\n     if (shouldCreate && !dir.exists())\\n-      dir.create(nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n+      dir.create(Ci.nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n   }\\n   dir.followLinks = false;\\n   return dir;\\n@@ -443,7 +416,7 @@ function getAbsoluteDescriptor(itemLocation) {\\n  */\\n function getFileFromDescriptor(descriptor, installLocation) {\\n   var location = Cc[\\\"@mozilla.org/file/local;1\\\"].\\n-                 createInstance(nsILocalFile);\\n+                 createInstance(Ci.nsILocalFile);\\n \\n   var m = descriptor.match(/^(abs|rel)\\\\%(.*)$/);\\n   if (!m)\\n@@ -467,7 +440,7 @@ function getFileFromDescriptor(descriptor, installLocation) {\\n  */\\n function fileIsItemPackage(file) {\\n   var fileURL = getURIFromFile(file);\\n-  if (fileURL instanceof nsIURL)\\n+  if (fileURL instanceof Ci.nsIURL)\\n     var extension = fileURL.fileExtension.toLowerCase();\\n   return extension == \\\"xpi\\\" || extension == \\\"jar\\\";\\n }\\n@@ -486,7 +459,7 @@ function openSafeFileOutputStream(file, modeFlags) {\\n   if (modeFlags === undefined)\\n     modeFlags = MODE_WRONLY | MODE_CREATE | MODE_TRUNCATE;\\n   if (!file.exists())\\n-    file.create(nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n+    file.create(Ci.nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n   fos.init(file, modeFlags, PERMS_FILE, 0);\\n   return fos;\\n }\\n@@ -579,9 +552,9 @@ function getRandomFileName(fileName) {\\n  * @returns The RDF URI prefix.\\n  */\\n function getItemPrefix(type) {\\n-  if (type & nsIUpdateItem.TYPE_EXTENSION)\\n+  if (type & Ci.nsIUpdateItem.TYPE_EXTENSION)\\n     return PREFIX_EXTENSION;\\n-  else if (type & nsIUpdateItem.TYPE_THEME)\\n+  else if (type & Ci.nsIUpdateItem.TYPE_THEME)\\n     return PREFIX_THEME;\\n   return PREFIX_ITEM_URI;\\n }\\n@@ -706,10 +679,10 @@ function getAddonTypeFromInstallManifest(installManifest) {\\n   // Install Manifest, so we fall back to a theme-only property to\\n   // differentiate.\\n   if (getManifestProperty(installManifest, \\\"internalName\\\") !== undefined)\\n-    return nsIUpdateItem.TYPE_THEME;\\n+    return Ci.nsIUpdateItem.TYPE_THEME;\\n \\n   // If no type is provided, default to \\\"Extension\\\"\\n-  return nsIUpdateItem.TYPE_EXTENSION;\\n+  return Ci.nsIUpdateItem.TYPE_EXTENSION;\\n }\\n \\n /**\\n@@ -782,8 +755,8 @@ function showBlocklistMessage(items, fromInstall) {\\n   if (fromInstall) {\\n     var wm = Cc[\\\"@mozilla.org/appshell/window-mediator;1\\\"].\\n              getService(Ci.nsIWindowMediator);\\n-    win = wm.getMostRecentWindow(nsIUpdateItem.TYPE_THEME ? \\\"Extension:Manager-themes\\\" :\\n-                                                            \\\"Extension:Manager-extensions\\\");\\n+    win = wm.getMostRecentWindow(Ci.nsIUpdateItem.TYPE_THEME ? \\\"Extension:Manager-themes\\\" :\\n+                                                               \\\"Extension:Manager-extensions\\\");\\n   }\\n   var ww = Cc[\\\"@mozilla.org/embedcomp/window-watcher;1\\\"].\\n            getService(Ci.nsIWindowWatcher);\\n@@ -853,7 +826,7 @@ function getInstallManifest(file) {\\n     var uri = Cc[\\\"@mozilla.org/network/io-service;1\\\"].\\n               getService(Ci.nsIIOService)\\n                         .newFileURI(file);\\n-    var url = uri.QueryInterface(nsIURL);\\n+    var url = uri.QueryInterface(Ci.nsIURL);\\n     showMessage(\\\"malformedTitle\\\", [], \\\"malformedMessage\\\",\\n                 [BundleManager.appName, url.fileName]);\\n   }\\n@@ -949,7 +922,7 @@ function DirectoryInstallLocation(name, location, restricted, priority) {\\n   }\\n   else {\\n     try {\\n-      location.create(nsILocalFile.DIRECTORY_TYPE, 0775);\\n+      location.create(Ci.nsILocalFile.DIRECTORY_TYPE, 0775);\\n     }\\n     catch (e) {\\n       LOG(\\\"DirectoryInstallLocation: failed to create location \\\" +\\n@@ -988,12 +961,12 @@ DirectoryInstallLocation.prototype = {\\n               createInstance(Ci.nsIFileInputStream);\\n     fis.init(file, -1, -1, false);\\n     var line = { value: \\\"\\\" };\\n-    if (fis instanceof nsILineInputStream)\\n+    if (fis instanceof Ci.nsILineInputStream)\\n       fis.readLine(line);\\n     fis.close();\\n     if (line.value) {\\n       var linkedDirectory = Cc[\\\"@mozilla.org/file/local;1\\\"].\\n-                            createInstance(nsILocalFile);\\n+                            createInstance(Ci.nsILocalFile);\\n       try {\\n         linkedDirectory.initWithPath(line.value);\\n       }\\n@@ -1015,12 +988,12 @@ DirectoryInstallLocation.prototype = {\\n       return new FileEnumerator(locations);\\n \\n     try {\\n-      var entries = this._location.directoryEntries.QueryInterface(nsIDirectoryEnumerator);\\n+      var entries = this._location.directoryEntries.QueryInterface(Ci.nsIDirectoryEnumerator);\\n       while (true) {\\n         var entry = entries.nextFile;\\n         if (!entry)\\n           break;\\n-        entry instanceof nsILocalFile;\\n+        entry instanceof Ci.nsILocalFile;\\n         if (!entry.isDirectory() && gIDTest.test(entry.leafName)) {\\n           var linkedDirectory = this._readDirectoryFromFile(entry);\\n           if (linkedDirectory && linkedDirectory.exists() &&\\n@@ -1083,7 +1056,7 @@ DirectoryInstallLocation.prototype = {\\n     var testFile = this.location;\\n     testFile.append(\\\"Access Privileges Test\\\");\\n     try {\\n-      testFile.createUnique(nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n+      testFile.createUnique(Ci.nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n       testFile.remove(false);\\n       this._canAccess = true;\\n     }\\n@@ -1109,7 +1082,7 @@ DirectoryInstallLocation.prototype = {\\n     if (itemLocation.exists() && !itemLocation.isDirectory())\\n       return this._readDirectoryFromFile(itemLocation);\\n     if (!itemLocation.exists() && this.canAccess)\\n-      itemLocation.create(nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n+      itemLocation.create(Ci.nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n     return itemLocation;\\n   },\\n \\n@@ -1177,10 +1150,10 @@ DirectoryInstallLocation.prototype = {\\n     if (!stageDir.exists() || !stageDir.isDirectory())\\n       return null;\\n     try {\\n-      var entries = stageDir.directoryEntries.QueryInterface(nsIDirectoryEnumerator);\\n+      var entries = stageDir.directoryEntries.QueryInterface(Ci.nsIDirectoryEnumerator);\\n       while (entries.hasMoreElements()) {\\n         var file = entries.nextFile;\\n-        if (!(file instanceof nsILocalFile))\\n+        if (!(file instanceof Ci.nsILocalFile))\\n           continue;\\n         if (file.isDirectory())\\n           removeDirRecursive(file);\\n@@ -1195,7 +1168,7 @@ DirectoryInstallLocation.prototype = {\\n     }\\n     catch (e) {\\n     }\\n-    if (entries instanceof nsIDirectoryEnumerator)\\n+    if (entries instanceof Ci.nsIDirectoryEnumerator)\\n       entries.close();\\n     return stageFile;\\n   },\\n@@ -1220,7 +1193,7 @@ DirectoryInstallLocation.prototype = {\\n         parent = parent.parent;\\n         entries = parent.directoryEntries;\\n       }\\n-      if (entries instanceof nsIDirectoryEnumerator)\\n+      if (entries instanceof Ci.nsIDirectoryEnumerator)\\n         entries.close();\\n     }\\n     catch (e) {\\n@@ -1315,7 +1288,7 @@ WinRegInstallLocation.prototype = {\\n       var id = key.getValueName(i);\\n \\n       var dir = Cc[\\\"@mozilla.org/file/local;1\\\"].\\n-                createInstance(nsILocalFile);\\n+                createInstance(Ci.nsILocalFile);\\n       dir.initWithPath(key.readStringValue(id));\\n \\n       if (dir.exists() && dir.isDirectory()) {\\n@@ -1432,7 +1405,7 @@ Installer.prototype = {\\n       return;\\n \\n     // Upgrade old-style contents.rdf Chrome Manifests if necessary.\\n-    if (this._type == nsIUpdateItem.TYPE_THEME)\\n+    if (this._type == Ci.nsIUpdateItem.TYPE_THEME)\\n       this.upgradeThemeChrome();\\n     else\\n       this.upgradeExtensionChrome();\\n@@ -1471,7 +1444,7 @@ Installer.prototype = {\\n         var target = installLocation.getItemFile(extensionID, entryName);\\n         if (!target.exists()) {\\n           try {\\n-            target.create(nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n+            target.create(Ci.nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n           }\\n           catch (e) {\\n             LOG(\\\"extractExtensionsFiles: failed to create target directory for extraction \\\" +\\n@@ -1488,7 +1461,7 @@ Installer.prototype = {\\n           continue;\\n \\n         try {\\n-          target.create(nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n+          target.create(Ci.nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n         }\\n         catch (e) {\\n           LOG(\\\"extractExtensionsFiles: failed to create target file for extraction \\\" +\\n@@ -1536,7 +1509,7 @@ Installer.prototype = {\\n             continue;\\n           target = installLocation.getItemFile(id, entryName);\\n           try {\\n-            target.create(nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n+            target.create(Ci.nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n           }\\n           catch (e) {\\n             LOG(\\\"extractThemeFiles: failed to create target file for extraction \\\" +\\n@@ -1549,7 +1522,7 @@ Installer.prototype = {\\n       else { // old theme structure requires only an install.rdf\\n         try {\\n           var contentsManifestFile = installLocation.getItemFile(id, FILE_CONTENTS_MANIFEST);\\n-          contentsManifestFile.create(nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n+          contentsManifestFile.create(Ci.nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n           zipReader.extract(FILE_CONTENTS_MANIFEST, contentsManifestFile);\\n         }\\n         catch (e) {\\n@@ -1567,7 +1540,7 @@ Installer.prototype = {\\n           throw e; // let the safe-op clean up\\n         }\\n \\n-        if (!installer.metadataDS && installer._type == nsIUpdateItem.TYPE_THEME) {\\n+        if (!installer.metadataDS && installer._type == Ci.nsIUpdateItem.TYPE_THEME) {\\n           var themeName = extensionStrings.GetStringFromName(\\\"incompatibleThemeName\\\");\\n           if (contentsManifestFile && contentsManifestFile.exists()) {\\n             var contentsManifest = gRDF.GetDataSourceBlocking(getURLSpecFromFile(contentsManifestFile));\\n@@ -1577,7 +1550,7 @@ Installer.prototype = {\\n               var elts = ctr.GetElements();\\n               var nameArc = gRDF.GetResource(CHROME_NS(\\\"displayName\\\"));\\n               while (elts.hasMoreElements()) {\\n-                var elt = elts.getNext().QueryInterface(Components.interfaces.nsIRDFResource);\\n+                var elt = elts.getNext().QueryInterface(Ci.nsIRDFResource);\\n                 themeName = stringData(contentsManifest.GetTarget(elt, nameArc, true));\\n                 if (themeName)\\n                   break;\\n@@ -1588,7 +1561,7 @@ Installer.prototype = {\\n             }\\n           }\\n           showIncompatibleError({ name: themeName, version: \\\"\\\",\\n-                                  type: nsIUpdateItem.TYPE_THEME });\\n+                                  type: Ci.nsIUpdateItem.TYPE_THEME });\\n           LOG(\\\"Theme JAR file: \\\" + jarFile.leafName + \\\" contains an Old-Style \\\" +\\n               \\\"Theme that is not compatible with this version of the software.\\\");\\n           throw new Error(\\\"Old Theme\\\"); // let the safe-op clean up\\n@@ -1598,7 +1571,7 @@ Installer.prototype = {\\n \\n     var installer = this;\\n     var callback = extractExtensionFiles;\\n-    if (this._type == nsIUpdateItem.TYPE_THEME)\\n+    if (this._type == Ci.nsIUpdateItem.TYPE_THEME)\\n       callback = extractThemeFiles;\\n     safeInstallOperation(this._id, this._installLocation,\\n                           { callback: callback, data: file });\\n@@ -1623,7 +1596,7 @@ Installer.prototype = {\\n       var chromeDir = this._installLocation.getItemFile(this._id, DIR_CHROME);\\n       // We're relying on the fact that there is only one JAR file\\n       // in the \\\"chrome\\\" directory. This is a hack, but it works.\\n-      var entries = chromeDir.directoryEntries.QueryInterface(nsIDirectoryEnumerator);\\n+      var entries = chromeDir.directoryEntries.QueryInterface(Ci.nsIDirectoryEnumerator);\\n       var jarFile = entries.nextFile;\\n       if (jarFile) {\\n         var jarFileURI = getURIFromFile(jarFile);\\n@@ -1680,7 +1653,7 @@ Installer.prototype = {\\n       // Even if an extension doesn't have any chrome, we generate an empty\\n       // manifest file so that we don't try to upgrade from the \\\"old-style\\\"\\n       // chrome manifests at every startup.\\n-      manifestFile.create(nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n+      manifestFile.create(Ci.nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n \\n       var manifestURI = getURIFromFile(manifestFile);\\n       var files = this.metadataDS.GetTargets(gInstallManifestRoot, EM_R(\\\"file\\\"), true);\\n@@ -1695,7 +1668,7 @@ Installer.prototype = {\\n           var zipReader = getZipReaderForFile(chromeFile);\\n           fileURLSpec = \\\"jar:\\\" + fileURLSpec + \\\"!/\\\";\\n           var contentsFile = this._installLocation.getItemFile(this._id, FILE_CONTENTS_MANIFEST);\\n-          contentsFile.create(nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n+          contentsFile.create(Ci.nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n         }\\n \\n         var providers = [EM_R(\\\"package\\\"), EM_R(\\\"skin\\\"), EM_R(\\\"locale\\\")];\\n@@ -1825,16 +1798,16 @@ function safeInstallOperation(itemID, installLocation, installCallback) {\\n    *          |sourceDir| itself) we are moving files from.\\n    */\\n   function moveDirectory(sourceDir, targetDir, currentDir) {\\n-    var entries = currentDir.directoryEntries.QueryInterface(nsIDirectoryEnumerator);\\n+    var entries = currentDir.directoryEntries.QueryInterface(Ci.nsIDirectoryEnumerator);\\n     while (true) {\\n       var entry = entries.nextFile;\\n       if (!entry)\\n         break;\\n       if (entry.isDirectory())\\n         moveDirectory(sourceDir, targetDir, entry);\\n-      else if (entry instanceof nsILocalFile) {\\n+      else if (entry instanceof Ci.nsILocalFile) {\\n         var rd = entry.getRelativeDescriptor(sourceDir);\\n-        var destination = targetDir.clone().QueryInterface(nsILocalFile);\\n+        var destination = targetDir.clone().QueryInterface(Ci.nsILocalFile);\\n         destination.setRelativeDescriptor(targetDir, rd);\\n         moveFile(entry, destination.parent);\\n       }\\n@@ -1922,7 +1895,7 @@ function safeInstallOperation(itemID, installLocation, installCallback) {\\n           throw e;\\n         }\\n       }\\n-      itemLocationTrash.create(nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n+      itemLocationTrash.create(Ci.nsILocalFile.DIRECTORY_TYPE, PERMS_DIRECTORY);\\n       // Move the pointer file to the trash.\\n       moveFile(pointerFile, itemLocationTrash);\\n     }\\n@@ -2115,7 +2088,7 @@ var StartupCache = {\\n     var descriptor = null;\\n     var mtime = null;\\n     if (itemLocation) {\\n-      itemLocation.QueryInterface(nsILocalFile);\\n+      itemLocation.QueryInterface(Ci.nsILocalFile);\\n       descriptor = getDescriptorFromFile(itemLocation, installLocation);\\n       if (itemLocation.exists() && itemLocation.isDirectory())\\n         mtime = Math.floor(itemLocation.lastModifiedTime / 1000);\\n@@ -2210,7 +2183,7 @@ var StartupCache = {\\n     var fis = Cc[\\\"@mozilla.org/network/file-input-stream;1\\\"].\\n               createInstance(Ci.nsIFileInputStream);\\n     fis.init(itemChangeManifest, -1, -1, false);\\n-    if (fis instanceof nsILineInputStream) {\\n+    if (fis instanceof Ci.nsILineInputStream) {\\n       var line = { value: \\\"\\\" };\\n       var more = false;\\n       do {\\n@@ -2304,7 +2277,7 @@ function ExtensionManager() {\\n \\n   // Register Global Install Location\\n   var appGlobalExtensions = getDirNoCreate(KEY_APPDIR, [DIR_EXTENSIONS]);\\n-  var priority = nsIInstallLocation.PRIORITY_APP_SYSTEM_GLOBAL;\\n+  var priority = Ci.nsIInstallLocation.PRIORITY_APP_SYSTEM_GLOBAL;\\n   var globalLocation = new DirectoryInstallLocation(KEY_APP_GLOBAL,\\n                                                     appGlobalExtensions, true,\\n                                                     priority);\\n@@ -2312,7 +2285,7 @@ function ExtensionManager() {\\n \\n   // Register App-Profile Install Location\\n   var appProfileExtensions = getDirNoCreate(KEY_PROFILEDS, [DIR_EXTENSIONS]);\\n-  var priority = nsIInstallLocation.PRIORITY_APP_PROFILE;\\n+  var priority = Ci.nsIInstallLocation.PRIORITY_APP_PROFILE;\\n   var profileLocation = new DirectoryInstallLocation(KEY_APP_PROFILE,\\n                                                      appProfileExtensions, false,\\n                                                      priority);\\n@@ -2324,14 +2297,14 @@ function ExtensionManager() {\\n       new WinRegInstallLocation(\\\"winreg-app-global\\\",\\n                                 nsIWindowsRegKey.ROOT_KEY_LOCAL_MACHINE,\\n                                 true,\\n-                                nsIInstallLocation.PRIORITY_APP_SYSTEM_GLOBAL + 10));\\n+                                Ci.nsIInstallLocation.PRIORITY_APP_SYSTEM_GLOBAL + 10));\\n \\n   // Register HKEY_CURRENT_USER Install Location\\n   InstallLocations.put(\\n       new WinRegInstallLocation(\\\"winreg-app-user\\\",\\n                                 nsIWindowsRegKey.ROOT_KEY_CURRENT_USER,\\n                                 false,\\n-                                nsIInstallLocation.PRIORITY_APP_SYSTEM_USER + 10));\\n+                                Ci.nsIInstallLocation.PRIORITY_APP_SYSTEM_USER + 10));\\n #endif\\n \\n   // Register Additional Install Locations\\n@@ -2341,7 +2314,7 @@ function ExtensionManager() {\\n   while (locations.hasMoreElements()) {\\n     var entry = locations.getNext().QueryInterface(Ci.nsISupportsCString).data;\\n     var contractID = categoryManager.getCategoryEntry(CATEGORY_INSTALL_LOCATIONS, entry);\\n-    var location = Cc[contractID].getService(nsIInstallLocation);\\n+    var location = Cc[contractID].getService(Ci.nsIInstallLocation);\\n     InstallLocations.put(location);\\n   }\\n }\\n@@ -2604,11 +2577,11 @@ ExtensionManager.prototype = {\\n     if (!getPref(\\\"getBoolPref\\\", PREF_EM_UPDATE_ENABLED, true))\\n       return;\\n \\n-    var items = this.getItemList(nsIUpdateItem.TYPE_ADDON, { });\\n+    var items = this.getItemList(Ci.nsIUpdateItem.TYPE_ADDON, { });\\n \\n     var updater = new ExtensionItemUpdater(gApp.ID, gApp.version, this);\\n     updater.checkForUpdates(items, items.length,\\n-                            nsIExtensionManager.UPDATE_CHECK_NEWVERSION,\\n+                            Ci.nsIExtensionManager.UPDATE_CHECK_NEWVERSION,\\n                             new BackgroundUpdateCheckListener(this.datasource));\\n   },\\n \\n@@ -2653,7 +2626,7 @@ ExtensionManager.prototype = {\\n                                   InstallLocations.get(KEY_APP_GLOBAL),\\n                                   installData.type);\\n     installer._installExtensionFiles(file);\\n-    if (installData.type == nsIUpdateItem.TYPE_THEME)\\n+    if (installData.type == Ci.nsIUpdateItem.TYPE_THEME)\\n       installer.upgradeThemeChrome();\\n     else\\n       installer.upgradeExtensionChrome();\\n@@ -2897,7 +2870,7 @@ ExtensionManager.prototype = {\\n     // enumeration returned is pre-sorted.\\n     var installLocations = this.installLocations;\\n     while (installLocations.hasMoreElements()) {\\n-      var location = installLocations.getNext().QueryInterface(nsIInstallLocation);\\n+      var location = installLocations.getNext().QueryInterface(Ci.nsIInstallLocation);\\n \\n       // Hash the set of items actually held by the Install Location.\\n       var actualItems = { };\\n@@ -3088,8 +3061,8 @@ ExtensionManager.prototype = {\\n     // If we have extensions that were installed before the new flat chrome\\n     // manifests, and are still valid, we need to manually create the flat\\n     // manifest files.\\n-    var extensions = this._getActiveItems(nsIUpdateItem.TYPE_EXTENSION +\\n-                                          nsIUpdateItem.TYPE_LOCALE);\\n+    var extensions = this._getActiveItems(Ci.nsIUpdateItem.TYPE_EXTENSION +\\n+                                          Ci.nsIUpdateItem.TYPE_LOCALE);\\n     for (var i = 0; i < extensions.length; ++i) {\\n       var e = extensions[i];\\n       var itemLocation = e.location.getItemLocation(e.id);\\n@@ -3103,7 +3076,7 @@ ExtensionManager.prototype = {\\n           var itemLocation = installLocation.getItemLocation(e.id);\\n           if (itemLocation.exists() && itemLocation.isDirectory()) {\\n             var installer = new Installer(ds, e.id, installLocation,\\n-                                          nsIUpdateItem.TYPE_EXTENSION);\\n+                                          Ci.nsIUpdateItem.TYPE_EXTENSION);\\n             installer.upgradeExtensionChrome();\\n           }\\n         }\\n@@ -3116,7 +3089,7 @@ ExtensionManager.prototype = {\\n       }\\n     }\\n \\n-    var themes = this._getActiveItems(nsIUpdateItem.TYPE_THEME);\\n+    var themes = this._getActiveItems(Ci.nsIUpdateItem.TYPE_THEME);\\n     // If we have themes that were installed before the new flat chrome\\n     // manifests, and are still valid, we need to manually create the flat\\n     // manifest files.\\n@@ -3143,7 +3116,7 @@ ExtensionManager.prototype = {\\n \\n         // We're relying on the fact that there is only one JAR file\\n         // in the \\\"chrome\\\" directory. This is a hack, but it works.\\n-        entries = chromeDir.directoryEntries.QueryInterface(nsIDirectoryEnumerator);\\n+        entries = chromeDir.directoryEntries.QueryInterface(Ci.nsIDirectoryEnumerator);\\n         var jarFile = entries.nextFile;\\n         if (jarFile) {\\n           var jarFileURI = getURIFromFile(jarFile);\\n@@ -3563,7 +3536,7 @@ ExtensionManager.prototype = {\\n         if (!entry.isDirectory() || installRDF.exists() || !chromeDir.exists())\\n           continue;\\n \\n-        var chromeEntries = chromeDir.directoryEntries.QueryInterface(nsIDirectoryEnumerator);\\n+        var chromeEntries = chromeDir.directoryEntries.QueryInterface(Ci.nsIDirectoryEnumerator);\\n         if (!chromeEntries.hasMoreElements())\\n           continue;\\n \\n@@ -3627,7 +3600,7 @@ ExtensionManager.prototype = {\\n     var currAppID = gApp.ID;\\n     for (var i = 0; i < itemsToCheck.length; ++i) {\\n       var item = ds.getItemForID(itemsToCheck[i]);\\n-      var oldPrefix = (item.type == nsIUpdateItem.TYPE_EXTENSION) ? PREFIX_EXTENSION : PREFIX_THEME;\\n+      var oldPrefix = (item.type == Ci.nsIUpdateItem.TYPE_EXTENSION) ? PREFIX_EXTENSION : PREFIX_THEME;\\n       var oldRes = gRDF.GetResource(oldPrefix + item.id);\\n       // Disable the item if it was disabled in the version 1.0 extensions\\n       // datasource.\\n@@ -3732,9 +3705,9 @@ ExtensionManager.prototype = {\\n     //\\n     // To do this we obtain a list of active extensions and themes and write\\n     // these to the extensions.ini file in the profile directory.\\n-    var validExtensions = this._getActiveItems(nsIUpdateItem.TYPE_EXTENSION +\\n-                                               nsIUpdateItem.TYPE_LOCALE);\\n-    var validThemes     = this._getActiveItems(nsIUpdateItem.TYPE_THEME);\\n+    var validExtensions = this._getActiveItems(Ci.nsIUpdateItem.TYPE_EXTENSION +\\n+                                               Ci.nsIUpdateItem.TYPE_LOCALE);\\n+    var validThemes     = this._getActiveItems(Ci.nsIUpdateItem.TYPE_THEME);\\n \\n     var extensionsLocationsFile = getFile(KEY_PROFILEDIR, [FILE_EXTENSION_MANIFEST]);\\n     var fos = openSafeFileOutputStream(extensionsLocationsFile);\\n@@ -3743,7 +3716,7 @@ ExtensionManager.prototype = {\\n     fos.write(extensionSectionHeader, extensionSectionHeader.length);\\n     for (var i = 0; i < validExtensions.length; ++i) {\\n       var e = validExtensions[i];\\n-      var itemLocation = e.location.getItemLocation(e.id).QueryInterface(nsILocalFile);\\n+      var itemLocation = e.location.getItemLocation(e.id).QueryInterface(Ci.nsILocalFile);\\n       var descriptor = getAbsoluteDescriptor(itemLocation);\\n       var line = \\\"Extension\\\" + i + \\\"=\\\" + descriptor + \\\"\\\\r\\\\n\\\";\\n       fos.write(line, line.length);\\n@@ -3753,7 +3726,7 @@ ExtensionManager.prototype = {\\n     fos.write(themeSectionHeader, themeSectionHeader.length);\\n     for (i = 0; i < validThemes.length; ++i) {\\n       var e = validThemes[i];\\n-      var itemLocation = e.location.getItemLocation(e.id).QueryInterface(nsILocalFile);\\n+      var itemLocation = e.location.getItemLocation(e.id).QueryInterface(Ci.nsILocalFile);\\n       var descriptor = getAbsoluteDescriptor(itemLocation);\\n       var line = \\\"Extension\\\" + i + \\\"=\\\" + descriptor + \\\"\\\\r\\\\n\\\";\\n       fos.write(line, line.length);\\n@@ -3781,7 +3754,7 @@ ExtensionManager.prototype = {\\n     try {\\n       var autoregFile = getFile(KEY_PROFILEDIR, [FILE_AUTOREG]);\\n       if (val && !autoregFile.exists())\\n-        autoregFile.create(nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n+        autoregFile.create(Ci.nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n     }\\n     catch (e) {\\n     }\\n@@ -4058,7 +4031,7 @@ ExtensionManager.prototype = {\\n             var branch = settingsThingy.getBranch(appPrefix + targetApp.id);\\n             var path = branch.getProperty(\\\"ExtensionsLocation\\\");\\n             var destination = Cc[\\\"@mozilla.org/file/local;1\\\"].\\n-                              createInstance(nsILocalFile);\\n+                              createInstance(Ci.nsILocalFile);\\n             destination.initWithPath(path);\\n             xpiFile.copyTo(file, xpiFile.leafName);\\n           }\\n@@ -4074,7 +4047,7 @@ ExtensionManager.prototype = {\\n      * within a xpi.\\n      */\\n     function installMultiXPI(xpiFile, installData) {\\n-      var fileURL = getURIFromFile(xpiFile).QueryInterface(nsIURL);\\n+      var fileURL = getURIFromFile(xpiFile).QueryInterface(Ci.nsIURL);\\n       if (fileURL.fileExtension.toLowerCase() != \\\"xpi\\\") {\\n         LOG(\\\"Invalid File Extension: Item: \\\\\\\"\\\" + fileURL.fileName + \\\"\\\\\\\" has an \\\" +\\n             \\\"invalid file extension. Only xpi file extensions are allowed for \\\" +\\n@@ -4103,7 +4076,7 @@ ExtensionManager.prototype = {\\n           var entryName = entries.getNext();\\n           var target = getFile(KEY_TEMPDIR, [entryName]);\\n           try {\\n-            target.createUnique(nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n+            target.createUnique(Ci.nsILocalFile.NORMAL_FILE_TYPE, PERMS_FILE);\\n           }\\n           catch (e) {\\n             LOG(\\\"installMultiXPI: failed to create target file for extraction \\\" +\\n@@ -4139,7 +4112,7 @@ ExtensionManager.prototype = {\\n     function IncompatibleObserver() {}\\n     IncompatibleObserver.prototype = {\\n       _id: null,\\n-      _type: nsIUpdateItem.TYPE_ANY,\\n+      _type: Ci.nsIUpdateItem.TYPE_ANY,\\n       _xpi: null,\\n       _installManifest: null,\\n       _installRDF: null,\\n@@ -4175,7 +4148,7 @@ ExtensionManager.prototype = {\\n                             installData.updateKey || \\\"\\\",\\n                             installData.type,\\n                             installData.currentApp.id);\\n-        em.update([item], 1, nsIExtensionManager.UPDATE_CHECK_COMPATIBILITY, this);\\n+        em.update([item], 1, Ci.nsIExtensionManager.UPDATE_CHECK_COMPATIBILITY, this);\\n       },\\n \\n       /**\\n@@ -4218,7 +4191,7 @@ ExtensionManager.prototype = {\\n         LOG(\\\"Version Check Phone Home Completed\\\");\\n         // Only compatibility updates (e.g. STATUS_VERSIONINFO) are currently\\n         // supported\\n-        if (status == nsIAddonUpdateCheckListener.STATUS_VERSIONINFO) {\\n+        if (status == Ci.nsIAddonUpdateCheckListener.STATUS_VERSIONINFO) {\\n           em.datasource.setTargetApplicationInfo(addon.id,\\n                                                  addon.targetAppID,\\n                                                  addon.minAppVersion,\\n@@ -4314,7 +4287,7 @@ ExtensionManager.prototype = {\\n       break;\\n     case INSTALLERROR_SUCCESS:\\n       // Installation of multiple extensions / themes contained within a single xpi.\\n-      if (installData.type == nsIUpdateItem.TYPE_MULTI_XPI) {\\n+      if (installData.type == Ci.nsIUpdateItem.TYPE_MULTI_XPI) {\\n         installMultiXPI(aXPIFile, installData);\\n         break;\\n       }\\n@@ -4426,7 +4399,7 @@ ExtensionManager.prototype = {\\n    */\\n   installRequiresRestart: function(id, type) {\\n     switch (type) {\\n-    case nsIUpdateItem.TYPE_THEME:\\n+    case Ci.nsIUpdateItem.TYPE_THEME:\\n       var internalName = this.datasource.getItemProperty(id, \\\"internalName\\\");\\n       var needsRestart = false;\\n       if (gPref.prefHasUserValue(PREF_DSS_SKIN_TO_SELECT))\\n@@ -5115,7 +5088,7 @@ ExtensionManager.prototype = {\\n     var appVersion = gApp.version;\\n \\n     if (items.length == 0)\\n-      items = this.getItemList(nsIUpdateItem.TYPE_ADDON, { });\\n+      items = this.getItemList(Ci.nsIUpdateItem.TYPE_ADDON, { });\\n \\n     var updater = new ExtensionItemUpdater(appID, appVersion, this);\\n     updater.checkForUpdates(items, items.length, updateCheckType, listener);\\n@@ -5133,7 +5106,7 @@ ExtensionManager.prototype = {\\n    */\\n   checkForBlocklistChanges: function() {\\n     var ds = this.datasource;\\n-    var items = this.getItemList(nsIUpdateItem.TYPE_ADDON, { });\\n+    var items = this.getItemList(Ci.nsIUpdateItem.TYPE_ADDON, { });\\n     for (var i = 0; i < items.length; ++i) {\\n       var id = items[i].id;\\n       ds.updateProperty(id, \\\"blocklisted\\\");\\n@@ -5141,7 +5114,7 @@ ExtensionManager.prototype = {\\n         this._appEnableItem(id);\\n     }\\n \\n-    items = ds.getBlocklistedItemList(null, null, nsIUpdateItem.TYPE_ADDON,\\n+    items = ds.getBlocklistedItemList(null, null, Ci.nsIUpdateItem.TYPE_ADDON,\\n                                       false);\\n     for (i = 0; i < items.length; ++i)\\n       this._appDisableItem(items[i].id);\\n@@ -5733,7 +5706,7 @@ BackgroundUpdateCheckListener.prototype = {\\n   },\\n \\n   onAddonUpdateEnded: function(item, status) {\\n-    if (status == nsIAddonUpdateCheckListener.STATUS_UPDATE) {\\n+    if (status == Ci.nsIAddonUpdateCheckListener.STATUS_UPDATE) {\\n       var lastupdate = this._emDS.getItemProperty(item.id, \\\"availableUpdateVersion\\\");\\n       if (lastupdate != item.version) {\\n         gPref.setBoolPref(PREF_UPDATE_NOTIFYUSER, true);\\n@@ -5887,7 +5860,7 @@ ExtensionItemUpdater.prototype = {\\n         this._em._appEnableItem(aLocalItem.id);\\n       return true;\\n     }\\n-    else if (this._updateCheckType == nsIExtensionManager.UPDATE_SYNC_COMPATIBILITY)\\n+    else if (this._updateCheckType == Ci.nsIExtensionManager.UPDATE_SYNC_COMPATIBILITY)\\n       this._emDS.updateTargetAppInfo(aLocalItem.id,\\n                                      aRemoteItem.targetAppID,\\n                                      aRemoteItem.minAppVersion,\\n@@ -5963,7 +5936,7 @@ RDFItemUpdater.prototype = {\\n     // A preference setting can disable updating for this item\\n     try {\\n       if (!gPref.getBoolPref(PREF_EM_ITEM_UPDATE_ENABLED.replace(/%UUID%/, aItem.id))) {\\n-        var status = nsIAddonUpdateCheckListener.STATUS_DISABLED;\\n+        var status = Ci.nsIAddonUpdateCheckListener.STATUS_DISABLED;\\n         this._updater.checkForDone(aItem, status);\\n         return;\\n       }\\n@@ -5973,7 +5946,7 @@ RDFItemUpdater.prototype = {\\n     // Items managed by the app are not checked for updates.\\n     var emDS = this._updater._emDS;\\n     if (emDS.getItemProperty(aItem.id, \\\"appManaged\\\") == \\\"true\\\") {\\n-      var status = nsIAddonUpdateCheckListener.STATUS_APP_MANAGED;\\n+      var status = Ci.nsIAddonUpdateCheckListener.STATUS_APP_MANAGED;\\n       this._updater.checkForDone(aItem, status);\\n       return;\\n     }\\n@@ -5982,7 +5955,7 @@ RDFItemUpdater.prototype = {\\n     // for updates.\\n     var opType = emDS.getItemProperty(aItem.id, \\\"opType\\\");\\n     if (opType) {\\n-      var status = nsIAddonUpdateCheckListener.STATUS_PENDING_OP;\\n+      var status = Ci.nsIAddonUpdateCheckListener.STATUS_PENDING_OP;\\n       this._updater.checkForDone(aItem, status);\\n       return;\\n     }\\n@@ -5992,16 +5965,16 @@ RDFItemUpdater.prototype = {\\n     // not managed by the app.\\n     if (installLocation && (installLocation.name == \\\"winreg-app-global\\\" ||\\n         installLocation.name == \\\"winreg-app-user\\\")) {\\n-      var status = nsIAddonUpdateCheckListener.STATUS_NOT_MANAGED;\\n+      var status = Ci.nsIAddonUpdateCheckListener.STATUS_NOT_MANAGED;\\n       this._updater.checkForDone(aItem, status);\\n       return;\\n     }\\n \\n     // Don't check items for updates if the location can't be written to except\\n     // when performing a version only update.\\n-    if ((aUpdateCheckType == nsIExtensionManager.UPDATE_CHECK_NEWVERSION) &&\\n+    if ((aUpdateCheckType == Ci.nsIExtensionManager.UPDATE_CHECK_NEWVERSION) &&\\n         (!installLocation || !installLocation.canAccess)) {\\n-      var status = nsIAddonUpdateCheckListener.STATUS_READ_ONLY;\\n+      var status = Ci.nsIAddonUpdateCheckListener.STATUS_READ_ONLY;\\n       this._updater.checkForDone(aItem, status);\\n       return;\\n     }\\n@@ -6077,7 +6050,7 @@ RDFItemUpdater.prototype = {\\n       LOG(\\\"RDFItemUpdater:checkForUpdates: There was an error loading the \\\\r\\\\n\\\" +\\n           \\\" update datasource for: \\\" + dsURI + \\\", item = \\\" + aItem.id + \\\", error: \\\" + e);\\n       this._updater.checkForDone(aItem,\\n-                                 nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n+                                 Ci.nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n       return;\\n     }\\n \\n@@ -6117,7 +6090,7 @@ RDFItemUpdater.prototype = {\\n       // one should not be a barrier in either case.\\n       LOG(\\\"RDFItemUpdater::onXMLLoad: \\\" + e);\\n       this._updater.checkForDone(aItem,\\n-                                 nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n+                                 Ci.nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n       return;\\n     }\\n     var responseXML = request.responseXML;\\n@@ -6127,8 +6100,8 @@ RDFItemUpdater.prototype = {\\n     // for updates on AMO even if they are not hosted there.\\n     if (!responseXML || responseXML.documentElement.namespaceURI == XMLURI_PARSE_ERROR ||\\n         (request.status != 200 && request.status != 0)) {\\n-      this._updater.checkForDone(aItem, (aItem.updateRDF ? nsIAddonUpdateCheckListener.STATUS_FAILURE :\\n-                                                           nsIAddonUpdateCheckListener.STATUS_NONE));\\n+      this._updater.checkForDone(aItem, (aItem.updateRDF ? Ci.nsIAddonUpdateCheckListener.STATUS_FAILURE :\\n+                                                           Ci.nsIAddonUpdateCheckListener.STATUS_NONE));\\n       return;\\n     }\\n \\n@@ -6165,7 +6138,7 @@ RDFItemUpdater.prototype = {\\n     LOG(\\\"RDFItemUpdater:onError: There was an error loading the \\\\r\\\\n\\\" +\\n         \\\"the update datasource for item \\\" + aItem.id + \\\", error: \\\" + statusText);\\n     this._updater.checkForDone(aItem,\\n-                               nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n+                               Ci.nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n   },\\n \\n   onDatasourceLoaded: function(aDatasource, aLocalItem) {\\n@@ -6240,28 +6213,28 @@ RDFItemUpdater.prototype = {\\n             if (!verifier.verifyData(updateString, signature, aLocalItem.updateKey)) {\\n               LOG(\\\"RDFItemUpdater:onDatasourceLoaded: Update manifest for \\\" +\\n                   aLocalItem.id + \\\" failed signature check.\\\");\\n-              this._updater.checkForDone(aLocalItem, nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n+              this._updater.checkForDone(aLocalItem, Ci.nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n               return;\\n             }\\n           }\\n           catch (e) {\\n             LOG(\\\"RDFItemUpdater:onDatasourceLoaded: Failed to verify signature for \\\" +\\n                 aLocalItem.id + \\\". This indicates a malformed update key or signature.\\\");\\n-            this._updater.checkForDone(aLocalItem, nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n+            this._updater.checkForDone(aLocalItem, Ci.nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n             return;\\n           }\\n         }\\n         catch (e) {\\n           LOG(\\\"RDFItemUpdater:onDatasourceLoaded: Failed to generate signature \\\" +\\n               \\\"string for \\\" + aLocalItem.id + \\\". Serializer threw \\\" + e);\\n-          this._updater.checkForDone(aLocalItem, nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n+          this._updater.checkForDone(aLocalItem, Ci.nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n           return;\\n         }\\n       }\\n       else {\\n         LOG(\\\"RDFItemUpdater:onDatasourceLoaded: Update manifest for \\\" +\\n             aLocalItem.id + \\\" did not contain a signature.\\\");\\n-        this._updater.checkForDone(aLocalItem, nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n+        this._updater.checkForDone(aLocalItem, Ci.nsIAddonUpdateCheckListener.STATUS_FAILURE);\\n         return;\\n       }\\n     }\\n@@ -6272,13 +6245,13 @@ RDFItemUpdater.prototype = {\\n     var newerItem, sameItem;\\n \\n     // Firefox 1.0PR+ update.rdf format\\n-    if (this._updateCheckType == nsIExtensionManager.UPDATE_CHECK_NEWVERSION) {\\n+    if (this._updateCheckType == Ci.nsIExtensionManager.UPDATE_CHECK_NEWVERSION) {\\n       // Look for newer versions of this item, we only do this in \\\"normal\\\"\\n       // mode... see comment by ExtensionItemUpdater_checkForUpdates\\n       // about how we do this in all cases but Install Phone Home - which\\n       // only needs to do a version check.\\n       newerItem = this._parseV20UpdateInfo(aDatasource, aLocalItem,\\n-                                           nsIExtensionManager.UPDATE_CHECK_NEWVERSION);\\n+                                           Ci.nsIExtensionManager.UPDATE_CHECK_NEWVERSION);\\n \\n       if (newerItem) {\\n         ++this._updater._updateCount;\\n@@ -6290,7 +6263,7 @@ RDFItemUpdater.prototype = {\\n     // Now look for updated version compatibility metadata for the currently\\n     // installed version...\\n     sameItem = this._parseV20UpdateInfo(aDatasource, aLocalItem,\\n-                                        nsIExtensionManager.UPDATE_CHECK_COMPATIBILITY);\\n+                                        Ci.nsIExtensionManager.UPDATE_CHECK_COMPATIBILITY);\\n \\n     if (sameItem) {\\n       // Install-time updates are not written to the DS because there is no\\n@@ -6303,19 +6276,19 @@ RDFItemUpdater.prototype = {\\n         LOG(\\\"RDFItemUpdater:onDatasourceLoaded: Found info about the installed\\\\r\\\\n\\\" +\\n             \\\"version of this item: \\\" + sameItem.objectSource);\\n     }\\n-    var item = null, status = nsIAddonUpdateCheckListener.STATUS_NONE;\\n-    if (this._updateCheckType == nsIExtensionManager.UPDATE_CHECK_NEWVERSION\\n+    var item = null, status = Ci.nsIAddonUpdateCheckListener.STATUS_NONE;\\n+    if (this._updateCheckType == Ci.nsIExtensionManager.UPDATE_CHECK_NEWVERSION\\n         && newerItem) {\\n       item = newerItem;\\n-      status = nsIAddonUpdateCheckListener.STATUS_UPDATE;\\n+      status = Ci.nsIAddonUpdateCheckListener.STATUS_UPDATE;\\n     }\\n     else if (sameItem) {\\n       item = sameItem;\\n-      status = nsIAddonUpdateCheckListener.STATUS_VERSIONINFO;\\n+      status = Ci.nsIAddonUpdateCheckListener.STATUS_VERSIONINFO;\\n     }\\n     else {\\n       item = aLocalItem;\\n-      status = nsIAddonUpdateCheckListener.STATUS_NO_UPDATE;\\n+      status = Ci.nsIAddonUpdateCheckListener.STATUS_NO_UPDATE;\\n     }\\n     // Only one call of this._updater.checkForDone is needed for RDF\\n     // responses, since there is only one response per item.\\n@@ -6428,7 +6401,7 @@ RDFItemUpdater.prototype = {\\n      * version is greater than any previously found update. Otherwise check\\n      * if this update is for the same version as we have installed. */\\n     var result = gVersionChecker.compare(version, aNewestVersionFound);\\n-    if (aUpdateCheckType == nsIExtensionManager.UPDATE_CHECK_NEWVERSION ? result <= 0 : result != 0)\\n+    if (aUpdateCheckType == Ci.nsIExtensionManager.UPDATE_CHECK_NEWVERSION ? result <= 0 : result != 0)\\n       return null;\\n \\n     var taArc = gRDF.GetResource(EM_NS(\\\"targetApplication\\\"));\\n@@ -6444,7 +6417,7 @@ RDFItemUpdater.prototype = {\\n \\n       var updateLink = this._getPropertyFromResource(aDataSource, targetApp, \\\"updateLink\\\", aLocalItem);\\n       var updateHash = this._getPropertyFromResource(aDataSource, targetApp, \\\"updateHash\\\", aLocalItem);\\n-      if (aUpdateCheckType == nsIExtensionManager.UPDATE_CHECK_NEWVERSION) {\\n+      if (aUpdateCheckType == Ci.nsIExtensionManager.UPDATE_CHECK_NEWVERSION) {\\n         // New version information is useless without a link to get it from\\n         if (!updateLink)\\n           continue;\\n@@ -6477,7 +6450,7 @@ RDFItemUpdater.prototype = {\\n                                  appID);\\n \\n       if (this._updater._isValidUpdate(aLocalItem, updatedItem)) {\\n-        if (aUpdateCheckType == nsIExtensionManager.UPDATE_CHECK_NEWVERSION) {\\n+        if (aUpdateCheckType == Ci.nsIExtensionManager.UPDATE_CHECK_NEWVERSION) {\\n           var infourl = this._getPropertyFromResource(aDataSource, targetApp,\\n                                                       \\\"updateInfoURL\\\");\\n           if (infourl)\\n@@ -7688,8 +7661,8 @@ ExtensionsDataSource.prototype = {\\n    *          The version of the item\\n    */\\n   addIncompatibleUpdateItem: function(name, url, type, version) {\\n-    var iconURL = (type == nsIUpdateItem.TYPE_THEME) ? URI_GENERIC_ICON_THEME :\\n-                                                       URI_GENERIC_ICON_XPINSTALL;\\n+    var iconURL = (type == Ci.nsIUpdateItem.TYPE_THEME) ? URI_GENERIC_ICON_THEME :\\n+                                                          URI_GENERIC_ICON_XPINSTALL;\\n     var extensionsStrings = BundleManager.getBundle(URI_EXTENSIONS_PROPERTIES);\\n     var updateMsg = extensionsStrings.formatStringFromName(\\\"incompatibleUpdateMessage\\\",\\n                                                            [BundleManager.appName, name], 2)\\n@@ -7878,7 +7851,7 @@ ExtensionsDataSource.prototype = {\\n \\n     LOG(\\\"Datasource: Addon Update Ended: \\\" + addon.id + \\\", status: \\\" + status);\\n     var url = null, hash = null, version = null;\\n-    var updateAvailable = status == nsIAddonUpdateCheckListener.STATUS_UPDATE;\\n+    var updateAvailable = status == Ci.nsIAddonUpdateCheckListener.STATUS_UPDATE;\\n     if (updateAvailable) {\\n       url = EM_L(addon.xpiURL);\\n       if (addon.xpiHash)\\n@@ -7938,7 +7911,7 @@ ExtensionsDataSource.prototype = {\\n   _rdfGet_iconURL: function(item, property) {\\n     var id = stripPrefix(item.Value, PREFIX_ITEM_URI);\\n     var type = this.getItemProperty(id, \\\"type\\\");\\n-    if (type & nsIUpdateItem.TYPE_THEME)\\n+    if (type & Ci.nsIUpdateItem.TYPE_THEME)\\n       return this._getThemeImageURL(item, \\\"icon.png\\\", URI_GENERIC_ICON_THEME);\\n \\n     if (inSafeMode())\\n@@ -7969,7 +7942,7 @@ ExtensionsDataSource.prototype = {\\n    */\\n   _rdfGet_previewImage: function(item, property) {\\n     var type = this.getItemProperty(stripPrefix(item.Value, PREFIX_ITEM_URI), \\\"type\\\");\\n-    if (type != -1 && type & nsIUpdateItem.TYPE_THEME)\\n+    if (type != -1 && type & Ci.nsIUpdateItem.TYPE_THEME)\\n       return this._getThemeImageURL(item, \\\"preview.png\\\", null);\\n     return null;\\n   },\\n\""}