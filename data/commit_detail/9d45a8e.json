{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas9d45a8e\""},"diff":"\"9d45a8e Bug 392967: Load app and extension prefs separately. r=bsmedberg\\ndiff --git a/modules/libpref/public/nsIPrefService.idl b/modules/libpref/public/nsIPrefService.idl\\nindex 087b6a1..20a7513 100644\\n--- a/modules/libpref/public/nsIPrefService.idl\\n+++ b/modules/libpref/public/nsIPrefService.idl\\n@@ -179,4 +179,11 @@ interface nsIPrefService : nsISupports\\n  */\\n #define NS_PREFSERVICE_RESET_TOPIC_ID \\\"prefservice:before-reset\\\"\\n \\n+/**\\n+ * Notification sent when after reading app-provided default\\n+ * preferences, but before user profile override defaults or extension\\n+ * defaults are loaded.\\n+ */\\n+#define NS_PREFSERVICE_APPDEFAULTS_TOPIC_ID \\\"prefservice:after-app-defaults\\\"\\n+\\n %}\\ndiff --git a/modules/libpref/src/nsPrefService.cpp b/modules/libpref/src/nsPrefService.cpp\\nindex e7d96a9..d4edf63 100644\\n--- a/modules/libpref/src/nsPrefService.cpp\\n+++ b/modules/libpref/src/nsPrefService.cpp\\n@@ -717,6 +717,32 @@ pref_LoadPrefsInDir(nsIFile* aDir, char const *const *aSpecialFiles, PRUint32 aS\\n   return rv;\\n }\\n \\n+static nsresult pref_LoadPrefsInDirList(const char *listId)\\n+{\\n+  nsresult rv;\\n+  nsCOMPtr<nsIProperties> dirSvc(do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv));\\n+  if (NS_FAILED(rv)) return rv;\\n+\\n+  nsCOMPtr<nsISimpleEnumerator> dirList;\\n+  dirSvc->Get(listId,\\n+              NS_GET_IID(nsISimpleEnumerator),\\n+              getter_AddRefs(dirList));\\n+  if (dirList) {\\n+    PRBool hasMore;\\n+    while (NS_SUCCEEDED(dirList->HasMoreElements(&hasMore)) && hasMore) {\\n+      nsCOMPtr<nsISupports> elem;\\n+      dirList->GetNext(getter_AddRefs(elem));\\n+      if (elem) {\\n+        nsCOMPtr<nsIFile> dir = do_QueryInterface(elem);\\n+        if (dir) {\\n+          // Do we care if a file provided by this process fails to load?\\n+          pref_LoadPrefsInDir(dir, nsnull, 0); \\n+        }\\n+      }\\n+    }\\n+  }\\n+  return NS_OK;\\n+}\\n \\n //----------------------------------------------------------------------------------------\\n // Initialize default preference JavaScript buffers from\\n@@ -773,30 +799,19 @@ static nsresult pref_InitInitialObjects()\\n     NS_WARNING(\\\"Error parsing application default preferences.\\\");\\n   }\\n \\n-  // xxxbsmedberg: TODO load default prefs from a category\\n-  // but the architecture is not quite there yet\\n+  rv = pref_LoadPrefsInDirList(NS_APP_PREFS_DEFAULTS_DIR_LIST);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  nsCOMPtr<nsIProperties> dirSvc(do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv));\\n-  if (NS_FAILED(rv)) return rv;\\n+  NS_CreateServicesFromCategory(NS_PREFSERVICE_APPDEFAULTS_TOPIC_ID,\\n+                                nsnull, NS_PREFSERVICE_APPDEFAULTS_TOPIC_ID);\\n \\n-  nsCOMPtr<nsISimpleEnumerator> dirList;\\n-  dirSvc->Get(NS_APP_PREFS_DEFAULTS_DIR_LIST,\\n-              NS_GET_IID(nsISimpleEnumerator),\\n-              getter_AddRefs(dirList));\\n-  if (dirList) {\\n-    PRBool hasMore;\\n-    while (NS_SUCCEEDED(dirList->HasMoreElements(&hasMore)) && hasMore) {\\n-      nsCOMPtr<nsISupports> elem;\\n-      dirList->GetNext(getter_AddRefs(elem));\\n-      if (elem) {\\n-        nsCOMPtr<nsIFile> dir = do_QueryInterface(elem);\\n-        if (dir) {\\n-          // Do we care if a file provided by this process fails to load?\\n-          pref_LoadPrefsInDir(dir, nsnull, 0); \\n-        }\\n-      }\\n-    }\\n-  }\\n+  nsCOMPtr<nsIObserverService> observerService = \\n+    do_GetService(\\\"@mozilla.org/observer-service;1\\\", &rv);\\n+  \\n+  if (NS_FAILED(rv) || !observerService)\\n+    return rv;\\n \\n-  return NS_OK;\\n+  observerService->NotifyObservers(nsnull, NS_PREFSERVICE_APPDEFAULTS_TOPIC_ID, nsnull);\\n+\\n+  return pref_LoadPrefsInDirList(NS_EXT_PREFS_DEFAULTS_DIR_LIST);\\n }\\ndiff --git a/toolkit/xre/nsXREDirProvider.cpp b/toolkit/xre/nsXREDirProvider.cpp\\nindex 3fea87e..ace429f 100644\\n--- a/toolkit/xre/nsXREDirProvider.cpp\\n+++ b/toolkit/xre/nsXREDirProvider.cpp\\n@@ -640,7 +640,14 @@ nsXREDirProvider::GetFilesInternal(const char* aProperty,\\n \\n        LoadAppPlatformDirIntoArray(mXULAppDir, kAppendPrefDir, directories);\\n     }\\n-    \\n+\\n+    rv = NS_NewArrayEnumerator(aResult, directories);\\n+  }\\n+  else if (!strcmp(aProperty, NS_EXT_PREFS_DEFAULTS_DIR_LIST)) {\\n+    static const char *const kAppendPrefDir[] = { \\\"defaults\\\", \\\"preferences\\\", nsnull };\\n+    nsCOMArray<nsIFile> directories;\\n+    PRBool exists;\\n+\\n     if (mProfileDir) {\\n       nsCOMPtr<nsIFile> overrideFile;\\n       mProfileDir->Clone(getter_AddRefs(overrideFile));\\ndiff --git a/xpcom/io/nsAppDirectoryServiceDefs.h b/xpcom/io/nsAppDirectoryServiceDefs.h\\nindex 8f5f06b..f21e915 100755\\n--- a/xpcom/io/nsAppDirectoryServiceDefs.h\\n+++ b/xpcom/io/nsAppDirectoryServiceDefs.h\\n@@ -96,6 +96,7 @@\\n #define NS_APP_PREFS_50_DIR                     \\\"PrefD\\\"         // Directory which contains user prefs       \\n #define NS_APP_PREFS_50_FILE                    \\\"PrefF\\\"\\n #define NS_APP_PREFS_DEFAULTS_DIR_LIST          \\\"PrefDL\\\"\\n+#define NS_EXT_PREFS_DEFAULTS_DIR_LIST          \\\"ExtPrefDL\\\"\\n #define NS_APP_PREFS_OVERRIDE_DIR               \\\"PrefDOverride\\\" // Directory for per-profile defaults\\n         \\n #define NS_APP_USER_PROFILE_50_DIR              \\\"ProfD\\\"\\n\""}