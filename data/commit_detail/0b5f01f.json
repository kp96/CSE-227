{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0b5f01f\""},"diff":"\"0b5f01f Bug 377243 - [SoC] Implement Download Resume.  Patch by Brahmana <om.brahmana@gmail.com> and Shawn Wilsher <me@shawnwilsher.com>.  r=sdwilsh, r=mconnor, a=[wanted-firefox3]\\ndiff --git a/toolkit/components/downloads/src/nsDownloadManager.cpp b/toolkit/components/downloads/src/nsDownloadManager.cpp\\nindex 7e00536..57dfed1 100644\\n--- a/toolkit/components/downloads/src/nsDownloadManager.cpp\\n+++ b/toolkit/components/downloads/src/nsDownloadManager.cpp\\n@@ -23,6 +23,7 @@\\n  *   Blake Ross <blaker@netscape.com> (Original Author)\\n  *   Ben Goodger <ben@netscape.com> (Original Author)\\n  *   Shawn Wilsher <me@shawnwilsher.com>\\n+ *   Srirang G Doddihal <brahmana@doddihal.com>\\n  *\\n  * Alternatively, the contents of this file may be used under the terms of\\n  * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n@@ -71,6 +72,7 @@\\n #include \\\"nsIHttpChannel.h\\\"\\n #include \\\"nsIDownloadManagerUI.h\\\"\\n #include \\\"nsTArray.h\\\"\\n+#include \\\"nsIResumableChannel.h\\\"\\n \\n #ifdef XP_WIN\\n #include <shlobj.h>\\n@@ -89,7 +91,7 @@ static PRBool gStoppingDownloads = PR_FALSE;\\n \\n static const PRInt64 gUpdateInterval = 400 * PR_USEC_PER_MSEC;\\n \\n-#define DM_SCHEMA_VERSION      3\\n+#define DM_SCHEMA_VERSION      4\\n #define DM_DB_NAME             NS_LITERAL_STRING(\\\"downloads.sqlite\\\")\\n #define DM_DB_CORRUPT_FILENAME NS_LITERAL_STRING(\\\"downloads.sqlite.corrupt\\\")\\n \\n@@ -147,11 +149,67 @@ nsDownloadManager::CompleteDownload(nsDownload *aDownload)\\n {\\n   // we've stopped, so break the cycle we created at download start\\n   aDownload->mCancelable = nsnull;\\n+  aDownload->mEntityID.Truncate();\\n+  if (aDownload->mWasResumed)\\n+    (void)ExecuteDesiredAction(aDownload);\\n \\n   (void)mCurrentDownloads.RemoveObject(aDownload);\\n }\\n \\n nsresult\\n+nsDownloadManager::ExecuteDesiredAction(nsDownload *aDownload)\\n+{\\n+  // If we have a temp file and we have resumed, we have to do what the external\\n+  // helper app service would have done.\\n+  if (!aDownload->mTempFile && !aDownload->mWasResumed)\\n+    return NS_OK;\\n+\\n+  // Find out if it was a SaveToDisk kind of a download\\n+  nsHandlerInfoAction action = nsIMIMEInfo::saveToDisk;\\n+  nsresult rv;\\n+  if (aDownload->mMIMEInfo) {\\n+    rv = aDownload->mMIMEInfo->GetPreferredAction(&action);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+  }\\n+\\n+  switch (action) {\\n+    case nsIMIMEInfo::saveToDisk:\\n+      // For this instance, we need to move the file to the proper location\\n+      {\\n+        nsCOMPtr<nsILocalFile> target;\\n+        rv = aDownload->GetTargetFile(getter_AddRefs(target));\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+        // MoveTo will fail if the file already exists, but we've already\\n+        // obtained confirmation from the user that this is OK.  So, we have\\n+        // to remove it if it exists.\\n+        PRBool fileExists;\\n+        if (NS_SUCCEEDED(target->Exists(&fileExists)) && fileExists) {\\n+          rv = target->Remove(PR_FALSE);\\n+          NS_ENSURE_SUCCESS(rv, rv);\\n+        }\\n+\\n+        // extract the new leaf name from the file location\\n+        nsAutoString fileName;\\n+        rv = target->GetLeafName(fileName);\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+        nsCOMPtr<nsIFile> dir;\\n+        rv = target->GetParent(getter_AddRefs(dir));\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+        if (dir) {\\n+          rv = aDownload->mTempFile->MoveTo(dir, fileName);\\n+          NS_ENSURE_SUCCESS(rv, rv);\\n+        }\\n+      }\\n+      break;\\n+    default:\\n+      break;\\n+  }\\n+\\n+  return NS_OK;\\n+}\\n+\\n+nsresult\\n nsDownloadManager::InitDB(PRBool *aDoImport)\\n {\\n   nsresult rv;\\n@@ -277,6 +335,20 @@ nsDownloadManager::InitDB(PRBool *aDoImport)\\n     }\\n     // Fallthrough to the next upgrade\\n \\n+  case 3: // This version adds a column to the database (entityID)\\n+    {\\n+      rv = mDBConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\\n+        \\\"ALTER TABLE moz_downloads \\\"\\n+        \\\"ADD COLUMN entityID TEXT\\\"));\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+      // Finally, update the schemaVersion variable and the database schema\\n+      schemaVersion = 4;\\n+      rv = mDBConn->SetSchemaVersion(schemaVersion);\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+    }\\n+    // Fallthrough to the next upgrade\\n+\\n   case DM_SCHEMA_VERSION:\\n     break;\\n \\n@@ -303,7 +375,8 @@ nsDownloadManager::InitDB(PRBool *aDoImport)\\n     {\\n       nsCOMPtr<mozIStorageStatement> stmt;\\n       rv = mDBConn->CreateStatement(NS_LITERAL_CSTRING(\\n-        \\\"SELECT id, name, source, target, startTime, endTime, state, referrer \\\"\\n+        \\\"SELECT id, name, source, target, startTime, endTime, state, referrer, \\\"\\n+        \\\"entityID \\\"\\n         \\\"FROM moz_downloads\\\"), getter_AddRefs(stmt));\\n       if (NS_SUCCEEDED(rv))\\n         break;\\n@@ -344,7 +417,8 @@ nsDownloadManager::CreateTable()\\n       \\\"startTime INTEGER, \\\"\\n       \\\"endTime INTEGER, \\\"\\n       \\\"state INTEGER, \\\"\\n-      \\\"referrer TEXT\\\"\\n+      \\\"referrer TEXT, \\\"\\n+      \\\"entityID TEXT\\\"\\n     \\\")\\\"));\\n }\\n \\n@@ -631,8 +705,8 @@ nsDownloadManager::Init()\\n \\n   rv = mDBConn->CreateStatement(NS_LITERAL_CSTRING(\\n     \\\"UPDATE moz_downloads \\\"\\n-    \\\"SET startTime = ?1, endTime = ?2, state = ?3, referrer = ?4 \\\"\\n-    \\\"WHERE id = ?5\\\"), getter_AddRefs(mUpdateDownloadStatement));\\n+    \\\"SET startTime = ?1, endTime = ?2, state = ?3, referrer = ?4, entityID = ?5 \\\"\\n+    \\\"WHERE id = ?6\\\"), getter_AddRefs(mUpdateDownloadStatement));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   // The following three AddObserver calls must be the last lines in this function,\\n@@ -676,7 +750,7 @@ nsDownloadManager::GetDownloadFromDB(PRUint32 aID, nsDownload **retVal)\\n   // First, let's query the database and see if it even exists\\n   nsCOMPtr<mozIStorageStatement> stmt;\\n   nsresult rv = mDBConn->CreateStatement(NS_LITERAL_CSTRING(\\n-    \\\"SELECT id, state, startTime, source, target, name, referrer \\\"\\n+    \\\"SELECT id, state, startTime, source, target, name, referrer, entityID \\\"\\n     \\\"FROM moz_downloads \\\"\\n     \\\"WHERE id = ?1\\\"), getter_AddRefs(stmt));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n@@ -742,6 +816,9 @@ nsDownloadManager::GetDownloadFromDB(PRUint32 aID, nsDownload **retVal)\\n     dl->mCurrBytes = 0;\\n   }\\n \\n+  rv = stmt->GetUTF8String(7, dl->mEntityID);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n   // Addrefing and returning\\n   NS_ADDREF(*retVal = dl);\\n   return NS_OK;\\n@@ -1413,6 +1490,7 @@ nsDownload::nsDownload() : mDownloadState(nsIDownloadManager::DOWNLOAD_NOTSTARTE\\n                            mStartTime(0),\\n                            mLastUpdate(PR_Now() - (PRUint32)gUpdateInterval),\\n                            mPaused(PR_FALSE),\\n+                           mWasResumed(PR_FALSE),\\n                            mSpeed(0)\\n {\\n }\\n@@ -1635,6 +1713,13 @@ nsDownload::OnProgressChange64(nsIWebProgress *aWebProgress,\\n       }\\n     }\\n \\n+    //Fetch the entityID\\n+    nsCOMPtr<nsIResumableChannel> resumableChannel(do_QueryInterface(aRequest));\\n+    if (resumableChannel) {\\n+      rv = resumableChannel->GetEntityID(mEntityID);\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+    }\\n+\\n     // Update the state and the database\\n     rv = SetState(nsIDownloadManager::DOWNLOAD_DOWNLOADING);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n@@ -1956,15 +2041,94 @@ nsDownload::PauseResume(PRBool aPause)\\n   if (mPaused == aPause || !mRequest)\\n     return NS_OK;\\n \\n-  if (aPause) {\\n-    nsresult rv = mRequest->Suspend();\\n+  nsHandlerInfoAction action = nsIMIMEInfo::saveToDisk;\\n+  nsresult rv;\\n+  if (mMIMEInfo) {\\n+    rv = mMIMEInfo->GetPreferredAction(&action);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n+  }\\n+\\n+  PRBool resumable = PR_FALSE;\\n+  if (action == nsIMIMEInfo::saveToDisk && !mEntityID.IsEmpty())\\n+    resumable = PR_TRUE;\\n+\\n+  if (aPause) {\\n+    if (resumable) {\\n+      rv = mCancelable->Cancel(NS_BINDING_ABORTED);\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+    } else { \\n+      // This is for non-resumable downloads and downloads that are used with\\n+      // \\\"Open With...\\\".\\n+      rv = mRequest->Suspend();\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+    }\\n     mPaused = PR_TRUE;\\n     return SetState(nsIDownloadManager::DOWNLOAD_PAUSED);\\n   }\\n \\n-  nsresult rv = mRequest->Resume();\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n+  if (resumable) {\\n+    mWasResumed = PR_TRUE;\\n+\\n+    nsCOMPtr<nsIWebBrowserPersist> wbp =\\n+      do_CreateInstance(\\\"@mozilla.org/embedding/browser/nsWebBrowserPersist;1\\\", &rv);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    rv = wbp->SetPersistFlags(nsIWebBrowserPersist::PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    // Create a new channel for the source URI\\n+    nsCOMPtr<nsIChannel> channel;\\n+    nsCOMPtr<nsIInterfaceRequestor> ir(do_QueryInterface(wbp));\\n+    rv = NS_NewChannel(getter_AddRefs(channel), mSource, nsnull, nsnull, ir);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    // Get the size of the temporary or target file to be used as offset.\\n+    PRInt64 fileSize;\\n+    nsCOMPtr<nsILocalFile> targetLocalFile(mTempFile);\\n+    if (!targetLocalFile) {\\n+      rv = GetTargetFile(getter_AddRefs(targetLocalFile));\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+    }\\n+    // We need to get a new nsIFile though because of caching issues with the\\n+    // file size.  Cloning it takes care of this :(\\n+    nsCOMPtr<nsIFile> clone;\\n+    rv = targetLocalFile->Clone(getter_AddRefs(clone));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    rv = clone->GetFileSize(&fileSize);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    // Set the channel to resume at the right position along with the entityID\\n+    nsCOMPtr<nsIResumableChannel> resumableChannel(do_QueryInterface(channel));\\n+    if (!resumableChannel)\\n+      return NS_ERROR_UNEXPECTED;\\n+    rv = resumableChannel->ResumeAt(fileSize, mEntityID);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    // Set the referrer\\n+    if (mReferrer) {\\n+      nsCOMPtr<nsIHttpChannel> httpChannel(do_QueryInterface(channel));\\n+      if (httpChannel) {\\n+        rv = httpChannel->SetReferrer(mReferrer);\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+      }\\n+    }\\n+\\n+    // Creates a cycle that will be broken when the download finishes\\n+    mCancelable = wbp;\\n+    (void)wbp->SetProgressListener(this);\\n+\\n+    // Save the channel using nsIWBP.\\n+    rv = wbp->SaveChannel(channel, targetLocalFile);\\n+    if (NS_FAILED(rv)) {\\n+      mCancelable = nsnull;\\n+      (void)wbp->SetProgressListener(nsnull);\\n+      return rv;\\n+    }\\n+  } else {\\n+    rv = mRequest->Resume();\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+  }\\n+\\n   mPaused = PR_FALSE;\\n   return SetState(nsIDownloadManager::DOWNLOAD_DOWNLOADING);\\n }\\n@@ -2000,8 +2164,12 @@ nsDownload::UpdateDB()\\n   }\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n+  //entityID\\n+  rv = stmt->BindUTF8StringParameter(4, mEntityID);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n   // id\\n-  rv = stmt->BindInt64Parameter(4, mID);\\n+  rv = stmt->BindInt64Parameter(5, mID);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   return stmt->Execute();\\ndiff --git a/toolkit/components/downloads/src/nsDownloadManager.h b/toolkit/components/downloads/src/nsDownloadManager.h\\nindex d760a59..2ccf60c 100644\\n--- a/toolkit/components/downloads/src/nsDownloadManager.h\\n+++ b/toolkit/components/downloads/src/nsDownloadManager.h\\n@@ -23,6 +23,7 @@\\n  *   Blake Ross <blaker@netscape.com>\\n  *   Ben Goodger <ben@netscape.com>\\n  *   Shawn Wilsher <me@shawnwilsher.com>\\n+ *   Srirang G Doddihal <brahmana@doddihal.com>\\n  *\\n  * Alternatively, the contents of this file may be used under the terms of\\n  * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n@@ -158,6 +159,7 @@ protected:\\n                                   const PRUnichar* aDontCancelButton);\\n \\n   PRInt32  GetRetentionBehavior();\\n+  nsresult ExecuteDesiredAction(nsDownload *aDownload);\\n \\n   static PRBool IsInFinalStage(DownloadState aState)\\n   {\\n@@ -227,6 +229,7 @@ protected:\\n \\n private:\\n   nsString mDisplayName;\\n+  nsCString mEntityID;\\n \\n   nsCOMPtr<nsIURI> mSource;\\n   nsCOMPtr<nsIURI> mReferrer;\\n@@ -245,6 +248,7 @@ private:\\n   PRTime mStartTime;\\n   PRTime mLastUpdate;\\n   PRBool mPaused;\\n+  PRBool mWasResumed;\\n   double mSpeed;\\n \\n   friend class nsDownloadManager;\\ndiff --git a/toolkit/components/downloads/test/schema_migration/test_migration_to_4.js b/toolkit/components/downloads/test/schema_migration/test_migration_to_4.js\\nnew file mode 100644\\nindex 0000000..c560581\\n--- /dev/null\\n+++ b/toolkit/components/downloads/test/schema_migration/test_migration_to_4.js\\n@@ -0,0 +1,79 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is Download Manager Test Code.\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Mozilla Corporation.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *   Shawn Wilsher <me@shawnwilsher.com> (Original Author)\\n+ *   Srirang G Doddihal <brahmana@doddihal.com>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by declaring the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not declare\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+// This file tests migration from v3 to v4\\n+\\n+function run_test()\\n+{\\n+  // First import the downloads.sqlite file\\n+  importDatabaseFile(\\\"v3.sqlite\\\");\\n+\\n+  // ok, now it is OK to init the download manager - this will perform the\\n+  // migration!\\n+  var dm = Cc[\\\"@mozilla.org/download-manager;1\\\"].\\n+           getService(Ci.nsIDownloadManager);\\n+  var dbConn = dm.DBConnection;\\n+  var stmt = null;\\n+\\n+  // check schema version\\n+  do_check_true(dbConn.schemaVersion >= 4);\\n+\\n+  // Check that the column exists (statement should not throw)\\n+  stmt = dbConn.createStatement(\\\"SELECT entityID FROM moz_downloads\\\");\\n+\\n+  // now we check the entries\\n+  stmt = dbConn.createStatement(\\n+    \\\"SELECT name, source, target, startTime, endTime, state, referrer, entityID \\\" +\\n+    \\\"FROM moz_downloads \\\" +\\n+    \\\"WHERE id = 27\\\");\\n+  stmt.executeStep();\\n+  do_check_eq(\\\"Firefox 2.0.0.6.dmg\\\", stmt.getString(0));\\n+  do_check_eq(\\\"http://ftp-mozilla.netscape.com/pub/mozilla.org/firefox/releases/2.0.0.6/mac/en-US/Firefox%202.0.0.6.dmg\\\",\\n+              stmt.getUTF8String(1));\\n+  do_check_eq(\\\"file:///Users/sdwilsh/Desktop/Firefox%202.0.0.6.dmg\\\",\\n+              stmt.getUTF8String(2));\\n+  do_check_eq(1187390974170783, stmt.getInt64(3));\\n+  do_check_eq(1187391001257446, stmt.getInt64(4));\\n+  do_check_eq(1, stmt.getInt32(5));\\n+  do_check_eq(\\\"http://www.mozilla.com/en-US/products/download.html?product=firefox-2.0.0.6&os=osx&lang=en-US\\\",stmt.getUTF8String(6));\\n+  do_check_true(stmt.getIsNull(7));\\n+  stmt.reset();\\n+\\n+  cleanup();\\n+}\\n+\\ndiff --git a/toolkit/components/downloads/test/schema_migration/v3.sqlite b/toolkit/components/downloads/test/schema_migration/v3.sqlite\\nnew file mode 100644\\nindex 0000000..9924dbe\\nBinary files /dev/null and b/toolkit/components/downloads/test/schema_migration/v3.sqlite differ\\n\""}