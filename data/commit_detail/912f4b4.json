{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas912f4b4\""},"diff":"\"912f4b4 Fix old bug involving eval of a local function named by an existing local var (395907, r=mrbkap).\\ndiff --git a/js/src/jsemit.c b/js/src/jsemit.c\\nindex e8de036..fdaabfa 100644\\n--- a/js/src/jsemit.c\\n+++ b/js/src/jsemit.c\\n@@ -4004,6 +4004,7 @@ js_EmitTree(JSContext *cx, JSCodeGenerator *cg, JSParseNode *pn)\\n         void *cg2mark;\\n         JSCodeGenerator *cg2;\\n         JSFunction *fun;\\n+        uintN slot;\\n \\n #if JS_HAS_XML_SUPPORT\\n         if (pn->pn_arity == PN_NULLARY) {\\n@@ -4072,29 +4073,46 @@ js_EmitTree(JSContext *cx, JSCodeGenerator *cg, JSParseNode *pn)\\n          */\\n         CG_SWITCH_TO_PROLOG(cg);\\n \\n-        if (cg->treeContext.flags & TCF_IN_FUNCTION) {\\n+        op = JSOP_DEFFUN;\\n+#ifdef __GNUC__\\n+        slot = 0;   /* quell GCC overwarning */\\n+#endif\\n+        JS_ASSERT((cg->treeContext.flags & TCF_IN_FUNCTION) ||\\n+                  !cg->treeContext.topStmt);\\n+\\n+        if ((cg->treeContext.flags & TCF_IN_FUNCTION) ||\\n+            ((cx->fp->flags & JSFRAME_SPECIAL) && cx->fp->fun)) {\\n             JSObject *obj, *pobj;\\n             JSProperty *prop;\\n             JSScopeProperty *sprop;\\n-            uintN slot;\\n \\n-            obj = OBJ_GET_PARENT(cx, fun->object);\\n+            obj = (cg->treeContext.flags & TCF_IN_FUNCTION)\\n+                  ? OBJ_GET_PARENT(cx, fun->object)\\n+                  : cx->fp->fun->object;\\n             if (!js_LookupHiddenProperty(cx, obj, ATOM_TO_JSID(fun->atom),\\n                                          &pobj, &prop)) {\\n                 return JS_FALSE;\\n             }\\n \\n-            JS_ASSERT(prop && pobj == obj);\\n-            sprop = (JSScopeProperty *) prop;\\n-            JS_ASSERT(sprop->getter == js_GetLocalVariable);\\n-            slot = sprop->shortid;\\n-            OBJ_DROP_PROPERTY(cx, pobj, prop);\\n+            if (prop) {\\n+                if (pobj == obj) {\\n+                    sprop = (JSScopeProperty *) prop;\\n+                    if (sprop->getter == js_GetLocalVariable) {\\n+                        slot = sprop->shortid;\\n+                        op = JSOP_DEFLOCALFUN;\\n+                    }\\n+                }\\n+                OBJ_DROP_PROPERTY(cx, pobj, prop);\\n+            }\\n+\\n+            JS_ASSERT(op == JSOP_DEFLOCALFUN ||\\n+                      !(cg->treeContext.flags & TCF_IN_FUNCTION));\\n \\n             /*\\n-             * If this local function is declared in a body block induced by\\n-             * let declarations, reparent fun->object to the compiler-created\\n-             * body block object so that JSOP_DEFLOCALFUN can clone that block\\n-             * into the runtime scope chain.\\n+             * If this local function is declared in a body block induced\\n+             * by let declarations, reparent fun->object to the compiler-\\n+             * created body block object, so that JSOP_DEFLOCALFUN clones\\n+             * that block into the runtime scope chain.\\n              */\\n             stmt = cg->treeContext.topStmt;\\n             if (stmt && stmt->type == STMT_BLOCK &&\\n@@ -4104,12 +4122,13 @@ js_EmitTree(JSContext *cx, JSCodeGenerator *cg, JSParseNode *pn)\\n                 JS_ASSERT(LOCKED_OBJ_GET_CLASS(obj) == &js_BlockClass);\\n                 OBJ_SET_PARENT(cx, fun->object, obj);\\n             }\\n+        }\\n \\n-            if (!EmitSlotIndexOp(cx, JSOP_DEFLOCALFUN, slot, index, cg))\\n+        if (op == JSOP_DEFLOCALFUN) {\\n+            if (!EmitSlotIndexOp(cx, op, slot, index, cg))\\n                 return JS_FALSE;\\n         } else {\\n-            JS_ASSERT(!cg->treeContext.topStmt);\\n-            EMIT_INDEX_OP(JSOP_DEFFUN, index);\\n+            EMIT_INDEX_OP(op, index);\\n         }\\n \\n         CG_SWITCH_TO_MAIN(cg);\\n\""}