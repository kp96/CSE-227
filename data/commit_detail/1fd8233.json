{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas1fd8233\""},"diff":"\"1fd8233 Bug 394645: Show notification when extension updates are available. r=robstrong.\\ndiff --git a/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties b/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties\\nindex c65b679..c89c7ad 100644\\n--- a/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties\\n+++ b/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties\\n@@ -17,6 +17,9 @@ installSuccess=Install completed successfully\\n installWaiting=Waiting...\\n installInstalling=Installing...\\n droppedInWarning=The following items were found in your Extensions folder. Do you want to install them?\\n+updateNotificationTitle=Add-on updates found\\n+updateNotificationText=%S has found an update for 1 of your add-ons\\n+multipleUpdateNotificationText=%S has found updates for %S of your add-ons\\n \\n uninstallButton=Uninstall\\n disableButton=Disable\\ndiff --git a/toolkit/mozapps/extensions/content/extensions.js b/toolkit/mozapps/extensions/content/extensions.js\\nindex 326cb78..403bffd 100644\\n--- a/toolkit/mozapps/extensions/content/extensions.js\\n+++ b/toolkit/mozapps/extensions/content/extensions.js\\n@@ -744,6 +744,8 @@ function Startup()\\n                     null, null, true, null);\\n         document.title = getExtensionString(\\\"newUpdateWindowTitle\\\", [getBrandShortName()]);\\n       }\\n+      else\\n+        showView(window.arguments[0]);\\n     }\\n   }\\n   else if (viewGroup.hasAttribute(\\\"last-selected\\\") &&\\ndiff --git a/toolkit/mozapps/extensions/src/nsExtensionManager.js.in b/toolkit/mozapps/extensions/src/nsExtensionManager.js.in\\nindex ea945f6..a079c3e 100644\\n--- a/toolkit/mozapps/extensions/src/nsExtensionManager.js.in\\n+++ b/toolkit/mozapps/extensions/src/nsExtensionManager.js.in\\n@@ -2660,9 +2660,9 @@ ExtensionManager.prototype = {\\n     var items = this.getItemList(nsIUpdateItem.TYPE_ADDON, { });\\n \\n     var updater = new ExtensionItemUpdater(gApp.ID, gApp.version, this);\\n-    updater._background = true;\\n     updater.checkForUpdates(items, items.length,\\n-                            nsIExtensionManager.UPDATE_CHECK_NEWVERSION, null);\\n+                            nsIExtensionManager.UPDATE_CHECK_NEWVERSION,\\n+                            new BackgroundUpdateCheckListener(this.datasource));\\n   },\\n \\n   /**\\n@@ -5706,6 +5706,91 @@ ItemDownloadTransaction.prototype = {\\n };\\n \\n /**\\n+ * A listener object that watches the background update check and notifies the\\n+ * user of any updates found.\\n+ */\\n+function BackgroundUpdateCheckListener(datasource) {\\n+  this._emDS = datasource;\\n+}\\n+BackgroundUpdateCheckListener.prototype = {\\n+  _updateCount: 0,\\n+  _emDS: null,\\n+\\n+  // nsIObserver implementation\\n+  observe: function(aSubject, aTopic, aData) {\\n+    if (aTopic != \\\"alertclickcallback\\\")\\n+      return;\\n+\\n+    var wm = Cc[\\\"@mozilla.org/appshell/window-mediator;1\\\"].\\n+             getService(Ci.nsIWindowMediator);\\n+    var win = wm.getMostRecentWindow(\\\"Extension:Manager\\\");\\n+    if (win) {\\n+      win.focus();\\n+      win.showView(\\\"updates\\\");\\n+      // Don't show the update notification on next startup\\n+      gPref.setBoolPref(PREF_UPDATE_NOTIFYUSER, false);\\n+    }\\n+    else {\\n+      const EMURL = \\\"chrome://mozapps/content/extensions/extensions.xul\\\";\\n+      const EMFEATURES = \\\"chrome,centerscreen,extra-chrome,dialog,resizable,modal\\\";\\n+\\n+      var ww = Cc[\\\"@mozilla.org/embedcomp/window-watcher;1\\\"].\\n+               getService(Ci.nsIWindowWatcher);\\n+      var param = Cc[\\\"@mozilla.org/supports-array;1\\\"].\\n+                  createInstance(Ci.nsISupportsArray);\\n+      var arg = Cc[\\\"@mozilla.org/supports-string;1\\\"].\\n+                createInstance(Ci.nsISupportsString);\\n+      arg.data = \\\"updates\\\";\\n+      param.AppendElement(arg);\\n+      ww.openWindow(null, EMURL, null, EMFEATURES, param);\\n+    }\\n+  },\\n+  \\n+  // nsIAddonUpdateCheckListener implementation\\n+  onUpdateStarted: function() {\\n+  },\\n+\\n+  onUpdateEnded: function() {\\n+    if (this._updateCount > 0 && Cc[\\\"@mozilla.org/alerts-service;1\\\"]) {\\n+      var extensionStrings = BundleManager.getBundle(URI_EXTENSIONS_PROPERTIES);\\n+      var title = extensionStrings.GetStringFromName(\\\"updateNotificationTitle\\\");\\n+      var text;\\n+      if (this._updateCount > 1)\\n+        text = extensionStrings.formatStringFromName(\\\"multipleUpdateNotificationText\\\",\\n+                                                     [BundleManager.appName, this._updateCount], 2);\\n+      else\\n+        text = extensionStrings.formatStringFromName(\\\"updateNotificationText\\\",\\n+                                                     [BundleManager.appName], 1);\\n+\\n+      try {\\n+        var notifier = Cc[\\\"@mozilla.org/alerts-service;1\\\"].\\n+                       getService(Ci.nsIAlertsService);\\n+        notifier.showAlertNotification(URI_GENERIC_ICON_XPINSTALL,\\n+                                       title, text, true, \\\"\\\", this);\\n+      }\\n+      catch (e) {\\n+        LOG(\\\"Failed to retrieve alerts service, probably an unsupported \\\" +\\n+            \\\"platform - \\\" + e);\\n+      }\\n+    }\\n+  },\\n+\\n+  onAddonUpdateStarted: function(item) {\\n+  },\\n+\\n+  onAddonUpdateEnded: function(item, status) {\\n+    if (status == nsIAddonUpdateCheckListener.STATUS_UPDATE) {\\n+      var lastupdate = this._emDS.getItemProperty(item.id, \\\"availableUpdateVersion\\\");\\n+      if (lastupdate != item.version) {\\n+        gPref.setBoolPref(PREF_UPDATE_NOTIFYUSER, true);\\n+        this._updateCount++;\\n+      }\\n+    }\\n+  }\\n+};\\n+\\n+\\n+/**\\n  * A listener object to the update check process that routes notifications to\\n  * the right places and keeps the datasource up to date.\\n  */\\n@@ -5764,7 +5849,6 @@ ExtensionItemUpdater.prototype = {\\n   _updateCheckType    : 0,\\n   _items              : [],\\n   _listener           : null,\\n-  _background         : false,\\n \\n   /* ExtensionItemUpdater\\n #\\n@@ -5890,12 +5974,6 @@ ExtensionItemUpdater.prototype = {\\n   },\\n \\n   checkForDone: function(item, status) {\\n-    if (this._background &&\\n-        status == nsIAddonUpdateCheckListener.STATUS_UPDATE) {\\n-      var lastupdate = this._emDS.getItemProperty(item.id, \\\"availableUpdateVersion\\\");\\n-      if (lastupdate != item.version)\\n-        gPref.setBoolPref(PREF_UPDATE_NOTIFYUSER, true);\\n-    }\\n     if (this._listener) {\\n       try {\\n         this._listener.onAddonUpdateEnded(item, status);\\n\""}