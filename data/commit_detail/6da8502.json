{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas6da8502\""},"diff":"\"6da8502 Make it possible to fastload NSSCertificates.  Bug 388128, r=kaie, sr=brendan, a=bzbarsky\\ndiff --git a/security/manager/ssl/src/nsNSSCertificate.cpp b/security/manager/ssl/src/nsNSSCertificate.cpp\\nindex 093ce47..e731169 100644\\n--- a/security/manager/ssl/src/nsNSSCertificate.cpp\\n+++ b/security/manager/ssl/src/nsNSSCertificate.cpp\\n@@ -1,3 +1,4 @@\\n+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n /* ***** BEGIN LICENSE BLOCK *****\\n  * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n  *\\n@@ -68,6 +69,9 @@\\n #include \\\"nsUnicharUtils.h\\\"\\n #include \\\"nsThreadUtils.h\\\"\\n #include \\\"nsCertVerificationThread.h\\\"\\n+#include \\\"nsIObjectOutputStream.h\\\"\\n+#include \\\"nsIObjectInputStream.h\\\"\\n+#include \\\"nsIProgrammingLanguage.h\\\"\\n \\n #include \\\"nspr.h\\\"\\n extern \\\"C\\\" {\\n@@ -105,24 +109,37 @@ NS_IMPL_THREADSAFE_ISUPPORTS4(nsNSSCertificate, nsIX509Cert,\\n nsNSSCertificate*\\n nsNSSCertificate::ConstructFromDER(char *certDER, int derLen)\\n {\\n+  nsNSSCertificate* newObject = new nsNSSCertificate();\\n+  if (!newObject->InitFromDER(certDER, derLen)) {\\n+    delete newObject;\\n+    newObject = nsnull;\\n+  }\\n+\\n+  return newObject;\\n+}\\n+\\n+PRBool\\n+nsNSSCertificate::InitFromDER(char *certDER, int derLen)\\n+{\\n   nsNSSShutDownPreventionLock locker;\\n+  if (isAlreadyShutDown())\\n+    return PR_FALSE;\\n \\n   if (!certDER || !derLen)\\n-    return nsnull;\\n+    return PR_FALSE;\\n \\n   CERTCertificate *aCert = CERT_DecodeCertFromPackage(certDER, derLen);\\n   \\n   if (!aCert)\\n-    return nsnull;\\n+    return PR_FALSE;\\n \\n   if(aCert->dbhandle == nsnull)\\n   {\\n     aCert->dbhandle = CERT_GetDefaultCertDB();\\n   }\\n \\n-  nsNSSCertificate *newObject = new nsNSSCertificate(aCert);\\n-  CERT_DestroyCertificate(aCert);\\n-  return newObject;\\n+  mCert = aCert;\\n+  return PR_TRUE;\\n }\\n \\n nsNSSCertificate::nsNSSCertificate(CERTCertificate *cert) : \\n@@ -138,6 +155,13 @@ nsNSSCertificate::nsNSSCertificate(CERTCertificate *cert) :\\n     mCert = CERT_DupCertificate(cert);\\n }\\n \\n+nsNSSCertificate::nsNSSCertificate() : \\n+  mCert(nsnull),\\n+  mPermDelete(PR_FALSE),\\n+  mCertType(CERT_TYPE_NOT_YET_INITIALIZED)\\n+{\\n+}\\n+\\n nsNSSCertificate::~nsNSSCertificate()\\n {\\n   nsNSSShutDownPreventionLock locker;\\n@@ -1470,3 +1494,100 @@ nsNSSCertListEnumerator::GetNext(nsISupports **_retval)\\n   CERT_RemoveCertListNode(node);\\n   return NS_OK;\\n }\\n+\\n+NS_IMETHODIMP\\n+nsNSSCertificate::Write(nsIObjectOutputStream* aStream)\\n+{\\n+  NS_ENSURE_STATE(mCert);\\n+  nsresult rv = aStream->Write32(mCert->derCert.len);\\n+  if (NS_FAILED(rv)) {\\n+    return rv;\\n+  }\\n+  \\n+  return aStream->WriteByteArray(mCert->derCert.data, mCert->derCert.len);\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsNSSCertificate::Read(nsIObjectInputStream* aStream)\\n+{\\n+  NS_ENSURE_STATE(!mCert);\\n+  \\n+  PRUint32 len;\\n+  nsresult rv = aStream->Read32(&len);\\n+  if (NS_FAILED(rv)) {\\n+    return rv;\\n+  }\\n+\\n+  nsXPIDLCString str;\\n+  rv = aStream->ReadBytes(len, getter_Copies(str));\\n+  if (NS_FAILED(rv)) {\\n+    return rv;\\n+  }\\n+\\n+  if (!InitFromDER(const_cast<char*>(str.get()), len)) {\\n+    return NS_ERROR_UNEXPECTED;\\n+  }\\n+\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP \\n+nsNSSCertificate::GetInterfaces(PRUint32 *count, nsIID * **array)\\n+{\\n+  *count = 0;\\n+  *array = nsnull;\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP \\n+nsNSSCertificate::GetHelperForLanguage(PRUint32 language, nsISupports **_retval)\\n+{\\n+  *_retval = nsnull;\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP \\n+nsNSSCertificate::GetContractID(char * *aContractID)\\n+{\\n+  *aContractID = nsnull;\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP \\n+nsNSSCertificate::GetClassDescription(char * *aClassDescription)\\n+{\\n+  *aClassDescription = nsnull;\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP \\n+nsNSSCertificate::GetClassID(nsCID * *aClassID)\\n+{\\n+  *aClassID = (nsCID*) nsMemory::Alloc(sizeof(nsCID));\\n+  if (!*aClassID)\\n+    return NS_ERROR_OUT_OF_MEMORY;\\n+  return GetClassIDNoAlloc(*aClassID);\\n+}\\n+\\n+NS_IMETHODIMP \\n+nsNSSCertificate::GetImplementationLanguage(PRUint32 *aImplementationLanguage)\\n+{\\n+  *aImplementationLanguage = nsIProgrammingLanguage::CPLUSPLUS;\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP \\n+nsNSSCertificate::GetFlags(PRUint32 *aFlags)\\n+{\\n+  *aFlags = nsIClassInfo::THREADSAFE;\\n+  return NS_OK;\\n+}\\n+\\n+static NS_DEFINE_CID(kNSSCertificateCID, NS_X509CERT_CID);\\n+\\n+NS_IMETHODIMP \\n+nsNSSCertificate::GetClassIDNoAlloc(nsCID *aClassIDNoAlloc)\\n+{\\n+  *aClassIDNoAlloc = kNSSCertificateCID;\\n+  return NS_OK;\\n+}\\ndiff --git a/security/manager/ssl/src/nsNSSCertificate.h b/security/manager/ssl/src/nsNSSCertificate.h\\nindex 0b89911..88d5cdf 100644\\n--- a/security/manager/ssl/src/nsNSSCertificate.h\\n+++ b/security/manager/ssl/src/nsNSSCertificate.h\\n@@ -1,3 +1,4 @@\\n+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n /* ***** BEGIN LICENSE BLOCK *****\\n  * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n  *\\n@@ -49,6 +50,8 @@\\n #include \\\"nsISMimeCert.h\\\"\\n #include \\\"nsNSSShutDown.h\\\"\\n #include \\\"nsISimpleEnumerator.h\\\"\\n+#include \\\"nsISerializable.h\\\"\\n+#include \\\"nsIClassInfo.h\\\"\\n \\n #include \\\"nsNSSCertHeader.h\\\"\\n \\n@@ -60,6 +63,8 @@ class nsNSSCertificate : public nsIX509Cert,\\n                          public nsIX509Cert2,\\n                          public nsIX509Cert3,\\n                          public nsISMimeCert,\\n+                         public nsISerializable,\\n+                         public nsIClassInfo,\\n                          public nsNSSShutDownObject\\n {\\n public:\\n@@ -68,8 +73,11 @@ public:\\n   NS_DECL_NSIX509CERT2\\n   NS_DECL_NSIX509CERT3\\n   NS_DECL_NSISMIMECERT\\n+  NS_DECL_NSISERIALIZABLE\\n+  NS_DECL_NSICLASSINFO\\n \\n   nsNSSCertificate(CERTCertificate *cert);\\n+  nsNSSCertificate();\\n   /* from a request? */\\n   virtual ~nsNSSCertificate();\\n   nsresult FormatUIStrings(const nsAutoString &nickname, nsAutoString &nickWithSerial, nsAutoString &details);\\n@@ -88,6 +96,7 @@ private:\\n   nsresult GetSortableDate(PRTime aTime, nsAString &_aSortableDate);\\n   virtual void virtualDestroyNSSReference();\\n   void destructorSafeDestroyNSSReference();\\n+  PRBool InitFromDER(char* certDER, int derLen);  // return false on failure\\n };\\n \\n class nsNSSCertList: public nsIX509CertList\\n@@ -127,7 +136,11 @@ private:\\n                                   (dest)[2] = (((src) >>  8) & 0xff); \\\\\\n                                   (dest)[3] = ((src) & 0xff); \\n \\n-\\n-\\n+#define NS_X509CERT_CID { /* 660a3226-915c-4ffb-bb20-8985a632df05 */   \\\\\\n+    0x660a3226,                                                        \\\\\\n+    0x915c,                                                            \\\\\\n+    0x4ffb,                                                            \\\\\\n+    { 0xbb, 0x20, 0x89, 0x85, 0xa6, 0x32, 0xdf, 0x05 }                 \\\\\\n+  }\\n \\n #endif /* _NS_NSSCERTIFICATE_H_ */\\ndiff --git a/security/manager/ssl/src/nsNSSModule.cpp b/security/manager/ssl/src/nsNSSModule.cpp\\nindex cf45dfb..fcf4434 100644\\n--- a/security/manager/ssl/src/nsNSSModule.cpp\\n+++ b/security/manager/ssl/src/nsNSSModule.cpp\\n@@ -170,6 +170,7 @@ NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsSecretDecoderRing)\\n NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsPK11TokenDB)\\n NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsPKCS11ModuleDB)\\n NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT(PR_FALSE, PSMContentListener, init)\\n+NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsNSSCertificate)\\n NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsNSSCertificateDB)\\n NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsNSSCertCache)\\n #ifdef MOZ_XUL\\n@@ -299,6 +300,13 @@ static const nsModuleComponentInfo components[] =\\n   },\\n \\n   {\\n+    \\\"X509 Certificate\\\",\\n+    NS_X509CERT_CID,\\n+    nsnull,\\n+    nsNSSCertificateConstructor\\n+  },\\n+  \\n+  {\\n     \\\"X509 Certificate Database\\\",\\n     NS_X509CERTDB_CID,\\n     NS_X509CERTDB_CONTRACTID,\\n\""}