{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basbfa6404\""},"diff":"\"bfa6404 r=mkaply, a=blizzard General code cleanup and new error logging mechanism from Dainis Jonitis\\ndiff --git a/widget/src/os2/nsGfxDefs.h b/widget/src/os2/nsGfxDefs.h\\nindex 9f246d8..d12df55 100644\\n--- a/widget/src/os2/nsGfxDefs.h\\n+++ b/widget/src/os2/nsGfxDefs.h\\n@@ -30,6 +30,7 @@\\n #define INCL_DOS\\n #define INCL_DOSERRORS\\n #include <os2.h>\\n+#include \\\"prlog.h\\\"\\n \\n #include <uconv.h> // XXX hack XXX\\n \\n@@ -37,6 +38,36 @@\\n \\n void PMERROR(const char *str);\\n \\n+// Wrapper code for all OS/2 system calls to check the return code for error condition in debug build.\\n+// Could be used like this:\\n+//\\n+//    HDC hdc = GFX (::GpiQueryDevice (ps), HDC_ERROR);\\n+//    GFX (::GpiAssociate (mPrintPS, 0), FALSE);\\n+//    return GFX (::GpiDestroyPS (mPrintPS), FALSE);\\n+\\n+#ifdef DEBUG\\n+  extern void GFX_LogErr (unsigned ReturnCode, const char* ErrorExpression, const char* FileName, const char* FunctionName, long LineNum);\\n+\\n+  inline long GFX_Check (long ReturnCode, long ErrorCode, const char* ErrorExpression, const char* FileName, const char* FunctionName, long LineNum) \\n+  { \\n+    if (ReturnCode == ErrorCode)\\n+      GFX_LogErr (ErrorCode, ErrorExpression, FileName, FunctionName, LineNum);\\n+\\n+    return ReturnCode ; \\n+  }\\n+\\n+  #ifdef XP_OS2_VACPP\\n+    #define GFX(ReturnCode, ErrorCode)\\\\\\n+            GFX_Check (ReturnCode, ErrorCode, #ReturnCode, __FILE__, __FUNCTION__, __LINE__)\\n+  #else\\n+    #define GFX(ReturnCode, ErrorCode)\\\\\\n+            GFX_Check (ReturnCode, ErrorCode, #ReturnCode, __FILE__, NULL, __LINE__)\\n+  #endif\\n+\\n+#else\\t// Retail build\\n+  #define GFX(ReturnCode, ErrorCode) ReturnCode\\n+#endif\\n+\\n class nsString;\\n class nsIDeviceContext;\\n \\n@@ -96,4 +127,8 @@ extern nsGfxModuleData gModuleData;\\n \\n #define MK_RGB(r,g,b) ((r) * 65536) + ((g) * 256) + (b)\\n \\n+#ifdef DEBUG\\n+extern PRLogModuleInfo *gGFXOS2LogModule;\\n+#endif\\n+\\n #endif\\n\""}