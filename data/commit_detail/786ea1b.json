{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas786ea1b\""},"diff":"\"786ea1b Bug 387970: Regression issues in _M5; move CvsTag() from Bootstrap::Step::Tag to Bootstrap::Util. r=rhelmer\\ndiff --git a/tools/release/Bootstrap/Step.pm b/tools/release/Bootstrap/Step.pm\\nindex 0cecc75..b145c25 100644\\n--- a/tools/release/Bootstrap/Step.pm\\n+++ b/tools/release/Bootstrap/Step.pm\\n@@ -9,13 +9,13 @@ use File::Spec::Functions;\\n use POSIX qw(strftime);\\n \\n use Bootstrap::Config;\\n+use Bootstrap::Util;\\n use MozBuild::Util qw(RunShellCommand Email);\\n \\n use base 'Exporter';\\n \\n our @EXPORT = qw(catfile);\\n \\n-my $DEFAULT_TIMEOUT = 3600;\\n my $DEFAULT_LOGFILE = 'default.log';\\n \\n sub new {\\n@@ -33,7 +33,7 @@ sub Shell {\\n     my $cmdArgs = exists($args{'cmdArgs'}) ? $args{'cmdArgs'} : [];\\n     my $dir = $args{'dir'};\\n     my $timeout = exists($args{'timeout'}) ? $args{'timeout'} :\\n-     $DEFAULT_TIMEOUT;\\n+     $Bootstrap::Util::DEFAULT_SHELL_TIMEOUT;\\n     my $ignoreExitValue = exists($args{'ignoreExitValue'}) ? \\n      $args{'ignoreExitValue'} : 0;\\n     my $rv = '';\\ndiff --git a/tools/release/Bootstrap/Step/Tag.pm b/tools/release/Bootstrap/Step/Tag.pm\\nindex cf31737..33c0e1c 100644\\n--- a/tools/release/Bootstrap/Step/Tag.pm\\n+++ b/tools/release/Bootstrap/Step/Tag.pm\\n@@ -8,7 +8,7 @@ use File::Copy qw(move);\\n use POSIX qw(strftime);\\n \\n use MozBuild::Util qw(MkdirWithPath RunShellCommand);\\n-use Bootstrap::Util qw(CvsCatfile);\\n+use Bootstrap::Util qw(CvsCatfile GetDiffFileList);\\n \\n use Bootstrap::Step;\\n use Bootstrap::Step::Tag::Bump;\\n@@ -115,7 +115,9 @@ sub Execute {\\n         $this->Shell(cmd => 'cvs',\\n                      cmdArgs => ['up',\\n                                  '-r', $geckoTag],\\n-                     dir => catfile($cvsrootTagDir, 'mozilla'));\\n+                     dir => catfile($cvsrootTagDir, 'mozilla'),\\n+                     logFile => catfile($logDir, 'tag-relbranch_update_' .\\n+                                        $geckoTag));\\n     } else {\\n         # We go through some convoluted hoops here to get the _RELBRANCH\\n         # datespec without forcing it to be specified. Because of this,\\n@@ -236,50 +238,35 @@ sub CvsTag {\\n     my %args = @_;\\n \\n     # All the required args first, followed by the optional ones...\\n-    die \\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): null tagName\\\" if \\n-     (!exists($args{'tagName'})); \\n-    my $tagName = $args{'tagName'};\\n-\\n-    die \\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): null coDir\\\" if \\n-     (!exists($args{'coDir'})); \\n-    my $coDir = $args{'coDir'};\\n-\\n-    die \\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): invalid files data\\\" if \\n-     (exists($args{'files'}) && ref($args{'files'}) ne 'ARRAY');\\n \\n     die \\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): null logFile\\\"\\n      if (!exists($args{'logFile'}));\\n-    my $logFile = $args{'logFile'};\\n-   \\n-    my $branch = exists($args{'branch'}) ? $args{'branch'} : 0;\\n-    my $files = exists($args{'files'}) ? $args{'files'} : [];\\n-    my $force = exists($args{'force'}) ? $args{'force'} : 0;\\n+    die \\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): null coDir\\\" if \\n+     (!exists($args{'coDir'}));\\n+\\n+    # We renamed this argument when CvsTag() got moved...\\n+    $args{'cvsDir'} = $args{'coDir'};\\n \\n+    # Check if we're supposed to dump the tagging output to stdout...\\n     my $config = new Bootstrap::Config();\\n-    my $logDir = $config->Get(sysvar => 'logDir');\\n+    if ($config->Exists(var => 'dumpLogs') && \\n+     $config->Get(var => 'dumpLogs')) {\\n+        $args{'output'} = 1;\\n+    }\\n+\\n+    # We call this by full scoping (and don't include it in the use() statement\\n+    # for Bootstrap::Util above) to disambiguate between the Util version and\\n+    # the Tag version, which is a shim now.\\n+    my $rv = Bootstrap::Util::CvsTag(%args);\\n \\n-    # only force or branch specific files, not the whole tree\\n-    if ($force && scalar(@{$files}) <= 0) {\\n-        die(\\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): Cannot specify force without files\\\");\\n-    } elsif ($branch && scalar(@{$files}) <= 0) {\\n-        die(\\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): Cannot specify branch without files\\\");\\n-    } elsif ($branch && $force) {\\n-        die(\\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): Cannot specify both branch and force\\\");\\n+    if ($rv->{'timedOut'} || ($rv->{'exitValue'} != 0)) {\\n+        $this->Log(msg => \\\"Bootstrap::Step::Tag::CvsTag failed; rv: \\\" .\\n+         \\\"$rv->{'exitValue'}, timeout: $rv->{'timedOut'}, output: \\\" .\\n+         \\\"$rv->{'output'}\\\");\\n+        die(\\\"Bootstrap::Step::Tag::CvsTag: exited bogusly: $rv->{'exitValue'}\\\");\\n     }\\n \\n-    my @cmdArgs;\\n-    push(@cmdArgs, 'tag');\\n-    push(@cmdArgs, '-F') if ($force);\\n-    push(@cmdArgs, '-b') if ($branch);\\n-    push(@cmdArgs, $tagName);\\n-    push(@cmdArgs, @{$files}) if (scalar(@{$files}) > 0);\\n-\\n-    $this->Shell(\\n-      cmd => 'cvs',\\n-      cmdArgs => \\\\@cmdArgs,\\n-      dir => $coDir,\\n-      logFile => $logFile,\\n-    );\\n+    return $rv;\\n }\\n \\n #\\n@@ -326,53 +313,4 @@ sub GenerateRelbranchName {\\n     return 'GECKO' . $geckoVersion . '_' . $geckoDateSpec . '_RELBRANCH';\\n }\\n \\n-sub GetDiffFileList {\\n-    my $this = shift;\\n-    my %args = @_;\\n-\\n-    foreach my $requiredArg (qw(cvsDir prevTag newTag)) {\\n-        if (!exists($args{$requiredArg})) {\\n-            die \\\"ASSERT: MozBuild::Util::GetDiffFileList(): null arg: \\\" .\\n-             $requiredArg;\\n-        }\\n-    }\\n-\\n-    my $cvsDir = $args{'cvsDir'};\\n-    my $firstTag = $args{'prevTag'};\\n-    my $newTag = $args{'newTag'};\\n-\\n-    my $rv = RunShellCommand(command => 'cvs',\\n-                             args => ['diff', '-uN',\\n-                                      '-r', $firstTag,\\n-                                      '-r', $newTag],\\n-                             dir => $cvsDir,\\n-                             timeout => 3600);\\n-\\n-    # Gah. So, the shell return value of \\\"cvs diff\\\" is dependent on whether or\\n-    # not there were diffs, NOT whether or not the command succeeded. (Thanks,\\n-    # CVS!) So, we can't really check exitValue here, since it could be 1 or\\n-    # 0, depending on whether or not there were diffs (and both cases are valid\\n-    # for this function). Maybe if there's an error it returns a -1? Or 2?\\n-    # Who knows.\\n-    #\\n-    # So basically, we check that it's not 1 or 0, which... isn't a great test.\\n-    #\\n-    # TODO - check to see if timedOut, dumpedCore, or sigNum are set.\\n-    if ($rv->{'exitValue'} != 1 && $rv->{'exitValue'} != 0) {\\n-        die(\\\"ASSERT: MozBuild::Util::GetDiffFileList(): cvs diff returned \\\" .\\n-         $rv->{'exitValue'});\\n-    }\\n-\\n-    my @differentFiles = ();\\n-\\n-    foreach my $line (split(/\\\\n/, $rv->{'output'})) {\\n-        if ($line =~ /^Index:\\\\s(.+)$/) {\\n-            push(@differentFiles, $1);\\n-        }\\n-    }\\n-\\n-\\n-    return \\\\@differentFiles;\\n-}\\n-\\n 1;\\ndiff --git a/tools/release/Bootstrap/Step/Tag/l10n.pm b/tools/release/Bootstrap/Step/Tag/l10n.pm\\nindex a4ffa43..811e248 100644\\n--- a/tools/release/Bootstrap/Step/Tag/l10n.pm\\n+++ b/tools/release/Bootstrap/Step/Tag/l10n.pm\\n@@ -93,7 +93,9 @@ sub Execute {\\n         $this->Shell(cmd => 'cvs',\\n                      cmdArgs => ['up',\\n                                  '-r', $geckoTag],\\n-                     dir => catfile($l10nTagDir, 'l10n'));\\n+                     dir => catfile($l10nTagDir, 'l10n'),\\n+                     logFile => catfile($logDir, 'tag-l10n_relbranch_update_' .\\n+                                        $geckoTag));\\n     }\\n \\n     # Create the l10n RC tag\\ndiff --git a/tools/release/Bootstrap/Util.pm b/tools/release/Bootstrap/Util.pm\\nindex 00ae32c..13db7a8 100644\\n--- a/tools/release/Bootstrap/Util.pm\\n+++ b/tools/release/Bootstrap/Util.pm\\n@@ -10,10 +10,14 @@ use MozBuild::Util qw(RunShellCommand);\\n \\n use base qw(Exporter);\\n \\n-our @EXPORT_OK = qw(CvsCatfile GetLocaleManifest\\n+our @EXPORT_OK = qw(CvsCatfile CvsTag\\n+                    GetDiffFileList\\n+                    GetLocaleManifest\\n                     GetBouncerPlatforms GetPatcherPlatforms\\n                     GetBouncerToPatcherPlatformMap);\\n \\n+our($DEFAULT_SHELL_TIMEOUT);\\n+\\n use strict;\\n \\n # This maps Bouncer platforms, used in bouncer and the shipped-locales file\\n@@ -36,6 +40,7 @@ my %PLATFORM_MAP = (# bouncer/shipped-locales platform => patcher2 platform\\n \\n my $DEFAULT_CVSROOT = ':pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot';\\n \\n+$DEFAULT_SHELL_TIMEOUT = 3600;\\n \\n ##\\n # Turn an array of directory/filenames into a CVS module path.\\n@@ -165,4 +170,104 @@ sub GetLocaleManifest {\\n     return $localeManifest;\\n }\\n \\n+sub CvsTag {\\n+    my %args = @_;\\n+\\n+    # All the required args first, followed by the optional ones...\\n+    die \\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): null tagName\\\" if \\n+     (!exists($args{'tagName'})); \\n+    my $tagName = $args{'tagName'};\\n+\\n+    die \\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): null cvsDir\\\" if \\n+     (!exists($args{'cvsDir'})); \\n+    my $cvsDir = $args{'cvsDir'};\\n+\\n+    die \\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): invalid files data\\\" if \\n+     (exists($args{'files'}) && ref($args{'files'}) ne 'ARRAY');\\n+\\n+    die \\\"ASSERT: Bootstrap::Step::Tag::CvsTag(): null logFile\\\"\\n+     if (!exists($args{'logFile'}));\\n+    my $logFile = $args{'logFile'};\\n+   \\n+    my $branch = exists($args{'branch'}) ? $args{'branch'} : 0;\\n+    my $files = exists($args{'files'}) ? $args{'files'} : [];\\n+    my $force = exists($args{'force'}) ? $args{'force'} : 0;\\n+    my $timeout = exists($args{'timeout'}) ? $args{'timeout'} :\\n+     $DEFAULT_SHELL_TIMEOUT;\\n+\\n+    # only force or branch specific files, not the whole tree\\n+    if ($force && scalar(@{$files}) <= 0) {\\n+        die(\\\"ASSERT: Bootstrap::Util::CvsTag(): Cannot specify force without files\\\");\\n+    } elsif ($branch && scalar(@{$files}) <= 0) {\\n+        die(\\\"ASSERT: Bootstrap::UtilCvsTag(): Cannot specify branch without files\\\");\\n+    } elsif ($branch && $force) {\\n+        die(\\\"ASSERT: Bootstrap::UtilCvsTag(): Cannot specify both branch and force\\\");\\n+    }\\n+\\n+    my @cmdArgs;\\n+    push(@cmdArgs, 'tag');\\n+    push(@cmdArgs, '-F') if ($force);\\n+    push(@cmdArgs, '-b') if ($branch);\\n+    push(@cmdArgs, $tagName);\\n+    push(@cmdArgs, @{$files}) if (scalar(@{$files}) > 0);\\n+\\n+    my %cvsTagArgs = (command => 'cvs',\\n+                      args => \\\\@cmdArgs,\\n+                      dir => $cvsDir,\\n+                      logfile => $logFile);\\n+\\n+    $cvsTagArgs{'timeout'} = $timeout if (defined($timeout));\\n+    $cvsTagArgs{'output'} = $args{'output'} if (exists($args{'output'}));\\n+\\n+    return RunShellCommand(%cvsTagArgs);\\n+}\\n+\\n+sub GetDiffFileList {\\n+    my %args = @_;\\n+\\n+    foreach my $requiredArg (qw(cvsDir prevTag newTag)) {\\n+        if (!exists($args{$requiredArg})) {\\n+            die \\\"ASSERT: MozBuild::Util::GetDiffFileList(): null arg: \\\" .\\n+             $requiredArg;\\n+        }\\n+    }\\n+\\n+    my $cvsDir = $args{'cvsDir'};\\n+    my $firstTag = $args{'prevTag'};\\n+    my $newTag = $args{'newTag'};\\n+\\n+    my $rv = RunShellCommand(command => 'cvs',\\n+                             args => ['diff', '-uN',\\n+                                      '-r', $firstTag,\\n+                                      '-r', $newTag],\\n+                             dir => $cvsDir,\\n+                             timeout => 3600);\\n+\\n+    # Gah. So, the shell return value of \\\"cvs diff\\\" is dependent on whether or\\n+    # not there were diffs, NOT whether or not the command succeeded. (Thanks,\\n+    # CVS!) So, we can't really check exitValue here, since it could be 1 or\\n+    # 0, depending on whether or not there were diffs (and both cases are valid\\n+    # for this function). Maybe if there's an error it returns a -1? Or 2?\\n+    # Who knows.\\n+    #\\n+    # So basically, we check that it's not 1 or 0, which... isn't a great test.\\n+    #\\n+    # TODO - check to see if timedOut, dumpedCore, or sigNum are set.\\n+    if ($rv->{'exitValue'} != 1 && $rv->{'exitValue'} != 0) {\\n+        die(\\\"ASSERT: MozBuild::Util::GetDiffFileList(): cvs diff returned \\\" .\\n+         $rv->{'exitValue'});\\n+    }\\n+\\n+    my @differentFiles = ();\\n+\\n+    foreach my $line (split(/\\\\n/, $rv->{'output'})) {\\n+        if ($line =~ /^Index:\\\\s(.+)$/) {\\n+            push(@differentFiles, $1);\\n+        }\\n+    }\\n+\\n+\\n+    return \\\\@differentFiles;\\n+}\\n+\\n 1;\\n\""}