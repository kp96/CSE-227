{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas737f150\""},"diff":"\"737f150 When doing ExplainLiveExpectedGarbage, suspect all nsXPCWrappedJS so that we get more objects in the graph.  b=387224  r=graydon  a=brendan\\ndiff --git a/js/src/xpconnect/src/nsXPConnect.cpp b/js/src/xpconnect/src/nsXPConnect.cpp\\nindex bf536b3..91e9f94 100644\\n--- a/js/src/xpconnect/src/nsXPConnect.cpp\\n+++ b/js/src/xpconnect/src/nsXPConnect.cpp\\n@@ -634,6 +634,27 @@ nsXPConnect::PrintAllReferencesTo(void *p)\\n                 0x7fffffff, nsnull);\\n #endif\\n }\\n+\\n+JS_STATIC_DLL_CALLBACK(JSDHashOperator)\\n+SuspectWrappedJS(JSDHashTable *table, JSDHashEntryHdr *hdr,\\n+                 uint32 number, void *arg)\\n+{\\n+    for (nsXPCWrappedJS* wrapper = ((JSObject2WrappedJSMap::Entry*)hdr)->value;\\n+         wrapper; wrapper = wrapper->GetNextWrapper())\\n+        if (wrapper->IsValid() && !wrapper->IsSubjectToFinalization())\\n+            nsCycleCollector_suspectCurrent(\\n+                NS_CYCLE_COLLECTION_CLASSNAME(nsXPCWrappedJS)::Upcast(wrapper));\\n+    return JS_DHASH_NEXT;\\n+}\\n+\\n+void\\n+nsXPConnect::SuspectExtraPointers()\\n+{\\n+    // FIXME: We should really just call suspectCurrent on all the roots\\n+    // in the runtime, or even all the objects in the runtime, except we\\n+    // can't call suspectCurrent on JS objects.\\n+    GetRuntime(this)->GetWrappedJSMap()->Enumerate(SuspectWrappedJS, nsnull);\\n+}\\n #endif\\n \\n NS_IMETHODIMP\\ndiff --git a/js/src/xpconnect/src/xpcprivate.h b/js/src/xpconnect/src/xpcprivate.h\\nindex 728bb64..767db75 100644\\n--- a/js/src/xpconnect/src/xpcprivate.h\\n+++ b/js/src/xpconnect/src/xpcprivate.h\\n@@ -494,6 +494,7 @@ public:\\n     virtual nsCycleCollectionParticipant *ToParticipant(void *p);\\n #ifdef DEBUG_CC\\n     virtual void PrintAllReferencesTo(void *p);\\n+    virtual void SuspectExtraPointers();\\n #endif\\n \\n     JSObjectRefcounts* GetJSObjectRefcounts() {return mObjRefcounts;}\\ndiff --git a/xpcom/base/nsCycleCollector.cpp b/xpcom/base/nsCycleCollector.cpp\\nindex 9ba3b1f..1af5a05 100644\\n--- a/xpcom/base/nsCycleCollector.cpp\\n+++ b/xpcom/base/nsCycleCollector.cpp\\n@@ -829,6 +829,7 @@ struct nsCycleCollectionXPCOMRuntime :\\n \\n #ifdef DEBUG_CC\\n     virtual void PrintAllReferencesTo(void *p) {}\\n+    virtual void SuspectExtraPointers() {}\\n #endif\\n };\\n \\n@@ -2253,8 +2254,10 @@ nsCycleCollector::ExplainLiveExpectedGarbage()\\n     mBuf.Empty();\\n \\n     for (PRUint32 i = 0; i <= nsIProgrammingLanguage::MAX; ++i) {\\n-        if (mRuntimes[i])\\n+        if (mRuntimes[i]) {\\n             mRuntimes[i]->BeginCycleCollection();\\n+            mRuntimes[i]->SuspectExtraPointers();\\n+        }\\n     }\\n \\n     mCollectionInProgress = PR_TRUE;\\ndiff --git a/xpcom/base/nsCycleCollector.h b/xpcom/base/nsCycleCollector.h\\nindex c125ee8..0809ee6 100644\\n--- a/xpcom/base/nsCycleCollector.h\\n+++ b/xpcom/base/nsCycleCollector.h\\n@@ -55,6 +55,10 @@ struct nsCycleCollectionLanguageRuntime\\n     virtual nsCycleCollectionParticipant *ToParticipant(void *p) = 0;\\n #ifdef DEBUG_CC\\n     virtual void PrintAllReferencesTo(void *p) = 0;\\n+\\n+    // Call suspectCurrent on any extra pointers that will help build a\\n+    // larger object graph for debugging.\\n+    virtual void SuspectExtraPointers() = 0;\\n #endif\\n };\\n \\n\""}