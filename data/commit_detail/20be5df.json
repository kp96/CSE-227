{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas20be5df\""},"diff":"\"20be5df Bug 385734 - Don't clear download status on pause, clean up DownloadProgressListener.  Patch by Edward Lee <edilee@gmail.com>.  r=sdwilsh, a=mconnor\\ndiff --git a/toolkit/mozapps/downloads/content/DownloadProgressListener.js b/toolkit/mozapps/downloads/content/DownloadProgressListener.js\\nindex 3b315e1..a5e9b9b 100644\\n--- a/toolkit/mozapps/downloads/content/DownloadProgressListener.js\\n+++ b/toolkit/mozapps/downloads/content/DownloadProgressListener.js\\n@@ -1,4 +1,5 @@\\n-# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\\n+# -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-\\n+# vim:set expandtab ts=2 sw=2 sts=2 cin\\n # ***** BEGIN LICENSE BLOCK *****\\n # Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n # \\n@@ -22,7 +23,7 @@\\n # Contributor(s):\\n #   Blake Ross <blakeross@telocity.com> (Original Author) \\n #   Ben Goodger <ben@bengoodger.com> (v2.0) \\n-#   Edward Lee <edilee@gmail.com>\\n+#   Edward Lee <edward.lee@engineering.uiuc.edu>\\n #   Shawn Wilsher <me@shawnwilsher.com> (v3.0)\\n # \\n # Alternatively, the contents of this file may be used under the terms of\\n@@ -39,7 +40,16 @@\\n # \\n # ***** END LICENSE BLOCK *****\\n \\n-function DownloadProgressListener() \\n+Components.utils.import(\\\"resource://gre/modules/XPCOMUtils.jsm\\\");\\n+\\n+/**\\n+ * DownloadProgressListener \\\"class\\\" is used to help update download items shown\\n+ * in the Download Manager UI such as displaying amount transferred, transfer\\n+ * rate, and time left for each download.\\n+ *\\n+ * This class implements the nsIDownloadProgressListener interface.\\n+ */\\n+function DownloadProgressListener()\\n {\\n   var sb = document.getElementById(\\\"downloadStrings\\\");\\n   this._paused = sb.getString(\\\"paused\\\");\\n@@ -59,8 +69,15 @@ function DownloadProgressListener()\\n   this.lastSeconds = Infinity;\\n }\\n \\n-DownloadProgressListener.prototype = \\n-{\\n+DownloadProgressListener.prototype = {\\n+  //////////////////////////////////////////////////////////////////////////////\\n+  //// nsISupports\\n+\\n+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIDownloadProgressListener]),\\n+\\n+  //////////////////////////////////////////////////////////////////////////////\\n+  //// nsIDownloadProgressListener\\n+\\n   onDownloadStateChange: function dlPL_onDownloadStateChange(aState, aDownload)\\n   {\\n     var dl = getDownload(aDownload.id);\\n@@ -70,23 +87,9 @@ DownloadProgressListener.prototype =\\n         gDownloadsActiveTitle.hidden = false;\\n       case Ci.nsIDownloadManager.DOWNLOAD_DOWNLOADING:\\n         // if dl is non-null, the download is already added to the UI, so we\\n-        // just make sure it is where it is supposed to be\\n-        if (!dl) {\\n-          // We have to create the download object\\n-          let uri = Cc[\\\"@mozilla.org/network/util;1\\\"].\\n-                    getService(Ci.nsIIOService).\\n-                    newFileURI(aDownload.targetFile);\\n-          let referrer = aDownload.referrer;\\n-          dl = createDownloadItem(aDownload.id,\\n-                                  uri.spec,\\n-                                  aDownload.displayName,\\n-                                  aDownload.source.spec,\\n-                                  aDownload.state,\\n-                                  \\\"\\\",\\n-                                  aDownload.percentComplete,\\n-                                  Math.round(aDownload.startTime / 1000),\\n-                                  referrer ? referrer.spec : null);\\n-        }\\n+        // just make sure it is where it is supposed to be; otherwise, create it\\n+        if (!dl)\\n+          dl = this._createDownloadItem(aDownload);\\n         gDownloadsView.insertBefore(dl, gDownloadsActiveTitle.nextSibling);\\n         break;\\n       case Ci.nsIDownloadManager.DOWNLOAD_FAILED:\\n@@ -96,7 +99,6 @@ DownloadProgressListener.prototype =\\n         break;\\n       case Ci.nsIDownloadManager.DOWNLOAD_FINISHED:\\n         downloadCompleted(aDownload);\\n-\\n         autoRemoveAndClose(aDownload);\\n         break;\\n       case Ci.nsIDownloadManager.DOWNLOAD_PAUSED:\\n@@ -113,40 +115,24 @@ DownloadProgressListener.prototype =\\n     } catch (e) { }\\n   },\\n \\n-  onStateChange: function(aWebProgress, aRequest, aStateFlags, aStatus, aDownload)\\n-  {\\n-    if (aStateFlags & Components.interfaces.nsIWebProgressListener.STATE_STOP) {\\n-      let dl = getDownload(aDownload.id);\\n-      if (dl)\\n-        dl.setAttribute(\\\"status\\\", \\\"\\\");\\n-    }\\n-  },\\n-\\n-  onProgressChange: function(aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress,\\n-                              aCurTotalProgress, aMaxTotalProgress, aDownload)\\n+  onProgressChange: function(aWebProgress, aRequest, aCurSelfProgress,\\n+                             aMaxSelfProgress, aCurTotalProgress,\\n+                             aMaxTotalProgress, aDownload)\\n   {\\n     var download = getDownload(aDownload.id);\\n     if (!download) {\\n       // d'oh - why this happens is complicated, let's just add it in\\n-      let uri = Cc[\\\"@mozilla.org/network/util;1\\\"].\\n-                getService(Ci.nsIIOService).newFileURI(aDownload.targetFile);\\n-      let referrer = aDownload.referrer;\\n-      let itm = createDownloadItem(aDownload.id, uri.spec,\\n-                                   aDownload.displayName,\\n-                                   aDownload.source.spec,\\n-                                   aDownload.state,\\n-                                   aDownload.percentComplete,\\n-                                   referrer ? referrer.spec : null);\\n-      download = gDownloadsView.insertBefore(itm, gDownloadsActiveTitle.nextSibling);\\n+      download = this._createDownloadItem(aDownload);\\n+      gDownloadsView.insertBefore(download, gDownloadsActiveTitle.nextSibling);\\n     }\\n \\n     // any activity means we should have active downloads!\\n     gDownloadsActiveTitle.hidden = false;\\n \\n     // Update this download's progressmeter\\n-    if (aDownload.percentComplete == -1)\\n+    if (aDownload.percentComplete == -1) {\\n       download.setAttribute(\\\"progressmode\\\", \\\"undetermined\\\");\\n-    else {\\n+    } else {\\n       download.setAttribute(\\\"progressmode\\\", \\\"normal\\\");\\n       download.setAttribute(\\\"progress\\\", aDownload.percentComplete);\\n     }\\n@@ -158,7 +144,7 @@ DownloadProgressListener.prototype =\\n             .dispatchEvent(event);\\n \\n     // Update the rest of the UI (bytes transferred, bytes total, download rate,\\n-    // time remaining). \\n+    // time remaining).\\n     let status = this._statusFormat;\\n \\n     // Update the bytes transferred and bytes total\\n@@ -213,7 +199,7 @@ DownloadProgressListener.prototype =\\n         // Show 2 digit seconds starting at 60; otherwise use minutes\\n         else if (seconds <= 60)\\n           remain = this._replaceInsert(this._timeSecondsLeft, 1, seconds);\\n-        else \\n+        else\\n           remain = this._replaceInsert(this._timeMinutesLeft, 1,\\n                                        Math.ceil(seconds / 60));\\n       } else {\\n@@ -223,38 +209,32 @@ DownloadProgressListener.prototype =\\n       // Insert 4 is the time remaining\\n       status = this._replaceInsert(status, 4, remain);\\n     }\\n-    \\n+\\n     download.setAttribute(\\\"status\\\", status);\\n \\n     // Update window title\\n     onUpdateProgress();\\n   },\\n+\\n+  onStateChange: function(aWebProgress, aRequest, aState, aStatus, aDownload)\\n+  {\\n+  },\\n+\\n   onLocationChange: function(aWebProgress, aRequest, aLocation, aDownload)\\n   {\\n   },\\n+\\n   onStatusChange: function(aWebProgress, aRequest, aStatus, aMessage, aDownload)\\n   {\\n   },\\n-  onSecurityChange: function(aWebProgress, aRequest, state, aDownload)\\n+\\n+  onSecurityChange: function(aWebProgress, aRequest, aState, aDownload)\\n   {\\n   },\\n-  QueryInterface : function(iid)\\n-  {\\n-    if (iid.equals(Components.interfaces.nsIDownloadProgressListener) ||\\n-        iid.equals(Components.interfaces.nsISupports))\\n-      return this;\\n \\n-    throw Cr.NS_NOINTERFACE;\\n-  },\\n+  //////////////////////////////////////////////////////////////////////////////\\n+  //// DownloadProgressListener\\n \\n-  _replaceInsert: function ( text, index, value ) \\n-  {\\n-    var result = text;\\n-    var regExp = new RegExp( \\\"#\\\"+index );\\n-    result = result.replace( regExp, value );\\n-    return result;\\n-  },\\n-  \\n   // converts a number of bytes to the appropriate unit that results in a\\n   // number that needs fewer than 4 digits\\n   // returns a pair: [new value with 3 sig. figs., its unit]\\n@@ -274,5 +254,26 @@ DownloadProgressListener.prototype =\\n     aBytes = aBytes.toFixed((aBytes > 0) && (aBytes < 100) ? 1 : 0);\\n \\n     return [aBytes, this._units[unitIndex]];\\n+  },\\n+\\n+  _createDownloadItem: function(aDownload)\\n+  {\\n+    let uri = Cc[\\\"@mozilla.org/network/util;1\\\"].\\n+              getService(Ci.nsIIOService).newFileURI(aDownload.targetFile);\\n+    let referrer = aDownload.referrer;\\n+    return createDownloadItem(aDownload.id,\\n+                              uri.spec,\\n+                              aDownload.displayName,\\n+                              aDownload.source.spec,\\n+                              aDownload.state,\\n+                              \\\"\\\",\\n+                              aDownload.percentComplete,\\n+                              Math.round(aDownload.startTime / 1000),\\n+                              referrer ? referrer.spec : null);\\n+  },\\n+\\n+  _replaceInsert: function(aText, aIndex, aValue)\\n+  {\\n+    return aText.replace(\\\"#\\\" + aIndex, aValue);\\n   }\\n };\\n\""}