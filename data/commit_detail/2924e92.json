{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas2924e92\""},"diff":"\"2924e92 #238039 r=mkaply, sr=blizzard (platform specific) OS/2 only - integration with the FT2LIB font engine from Innotek\\ndiff --git a/widget/src/os2/nsGfxDefs.h b/widget/src/os2/nsGfxDefs.h\\nindex 196d193..5491566 100644\\n--- a/widget/src/os2/nsGfxDefs.h\\n+++ b/widget/src/os2/nsGfxDefs.h\\n@@ -63,25 +63,42 @@ void PMERROR(const char *str);\\n //    return GFX (::GpiDestroyPS (mPrintPS), FALSE);\\n \\n #ifdef DEBUG\\n-  extern void GFX_LogErr (unsigned ReturnCode, const char* ErrorExpression, const char* FileName, const char* FunctionName, long LineNum);\\n-\\n-  inline long GFX_Check (long ReturnCode, long ErrorCode, const char* ErrorExpression, const char* FileName, const char* FunctionName, long LineNum) \\n-  { \\n-    if (ReturnCode == ErrorCode)\\n-      GFX_LogErr (ErrorCode, ErrorExpression, FileName, FunctionName, LineNum);\\n+  extern void DEBUG_LogErr(long ReturnCode, const char* ErrorExpression,\\n+                           const char* FileName, const char* FunctionName,\\n+                           long LineNum);\\n+\\n+  inline long CheckSuccess(long ReturnCode, long SuccessCode,\\n+                           const char* ErrorExpression, const char* FileName,\\n+                           const char* FunctionName, long LineNum)\\n+  {\\n+    if (ReturnCode != SuccessCode) {\\n+      DEBUG_LogErr(ReturnCode, ErrorExpression, FileName, FunctionName, LineNum);\\n+    }\\n+    return ReturnCode;\\n+  }\\n \\n-    return ReturnCode ; \\n+  #define CHK_SUCCESS(ReturnCode, SuccessCode)                          \\\\\\n+          CheckSuccess(ReturnCode, SuccessCode, #ReturnCode, __FILE__,  \\\\\\n+                       __FUNCTION__, __LINE__)\\n+\\n+  inline long CheckFailure(long ReturnCode, long ErrorCode,\\n+                           const char* ErrorExpression, const char* FileName,\\n+                           const char* FunctionName, long LineNum)\\n+  {\\n+    if (ReturnCode == ErrorCode) {\\n+      DEBUG_LogErr(ReturnCode, ErrorExpression, FileName, FunctionName, LineNum);\\n+    }\\n+    return ReturnCode;\\n   }\\n \\n-  #ifdef XP_OS2_VACPP\\n-    #define GFX(ReturnCode, ErrorCode)\\\\\\n-            GFX_Check (ReturnCode, ErrorCode, #ReturnCode, __FILE__, __FUNCTION__, __LINE__)\\n-  #else\\n-    #define GFX(ReturnCode, ErrorCode)\\\\\\n-            GFX_Check (ReturnCode, ErrorCode, #ReturnCode, __FILE__, NULL, __LINE__)\\n-  #endif\\n+/*  #define CHK_FAIL(ReturnCode, ErrorCode)                             \\\\ */\\n+  #define GFX(ReturnCode, ErrorCode)                                  \\\\\\n+          CheckFailure(ReturnCode, ErrorCode, #ReturnCode, __FILE__,  \\\\\\n+                       __FUNCTION__, __LINE__)\\n \\n #else\\t// Retail build\\n+  #define CHK_SUCCESS(ReturnCode, SuccessCode) ReturnCode\\n+/*  #define CHK_FAIL(ReturnCode, ErrorCode) ReturnCode */\\n   #define GFX(ReturnCode, ErrorCode) ReturnCode\\n #endif\\n \\n\""}