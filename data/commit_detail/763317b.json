{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas763317b\""},"diff":"\"763317b Bug 396108 - Crash [@ PresShell::ResizeReflow] with iframes, binding, while onbeforecopy removing stuff, patch by Mathieu Fenniak, r=Olli.Pettay, sr=jst, a=jonas\\ndiff --git a/editor/libeditor/html/nsHTMLDataTransfer.cpp b/editor/libeditor/html/nsHTMLDataTransfer.cpp\\nindex d46c0af..f9873ab 100644\\n--- a/editor/libeditor/html/nsHTMLDataTransfer.cpp\\n+++ b/editor/libeditor/html/nsHTMLDataTransfer.cpp\\n@@ -1824,29 +1824,10 @@ NS_IMETHODIMP nsHTMLEditor::Paste(PRInt32 aSelectionType)\\n {\\n   ForceCompositionEnd();\\n \\n-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n-  if (!ps)\\n-    return NS_ERROR_NOT_INITIALIZED;\\n-\\n-  // Fire the paste event.\\n-  nsCOMPtr<nsIDOMNode> eventTarget;\\n-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));\\n-  // On failure to get event target, just forget about it and don't fire.\\n-  if (NS_SUCCEEDED(rv)) {\\n-    nsEventStatus status = nsEventStatus_eIgnore;\\n-    nsEvent evt(PR_TRUE, NS_PASTE);\\n-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,\\n-                                nsnull, &status);\\n-    // if event handler return'd false (PreventDefault)\\n-    if (status == nsEventStatus_eConsumeNoDefault)\\n-      return NS_OK;\\n-\\n-    // Did the event handler cause the editor to be destroyed?\\n-    // (ie. the input element was removed from the document)\\n-    // Don't proceed with paste.\\n-    if (mDidPreDestroy)\\n-      return NS_OK;\\n-  }\\n+  PRBool preventDefault;\\n+  nsresult rv = FireClipboardEvent(NS_PASTE, &preventDefault);\\n+  if (NS_FAILED(rv) || preventDefault)\\n+    return rv;\\n \\n   // Get Clipboard Service\\n   nsCOMPtr<nsIClipboard> clipboard(do_GetService(\\\"@mozilla.org/widget/clipboard;1\\\", &rv));\\n@@ -1959,26 +1940,9 @@ NS_IMETHODIMP nsHTMLEditor::CanPaste(PRInt32 aSelectionType, PRBool *aCanPaste)\\n   NS_ENSURE_ARG_POINTER(aCanPaste);\\n   *aCanPaste = PR_FALSE;\\n \\n-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n-  if (!ps)\\n-    return NS_ERROR_NOT_INITIALIZED;\\n-\\n-  // Fire the beforepaste event.  If the event handler requests to prevent\\n-  // default behavior, set *aCanPaste = true.  (IE-style behavior)\\n-  nsCOMPtr<nsIDOMNode> eventTarget;\\n-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));\\n-  // On failure to get event target, just forget about it and don't fire.\\n-  if (NS_SUCCEEDED(rv)) {\\n-    nsEventStatus status = nsEventStatus_eIgnore;\\n-    nsEvent evt(PR_TRUE, NS_BEFOREPASTE);\\n-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,\\n-                                nsnull, &status);\\n-    // if event handler return'd false (PreventDefault)\\n-    if (status == nsEventStatus_eConsumeNoDefault) {\\n-      *aCanPaste = PR_TRUE;\\n-      return NS_OK;\\n-    }\\n-  }\\n+  nsresult rv = FireClipboardEvent(NS_BEFOREPASTE, aCanPaste);\\n+  if (NS_FAILED(rv) || *aCanPaste)\\n+    return rv;\\n   \\n   // can't paste if readonly\\n   if (!IsModifiable())\\ndiff --git a/editor/libeditor/text/nsPlaintextDataTransfer.cpp b/editor/libeditor/text/nsPlaintextDataTransfer.cpp\\nindex a06ebd6..31370e3 100644\\n--- a/editor/libeditor/text/nsPlaintextDataTransfer.cpp\\n+++ b/editor/libeditor/text/nsPlaintextDataTransfer.cpp\\n@@ -427,29 +427,10 @@ NS_IMETHODIMP nsPlaintextEditor::Paste(PRInt32 aSelectionType)\\n {\\n   ForceCompositionEnd();\\n \\n-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n-  if (!ps)\\n-    return NS_ERROR_NOT_INITIALIZED;\\n-\\n-  // Fire the paste event.\\n-  nsCOMPtr<nsIDOMNode> eventTarget;\\n-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));\\n-  // On failure to get event target, just forget about it and don't fire.\\n-  if (NS_SUCCEEDED(rv)) {\\n-    nsEventStatus status = nsEventStatus_eIgnore;\\n-    nsEvent evt(PR_TRUE, NS_PASTE);\\n-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,\\n-                                nsnull, &status);\\n-    // if event handler return'd false (PreventDefault)\\n-    if (status == nsEventStatus_eConsumeNoDefault)\\n-      return NS_OK;\\n-\\n-    // Did the event handler cause the editor to be destroyed?\\n-    // (ie. the input element was removed from the document)\\n-    // Don't proceed with paste, as it will crash.\\n-    if (mDidPreDestroy)\\n-      return NS_OK;\\n-  }\\n+  PRBool preventDefault;\\n+  nsresult rv = FireClipboardEvent(NS_PASTE, &preventDefault);\\n+  if (NS_FAILED(rv) || preventDefault)\\n+    return rv;\\n \\n   // Get Clipboard Service\\n   nsCOMPtr<nsIClipboard> clipboard(do_GetService(\\\"@mozilla.org/widget/clipboard;1\\\", &rv));\\n@@ -483,27 +464,10 @@ NS_IMETHODIMP nsPlaintextEditor::CanPaste(PRInt32 aSelectionType, PRBool *aCanPa\\n   NS_ENSURE_ARG_POINTER(aCanPaste);\\n   *aCanPaste = PR_FALSE;\\n \\n-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n-  if (!ps)\\n-    return NS_ERROR_NOT_INITIALIZED;\\n-\\n-  // Fire the beforepaste event.  If the event handler requests to prevent\\n-  // default behavior, set *aCanPaste = true.  (IE-style behavior)\\n-  nsCOMPtr<nsIDOMNode> eventTarget;\\n-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));\\n-  // On failure to get event target, just forget about it and don't fire.\\n-  if (NS_SUCCEEDED(rv)) {\\n-    nsEventStatus status = nsEventStatus_eIgnore;\\n-    nsEvent evt(PR_TRUE, NS_BEFOREPASTE);\\n-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,\\n-                                nsnull, &status);\\n-    // if event handler return'd false (PreventDefault)\\n-    if (status == nsEventStatus_eConsumeNoDefault) {\\n-      *aCanPaste = PR_TRUE;\\n-      return NS_OK;\\n-    }\\n-  }\\n-  \\n+  nsresult rv = FireClipboardEvent(NS_BEFOREPASTE, aCanPaste);\\n+  if (NS_FAILED(rv) || *aCanPaste)\\n+    return rv;\\n+\\n   // can't paste if readonly\\n   if (!IsModifiable())\\n     return NS_OK;\\ndiff --git a/editor/libeditor/text/nsPlaintextEditor.cpp b/editor/libeditor/text/nsPlaintextEditor.cpp\\nindex 5457ff9..c0c5ef81 100644\\n--- a/editor/libeditor/text/nsPlaintextEditor.cpp\\n+++ b/editor/libeditor/text/nsPlaintextEditor.cpp\\n@@ -1148,25 +1148,50 @@ nsresult nsPlaintextEditor::GetClipboardEventTarget(nsIDOMNode** aEventTarget)\\n   return nsCopySupport::GetClipboardEventTarget(selection, aEventTarget);\\n }\\n \\n-NS_IMETHODIMP nsPlaintextEditor::Cut()\\n+nsresult nsPlaintextEditor::FireClipboardEvent(PRUint32 msg,\\n+                                               PRBool* aPreventDefault)\\n {\\n+  *aPreventDefault = PR_FALSE;\\n+\\n   nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n   if (!ps)\\n     return NS_ERROR_NOT_INITIALIZED;\\n \\n-  // Fire the cut event.\\n+  // Unsafe to fire event during reflow (bug 396108)\\n+  PRBool isReflowing = PR_TRUE;\\n+  nsresult rv = ps->IsReflowLocked(&isReflowing);\\n+  if (NS_FAILED(rv) || isReflowing)\\n+    return NS_OK;\\n+\\n   nsCOMPtr<nsIDOMNode> eventTarget;\\n-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));\\n-  // On failure to get event target, just forget about it and don't fire.\\n-  if (NS_SUCCEEDED(rv)) {\\n-    nsEventStatus status = nsEventStatus_eIgnore;\\n-    nsEvent evt(PR_TRUE, NS_CUT);\\n-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,\\n-                                nsnull, &status);\\n-    // if event handler return'd false (PreventDefault)\\n-    if (status == nsEventStatus_eConsumeNoDefault)\\n-      return NS_OK;\\n-  }\\n+  rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));\\n+  if (NS_FAILED(rv))\\n+    // On failure to get event target, just forget about it and don't fire.\\n+    return NS_OK;\\n+\\n+  nsEventStatus status = nsEventStatus_eIgnore;\\n+  nsEvent evt(PR_TRUE, msg);\\n+  nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,\\n+                              nsnull, &status);\\n+  // if event handler return'd false (PreventDefault)\\n+  if (status == nsEventStatus_eConsumeNoDefault)\\n+    *aPreventDefault = PR_TRUE;\\n+\\n+  // Did the event handler cause the editor to be destroyed? (ie. the input\\n+  // element was removed from the document)  Don't proceed with command,\\n+  // could crash, definitely does during paste.\\n+  if (mDidPreDestroy)\\n+    return NS_ERROR_NOT_INITIALIZED;\\n+\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP nsPlaintextEditor::Cut()\\n+{\\n+  PRBool preventDefault;\\n+  nsresult rv = FireClipboardEvent(NS_CUT, &preventDefault);\\n+  if (NS_FAILED(rv) || preventDefault)\\n+    return rv;\\n \\n   nsCOMPtr<nsISelection> selection;\\n   rv = GetSelection(getter_AddRefs(selection));\\n@@ -1177,6 +1202,8 @@ NS_IMETHODIMP nsPlaintextEditor::Cut()\\n   if (NS_SUCCEEDED(selection->GetIsCollapsed(&isCollapsed)) && isCollapsed)\\n     return NS_OK;  // just return ok so no JS error is thrown\\n \\n+  // ps should be guaranteed by FireClipboardEvent not failing\\n+  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n   rv = ps->DoCopy();\\n   if (NS_SUCCEEDED(rv))\\n     rv = DeleteSelection(eNone);\\n@@ -1188,26 +1215,9 @@ NS_IMETHODIMP nsPlaintextEditor::CanCut(PRBool *aCanCut)\\n   NS_ENSURE_ARG_POINTER(aCanCut);\\n   *aCanCut = PR_FALSE;\\n \\n-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n-  if (!ps)\\n-    return NS_ERROR_NOT_INITIALIZED;\\n-\\n-  // Fire the beforecut event.  If the event handler requests to prevent\\n-  // default behavior, set *aCanCut = true.  (IE-style behavior)\\n-  nsCOMPtr<nsIDOMNode> eventTarget;\\n-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));\\n-  // On failure to get event target, just forget about it and don't fire.\\n-  if (NS_SUCCEEDED(rv)) {\\n-    nsEventStatus status = nsEventStatus_eIgnore;\\n-    nsEvent evt(PR_TRUE, NS_BEFORECUT);\\n-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,\\n-                                nsnull, &status);\\n-    // if event handler return'd false (PreventDefault)\\n-    if (status == nsEventStatus_eConsumeNoDefault) {\\n-      *aCanCut = PR_TRUE;\\n-      return NS_OK;\\n-    }\\n-  }\\n+  nsresult rv = FireClipboardEvent(NS_BEFORECUT, aCanCut);\\n+  if (NS_FAILED(rv) || *aCanCut)\\n+    return rv;\\n \\n   nsCOMPtr<nsISelection> selection;\\n   rv = GetSelection(getter_AddRefs(selection));\\n@@ -1223,26 +1233,13 @@ NS_IMETHODIMP nsPlaintextEditor::CanCut(PRBool *aCanCut)\\n \\n NS_IMETHODIMP nsPlaintextEditor::Copy()\\n {\\n-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n-  if (!ps)\\n-    return NS_ERROR_NOT_INITIALIZED;\\n-\\n-  // Fire the copy event.\\n-  nsCOMPtr<nsIDOMNode> eventTarget;\\n-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));\\n-  // On failure to get event target, just forget about it and don't fire.\\n-  if (NS_SUCCEEDED(rv)) {\\n-    nsEventStatus status = nsEventStatus_eIgnore;\\n-    nsEvent evt(PR_TRUE, NS_COPY);\\n-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,\\n-                                nsnull, &status);\\n-    // if event handler return'd false (PreventDefault)\\n-    if (status == nsEventStatus_eConsumeNoDefault)\\n-      return NS_OK;\\n-    // the affect of the event handler closing the window here has been\\n-    // tested, it works without crashes.\\n-  }\\n+  PRBool preventDefault;\\n+  nsresult rv = FireClipboardEvent(NS_COPY, &preventDefault);\\n+  if (NS_FAILED(rv) || preventDefault)\\n+    return rv;\\n \\n+  // ps should be guaranteed by FireClipboardEvent not failing\\n+  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n   return ps->DoCopy();\\n }\\n \\n@@ -1251,27 +1248,10 @@ NS_IMETHODIMP nsPlaintextEditor::CanCopy(PRBool *aCanCopy)\\n   NS_ENSURE_ARG_POINTER(aCanCopy);\\n   *aCanCopy = PR_FALSE;\\n \\n-  nsCOMPtr<nsIPresShell> ps = do_QueryReferent(mPresShellWeak);\\n-  if (!ps)\\n-    return NS_ERROR_NOT_INITIALIZED;\\n+  nsresult rv = FireClipboardEvent(NS_BEFORECOPY, aCanCopy);\\n+  if (NS_FAILED(rv) || *aCanCopy)\\n+    return rv;\\n \\n-  // Fire the beforecopy event.  If the event handler requests to prevent\\n-  // default behavior, set *aCopyable = true.  (IE-style behavior)\\n-  nsCOMPtr<nsIDOMNode> eventTarget;\\n-  nsresult rv = GetClipboardEventTarget(getter_AddRefs(eventTarget));\\n-  // On failure to get event target, just forget about it and don't fire.\\n-  if (NS_SUCCEEDED(rv)) {\\n-    nsEventStatus status = nsEventStatus_eIgnore;\\n-    nsEvent evt(PR_TRUE, NS_BEFORECOPY);\\n-    nsEventDispatcher::Dispatch(eventTarget, ps->GetPresContext(), &evt,\\n-                                nsnull, &status);\\n-    // if event handler return'd false (PreventDefault)\\n-    if (status == nsEventStatus_eConsumeNoDefault) {\\n-      *aCanCopy = PR_TRUE;\\n-      return NS_OK;\\n-    }\\n-  }\\n-  \\n   nsCOMPtr<nsISelection> selection;\\n   rv = GetSelection(getter_AddRefs(selection));\\n   if (NS_FAILED(rv)) return rv;\\ndiff --git a/editor/libeditor/text/nsPlaintextEditor.h b/editor/libeditor/text/nsPlaintextEditor.h\\nindex 14dc662..a4ed2b5 100644\\n--- a/editor/libeditor/text/nsPlaintextEditor.h\\n+++ b/editor/libeditor/text/nsPlaintextEditor.h\\n@@ -216,7 +216,8 @@ protected:\\n \\n   // Wrapper for nsCopySupport::GetClipboardEventTarget, finds target to fire\\n   // [cut,copy,paste] and [beforecut,beforecopy,beforepaste] events at.\\n-  virtual nsresult GetClipboardEventTarget(nsIDOMNode** aEventTarget);\\n+  nsresult GetClipboardEventTarget(nsIDOMNode** aEventTarget);\\n+  nsresult FireClipboardEvent(PRUint32 msg, PRBool* aPreventDefault);\\n \\n // Data members\\n protected:\\n\""}