{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basec3ff32\""},"diff":"\"ec3ff32 bug 377784: new Applications prefpane, which replaces the Download Actions dialog and the Feeds prefpane and provides a better UI for configuring handlers for MIME types and protocol schemes; r=gavin, ui-r=mconnor\\ndiff --git a/browser/components/feeds/public/nsIWebContentConverterRegistrar.idl b/browser/components/feeds/public/nsIWebContentConverterRegistrar.idl\\nindex 2583486..58b8cfe 100644\\n--- a/browser/components/feeds/public/nsIWebContentConverterRegistrar.idl\\n+++ b/browser/components/feeds/public/nsIWebContentConverterRegistrar.idl\\n@@ -36,11 +36,12 @@\\n  * ***** END LICENSE BLOCK ***** */\\n \\n #include \\\"nsISupports.idl\\\"\\n+#include \\\"nsIMIMEInfo.idl\\\"\\n \\n interface nsIRequest;\\n \\n-[scriptable, uuid(2bd97d63-e928-4d52-9fd4-34061349a9a6)]\\n-interface nsIWebContentHandlerInfo : nsISupports\\n+[scriptable, uuid(eb361098-5158-4b21-8f98-50b445f1f0b2)]\\n+interface nsIWebContentHandlerInfo : nsIHandlerApp\\n {\\n   /**\\n    * The content type handled by the handler\\n@@ -53,11 +54,6 @@ interface nsIWebContentHandlerInfo : nsISupports\\n    */\\n   readonly attribute AString uri;\\n \\n-  /**\\n-   * A human readable title of the handler.\\n-   */\\n-  readonly attribute AString name;\\n-\\n   /** \\n    * Gets the service URL Spec, with the loading document URI encoded in it.\\n    * @param   uri\\n@@ -66,15 +62,6 @@ interface nsIWebContentHandlerInfo : nsISupports\\n    *          it.\\n    */\\n   AString getHandlerURI(in AString uri);\\n-\\n-  /**\\n-   * Determines if this handler object is equivalent to another.\\n-   * @param   other\\n-   *          The other handler info object\\n-   * @returns true if the two objects are equivalent (same content type, \\n-   *          same uri).\\n-   */\\n-  boolean equals(in nsIWebContentHandlerInfo other);\\n };\\n \\n [scriptable, uuid(632b16a8-5c6b-4dc5-a8db-01771af7a79d)]\\ndiff --git a/browser/components/feeds/src/WebContentConverter.js b/browser/components/feeds/src/WebContentConverter.js\\nindex 83f36c9..9f054c6 100644\\n--- a/browser/components/feeds/src/WebContentConverter.js\\n+++ b/browser/components/feeds/src/WebContentConverter.js\\n@@ -111,6 +111,28 @@ function ServiceInfo(contentType, uri, name) {\\n }\\n ServiceInfo.prototype = {\\n   /**\\n+   * See nsIHandlerApp\\n+   */\\n+  get name() {\\n+    return this._name;\\n+  },\\n+  \\n+  /**\\n+   * See nsIHandlerApp\\n+   */\\n+  equals: function SI_equals(aHandlerApp) {\\n+    if (!aHandlerApp)\\n+      throw Cr.NS_ERROR_NULL_POINTER;\\n+\\n+    if (aHandlerApp instanceof Ci.nsIWebContentHandlerInfo &&\\n+        aHandlerApp.contentType == this.contentType &&\\n+        aHandlerApp.uri == this.uri)\\n+      return true;\\n+\\n+    return false;\\n+  },\\n+\\n+  /**\\n    * See nsIWebContentHandlerInfo\\n    */\\n   get contentType() {\\n@@ -127,25 +149,10 @@ ServiceInfo.prototype = {\\n   /**\\n    * See nsIWebContentHandlerInfo\\n    */\\n-  get name() {\\n-    return this._name;\\n-  },\\n-  \\n-  /**\\n-   * See nsIWebContentHandlerInfo\\n-   */\\n   getHandlerURI: function SI_getHandlerURI(uri) {\\n     return this._uri.replace(/%s/gi, encodeURIComponent(uri));\\n   },\\n   \\n-  /**\\n-   * See nsIWebContentHandlerInfo\\n-   */\\n-  equals: function SI_equals(other) {\\n-    return this.contentType == other.contentType &&\\n-           this.uri == other.uri;\\n-  },\\n-  \\n   QueryInterface: function SI_QueryInterface(iid) {\\n     if (iid.equals(Ci.nsIWebContentHandlerInfo) ||\\n         iid.equals(Ci.nsISupports))\\ndiff --git a/browser/components/preferences/applications.js b/browser/components/preferences/applications.js\\nnew file mode 100755\\nindex 0000000..b318ff8\\n--- /dev/null\\n+++ b/browser/components/preferences/applications.js\\n@@ -0,0 +1,1513 @@\\n+/*\\n+# -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-\\n+# ***** BEGIN LICENSE BLOCK *****\\n+# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+#\\n+# The contents of this file are subject to the Mozilla Public License Version\\n+# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+# the License. You may obtain a copy of the License at\\n+# http://www.mozilla.org/MPL/\\n+#\\n+# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+# for the specific language governing rights and limitations under the\\n+# License.\\n+#\\n+# The Original Code is the Download Actions Manager.\\n+#\\n+# The Initial Developer of the Original Code is\\n+# Ben Goodger.\\n+# Portions created by the Initial Developer are Copyright (C) 2000\\n+# the Initial Developer. All Rights Reserved.\\n+#\\n+# Contributor(s):\\n+#   Ben Goodger <ben@mozilla.org>\\n+#   Jeff Walden <jwalden+code@mit.edu>\\n+#   Asaf Romano <mozilla.mano@sent.com>\\n+#   Myk Melez <myk@mozilla.org>\\n+#\\n+# Alternatively, the contents of this file may be used under the terms of\\n+# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+# in which case the provisions of the GPL or the LGPL are applicable instead\\n+# of those above. If you wish to allow use of your version of this file only\\n+# under the terms of either the GPL or the LGPL, and not to allow others to\\n+# use your version of this file under the terms of the MPL, indicate your\\n+# decision by deleting the provisions above and replace them with the notice\\n+# and other provisions required by the GPL or the LGPL. If you do not delete\\n+# the provisions above, a recipient may use your version of this file under\\n+# the terms of any one of the MPL, the GPL or the LGPL.\\n+#\\n+# ***** END LICENSE BLOCK *****\\n+ */\\n+\\n+//****************************************************************************//\\n+// Constants & Enumeration Values\\n+\\n+/*\\n+#ifndef XP_MACOSX\\n+*/\\n+var Cc = Components.classes;\\n+var Ci = Components.interfaces;\\n+var Cr = Components.results;\\n+var TYPE_MAYBE_FEED = \\\"application/vnd.mozilla.maybe.feed\\\";\\n+const kXULNS = \\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\";\\n+/*\\n+#endif\\n+*/\\n+\\n+const PREF_DISABLED_PLUGIN_TYPES = \\\"plugin.disable_full_page_plugin_for_types\\\";\\n+\\n+// Preferences that affect which entries to show in the list.\\n+const PREF_SHOW_PLUGINS_IN_LIST = \\\"browser.download.show_plugins_in_list\\\";\\n+const PREF_HIDE_PLUGINS_WITHOUT_EXTENSIONS =\\n+  \\\"browser.download.hide_plugins_without_extensions\\\";\\n+\\n+/*\\n+ * Preferences where we store handling information about the feed type.\\n+ *\\n+ * browser.feeds.handler\\n+ * - \\\"bookmarks\\\", \\\"reader\\\" (clarified further using the .default preference),\\n+ *   or \\\"ask\\\" -- indicates the default handler being used to process feeds;\\n+ *   \\\"bookmarks\\\" is obsolete; to specify that the handler is bookmarks,\\n+ *   set browser.feeds.handler.default to \\\"bookmarks\\\";\\n+ *\\n+ * browser.feeds.handler.default\\n+ * - \\\"bookmarks\\\", \\\"client\\\" or \\\"web\\\" -- indicates the chosen feed reader used\\n+ *   to display feeds, either transiently (i.e., when the \\\"use as default\\\"\\n+ *   checkbox is unchecked, corresponds to when browser.feeds.handler==\\\"ask\\\")\\n+ *   or more permanently (i.e., the item displayed in the dropdown in Feeds\\n+ *   preferences)\\n+ *\\n+ * browser.feeds.handler.webservice\\n+ * - the URL of the currently selected web service used to read feeds\\n+ *\\n+ * browser.feeds.handlers.application\\n+ * - nsILocalFile, stores the current client-side feed reading app if one has\\n+ *   been chosen\\n+ */\\n+const PREF_FEED_SELECTED_APP    = \\\"browser.feeds.handlers.application\\\";\\n+const PREF_FEED_SELECTED_WEB    = \\\"browser.feeds.handlers.webservice\\\";\\n+const PREF_FEED_SELECTED_ACTION = \\\"browser.feeds.handler\\\";\\n+const PREF_FEED_SELECTED_READER = \\\"browser.feeds.handler.default\\\";\\n+\\n+// The nsHandlerInfoAction enumeration values in nsIHandlerInfo identify\\n+// the actions the application can take with content of various types.\\n+// But since nsIHandlerInfo doesn't support plugins, there's no value\\n+// identifying the \\\"use plugin\\\" action, so we use this constant instead.\\n+const kActionUsePlugin = 5;\\n+\\n+\\n+//****************************************************************************//\\n+// Utilities\\n+\\n+function getDisplayNameForFile(aFile) {\\n+/*\\n+#ifdef XP_WIN\\n+*/\\n+  if (aFile instanceof Ci.nsILocalFileWin) {\\n+    try {\\n+      return aFile.getVersionInfoField(\\\"FileDescription\\\"); \\n+    }\\n+    catch(ex) {\\n+      // fall through to the file name\\n+    }\\n+  }\\n+/*\\n+#endif\\n+#ifdef XP_MACOSX\\n+*/\\n+  if (aFile instanceof Ci.nsILocalFileMac) {\\n+    try {\\n+      return aFile.bundleDisplayName;\\n+    }\\n+    catch(ex) {\\n+      // fall through to the file name\\n+    }\\n+  }\\n+/*\\n+#endif\\n+*/\\n+\\n+  return Cc[\\\"@mozilla.org/network/io-service;1\\\"].\\n+         getService(Ci.nsIIOService).\\n+         newFileURI(aFile).\\n+         QueryInterface(Ci.nsIURL).\\n+         fileName;\\n+}\\n+\\n+function getLocalHandlerApp(aFile) {\\n+  var localHandlerApp = Cc[\\\"@mozilla.org/uriloader/local-handler-app;1\\\"].\\n+                        createInstance(Ci.nsILocalHandlerApp);\\n+  localHandlerApp.name = getDisplayNameForFile(aFile);\\n+  localHandlerApp.executable = aFile;\\n+\\n+  return localHandlerApp;\\n+}\\n+\\n+\\n+//****************************************************************************//\\n+// HandlerInfoWrapper\\n+\\n+/**\\n+ * This object wraps nsIHandlerInfo with some additional functionality\\n+ * the Applications prefpane needs to display and allow modification of\\n+ * the list of handled types.\\n+ * \\n+ * We create an instance of this wrapper for each entry we might display\\n+ * in the prefpane, and we compose the instances from various sources,\\n+ * including navigator.plugins and the handler service.\\n+ *\\n+ * We don't implement all the original nsIHandlerInfo functionality,\\n+ * just the stuff that the prefpane needs.\\n+ * \\n+ * In theory, all of the custom functionality in this wrapper should get\\n+ * pushed down into nsIHandlerInfo eventually.\\n+ */\\n+function HandlerInfoWrapper(aType, aHandlerInfo) {\\n+  this._type = aType;\\n+  this.wrappedHandlerInfo = aHandlerInfo;\\n+}\\n+\\n+HandlerInfoWrapper.prototype = {\\n+  // The wrapped nsIHandlerInfo object.  In general, this object is private,\\n+  // but there are a couple cases where callers access it directly for things\\n+  // we haven't (yet?) implemented, so we make it a public property.\\n+  wrappedHandlerInfo: null,\\n+\\n+  //**************************************************************************//\\n+  // Convenience Utils\\n+\\n+  _handlerSvc: Cc[\\\"@mozilla.org/uriloader/handler-service;1\\\"].\\n+               getService(Ci.nsIHandlerService),\\n+\\n+  // Retrieve this as nsIPrefBranch and then immediately QI to nsIPrefBranch2\\n+  // so both interfaces are available to callers.\\n+  _prefSvc: Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n+            getService(Ci.nsIPrefBranch).\\n+            QueryInterface(Ci.nsIPrefBranch2),\\n+\\n+  _categoryMgr: Cc[\\\"@mozilla.org/categorymanager;1\\\"].\\n+                getService(Ci.nsICategoryManager),\\n+\\n+  element: function(aID) {\\n+    return document.getElementById(aID);\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // nsISupports\\n+\\n+  QueryInterface: function(aIID) {\\n+    if (aIID.equals(Ci.nsIHandlerInfo) ||\\n+        aIID.equals(Ci.nsISupports) ||\\n+        (aIID.equals(Ci.nsIMIMEInfo) &&\\n+         this.wrappedHandlerInfo instanceof Ci.nsIMIMEInfo))\\n+      return this;\\n+\\n+    throw Cr.NS_ERROR_NO_INTERFACE;\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // nsIHandlerInfo\\n+\\n+  // The MIME type or protocol scheme.\\n+  _type: null,\\n+  get type() {\\n+    return this._type;\\n+  },\\n+\\n+  get description() {\\n+    if (this.wrappedHandlerInfo.description)\\n+      return this.wrappedHandlerInfo.description;\\n+\\n+    if (this.primaryExtension) {\\n+      let bundle = this.element(\\\"bundlePreferences\\\");\\n+      var extension = this.primaryExtension.toUpperCase();\\n+      return bundle.getFormattedString(\\\"fileEnding\\\", [extension]);\\n+    }\\n+\\n+    return this.type;\\n+  },\\n+\\n+  get preferredApplicationHandler() {\\n+    return this.wrappedHandlerInfo.preferredApplicationHandler;\\n+  },\\n+\\n+  set preferredApplicationHandler(aNewValue) {\\n+    this.wrappedHandlerInfo.preferredApplicationHandler = aNewValue;\\n+\\n+    // Make sure the preferred handler is in the set of possible handlers.\\n+    if (aNewValue) {\\n+      var found = false;\\n+      var possibleApps = this.possibleApplicationHandlers.\\n+                         QueryInterface(Ci.nsIArray).enumerate();\\n+      while (possibleApps.hasMoreElements() && !found)\\n+        found = possibleApps.getNext().equals(aNewValue);\\n+      if (!found)\\n+        this.possibleApplicationHandlers.appendElement(aNewValue, false);\\n+    }\\n+  },\\n+\\n+  get possibleApplicationHandlers() {\\n+    return this.wrappedHandlerInfo.possibleApplicationHandlers;\\n+  },\\n+\\n+  get hasDefaultHandler() {\\n+    return this.wrappedHandlerInfo.hasDefaultHandler;\\n+  },\\n+\\n+  get defaultDescription() {\\n+    return this.wrappedHandlerInfo.defaultDescription;\\n+  },\\n+\\n+  // What to do with content of this type.\\n+  get preferredAction() {\\n+    // If we have an enabled plugin, then the action is to use that plugin.\\n+    if (this.plugin && !this.isDisabledPluginType)\\n+      return kActionUsePlugin;\\n+\\n+    // XXX nsIMIMEService::getFromTypeAndExtension returns handler infos\\n+    // whose default action is saveToDisk; should we do that here too?\\n+    // And will there ever be handler info objects with no preferred action?\\n+    if (!this.wrappedHandlerInfo.preferredAction) {\\n+      if (gApplicationsPane.isValidHandlerApp(this.preferredApplicationHandler))\\n+        return Ci.nsIHandlerInfo.useHelperApp;\\n+      else\\n+        return Ci.nsIHandlerInfo.useSystemDefault;\\n+    }\\n+\\n+    // If the action is to use a helper app, but we don't have a preferred\\n+    // helper app, switch to using the system default.\\n+    if (this.wrappedHandlerInfo.preferredAction == Ci.nsIHandlerInfo.useHelperApp &&\\n+        !gApplicationsPane.isValidHandlerApp(this.preferredApplicationHandler))\\n+      return Ci.nsIHandlerInfo.useSystemDefault;\\n+\\n+    return this.wrappedHandlerInfo.preferredAction;\\n+  },\\n+\\n+  set preferredAction(aNewValue) {\\n+    // We don't modify the preferred action if the new action is to use a plugin\\n+    // because handler info objects don't understand our custom \\\"use plugin\\\"\\n+    // value.  Also, leaving it untouched means that we can automatically revert\\n+    // to the old setting if the user ever removes the plugin.\\n+\\n+    if (aNewValue != kActionUsePlugin)\\n+      this.wrappedHandlerInfo.preferredAction = aNewValue;\\n+  },\\n+\\n+  get alwaysAskBeforeHandling() {\\n+    // If this type is handled only by a plugin, we can't trust the value\\n+    // in the handler info object, since it'll be a default based on the absence\\n+    // of any user configuration, and the default in that case is to always ask,\\n+    // even though we never ask for content handled by a plugin, so special case\\n+    // plugin-handled types by returning false here.\\n+    if (this.plugin && this.handledOnlyByPlugin)\\n+      return false;\\n+\\n+    return this.wrappedHandlerInfo.alwaysAskBeforeHandling;\\n+  },\\n+\\n+  set alwaysAskBeforeHandling(aNewValue) {\\n+    this.wrappedHandlerInfo.alwaysAskBeforeHandling = aNewValue;\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // nsIMIMEInfo\\n+\\n+  // The primary file extension associated with this type, if any.\\n+  //\\n+  // XXX Plugin objects contain an array of MimeType objects with \\\"suffixes\\\"\\n+  // properties; if this object has an associated plugin, shouldn't we check\\n+  // those properties for an extension?\\n+  get primaryExtension() {\\n+    try {\\n+      if (this.wrappedHandlerInfo instanceof Ci.nsIMIMEInfo &&\\n+          this.wrappedHandlerInfo.primaryExtension)\\n+        return this.wrappedHandlerInfo.primaryExtension\\n+    } catch(ex) {}\\n+\\n+    return null;\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // Plugin Handling\\n+\\n+  // A plugin that can handle this type, if any.\\n+  //\\n+  // Note: just because we have one doesn't mean it *will* handle the type.\\n+  // That depends on whether or not the type is in the list of types for which\\n+  // plugin handling is disabled.\\n+  plugin: null,\\n+\\n+  // Whether or not this type is only handled by a plugin or is also handled\\n+  // by some user-configured action as specified in the handler info object.\\n+  //\\n+  // Note: we can't just check if there's a handler info object for this type,\\n+  // because OS and user configuration is mixed up in the handler info object,\\n+  // so we always need to retrieve it for the OS info and can't tell whether\\n+  // it represents only OS-default information or user-configured information.\\n+  //\\n+  // FIXME: once handler info records are broken up into OS-provided records\\n+  // and user-configured records, stop using this boolean flag and simply\\n+  // check for the presence of a user-configured record to determine whether\\n+  // or not this type is only handled by a plugin.  Filed as bug 395142.\\n+  handledOnlyByPlugin: undefined,\\n+\\n+  get isDisabledPluginType() {\\n+    return this._getDisabledPluginTypes().indexOf(this.type) != -1;\\n+  },\\n+\\n+  _getDisabledPluginTypes: function() {\\n+    var types = \\\"\\\";\\n+\\n+    if (this._prefSvc.prefHasUserValue(PREF_DISABLED_PLUGIN_TYPES))\\n+      types = this._prefSvc.getCharPref(PREF_DISABLED_PLUGIN_TYPES);\\n+\\n+    // Only split if the string isn't empty so we don't end up with an array\\n+    // containing a single empty string.\\n+    if (types != \\\"\\\")\\n+      return types.split(\\\",\\\");\\n+\\n+    return [];\\n+  },\\n+\\n+  disablePluginType: function() {\\n+    var disabledPluginTypes = this._getDisabledPluginTypes();\\n+\\n+    if (disabledPluginTypes.indexOf(this.type) == -1)\\n+      disabledPluginTypes.push(this.type);\\n+\\n+    this._prefSvc.setCharPref(PREF_DISABLED_PLUGIN_TYPES,\\n+                              disabledPluginTypes.join(\\\",\\\"));\\n+\\n+    // Update the category manager so existing browser windows update.\\n+    this._categoryMgr.deleteCategoryEntry(\\\"Gecko-Content-Viewers\\\",\\n+                                          this.type,\\n+                                          false);\\n+  },\\n+\\n+  enablePluginType: function() {\\n+    var disabledPluginTypes = this._getDisabledPluginTypes();\\n+\\n+    var type = this.type;\\n+    disabledPluginTypes = disabledPluginTypes.filter(function(v) v != type);\\n+\\n+    this._prefSvc.setCharPref(PREF_DISABLED_PLUGIN_TYPES,\\n+                              disabledPluginTypes.join(\\\",\\\"));\\n+\\n+    // Update the category manager so existing browser windows update.\\n+    this._categoryMgr.\\n+      addCategoryEntry(\\\"Gecko-Content-Viewers\\\",\\n+                       this.type,\\n+                       \\\"@mozilla.org/content/plugin/document-loader-factory;1\\\",\\n+                       false,\\n+                       true);\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // Storage\\n+\\n+  store: function() {\\n+    this._handlerSvc.store(this.wrappedHandlerInfo);\\n+  },\\n+\\n+  remove: function() {\\n+    this._handlerSvc.remove(this.wrappedHandlerInfo);\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // Icons\\n+\\n+  get smallIcon() {\\n+    return this._getIcon(16);\\n+  },\\n+\\n+  get largeIcon() {\\n+    return this._getIcon(32);\\n+  },\\n+\\n+  _getIcon: function(aSize) {\\n+    if (this.primaryExtension)\\n+      return \\\"moz-icon://goat.\\\" + this.primaryExtension + \\\"?size=\\\" + aSize;\\n+\\n+    if (this.wrappedHandlerInfo instanceof Ci.nsIMIMEInfo)\\n+      return \\\"moz-icon://goat?size=\\\" + aSize + \\\"&contentType=\\\" + this.type;\\n+\\n+    // FIXME: consider returning some generic icon when we can't get a URL for\\n+    // one (for example in the case of protocol schemes).  Filed as bug 395141.\\n+    return null;\\n+  }\\n+\\n+};\\n+\\n+\\n+//****************************************************************************//\\n+// Feed Handler Info\\n+\\n+/**\\n+ * This object implements nsIHandlerInfo for the feed type.  It's a separate\\n+ * object because we currently store handling information for the feed type\\n+ * in a set of preferences rather than the nsIHandlerService-managed datastore.\\n+ * \\n+ * This object inherits from HandlerInfoWrapper in order to get functionality\\n+ * that isn't special to the feed type.\\n+ * \\n+ * XXX Should we inherit from HandlerInfoWrapper?  After all, we override\\n+ * most of that wrapper's properties and methods, and we have to dance around\\n+ * the fact that the wrapper expects to have a wrappedHandlerInfo, which we\\n+ * don't provide.\\n+ */\\n+var feedHandlerInfo = {\\n+\\n+  __proto__: new HandlerInfoWrapper(TYPE_MAYBE_FEED, null),\\n+\\n+\\n+  //**************************************************************************//\\n+  // Convenience Utils\\n+\\n+  _converterSvc:\\n+    Cc[\\\"@mozilla.org/embeddor.implemented/web-content-handler-registrar;1\\\"].\\n+    getService(Ci.nsIWebContentConverterService),\\n+\\n+  _shellSvc: Cc[\\\"@mozilla.org/browser/shell-service;1\\\"].\\n+             getService(Ci.nsIShellService),\\n+\\n+\\n+  //**************************************************************************//\\n+  // nsIHandlerInfo\\n+\\n+  get description() {\\n+    return gApplicationsPane._bundle.getString(\\\"webFeed\\\");\\n+  },\\n+\\n+  get preferredApplicationHandler() {\\n+    switch (this.element(PREF_FEED_SELECTED_READER).value) {\\n+      case \\\"client\\\":\\n+        var file = this.element(PREF_FEED_SELECTED_APP).value;\\n+        if (file)\\n+          return getLocalHandlerApp(file);\\n+\\n+        return null;\\n+\\n+      case \\\"web\\\":\\n+        var uri = this.element(PREF_FEED_SELECTED_WEB).value;\\n+        if (!uri)\\n+          return null;\\n+        return this._converterSvc.getWebContentHandlerByURI(TYPE_MAYBE_FEED,\\n+                                                            uri);\\n+\\n+      case \\\"bookmarks\\\":\\n+      default:\\n+        // When the pref is set to bookmarks, we handle feeds internally,\\n+        // we don't forward them to a local or web handler app, so there is\\n+        // no preferred handler.\\n+        return null;\\n+    }\\n+  },\\n+\\n+  set preferredApplicationHandler(aNewValue) {\\n+    if (aNewValue instanceof Ci.nsILocalHandlerApp) {\\n+      this.element(PREF_FEED_SELECTED_APP).value = aNewValue.executable;\\n+      this.element(PREF_FEED_SELECTED_READER).value = \\\"client\\\";\\n+    }\\n+    else if (aNewValue instanceof Ci.nsIWebContentHandlerInfo) {\\n+      this.element(PREF_FEED_SELECTED_WEB).value = aNewValue.uri;\\n+      this.element(PREF_FEED_SELECTED_READER).value = \\\"web\\\";\\n+      // Make the web handler be the new \\\"auto handler\\\" for feeds.\\n+      // Note: we don't have to unregister the auto handler when the user picks\\n+      // a non-web handler (local app, Live Bookmarks, etc.) because the service\\n+      // only uses the \\\"auto handler\\\" when the selected reader is a web handler.\\n+      // We also don't have to unregister it when the user turns on \\\"always ask\\\"\\n+      // (i.e. preview in browser), since that also overrides the auto handler.\\n+      this._converterSvc.setAutoHandler(this.type, aNewValue);\\n+    }\\n+  },\\n+\\n+  get possibleApplicationHandlers() {\\n+    var handlerApps = Cc[\\\"@mozilla.org/array;1\\\"].\\n+                      createInstance(Ci.nsIMutableArray);\\n+\\n+    // Add the \\\"selected\\\" local application, if there is one and it's different\\n+    // from the default handler for the OS.  Unlike for other types, there can\\n+    // be only one of these at a time for the feed type, since feed preferences\\n+    // only store a single local app.\\n+    var preferredAppFile = this.element(PREF_FEED_SELECTED_APP).value;\\n+    if (preferredAppFile && preferredAppFile.exists()) {\\n+      let preferredApp = getLocalHandlerApp(preferredAppFile);\\n+      let defaultApp = this._defaultApplicationHandler;\\n+      if (!defaultApp || !defaultApp.equals(preferredApp))\\n+        handlerApps.appendElement(preferredApp, false);\\n+    }\\n+\\n+    // Add the registered web handlers.  There can be any number of these.\\n+    var webHandlers = this._converterSvc.getContentHandlers(this.type, {});\\n+    for each (let webHandler in webHandlers)\\n+      handlerApps.appendElement(webHandler, false);\\n+\\n+    return handlerApps;\\n+  },\\n+\\n+  __defaultApplicationHandler: undefined,\\n+  get _defaultApplicationHandler() {\\n+    if (typeof this.__defaultApplicationHandler != \\\"undefined\\\")\\n+      return this.__defaultApplicationHandler;\\n+\\n+    var defaultFeedReader;\\n+    try {\\n+      defaultFeedReader = this._shellSvc.defaultFeedReader;\\n+    }\\n+    catch(ex) {\\n+      // no default reader\\n+    }\\n+\\n+    if (defaultFeedReader) {\\n+      let handlerApp = Cc[\\\"@mozilla.org/uriloader/local-handler-app;1\\\"].\\n+                       createInstance(Ci.nsIHandlerApp);\\n+      handlerApp.name = getDisplayNameForFile(defaultFeedReader);\\n+      handlerApp.QueryInterface(Ci.nsILocalHandlerApp);\\n+      handlerApp.executable = defaultFeedReader;\\n+\\n+      this.__defaultApplicationHandler = handlerApp;\\n+    }\\n+    else {\\n+      this.__defaultApplicationHandler = null;\\n+    }\\n+\\n+    return this.__defaultApplicationHandler;\\n+  },\\n+\\n+  get hasDefaultHandler() {\\n+    try {\\n+      if (this._shellSvc.defaultFeedReader)\\n+        return true;\\n+    }\\n+    catch(ex) {\\n+      // no default reader\\n+    }\\n+\\n+    return false;\\n+  },\\n+\\n+  get defaultDescription() {\\n+    if (this.hasDefaultHandler)\\n+      return this._defaultApplicationHandler.name;\\n+\\n+    // Should we instead return null?\\n+    return \\\"\\\";\\n+  },\\n+\\n+  // What to do with content of this type.\\n+  get preferredAction() {\\n+    switch (this.element(PREF_FEED_SELECTED_ACTION).value) {\\n+\\n+      case \\\"bookmarks\\\":\\n+        return Ci.nsIHandlerInfo.handleInternally;\\n+\\n+      case \\\"reader\\\":\\n+        let preferredApp = this.preferredApplicationHandler;\\n+        let defaultApp = this._defaultApplicationHandler;\\n+\\n+        // If we have a valid preferred app, return useSystemDefault if it's\\n+        // the default app; otherwise return useHelperApp.\\n+        if (gApplicationsPane.isValidHandlerApp(preferredApp)) {\\n+          if (defaultApp && defaultApp.equals(preferredApp))\\n+            return Ci.nsIHandlerInfo.useSystemDefault;\\n+\\n+          return Ci.nsIHandlerInfo.useHelperApp;\\n+        }\\n+\\n+        // The pref is set to \\\"reader\\\", but we don't have a valid preferred app.\\n+        // What do we do now?  Not sure this is the best option (perhaps we\\n+        // should direct the user to the default app, if any), but for now let's\\n+        // direct the user to live bookmarks.\\n+        return Ci.nsIHandlerInfo.handleInternally;\\n+\\n+      // If the action is \\\"ask\\\", then alwaysAskBeforeHandling will override\\n+      // the action, so it doesn't matter what we say it is, it just has to be\\n+      // something that doesn't cause the controller to hide the type.\\n+      case \\\"ask\\\":\\n+      default:\\n+        return Ci.nsIHandlerInfo.handleInternally;\\n+    }\\n+  },\\n+\\n+  set preferredAction(aNewValue) {\\n+    switch (aNewValue) {\\n+\\n+      case Ci.nsIHandlerInfo.handleInternally:\\n+        this.element(PREF_FEED_SELECTED_READER).value = \\\"bookmarks\\\";\\n+        break;\\n+\\n+      case Ci.nsIHandlerInfo.useHelperApp:\\n+        this.element(PREF_FEED_SELECTED_ACTION).value = \\\"reader\\\";\\n+        // The controller has already set preferredApplicationHandler\\n+        // to the new helper app.\\n+        break;\\n+\\n+      case Ci.nsIHandlerInfo.useSystemDefault:\\n+        this.element(PREF_FEED_SELECTED_ACTION).value = \\\"reader\\\";\\n+        this.preferredApplicationHandler = this._defaultApplicationHandler;\\n+        break;\\n+    }\\n+  },\\n+\\n+  get alwaysAskBeforeHandling() {\\n+    return this.element(PREF_FEED_SELECTED_ACTION).value == \\\"ask\\\";\\n+  },\\n+\\n+  set alwaysAskBeforeHandling(aNewValue) {\\n+    if (aNewValue == true)\\n+      this.element(PREF_FEED_SELECTED_ACTION).value = \\\"ask\\\";\\n+    else\\n+      this.element(PREF_FEED_SELECTED_ACTION).value = \\\"reader\\\";\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // nsIMIMEInfo\\n+\\n+  get primaryExtension() {\\n+    return \\\"xml\\\";\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // Plugin Handling\\n+\\n+  handledOnlyByPlugin: false,\\n+\\n+\\n+  //**************************************************************************//\\n+  // Storage\\n+\\n+  // Changes to the preferred action and handler take effect immediately\\n+  // (we write them out to the preferences right as they happen), so we don't\\n+  // need to do anything when the controller calls store() after modifying\\n+  // the handler.\\n+  // XXX Should we hold off on making the changes until this method gets called?\\n+  store: function() {},\\n+\\n+  // The feed type cannot be removed.\\n+  remove: function() {},\\n+\\n+\\n+  //**************************************************************************//\\n+  // Icons\\n+\\n+  get smallIcon() {\\n+    return \\\"chrome://browser/skin/feeds/feedIcon16.png\\\";\\n+  },\\n+\\n+  get largeIcon() {\\n+    return \\\"chrome://browser/skin/feeds/feedIcon.png\\\";\\n+  }\\n+\\n+};\\n+\\n+\\n+//****************************************************************************//\\n+// Prefpane Controller\\n+\\n+var gApplicationsPane = {\\n+  // The set of types the app knows how to handle.  A hash of HandlerInfoWrapper\\n+  // objects, indexed by type.\\n+  _handledTypes: {},\\n+\\n+  _bundle       : null,\\n+  _list         : null,\\n+  _filter       : null,\\n+\\n+  // Retrieve this as nsIPrefBranch and then immediately QI to nsIPrefBranch2\\n+  // so both interfaces are available to callers.\\n+  _prefSvc      : Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n+                  getService(Ci.nsIPrefBranch).\\n+                  QueryInterface(Ci.nsIPrefBranch2),\\n+\\n+  _mimeSvc      : Cc[\\\"@mozilla.org/uriloader/external-helper-app-service;1\\\"].\\n+                  getService(Ci.nsIMIMEService),\\n+\\n+  _helperAppSvc : Cc[\\\"@mozilla.org/uriloader/external-helper-app-service;1\\\"].\\n+                  getService(Ci.nsIExternalHelperAppService),\\n+\\n+  _handlerSvc   : Cc[\\\"@mozilla.org/uriloader/handler-service;1\\\"].\\n+                  getService(Ci.nsIHandlerService),\\n+\\n+  _ioSvc        : Cc[\\\"@mozilla.org/network/io-service;1\\\"].\\n+                  getService(Ci.nsIIOService),\\n+\\n+\\n+  //**************************************************************************//\\n+  // Initialization & Destruction\\n+\\n+  init: function() {\\n+    // Initialize shortcuts to some commonly accessed elements.\\n+    this._bundle = document.getElementById(\\\"bundlePreferences\\\");\\n+    this._list = document.getElementById(\\\"handlersView\\\");\\n+    this._filter = document.getElementById(\\\"filter\\\");\\n+\\n+    // Observe preferences that influence what we display so we can rebuild\\n+    // the view when they change.\\n+    this._prefSvc.addObserver(PREF_SHOW_PLUGINS_IN_LIST, this, false);\\n+    this._prefSvc.addObserver(PREF_HIDE_PLUGINS_WITHOUT_EXTENSIONS, this, false);\\n+    this._prefSvc.addObserver(PREF_FEED_SELECTED_APP, this, false);\\n+    this._prefSvc.addObserver(PREF_FEED_SELECTED_WEB, this, false);\\n+    this._prefSvc.addObserver(PREF_FEED_SELECTED_ACTION, this, false);\\n+    this._prefSvc.addObserver(PREF_FEED_SELECTED_READER, this, false);\\n+\\n+    // Listen for window unload so we can remove our preference observers.\\n+    window.addEventListener(\\\"unload\\\", this, false);\\n+\\n+    // Figure out how we should be sorting the list.  We persist sort settings\\n+    // across sessions, so we can't assume the default sort column and direction.\\n+    // XXX should we be using the XUL sort service instead?\\n+    if (document.getElementById(\\\"typeColumn\\\").hasAttribute(\\\"sortDirection\\\"))\\n+      this._sortColumn = document.getElementById(\\\"typeColumn\\\");\\n+    else if (document.getElementById(\\\"actionColumn\\\").hasAttribute(\\\"sortDirection\\\"))\\n+      this._sortColumn = document.getElementById(\\\"actionColumn\\\");\\n+\\n+    // Load the data and build the list of handlers.\\n+    // By doing this in a timeout, we let the preferences dialog resize itself\\n+    // to an appropriate size before we add a bunch of items to the list.\\n+    // Otherwise, if there are many items, and the Applications prefpane\\n+    // is the one that gets displayed when the user first opens the dialog,\\n+    // the dialog might stretch too much in an attempt to fit them all in.\\n+    // XXX Shouldn't we perhaps just set a max-height on the richlistbox?\\n+    var _delayedPaneLoad = function(self) {\\n+      self._loadData();\\n+      self.rebuildView();\\n+      self._list.focus();\\n+    }\\n+    setTimeout(_delayedPaneLoad, 0, this);\\n+  },\\n+\\n+  destroy: function() {\\n+    window.removeEventListener(\\\"unload\\\", this, false);\\n+    this._prefSvc.removeObserver(PREF_SHOW_PLUGINS_IN_LIST, this);\\n+    this._prefSvc.removeObserver(PREF_HIDE_PLUGINS_WITHOUT_EXTENSIONS, this);\\n+    this._prefSvc.removeObserver(PREF_FEED_SELECTED_APP, this);\\n+    this._prefSvc.removeObserver(PREF_FEED_SELECTED_WEB, this);\\n+    this._prefSvc.removeObserver(PREF_FEED_SELECTED_ACTION, this);\\n+    this._prefSvc.removeObserver(PREF_FEED_SELECTED_READER, this);\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // nsISupports\\n+\\n+  QueryInterface: function(aIID) {\\n+    if (aIID.equals(Ci.nsIObserver) ||\\n+        aIID.equals(Ci.nsIDOMEventListener ||\\n+        aIID.equals(Ci.nsISupports)))\\n+      return this;\\n+\\n+    throw Cr.NS_ERROR_NO_INTERFACE;\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // nsIObserver\\n+\\n+  observe: function (aSubject, aTopic, aData) {\\n+    // Rebuild the list when there are changes to preferences that influence\\n+    // whether or not to show certain entries in the list.\\n+    if (aTopic == \\\"nsPref:changed\\\")\\n+      this.rebuildView();\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // nsIDOMEventListener\\n+\\n+  handleEvent: function(aEvent) {\\n+    if (aEvent.type == \\\"unload\\\") {\\n+      this.destroy();\\n+    }\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // Composed Model Construction\\n+\\n+  _loadData: function() {\\n+    this._loadFeedHandler();\\n+    this._loadPluginHandlers();\\n+    this._loadApplicationHandlers();\\n+  },\\n+\\n+  _loadFeedHandler: function() {\\n+    this._handledTypes[TYPE_MAYBE_FEED] = feedHandlerInfo;\\n+  },\\n+\\n+  /**\\n+   * Load the set of handlers defined by plugins.\\n+   *\\n+   * Note: if there's more than one plugin for a given MIME type, we assume\\n+   * the last one is the one that the application will use.  That may not be\\n+   * correct, but it's how we've been doing it for years.\\n+   *\\n+   * Perhaps we should instead query navigator.mimeTypes for the set of types\\n+   * supported by the application and then get the plugin from each MIME type's\\n+   * enabledPlugin property.  But if there's a plugin for a type, we need\\n+   * to know about it even if it isn't enabled, since we're going to give\\n+   * the user an option to enable it.\\n+   * \\n+   * I'll also note that my reading of nsPluginTag::RegisterWithCategoryManager\\n+   * suggests that enabledPlugin is only determined during registration\\n+   * and does not get updated when plugin.disable_full_page_plugin_for_types\\n+   * changes (unless modification of that preference spawns reregistration).\\n+   * So even if we could use enabledPlugin to get the plugin that would be used,\\n+   * we'd still need to check the pref ourselves to find out if it's enabled.\\n+   */\\n+  _loadPluginHandlers: function() {\\n+    for (let i = 0; i < navigator.plugins.length; ++i) {\\n+      let plugin = navigator.plugins[i];\\n+      for (let j = 0; j < plugin.length; ++j) {\\n+        let type = plugin[j].type;\\n+        let handlerInfoWrapper;\\n+\\n+        if (typeof this._handledTypes[type] == \\\"undefined\\\") {\\n+          let wrappedHandlerInfo =\\n+            this._mimeSvc.getFromTypeAndExtension(type, null);\\n+          handlerInfoWrapper = new HandlerInfoWrapper(type, wrappedHandlerInfo);\\n+          this._handledTypes[type] = handlerInfoWrapper;\\n+        }\\n+        else\\n+          handlerInfoWrapper = this._handledTypes[type];\\n+\\n+        handlerInfoWrapper.plugin = plugin;\\n+        handlerInfoWrapper.handledOnlyByPlugin = true;\\n+      }\\n+    }\\n+  },\\n+\\n+  /**\\n+   * Load the set of handlers defined by the application datastore.\\n+   */\\n+  _loadApplicationHandlers: function() {\\n+    var wrappedHandlerInfos = this._handlerSvc.enumerate();\\n+    while (wrappedHandlerInfos.hasMoreElements()) {\\n+      let wrappedHandlerInfo = wrappedHandlerInfos.getNext().\\n+                               QueryInterface(Ci.nsIHandlerInfo);\\n+      let type = wrappedHandlerInfo.type;\\n+      let handlerInfoWrapper;\\n+\\n+      if (typeof this._handledTypes[type] == \\\"undefined\\\") {\\n+        handlerInfoWrapper = new HandlerInfoWrapper(type, wrappedHandlerInfo);\\n+        this._handledTypes[type] = handlerInfoWrapper;\\n+      }\\n+      else\\n+        handlerInfoWrapper = this._handledTypes[type];\\n+\\n+      handlerInfoWrapper.handledOnlyByPlugin = false;\\n+    }\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // View Construction\\n+\\n+  rebuildView: function() {\\n+    // Clear the list of entries.\\n+    while (this._list.childNodes.length > 1)\\n+      this._list.removeChild(this._list.lastChild);\\n+\\n+    var visibleTypes = this._getVisibleTypes();\\n+\\n+    if (this._sortColumn)\\n+      this._sortTypes(visibleTypes);\\n+\\n+    for each (let visibleType in visibleTypes) {\\n+      let item = document.createElement(\\\"richlistitem\\\");\\n+      item.setAttribute(\\\"type\\\", visibleType.type);\\n+      item.setAttribute(\\\"typeDescription\\\", visibleType.description);\\n+      item.setAttribute(\\\"typeIcon\\\", visibleType.smallIcon);\\n+      item.setAttribute(\\\"actionDescription\\\",\\n+                        this._describePreferredAction(visibleType));\\n+      item.setAttribute(\\\"actionIcon\\\",\\n+                        this._getIconURLForPreferredAction(visibleType));\\n+      this._list.appendChild(item);\\n+      if (visibleType.type == this._list.getAttribute(\\\"lastSelectedType\\\"))\\n+        this._list.selectedItem = item;\\n+    }\\n+  },\\n+\\n+  _getVisibleTypes: function() {\\n+    var visibleTypes = [];\\n+\\n+    var showPlugins = this._prefSvc.getBoolPref(PREF_SHOW_PLUGINS_IN_LIST);\\n+    var hideTypesWithoutExtensions =\\n+      this._prefSvc.getBoolPref(PREF_HIDE_PLUGINS_WITHOUT_EXTENSIONS);\\n+\\n+    for (let type in this._handledTypes) {\\n+      let handlerInfo = this._handledTypes[type];\\n+\\n+      // Hide types without extensions if so prefed so we don't show a whole\\n+      // bunch of obscure types handled by plugins on Mac.\\n+      // Note: though protocol types don't have extensions, we still show them;\\n+      // the pref is only meant to be applied to MIME types.\\n+      // FIXME: if the type has a plugin, should we also check the \\\"suffixes\\\"\\n+      // property of the plugin?  Filed as bug 395135.\\n+      if (hideTypesWithoutExtensions &&\\n+          handlerInfo.wrappedHandlerInfo instanceof Ci.nsIMIMEInfo &&\\n+          !handlerInfo.primaryExtension)\\n+        continue;\\n+\\n+      // Hide types handled only by plugins if so prefed.\\n+      if (handlerInfo.handledOnlyByPlugin && !showPlugins)\\n+        continue;\\n+\\n+      // Hide types handled only by disabled plugins.\\n+      // FIXME: we should show these types to give the user a chance to reenable\\n+      // the plugins.  Filed as bug 395136.\\n+      if (handlerInfo.handledOnlyByPlugin && handlerInfo.isDisabledPluginType)\\n+        continue;\\n+\\n+      // Don't display entries for types we always ask about before handling.\\n+      // FIXME: that's what the old code did, but we should be showing these\\n+      // types and letting users choose to do something different.  Filed as\\n+      // bug 395138.\\n+      if (handlerInfo.alwaysAskBeforeHandling &&\\n+          handlerInfo.type != TYPE_MAYBE_FEED)\\n+        continue;\\n+\\n+      // If the user is filtering the list, then only show matching types.\\n+      if (this._filter.value && !this._matchesFilter(handlerInfo))\\n+        continue;\\n+\\n+      // We couldn't find any reason to exclude the type, so include it.\\n+      visibleTypes.push(handlerInfo);\\n+    }\\n+\\n+    return visibleTypes;\\n+  },\\n+\\n+  // FIXME: we filter on type and primary extension, but we don't show those\\n+  // values to users, unlike the description and action description, which we\\n+  // do show, and that could be confusing, so filter only on the values we show.\\n+  // Filed as bug 395139.\\n+  _matchesFilter: function(aType) {\\n+    var filterValue = this._filter.value.toLowerCase();\\n+    return aType.description.toLowerCase().indexOf(filterValue) != -1 ||\\n+           this._describePreferredAction(aType).toLowerCase().indexOf(filterValue) != -1 ||\\n+           aType.type.toLowerCase().indexOf(filterValue) != -1 ||\\n+           (aType.primaryExtension &&\\n+            aType.primaryExtension.toLowerCase().indexOf(filterValue) != -1);\\n+  },\\n+\\n+  /**\\n+   * Describe, in a human-readable fashion, the preferred action to take on\\n+   * the type represented by the given handler info object.\\n+   *\\n+   * XXX Should this be part of the HandlerInfoWrapper interface?  It would\\n+   * violate the separation of model and view, but it might make more sense\\n+   * nonetheless (f.e. it would make sortTypes easier).\\n+   *\\n+   * @param aHandlerInfo {nsIHandlerInfo} the type whose preferred action\\n+   *                                      is being described\\n+   */\\n+  _describePreferredAction: function(aHandlerInfo) {\\n+    // alwaysAskBeforeHandling overrides the preferred action, so if that flag\\n+    // is set, then describe that behavior instead.  Currently we hide all types\\n+    // with alwaysAskBeforeHandling except for the feed type, so here we use\\n+    // a feed-specific message to describe the behavior.\\n+    if (aHandlerInfo.alwaysAskBeforeHandling)\\n+      return this._bundle.getString(\\\"alwaysAskAboutFeed\\\");\\n+\\n+    switch (aHandlerInfo.preferredAction) {\\n+      case Ci.nsIHandlerInfo.saveToDisk:\\n+        return this._bundle.getString(\\\"saveToDisk\\\");\\n+\\n+      case Ci.nsIHandlerInfo.useHelperApp:\\n+        return aHandlerInfo.preferredApplicationHandler.name;\\n+\\n+      case Ci.nsIHandlerInfo.handleInternally:\\n+        // For the feed type, handleInternally means live bookmarks.\\n+        if (aHandlerInfo.type == TYPE_MAYBE_FEED)\\n+          return this._bundle.getString(\\\"liveBookmarks\\\");\\n+\\n+        // For other types, handleInternally looks like either useHelperApp\\n+        // or useSystemDefault depending on whether or not there's a preferred\\n+        // handler app.\\n+        if (this.isValidHandlerApp(aHandlerInfo.preferredApplicationHandler))\\n+          return aHandlerInfo.preferredApplicationHandler.name;\\n+\\n+        return aHandlerInfo.defaultDescription;\\n+\\n+        // XXX Why don't we say the app will handle the type internally?\\n+        // Is it because the app can't actually do that?  But if that's true,\\n+        // then why would a preferredAction ever get set to this value\\n+        // in the first place?\\n+\\n+      case Ci.nsIHandlerInfo.useSystemDefault:\\n+        return aHandlerInfo.defaultDescription;\\n+\\n+      case kActionUsePlugin:\\n+        return aHandlerInfo.plugin.name;\\n+    }\\n+  },\\n+\\n+  /**\\n+   * Whether or not the given handler app is valid.\\n+   *\\n+   * @param aHandlerApp {nsIHandlerApp} the handler app in question\\n+   *\\n+   * @returns {boolean} whether or not it's valid\\n+   */\\n+  isValidHandlerApp: function(aHandlerApp) {\\n+    if (!aHandlerApp)\\n+      return false;\\n+\\n+    if (aHandlerApp instanceof Ci.nsILocalHandlerApp)\\n+      return aHandlerApp.executable &&\\n+             aHandlerApp.executable.exists() &&\\n+             aHandlerApp.executable.isExecutable();\\n+\\n+    if (aHandlerApp instanceof Ci.nsIWebHandlerApp)\\n+      return aHandlerApp.uriTemplate;\\n+\\n+    if (aHandlerApp instanceof Ci.nsIWebContentHandlerInfo)\\n+      return aHandlerApp.uri;\\n+\\n+    return false;\\n+  },\\n+\\n+  /**\\n+   * Rebuild the actions menu for the selected entry.  Gets called by\\n+   * the richlistitem constructor when an entry in the list gets selected.\\n+   */\\n+  rebuildActionsMenu: function() {\\n+    var typeItem = this._list.selectedItem;\\n+    var handlerInfo = this._handledTypes[typeItem.type];\\n+    var menu =\\n+      document.getAnonymousElementByAttribute(typeItem, \\\"class\\\", \\\"actionsMenu\\\");\\n+    var menuPopup = menu.firstChild;\\n+\\n+    // Clear out existing items.\\n+    while (menuPopup.hasChildNodes())\\n+      menuPopup.removeChild(menuPopup.lastChild);\\n+\\n+    // If this is the feed type, add \\\"always ask\\\" and \\\"live bookmarks\\\" items.\\n+    if (handlerInfo.type == TYPE_MAYBE_FEED) {\\n+      let menuItem = document.createElementNS(kXULNS, \\\"menuitem\\\");\\n+      menuItem.setAttribute(\\\"alwaysAsk\\\", \\\"true\\\");\\n+      menuItem.setAttribute(\\\"label\\\", this._bundle.getString(\\\"alwaysAskAboutFeed\\\"));\\n+      menuPopup.appendChild(menuItem);\\n+      if (handlerInfo.alwaysAskBeforeHandling)\\n+        menu.selectedItem = menuItem;\\n+\\n+      menuItem = document.createElementNS(kXULNS, \\\"menuitem\\\");\\n+      menuItem.setAttribute(\\\"action\\\", Ci.nsIHandlerInfo.handleInternally);\\n+      menuItem.setAttribute(\\\"label\\\", this._bundle.getString(\\\"liveBookmarks\\\"));\\n+      menuItem.setAttribute(\\\"image\\\", \\\"chrome://browser/skin/page-livemarks.png\\\");\\n+      menuPopup.appendChild(menuItem);\\n+      if (handlerInfo.preferredAction == Ci.nsIHandlerInfo.handleInternally)\\n+        menu.selectedItem = menuItem;\\n+    }\\n+\\n+    // Create a menu item for the OS default application, if any.\\n+    if (handlerInfo.hasDefaultHandler) {\\n+      let menuItem = document.createElementNS(kXULNS, \\\"menuitem\\\");\\n+      menuItem.setAttribute(\\\"action\\\", Ci.nsIHandlerInfo.useSystemDefault);\\n+      menuItem.setAttribute(\\\"label\\\", handlerInfo.defaultDescription);\\n+\\n+      if (handlerInfo.wrappedHandlerInfo) {\\n+        let iconURL =\\n+          this._getIconURLForSystemDefault(handlerInfo.wrappedHandlerInfo);\\n+        menuItem.setAttribute(\\\"image\\\", iconURL);\\n+      }\\n+\\n+      menuPopup.appendChild(menuItem);\\n+      if (handlerInfo.preferredAction == Ci.nsIHandlerInfo.useSystemDefault)\\n+        menu.selectedItem = menuItem;\\n+    }\\n+\\n+    // Create menu items for possible handlers.\\n+    let preferredApp = handlerInfo.preferredApplicationHandler;\\n+    let possibleApps = handlerInfo.possibleApplicationHandlers.\\n+                       QueryInterface(Ci.nsIArray).enumerate();\\n+    while (possibleApps.hasMoreElements()) {\\n+      let possibleApp = possibleApps.getNext();\\n+      if (!this.isValidHandlerApp(possibleApp))\\n+        continue;\\n+\\n+      let menuItem = document.createElementNS(kXULNS, \\\"menuitem\\\");\\n+      menuItem.setAttribute(\\\"action\\\", Ci.nsIHandlerInfo.useHelperApp);\\n+      menuItem.setAttribute(\\\"label\\\", possibleApp.name);\\n+      menuItem.setAttribute(\\\"image\\\", this._getIconURLForHandlerApp(possibleApp));\\n+\\n+      // Attach the handler app object to the menu item so we can use it\\n+      // to make changes to the datastore when the user selects the item.\\n+      menuItem.handlerApp = possibleApp;\\n+\\n+      menuPopup.appendChild(menuItem);\\n+\\n+      // Select this app if the preferred action is to use a helper app\\n+      // and this is the preferred app.\\n+      if (handlerInfo.preferredAction == Ci.nsIHandlerInfo.useHelperApp &&\\n+          preferredApp.equals(possibleApp))\\n+        menu.selectedItem = menuItem;\\n+    }\\n+\\n+    // Create a menu item for the plugin.\\n+    if (handlerInfo.plugin) {\\n+      let menuItem = document.createElementNS(kXULNS, \\\"menuitem\\\");\\n+      menuItem.setAttribute(\\\"action\\\", kActionUsePlugin);\\n+      menuItem.setAttribute(\\\"label\\\", handlerInfo.plugin.name);\\n+      menuPopup.appendChild(menuItem);\\n+      if (handlerInfo.preferredAction == kActionUsePlugin)\\n+        menu.selectedItem = menuItem;\\n+    }\\n+\\n+    // Create a menu item for saving to disk.\\n+    // Note: this option isn't available to protocol types, since we don't know\\n+    // what it means to save a URL having a certain scheme to disk, nor is it\\n+    // available to feeds, since the feed code doesn't implement the capability.\\n+    // And it's not available to types handled only by plugins either, although\\n+    // I would think we'd want to give users the ability to redirect that stuff\\n+    // to disk (so maybe we should revisit that decision).\\n+    if ((handlerInfo instanceof Ci.nsIMIMEInfo) &&\\n+        handlerInfo.type != TYPE_MAYBE_FEED &&\\n+        !handlerInfo.handledOnlyByPlugin) {\\n+      let menuItem = document.createElementNS(kXULNS, \\\"menuitem\\\");\\n+      menuItem.setAttribute(\\\"action\\\", Ci.nsIHandlerInfo.saveToDisk);\\n+      menuItem.setAttribute(\\\"label\\\", this._bundle.getString(\\\"saveToDisk\\\"));\\n+      menuPopup.appendChild(menuItem);\\n+      if (handlerInfo.preferredAction == Ci.nsIHandlerInfo.saveToDisk)\\n+        menu.selectedItem = menuItem;\\n+    }\\n+\\n+    // Create a menu item for selecting a local application.\\n+    {\\n+      let menuItem = document.createElementNS(kXULNS, \\\"menuitem\\\");\\n+      menuItem.setAttribute(\\\"oncommand\\\", \\\"gApplicationsPane.chooseApp(event)\\\");\\n+      menuItem.setAttribute(\\\"label\\\", this._bundle.getString(\\\"chooseApp\\\"));\\n+      menuPopup.appendChild(menuItem);\\n+    }\\n+\\n+    // Create a menu item for removing this entry unless it's a plugin\\n+    // or the feed type, which cannot be removed.\\n+    // XXX Should this perhaps be a button on the entry, or should we perhaps\\n+    // provide no UI for removing entries at all?\\n+    if (!handlerInfo.plugin && handlerInfo.type != TYPE_MAYBE_FEED) {\\n+      let menuItem = document.createElementNS(kXULNS, \\\"menuitem\\\");\\n+      menuItem.setAttribute(\\\"oncommand\\\", \\\"gApplicationsPane.removeType(event)\\\");\\n+      menuItem.setAttribute(\\\"label\\\", this._bundle.getString(\\\"removeType\\\"));\\n+      menuPopup.appendChild(menuItem);\\n+    }\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // Sorting & Filtering\\n+\\n+  _sortColumn: null,\\n+\\n+  /**\\n+   * Sort the list when the user clicks on a column header.\\n+   */\\n+  sort: function (event) {\\n+    var column = event.target;\\n+\\n+    // If the user clicked on a new sort column, remove the direction indicator\\n+    // from the old column.\\n+    if (this._sortColumn && this._sortColumn != column)\\n+      this._sortColumn.removeAttribute(\\\"sortDirection\\\");\\n+\\n+    this._sortColumn = column;\\n+\\n+    // Set (or switch) the sort direction indicator.\\n+    if (column.getAttribute(\\\"sortDirection\\\") == \\\"ascending\\\")\\n+      column.setAttribute(\\\"sortDirection\\\", \\\"descending\\\");\\n+    else\\n+      column.setAttribute(\\\"sortDirection\\\", \\\"ascending\\\");\\n+\\n+    this.rebuildView();\\n+  },\\n+\\n+  /**\\n+   * Given an array of HandlerInfoWrapper objects, sort them according to\\n+   * the current sort order.  Used by rebuildView to sort the set of visible\\n+   * types before building the list from them.\\n+   */\\n+  _sortTypes: function(aTypes) {\\n+    if (!this._sortColumn)\\n+      return;\\n+\\n+    function sortByType(a, b) {\\n+      return a.description.toLowerCase().localeCompare(b.description.toLowerCase());\\n+    }\\n+\\n+    var t = this;\\n+    function sortByAction(a, b) {\\n+      return t._describePreferredAction(a).toLowerCase().\\n+             localeCompare(t._describePreferredAction(b).toLowerCase());\\n+    }\\n+\\n+    switch (this._sortColumn.getAttribute(\\\"value\\\")) {\\n+      case \\\"type\\\":\\n+        aTypes.sort(sortByType);\\n+        break;\\n+      case \\\"action\\\":\\n+        aTypes.sort(sortByAction);\\n+        break;\\n+    }\\n+\\n+    if (this._sortColumn.getAttribute(\\\"sortDirection\\\") == \\\"descending\\\")\\n+      aTypes.reverse();\\n+  },\\n+\\n+  /**\\n+   * Filter the list when the user enters a filter term into the filter field.\\n+   */\\n+  filter: function() {\\n+    if (this._filter.value == \\\"\\\") {\\n+      this.clearFilter();\\n+      return;\\n+    }\\n+\\n+    this.rebuildView();\\n+\\n+    document.getElementById(\\\"filterActiveLabel\\\").hidden = false;\\n+    document.getElementById(\\\"clearFilter\\\").disabled = false;\\n+  },\\n+\\n+  _filterTimeout: null,\\n+\\n+  onFilterInput: function() {\\n+    if (this._filterTimeout)\\n+      clearTimeout(this._filterTimeout);\\n+   \\n+    this._filterTimeout = setTimeout(\\\"gApplicationsPane.filter()\\\", 500);\\n+  },\\n+\\n+  onFilterKeyPress: function(aEvent) {\\n+    if (aEvent.keyCode == KeyEvent.DOM_VK_ESCAPE)\\n+      this.clearFilter();\\n+  },\\n+  \\n+  clearFilter: function() {\\n+    this._filter.value = \\\"\\\";\\n+    this.rebuildView();\\n+\\n+    this._filter.focus();\\n+    document.getElementById(\\\"filterActiveLabel\\\").hidden = true;\\n+    document.getElementById(\\\"clearFilter\\\").disabled = true;\\n+  },\\n+\\n+  focusFilterBox: function() {\\n+    this._filter.focus();\\n+    this._filter.select();\\n+  },\\n+\\n+\\n+  //**************************************************************************//\\n+  // Changes\\n+\\n+  onSelectAction: function(event) {\\n+    var actionItem = event.originalTarget;\\n+    var typeItem = this._list.selectedItem;\\n+    var handlerInfo = this._handledTypes[typeItem.type];\\n+\\n+    if (actionItem.hasAttribute(\\\"alwaysAsk\\\")) {\\n+      handlerInfo.alwaysAskBeforeHandling = true;\\n+    }\\n+    else if (actionItem.hasAttribute(\\\"action\\\")) {\\n+      let action = parseInt(actionItem.getAttribute(\\\"action\\\"));\\n+\\n+      // Set the plugin state if we're enabling or disabling a plugin.\\n+      if (action == kActionUsePlugin)\\n+        handlerInfo.enablePluginType();\\n+      else if (handlerInfo.plugin && !handlerInfo.isDisabledPluginType)\\n+        handlerInfo.disablePluginType();\\n+\\n+      // Set the preferred application handler.\\n+      // FIXME: consider leaving the existing preferred app in the list\\n+      // when we set the preferred action to something other than useHelperApp\\n+      // so that legacy datastores that don't have the preferred app in the list\\n+      // of possible apps still include the preferred app in the list of apps\\n+      // the user can use to handle the type.  Filed as bug 395140.\\n+      if (action == Ci.nsIHandlerInfo.useHelperApp)\\n+        handlerInfo.preferredApplicationHandler = actionItem.handlerApp;\\n+      else\\n+        handlerInfo.preferredApplicationHandler = null;\\n+\\n+      // Set the \\\"always ask\\\" flag.\\n+      handlerInfo.alwaysAskBeforeHandling = false;\\n+\\n+      // Set the preferred action.\\n+      handlerInfo.preferredAction = action;\\n+    }\\n+\\n+    handlerInfo.store();\\n+\\n+    // Update the action label so it says the right thing once this type item\\n+    // is no longer selected.\\n+    typeItem.setAttribute(\\\"actionDescription\\\",\\n+                          this._describePreferredAction(handlerInfo));\\n+  },\\n+\\n+  chooseApp: function(aEvent) {\\n+    // Don't let the normal \\\"on select action\\\" handler get this event,\\n+    // as we handle it specially ourselves.\\n+    aEvent.stopPropagation();\\n+\\n+    var fp = Cc[\\\"@mozilla.org/filepicker;1\\\"].createInstance(Ci.nsIFilePicker);\\n+    var winTitle = this._bundle.getString(\\\"fpTitleChooseApp\\\");\\n+    fp.init(window, winTitle, Ci.nsIFilePicker.modeOpen);\\n+    fp.appendFilters(Ci.nsIFilePicker.filterApps);\\n+\\n+    if (fp.show() == Ci.nsIFilePicker.returnOK && fp.file) {\\n+      // XXXben - we need to compare this with the running instance executable\\n+      //          just don't know how to do that via script...\\n+      // XXXmano TBD: can probably add this to nsIShellService\\n+#ifdef XP_WIN\\n+#expand      if (fp.file.leafName == \\\"__MOZ_APP_NAME__.exe\\\")\\n+#else\\n+#ifdef XP_MACOSX\\n+#expand      if (fp.file.leafName == \\\"__MOZ_APP_DISPLAYNAME__.app\\\")\\n+#else\\n+#expand      if (fp.file.leafName == \\\"__MOZ_APP_NAME__-bin\\\")\\n+#endif\\n+#endif\\n+        { this.rebuildActionsMenu(); return; }\\n+\\n+      let handlerApp = Cc[\\\"@mozilla.org/uriloader/local-handler-app;1\\\"].\\n+                       createInstance(Ci.nsIHandlerApp);\\n+      handlerApp.name = getDisplayNameForFile(fp.file);\\n+      handlerApp.QueryInterface(Ci.nsILocalHandlerApp);\\n+      handlerApp.executable = fp.file;\\n+\\n+      var handlerInfo = this._handledTypes[this._list.selectedItem.type];\\n+\\n+      handlerInfo.preferredApplicationHandler = handlerApp;\\n+      handlerInfo.preferredAction = Ci.nsIHandlerInfo.useHelperApp;\\n+\\n+      handlerInfo.store();\\n+    }\\n+\\n+    // We rebuild the actions menu whether the user picked an app or canceled.\\n+    // If they picked an app, we want to add the app to the menu and select it.\\n+    // If they canceled, we want to go back to their previous selection.\\n+    this.rebuildActionsMenu();\\n+  },\\n+\\n+  removeType: function() {\\n+    var promptService = Cc[\\\"@mozilla.org/embedcomp/prompt-service;1\\\"].\\n+                        getService(Ci.nsIPromptService);\\n+    var flags = Ci.nsIPromptService.BUTTON_TITLE_IS_STRING * Ci.nsIPromptService.BUTTON_POS_0;\\n+    flags += Ci.nsIPromptService.BUTTON_TITLE_CANCEL * Ci.nsIPromptService.BUTTON_POS_1;\\n+\\n+    var title = this._bundle.getString(\\\"removeTitle\\\");\\n+    var message = this._bundle.getString(\\\"removeMessage\\\");\\n+    var button = this._bundle.getString(\\\"removeButton\\\");\\n+    var rv = promptService.confirmEx(window, title, message, flags, button, \\n+                                     null, null, null, { value: 0 });\\n+\\n+    if (rv == 0) {\\n+      // Remove information about the type from the handlers datastore.\\n+      let listItem = this._list.selectedItem;\\n+      let handlerInfo = this._handledTypes[listItem.type];\\n+      handlerInfo.remove();\\n+\\n+      // Select the next item in the list (or the previous item if the item\\n+      // being removed is the last item).\\n+      if (this._list.selectedIndex == this._list.getRowCount() - 1)\\n+        this._list.selectedIndex = this._list.selectedIndex - 1;\\n+      else\\n+        this._list.selectedIndex = this._list.selectedIndex + 1;\\n+\\n+      // Remove the item from the list.\\n+      this._list.removeChild(listItem);\\n+    }\\n+    else {\\n+      // Rebuild the actions menu so we go back to their previous selection.\\n+      this.rebuildActionsMenu();\\n+    }\\n+  },\\n+\\n+  // Mark which item in the list was last selected so we can reselect it\\n+  // when we rebuild the list or when the user returns to the prefpane.\\n+  onSelectionChanged: function() {\\n+    this._list.setAttribute(\\\"lastSelectedType\\\",\\n+                            this._list.selectedItem.getAttribute(\\\"type\\\"));\\n+  },\\n+\\n+  _getIconURLForPreferredAction: function(aHandlerInfo) {\\n+    var preferredApp = aHandlerInfo.preferredApplicationHandler;\\n+\\n+    if (aHandlerInfo.preferredAction == Ci.nsIHandlerInfo.useHelperApp &&\\n+        this.isValidHandlerApp(preferredApp))\\n+      return this._getIconURLForHandlerApp(preferredApp);\\n+\\n+    if (aHandlerInfo.preferredAction == Ci.nsIHandlerInfo.useSystemDefault &&\\n+        aHandlerInfo.wrappedHandlerInfo)\\n+      return this._getIconURLForSystemDefault(aHandlerInfo.wrappedHandlerInfo);\\n+\\n+    // We don't know how to get an icon URL for any other actions.\\n+    return \\\"\\\";\\n+  },\\n+\\n+  _getIconURLForHandlerApp: function(aHandlerApp) {\\n+    if (aHandlerApp instanceof Ci.nsILocalHandlerApp)\\n+      return this._getIconURLForFile(aHandlerApp.executable);\\n+\\n+    if (aHandlerApp instanceof Ci.nsIWebHandlerApp)\\n+      return this._getIconURLForWebApp(aHandlerApp.uriTemplate);\\n+\\n+    if (aHandlerApp instanceof Ci.nsIWebContentHandlerInfo)\\n+      return this._getIconURLForWebApp(aHandlerApp.uri)\\n+\\n+    // We know nothing about other kinds of handler apps.\\n+    return \\\"\\\";\\n+  },\\n+\\n+  _getIconURLForFile: function(aFile) {\\n+    var fph = this._ioSvc.getProtocolHandler(\\\"file\\\").\\n+              QueryInterface(Ci.nsIFileProtocolHandler);\\n+    var urlSpec = fph.getURLSpecFromFile(aFile);\\n+\\n+    return \\\"moz-icon://\\\" + urlSpec + \\\"?size=16\\\";\\n+  },\\n+\\n+  _getIconURLForWebApp: function(aWebAppURITemplate) {\\n+    var uri = this._ioSvc.newURI(aWebAppURITemplate, null, null);\\n+\\n+    // Unfortunately we can't use the favicon service to get the favicon,\\n+    // because the service looks in the annotations table for a record with\\n+    // the exact URL we give it, and users won't have such records for URLs\\n+    // they don't visit, and users won't visit the web app's URL template,\\n+    // they'll only visit URLs derived from that template (i.e. with %s\\n+    // in the template replaced by the URL of the content being handled).\\n+\\n+    if (/^https?/.test(uri.scheme))\\n+      return uri.prePath + \\\"/favicon.ico\\\";\\n+\\n+    return \\\"\\\";\\n+  },\\n+\\n+  _getIconURLForSystemDefault: function(aHandlerInfo) {\\n+    // Handler info objects for MIME types on Windows implement a property\\n+    // bag interface from which we can get an icon for the default app, so if\\n+    // we're dealing with a MIME type on Windows, then try to get the icon.\\n+    if (aHandlerInfo instanceof Ci.nsIMIMEInfo &&\\n+        aHandlerInfo instanceof Ci.nsIPropertyBag) {\\n+      try {\\n+        let url = aHandlerInfo.getProperty(\\\"defaultApplicationIconURL\\\");\\n+        if (url)\\n+          return url + \\\"?size=16\\\";\\n+      }\\n+      catch(ex) {}\\n+    }\\n+\\n+    // We don't know how to get an icon URL on any other OSes or for any other\\n+    // classes of content type.\\n+    return \\\"\\\";\\n+  }\\n+\\n+};\\ndiff --git a/browser/components/preferences/applications.xul b/browser/components/preferences/applications.xul\\nnew file mode 100755\\nindex 0000000..6e5ab38\\n--- /dev/null\\n+++ b/browser/components/preferences/applications.xul\\n@@ -0,0 +1,116 @@\\n+<?xml version=\\\"1.0\\\"?>\\n+\\n+<!--\\n+# -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-\\n+# ***** BEGIN LICENSE BLOCK *****\\n+# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+#\\n+# The contents of this file are subject to the Mozilla Public License Version\\n+# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+# the License. You may obtain a copy of the License at\\n+# http://www.mozilla.org/MPL/\\n+#\\n+# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+# for the specific language governing rights and limitations under the\\n+# License.\\n+#\\n+# The Original Code is the Firefox Preferences System.\\n+#\\n+# The Initial Developer of the Original Code is\\n+# Ben Goodger.\\n+# Portions created by the Initial Developer are Copyright (C) 2005\\n+# the Initial Developer. All Rights Reserved.\\n+#\\n+# Contributor(s):\\n+#   Ben Goodger <ben@mozilla.org>\\n+#   Jeff Walden <jwalden+code@mit.edu>.\\n+#   Asaf Romano <mozilla.mano@sent.com>\\n+#   Myk Melez <myk@mozilla.org>\\n+#\\n+# Alternatively, the contents of this file may be used under the terms of\\n+# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+# in which case the provisions of the GPL or the LGPL are applicable instead\\n+# of those above. If you wish to allow use of your version of this file only\\n+# under the terms of either the GPL or the LGPL, and not to allow others to\\n+# use your version of this file under the terms of the MPL, indicate your\\n+# decision by deleting the provisions above and replace them with the notice\\n+# and other provisions required by the GPL or the LGPL. If you do not delete\\n+# the provisions above, a recipient may use your version of this file under\\n+# the terms of any one of the MPL, the GPL or the LGPL.\\n+#\\n+# ***** END LICENSE BLOCK *****\\n+-->\\n+\\n+<!DOCTYPE overlay [\\n+  <!ENTITY % brandDTD SYSTEM \\\"chrome://branding/locale/brand.dtd\\\">\\n+  <!ENTITY % applicationsDTD SYSTEM \\\"chrome://browser/locale/preferences/applications.dtd\\\">\\n+  %brandDTD;\\n+  %applicationsDTD;\\n+]>\\n+\\n+<overlay id=\\\"ApplicationsPaneOverlay\\\"\\n+         xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\">\\n+\\n+  <prefpane id=\\\"paneApplications\\\" onpaneload=\\\"gApplicationsPane.init();\\\"\\n+            helpTopic=\\\"prefs-applications\\\" helpURI=\\\"chrome://browser/locale/help/help.rdf\\\">\\n+\\n+    <preferences id=\\\"feedsPreferences\\\">\\n+      <preference id=\\\"browser.feeds.handler\\\"\\n+                  name=\\\"browser.feeds.handler\\\"\\n+                  type=\\\"string\\\"/>\\n+      <preference id=\\\"browser.feeds.handler.default\\\"\\n+                  name=\\\"browser.feeds.handler.default\\\"\\n+                  type=\\\"string\\\"/>\\n+      <preference id=\\\"browser.feeds.handlers.application\\\"\\n+                  name=\\\"browser.feeds.handlers.application\\\"\\n+                  type=\\\"file\\\"/>\\n+      <preference id=\\\"browser.feeds.handlers.webservice\\\"\\n+                  name=\\\"browser.feeds.handlers.webservice\\\"\\n+                  type=\\\"string\\\"/>\\n+    </preferences>\\n+\\n+    <script type=\\\"application/x-javascript\\\" src=\\\"chrome://browser/content/preferences/applications.js\\\"/>\\n+\\n+    <keyset>\\n+      <key key=\\\"&focusSearch1.key;\\\" modifiers=\\\"accel\\\" oncommand=\\\"gApplicationsPane.focusFilterBox();\\\"/>\\n+      <key key=\\\"&focusSearch2.key;\\\" modifiers=\\\"accel\\\" oncommand=\\\"gApplicationsPane.focusFilterBox();\\\"/>\\n+    </keyset>\\n+\\n+    <label>&prefpane.label;</label>\\n+\\n+    <vbox flex=\\\"1\\\" class=\\\"contentPane\\\">\\n+      <hbox align=\\\"center\\\">\\n+        <label accesskey=\\\"&filter.accesskey;\\\" control=\\\"filter\\\">&filter.label;</label>\\n+        <textbox id=\\\"filter\\\" flex=\\\"1\\\" oninput=\\\"gApplicationsPane.onFilterInput();\\\" \\n+                onkeypress=\\\"gApplicationsPane.onFilterKeyPress(event);\\\"/>\\n+        <button id=\\\"clearFilter\\\" icon=\\\"clear\\\" label=\\\"&clear.label;\\\" accesskey=\\\"&clear.accesskey;\\\" \\n+                oncommand=\\\"gApplicationsPane.clearFilter();\\\" disabled=\\\"true\\\"/>\\n+      </hbox>\\n+\\n+      <separator class=\\\"thin\\\"/>\\n+\\n+      <label id=\\\"filterActiveLabel\\\" hidden=\\\"true\\\">\\n+        &filterActive.label;\\n+      </label>\\n+\\n+      <separator class=\\\"thin\\\"/>\\n+\\n+      <richlistbox id=\\\"handlersView\\\" orient=\\\"vertical\\\" style=\\\"height: 300px\\\"\\n+                   onselect=\\\"gApplicationsPane.onSelectionChanged();\\\"\\n+                   persist=\\\"lastSelectedType\\\">\\n+        <listheader equalsize=\\\"always\\\" style=\\\"border: 0; padding: 0;\\\">\\n+          <treecol id=\\\"typeColumn\\\" label=\\\"&typeColumn.label;\\\" value=\\\"type\\\"\\n+                   accesskey=\\\"&typeColumn.accesskey;\\\" persist=\\\"sortDirection\\\"\\n+                   flex=\\\"1\\\" onclick=\\\"gApplicationsPane.sort(event);\\\"\\n+                   sortDirection=\\\"ascending\\\"/>\\n+          <treecol id=\\\"actionColumn\\\" label=\\\"&actionColumn.label;\\\" value=\\\"action\\\"\\n+                   accesskey=\\\"&actionColumn.accesskey;\\\" persist=\\\"sortDirection\\\"\\n+                   flex=\\\"1\\\" onclick=\\\"gApplicationsPane.sort(event);\\\"/>\\n+        </listheader>\\n+      </richlistbox>\\n+    </vbox>\\n+\\n+  </prefpane>\\n+</overlay>\\ndiff --git a/browser/components/preferences/changeaction.js b/browser/components/preferences/changeaction.js\\ndeleted file mode 100644\\nindex c30705e..0000000\\n--- a/browser/components/preferences/changeaction.js\\n+++ /dev/null\\n@@ -1,255 +0,0 @@\\n-# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\\n-# ***** BEGIN LICENSE BLOCK *****\\n-# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n-#\\n-# The contents of this file are subject to the Mozilla Public License Version\\n-# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n-# the License. You may obtain a copy of the License at\\n-# http://www.mozilla.org/MPL/\\n-#\\n-# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n-# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n-# for the specific language governing rights and limitations under the\\n-# License.\\n-#\\n-# The Original Code is the Download Actions Manager.\\n-#\\n-# The Initial Developer of the Original Code is\\n-# Ben Goodger.\\n-# Portions created by the Initial Developer are Copyright (C) 2000\\n-# the Initial Developer. All Rights Reserved.\\n-#\\n-# Contributor(s):\\n-#   Ben Goodger <ben@mozilla.org>\\n-#\\n-# Alternatively, the contents of this file may be used under the terms of\\n-# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n-# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n-# in which case the provisions of the GPL or the LGPL are applicable instead\\n-# of those above. If you wish to allow use of your version of this file only\\n-# under the terms of either the GPL or the LGPL, and not to allow others to\\n-# use your version of this file under the terms of the MPL, indicate your\\n-# decision by deleting the provisions above and replace them with the notice\\n-# and other provisions required by the GPL or the LGPL. If you do not delete\\n-# the provisions above, a recipient may use your version of this file under\\n-# the terms of any one of the MPL, the GPL or the LGPL.\\n-#\\n-# ***** END LICENSE BLOCK *****\\n-\\n-var gChangeActionDialog = {\\n-  _item             : null,\\n-  _bundle           : null,\\n-  _lastSelectedMode : null,\\n-  _lastSelectedSave : null,\\n-\\n-  init: function ()\\n-  {\\n-    this._item = window.arguments[0];\\n-    this._bundle = document.getElementById(\\\"bundlePreferences\\\");\\n-    dump(\\\"*** ir = \\\" + this._item.toSource() + \\\"\\\\n\\\");\\n-    \\n-    var typeField = document.getElementById(\\\"typeField\\\");\\n-    typeField.value = this._item.typeName;\\n-    \\n-    var extensionField = document.getElementById(\\\"extensionField\\\");\\n-    var ext = \\\".\\\" + this._item.extension.toLowerCase();\\n-    var contentType = this._item.type;\\n-    extensionField.value = this._bundle.getFormattedString(\\\"extensionStringFormat\\\", [ext, contentType]);\\n-    \\n-    var typeIcon = document.getElementById(\\\"typeIcon\\\");\\n-    typeIcon.src = this._item.bigIcon;\\n-\\n-    // Custom App Handler Path - this must be set before we set the selected\\n-    // radio button because the selection event handler for the radio group\\n-    // requires the extapp handler field to be non-empty for the extapp radio\\n-    // button to be selected. \\n-    var customApp = document.getElementById(\\\"customApp\\\");\\n-    if (this._item.customHandler)\\n-      customApp.file = this._item.customHandler;\\n-    else\\n-      customApp.file = null;\\n-\\n-    var defaultApp = document.getElementById(\\\"defaultApp\\\");\\n-    var defaultAppIcon = null;\\n-    var fallbackIconURL = \\\"moz-icon://goat?contentType=\\\" + this._item.type + \\\"&size=16\\\";\\n-    if (this._item.mimeInfo instanceof Components.interfaces.nsIPropertyBag) {\\n-      try {\\n-        defaultAppIcon = this._item.mimeInfo.getProperty(\\\"defaultApplicationIconURL\\\");\\n-      }\\n-      catch (e) { }\\n-      if (defaultAppIcon)\\n-        defaultAppIcon += \\\"?size=16\\\";\\n-    }\\n-    defaultApp.image = defaultAppIcon || fallbackIconURL;\\n-    defaultApp.label = this._item.mimeInfo.defaultDescription;\\n-\\n-    var pluginName = document.getElementById(\\\"pluginName\\\");\\n-    var foundPlugin = false;\\n-    for (var i = 0; i < navigator.plugins.length; ++i) {\\n-      var plugin = navigator.plugins[i];\\n-      for (var j = 0; j < plugin.length; ++j) {\\n-        if (contentType == plugin[j].type) {\\n-          pluginName.label = plugin.name;\\n-          pluginName.image = \\\"moz-icon://goat.goat?contentType=\\\" + contentType + \\\"&size=16\\\";\\n-          foundPlugin = true;\\n-        }\\n-      }\\n-    }\\n-    if (!foundPlugin) {\\n-      pluginName.label = this._bundle.getString(\\\"pluginHelperNoneAvailable\\\");\\n-      document.getElementById(\\\"plugin\\\").disabled = true;\\n-    }\\n-      \\n-    // Selected Action Radiogroup\\n-    var handlerGroup = document.getElementById(\\\"handlerGroup\\\");\\n-    if (this._item.handleMode == FILEACTION_OPEN_PLUGIN && this._item.pluginEnabled)\\n-      handlerGroup.selectedItem = document.getElementById(\\\"plugin\\\");\\n-    else {\\n-      if (this._item.handleMode == FILEACTION_OPEN_DEFAULT)\\n-        handlerGroup.selectedItem = document.getElementById(\\\"openDefault\\\");\\n-      else if (this._item.handleMode == FILEACTION_SAVE_TO_DISK)\\n-        handlerGroup.selectedItem = document.getElementById(\\\"saveToDisk\\\");\\n-      else\\n-        handlerGroup.selectedItem = document.getElementById(\\\"openApplication\\\");\\n-    }\\n-    this._lastSelectedMode = handlerGroup.selectedItem;\\n-    \\n-    // Figure out the last selected Save As mode\\n-    var saveToOptions = document.getElementById(\\\"saveToOptions\\\");\\n-    this._lastSelectedSave = saveToOptions.selectedItem;\\n-\\n-    // We don't let users open .exe files or random binary data directly \\n-    // from the browser at the moment because of security concerns. \\n-    var mimeType = this._item.mimeInfo.MIMEType;\\n-    if (mimeType == \\\"application/object-stream\\\" ||\\n-        mimeType == \\\"application/x-msdownload\\\") {\\n-      document.getElementById(\\\"openApplication\\\").disabled = true;\\n-      document.getElementById(\\\"openDefault\\\").disabled = true;\\n-      handlerGroup.selectedItem = document.getElementById(\\\"saveToDisk\\\");\\n-    }\\n-  },\\n-  \\n-  onAccept: function ()\\n-  {\\n-    var contentType = this._item.mimeInfo.MIMEType;\\n-    var handlerGroup = document.getElementById(\\\"handlerGroup\\\");\\n-    switch (handlerGroup.selectedItem.value) {\\n-    case \\\"plugin\\\":\\n-      this._item.handleMode = FILEACTION_OPEN_PLUGIN;\\n-      var pluginName = document.getElementById(\\\"pluginName\\\");\\n-      this._item.action = this._bundle.getFormattedString(\\\"openWith\\\", [pluginName.label]);\\n-      this._item.pluginEnabled = true;\\n-      break;\\n-    case \\\"system\\\":\\n-      this._item.handledOnlyByPlugin = false;\\n-      this._item.handleMode = FILEACTION_OPEN_DEFAULT;\\n-      var defaultDescr = this._item.mimeInfo.defaultDescription;\\n-      this._item.action = this._bundle.getFormattedString(\\\"openWith\\\", [defaultDescr]);\\n-      break;\\n-    case \\\"app\\\":\\n-      this._item.handledOnlyByPlugin = false;\\n-      this._item.handleMode = FILEACTION_OPEN_CUSTOM;\\n-      var customApp = document.getElementById(\\\"customApp\\\");\\n-      this._item.action = this._bundle.getFormattedString(\\\"openWith\\\", [customApp.label]);        \\n-      break;  \\n-    case \\\"save\\\":\\n-      this._item.handledOnlyByPlugin = false;\\n-      this._item.handleMode = FILEACTION_SAVE_TO_DISK;\\n-      this._item.action = this._bundle.getString(\\\"saveToDisk\\\");\\n-      break;  \\n-    }\\n-    \\n-    // The opener uses the modifications to the FileAction item to update the\\n-    // datasource.\\n-    return true;\\n-  },\\n-  \\n-  doEnabling: function (aSelectedItem)\\n-  {\\n-    var defaultApp            = document.getElementById(\\\"defaultApp\\\");\\n-    var saveToDefault         = document.getElementById(\\\"saveToDefault\\\");\\n-    var saveToCustom          = document.getElementById(\\\"saveToCustom\\\");\\n-    var customDownloadFolder  = document.getElementById(\\\"customDownloadFolder\\\");\\n-    var chooseCustomDownloadFolder = document.getElementById(\\\"chooseCustomDownloadFolder\\\");\\n-    var saveToAskMe           = document.getElementById(\\\"saveToAskMe\\\");\\n-    var pluginName            = document.getElementById(\\\"pluginName\\\");\\n-    var changeApp             = document.getElementById(\\\"changeApp\\\");\\n-    var customApp             = document.getElementById(\\\"customApp\\\");\\n-    \\n-    switch (aSelectedItem.id) {\\n-    case \\\"openDefault\\\":\\n-      changeApp.disabled = customApp.disabled = saveToDefault.disabled = saveToCustom.disabled = customDownloadFolder.disabled = chooseCustomDownloadFolder.disabled = saveToAskMe.disabled = pluginName.disabled = true;\\n-      defaultApp.disabled = false;\\n-      break;\\n-    case \\\"openApplication\\\":\\n-      defaultApp.disabled = saveToDefault.disabled = saveToCustom.disabled = customDownloadFolder.disabled = chooseCustomDownloadFolder.disabled = saveToAskMe.disabled = pluginName.disabled = true;\\n-      changeApp.disabled = customApp.disabled = false;\\n-      if (!customApp.file && !this.changeApp()) {\\n-        this._lastSelectedMode.click();\\n-        return;\\n-      }\\n-      break;\\n-    case \\\"saveToDisk\\\":\\n-      changeApp.disabled = customApp.disabled = defaultApp.disabled = pluginName.disabled = true;\\n-      var saveToOptions = document.getElementById(\\\"saveToOptions\\\");\\n-      customDownloadFolder.disabled = chooseCustomDownloadFolder.disabled = !(saveToOptions.selectedItem.id == \\\"saveToCustom\\\");\\n-      saveToDefault.disabled = saveToCustom.disabled = saveToAskMe.disabled = false;\\n-      break;\\n-    case \\\"plugin\\\":\\n-      changeApp.disabled = customApp.disabled = defaultApp.disabled = saveToDefault.disabled = saveToCustom.disabled = customDownloadFolder.disabled = chooseCustomDownloadFolder.disabled = saveToAskMe.disabled = true;\\n-      pluginName.disabled = false;\\n-      break;\\n-    }\\n-    this._lastSelectedMode = aSelectedItem;\\n-  },\\n-  \\n-  doSaveToDiskEnabling: function (aSelectedItem)\\n-  {\\n-    var isSaveToCustom = aSelectedItem.id == \\\"saveToCustom\\\";\\n-    var customDownloadFolder = document.getElementById(\\\"customDownloadFolder\\\");\\n-    var chooseCustomDownloadFolder = document.getElementById(\\\"chooseCustomDownloadFolder\\\");\\n-    chooseCustomDownloadFolder.disabled = customDownloadFolder.disabled = !isSaveToCustom;\\n-    \\n-    if (isSaveToCustom && \\n-        !customDownloadFolder.file && !this.changeCustomFolder()) {\\n-      this._lastSelectedSave.click();\\n-      return;\\n-    }\\n-    this._lastSelectedSave = aSelectedItem;\\n-  },\\n-  \\n-  changeApp: function ()\\n-  {\\n-    const nsIFilePicker = Components.interfaces.nsIFilePicker;\\n-    var fp = Components.classes[\\\"@mozilla.org/filepicker;1\\\"]\\n-                       .createInstance(nsIFilePicker);\\n-    var winTitle = this._bundle.getString(\\\"fpTitleChooseApp\\\");\\n-    fp.init(window, winTitle, nsIFilePicker.modeOpen);\\n-    fp.appendFilters(nsIFilePicker.filterApps);\\n-    if (fp.show() == nsIFilePicker.returnOK && fp.file) {\\n-      var customApp = document.getElementById(\\\"customApp\\\");\\n-      customApp.file = fp.file;\\n-      this._item.customHandler = fp.file;      \\n-      return true;\\n-    }\\n-    return false;\\n-  },\\n-  \\n-  changeCustomFolder: function ()\\n-  {\\n-    const nsIFilePicker = Components.interfaces.nsIFilePicker;\\n-    var fp = Components.classes[\\\"@mozilla.org/filepicker;1\\\"]\\n-                       .createInstance(nsIFilePicker);\\n-\\n-    // extract the window title\\n-    var winTitle = this._bundle.getString(\\\"fpTitleChooseDL\\\");\\n-    fp.init(window, winTitle, nsIFilePicker.modeGetFolder);\\n-    if (fp.show() == nsIFilePicker.returnOK && fp.file) {\\n-      var customDownloadFolder = document.getElementById(\\\"customDownloadFolder\\\");\\n-      customDownloadFolder.file = fp.file;\\n-      customDownloadFolder.label = fp.file.path;\\n-      return true;\\n-    }\\n-    return false;\\n-  }\\n-};\\ndiff --git a/browser/components/preferences/changeaction.xul b/browser/components/preferences/changeaction.xul\\ndeleted file mode 100644\\nindex 90fe7d5..0000000\\n--- a/browser/components/preferences/changeaction.xul\\n+++ /dev/null\\n@@ -1,114 +0,0 @@\\n-<?xml version=\\\"1.0\\\"?>\\n-\\n-# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\\n-# ***** BEGIN LICENSE BLOCK *****\\n-# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n-#\\n-# The contents of this file are subject to the Mozilla Public License Version\\n-# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n-# the License. You may obtain a copy of the License at\\n-# http://www.mozilla.org/MPL/\\n-#\\n-# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n-# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n-# for the specific language governing rights and limitations under the\\n-# License.\\n-#\\n-# The Original Code is the Download Actions Manager.\\n-#\\n-# The Initial Developer of the Original Code is\\n-# Ben Goodger.\\n-# Portions created by the Initial Developer are Copyright (C) 2000\\n-# the Initial Developer. All Rights Reserved.\\n-#\\n-# Contributor(s):\\n-#   Ben Goodger <ben@mozilla.org>\\n-#\\n-# Alternatively, the contents of this file may be used under the terms of\\n-# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n-# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n-# in which case the provisions of the GPL or the LGPL are applicable instead\\n-# of those above. If you wish to allow use of your version of this file only\\n-# under the terms of either the GPL or the LGPL, and not to allow others to\\n-# use your version of this file under the terms of the MPL, indicate your\\n-# decision by deleting the provisions above and replace them with the notice\\n-# and other provisions required by the GPL or the LGPL. If you do not delete\\n-# the provisions above, a recipient may use your version of this file under\\n-# the terms of any one of the MPL, the GPL or the LGPL.\\n-#\\n-# ***** END LICENSE BLOCK *****\\n-\\n-<?xml-stylesheet href=\\\"chrome://global/skin/\\\"?>\\n-<?xml-stylesheet href=\\\"chrome://mozapps/content/preferences/preferences.css\\\" type=\\\"text/css\\\"?>\\n-<?xml-stylesheet href=\\\"chrome://browser/skin/preferences/preferences.css\\\" type=\\\"text/css\\\"?>\\n-\\n-<!DOCTYPE window SYSTEM \\\"chrome://browser/locale/preferences/changeaction.dtd\\\">\\n-\\n-<dialog id=\\\"ChangeActionDialog\\\" title=\\\"&changeAction.title;\\\"\\n-        xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\"\\n-        onload=\\\"gChangeActionDialog.init();\\\"\\n-        buttons=\\\"accept,cancel,help\\\"\\n-        ondialogaccept=\\\"return gChangeActionDialog.onAccept();\\\" \\n-        ondialoghelp=\\\"openHelp('prefs-file-types', 'chrome://browser/locale/help/help.rdf');\\\"\\n-        xmlns:aaa=\\\"http://www.w3.org/2005/07/aaa\\\"\\n-        style=\\\"width: &window.width;;\\\"\\n-        persist=\\\"screenX screenY\\\">\\n-\\n-  <script type=\\\"application/x-javascript\\\" src=\\\"chrome://mozapps/content/preferences/actionsshared.js\\\"/>\\n-  <script type=\\\"application/x-javascript\\\" src=\\\"chrome://browser/content/preferences/changeaction.js\\\"/>\\n-  <script type=\\\"application/x-javascript\\\" src=\\\"chrome://help/content/contextHelp.js\\\"/>\\n-  \\n-  <stringbundle id=\\\"bundlePreferences\\\" src=\\\"chrome://browser/locale/preferences/preferences.properties\\\"/>\\n-\\n-  <hbox id=\\\"changeActionHeader\\\" align=\\\"center\\\" class=\\\"indent\\\">\\n-    <image id=\\\"typeIcon\\\"/>\\n-    <vbox flex=\\\"1\\\">\\n-      <label id=\\\"typeField\\\" crop=\\\"right\\\"/>\\n-      <label id=\\\"extensionField\\\" crop=\\\"right\\\"/>\\n-    </vbox>\\n-  </hbox>\\n-  <vbox id=\\\"changeActionContent\\\" flex=\\\"1\\\">\\n-    <label control=\\\"handlerGroup\\\">&whenDownloading.label;</label>\\n-    <radiogroup id=\\\"handlerGroup\\\" onselect=\\\"gChangeActionDialog.doEnabling(this.selectedItem);\\\" \\n-                flex=\\\"1\\\" aaa:describedby=\\\"changeActionHeader\\\">\\n-      <separator class=\\\"thin\\\"/>\\n-      <radio id=\\\"openDefault\\\" value=\\\"system\\\" \\n-             label=\\\"&openDefault.label;\\\" accesskey=\\\"&openDefault.accesskey;\\\"\\n-             aaa:labelledby=\\\"openDefault defaultApp\\\"/>\\n-      <filefield class=\\\"indent\\\" id=\\\"defaultApp\\\" disabled=\\\"true\\\"/>\\n-      <separator class=\\\"thin\\\"/>\\n-      <radio id=\\\"openApplication\\\" value=\\\"app\\\" \\n-             label=\\\"&openApplication.label;\\\" accesskey=\\\"&openApplication.accesskey;\\\"\\n-             aaa:labelledby=\\\"openApplication customApp\\\"/>\\n-      <hbox align=\\\"center\\\">\\n-        <filefield id=\\\"customApp\\\" class=\\\"indent\\\" flex=\\\"1\\\" disabled=\\\"true\\\"/>\\n-        <button id=\\\"changeApp\\\" oncommand=\\\"gChangeActionDialog.changeApp();\\\" \\n-                label=\\\"&changeApp.label;\\\" accesskey=\\\"&changeApp.accesskey;\\\"\\n-                disabled=\\\"true\\\"/>\\n-      </hbox>\\n-      <separator class=\\\"thin\\\"/>\\n-      <radio id=\\\"saveToDisk\\\" value=\\\"save\\\" \\n-             label=\\\"&saveToDisk.label;\\\" accesskey=\\\"&saveToDisk.accesskey;\\\"/>\\n-      <radiogroup id=\\\"saveToOptions\\\" class=\\\"indent\\\" onselect=\\\"gChangeActionDialog.doSaveToDiskEnabling(this.selectedItem);\\\"\\n-                  hidden=\\\"true\\\">\\n-        <radio id=\\\"saveToDefault\\\" value=\\\"default\\\" selected=\\\"true\\\"\\n-               label=\\\"&saveToDefaultFolder.label;\\\" accesskey=\\\"&saveToDefaultFolder.accesskey;\\\"/>\\n-        <radio id=\\\"saveToCustom\\\" value=\\\"custom\\\"\\n-               label=\\\"&saveToThisFolder.label;\\\" accesskey=\\\"&saveToThisFolder.accesskey;\\\"\\n-               aaa:labelledby=\\\"saveToCustom customDownloadFolder\\\"/>\\n-        <hbox align=\\\"center\\\" class=\\\"indent\\\">\\n-          <filefield id=\\\"customDownloadFolder\\\" flex=\\\"1\\\"/>\\n-          <button id=\\\"chooseCustomDownloadFolder\\\" oncommand=\\\"gChangeActionDialog.changeCustomFolder();\\\"\\n-                  label=\\\"&chooseFolder.label;\\\" accesskey=\\\"&chooseFolder.accesskey;\\\"/>\\n-        </hbox>\\n-        <radio id=\\\"saveToAskMe\\\" value=\\\"ask\\\"\\n-               label=\\\"&saveToAskMe.label;\\\" accesskey=\\\"&saveToAskMe.accesskey;\\\"/>\\n-      </radiogroup>\\n-      <radio id=\\\"plugin\\\" value=\\\"plugin\\\" \\n-             label=\\\"&usePlugin.label;\\\" accesskey=\\\"&usePlugin.accesskey;\\\"\\n-             aaa:labelledby=\\\"plugin pluginName\\\"/>\\n-      <filefield class=\\\"indent\\\" id=\\\"pluginName\\\" disabled=\\\"true\\\"/>\\n-    </radiogroup>\\n-  </vbox>\\n-</dialog>\\n-\\ndiff --git a/browser/components/preferences/content.js b/browser/components/preferences/content.js\\nindex ae0fb71..cfad187 100644\\n--- a/browser/components/preferences/content.js\\n+++ b/browser/components/preferences/content.js\\n@@ -58,7 +58,7 @@ var gContentPane = {\\n   /**\\n    * Utility function to enable/disable the button specified by aButtonID based\\n    * on the value of the Boolean preference specified by aPreferenceID.\\n-   */  \\n+   */\\n   updateButtons: function (aButtonID, aPreferenceID)\\n   {\\n     var button = document.getElementById(aButtonID);\\n@@ -262,18 +262,6 @@ var gContentPane = {\\n   {\\n     document.documentElement.openSubDialog(\\\"chrome://browser/content/preferences/colors.xul\\\",\\n                                            \\\"\\\", null);  \\n-  },\\n-\\n-  // FILE TYPES\\n-\\n-  /**\\n-   * Displays the file type configuration dialog.\\n-   */\\n-  configureFileTypes: function ()\\n-  {\\n-    document.documentElement.openWindow(\\\"Preferences:DownloadActions\\\",\\n-                                        \\\"chrome://browser/content/preferences/downloadactions.xul\\\",\\n-                                        \\\"\\\", null);\\n   }\\n \\n };\\ndiff --git a/browser/components/preferences/content.xul b/browser/components/preferences/content.xul\\nindex 6c30420..519a57a 100644\\n--- a/browser/components/preferences/content.xul\\n+++ b/browser/components/preferences/content.xul\\n@@ -73,11 +73,6 @@\\n                   name=\\\"font.language.group\\\"\\n                   type=\\\"wstring\\\"\\n                   onchange=\\\"gContentPane._rebuildFonts();\\\"/>\\n-\\n-      <!-- FILE TYPES -->\\n-      <preference id=\\\"pref.downloads.disable_button.edit_actions\\\"\\n-                  name=\\\"pref.downloads.disable_button.edit_actions\\\"\\n-                  type=\\\"bool\\\"/>\\n     </preferences>\\n     \\n     <script type=\\\"application/x-javascript\\\" src=\\\"chrome://mozapps/content/preferences/fontbuilder.js\\\"/>\\n@@ -207,20 +202,6 @@\\n       </grid>\\n     </groupbox>\\n \\n-    <!-- File Types -->\\n-    <groupbox id=\\\"fileTypesGroup\\\">\\n-      <caption label=\\\"&fileTypes.label;\\\"/>\\n-\\n-      <hbox id=\\\"configureFileTypesRow\\\" align=\\\"center\\\">\\n-        <description control=\\\"manageTypes\\\" flex=\\\"1\\\">&configureFileTypes.label;</description>\\n-        <button id=\\\"manageTypes\\\"\\n-                label=\\\"&manage.label;\\\"\\n-                accesskey=\\\"&manage.accesskey;\\\"\\n-                oncommand=\\\"gContentPane.configureFileTypes();\\\"\\n-                preference=\\\"pref.downloads.disable_button.edit_actions\\\"/>\\n-      </hbox>\\n-    </groupbox>\\n-\\n   </prefpane>\\n \\n </overlay>\\ndiff --git a/browser/components/preferences/downloadactions.js b/browser/components/preferences/downloadactions.js\\ndeleted file mode 100644\\nindex 1bb7274..0000000\\n--- a/browser/components/preferences/downloadactions.js\\n+++ /dev/null\\n@@ -1,870 +0,0 @@\\n-# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\\n-# ***** BEGIN LICENSE BLOCK *****\\n-# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n-#\\n-# The contents of this file are subject to the Mozilla Public License Version\\n-# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n-# the License. You may obtain a copy of the License at\\n-# http://www.mozilla.org/MPL/\\n-#\\n-# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n-# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n-# for the specific language governing rights and limitations under the\\n-# License.\\n-#\\n-# The Original Code is the Download Actions Manager.\\n-#\\n-# The Initial Developer of the Original Code is\\n-# Ben Goodger.\\n-# Portions created by the Initial Developer are Copyright (C) 2000\\n-# the Initial Developer. All Rights Reserved.\\n-#\\n-# Contributor(s):\\n-#   Ben Goodger <ben@mozilla.org>\\n-#\\n-# Alternatively, the contents of this file may be used under the terms of\\n-# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n-# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n-# in which case the provisions of the GPL or the LGPL are applicable instead\\n-# of those above. If you wish to allow use of your version of this file only\\n-# under the terms of either the GPL or the LGPL, and not to allow others to\\n-# use your version of this file under the terms of the MPL, indicate your\\n-# decision by deleting the provisions above and replace them with the notice\\n-# and other provisions required by the GPL or the LGPL. If you do not delete\\n-# the provisions above, a recipient may use your version of this file under\\n-# the terms of any one of the MPL, the GPL or the LGPL.\\n-#\\n-# ***** END LICENSE BLOCK *****\\n-\\n-const kPluginHandlerContractID = \\\"@mozilla.org/content/plugin/document-loader-factory;1\\\";\\n-const kDisabledPluginTypesPref = \\\"plugin.disable_full_page_plugin_for_types\\\";\\n-const kShowPluginsInList = \\\"browser.download.show_plugins_in_list\\\";\\n-const kHideTypesWithoutExtensions = \\\"browser.download.hide_plugins_without_extensions\\\";\\n-const kRootTypePrefix = \\\"urn:mimetype:\\\";\\n-\\n-///////////////////////////////////////////////////////////////////////////////\\n-// MIME Types Datasource RDF Utils\\n-function NC_URI(aProperty)\\n-{\\n-  return \\\"http://home.netscape.com/NC-rdf#\\\" + aProperty;\\n-}\\n-\\n-function MIME_URI(aType)\\n-{\\n-  return \\\"urn:mimetype:\\\" + aType;\\n-}\\n-\\n-function HANDLER_URI(aHandler)\\n-{\\n-  return \\\"urn:mimetype:handler:\\\" + aHandler;\\n-}\\n-\\n-function APP_URI(aType)\\n-{\\n-  return \\\"urn:mimetype:externalApplication:\\\" + aType;\\n-}\\n-\\n-var gDownloadActionsWindow = {  \\n-  _tree         : null,\\n-  _editButton   : null,\\n-  _removeButton : null,\\n-  _actions      : [],\\n-  _plugins      : {},\\n-  _bundle       : null,\\n-  _pref         : Components.classes[\\\"@mozilla.org/preferences-service;1\\\"]\\n-                            .getService(Components.interfaces.nsIPrefBranch),\\n-  _mimeSvc      : Components.classes[\\\"@mozilla.org/uriloader/external-helper-app-service;1\\\"]\\n-                            .getService(Components.interfaces.nsIMIMEService),\\n-  _excludingPlugins           : false,\\n-  _excludingMissingExtensions : false,\\n-  \\n-  init: function ()\\n-  {\\n-    (this._editButton = document.getElementById(\\\"editFileHandler\\\")).disabled = true;\\n-    (this._removeButton = document.getElementById(\\\"removeFileHandler\\\")).disabled = true;    \\n-\\n-    if (this._pref instanceof Components.interfaces.nsIPrefBranchInternal) {\\n-      this._pref.addObserver(kShowPluginsInList, this, false);\\n-      this._pref.addObserver(kHideTypesWithoutExtensions, this, false);\\n-    }\\n-    \\n-    // Initialize the File Type list\\n-    this._bundle = document.getElementById(\\\"bundlePreferences\\\");\\n-    this._tree = document.getElementById(\\\"fileHandlersList\\\");\\n-    this._loadView();\\n-    // Determine any exclusions being applied - e.g. don't show types for which\\n-    // only a plugin handler exists, don't show types lacking extensions, etc. \\n-    this._view._rowCount = this._updateExclusions();    \\n-    this._tree.treeBoxObject.view = this._view;  \\n-\\n-    var indexToSelect = parseInt(this._tree.getAttribute(\\\"lastSelected\\\"));\\n-    if (indexToSelect < this._tree.view.rowCount)\\n-      this._tree.view.selection.select(indexToSelect);\\n-    this._tree.focus();    \\n-  },\\n-  \\n-  _loadView: function ()\\n-  {\\n-    // Reset ALL the collections and state flags, because we can call this after\\n-    // the window has initially displayed by resetting the filter. \\n-    this._actions = [];\\n-    this._plugins = {};\\n-    this._view._filtered = false;\\n-    this._view._filterSet = [];\\n-    this._view._usingExclusionSet = false;\\n-    this._view._exclusionSet = [];\\n-    this._view._filterValue = \\\"\\\";\\n-\\n-    this._loadPluginData();\\n-    this._loadMIMERegistryData();\\n-  },\\n-  \\n-  _updateRowCount: function (aNewRowCount)\\n-  {\\n-    var oldCount = this._view._rowCount;\\n-    this._view._rowCount = 0;\\n-    this._tree.treeBoxObject.rowCountChanged(0, -oldCount);\\n-    this._view._rowCount = aNewRowCount;\\n-    this._tree.treeBoxObject.rowCountChanged(0, aNewRowCount);\\n-  },\\n-  \\n-  uninit: function ()\\n-  {\\n-    if (this._pref instanceof Components.interfaces.nsIPrefBranchInternal) {\\n-      this._pref.removeObserver(kShowPluginsInList, this);\\n-      this._pref.removeObserver(kHideTypesWithoutExtensions, this);\\n-    }\\n-  },\\n-  \\n-  observe: function (aSubject, aTopic, aData)\\n-  {\\n-    if (aTopic == \\\"nsPref:changed\\\" &&\\n-        (aData == kShowPluginsInList || aData == kHideTypesWithoutExtensions))\\n-      this._updateRowCount(this._updateExclusions());\\n-  },\\n-  \\n-  _updateExclusions: function ()\\n-  {\\n-    this._excludingPlugins = !this._pref.getBoolPref(kShowPluginsInList);\\n-    this._excludingMissingExtensions = this._pref.getBoolPref(kHideTypesWithoutExtensions);    \\n-    this._view._exclusionSet = [].concat(this._actions);\\n-    if (this._excludingMissingExtensions) {\\n-      this._view._usingExclusionSet = true;\\n-      for (var i = 0; i < this._view._exclusionSet.length;) {\\n-        if (!this._view._exclusionSet[i].hasExtension)\\n-          this._view._exclusionSet.splice(i, 1);\\n-        else\\n-          ++i;\\n-      }\\n-    }\\n-    if (this._excludingPlugins) {\\n-      this._view._usingExclusionSet = true;\\n-      for (i = 0; i < this._view._exclusionSet.length;) {\\n-        if (this._view._exclusionSet[i].handledOnlyByPlugin)\\n-          this._view._exclusionSet.splice(i, 1);\\n-        else\\n-          ++i        \\n-      }      \\n-    }\\n-\\n-    return this._view._usingExclusionSet ? this._view._exclusionSet.length \\n-                                         : this._view._filtered ? this._view._filterSet.length \\n-                                                                : this._actions.length;\\n-  },\\n-  \\n-  _loadPluginData: function ()\\n-  {\\n-    // Read enabled plugin type information from the category manager\\n-    var disabled = \\\"\\\";\\n-    if (this._pref.prefHasUserValue(kDisabledPluginTypesPref)) \\n-      disabled = this._pref.getCharPref(kDisabledPluginTypesPref);\\n-    \\n-    for (var i = 0; i < navigator.plugins.length; ++i) {\\n-      var plugin = navigator.plugins[i];\\n-      for (var j = 0; j < plugin.length; ++j) {\\n-        var actionName = this._bundle.getFormattedString(\\\"openWith\\\", [plugin.name])\\n-        var type = plugin[j].type;\\n-        this._createAction(type, actionName, true, FILEACTION_OPEN_PLUGIN, \\n-                           null, true, disabled.indexOf(type) == -1, true);\\n-      }\\n-    }\\n-  },\\n-\\n-  _createAction: function (aMIMEType, aActionName, \\n-                           aIsEditable, aHandleMode, aCustomHandler,\\n-                           aPluginAvailable, aPluginEnabled, \\n-                           aHandledOnlyByPlugin)\\n-  {\\n-    var newAction = !(aMIMEType in this._plugins);\\n-    var action = newAction ? new FileAction() : this._plugins[aMIMEType];\\n-    action.type = aMIMEType;\\n-    var info = this._mimeSvc.getFromTypeAndExtension(action.type, null);\\n-    \\n-    // File Extension\\n-    try {\\n-      action.extension = info.primaryExtension;\\n-    }\\n-    catch (e) {\\n-      action.extension = this._bundle.getString(\\\"extensionNone\\\");\\n-      action.hasExtension = false;\\n-    }\\n-    \\n-    // Large and Small Icon\\n-    try {\\n-      action.smallIcon = \\\"moz-icon://goat.\\\" + info.primaryExtension + \\\"?size=16\\\";\\n-      action.bigIcon = \\\"moz-icon://goat.\\\" + info.primaryExtension + \\\"?size=32\\\";\\n-    }\\n-    catch (e) {\\n-      action.smallIcon = \\\"moz-icon://goat?size=16&contentType=\\\" + info.MIMEType;\\n-      action.bigIcon = \\\"moz-icon://goat?contentType=\\\" + info.MIMEType + \\\"&size=32\\\";\\n-    }\\n-\\n-    // Pretty Type Name\\n-    if (info.description == \\\"\\\") {\\n-      try {\\n-        action.typeName = this._bundle.getFormattedString(\\\"fileEnding\\\", [info.primaryExtension.toUpperCase()]);\\n-      }\\n-      catch (e) { \\n-        // Wow, this sucks, just show the MIME type as a last ditch effort to display\\n-        // the type of file that this is. \\n-        action.typeName = info.MIMEType;\\n-      }\\n-    }\\n-    else\\n-      action.typeName = info.description;\\n-\\n-    // Pretty Action Name\\n-    if (aActionName)\\n-      action.action         = aActionName;\\n-    action.pluginAvailable  = aPluginAvailable;\\n-    action.pluginEnabled    = aPluginEnabled;\\n-    action.editable         = aIsEditable;\\n-    action.handleMode       = aHandleMode;\\n-    action.customHandler    = aCustomHandler;\\n-    action.mimeInfo         = info;\\n-    action.handledOnlyByPlugin  = aHandledOnlyByPlugin\\n-    \\n-    if (newAction && !(action.handledOnlyByPlugin && !action.pluginEnabled)) {\\n-      this._actions.push(action);\\n-      this._plugins[action.type] = action;\\n-    }      \\n-    return action;\\n-  },\\n-  \\n-  _loadMIMEDS: function ()\\n-  {\\n-    var fileLocator = Components.classes[\\\"@mozilla.org/file/directory_service;1\\\"]\\n-                                .getService(Components.interfaces.nsIProperties);\\n-    \\n-    var file = fileLocator.get(\\\"UMimTyp\\\", Components.interfaces.nsIFile);\\n-\\n-    var ioService = Components.classes[\\\"@mozilla.org/network/io-service;1\\\"]\\n-                              .getService(Components.interfaces.nsIIOService);\\n-    var fileHandler = ioService.getProtocolHandler(\\\"file\\\")\\n-                               .QueryInterface(Components.interfaces.nsIFileProtocolHandler);\\n-    this._mimeDS = this._rdf.GetDataSourceBlocking(fileHandler.getURLSpecFromFile(file));\\n-  },\\n-  \\n-  _getLiteralValue: function (aResource, aProperty)\\n-  {\\n-    var property = this._rdf.GetResource(NC_URI(aProperty));\\n-    var value = this._mimeDS.GetTarget(aResource, property, true);\\n-    if (value)\\n-      return value.QueryInterface(Components.interfaces.nsIRDFLiteral).Value;\\n-    return \\\"\\\";\\n-  },\\n-  \\n-  _getChildResource: function (aResource, aProperty)\\n-  {\\n-    var property = this._rdf.GetResource(NC_URI(aProperty));\\n-    return this._mimeDS.GetTarget(aResource, property, true);\\n-  },\\n-  \\n-  _getDisplayNameForFile: function (aFile)\\n-  {\\n-#ifdef XP_WIN\\n-    if (aFile instanceof Components.interfaces.nsILocalFileWin) {\\n-      try {\\n-        return aFile.getVersionInfoField(\\\"FileDescription\\\"); \\n-      }\\n-      catch (e) {\\n-        // fall through to the filename\\n-      }\\n-    }\\n-#endif\\n-#ifdef XP_MACOSX\\n-    var lfm = aFile.QueryInterface(Components.interfaces.nsILocalFileMac);\\n-    try {\\n-      return lfm.bundleDisplayName;\\n-    }\\n-    catch (e) {\\n-      // fall through to the file name\\n-    }\\n-#endif\\n-    var ios = Components.classes[\\\"@mozilla.org/network/io-service;1\\\"]\\n-                        .getService(Components.interfaces.nsIIOService);\\n-    var url = ios.newFileURI(aFile).QueryInterface(Components.interfaces.nsIURL);\\n-    return url.fileName;\\n-  },  \\n-  \\n-  _loadMIMERegistryData: function ()\\n-  {\\n-    this._rdf = Components.classes[\\\"@mozilla.org/rdf/rdf-service;1\\\"]\\n-                          .getService(Components.interfaces.nsIRDFService);\\n-    this._loadMIMEDS();                          \\n-                          \\n-    var root = this._rdf.GetResource(\\\"urn:mimetypes:root\\\");\\n-    var container = Components.classes[\\\"@mozilla.org/rdf/container;1\\\"]\\n-                              .createInstance(Components.interfaces.nsIRDFContainer);\\n-    container.Init(this._mimeDS, root);\\n-    \\n-    var elements = container.GetElements();\\n-    while (elements.hasMoreElements()) {\\n-      var type = elements.getNext();\\n-      if (!(type instanceof Components.interfaces.nsIRDFResource))\\n-        break;\\n-      var editable = this._getLiteralValue(type, \\\"editable\\\") == \\\"true\\\";\\n-      if (!editable)\\n-        continue;\\n-      \\n-      var handler = this._getChildResource(type, \\\"handlerProp\\\");\\n-      var alwaysAsk = this._getLiteralValue(handler, \\\"alwaysAsk\\\") == \\\"true\\\";\\n-      if (alwaysAsk)\\n-        continue;\\n-      var saveToDisk        = this._getLiteralValue(handler, \\\"saveToDisk\\\") == \\\"true\\\";\\n-      var useSystemDefault  = this._getLiteralValue(handler, \\\"useSystemDefault\\\") == \\\"true\\\";\\n-      var editable          = this._getLiteralValue(type, \\\"editable\\\") == \\\"true\\\";\\n-      var handledInternally = this._getLiteralValue(handler, \\\"handleInternal\\\") == \\\"true\\\";\\n-      var externalApp       = this._getChildResource(handler, \\\"externalApplication\\\");\\n-      var externalAppPath   = this._getLiteralValue(externalApp, \\\"path\\\");\\n-      try {\\n-        var customHandler = Components.classes[\\\"@mozilla.org/file/local;1\\\"]\\n-                                      .createInstance(Components.interfaces.nsILocalFile);\\n-        customHandler.initWithPath(externalAppPath);\\n-      }\\n-      catch (e) {\\n-        customHandler = null;\\n-      }      \\n-      if (customHandler && !customHandler.exists())\\n-        customHandler = null;\\n-      var mimeType = this._getLiteralValue(type, \\\"value\\\");\\n-      var typeInfo = this._mimeSvc.getFromTypeAndExtension(mimeType, null);\\n-\\n-      // Determine the pretty name of the associated action.\\n-      var actionName = \\\"\\\";\\n-      var handleMode = 0;\\n-      if (saveToDisk) {\\n-        // Save the file to disk\\n-        actionName = this._bundle.getString(\\\"saveToDisk\\\");\\n-        handleMode = FILEACTION_SAVE_TO_DISK;\\n-      }\\n-      else if (useSystemDefault) {\\n-        // Use the System Default handler\\n-        actionName = this._bundle.getFormattedString(\\\"openWith\\\", \\n-                                                     [typeInfo.defaultDescription]);\\n-        handleMode = FILEACTION_OPEN_DEFAULT;\\n-      }\\n-      else {\\n-        // Custom Handler\\n-        if (customHandler) {\\n-          actionName = this._bundle.getFormattedString(\\\"openWith\\\", \\n-                                                       [this._getDisplayNameForFile(customHandler)]);\\n-          handleMode = FILEACTION_OPEN_CUSTOM;\\n-        }\\n-        else {\\n-          // Corrupt datasource, invalid custom handler path. Revert to default.\\n-          actionName = this._bundle.getFormattedString(\\\"openWith\\\", \\n-                                                       [typeInfo.defaultDescription]);\\n-          handleMode = FILEACTION_OPEN_DEFAULT;\\n-        }\\n-      }\\n-\\n-      if (handledInternally)\\n-        handleMode = FILEACTION_OPEN_INTERNALLY;\\n-      \\n-      var pluginAvailable = mimeType in this._plugins && this._plugins[mimeType].pluginAvailable;\\n-      var pluginEnabled = pluginAvailable && this._plugins[mimeType].pluginEnabled;\\n-      if (pluginEnabled) {\\n-        handleMode = FILEACTION_OPEN_PLUGIN;\\n-        actionName = null;\\n-      }\\n-      var action = this._createAction(mimeType, actionName, editable, handleMode, \\n-                                      customHandler, pluginAvailable, pluginEnabled,\\n-                                      false);\\n-    }\\n-  },\\n-  \\n-  _view: {\\n-    _filtered           : false,\\n-    _filterSet          : [],\\n-    _usingExclusionSet  : false,\\n-    _exclusionSet       : [],\\n-    _filterValue        : \\\"\\\",\\n-\\n-    _rowCount: 0,\\n-    get rowCount() \\n-    { \\n-      return this._rowCount; \\n-    },\\n-    \\n-    get activeCollection ()\\n-    {\\n-      return this._filtered ? this._filterSet \\n-                            : this._usingExclusionSet ? this._exclusionSet \\n-                                                      : gDownloadActionsWindow._actions;\\n-    },\\n-\\n-    getItemAtIndex: function (aIndex)\\n-    {\\n-      return this.activeCollection[aIndex];\\n-    },\\n-    \\n-    getCellText: function (aIndex, aColumn)\\n-    {\\n-      switch (aColumn.id) {\\n-      case \\\"fileExtension\\\":\\n-        return this.getItemAtIndex(aIndex).extension.toUpperCase();\\n-      case \\\"fileType\\\":\\n-        return this.getItemAtIndex(aIndex).typeName;\\n-      case \\\"fileMIMEType\\\":\\n-        return this.getItemAtIndex(aIndex).type;\\n-      case \\\"fileHandler\\\":\\n-        return this.getItemAtIndex(aIndex).action;\\n-      }\\n-      return \\\"\\\";\\n-    },\\n-    getImageSrc: function (aIndex, aColumn) \\n-    {\\n-      if (aColumn.id == \\\"fileExtension\\\") \\n-        return this.getItemAtIndex(aIndex).smallIcon;\\n-      return \\\"\\\";\\n-    },\\n-    _selection: null, \\n-    get selection () { return this._selection; },\\n-    set selection (val) { this._selection = val; return val; },\\n-    getRowProperties: function (aIndex, aProperties) {},\\n-    getCellProperties: function (aIndex, aColumn, aProperties) {},\\n-    getColumnProperties: function (aColumn, aProperties) {},\\n-    isContainer: function (aIndex) { return false; },\\n-    isContainerOpen: function (aIndex) { return false; },\\n-    isContainerEmpty: function (aIndex) { return false; },\\n-    isSeparator: function (aIndex) { return false; },\\n-    isSorted: function (aIndex) { return false; },\\n-    canDrop: function (aIndex, aOrientation) { return false; },\\n-    drop: function (aIndex, aOrientation) {},\\n-    getParentIndex: function (aIndex) { return -1; },\\n-    hasNextSibling: function (aParentIndex, aIndex) { return false; },\\n-    getLevel: function (aIndex) { return 0; },\\n-    getProgressMode: function (aIndex, aColumn) {},    \\n-    getCellValue: function (aIndex, aColumn) {},\\n-    setTree: function (aTree) {},    \\n-    toggleOpenState: function (aIndex) { },\\n-    cycleHeader: function (aColumn) {},    \\n-    selectionChanged: function () {},    \\n-    cycleCell: function (aIndex, aColumn) {},    \\n-    isEditable: function (aIndex, aColumn) { return false; },\\n-    isSelectable: function (aIndex, aColumn) { return false; },\\n-    setCellValue: function (aIndex, aColumn, aValue) {},    \\n-    setCellText: function (aIndex, aColumn, aValue) {},    \\n-    performAction: function (aAction) {},  \\n-    performActionOnRow: function (aAction, aIndex) {},    \\n-    performActionOnCell: function (aAction, aindex, aColumn) {}\\n-  },\\n-\\n-  removeFileHandler: function ()\\n-  {\\n-    var selection = this._tree.view.selection; \\n-    if (selection.count < 1)\\n-      return;\\n-      \\n-    var promptService = Components.classes[\\\"@mozilla.org/embedcomp/prompt-service;1\\\"]\\n-                                  .getService(Components.interfaces.nsIPromptService);\\n-    var flags = promptService.BUTTON_TITLE_IS_STRING * promptService.BUTTON_POS_0;\\n-    flags += promptService.BUTTON_TITLE_CANCEL * promptService.BUTTON_POS_1;\\n-\\n-    var title = this._bundle.getString(\\\"removeTitle\\\" + (selection.count > 1 ? \\\"Multiple\\\" : \\\"Single\\\"));\\n-    var message = this._bundle.getString(\\\"removeMessage\\\" + (selection.count > 1 ? \\\"Multiple\\\" : \\\"Single\\\"));\\n-    var button = this._bundle.getString(\\\"removeButton\\\" + (selection.count > 1 ? \\\"Multiple\\\" : \\\"Single\\\"));\\n-    var rv = promptService.confirmEx(window, title, message, flags, button, \\n-                                     null, null, null, { value: 0 });\\n-    if (rv != 0)\\n-      return;     \\n-\\n-    var rangeCount = selection.getRangeCount();\\n-    var lastSelected = 0;\\n-    var mimeDSDirty = false;\\n-    for (var i = 0; i < rangeCount; ++i) {\\n-      var min = { }; var max = { };\\n-      selection.getRangeAt(i, min, max);\\n-      for (var j = min.value; j <= max.value; ++j) {\\n-        var item = this._view.getItemAtIndex(j);\\n-        if (!item.handledOnlyByPlugin) {\\n-          // There is data for this type in the MIME registry, so make sure we\\n-          // remove it from the MIME registry. We don't disable the plugin here because\\n-          // if we do there's currently no way through the UI to re-enable it. We may\\n-          // come up with some sort of solution for that at a later date. \\n-          var typeRes = this._rdf.GetResource(MIME_URI(item.type));\\n-          var handlerRes = this._getChildResource(typeRes, \\\"handlerProp\\\");\\n-          var extAppRes = this._getChildResource(handlerRes, \\\"externalApplication\\\");\\n-          this._cleanResource(extAppRes);\\n-          this._cleanResource(handlerRes);\\n-          this._cleanResource(typeRes); \\n-          mimeDSDirty = true;         \\n-        }\\n-        lastSelected = (j + 1) >= this._view.rowCount ? j-1 : j;\\n-      }\\n-    }\\n-    if (mimeDSDirty && \\n-        this._mimeDS instanceof Components.interfaces.nsIRDFRemoteDataSource)\\n-      this._mimeDS.Flush();\\n-    \\n-    // Just reload the list to make sure deletions are respected\\n-    this._loadView();\\n-    this._updateRowCount(this._updateExclusions());\\n-\\n-    selection.select(lastSelected);\\n-  },\\n-  \\n-  _cleanResource: function (aResource)\\n-  {\\n-    var labels = this._mimeDS.ArcLabelsOut(aResource);\\n-    while (labels.hasMoreElements()) {\\n-      var arc = labels.getNext();\\n-      if (!(arc instanceof Components.interfaces.nsIRDFResource))\\n-        break;\\n-      var target = this._mimeDS.GetTarget(aResource, arc, true);\\n-      this._mimeDS.Unassert(aResource, arc, target);\\n-    }\\n-  },\\n-  \\n-  _disablePluginForItem: function (aItem)\\n-  {\\n-    if (aItem.pluginAvailable) {\\n-      // Since we're disabling the full page plugin for this content type, \\n-      // we must add it to the disabled list if it's not in there already.\\n-      var prefs = Components.classes[\\\"@mozilla.org/preferences-service;1\\\"]\\n-                            .getService(Components.interfaces.nsIPrefBranch);\\n-      var disabled = aItem.type;\\n-      if (prefs.prefHasUserValue(kDisabledPluginTypesPref)) {\\n-        disabled = prefs.getCharPref(kDisabledPluginTypesPref);\\n-        if (disabled.indexOf(aItem.type) == -1) \\n-          disabled += \\\",\\\" + aItem.type;\\n-      }\\n-      prefs.setCharPref(kDisabledPluginTypesPref, disabled);   \\n-      \\n-      // Also, we update the category manager so that existing browser windows\\n-      // update.\\n-      var catman = Components.classes[\\\"@mozilla.org/categorymanager;1\\\"]\\n-                             .getService(Components.interfaces.nsICategoryManager);\\n-      catman.deleteCategoryEntry(\\\"Gecko-Content-Viewers\\\", aItem.type, false);     \\n-    }    \\n-  },\\n-  \\n-  _enablePluginForItem: function (aItem)\\n-  {\\n-    var prefs = Components.classes[\\\"@mozilla.org/preferences-service;1\\\"]\\n-                          .getService(Components.interfaces.nsIPrefBranch);\\n-    // Since we're enabling the full page plugin for this content type, we must\\n-    // look at the disabled types list and ensure that this type isn't in it.\\n-    if (prefs.prefHasUserValue(kDisabledPluginTypesPref)) {\\n-      var disabledList = prefs.getCharPref(kDisabledPluginTypesPref);\\n-      if (disabledList == aItem.type)\\n-        prefs.clearUserPref(kDisabledPluginTypesPref);\\n-      else {\\n-        var disabledTypes = disabledList.split(\\\",\\\");\\n-        var disabled = \\\"\\\";\\n-        for (var i = 0; i < disabledTypes.length; ++i) {\\n-          if (aItem.type != disabledTypes[i])\\n-            disabled += disabledTypes[i] + (i == disabledTypes.length - 1 ? \\\"\\\" : \\\",\\\");\\n-        }\\n-        prefs.setCharPref(kDisabledPluginTypesPref, disabled);\\n-      }\\n-    }\\n-\\n-    // Also, we update the category manager so that existing browser windows\\n-    // update.\\n-    var catman = Components.classes[\\\"@mozilla.org/categorymanager;1\\\"]\\n-                           .getService(Components.interfaces.nsICategoryManager);\\n-    catman.addCategoryEntry(\\\"Gecko-Content-Viewers\\\", aItem.type,\\n-                            kPluginHandlerContractID, false, true);\\n-  },\\n-  \\n-  _ensureMIMERegistryEntry: function (aItem)\\n-  {\\n-    var root = this._rdf.GetResource(\\\"urn:mimetypes:root\\\");\\n-    var container = Components.classes[\\\"@mozilla.org/rdf/container;1\\\"]\\n-                              .createInstance(Components.interfaces.nsIRDFContainer);\\n-    container.Init(this._mimeDS, root);\\n-    \\n-    var itemResource = this._rdf.GetResource(MIME_URI(aItem.type));\\n-    var handlerResource = null;\\n-    if (container.IndexOf(itemResource) == -1) {\\n-      container.AppendElement(itemResource);\\n-      this._setLiteralValue(itemResource, \\\"editable\\\", \\\"true\\\");\\n-      this._setLiteralValue(itemResource, \\\"value\\\", aItem.type);\\n-      \\n-      handlerResource = this._rdf.GetResource(HANDLER_URI(aItem.type));\\n-      this._setLiteralValue(handlerResource, \\\"alwaysAsk\\\", \\\"false\\\");\\n-      var handlerProp = this._rdf.GetResource(NC_URI(\\\"handlerProp\\\"));\\n-      this._mimeDS.Assert(itemResource, handlerProp, handlerResource, true);\\n-      \\n-      var extAppResource = this._rdf.GetResource(APP_URI(aItem.type));\\n-      this._setLiteralValue(extAppResource, \\\"path\\\", \\\"\\\");\\n-      var extAppProp = this._rdf.GetResource(NC_URI(\\\"externalApplication\\\"));\\n-      this._mimeDS.Assert(handlerResource, extAppProp, extAppResource, true);\\n-    }\\n-    else\\n-      handlerResource = this._getChildResource(itemResource, \\\"handlerProp\\\");\\n-        \\n-    return handlerResource;\\n-  },\\n-  \\n-  _setLiteralValue: function (aResource, aProperty, aValue)\\n-  {\\n-    var property = this._rdf.GetResource(NC_URI(aProperty));\\n-    var newValue = this._rdf.GetLiteral(aValue);\\n-    var oldValue = this._mimeDS.GetTarget(aResource, property, true);\\n-    if (oldValue)\\n-      this._mimeDS.Change(aResource, property, oldValue, newValue);\\n-    else\\n-      this._mimeDS.Assert(aResource, property, newValue, true);\\n-  },\\n-  \\n-  editFileHandler: function ()\\n-  {\\n-    var selection = this._tree.view.selection; \\n-    if (selection.count != 1)\\n-      return;\\n-\\n-    var item = this._view.getItemAtIndex(selection.currentIndex);\\n-    openDialog(\\\"chrome://browser/content/preferences/changeaction.xul\\\", \\n-               \\\"_blank\\\", \\\"modal,centerscreen\\\", item);\\n-    \\n-    // Update the database\\n-    switch (item.handleMode) {\\n-    case FILEACTION_OPEN_PLUGIN:\\n-      this._enablePluginForItem(item);\\n-      // We don't need to adjust the database because plugin settings always\\n-      // supercede whatever is in the db, leaving it untouched allows the last\\n-      // user setting(s) to be preserved if they ever revert.\\n-      break;\\n-    case FILEACTION_OPEN_DEFAULT:\\n-      this._disablePluginForItem(item);\\n-      var handlerRes = this._ensureMIMERegistryEntry(item);\\n-      this._setLiteralValue(handlerRes, \\\"useSystemDefault\\\", \\\"true\\\");\\n-      this._setLiteralValue(handlerRes, \\\"saveToDisk\\\", \\\"false\\\");\\n-      break;\\n-    case FILEACTION_OPEN_CUSTOM:\\n-      this._disablePluginForItem(item);\\n-      var handlerRes = this._ensureMIMERegistryEntry(item);\\n-      this._setLiteralValue(handlerRes, \\\"useSystemDefault\\\", \\\"false\\\");\\n-      this._setLiteralValue(handlerRes, \\\"saveToDisk\\\", \\\"false\\\");\\n-      var extAppRes = this._getChildResource(handlerRes, \\\"externalApplication\\\");\\n-      this._setLiteralValue(extAppRes, \\\"path\\\", item.customHandler.path);\\n-      break;\\n-    case FILEACTION_SAVE_TO_DISK:\\n-      this._disablePluginForItem(item);\\n-      var handlerRes = this._ensureMIMERegistryEntry(item);\\n-      this._setLiteralValue(handlerRes, \\\"useSystemDefault\\\", \\\"false\\\");\\n-      this._setLiteralValue(handlerRes, \\\"saveToDisk\\\", \\\"true\\\");\\n-      break;\\n-    }\\n-    \\n-    if (this._mimeDS instanceof Components.interfaces.nsIRDFRemoteDataSource)\\n-      this._mimeDS.Flush();\\n-    \\n-    // Update the view\\n-    this._tree.treeBoxObject.invalidateRow(selection.currentIndex);    \\n-  },\\n-  \\n-  onSelectionChanged: function ()\\n-  {\\n-    if (this._tree.view.rowCount == 0) {\\n-      this._removeButton.disabled = true;\\n-      this._editButton.disabled = true;\\n-      return;\\n-    }\\n-      \\n-    var selection = this._tree.view.selection; \\n-    var selected = selection.count;\\n-    this._removeButton.disabled = selected == 0;\\n-    this._editButton.disabled = selected != 1;\\n-    var stringKey = selected > 1 ? \\\"removeButtonMultiple\\\" : \\\"removeButtonSingle\\\";\\n-    this._removeButton.label = this._bundle.getString(stringKey);\\n-    \\n-    var canRemove = true;\\n-    var canEdit = true;\\n-    \\n-    var rangeCount = selection.getRangeCount();\\n-    var min = { }, max = { };\\n-    var setLastSelected = false;\\n-    for (var i = 0; i < rangeCount; ++i) {\\n-      selection.getRangeAt(i, min, max);\\n-      \\n-      for (var j = min.value; j <= max.value; ++j) {\\n-        if (!setLastSelected) {\\n-          // Set the last selected index to the first item in the selection\\n-          this._tree.setAttribute(\\\"lastSelected\\\", j);\\n-          setLastSelected = true;\\n-        }\\n-\\n-        var item = this._view.getItemAtIndex(j);\\n-        if (item && \\n-            (!item.editable || item.handleMode == FILEACTION_OPEN_INTERNALLY))\\n-          canEdit = false;\\n-        \\n-        if (item && \\n-            (!item.editable || item.handleMode == FILEACTION_OPEN_INTERNALLY ||\\n-             item.handledOnlyByPlugin))\\n-          canRemove = false;\\n-      }\\n-    }\\n-    \\n-    if (!canRemove)\\n-      this._removeButton.disabled = true;\\n-    if (!canEdit)\\n-      this._editButton.disabled = true;\\n-  },\\n-  \\n-  _lastSortProperty : \\\"\\\",\\n-  _lastSortAscending: false,\\n-  sort: function (aProperty) \\n-  {\\n-    var ascending = (aProperty == this._lastSortProperty) ? !this._lastSortAscending : true;\\n-    function sortByProperty(a, b) \\n-    {\\n-      return a[aProperty].toLowerCase().localeCompare(b[aProperty].toLowerCase());\\n-    }\\n-    function sortByExtension(a, b)\\n-    {\\n-      if (!a.hasExtension && b.hasExtension)\\n-        return 1;\\n-      if (!b.hasExtension && a.hasExtension)\\n-        return -1;\\n-      return a.extension.toLowerCase().localeCompare(b.extension.toLowerCase());\\n-    }\\n-    // Sort the Filtered List, if in Filtered mode\\n-    if (!this._view._filtered) { \\n-      this._view.activeCollection.sort(aProperty == \\\"extension\\\" ? sortByExtension : sortByProperty);\\n-      if (!ascending)\\n-        this._view.activeCollection.reverse();\\n-    }\\n-\\n-    this._view.selection.clearSelection();\\n-    this._view.selection.select(0);\\n-    this._tree.treeBoxObject.invalidate();\\n-    this._tree.treeBoxObject.ensureRowIsVisible(0);\\n-\\n-    this._lastSortAscending = ascending;\\n-    this._lastSortProperty = aProperty;\\n-  },\\n-  \\n-  clearFilter: function ()\\n-  {    \\n-    // Clear the Filter and the Tree Display\\n-    document.getElementById(\\\"filter\\\").value = \\\"\\\";\\n-    this._view._filtered = false;\\n-    this._view._filterSet = [];\\n-\\n-    // Just reload the list to make sure deletions are respected\\n-    this._loadView();\\n-    this._updateRowCount(this._updateExclusions());\\n-\\n-    // Restore selection\\n-    this._view.selection.clearSelection();\\n-    for (var i = 0; i < this._lastSelectedRanges.length; ++i) {\\n-      var range = this._lastSelectedRanges[i];\\n-      this._view.selection.rangedSelect(range.min, range.max, true);\\n-    }\\n-    this._lastSelectedRanges = [];\\n-\\n-    document.getElementById(\\\"actionsIntro\\\").value = this._bundle.getString(\\\"actionsAll\\\");\\n-    document.getElementById(\\\"clearFilter\\\").disabled = true;\\n-    document.getElementById(\\\"filter\\\").focus();\\n-  },\\n-  \\n-  _actionMatchesFilter: function (aAction)\\n-  {\\n-    return aAction.extension.toLowerCase().indexOf(this._view._filterValue) != -1 ||\\n-           aAction.typeName.toLowerCase().indexOf(this._view._filterValue) != -1 || \\n-           aAction.type.toLowerCase().indexOf(this._view._filterValue) != -1 ||\\n-           aAction.action.toLowerCase().indexOf(this._view._filterValue) != -1;\\n-  },\\n-  \\n-  _filterActions: function (aFilterValue)\\n-  {\\n-    this._view._filterValue = aFilterValue;\\n-    var actions = [];\\n-    var collection = this._view._usingExclusionSet ? this._view._exclusionSet : this._actions;\\n-    for (var i = 0; i < collection.length; ++i) {\\n-      var action = collection[i];\\n-      if (this._actionMatchesFilter(action)) \\n-        actions.push(action);\\n-    }\\n-    return actions;\\n-  },\\n-  \\n-  _lastSelectedRanges: [],\\n-  _saveState: function ()\\n-  {\\n-    // Save selection\\n-    var seln = this._view.selection;\\n-    this._lastSelectedRanges = [];\\n-    var rangeCount = seln.getRangeCount();\\n-    for (var i = 0; i < rangeCount; ++i) {\\n-      var min = {}; var max = {};\\n-      seln.getRangeAt(i, min, max);\\n-      this._lastSelectedRanges.push({ min: min.value, max: max.value });\\n-    }\\n-  },\\n-  \\n-  _filterTimeout: -1,\\n-  onFilterInput: function ()\\n-  {\\n-    if (this._filterTimeout != -1)\\n-      clearTimeout(this._filterTimeout);\\n-   \\n-    function filterActions()\\n-    {\\n-      var filter = document.getElementById(\\\"filter\\\").value.toLowerCase();\\n-      if (filter == \\\"\\\") {\\n-        gDownloadActionsWindow.clearFilter();\\n-        return;\\n-      }        \\n-      var view = gDownloadActionsWindow._view;\\n-      view._filterSet = gDownloadActionsWindow._filterActions(filter);\\n-      if (!view._filtered) {\\n-        // Save Display Info for the Non-Filtered mode when we first\\n-        // enter Filtered mode. \\n-        gDownloadActionsWindow._saveState();\\n-        view._filtered = true;\\n-      }\\n-\\n-      // Clear the display\\n-      gDownloadActionsWindow._updateRowCount(view._filterSet.length);\\n-      \\n-      // if the view is not empty then select the first item\\n-      if (view.rowCount > 0)\\n-        view.selection.select(0);\\n-\\n-      document.getElementById(\\\"actionsIntro\\\").value = gDownloadActionsWindow._bundle.getString(\\\"actionsFiltered\\\");\\n-      document.getElementById(\\\"clearFilter\\\").disabled = false;\\n-    }\\n-    window.filterActions = filterActions;\\n-    this._filterTimeout = setTimeout(\\\"filterActions();\\\", 500);\\n-  },\\n-  \\n-  onFilterKeyPress: function (aEvent)\\n-  {\\n-    if (aEvent.keyCode == 27) // ESC key\\n-      this.clearFilter();\\n-  },\\n-  \\n-  focusFilterBox: function ()\\n-  { \\n-    var filter = document.getElementById(\\\"filter\\\");\\n-    filter.focus();\\n-    filter.select();\\n-  }  \\n-};\\n-\\ndiff --git a/browser/components/preferences/downloadactions.xul b/browser/components/preferences/downloadactions.xul\\ndeleted file mode 100644\\nindex 13193cc..0000000\\n--- a/browser/components/preferences/downloadactions.xul\\n+++ /dev/null\\n@@ -1,129 +0,0 @@\\n-<?xml version=\\\"1.0\\\"?>\\n-\\n-# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\\n-# ***** BEGIN LICENSE BLOCK *****\\n-# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n-#\\n-# The contents of this file are subject to the Mozilla Public License Version\\n-# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n-# the License. You may obtain a copy of the License at\\n-# http://www.mozilla.org/MPL/\\n-#\\n-# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n-# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n-# for the specific language governing rights and limitations under the\\n-# License.\\n-#\\n-# The Original Code is the Firefox Preferences System.\\n-#\\n-# The Initial Developer of the Original Code is\\n-# Ben Goodger.\\n-# Portions created by the Initial Developer are Copyright (C) 2005\\n-# the Initial Developer. All Rights Reserved.\\n-#\\n-# Contributor(s):\\n-#   Ben Goodger <ben@mozilla.org>\\n-#\\n-# Alternatively, the contents of this file may be used under the terms of\\n-# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n-# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n-# in which case the provisions of the GPL or the LGPL are applicable instead\\n-# of those above. If you wish to allow use of your version of this file only\\n-# under the terms of either the GPL or the LGPL, and not to allow others to\\n-# use your version of this file under the terms of the MPL, indicate your\\n-# decision by deleting the provisions above and replace them with the notice\\n-# and other provisions required by the GPL or the LGPL. If you do not delete\\n-# the provisions above, a recipient may use your version of this file under\\n-# the terms of any one of the MPL, the GPL or the LGPL.\\n-#\\n-# ***** END LICENSE BLOCK *****\\n-\\n-<?xml-stylesheet href=\\\"chrome://global/skin/\\\"?>\\n-<?xml-stylesheet href=\\\"chrome://browser/skin/preferences/preferences.css\\\"?>\\n-\\n-<!DOCTYPE prefwindow [\\n-  <!ENTITY % brandDTD SYSTEM \\\"chrome://branding/locale/brand.dtd\\\">\\n-  <!ENTITY % downloadactionsDTD SYSTEM \\\"chrome://browser/locale/preferences/downloadactions.dtd\\\">\\n-  %brandDTD;\\n-  %downloadactionsDTD;\\n-]>\\n-\\n-<window id=\\\"DownloadActionsWindow\\\" class=\\\"windowDialog\\\"\\n-        windowtype=\\\"Preferences:DownloadActions\\\"\\n-        xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\"\\n-        onload=\\\"gDownloadActionsWindow.init();\\\"\\n-        onunload=\\\"gDownloadActionsWindow.uninit();\\\"\\n-        title=\\\"&downloadactionsWindow.title;\\\"\\n-        width=\\\"&window.width;\\\" height=\\\"&window.height;\\\" persist=\\\"width height screenX screenY\\\">\\n-\\n-  <script type=\\\"application/x-javascript\\\" src=\\\"chrome://mozapps/content/preferences/actionsshared.js\\\"/>\\n-  <script type=\\\"application/x-javascript\\\" src=\\\"chrome://browser/content/preferences/downloadactions.js\\\"/>\\n-\\n-  <stringbundle id=\\\"bundlePreferences\\\" src=\\\"chrome://browser/locale/preferences/preferences.properties\\\"/>\\n-\\n-  <keyset>\\n-    <key key=\\\"&windowClose.key;\\\" modifiers=\\\"accel\\\" oncommand=\\\"window.close();\\\"/>\\n-    <key key=\\\"&focusSearch1.key;\\\" modifiers=\\\"accel\\\" oncommand=\\\"gDownloadActionsWindow.focusFilterBox();\\\"/>\\n-    <key key=\\\"&focusSearch2.key;\\\" modifiers=\\\"accel\\\" oncommand=\\\"gDownloadActionsWindow.focusFilterBox();\\\"/>\\n-  </keyset>\\n-           \\n-  <vbox flex=\\\"1\\\" class=\\\"contentPane\\\">\\n-    <hbox align=\\\"center\\\">\\n-      <label accesskey=\\\"&filter.accesskey;\\\" control=\\\"filter\\\">&filter.label;</label>\\n-      <textbox id=\\\"filter\\\" flex=\\\"1\\\" oninput=\\\"gDownloadActionsWindow.onFilterInput();\\\" \\n-              onkeypress=\\\"gDownloadActionsWindow.onFilterKeyPress(event);\\\"/>\\n-      <button id=\\\"clearFilter\\\" icon=\\\"clear\\\" label=\\\"&clear.label;\\\" accesskey=\\\"&clear.accesskey;\\\" \\n-              oncommand=\\\"gDownloadActionsWindow.clearFilter();\\\" disabled=\\\"true\\\"/>\\n-    </hbox>\\n-    <separator class=\\\"thin\\\"/>\\n-    <label id=\\\"actionsIntro\\\" control=\\\"fileHandlersList\\\">\\n-      &fileTypesDescription.label;\\n-    </label>\\n-    <separator class=\\\"thin\\\"/>\\n-    <tree id=\\\"fileHandlersList\\\" flex=\\\"1\\\"\\n-          lastSelected=\\\"0\\\" persist=\\\"lastSelected\\\"\\n-          onselect=\\\"gDownloadActionsWindow.onSelectionChanged();\\\"\\n-          ondblclick=\\\"gDownloadActionsWindow.editFileHandler();\\\">\\n-      <treechildren id=\\\"extensionChildren\\\"/>\\n-      <treecols>\\n-        <treecol id=\\\"fileExtension\\\" ignoreincolumnpicker=\\\"true\\\"\\n-                  class=\\\"sortDirectionIndicator\\\" persist=\\\"width\\\"\\n-                  label=\\\"&fileExtensionColumn.label;\\\" accesskey=\\\"&fileExtensionColumn.accesskey;\\\"\\n-                  onclick=\\\"gDownloadActionsWindow.sort('extension');\\\"/>\\n-        <treecol id=\\\"fileType\\\" flex=\\\"1\\\"\\n-                  class=\\\"sortDirectionIndicator\\\" persist=\\\"width\\\"\\n-                  label=\\\"&fileTypeColumn.label;\\\" accesskey=\\\"&fileTypeColumn.accesskey;\\\"\\n-                  onclick=\\\"gDownloadActionsWindow.sort('typeName');\\\"/>\\n-        <splitter class=\\\"tree-splitter\\\" />\\n-        <treecol id=\\\"fileMIMEType\\\" flex=\\\"1\\\" hidden=\\\"true\\\"\\n-                  class=\\\"sortDirectionIndicator\\\" persist=\\\"width\\\"\\n-                  label=\\\"&fileMIMETypeColumn.label;\\\" accesskey=\\\"&fileMIMETypeColumn.accesskey;\\\"\\n-                  onclick=\\\"gDownloadActionsWindow.sort('type');\\\"/>\\n-        <splitter class=\\\"tree-splitter\\\" />\\n-        <treecol id=\\\"fileHandler\\\" flex=\\\"1\\\"\\n-                  class=\\\"sortDirectionIndicator\\\" persist=\\\"width\\\"\\n-                  label=\\\"&fileHandlerColumn.label;\\\" accesskey=\\\"&fileHandlerColumn.accesskey;\\\"\\n-                  onclick=\\\"gDownloadActionsWindow.sort('action');\\\"/>                \\n-        <splitter class=\\\"tree-splitter\\\" />\\n-      </treecols>\\n-    </tree>\\n-  </vbox>\\n-  <separator class=\\\"thin\\\"/>\\n-  <hbox>\\n-    <hbox flex=\\\"1\\\" class=\\\"actionButtons\\\">\\n-      <button id=\\\"removeFileHandler\\\" icon=\\\"remove\\\"\\n-              label=\\\"&remove.label;\\\" accesskey=\\\"&remove.accesskey;\\\"\\n-              oncommand=\\\"gDownloadActionsWindow.removeFileHandler();\\\"/>\\n-      <button id=\\\"editFileHandler\\\"\\n-              label=\\\"&edit.label;\\\" accesskey=\\\"&edit.accesskey;\\\"\\n-              oncommand=\\\"gDownloadActionsWindow.editFileHandler();\\\"/>\\n-      <spacer flex=\\\"1\\\"/>\\n-#ifndef XP_MACOSX\\n-      <button oncommand=\\\"close();\\\" icon=\\\"close\\\"\\n-              label=\\\"&button.close.label;\\\" accesskey=\\\"&button.close.accesskey;\\\"/>\\n-#endif\\n-    </hbox>\\n-    <resizer dir=\\\"bottomright\\\"/>\\n-  </hbox>\\n-</window>\\n-\\ndiff --git a/browser/components/preferences/feeds.js b/browser/components/preferences/feeds.js\\ndeleted file mode 100644\\nindex 5e419b4..0000000\\n--- a/browser/components/preferences/feeds.js\\n+++ /dev/null\\n@@ -1,383 +0,0 @@\\n-# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\\n-# ***** BEGIN LICENSE BLOCK *****\\n-# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n-#\\n-# The contents of this file are subject to the Mozilla Public License Version\\n-# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n-# the License. You may obtain a copy of the License at\\n-# http://www.mozilla.org/MPL/\\n-#\\n-# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n-# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n-# for the specific language governing rights and limitations under the\\n-# License.\\n-#\\n-# The Original Code is the Firefox Preferences System.\\n-#\\n-# The Initial Developer of the Original Code is\\n-# Jeff Walden <jwalden+code@mit.edu>.\\n-# Portions created by the Initial Developer are Copyright (C) 2006\\n-# the Initial Developer. All Rights Reserved.\\n-#\\n-# Contributor(s):\\n-#   Asaf Romano <mozilla.mano@sent.com>\\n-#\\n-# Alternatively, the contents of this file may be used under the terms of\\n-# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n-# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n-# in which case the provisions of the GPL or the LGPL are applicable instead\\n-# of those above. If you wish to allow use of your version of this file only\\n-# under the terms of either the GPL or the LGPL, and not to allow others to\\n-# use your version of this file under the terms of the MPL, indicate your\\n-# decision by deleting the provisions above and replace them with the notice\\n-# and other provisions required by the GPL or the LGPL. If you do not delete\\n-# the provisions above, a recipient may use your version of this file under\\n-# the terms of any one of the MPL, the GPL or the LGPL.\\n-#\\n-# ***** END LICENSE BLOCK *****\\n-\\n-#ifndef XP_MACOSX\\n-var Cc = Components.classes;\\n-var Ci = Components.interfaces;\\n-var Cr = Components.results;\\n-var TYPE_MAYBE_FEED = \\\"application/vnd.mozilla.maybe.feed\\\";\\n-const kXULNS = \\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\";\\n-#endif\\n-\\n-/*\\n- * Preferences:\\n- *\\n- * browser.feeds.handler\\n- * - \\\"bookmarks\\\", \\\"reader\\\" (clarified further using the .default preference),\\n- *   or \\\"ask\\\" -- indicates the default handler being used to process feeds\\n- *\\n- * browser.feeds.handler.default\\n- * - \\\"bookmarks\\\", \\\"client\\\" or \\\"web\\\" -- indicates the chosen feed reader used\\n- *   to display feeds, either transiently (i.e., when the \\\"use as default\\\"\\n- *   checkbox is unchecked, corresponds to when browser.feeds.handler==\\\"ask\\\")\\n- *   or more permanently (i.e., the item displayed in the dropdown in Feeds\\n- *   preferences)\\n- *\\n- * browser.feeds.handler.webservice\\n- * - the URL of the currently selected web service used to read feeds\\n- *\\n- * browser.feeds.handlers.application\\n- * - nsILocalFile, stores the current client-side feed reading app if one has\\n- *   been chosen\\n- */\\n-   \\n-const PREF_SELECTED_APP    = \\\"browser.feeds.handlers.application\\\";\\n-const PREF_SELECTED_WEB    = \\\"browser.feeds.handlers.webservice\\\";\\n-const PREF_SELECTED_ACTION = \\\"browser.feeds.handler\\\";\\n-const PREF_SELECTED_READER = \\\"browser.feeds.handler.default\\\";\\n-\\n-var gFeedsPane = {\\n-  element: function(aID) {\\n-    return document.getElementById(aID);\\n-  },\\n-\\n-  /* ........ QueryInterface .............. */\\n-  QueryInterface: function(aIID) {\\n-    if (aIID.equals(Ci.nsISupports) ||\\n-        aIID.equals(Ci.nsIObserver) ||\\n-        aIID.equals(Ci.nsIDOMEventListener))\\n-      return this;\\n-      \\n-    throw Cr.NS_ERROR_NO_INTERFACE;\\n-  },\\n-\\n-  /**\\n-   * See nsIObserver\\n-   */\\n-  observe: function(aSubject, aTopic, aData) {\\n-    if (aTopic != \\\"nsPref:changed\\\" || aData != PREF_SELECTED_WEB)\\n-      return;\\n-\\n-    if (this.element(PREF_SELECTED_ACTION).value == \\\"reader\\\") {\\n-      var wccr = \\n-        Cc[\\\"@mozilla.org/embeddor.implemented/web-content-handler-registrar;1\\\"].\\n-        getService(Ci.nsIWebContentConverterService);\\n-      var handlerURL = this.element(PREF_SELECTED_WEB).valueFromPreferences;\\n-      var handler =\\n-        wccr.getWebContentHandlerByURI(TYPE_MAYBE_FEED, handlerURL);\\n-      if (handler)\\n-        wccr.setAutoHandler(TYPE_MAYBE_FEED, handler);\\n-    }\\n-  },\\n-\\n-  /**\\n-   * See nsIDOMEventListener\\n-   */\\n-  handleEvent: function(aEvent) {\\n-    if (aEvent.type == \\\"unload\\\") {\\n-      var prefBranch = Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n-        getService(Ci.nsIPrefBranch2);\\n-      prefBranch.removeObserver(PREF_SELECTED_WEB, this);\\n-      window.removeEventListener(\\\"unload\\\", this, false);\\n-    }\\n-  },\\n-\\n-  /**\\n-   * Initializes this.\\n-   */\\n-  init: function () {\\n-    var _delayedPaneLoad = function(self) {\\n-      self._initFeedReaders();\\n-      self.updateSelectedReader();\\n-    }\\n-    setTimeout(_delayedPaneLoad, 0, this);\\n-\\n-    // For web readers, we need to call setAutoHandler if the\\n-    // preview page should be skipped (i.e. PREF_SELECTED_ACTION=\\\"reader\\\")\\n-    // To do so, we've to add a pref-observer in order to be notified on\\n-    // actual pref-changes (i.e. not on pref changes which may not take\\n-    // affect when the prefwindow is closed)\\n-    var prefBranch = Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n-      getService(Ci.nsIPrefBranch2);\\n-\\n-    prefBranch.addObserver(PREF_SELECTED_WEB, this, false);\\n-    window.addEventListener(\\\"unload\\\", this, false);\\n-  },\\n-\\n-  /**\\n-   * Populates the UI list of available feed readers.\\n-   */\\n-  _initFeedReaders: function() {\\n-    this.updateSelectedApplicationInfo();\\n-\\n-    var readersList = this.element(\\\"readers\\\");\\n-\\n-    // List the system default feed reader if it is\\n-    // not the last-selected application already\\n-    try {\\n-      var systemDefaultReader = Cc[\\\"@mozilla.org/browser/shell-service;1\\\"].\\n-                                getService(Ci.nsIShellService).\\n-                                defaultFeedReader;\\n-\\n-      var defaultSystemReaderFilefield = this.element(\\\"defaultSystemReaderFilefield\\\");\\n-      defaultSystemReaderFilefield.file = systemDefaultReader;\\n-      var selectedAppFile = this.element(\\\"selectedAppFilefield\\\").file;\\n-      if (!selectedAppFile || defaultSystemReaderFilefield.file.path !=\\n-          selectedAppFile.path) {\\n-        var defaultReaderItem = document.createElementNS(kXULNS, \\\"listitem\\\");\\n-        defaultReaderItem.id = \\\"defaultSystemReaderListitem\\\";\\n-        defaultReaderItem.className = \\\"listitem-iconic\\\";\\n-        defaultReaderItem.setAttribute(\\\"label\\\", defaultSystemReaderFilefield.label);\\n-        defaultReaderItem.setAttribute(\\\"image\\\", defaultSystemReaderFilefield.image);\\n-        readersList.appendChild(defaultReaderItem);\\n-      }\\n-    }\\n-    catch(ex) { /* no default reader */ }\\n-\\n-    // List of web handlers\\n-    var wccr = \\n-        Cc[\\\"@mozilla.org/embeddor.implemented/web-content-handler-registrar;1\\\"].\\n-        getService(Ci.nsIWebContentConverterService);\\n-    var handlers = wccr.getContentHandlers(TYPE_MAYBE_FEED, {});\\n-    if (handlers.length == 0)\\n-      return;\\n-\\n-    var ios = \\n-        Cc[\\\"@mozilla.org/network/io-service;1\\\"].\\n-        getService(Ci.nsIIOService);\\n-    for (var i = 0; i < handlers.length; ++i) {\\n-      var row = document.createElementNS(kXULNS, \\\"listitem\\\");\\n-      row.className = \\\"listitem-iconic\\\";\\n-      row.setAttribute(\\\"label\\\", handlers[i].name);\\n-      row.setAttribute(\\\"webhandlerurl\\\", handlers[i].uri);\\n-\\n-      var uri = ios.newURI(handlers[i].uri, null, null);\\n-      if (/^https?/.test(uri.scheme))\\n-        row.setAttribute(\\\"image\\\", uri.prePath + \\\"/favicon.ico\\\");\\n-\\n-      readersList.appendChild(row);\\n-    }\\n-  },\\n-\\n-  /**\\n-   * Updates the label and image of the client feed reader listitem\\n-   */\\n-  updateSelectedApplicationInfo: function() {\\n-    var appItemCell = this.element(\\\"selectedApplicationCell\\\");\\n-    var selectedAppFilefield = this.element(\\\"selectedAppFilefield\\\");\\n-    selectedAppFilefield.file = this.element(PREF_SELECTED_APP).value;\\n-    if (selectedAppFilefield.file) {\\n-      appItemCell.setAttribute(\\\"label\\\", selectedAppFilefield.label);\\n-      appItemCell.setAttribute(\\\"image\\\", selectedAppFilefield.image);\\n-    }\\n-    else {\\n-      var noAppString =\\n-        this.element(\\\"stringbundle\\\").getString(\\\"noApplicationSelected\\\");\\n-      appItemCell.setAttribute(\\\"label\\\", noAppString);\\n-      appItemCell.setAttribute(\\\"image\\\", \\\"\\\");\\n-    }\\n-  },\\n-\\n-  /**\\n-   * Selects a item in the list without triggering a preference change.\\n-   *\\n-   * @param aItem\\n-   *        the listitem to be selected\\n-   */\\n-  _silentSelectReader: function(aItem) {\\n-    var readers = this.element(\\\"readers\\\");\\n-    readers.setAttribute(\\\"suppressonselect\\\", \\\"true\\\");\\n-    readers.selectItem(aItem);\\n-    readers.removeAttribute(\\\"suppressonselect\\\");\\n-  },\\n-\\n-  /**\\n-   * Helper for updateSelectedReader. Syncs the selected item in the readers\\n-   * list with value stored invalues stored in PREF_SELECTED_WEB\\n-   */\\n-  _updateSelectedWebHandlerItem: function() {\\n-    // We should select the new web handler only if the default handler\\n-    // is \\\"web\\\"\\n-    var readers = this.element(\\\"readers\\\")\\n-    var readerElts =\\n-        readers.getElementsByAttribute(\\\"webhandlerurl\\\",\\n-                                       this.element(PREF_SELECTED_WEB).value);\\n-\\n-    // XXXmano: handle the addition of a new web handler\\n-    if (readerElts.length > 0)\\n-      this._silentSelectReader(readerElts[0]);\\n-  },\\n-\\n-  /**\\n-   * Syncs the selected item in the readers list with the values stored in\\n-   * preferences.\\n-   */\\n-  updateSelectedReader: function() {\\n-    var defaultReader = this.element(PREF_SELECTED_READER).value ||\\n-                        \\\"bookmarks\\\";\\n-    switch (defaultReader) {\\n-      case \\\"bookmarks\\\":\\n-        this._silentSelectReader(this.element(\\\"liveBookmarksListItem\\\"));\\n-        break;\\n-      case \\\"client\\\":\\n-#ifdef XP_WIN\\n-        // Keep the system default feed reader item selected if the\\n-        // last-selected application is the the system default feed reader\\n-        // and if it is already selected\\n-        var currentItem = this.element(\\\"readers\\\").currentItem;\\n-        if (currentItem && currentItem.id == \\\"defaultSystemReaderListitem\\\") {\\n-          var defaultSystemReaderFile = this.element(\\\"defaultSystemReaderFilefield\\\").file;\\n-          var selectedAppFile = this.element(\\\"selectedAppFilefield\\\").file;\\n-          if (selectedAppFile && defaultSystemReaderFile &&\\n-              defaultSystemReaderFile.path == selectedAppFile.path)\\n-            break;\\n-        }\\n-#endif\\n-\\n-        this._silentSelectReader(this.element(\\\"selectedApplicationListitem\\\"));\\n-        break;\\n-      case \\\"web\\\":\\n-        this._updateSelectedWebHandlerItem();\\n-        break;\\n-    }\\n-  },\\n-\\n-  /**\\n-   * Displays a prompt from which the user may choose an a (client) feed reader.\\n-   */\\n-  chooseClientApp: function () {\\n-    var fp = Cc[\\\"@mozilla.org/filepicker;1\\\"]\\n-               .createInstance(Ci.nsIFilePicker);\\n-    fp.init(window, document.title, Ci.nsIFilePicker.modeOpen);\\n-    fp.appendFilters(Ci.nsIFilePicker.filterApps);\\n-    if (fp.show() == Ci.nsIFilePicker.returnOK && fp.file) {\\n-      // XXXben - we need to compare this with the running instance executable\\n-      //          just don't know how to do that via script...\\n-      // XXXmano TBD: can probably add this to nsIShellService\\n-#ifdef XP_WIN\\n-#expand       if (fp.file.leafName == \\\"__MOZ_APP_NAME__.exe\\\")\\n-#else\\n-#ifdef XP_MACOSX\\n-#expand       if (fp.file.leafName == \\\"__MOZ_APP_DISPLAYNAME__.app\\\")\\n-#else\\n-#expand       if (fp.file.leafName == \\\"__MOZ_APP_NAME__-bin\\\")\\n-#endif\\n-#endif\\n-        return;\\n-\\n-      this.element(PREF_SELECTED_APP).value = fp.file;\\n-      this.element(PREF_SELECTED_READER).value = \\\"client\\\";\\n-    }\\n-  },\\n-\\n-  /**\\n-   * Disables the readers list if \\\"Show preview...\\\" is selected, enables\\n-   * it otherwise.\\n-   */\\n-  onReadingMethodSelect: function() {\\n-    var disableList = this.element(\\\"readingMethod\\\").value == \\\"ask\\\";\\n-    this.element(\\\"readers\\\").disabled = disableList;\\n-    this.element(\\\"chooseClientApp\\\").disabled = disableList;\\n-  },\\n-\\n-  /**\\n-   * Maps the value of PREF_SELECTED_ACTION to the parallel\\n-   * value in the radiogroup\\n-   */\\n-  onReadingMethodSyncFromPreference: function() {\\n-    var pref = this.element(PREF_SELECTED_ACTION);\\n-    var newVal = pref.instantApply ? pref.valueFromPreferences : pref.value;\\n-    if (newVal != \\\"ask\\\")\\n-      return \\\"reader\\\";\\n-\\n-    return \\\"ask\\\";\\n-  },\\n-\\n-  /**\\n-   * Returns the value to be used for PREF_SELECTED_ACTION\\n-   * according to the current UI state.\\n-   */\\n-  onReadingMethodSyncToPreference: function() {\\n-    var readers = this.element(\\\"readers\\\");\\n-\\n-    // A reader must be choosed in order to skip the preview page\\n-    if (this.element(\\\"readingMethod\\\").value == \\\"ask\\\" ||\\n-        !readers.currentItem)\\n-      return \\\"ask\\\";\\n-\\n-    if (readers.currentItem.id == \\\"liveBookmarksListItem\\\")\\n-      return \\\"bookmarks\\\";\\n-\\n-    return \\\"reader\\\";\\n-  },\\n-\\n-  /**\\n-   * Syncs PREF_SELECTED_READER with the selected item in the readers list\\n-   * Also updates PREF_SELECTED_ACTION if necessary\\n-   */\\n-  writeSelectedFeedReader: function() {\\n-    // Force update of the action pref. This is needed for the case in which\\n-    // the user flipped from a reader to live bookmarks or vice-versa\\n-    this.element(PREF_SELECTED_ACTION).value =\\n-      this.onReadingMethodSyncToPreference();\\n-\\n-    var currentItem = this.element(\\\"readers\\\").currentItem;\\n-    if (currentItem.hasAttribute(\\\"webhandlerurl\\\")) {\\n-      this.element(PREF_SELECTED_WEB).value =\\n-        currentItem.getAttribute(\\\"webhandlerurl\\\");\\n-      this.element(PREF_SELECTED_READER).value = \\\"web\\\";\\n-    }\\n-    else {\\n-      switch (currentItem.id) {\\n-        case \\\"liveBookmarksListItem\\\":\\n-          this.element(PREF_SELECTED_READER).value = \\\"bookmarks\\\";\\n-          break;\\n-        case \\\"selectedApplicationListitem\\\":\\n-          // PREF_SELECTED_APP is saved in chooseClientApp\\n-          this.element(PREF_SELECTED_READER).value = \\\"client\\\";\\n-          break;\\n-#ifdef XP_WIN\\n-        case \\\"defaultSystemReaderListitem\\\":\\n-          this.element(PREF_SELECTED_APP).value = this.element(\\\"defaultSystemReaderFilefield\\\").file;\\n-          this.element(PREF_SELECTED_READER).value = \\\"client\\\";\\n-          break;\\n-#endif\\n-      }\\n-    }\\n-  }\\n-};\\ndiff --git a/browser/components/preferences/feeds.xul b/browser/components/preferences/feeds.xul\\ndeleted file mode 100644\\nindex 82900ed..0000000\\n--- a/browser/components/preferences/feeds.xul\\n+++ /dev/null\\n@@ -1,121 +0,0 @@\\n-<?xml version=\\\"1.0\\\"?>\\n-\\n-# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\\n-# ***** BEGIN LICENSE BLOCK *****\\n-# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n-#\\n-# The contents of this file are subject to the Mozilla Public License Version\\n-# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n-# the License. You may obtain a copy of the License at\\n-# http://www.mozilla.org/MPL/\\n-#\\n-# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n-# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n-# for the specific language governing rights and limitations under the\\n-# License.\\n-#\\n-# The Original Code is the Firefox Preferences System.\\n-#\\n-# The Initial Developer of the Original Code is\\n-# Jeff Walden <jwalden+code@mit.edu>.\\n-# Portions created by the Initial Developer are Copyright (C) 2006\\n-# the Initial Developer. All Rights Reserved.\\n-#\\n-# Contributor(s):\\n-#   Asaf Romano <mozilla.mano@sent.com>\\n-#\\n-# Alternatively, the contents of this file may be used under the terms of\\n-# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n-# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n-# in which case the provisions of the GPL or the LGPL are applicable instead\\n-# of those above. If you wish to allow use of your version of this file only\\n-# under the terms of either the GPL or the LGPL, and not to allow others to\\n-# use your version of this file under the terms of the MPL, indicate your\\n-# decision by deleting the provisions above and replace them with the notice\\n-# and other provisions required by the GPL or the LGPL. If you do not delete\\n-# the provisions above, a recipient may use your version of this file under\\n-# the terms of any one of the MPL, the GPL or the LGPL.\\n-#\\n-# ***** END LICENSE BLOCK *****\\n-\\n-<!DOCTYPE overlay [\\n-  <!ENTITY % feedsDTD SYSTEM \\\"chrome://browser/locale/preferences/feeds.dtd\\\">\\n-  %feedsDTD;\\n-]>\\n-\\n-<overlay id=\\\"FeedsPaneOverlay\\\"\\n-         xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\"\\n-         xmlns:aaa=\\\"http://www.w3.org/2005/07/aaa\\\">\\n-\\n-  <prefpane id=\\\"paneFeeds\\\"\\n-            onpaneload=\\\"gFeedsPane.init();\\\"\\n-            helpTopic=\\\"prefs-feeds\\\"\\n-            helpURI=\\\"chrome://browser/locale/help/help.rdf\\\">\\n-\\n-    <preferences id=\\\"feedsPreferences\\\">\\n-      <preference id=\\\"browser.feeds.handler\\\"\\n-                  name=\\\"browser.feeds.handler\\\"\\n-                  type=\\\"string\\\"/>\\n-      <preference id=\\\"browser.feeds.handler.default\\\"\\n-                  name=\\\"browser.feeds.handler.default\\\"\\n-                  onchange=\\\"gFeedsPane.updateSelectedReader();\\\"\\n-                  type=\\\"string\\\"/>\\n-      <preference id=\\\"browser.feeds.handlers.application\\\"\\n-                  name=\\\"browser.feeds.handlers.application\\\"\\n-                  onchange=\\\"gFeedsPane.updateSelectedApplicationInfo();\\\"\\n-                  type=\\\"file\\\"/>\\n-      <preference id=\\\"browser.feeds.handlers.webservice\\\"\\n-                  name=\\\"browser.feeds.handlers.webservice\\\"\\n-                  onchange=\\\"gFeedsPane.updateSelectedReader();\\\"\\n-                  type=\\\"string\\\"/>\\n-    </preferences>\\n-    \\n-    <script type=\\\"application/x-javascript\\\" src=\\\"chrome://browser/content/preferences/feeds.js\\\"/>\\n-\\n-    <filefield class=\\\"indent\\\" id=\\\"selectedAppFilefield\\\" disabled=\\\"true\\\" hidden=\\\"true\\\"/>\\n-#ifdef XP_WIN\\n-    <filefield class=\\\"indent\\\" id=\\\"defaultSystemReaderFilefield\\\" disabled=\\\"true\\\" hidden=\\\"true\\\"/>\\n-#endif\\n-\\n-    <stringbundle id=\\\"stringbundle\\\" src=\\\"chrome://browser/locale/preferences/feeds.properties\\\"/>\\n-\\n-    <label value=\\\"&feedClick.label;\\\"/>\\n-    <radiogroup id=\\\"readingMethod\\\"\\n-                class=\\\"indent\\\"\\n-                preference=\\\"browser.feeds.handler\\\"\\n-                onsyncfrompreference=\\\"return gFeedsPane.onReadingMethodSyncFromPreference();\\\"\\n-                onsynctopreference=\\\"return gFeedsPane.onReadingMethodSyncToPreference();\\\"\\n-                onselect=\\\"gFeedsPane.onReadingMethodSelect();\\\">\\n-      <radio value=\\\"ask\\\"\\n-             label=\\\"&showPreview.label;\\\"\\n-             accesskey=\\\"&showPreview.accesskey;\\\"/>\\n-      <radio value=\\\"reader\\\" id=\\\"useReader\\\"\\n-             label=\\\"&subscribeUsing.label;\\\"\\n-             accesskey=\\\"&subscribeUsing.accesskey;\\\"\\n-             aaa:labelledby=\\\"useReader readers\\\"/>\\n-      <hbox id=\\\"readerContainer\\\" class=\\\"indent\\\" flex=\\\"1\\\">\\n-        <listbox id=\\\"readers\\\" rows=\\\"5\\\" flex=\\\"1\\\"\\n-                 aaa:labelledby=\\\"useReader\\\"\\n-                 onselect=\\\"gFeedsPane.writeSelectedFeedReader(); event.stopPropagation();\\\">\\n-          <listcols>\\n-            <listcol flex=\\\"1\\\"/>\\n-            <listcol/>\\n-          </listcols>\\n-          <listitem id=\\\"liveBookmarksListItem\\\"\\n-                    label=\\\"&liveBookmarks.label;\\\"\\n-                    class=\\\"listitem-iconic\\\"\\n-                    image=\\\"chrome://browser/skin/page-livemarks.png\\\"/>\\n-          <listitem id=\\\"selectedApplicationListitem\\\" allowevents=\\\"true\\\">\\n-            <listcell id=\\\"selectedApplicationCell\\\" class=\\\"listcell-iconic\\\"/>\\n-            <listcell id=\\\"chooseClientAppCell\\\">\\n-              <button id=\\\"chooseClientApp\\\"\\n-                      label=\\\"&chooseApplication.label;\\\"\\n-                      accesskey=\\\"&chooseApplication.accesskey;\\\"\\n-                      oncommand=\\\"gFeedsPane.chooseClientApp();\\\"/>\\n-            </listcell>\\n-          </listitem>\\n-        </listbox>\\n-      </hbox>\\n-    </radiogroup>\\n-  </prefpane>\\n-</overlay>\\ndiff --git a/browser/components/preferences/handlers.css b/browser/components/preferences/handlers.css\\nnew file mode 100755\\nindex 0000000..37a3f23\\n--- /dev/null\\n+++ b/browser/components/preferences/handlers.css\\n@@ -0,0 +1,66 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is the Mozilla browser.\\n+ *\\n+ * The Initial Developer of the Original Code is Mozilla.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *   Myk Melez <myk@mozilla.org>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+richlistitem {\\n+  -moz-binding: url(\\\"chrome://browser/content/preferences/handlers.xml#handler\\\");\\n+}\\n+\\n+richlistitem[selected=\\\"true\\\"] {\\n+  -moz-binding: url(\\\"chrome://browser/content/preferences/handlers.xml#handler-selected\\\");\\n+}\\n+\\n+/**\\n+ * Somewhat line up the actions menu with action labels above and below it.\\n+ * FIXME: to really line this up, equalize the distance from the left side\\n+ * of the action box to the left side of the icon for both the menu and the\\n+ * non-menu versions of the action box.  Also make sure the labels are the\\n+ * same distance away from the icons.\\n+ */\\n+.actionsMenu {\\n+  margin-left: 0;\\n+}\\n+\\n+/**\\n+ * Make the icons appear and pad them a bit.\\n+ * Note: we display the icon box for every item whether or not it has an icon\\n+ * so the labels of all the items align vertically.\\n+ */\\n+.actionsMenu > menupopup > menuitem > .menu-iconic-left {\\n+  display: -moz-box;\\n+  min-width: 16px;\\n+  -moz-padding-start: 2px;\\n+  -moz-padding-end: 2px;\\n+}\\ndiff --git a/browser/components/preferences/handlers.xml b/browser/components/preferences/handlers.xml\\nnew file mode 100755\\nindex 0000000..f25c4b2\\n--- /dev/null\\n+++ b/browser/components/preferences/handlers.xml\\n@@ -0,0 +1,100 @@\\n+<?xml version=\\\"1.0\\\"?>\\n+\\n+<!-- ***** BEGIN LICENSE BLOCK *****\\n+   - Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+   -\\n+   - The contents of this file are subject to the Mozilla Public License Version\\n+   - 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+   - the License. You may obtain a copy of the License at\\n+   - http://www.mozilla.org/MPL/\\n+   -\\n+   - Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+   - for the specific language governing rights and limitations under the\\n+   - License.\\n+   -\\n+   - The Original Code is the Mozilla browser.\\n+   -\\n+   - The Initial Developer of the Original Code is Mozilla.\\n+   - Portions created by the Initial Developer are Copyright (C) 2007\\n+   - the Initial Developer. All Rights Reserved.\\n+   -\\n+   - Contributor(s):\\n+   -   Myk Melez <myk@mozilla.org>\\n+   -\\n+   - Alternatively, the contents of this file may be used under the terms of\\n+   - either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+   - the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+   - in which case the provisions of the GPL or the LGPL are applicable instead\\n+   - of those above. If you wish to allow use of your version of this file only\\n+   - under the terms of either the GPL or the LGPL, and not to allow others to\\n+   - use your version of this file under the terms of the MPL, indicate your\\n+   - decision by deleting the provisions above and replace them with the notice\\n+   - and other provisions required by the LGPL or the GPL. If you do not delete\\n+   - the provisions above, a recipient may use your version of this file under\\n+   - the terms of any one of the MPL, the GPL or the LGPL.\\n+   -\\n+   - ***** END LICENSE BLOCK ***** -->\\n+\\n+<!DOCTYPE overlay [\\n+  <!ENTITY % brandDTD SYSTEM \\\"chrome://branding/locale/brand.dtd\\\">\\n+  <!ENTITY % applicationsDTD SYSTEM \\\"chrome://browser/locale/preferences/applications.dtd\\\">\\n+  %brandDTD;\\n+  %applicationsDTD;\\n+]>\\n+\\n+<bindings id=\\\"handlerBindings\\\"\\n+          xmlns=\\\"http://www.mozilla.org/xbl\\\"\\n+          xmlns:xul=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\"\\n+          xmlns:xbl=\\\"http://www.mozilla.org/xbl\\\">\\n+\\n+  <binding id=\\\"handler-base\\\" extends=\\\"chrome://global/content/bindings/richlistbox.xml#richlistitem\\\">\\n+    <implementation>\\n+      <property name=\\\"type\\\" readonly=\\\"true\\\">\\n+        <getter>\\n+          return this.getAttribute(\\\"type\\\");\\n+        </getter>\\n+      </property>\\n+    </implementation>\\n+  </binding>\\n+\\n+  <binding id=\\\"handler\\\" extends=\\\"chrome://browser/content/preferences/handlers.xml#handler-base\\\">\\n+    <content>\\n+      <xul:hbox flex=\\\"1\\\" equalsize=\\\"always\\\">\\n+        <xul:hbox flex=\\\"1\\\" align=\\\"center\\\">\\n+          <xul:image xbl:inherits=\\\"src=typeIcon\\\" height=\\\"16\\\" width=\\\"16\\\"/>\\n+          <xul:label flex=\\\"1\\\" crop=\\\"end\\\" xbl:inherits=\\\"value=typeDescription\\\"/>\\n+        </xul:hbox>\\n+        <xul:hbox flex=\\\"1\\\" align=\\\"center\\\">\\n+          <xul:image xbl:inherits=\\\"src=actionIcon\\\" height=\\\"16\\\" width=\\\"16\\\"/>\\n+          <xul:label flex=\\\"1\\\" crop=\\\"end\\\" xbl:inherits=\\\"value=actionDescription\\\"/>\\n+        </xul:hbox>\\n+      </xul:hbox>\\n+    </content>\\n+  </binding>\\n+\\n+  <binding id=\\\"handler-selected\\\" extends=\\\"chrome://browser/content/preferences/handlers.xml#handler-base\\\">\\n+    <content>\\n+      <xul:hbox flex=\\\"1\\\" equalsize=\\\"always\\\">\\n+        <xul:hbox flex=\\\"1\\\" align=\\\"center\\\">\\n+          <xul:image xbl:inherits=\\\"src=typeIcon\\\" height=\\\"16\\\" width=\\\"16\\\"/>\\n+          <xul:label flex=\\\"1\\\" crop=\\\"end\\\" xbl:inherits=\\\"value=typeDescription\\\"/>\\n+        </xul:hbox>\\n+        <xul:hbox flex=\\\"1\\\">\\n+          <xul:menulist class=\\\"actionsMenu\\\" flex=\\\"1\\\" crop=\\\"end\\\" selectedIndex=\\\"1\\\"\\n+                        oncommand=\\\"gApplicationsPane.onSelectAction(event)\\\">\\n+            <xul:menupopup/>\\n+          </xul:menulist>\\n+        </xul:hbox>\\n+      </xul:hbox>\\n+    </content>\\n+\\n+    <implementation>\\n+      <constructor>\\n+        gApplicationsPane.rebuildActionsMenu();\\n+      </constructor>\\n+    </implementation>\\n+\\n+  </binding>\\n+\\n+</bindings>\\ndiff --git a/browser/components/preferences/jar.mn b/browser/components/preferences/jar.mn\\nindex 9a16598..926a473 100644\\n--- a/browser/components/preferences/jar.mn\\n+++ b/browser/components/preferences/jar.mn\\n@@ -2,8 +2,8 @@ browser.jar:\\n *   content/browser/preferences/advanced.xul\\n *   content/browser/preferences/advanced.js\\n *   content/browser/preferences/advanced-scripts.xul\\n-*   content/browser/preferences/changeaction.xul\\n-*   content/browser/preferences/changeaction.js\\n+*   content/browser/preferences/applications.xul\\n+*   content/browser/preferences/applications.js\\n *   content/browser/preferences/colors.xul\\n *   content/browser/preferences/cookies.xul\\n *   content/browser/preferences/cookies.js\\n@@ -11,13 +11,11 @@ browser.jar:\\n *   content/browser/preferences/content.js\\n *   content/browser/preferences/connection.xul\\n *   content/browser/preferences/connection.js\\n-*   content/browser/preferences/downloadactions.xul\\n-*   content/browser/preferences/downloadactions.js\\n *   content/browser/preferences/fallbackEULA.xhtml\\n-*   content/browser/preferences/feeds.xul\\n-*   content/browser/preferences/feeds.js\\n *   content/browser/preferences/fonts.xul\\n *   content/browser/preferences/fonts.js\\n+*   content/browser/preferences/handlers.xml\\n+*   content/browser/preferences/handlers.css\\n *   content/browser/preferences/languages.xul\\n *   content/browser/preferences/languages.js\\n *   content/browser/preferences/main.xul\\ndiff --git a/browser/components/preferences/preferences.xul b/browser/components/preferences/preferences.xul\\nindex a8ec6bb..f4711f7 100644\\n--- a/browser/components/preferences/preferences.xul\\n+++ b/browser/components/preferences/preferences.xul\\n@@ -43,6 +43,13 @@\\n <?xml-stylesheet href=\\\"chrome://mozapps/content/preferences/preferences.css\\\"?>\\n <?xml-stylesheet href=\\\"chrome://browser/skin/preferences/preferences.css\\\"?>\\n \\n+<!-- XXX This should be in applications.xul, but bug 393953 means putting it\\n+   - there causes the Applications pane not to work the first time you open\\n+   - the Preferences dialog in a browsing session, so we work around the problem\\n+   - by putting it here instead.\\n+   -->\\n+<?xml-stylesheet href=\\\"chrome://browser/content/preferences/handlers.css\\\"?>\\n+\\n <!DOCTYPE prefwindow [\\n <!ENTITY % brandDTD SYSTEM \\\"chrome://branding/locale/brand.dtd\\\">\\n <!ENTITY % preferencesDTD SYSTEM \\\"chrome://browser/locale/preferences/preferences.dtd\\\">\\n@@ -93,8 +100,8 @@\\n               src=\\\"chrome://browser/content/preferences/tabs.xul\\\"/>\\n     <prefpane id=\\\"paneContent\\\" label=\\\"&paneContent.title;\\\"\\n               src=\\\"chrome://browser/content/preferences/content.xul\\\"/>\\n-    <prefpane id=\\\"paneFeeds\\\" label=\\\"&paneFeeds.title;\\\"\\n-              src=\\\"chrome://browser/content/preferences/feeds.xul\\\"/>\\n+    <prefpane id=\\\"paneApplications\\\" label=\\\"&paneApplications.title;\\\"\\n+              src=\\\"chrome://browser/content/preferences/applications.xul\\\"/>\\n     <prefpane id=\\\"panePrivacy\\\" label=\\\"&panePrivacy.title;\\\"\\n               src=\\\"chrome://browser/content/preferences/privacy.xul\\\"/>\\n     <prefpane id=\\\"paneSecurity\\\" label=\\\"&paneSecurity.title;\\\"\\ndiff --git a/browser/locales/en-US/chrome/browser/preferences/applications.dtd b/browser/locales/en-US/chrome/browser/preferences/applications.dtd\\nnew file mode 100755\\nindex 0000000..dc47f4f\\n--- /dev/null\\n+++ b/browser/locales/en-US/chrome/browser/preferences/applications.dtd\\n@@ -0,0 +1,17 @@\\n+<!ENTITY  prefpane.label          \\\"Here you can configure &brandShortName; to let your favorite applications handle different types of content.\\\">\\n+<!ENTITY  filterActive.label      \\\"The following entries match your search:\\\">\\n+\\n+<!ENTITY  typeColumn.label        \\\"Content Type\\\">\\n+<!ENTITY  typeColumn.accesskey    \\\"T\\\">\\n+\\n+<!ENTITY  actionColumn.label      \\\"Application\\\">\\n+<!ENTITY  actionColumn.accesskey  \\\"A\\\">\\n+\\n+<!ENTITY  focusSearch1.key        \\\"f\\\">\\n+<!ENTITY  focusSearch2.key        \\\"k\\\">\\n+\\n+<!ENTITY  filter.label            \\\"Search:\\\">\\n+<!ENTITY  filter.accesskey        \\\"S\\\">\\n+\\n+<!ENTITY  clear.label             \\\"Clear\\\">\\n+<!ENTITY  clear.accesskey         \\\"l\\\">\\ndiff --git a/browser/locales/en-US/chrome/browser/preferences/changeaction.dtd b/browser/locales/en-US/chrome/browser/preferences/changeaction.dtd\\ndeleted file mode 100644\\nindex d5e574b..0000000\\n--- a/browser/locales/en-US/chrome/browser/preferences/changeaction.dtd\\n+++ /dev/null\\n@@ -1,23 +0,0 @@\\n-<!ENTITY  changeAction.title                  \\\"Change Action\\\">\\n-<!ENTITY window.width                         \\\"36em\\\">\\n-\\n-<!ENTITY  whenDownloading.label               \\\"When downloading files like this:\\\">\\n-\\n-<!ENTITY  openDefault.label                   \\\"Open them with the default application:\\\">\\n-<!ENTITY  openDefault.accesskey               \\\"O\\\">\\n-<!ENTITY  openApplication.label               \\\"Open them with this application:\\\">\\n-<!ENTITY  openApplication.accesskey           \\\"e\\\">\\n-<!ENTITY  changeApp.label                     \\\"Browse...\\\">\\n-<!ENTITY  changeApp.accesskey                 \\\"B\\\">\\n-<!ENTITY  saveToDisk.label                    \\\"Save them on my computer\\\">\\n-<!ENTITY  saveToDisk.accesskey                \\\"S\\\">\\n-<!ENTITY  saveToDefaultFolder.label           \\\"in the default download folder\\\">\\n-<!ENTITY  saveToDefaultFolder.accesskey       \\\"d\\\">\\n-<!ENTITY  saveToThisFolder.label              \\\"in this folder:\\\">\\n-<!ENTITY  saveToThisFolder.accesskey          \\\"h\\\">\\n-<!ENTITY  chooseFolder.label                  \\\"Browse...\\\">\\n-<!ENTITY  chooseFolder.accesskey              \\\"w\\\">\\n-<!ENTITY  saveToAskMe.label                   \\\"ask me where to save the file\\\">\\n-<!ENTITY  saveToAskMe.accesskey               \\\"a\\\">\\n-<!ENTITY  usePlugin.label                     \\\"Use this Plugin:\\\">\\n-<!ENTITY  usePlugin.accesskey                 \\\"P\\\">\\ndiff --git a/browser/locales/en-US/chrome/browser/preferences/content.dtd b/browser/locales/en-US/chrome/browser/preferences/content.dtd\\nindex fdca0f1..1a49214 100644\\n--- a/browser/locales/en-US/chrome/browser/preferences/content.dtd\\n+++ b/browser/locales/en-US/chrome/browser/preferences/content.dtd\\n@@ -29,9 +29,3 @@\\n \\n <!ENTITY  colors.label                \\\"Colors...\\\">\\n <!ENTITY  colors.accesskey            \\\"C\\\">\\n-\\n-<!ENTITY fileTypes.label              \\\"File Types\\\">\\n-\\n-<!ENTITY configureFileTypes.label     \\\"Configure how &brandShortName; handles certain types of files\\\">\\n-<!ENTITY manage.label                 \\\"Manage...\\\">\\n-<!ENTITY manage.accesskey             \\\"M\\\">\\ndiff --git a/browser/locales/en-US/chrome/browser/preferences/downloadactions.dtd b/browser/locales/en-US/chrome/browser/preferences/downloadactions.dtd\\ndeleted file mode 100644\\nindex 74738cd..0000000\\n--- a/browser/locales/en-US/chrome/browser/preferences/downloadactions.dtd\\n+++ /dev/null\\n@@ -1,32 +0,0 @@\\n-<!ENTITY  downloadactionsWindow.title         \\\"Download Actions\\\">\\n-<!ENTITY window.width                         \\\"480\\\">\\n-<!ENTITY window.height                        \\\"310\\\">\\n-\\n-<!ENTITY  fileTypesDescription.label          \\\"Automatically perform the associated Action with each of the following file types:\\\">\\n-\\n-<!ENTITY  fileHandlerColumn.label             \\\"Action\\\">\\n-<!ENTITY  fileHandlerColumn.accesskey         \\\"A\\\">\\n-<!ENTITY  fileTypeColumn.label                \\\"File Type\\\">\\n-<!ENTITY  fileTypeColumn.accesskey            \\\"T\\\">\\n-<!ENTITY  fileMIMETypeColumn.label            \\\"MIME Type\\\">\\n-<!ENTITY  fileMIMETypeColumn.accesskey        \\\"M\\\">\\n-<!ENTITY  fileExtensionColumn.label           \\\"Extension\\\">\\n-<!ENTITY  fileExtensionColumn.accesskey       \\\"E\\\">\\n-\\n-<!ENTITY  remove.label                        \\\"Remove Action\\\">\\n-<!ENTITY  remove.accesskey                    \\\"R\\\">\\n-<!ENTITY  edit.label                          \\\"Change Action...\\\">\\n-<!ENTITY  edit.accesskey                      \\\"C\\\">\\n-\\n-<!ENTITY  windowClose.key                     \\\"w\\\">\\n-<!ENTITY  focusSearch1.key                    \\\"f\\\">\\n-<!ENTITY  focusSearch2.key                    \\\"k\\\">\\n-\\n-<!ENTITY  filter.label                        \\\"Search:\\\">\\n-<!ENTITY  filter.accesskey                    \\\"S\\\">\\n-<!ENTITY  clear.label                         \\\"Clear\\\">\\n-<!ENTITY  clear.accesskey                     \\\"l\\\">\\n-\\n-<!ENTITY  button.close.label                  \\\"Close\\\">\\n-<!ENTITY  button.close.accesskey              \\\"o\\\">\\n-\\ndiff --git a/browser/locales/en-US/chrome/browser/preferences/feeds.dtd b/browser/locales/en-US/chrome/browser/preferences/feeds.dtd\\ndeleted file mode 100644\\nindex d0365a3..0000000\\n--- a/browser/locales/en-US/chrome/browser/preferences/feeds.dtd\\n+++ /dev/null\\n@@ -1,8 +0,0 @@\\n-<!ENTITY  feedClick.label             \\\"When I click on a web feed:\\\">\\n-<!ENTITY  showPreview.label           \\\"Show me a preview and ask me which Feed Reader to use\\\">\\n-<!ENTITY  showPreview.accesskey       \\\"S\\\">\\n-<!ENTITY  subscribeUsing.label        \\\"Subscribe to the feed using:\\\">\\n-<!ENTITY  subscribeUsing.accesskey    \\\"u\\\">\\n-<!ENTITY  liveBookmarks.label         \\\"Live Bookmarks\\\">\\n-<!ENTITY  chooseApplication.label     \\\"Choose Application...\\\">\\n-<!ENTITY  chooseApplication.accesskey     \\\"C\\\">\\ndiff --git a/browser/locales/en-US/chrome/browser/preferences/feeds.properties b/browser/locales/en-US/chrome/browser/preferences/feeds.properties\\ndeleted file mode 100644\\nindex 70e1ade..0000000\\n--- a/browser/locales/en-US/chrome/browser/preferences/feeds.properties\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-noApplicationSelected=No Application Selected\\ndiff --git a/browser/locales/en-US/chrome/browser/preferences/preferences.dtd b/browser/locales/en-US/chrome/browser/preferences/preferences.dtd\\nindex a2cab95..dfde7f1 100644\\n--- a/browser/locales/en-US/chrome/browser/preferences/preferences.dtd\\n+++ b/browser/locales/en-US/chrome/browser/preferences/preferences.dtd\\n@@ -10,7 +10,7 @@\\n <!ENTITY  paneMain.title          \\\"Main\\\">\\n <!ENTITY  paneTabs.title          \\\"Tabs\\\">\\n <!ENTITY  paneContent.title       \\\"Content\\\">\\n-<!ENTITY  paneFeeds.title         \\\"Feeds\\\">\\n+<!ENTITY  paneApplications.title  \\\"Applications\\\">\\n <!ENTITY  panePrivacy.title       \\\"Privacy\\\">\\n <!ENTITY  paneSecurity.title      \\\"Security\\\">\\n <!ENTITY  paneAdvanced.title      \\\"Advanced\\\">\\ndiff --git a/browser/locales/en-US/chrome/browser/preferences/preferences.properties b/browser/locales/en-US/chrome/browser/preferences/preferences.properties\\nindex e9d6b41..de7000c 100644\\n--- a/browser/locales/en-US/chrome/browser/preferences/preferences.properties\\n+++ b/browser/locales/en-US/chrome/browser/preferences/preferences.properties\\n@@ -43,29 +43,19 @@ desktopFolderName=Desktop\\n downloadsFolderName=Downloads\\n chooseDownloadFolderTitle=Choose Download Folder:\\n \\n-#### Download Actions\\n+#### Applications\\n \\n-extensionNone=(NONE)\\n-removeButtonSingle=Remove Action\\n-removeButtonMultiple=Remove Actions\\n-removeTitleSingle=Remove Action\\n-removeTitleMultiple=Remove Actions\\n-removeMessageSingle=The selected Action will no longer be performed when files of the affected types are downloaded. Are you sure you want to remove this Action?\\n-removeMessageMultiple=The selected Actions will no longer be performed when files of the affected types are downloaded. Are you sure you want to remove these Actions?\\n+removeType=Remove this entry...\\n+removeButton=Remove Entry\\n+removeTitle=Remove Entry\\n+removeMessage=If you remove this entry, Firefox will ask you what to do next time you access content of this type.  Are you sure you want to remove this entry?\\n fileEnding=%S file\\n saveToDisk=Save to Disk\\n-openWith=Open with %S\\n-actionsFiltered=The following Actions match your search:\\n-actionsAll=Automatically perform the associated Action with each of the following file types:\\n-\\n-\\n-#### Change Action\\n-\\n-extensionStringFormat=%S, %S\\n-downloadHelperNoneSelected=None Selected\\n-pluginHelperNoneAvailable=None Available\\n+chooseApp=Choose application...\\n fpTitleChooseApp=Select Helper Application\\n-fpTitleChooseDL=Select Download Folder\\n+webFeed=Web Feed\\n+alwaysAskAboutFeed=Show me a preview and ask me which Feed Reader to use\\n+liveBookmarks=Live Bookmarks\\n \\n #### Cookie Viewer\\n \\ndiff --git a/browser/locales/jar.mn b/browser/locales/jar.mn\\nindex aadee7c..89b41eb 100644\\n--- a/browser/locales/jar.mn\\n+++ b/browser/locales/jar.mn\\n@@ -45,15 +45,12 @@\\n     locale/browser/migration/migration.properties  (%chrome/browser/migration/migration.properties)\\n     locale/browser/preferences/advanced.dtd           (%chrome/browser/preferences/advanced.dtd)\\n *   locale/browser/preferences/advanced-scripts.dtd   (%chrome/browser/preferences/advanced-scripts.dtd)\\n-    locale/browser/preferences/changeaction.dtd       (%chrome/browser/preferences/changeaction.dtd)\\n     locale/browser/preferences/colors.dtd             (%chrome/browser/preferences/colors.dtd)\\n     locale/browser/preferences/cookies.dtd            (%chrome/browser/preferences/cookies.dtd)\\n     locale/browser/preferences/content.dtd            (%chrome/browser/preferences/content.dtd)\\n     locale/browser/preferences/connection.dtd         (%chrome/browser/preferences/connection.dtd)\\n-    locale/browser/preferences/downloadactions.dtd    (%chrome/browser/preferences/downloadactions.dtd)\\n+    locale/browser/preferences/applications.dtd       (%chrome/browser/preferences/applications.dtd)\\n     locale/browser/preferences/fallbackEULA.dtd       (%chrome/browser/preferences/fallbackEULA.dtd)\\n-    locale/browser/preferences/feeds.dtd              (%chrome/browser/preferences/feeds.dtd)\\n-    locale/browser/preferences/feeds.properties       (%chrome/browser/preferences/feeds.properties)\\n     locale/browser/preferences/fonts.dtd              (%chrome/browser/preferences/fonts.dtd)\\n     locale/browser/preferences/main.dtd               (%chrome/browser/preferences/main.dtd)\\n     locale/browser/preferences/languages.dtd          (%chrome/browser/preferences/languages.dtd)\\ndiff --git a/browser/themes/pinstripe/browser/preferences/preferences.css b/browser/themes/pinstripe/browser/preferences/preferences.css\\nindex 49a91b5..40271927 100644\\n--- a/browser/themes/pinstripe/browser/preferences/preferences.css\\n+++ b/browser/themes/pinstripe/browser/preferences/preferences.css\\n@@ -114,14 +114,14 @@ radio[pane=paneContent][selected=\\\"true\\\"] {\\n \\t-moz-image-region: rect(32px, 96px, 64px, 64px);\\n }\\n \\n-/* ----- FEEDS BUTTON ----- */\\n+/* ----- APPLICATIONS BUTTON ----- */\\n \\n-radio[pane=paneFeeds] {\\n+radio[pane=paneApplications] {\\n \\t-moz-image-region: rect(0px, 128px, 32px, 96px);\\n }\\n-radio[pane=paneFeeds]:hover,\\n-radio[pane=paneFeeds]:active,\\n-radio[pane=paneFeeds][selected=\\\"true\\\"] {\\n+radio[pane=paneApplications]:hover,\\n+radio[pane=paneApplications]:active,\\n+radio[pane=paneApplications][selected=\\\"true\\\"] {\\n \\t-moz-image-region: rect(32px, 128px, 64px, 96px);\\n }\\n \\n@@ -276,11 +276,3 @@ caption {\\n .updateControls {\\n   -moz-margin-start: 10px;\\n }\\n-\\n-\\n-/**\\n- * Feeds pane\\n- */\\n-#chooseClientAppCell {\\n-  -moz-padding-end: 12px;\\n-}\\ndiff --git a/browser/themes/winstripe/browser/preferences/preferences.css b/browser/themes/winstripe/browser/preferences/preferences.css\\nindex b79f977..5bd0e83 100644\\n--- a/browser/themes/winstripe/browser/preferences/preferences.css\\n+++ b/browser/themes/winstripe/browser/preferences/preferences.css\\n@@ -67,11 +67,11 @@ radio[pane=paneContent][selected=\\\"true\\\"]  {\\n \\t-moz-image-region: rect(32px, 96px,  64px, 64px)\\n }\\n \\n-radio[pane=paneFeeds] {\\n+radio[pane=paneApplications] {\\n \\t-moz-image-region: rect(0px, 128px,  32px, 96px)\\n }\\n-radio[pane=paneFeeds]:hover, \\n-radio[pane=paneFeeds][selected=\\\"true\\\"]  {\\n+radio[pane=paneApplications]:hover, \\n+radio[pane=paneApplications][selected=\\\"true\\\"]  {\\n \\t-moz-image-region: rect(32px, 128px,  64px, 96px)\\n }\\n \\n@@ -191,80 +191,6 @@ filefield[disabled=\\\"true\\\"] .fileFieldIcon {\\n   background-color: #E9E7E3; \\n }\\n \\n-/* Download Actions Manager */\\n-#fileExtension {\\n-  width: 5em; \\n-}\\n-\\n-#extensionChildren::-moz-tree-image(fileExtension) {\\n-  margin: 0px 5px 0px 0px;\\n-}\\n-\\n-#typeField {\\n-  font-weight: bold; \\n-}\\n-\\n-/* Change Action Dialog */\\n-#typeIcon {\\n-  width: 32px;\\n-  height: 32px;\\n-  -moz-margin-end: 3px;\\n-}\\n-\\n-#typeField {\\n-  background-color: transparent;\\n-  margin-top: 1px !important;\\n-  margin-bottom: 2px !important;\\n-  -moz-margin-start: 6px !important;\\n-  -moz-margin-end: 5px !important;\\n-}\\n-\\n-#extensionField {\\n-  color: GrayText;\\n-  font-weight: bold;\\n-}\\n-#ChangeActionDialog {\\n-  padding: 0px;\\n-}\\n-\\n-#ChangeActionDialog .dialog-button-box {\\n-  padding-top: 8px;\\n-  padding-bottom: 10px;\\n-  -moz-padding-start: 8px;\\n-  -moz-padding-end: 10px;  \\n-}\\n-\\n-#changeActionHeader {\\n-  border-bottom: 2px groove ThreeDFace;\\n-  margin: 0px;\\n-  padding: 10px;\\n-  background-color: -moz-Field;\\n-  color: -moz-FieldText;  \\n-}\\n-\\n-#changeActionContent {\\n-  padding-top: 8px;\\n-  padding-bottom: 10px;\\n-  -moz-padding-start: 9px;\\n-  -moz-padding-end: 10px;\\n-}\\n-\\n-#defaultAppIcon {\\n-  width: 16px;\\n-  height: 16px;\\n-  -moz-margin-start: 2px;\\n-}\\n-\\n-#defaultAppName {\\n-  -moz-margin-start: 6px !important; \\n-  font-weight: bold;\\n-}\\n-\\n-/* Feeds pane */\\n-#chooseClientAppCell {\\n-  -moz-padding-end: 12px;\\n-}\\n-\\n /* bottom-most box containing a groupbox in a prefpane. Prevents the bottom\\n    of the groupbox from being cutoff */\\n .bottomBox {\\ndiff --git a/toolkit/mozapps/jar.mn b/toolkit/mozapps/jar.mn\\nindex 6456cec..c3605a8 100755\\n--- a/toolkit/mozapps/jar.mn\\n+++ b/toolkit/mozapps/jar.mn\\n@@ -8,7 +8,6 @@ toolkit.jar:\\n * content/mozapps/downloads/DownloadProgressListener.js         (downloads/content/DownloadProgressListener.js)\\n   content/mozapps/downloads/downloads.css                       (downloads/content/downloads.css)\\n * content/mozapps/downloads/download.xml                        (downloads/content/download.xml)\\n-* content/mozapps/preferences/actionsshared.js                  (preferences/actionsshared.js)\\n * content/mozapps/preferences/ocsp.js                           (preferences/ocsp.js)\\n * content/mozapps/preferences/ocsp.xul                          (preferences/ocsp.xul)\\n * content/mozapps/preferences/fontbuilder.js                    (preferences/fontbuilder.js)\\ndiff --git a/toolkit/mozapps/preferences/actionsshared.js b/toolkit/mozapps/preferences/actionsshared.js\\ndeleted file mode 100644\\nindex 819718b..0000000\\n--- a/toolkit/mozapps/preferences/actionsshared.js\\n+++ /dev/null\\n@@ -1,64 +0,0 @@\\n-# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\\n-# ***** BEGIN LICENSE BLOCK *****\\n-# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n-#\\n-# The contents of this file are subject to the Mozilla Public License Version\\n-# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n-# the License. You may obtain a copy of the License at\\n-# http://www.mozilla.org/MPL/\\n-#\\n-# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n-# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n-# for the specific language governing rights and limitations under the\\n-# License.\\n-#\\n-# The Original Code is the Download Actions Manager.\\n-#\\n-# The Initial Developer of the Original Code is\\n-# Ben Goodger.\\n-# Portions created by the Initial Developer are Copyright (C) 2000-2005\\n-# the Initial Developer. All Rights Reserved.\\n-#\\n-# Contributor(s):\\n-#   Ben Goodger <ben@mozilla.org>\\n-#\\n-# Alternatively, the contents of this file may be used under the terms of\\n-# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n-# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n-# in which case the provisions of the GPL or the LGPL are applicable instead\\n-# of those above. If you wish to allow use of your version of this file only\\n-# under the terms of either the GPL or the LGPL, and not to allow others to\\n-# use your version of this file under the terms of the MPL, indicate your\\n-# decision by deleting the provisions above and replace them with the notice\\n-# and other provisions required by the GPL or the LGPL. If you do not delete\\n-# the provisions above, a recipient may use your version of this file under\\n-# the terms of any one of the MPL, the GPL or the LGPL.\\n-#\\n-# ***** END LICENSE BLOCK *****\\n-\\n-const FILEACTION_SAVE_TO_DISK     = 1;\\n-const FILEACTION_OPEN_INTERNALLY  = 2;\\n-const FILEACTION_OPEN_DEFAULT     = 3;\\n-const FILEACTION_OPEN_CUSTOM      = 4;\\n-const FILEACTION_OPEN_PLUGIN      = 5;\\n-function FileAction ()\\n-{\\n-}\\n-FileAction.prototype = {\\n-  type        : \\\"\\\",\\n-  extension   : \\\"\\\",\\n-  hasExtension: true,\\n-  editable    : true,\\n-  smallIcon   : \\\"\\\",\\n-  bigIcon     : \\\"\\\",\\n-  typeName    : \\\"\\\",\\n-  action      : \\\"\\\",\\n-  mimeInfo    : null,\\n-  customHandler       : \\\"\\\",\\n-  handleMode          : false,\\n-  pluginAvailable     : false,\\n-  pluginEnabled       : false,\\n-  handledOnlyByPlugin : false\\n-};\\n-\\n-\\n\""}