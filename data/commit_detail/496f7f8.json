{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas496f7f8\""},"diff":"\"496f7f8 Bug 96041. Adding win32 glyph extents patch to cairo so it doesn't get lost.\\ndiff --git a/gfx/cairo/README b/gfx/cairo/README\\nindex 9ef1f51..6071d09 100644\\n--- a/gfx/cairo/README\\n+++ b/gfx/cairo/README\\n@@ -25,3 +25,7 @@ win32-logical-font-scale.patch: set CAIRO_WIN32_LOGICAL_FONT_SCALE to 1\\n \\n nonfatal-assertions.patch: Make assertions non-fatal\\n \\n+win32-glyph-metrics.patch: GetGlyphOutline only works on Truetype fonts,\\n+so for non-Truetype fonts, assume no left or right bearing and use the\\n+font ascent and descent for the glyph extents.\\n+\\ndiff --git a/gfx/cairo/win32-glyph-metrics.patch b/gfx/cairo/win32-glyph-metrics.patch\\nnew file mode 100644\\nindex 0000000..92b6a87\\n--- /dev/null\\n+++ b/gfx/cairo/win32-glyph-metrics.patch\\n@@ -0,0 +1,154 @@\\n+Index: gfx/cairo/cairo/src/cairo-win32-font.c\\n+===================================================================\\n+RCS file: /cvsroot/mozilla/gfx/cairo/cairo/src/cairo-win32-font.c,v\\n+retrieving revision 1.37\\n+diff -u -p -1 -2 -r1.37 cairo-win32-font.c\\n+--- gfx/cairo/cairo/src/cairo-win32-font.c\\t22 Sep 2007 13:28:16 -0000\\t1.37\\n++++ gfx/cairo/cairo/src/cairo-win32-font.c\\t23 Sep 2007 23:55:06 -0000\\n+@@ -90,24 +90,25 @@ typedef struct {\\n+     cairo_bool_t swap_x;\\n+     cairo_bool_t swap_y;\\n+     double x_scale;\\n+     double y_scale;\\n+ \\n+     /* The size of the design unit of the font\\n+      */\\n+     int em_square;\\n+ \\n+     HFONT scaled_hfont;\\n+     HFONT unscaled_hfont;\\n+ \\n++    cairo_bool_t is_truetype;\\n+     cairo_bool_t glyph_indexing;\\n+ \\n+     cairo_bool_t delete_scaled_hfont;\\n+ } cairo_win32_scaled_font_t;\\n+ \\n+ static cairo_status_t\\n+ _cairo_win32_scaled_font_set_metrics (cairo_win32_scaled_font_t *scaled_font);\\n+ \\n+ static cairo_status_t\\n+ _cairo_win32_scaled_font_init_glyph_metrics (cairo_win32_scaled_font_t *scaled_font,\\n+ \\t\\t\\t\\t\\t     cairo_scaled_glyph_t      *scaled_glyph);\\n+ \\n+@@ -735,64 +736,81 @@ _cairo_win32_scaled_font_set_metrics (ca\\n+ \\t    return status;\\n+ \\tGetTextMetrics (hdc, &metrics);\\n+ \\t_cairo_win32_scaled_font_done_unscaled_font (&scaled_font->base);\\n+ \\n+ \\textents.ascent = (double)metrics.tmAscent / scaled_font->em_square;\\n+ \\textents.descent = (double)metrics.tmDescent / scaled_font->em_square;\\n+ \\textents.height = (double)(metrics.tmHeight + metrics.tmExternalLeading) / scaled_font->em_square;\\n+ \\textents.max_x_advance = (double)(metrics.tmMaxCharWidth) / scaled_font->em_square;\\n+ \\textents.max_y_advance = 0;\\n+ \\n+     }\\n+ \\n+-    if ((metrics.tmPitchAndFamily & TMPF_TRUETYPE) ||\\n+-        (GetFontData (hdc, OPENTYPE_CFF_TAG, 0, NULL, 0) != GDI_ERROR))\\n+-        scaled_font->glyph_indexing = TRUE;\\n+-    else\\n+-        scaled_font->glyph_indexing = FALSE;\\n++    scaled_font->is_truetype = (metrics.tmPitchAndFamily & TMPF_TRUETYPE) != 0;\\n++    scaled_font->glyph_indexing = scaled_font->is_truetype ||\\n++        (GetFontData (hdc, OPENTYPE_CFF_TAG, 0, NULL, 0) != GDI_ERROR);\\n++    // XXX in what situations does this OPENTYPE_CFF thing not have the\\n++    // TMPF_TRUETYPE flag? GetFontData says it only works on Truetype fonts...\\n+ \\n+     _cairo_scaled_font_set_metrics (&scaled_font->base, &extents);\\n+ \\n+     return CAIRO_STATUS_SUCCESS;\\n+ }\\n+ \\n+ static cairo_status_t\\n+ _cairo_win32_scaled_font_init_glyph_metrics (cairo_win32_scaled_font_t *scaled_font,\\n+ \\t\\t\\t\\t\\t     cairo_scaled_glyph_t      *scaled_glyph)\\n+ {\\n+     static const MAT2 matrix = { { 0, 1 }, { 0, 0 }, { 0, 0 }, { 0, 1 } };\\n+     GLYPHMETRICS metrics;\\n+     cairo_status_t status;\\n+     cairo_text_extents_t extents;\\n+     HDC hdc;\\n+-    UINT glyph_index_option;\\n+ \\n+     hdc = _get_global_font_dc ();\\n+     if (!hdc)\\n+ \\treturn CAIRO_STATUS_NO_MEMORY;\\n+ \\n+-    if (scaled_font->glyph_indexing)\\n+-        glyph_index_option = GGO_GLYPH_INDEX;\\n+-    else\\n+-        glyph_index_option = 0;\\n++    if (!scaled_font->is_truetype) {\\n++        /* GetGlyphOutline will not work. Assume that the glyph does not extend outside the font box. */\\n++        cairo_font_extents_t font_extents;\\n++        INT width = 0;\\n++        UINT charIndex =  _cairo_scaled_glyph_index (scaled_glyph);\\n++\\n++        cairo_scaled_font_extents (&scaled_font->base, &font_extents);\\n++\\n++        status = cairo_win32_scaled_font_select_font (&scaled_font->base, hdc);\\n++        if (!status) {\\n++            if (!GetCharWidth32(hdc, charIndex, charIndex, &width)) {\\n++                status = _cairo_win32_print_gdi_error (\\\"_cairo_win32_scaled_font_init_glyph_metrics:GetCharWidth32\\\");\\n++                width = 0;\\n++            }\\n++        }\\n++        cairo_win32_scaled_font_done_font (&scaled_font->base);\\n+ \\n+-    if (scaled_font->preserve_axes && scaled_font->base.options.hint_style != CAIRO_HINT_METRICS_OFF) {\\n++        extents.x_bearing = 0;\\n++        extents.y_bearing = -font_extents.ascent / scaled_font->y_scale;\\n++        extents.width = width / scaled_font->x_scale;\\n++        extents.height = (font_extents.ascent + font_extents.descent) / scaled_font->y_scale;\\n++        extents.x_advance = extents.width;\\n++        extents.y_advance = 0;\\n++    } else if (scaled_font->preserve_axes && scaled_font->base.options.hint_style != CAIRO_HINT_METRICS_OFF) {\\n+ \\t/* If we aren't rotating / skewing the axes, then we get the metrics\\n+ \\t * from the GDI in device space and convert to font space.\\n+ \\t */\\n+ \\tstatus = cairo_win32_scaled_font_select_font (&scaled_font->base, hdc);\\n+ \\tif (status)\\n+ \\t    return status;\\n+ \\tif (GetGlyphOutlineW (hdc, _cairo_scaled_glyph_index (scaled_glyph),\\n+-\\t\\t\\t      GGO_METRICS | glyph_index_option,\\n++\\t\\t\\t      GGO_METRICS | GGO_GLYPH_INDEX,\\n+ \\t\\t\\t      &metrics, 0, NULL, &matrix) == GDI_ERROR) {\\n+ \\t  status = _cairo_win32_print_gdi_error (\\\"_cairo_win32_scaled_font_init_glyph_metrics:GetGlyphOutlineW\\\");\\n+ \\t  memset (&metrics, 0, sizeof (GLYPHMETRICS));\\n+ \\t}\\n+ \\tcairo_win32_scaled_font_done_font (&scaled_font->base);\\n+ \\n+ \\tif (scaled_font->swap_axes) {\\n+ \\t    extents.x_bearing = - metrics.gmptGlyphOrigin.y / scaled_font->y_scale;\\n+ \\t    extents.y_bearing = metrics.gmptGlyphOrigin.x / scaled_font->x_scale;\\n+ \\t    extents.width = metrics.gmBlackBoxY / scaled_font->y_scale;\\n+ \\t    extents.height = metrics.gmBlackBoxX / scaled_font->x_scale;\\n+ \\t    extents.x_advance = metrics.gmCellIncY / scaled_font->x_scale;\\n+@@ -813,25 +831,25 @@ _cairo_win32_scaled_font_init_glyph_metr\\n+ \\n+ \\tif (scaled_font->swap_y) {\\n+ \\t    extents.y_bearing = (- extents.y_bearing - extents.height);\\n+ \\t    extents.y_advance = - extents.y_advance;\\n+ \\t}\\n+ \\n+     } else {\\n+ \\t/* For all other transformations, we use the design metrics\\n+ \\t * of the font.\\n+ \\t */\\n+ \\tstatus = _cairo_win32_scaled_font_select_unscaled_font (&scaled_font->base, hdc);\\n+ \\tif (GetGlyphOutlineW (hdc, _cairo_scaled_glyph_index (scaled_glyph),\\n+-\\t\\t\\t      GGO_METRICS | glyph_index_option,\\n++\\t                      GGO_METRICS | GGO_GLYPH_INDEX,\\n+ \\t\\t\\t      &metrics, 0, NULL, &matrix) == GDI_ERROR) {\\n+ \\t  status = _cairo_win32_print_gdi_error (\\\"_cairo_win32_scaled_font_init_glyph_metrics:GetGlyphOutlineW\\\");\\n+ \\t  memset (&metrics, 0, sizeof (GLYPHMETRICS));\\n+ \\t}\\n+ \\t_cairo_win32_scaled_font_done_unscaled_font (&scaled_font->base);\\n+ \\n+ \\textents.x_bearing = (double)metrics.gmptGlyphOrigin.x / scaled_font->em_square;\\n+ \\textents.y_bearing = - (double)metrics.gmptGlyphOrigin.y / scaled_font->em_square;\\n+ \\textents.width = (double)metrics.gmBlackBoxX / scaled_font->em_square;\\n+ \\textents.height = (double)metrics.gmBlackBoxY / scaled_font->em_square;\\n+ \\textents.x_advance = (double)metrics.gmCellIncX / scaled_font->em_square;\\n+ \\textents.y_advance = (double)metrics.gmCellIncY / scaled_font->em_square;\\n\""}