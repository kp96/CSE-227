{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas5a4266c\""},"diff":"\"5a4266c Follow-up to bug 379633: Scriptable zipwriter component. r+a=bsmedberg\\ndiff --git a/browser/installer/unix/packages-static b/browser/installer/unix/packages-static\\nindex cf965e9d..8aeb182 100644\\n--- a/browser/installer/unix/packages-static\\n+++ b/browser/installer/unix/packages-static\\n@@ -187,6 +187,7 @@ bin/components/xremoteservice.xpt\\n bin/components/xulapp.xpt\\n bin/components/xuldoc.xpt\\n bin/components/xultmpl.xpt\\n+bin/components/zipwriter.xpt\\n bin/components/shellservice.xpt\\n ; JavaScript components\\n bin/components/FeedProcessor.js\\ndiff --git a/browser/installer/windows/packages-static b/browser/installer/windows/packages-static\\nindex e2ec3754..23dc6ac 100644\\n--- a/browser/installer/windows/packages-static\\n+++ b/browser/installer/windows/packages-static\\n@@ -192,6 +192,7 @@ bin\\\\components\\\\xpinstall.xpt\\n bin\\\\components\\\\xulapp.xpt\\n bin\\\\components\\\\xuldoc.xpt\\n bin\\\\components\\\\xultmpl.xpt\\n+bin\\\\components\\\\zipwriter.xpt\\n ; JavaScript components\\n bin\\\\components\\\\FeedProcessor.js\\n bin\\\\components\\\\FeedConverter.js\\ndiff --git a/modules/libjar/zipwriter/Makefile.in b/modules/libjar/zipwriter/Makefile.in\\nindex 041fac2..ec852fd 100644\\n--- a/modules/libjar/zipwriter/Makefile.in\\n+++ b/modules/libjar/zipwriter/Makefile.in\\n@@ -46,8 +46,8 @@ MODULE                = zipwriter\\n \\n DIRS                  = public src\\n \\n-#ifdef ENABLE_TESTS\\n-#DIRS                 += test\\n-#endif\\n+ifdef ENABLE_TESTS\\n+DIRS                 += test\\n+endif\\n \\n include $(topsrcdir)/config/rules.mk\\ndiff --git a/modules/libjar/zipwriter/src/nsZipWriter.cpp b/modules/libjar/zipwriter/src/nsZipWriter.cpp\\nindex 1030044..6c367db 100644\\n--- a/modules/libjar/zipwriter/src/nsZipWriter.cpp\\n+++ b/modules/libjar/zipwriter/src/nsZipWriter.cpp\\n@@ -271,15 +271,18 @@ NS_IMETHODIMP nsZipWriter::Open(nsIFile *aFile, PRInt32 aIoFlags)\\n     // Need to be able to write to the file\\n     if (aIoFlags & PR_RDONLY)\\n         return NS_ERROR_FAILURE;\\n+    \\n+    nsresult rv = aFile->Clone(getter_AddRefs(mFile));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n \\n     PRBool exists;\\n-    nsresult rv = aFile->Exists(&exists);\\n+    rv = mFile->Exists(&exists);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n     if (!exists && !(aIoFlags & PR_CREATE_FILE))\\n         return NS_ERROR_FILE_NOT_FOUND;\\n \\n     if (exists && !(aIoFlags & (PR_TRUNCATE | PR_WRONLY))) {\\n-        rv = ReadFile(aFile);\\n+        rv = ReadFile(mFile);\\n         NS_ENSURE_SUCCESS(rv, rv);\\n         mCDSDirty = PR_FALSE;\\n     }\\n@@ -293,7 +296,7 @@ NS_IMETHODIMP nsZipWriter::Open(nsIFile *aFile, PRInt32 aIoFlags)\\n     aIoFlags &= 0xef;\\n \\n     nsCOMPtr<nsIOutputStream> stream;\\n-    rv = NS_NewLocalFileOutputStream(getter_AddRefs(stream), aFile, aIoFlags);\\n+    rv = NS_NewLocalFileOutputStream(getter_AddRefs(stream), mFile, aIoFlags);\\n     if (NS_FAILED(rv)) {\\n         mHeaders.Clear();\\n         mEntryHash.Clear();\\n@@ -313,8 +316,6 @@ NS_IMETHODIMP nsZipWriter::Open(nsIFile *aFile, PRInt32 aIoFlags)\\n         NS_ENSURE_SUCCESS(rv, rv);\\n     }\\n \\n-    mFile = aFile;\\n-\\n     return NS_OK;\\n }\\n \\n@@ -373,12 +374,14 @@ NS_IMETHODIMP nsZipWriter::AddEntryFile(const nsACString & aZipEntry,\\n     if (!mStream)\\n         return NS_ERROR_NOT_INITIALIZED;\\n \\n+    nsresult rv;\\n     if (aQueue) {\\n         nsZipQueueItem item;\\n         item.mOperation = OPERATION_ADD;\\n         item.mZipEntry = aZipEntry;\\n         item.mCompression = aCompression;\\n-        item.mFile = aFile;\\n+        rv = aFile->Clone(getter_AddRefs(item.mFile));\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n         if (!mQueue.AppendElement(item))\\n             return NS_ERROR_OUT_OF_MEMORY;\\n         return NS_OK;\\n@@ -388,7 +391,7 @@ NS_IMETHODIMP nsZipWriter::AddEntryFile(const nsACString & aZipEntry,\\n         return NS_ERROR_IN_PROGRESS;\\n \\n     PRBool exists;\\n-    nsresult rv = aFile->Exists(&exists);\\n+    rv = aFile->Exists(&exists);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n     if (!exists)\\n         return NS_ERROR_FILE_NOT_FOUND;\\ndiff --git a/modules/libjar/zipwriter/test/unit/test_asyncremove.js b/modules/libjar/zipwriter/test/unit/test_asyncremove.js\\nindex 89bfc2e..5135bf2 100644\\n--- a/modules/libjar/zipwriter/test/unit/test_asyncremove.js\\n+++ b/modules/libjar/zipwriter/test/unit/test_asyncremove.js\\n@@ -53,7 +53,8 @@ var observer = {\\n     zipW.close();\\n \\n     // Empty zip file should just be the end of central directory marker\\n-    do_check_eq(tmpFile.fileSize, ZIP_EOCDR_HEADER_SIZE);\\n+    var newTmpFile = tmpFile.clone();\\n+    do_check_eq(newTmpFile.fileSize, ZIP_EOCDR_HEADER_SIZE);\\n     do_test_finished();\\n   }\\n };\\ndiff --git a/modules/libjar/zipwriter/test/unit/test_undochange.js b/modules/libjar/zipwriter/test/unit/test_undochange.js\\nindex 9d18db0..c2f8a9d 100644\\n--- a/modules/libjar/zipwriter/test/unit/test_undochange.js\\n+++ b/modules/libjar/zipwriter/test/unit/test_undochange.js\\n@@ -70,5 +70,6 @@ function run_test()\\n   zipW.close();\\n \\n   // Empty zip file should just be the end of central directory marker\\n-  do_check_eq(tmpFile.fileSize, ZIP_EOCDR_HEADER_SIZE);\\n+  var newTmpFile = tmpFile.clone();\\n+  do_check_eq(newTmpFile.fileSize, ZIP_EOCDR_HEADER_SIZE);\\n }\\n\""}