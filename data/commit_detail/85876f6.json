{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas85876f6\""},"diff":"\"85876f6 Bug 394735, cache event listener manager when dispatching events, r+sr+a=jst\\ndiff --git a/content/events/src/nsEventDispatcher.cpp b/content/events/src/nsEventDispatcher.cpp\\nindex dcbc4d2..3e04058 100644\\n--- a/content/events/src/nsEventDispatcher.cpp\\n+++ b/content/events/src/nsEventDispatcher.cpp\\n@@ -138,14 +138,16 @@ public:\\n   nsresult PostHandleEvent(nsEventChainPostVisitor& aVisitor);\\n \\n \\n-  nsCOMPtr<nsPIDOMEventTarget> mTarget;\\n-  nsEventTargetChainItem*      mChild;\\n-  nsEventTargetChainItem*      mParent;\\n-  PRUint16                     mFlags;\\n-  PRUint16                     mItemFlags;\\n-  nsCOMPtr<nsISupports>        mItemData;\\n+  nsCOMPtr<nsPIDOMEventTarget>      mTarget;\\n+  nsEventTargetChainItem*           mChild;\\n+  nsEventTargetChainItem*           mParent;\\n+  PRUint16                          mFlags;\\n+  PRUint16                          mItemFlags;\\n+  nsCOMPtr<nsISupports>             mItemData;\\n   // Event retargeting must happen whenever mNewTarget is non-null.\\n-  nsCOMPtr<nsISupports>        mNewTarget;\\n+  nsCOMPtr<nsISupports>             mNewTarget;\\n+  // Cache mTarget's event listener manager.\\n+  nsCOMPtr<nsIEventListenerManager> mManager;\\n };\\n \\n nsEventTargetChainItem::nsEventTargetChainItem(nsISupports* aTarget,\\n@@ -192,14 +194,18 @@ nsresult\\n nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor& aVisitor,\\n                                     PRUint32 aFlags)\\n {\\n-  nsCOMPtr<nsIEventListenerManager> lm;\\n-  mTarget->GetListenerManager(PR_FALSE, getter_AddRefs(lm));\\n-  aVisitor.mEvent->currentTarget = CurrentTarget()->GetTargetForDOMEvent(); \\n-  if (lm && aVisitor.mEvent->currentTarget) {\\n-    lm->HandleEvent(aVisitor.mPresContext, aVisitor.mEvent, &aVisitor.mDOMEvent,\\n-                    aVisitor.mEvent->currentTarget, aFlags,\\n-                    &aVisitor.mEventStatus);\\n-    aVisitor.mEvent->currentTarget = nsnull;\\n+  if (!mManager) {\\n+    mTarget->GetListenerManager(PR_FALSE, getter_AddRefs(mManager));\\n+  }\\n+  if (mManager) {\\n+    aVisitor.mEvent->currentTarget = CurrentTarget()->GetTargetForDOMEvent();\\n+    if (aVisitor.mEvent->currentTarget) {\\n+      mManager->HandleEvent(aVisitor.mPresContext, aVisitor.mEvent,\\n+                            &aVisitor.mDOMEvent,\\n+                            aVisitor.mEvent->currentTarget, aFlags,\\n+                            &aVisitor.mEventStatus);\\n+      aVisitor.mEvent->currentTarget = nsnull;\\n+    }\\n   }\\n   return NS_OK;\\n }\\n\""}