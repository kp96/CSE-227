{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basb605d81\""},"diff":"\"b605d81 bug 393252 - make PerfConfigurator.py support linux and mac, patch by bhearsum@mozilla.com, r=robcee\\ndiff --git a/testing/performance/talos/PerfConfigurator.py b/testing/performance/talos/PerfConfigurator.py\\nindex eb1d54c..0b3d7e6 100644\\n--- a/testing/performance/talos/PerfConfigurator.py\\n+++ b/testing/performance/talos/PerfConfigurator.py\\n@@ -1,197 +1,212 @@\\n-#!/usr/bin/env python\\r\\n-# encoding: utf-8\\r\\n-\\\"\\\"\\\"\\r\\n-PerfConfigurator.py\\r\\n-\\r\\n-Created by Rob Campbell on 2007-03-02.\\r\\n-Modified by Rob Campbell on 2007-05-30\\r\\n-Modified by Rob Campbell on 2007-06-26 - added -i buildid option\\r\\n-Modified by Rob Campbell on 2007-07-06 - added -d testDate option\\r\\n-Modified by Rob Campbell on 2007-08-22 - fixed errors in main()\\r\\n-\\\"\\\"\\\"\\r\\n-\\r\\n-import sys\\r\\n-import getopt\\r\\n-import re\\r\\n-import time\\r\\n-from datetime import datetime\\r\\n-\\r\\n-executablePath = \\\"C:\\\\\\\\cygwin\\\\\\\\tmp\\\\\\\\test\\\\\\\\\\\"\\r\\n-configFilePath = \\\"C:\\\\\\\\mozilla\\\\\\\\testing\\\\\\\\performance\\\\\\\\talos\\\\\\\\\\\"\\r\\n-masterIniSubpath = 'firefox\\\\\\\\extensions\\\\\\\\talkback@mozilla.org\\\\\\\\components\\\\\\\\master.ini'\\r\\n-defaultTitle = \\\"qm-pxp01\\\"\\r\\n-\\r\\n-help_message = '''\\r\\n-This is the buildbot performance runner's YAML configurator.bean\\r\\n-\\r\\n-USAGE: python PerfConfigurator.py -e executablePath -c configFilePath \\r\\n-            -b branchid -t title -o output -i buildid -d\\r\\n-'''\\r\\n-\\r\\n-class PerfConfigurator:\\r\\n-    exePath = \\\"\\\"\\r\\n-    configPath = \\\"\\\"\\r\\n-    outputName = \\\"\\\"\\r\\n-    title = \\\"\\\"\\r\\n-    branch = \\\"\\\"\\r\\n-    buildid = \\\"\\\"\\r\\n-    currentDate = \\\"\\\"\\r\\n-    verbose = False\\r\\n-    testDateFromBuildId = False\\r\\n-    \\r\\n-    def _dumpConfiguration(self):\\r\\n-        \\\"\\\"\\\"dump class configuration for convenient pickup or perusal\\\"\\\"\\\"\\r\\n-        print \\\"Writing configuration:\\\"\\r\\n-        print \\\" - title = \\\" + self.title\\r\\n-        print \\\" - executablePath = \\\" + self.exePath\\r\\n-        print \\\" - configPath = \\\" + self.configPath\\r\\n-        print \\\" - outputName = \\\" + self.outputName\\r\\n-        print \\\" - branch = \\\" + self.branch\\r\\n-        print \\\" - buildid = \\\" + self.buildid\\r\\n-        print \\\" - currentDate = \\\" + self.currentDate\\r\\n-    \\r\\n-    def _getCurrentDateString(self):\\r\\n-        currentDateTime = datetime.now()\\r\\n-        return currentDateTime.strftime(\\\"%Y%m%d_%H%M\\\")\\r\\n-    \\r\\n-    def _getCurrentBuildId(self):\\r\\n-        master = open(self.exePath + masterIniSubpath)\\r\\n-        if not master:\\r\\n-            raise Configuration(\\\"Unable to open \\\" + self.exePath + masterIniSubpath)\\r\\n-        masterContents = master.readlines()\\r\\n-        master.close()\\r\\n-        reBuildid = re.compile('BuildID\\\\s*=\\\\s*\\\"(\\\\d{10})\\\"')\\r\\n-        for line in masterContents:\\r\\n-            match = re.match(reBuildid, line)\\r\\n-            if match:\\r\\n-                return match.group(1)\\r\\n-        raise Configuration(\\\"BuildID not found in \\\" + self.exePath + masterIniSubpath)\\r\\n-    \\r\\n-    def _getTimeFromBuildId(self):\\r\\n-        buildIdTime = time.strptime(self.buildid, \\\"%Y%m%d%H\\\")\\r\\n-        return time.strftime(\\\"%a, %d %b %Y %H:%M:%S GMT\\\", buildIdTime)\\r\\n-    \\r\\n-    def writeConfigFile(self):\\r\\n-        configFile = open(self.configPath + \\\"sample.config\\\")\\r\\n-        self.currentDate = self._getCurrentDateString()\\r\\n-        if not self.buildid:\\r\\n-            self.buildid = self._getCurrentBuildId()\\r\\n-        if not self.outputName:\\r\\n-            self.outputName = self.currentDate + \\\"_config.yml\\\"\\r\\n-        destination = open(self.outputName, \\\"w\\\")\\r\\n-        config = configFile.readlines()\\r\\n-        configFile.close()\\r\\n-        buildidString = \\\"'\\\" + str(self.buildid) + \\\"'\\\"\\r\\n-        for line in config:\\r\\n-            newline = line\\r\\n-            if 'firefox:' in line:\\r\\n-                newline = '  firefox: ' + self.exePath + 'firefox\\\\\\\\firefox.exe'\\r\\n-            if 'testtitle' in line:\\r\\n-                newline = line.replace('testtitle', self.title)\\r\\n-                if self.testDateFromBuildId:\\r\\n-                    newline += '\\\\n'\\r\\n-                    newline += 'testdate: \\\"%s\\\"\\\\n' % self._getTimeFromBuildId()\\r\\n-            if 'testfilename' in line:\\r\\n-                newline = line.replace('testfilename', self.outputName)\\r\\n-            if 'testbranchid' in line:\\r\\n-                newline = line.replace('testbranchid', buildidString)\\r\\n-            else:\\r\\n-                if 'testbranch' in line:\\r\\n-                    newline = line.replace('testbranch', self.branch)\\r\\n-            destination.write(newline)\\r\\n-        destination.close()\\r\\n-        if self.verbose:\\r\\n-            self._dumpConfiguration()\\r\\n-    \\r\\n-    def __init__(self, **kwargs):\\r\\n-        if 'title' in kwargs:\\r\\n-            self.title = kwargs['title']\\r\\n-        if 'branch' in kwargs:\\r\\n-            self.branch = kwargs['branch']\\r\\n-        if 'executablePath' in kwargs:\\r\\n-            self.exePath = kwargs['executablePath']\\r\\n-        if 'configFilePath' in kwargs:\\r\\n-            self.configPath = kwargs['configFilePath']\\r\\n-        if 'outputName' in kwargs:\\r\\n-            self.outputName = kwargs['outputName']\\r\\n-        if 'buildid' in kwargs:\\r\\n-            self.buildid = kwargs['buildid']\\r\\n-        if 'verbose' in kwargs:\\r\\n-            self.verbose = kwargs['verbose']\\r\\n-        if 'testDate' in kwargs:\\r\\n-            self.testDateFromBuildId = kwargs['testDate']\\r\\n-\\r\\n-\\r\\n-class Configuration(Exception):\\r\\n-    def __init__(self, msg):\\r\\n-        self.msg = \\\"ERROR: \\\" + msg\\r\\n-\\r\\n-class Usage(Exception):\\r\\n-    def __init__(self, msg):\\r\\n-        self.msg = msg\\r\\n-\\r\\n-\\r\\n-def main(argv=None):\\r\\n-    exePath = executablePath\\r\\n-    configPath = configFilePath\\r\\n-    output = \\\"\\\"\\r\\n-    title = defaultTitle\\r\\n-    branch = \\\"\\\"\\r\\n-    buildid = \\\"\\\"\\r\\n-    testDate = False\\r\\n-    verbose = False\\r\\n-    \\r\\n-    if argv is None:\\r\\n-        argv = sys.argv\\r\\n-    try:\\r\\n-        try:\\r\\n-            opts, args = getopt.getopt(argv[1:], \\\"hve:c:t:b:o:i:d\\\", \\r\\n-                [\\\"help\\\", \\\"verbose\\\", \\\"executablePath=\\\", \\\"configFilePath=\\\", \\\"title=\\\", \\r\\n-                \\\"branch=\\\", \\\"output=\\\", \\\"id=\\\", \\\"testDate\\\"])\\r\\n-        except getopt.error, msg:\\r\\n-            raise Usage(msg)\\r\\n-        \\r\\n-        # option processing\\r\\n-        for option, value in opts:\\r\\n-            if option in (\\\"-v\\\", \\\"--verbose\\\"):\\r\\n-                verbose = True\\r\\n-            if option in (\\\"-h\\\", \\\"--help\\\"):\\r\\n-                raise Usage(help_message)\\r\\n-            if option in (\\\"-e\\\", \\\"--executablePath\\\"):\\r\\n-                exePath = value\\r\\n-            if option in (\\\"-c\\\", \\\"--configFilePath\\\"):\\r\\n-                configPath = value\\r\\n-            if option in (\\\"-t\\\", \\\"--title\\\"):\\r\\n-                title = value\\r\\n-            if option in (\\\"-b\\\", \\\"--branch\\\"):\\r\\n-                branch = value\\r\\n-            if option in (\\\"-o\\\", \\\"--output\\\"):\\r\\n-                output = value\\r\\n-            if option in (\\\"-i\\\", \\\"--id\\\"):\\r\\n-                buildid = value\\r\\n-            if option in (\\\"-d\\\", \\\"--testDate\\\"):\\r\\n-                testDate = True\\r\\n-        \\r\\n-    except Usage, err:\\r\\n-        print >> sys.stderr, sys.argv[0].split(\\\"/\\\")[-1] + \\\": \\\" + str(err.msg)\\r\\n-        print >> sys.stderr, \\\"\\\\t for help use --help\\\"\\r\\n-        return 2\\r\\n-    \\r\\n-    configurator = PerfConfigurator(title=title,\\r\\n-                                    executablePath=exePath,\\r\\n-                                    configFilePath=configPath,\\r\\n-                                    buildid=buildid,\\r\\n-                                    branch=branch,\\r\\n-                                    verbose=verbose,\\r\\n-                                    testDate=testDate,\\r\\n-                                    outputName=output)\\r\\n-    try:\\r\\n-        configurator.writeConfigFile()\\r\\n-    except Configuration, err:\\r\\n-        print >> sys.stderr, sys.argv[0].split(\\\"/\\\")[-1] + \\\": \\\" + str(err.msg)\\r\\n-        return 5\\r\\n-    return 0\\r\\n-\\r\\n-\\r\\n-if __name__ == \\\"__main__\\\":\\r\\n-    sys.exit(main())\\r\\n+#!/usr/bin/env python\\n+# encoding: utf-8\\n+\\\"\\\"\\\"\\n+PerfConfigurator.py\\n+\\n+Created by Rob Campbell on 2007-03-02.\\n+Modified by Rob Campbell on 2007-05-30\\n+Modified by Rob Campbell on 2007-06-26 - added -i buildid option\\n+Modified by Rob Campbell on 2007-07-06 - added -d testDate option\\n+Modified by Ben Hearsum on 2007-08-22 - bugfixes, cleanup, support for multiple platforms\\n+\\\"\\\"\\\"\\n+\\n+import sys\\n+import getopt\\n+import re\\n+import time\\n+from datetime import datetime\\n+from os import path\\n+\\n+executablePath = \\\"C:\\\\\\\\cygwin\\\\\\\\tmp\\\\\\\\test\\\\\\\\\\\"\\n+configFilePath = \\\"C:\\\\\\\\mozilla\\\\\\\\testing\\\\\\\\performance\\\\\\\\talos\\\\\\\\\\\"\\n+\\n+# TODO: maybe this should be searched for?\\n+# For Windows\\n+#masterIniSubpath = path.join(\\\"firefox\\\", \\\"extensions\\\", \\\"talkback@mozilla.org\\\",\\n+#                             \\\"components\\\", \\\"master.ini\\\")\\n+# For Linux\\n+masterIniSubpath = path.join(\\\"firefox\\\", \\\"components\\\", \\\"talkback\\\", \\\"master.ini\\\")\\n+# For OS X\\n+# masterIniSubpath = path.join(\\\"*.app\\\", \\\"Contents\\\", \\\"MacOS\\\", \\\"extensions\\\",\\n+#                              \\\"talkback@mozilla.org\\\", \\\"components\\\",\\n+#                              \\\"talkback\\\", \\\"master.ini\\\"\\n+defaultTitle = \\\"qm-pxp01\\\"\\n+\\n+help_message = '''\\n+This is the buildbot performance runner's YAML configurator.bean\\n+\\n+USAGE: python PerfConfigurator.py -e executablePath -c configFilePath \\n+            -b branchid -t title -o output -i buildid -d\\n+'''\\n+\\n+class PerfConfigurator:\\n+    exePath = \\\"\\\"\\n+    configPath = \\\"\\\"\\n+    outputName = \\\"\\\"\\n+    title = \\\"\\\"\\n+    branch = \\\"\\\"\\n+    buildid = \\\"\\\"\\n+    currentDate = \\\"\\\"\\n+    verbose = False\\n+    testDateFromBuildId = False\\n+    \\n+    def _dumpConfiguration(self):\\n+        \\\"\\\"\\\"dump class configuration for convenient pickup or perusal\\\"\\\"\\\"\\n+        print \\\"Writing configuration:\\\"\\n+        print \\\" - title = \\\" + self.title\\n+        print \\\" - executablePath = \\\" + self.exePath\\n+        print \\\" - configPath = \\\" + self.configPath\\n+        print \\\" - outputName = \\\" + self.outputName\\n+        print \\\" - branch = \\\" + self.branch\\n+        print \\\" - buildid = \\\" + self.buildid\\n+        print \\\" - currentDate = \\\" + self.currentDate\\n+    \\n+    def _getCurrentDateString(self):\\n+        currentDateTime = datetime.now()\\n+        return currentDateTime.strftime(\\\"%Y%m%d_%H%M\\\")\\n+    \\n+    def _getCurrentBuildId(self):\\n+        master = open(path.join(self.exePath, masterIniSubpath))\\n+        if not master:\\n+            raise Configuration(\\\"Unable to open \\\" \\n+              + path.join(self.exePath, masterIniSubpath))\\n+        masterContents = master.readlines()\\n+        master.close()\\n+        reBuildid = re.compile('BuildID\\\\s*=\\\\s*\\\"(\\\\d{10})\\\"')\\n+        for line in masterContents:\\n+            match = re.match(reBuildid, line)\\n+            if match:\\n+                return match.group(1)\\n+        raise Configuration(\\\"BuildID not found in \\\" \\n+          + path.join(self.exePath, masterIniSubpath))\\n+    \\n+    def _getTimeFromBuildId(self):\\n+        buildIdTime = time.strptime(self.buildid, \\\"%Y%m%d%H\\\")\\n+        return time.strftime(\\\"%a, %d %b %Y %H:%M:%S GMT\\\", buildIdTime)\\n+    \\n+    def writeConfigFile(self):\\n+        configFile = open(path.join(self.configPath, \\\"sample.config\\\"))\\n+        self.currentDate = self._getCurrentDateString()\\n+        if not self.buildid:\\n+            self.buildid = self._getCurrentBuildId()\\n+        if not self.outputName:\\n+            self.outputName = self.currentDate + \\\"_config.yml\\\"\\n+        destination = open(self.outputName, \\\"w\\\")\\n+        config = configFile.readlines()\\n+        configFile.close()\\n+        buildidString = \\\"'\\\" + str(self.buildid) + \\\"'\\\"\\n+        for line in config:\\n+            newline = line\\n+            if 'firefox:' in line:\\n+                newline = '  firefox: ' + self.exePath\\n+            if 'testtitle' in line:\\n+                newline = line.replace('testtitle', self.title)\\n+                if self.testDateFromBuildId:\\n+                    newline += '\\\\n'\\n+                    newline += 'testdate: \\\"%s\\\"\\\\n' % self._getTimeFromBuildId()\\n+            if 'testfilename' in line:\\n+                newline = line.replace('testfilename', self.outputName)\\n+            if 'testbranchid' in line:\\n+                newline = line.replace('testbranchid', buildidString)\\n+            else:\\n+                if 'testbranch' in line:\\n+                    newline = line.replace('testbranch', self.branch)\\n+            destination.write(newline)\\n+        destination.close()\\n+        if self.verbose:\\n+            self._dumpConfiguration()\\n+    \\n+    def __init__(self, **kwargs):\\n+        if 'title' in kwargs:\\n+            self.title = kwargs['title']\\n+        if 'branch' in kwargs:\\n+            self.branch = kwargs['branch']\\n+        if 'executablePath' in kwargs:\\n+            self.exePath = kwargs['executablePath']\\n+        if 'configFilePath' in kwargs:\\n+            self.configPath = kwargs['configFilePath']\\n+        if 'outputName' in kwargs:\\n+            self.outputName = kwargs['outputName']\\n+        if 'buildid' in kwargs:\\n+            self.buildid = kwargs['buildid']\\n+        if 'verbose' in kwargs:\\n+            self.verbose = kwargs['verbose']\\n+        if 'testDate' in kwargs:\\n+            self.testDateFromBuildId = kwargs['testDate']\\n+\\n+\\n+class Configuration(Exception):\\n+    def __init__(self, msg):\\n+        self.msg = \\\"ERROR: \\\" + msg\\n+\\n+class Usage(Exception):\\n+    def __init__(self, msg):\\n+        self.msg = msg\\n+\\n+\\n+def main(argv=None):\\n+    exePath = executablePath\\n+    configPath = configFilePath\\n+    output = \\\"\\\"\\n+    title = defaultTitle\\n+    branch = \\\"\\\"\\n+    testDate = False\\n+    verbose = False\\n+    buildid = \\\"\\\"\\n+    \\n+    if argv is None:\\n+        argv = sys.argv\\n+    try:\\n+        try:\\n+            opts, args = getopt.getopt(argv[1:], \\\"hve:c:t:b:o:i:d\\\", \\n+                [\\\"help\\\", \\\"verbose\\\", \\\"executablePath=\\\", \\\"configFilePath=\\\", \\\"title=\\\", \\n+                \\\"branch=\\\", \\\"output=\\\", \\\"id=\\\", \\\"testDate\\\"])\\n+        except getopt.error, msg:\\n+            raise Usage(msg)\\n+        \\n+        # option processing\\n+        for option, value in opts:\\n+            if option in (\\\"-v\\\", \\\"--verbose\\\"):\\n+                verbose = True\\n+            if option in (\\\"-h\\\", \\\"--help\\\"):\\n+                raise Usage(help_message)\\n+            if option in (\\\"-e\\\", \\\"--executablePath\\\"):\\n+                exePath = value\\n+            if option in (\\\"-c\\\", \\\"--configFilePath\\\"):\\n+                configPath = value\\n+            if option in (\\\"-t\\\", \\\"--title\\\"):\\n+                title = value\\n+            if option in (\\\"-b\\\", \\\"--branch\\\"):\\n+                branch = value\\n+            if option in (\\\"-o\\\", \\\"--output\\\"):\\n+                output = value\\n+            if option in (\\\"-i\\\", \\\"--id\\\"):\\n+                buildid = value\\n+            if option in (\\\"-d\\\", \\\"--testDate\\\"):\\n+                testDate = True\\n+        \\n+    except Usage, err:\\n+        print >> sys.stderr, sys.argv[0].split(\\\"/\\\")[-1] + \\\": \\\" + str(err.msg)\\n+        print >> sys.stderr, \\\"\\\\t for help use --help\\\"\\n+        return 2\\n+    \\n+    configurator = PerfConfigurator(title=title,\\n+                                    executablePath=exePath,\\n+                                    configFilePath=configPath,\\n+                                    buildid=buildid,\\n+                                    branch=branch,\\n+                                    verbose=verbose,\\n+                                    testDate=testDate,\\n+                                    outputName=output)\\n+    try:\\n+        configurator.writeConfigFile()\\n+    except Configuration, err:\\n+        print >> sys.stderr, sys.argv[0].split(\\\"/\\\")[-1] + \\\": \\\" + str(err.msg)\\n+        return 5\\n+    return 0\\n+\\n+\\n+if __name__ == \\\"__main__\\\":\\n+    sys.exit(main())\\n+\\n+\\n\""}