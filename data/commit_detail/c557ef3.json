{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basc557ef3\""},"diff":"\"c557ef3 remove all docshell and webshell usage from cocoa widgets. b=273812 r=cbarrett sr=bz a=roc\\ndiff --git a/widget/public/nsIMenuListener.h b/widget/public/nsIMenuListener.h\\nindex 8de37c6..d19e9be 100644\\n--- a/widget/public/nsIMenuListener.h\\n+++ b/widget/public/nsIMenuListener.h\\n@@ -43,10 +43,10 @@\\n \\n class nsIWidget;\\n \\n-// {f2e79602-1700-11d5-bb6f-90f240fe493c}\\n+// F463E22A-C5A9-4443-9407-2A7CD6634AE1\\n #define NS_IMENULISTENER_IID      \\\\\\n-{ 0xf2e79602, 0x1700, 0x11d5, \\\\\\n-  { 0xbb, 0x6f, 0x90, 0xf2, 0x40, 0xfe, 0x49, 0x3c } }\\n+{ 0xF463E22A, 0xC5A9, 0x4443, \\\\\\n+  { 0x94, 0x07, 0x2A, 0x7C, 0xD6, 0x63, 0x4A, 0xE1 } }\\n \\n /**\\n  *\\n@@ -81,9 +81,8 @@ class nsIMenuListener : public nsISupports {\\n      */\\n     virtual nsEventStatus MenuDeselected(const nsMenuEvent & aMenuEvent) = 0;\\n \\n-    virtual nsEventStatus MenuConstruct( const nsMenuEvent & aMenuEvent,\\n-                                          nsIWidget* aParentWindow, void* aNode,\\n-                                          void* aDocShell) = 0;\\n+    virtual nsEventStatus MenuConstruct(const nsMenuEvent & aMenuEvent,\\n+                                        nsIWidget* aParentWindow, void* aNode) = 0;\\n \\n     virtual nsEventStatus MenuDestruct(const nsMenuEvent & aMenuEvent) = 0;\\n     \\ndiff --git a/widget/src/cocoa/Makefile.in b/widget/src/cocoa/Makefile.in\\nindex d05063c..ddf759e 100644\\n--- a/widget/src/cocoa/Makefile.in\\n+++ b/widget/src/cocoa/Makefile.in\\n@@ -56,8 +56,6 @@ REQUIRES = xpcom \\\\\\n \\t\\t  string \\\\\\n \\t\\t  uconv \\\\\\n \\t\\t  dom \\\\\\n-\\t\\t  webshell \\\\\\n-\\t\\t  docshell \\\\\\n \\t\\t  plugin \\\\\\n \\t\\t  content \\\\\\n \\t\\t  layout \\\\\\ndiff --git a/widget/src/cocoa/nsMenuBarX.h b/widget/src/cocoa/nsMenuBarX.h\\nindex 74408a3..72505b5 100644\\n--- a/widget/src/cocoa/nsMenuBarX.h\\n+++ b/widget/src/cocoa/nsMenuBarX.h\\n@@ -55,7 +55,6 @@\\n class nsIWidget;\\n class nsIDocument;\\n class nsIDOMNode;\\n-class nsIDocShell;\\n \\n extern \\\"C\\\" MenuRef _NSGetCarbonMenu(NSMenu* aMenu);\\n \\n@@ -63,8 +62,7 @@ PRBool NodeIsHiddenOrCollapsed(nsIContent* inContent);\\n \\n namespace MenuHelpersX\\n {\\n-  nsEventStatus DispatchCommandTo(nsIWeakReference* aDocShellWeakRef,\\n-                                  nsIContent* aTargetContent);\\n+  nsEventStatus DispatchCommandTo(nsIContent* aTargetContent);\\n   NSString* CreateTruncatedCocoaLabel(const nsString& itemLabel);\\n   PRUint8 GeckoModifiersForNodeAttribute(const nsString& modifiersAttribute);\\n   unsigned int MacModifiersForGeckoModifiers(PRUint8 geckoModifiers);\\n@@ -110,7 +108,7 @@ public:\\n     nsEventStatus MenuSelected(const nsMenuEvent & aMenuEvent);\\n     nsEventStatus MenuDeselected(const nsMenuEvent & aMenuEvent);\\n     nsEventStatus MenuConstruct(const nsMenuEvent & aMenuEvent, nsIWidget * aParentWindow, \\n-                                void * menuNode, void * aDocShell);\\n+                                void * aMenuNode);\\n     nsEventStatus MenuDestruct(const nsMenuEvent & aMenuEvent);\\n     nsEventStatus CheckRebuild(PRBool & aMenuEvent);\\n     nsEventStatus SetRebuild(PRBool aMenuEvent);\\n@@ -134,9 +132,6 @@ public:\\n     NS_IMETHOD SetNativeData(void* aData);\\n     \\n protected:\\n-\\n-    void GetDocument(nsIDocShell* inDocShell, nsIDocument** outDocument) ;\\n-    void RegisterAsDocumentObserver(nsIDocShell* inDocShell);\\n     \\n     // Make our menubar conform to Aqua UI guidelines\\n     void AquifyMenuBar();\\n@@ -165,8 +160,6 @@ protected:\\n     PRBool                  mIsMenuBarAdded;\\n     PRUint32                mCurrentCommandID;    // unique command id (per menu-bar) to give to next item that asks\\n \\n-\\n-    nsWeakPtr               mDocShellWeakRef;     // weak ref to docshell\\n     nsIDocument*            mDocument;            // pointer to document\\n \\n     NSMenu*                 mRootMenu;            // root menu, representing entire menu bar\\ndiff --git a/widget/src/cocoa/nsMenuBarX.mm b/widget/src/cocoa/nsMenuBarX.mm\\nindex 71ef1dc..b69b623 100644\\n--- a/widget/src/cocoa/nsMenuBarX.mm\\n+++ b/widget/src/cocoa/nsMenuBarX.mm\\n@@ -53,8 +53,6 @@\\n #include \\\"nsString.h\\\"\\n #include \\\"nsIStringBundle.h\\\"\\n #include \\\"nsIDocument.h\\\"\\n-#include \\\"nsIDocShell.h\\\"\\n-#include \\\"nsIDocumentViewer.h\\\"\\n #include \\\"nsIMutationObserver.h\\\"\\n \\n #include \\\"nsIDOMDocument.h\\\"\\n@@ -207,41 +205,6 @@ nsMenuBarX::SetRebuild(PRBool aNeedsRebuild)\\n }\\n \\n \\n-void\\n-nsMenuBarX::GetDocument(nsIDocShell* inDocShell, nsIDocument** outDocument)\\n-{\\n-  *outDocument = nsnull;\\n-  \\n-  if (inDocShell) {\\n-    nsCOMPtr<nsIContentViewer> cv;\\n-    inDocShell->GetContentViewer(getter_AddRefs(cv));\\n-    if (cv) {\\n-      // get the document\\n-      nsCOMPtr<nsIDocumentViewer> docv(do_QueryInterface(cv));\\n-      if (!docv)\\n-        return;\\n-      docv->GetDocument(outDocument); // addrefs\\n-    }\\n-  }\\n-}\\n-\\n-\\n-void\\n-nsMenuBarX::RegisterAsDocumentObserver(nsIDocShell* inDocShell)\\n-{\\n-  nsCOMPtr<nsIDocument> doc;\\n-  GetDocument(inDocShell, getter_AddRefs(doc));\\n-  if (!doc)\\n-    return;\\n-  \\n-  // register ourselves\\n-  doc->AddMutationObserver(this);\\n-  // also get pointer to doc, just in case docshell goes away\\n-  // we can still remove ourself as doc observer directly from doc\\n-  mDocument = doc;\\n-}\\n-\\n-\\n // Do what's necessary to conform to the Aqua guidelines for menus. Initially, this\\n // means removing 'Quit' from the file menu and 'Preferences' from the edit menu, along\\n // with their various separators (if present).\\n@@ -384,8 +347,8 @@ nsMenuBarX::ExecuteCommand(nsIContent* inDispatchTo)\\n   if (!inDispatchTo)\\n     return nsEventStatus_eIgnore;\\n   \\n-  return MenuHelpersX::DispatchCommandTo(mDocShellWeakRef, inDispatchTo);\\n-} // ExecuteCommand\\n+  return MenuHelpersX::DispatchCommandTo(inDispatchTo);\\n+}\\n \\n \\n // Hide the item in the menu by setting the 'hidden' attribute. Returns it in |outHiddenNode| so\\n@@ -409,11 +372,10 @@ nsMenuBarX::HideItem(nsIDOMDocument* inDoc, const nsAString & inID, nsIContent**\\n \\n nsEventStatus\\n nsMenuBarX::MenuConstruct(const nsMenuEvent & aMenuEvent, nsIWidget* aParentWindow, \\n-                          void * menubarNode, void * aDocShell)\\n+                          void * aMenubarNode)\\n {\\n-  mDocShellWeakRef = do_GetWeakReference(static_cast<nsIDocShell*>(aDocShell));\\n-  nsIDOMNode* aDOMNode  = static_cast<nsIDOMNode*>(menubarNode);\\n-  mMenuBarContent = do_QueryInterface(aDOMNode); // strong ref\\n+  nsIDOMNode* domNode  = static_cast<nsIDOMNode*>(aMenubarNode);\\n+  mMenuBarContent = do_QueryInterface(domNode); // strong ref\\n   NS_ASSERTION(mMenuBarContent, \\\"No content specified for this menubar\\\");\\n   if (!mMenuBarContent)\\n     return nsEventStatus_eIgnore;\\n@@ -425,11 +387,15 @@ nsMenuBarX::MenuConstruct(const nsMenuEvent & aMenuEvent, nsIWidget* aParentWind\\n   OSStatus err = InstallCommandEventHandler();\\n   if (err)\\n     return nsEventStatus_eIgnore;\\n-  \\n-  nsCOMPtr<nsIDocShell> docShell = do_QueryReferent(mDocShellWeakRef);\\n-  if (docShell)\\n-    RegisterAsDocumentObserver(docShell);\\n-  \\n+\\n+  nsCOMPtr<nsIDOMDocument> domDoc;\\n+  domNode->GetOwnerDocument(getter_AddRefs(domDoc));\\n+  nsCOMPtr<nsIDocument> doc(do_QueryInterface(domDoc));\\n+  if (!doc)\\n+    return nsEventStatus_eIgnore;\\n+  doc->AddMutationObserver(this);\\n+  mDocument = doc;\\n+\\n   // set this as a nsMenuListener on aParentWindow\\n   aParentWindow->AddMenuListener((nsIMenuListener *)this);\\n   \\n@@ -1031,8 +997,7 @@ nsMenuBarX::Unregister(PRUint32 inCommandID)\\n \\n \\n nsEventStatus\\n-MenuHelpersX::DispatchCommandTo(nsIWeakReference* aDocShellWeakRef,\\n-                                nsIContent* aTargetContent)\\n+MenuHelpersX::DispatchCommandTo(nsIContent* aTargetContent)\\n {\\n   NS_PRECONDITION(aTargetContent, \\\"null ptr\\\");\\n \\ndiff --git a/widget/src/cocoa/nsMenuItemX.h b/widget/src/cocoa/nsMenuItemX.h\\nindex ff83676..b076267 100644\\n--- a/widget/src/cocoa/nsMenuItemX.h\\n+++ b/widget/src/cocoa/nsMenuItemX.h\\n@@ -50,7 +50,6 @@\\n #import <Cocoa/Cocoa.h>\\n \\n class nsIMenu;\\n-class nsIDocShell;\\n class nsMenuItemIconX;\\n \\n /**\\n@@ -97,7 +96,7 @@ public:\\n   nsEventStatus MenuSelected(const nsMenuEvent & aMenuEvent);\\n   nsEventStatus MenuDeselected(const nsMenuEvent & aMenuEvent);\\n   nsEventStatus MenuConstruct(const nsMenuEvent & aMenuEvent, nsIWidget * aParentWindow, \\n-                              void * menuNode, void * aDocShell);\\n+                              void * aMenuNode);\\n   nsEventStatus MenuDestruct(const nsMenuEvent & aMenuEvent);\\n   nsEventStatus CheckRebuild(PRBool & aMenuEvent);\\n   nsEventStatus SetRebuild(PRBool aMenuEvent);\\ndiff --git a/widget/src/cocoa/nsMenuItemX.mm b/widget/src/cocoa/nsMenuItemX.mm\\nindex 1ca20ee..c7fd902 100644\\n--- a/widget/src/cocoa/nsMenuItemX.mm\\n+++ b/widget/src/cocoa/nsMenuItemX.mm\\n@@ -53,7 +53,6 @@\\n #include \\\"nsIPrivateDOMEvent.h\\\"\\n #include \\\"nsIDOMEventTarget.h\\\"\\n #include \\\"nsIDOMDocumentEvent.h\\\"\\n-#include \\\"nsIDocShell.h\\\"\\n \\n #include \\\"nsMenuItemIconX.h\\\"\\n #include \\\"nsGUIEvent.h\\\"\\n@@ -281,8 +280,7 @@ nsEventStatus nsMenuItemX::MenuDeselected(const nsMenuEvent & aMenuEvent)\\n nsEventStatus nsMenuItemX::MenuConstruct(\\n     const nsMenuEvent & aMenuEvent,\\n     nsIWidget         * aParentWindow, \\n-    void              * menuNode,\\n-    void              * aDocShell)\\n+    void              * aMenuNode)\\n {\\n     return nsEventStatus_eIgnore;\\n }\\ndiff --git a/widget/src/cocoa/nsMenuX.h b/widget/src/cocoa/nsMenuX.h\\nindex b4cd55c..d4b6034 100644\\n--- a/widget/src/cocoa/nsMenuX.h\\n+++ b/widget/src/cocoa/nsMenuX.h\\n@@ -53,7 +53,6 @@\\n \\n class nsIMenuBar;\\n class nsIMenuListener;\\n-class nsIDocShell;\\n class nsMenuX;\\n class nsMenuItemIconX;\\n \\n@@ -90,7 +89,7 @@ public:\\n     nsEventStatus MenuSelected(const nsMenuEvent & aMenuEvent); \\n     nsEventStatus MenuDeselected(const nsMenuEvent & aMenuEvent); \\n     nsEventStatus MenuConstruct(const nsMenuEvent & aMenuEvent, nsIWidget * aParentWindow, \\n-                                void * menuNode, void * aDocShell);\\n+                                void * aMenuNode);\\n     nsEventStatus MenuDestruct(const nsMenuEvent & aMenuEvent);\\n     nsEventStatus CheckRebuild(PRBool & aMenuEvent);\\n     nsEventStatus SetRebuild(PRBool aMenuEvent);\\ndiff --git a/widget/src/cocoa/nsMenuX.mm b/widget/src/cocoa/nsMenuX.mm\\nindex 1e5162d..4bd25d6 100644\\n--- a/widget/src/cocoa/nsMenuX.mm\\n+++ b/widget/src/cocoa/nsMenuX.mm\\n@@ -40,10 +40,8 @@\\n #include \\\"nsIDocument.h\\\"\\n #include \\\"nsIContent.h\\\"\\n #include \\\"nsIDOMDocument.h\\\"\\n-#include \\\"nsIDocumentViewer.h\\\"\\n #include \\\"nsIDocumentObserver.h\\\"\\n #include \\\"nsIComponentManager.h\\\"\\n-#include \\\"nsIDocShell.h\\\"\\n #include \\\"prinrval.h\\\"\\n #include \\\"nsIRollupListener.h\\\"\\n \\n@@ -159,7 +157,7 @@ nsMenuX::Create(nsISupports * aParent, const nsAString &aLabel, const nsAString\\n   // is actually selected, then we can't access keyboard commands until the\\n   // menu gets selected, which is bad.\\n   nsMenuEvent fake(PR_TRUE, 0, nsnull);\\n-  MenuConstruct(fake, nsnull, nsnull, nsnull);\\n+  MenuConstruct(fake, nsnull, nsnull);\\n   \\n   if (menu)\\n     mIcon = new nsMenuItemIconX(static_cast<nsIMenu*>(this), menu, mMenuContent, mNativeMenuItem);\\n@@ -476,7 +474,7 @@ nsEventStatus nsMenuX::MenuSelected(const nsMenuEvent & aMenuEvent)\\n       if (mNeedsRebuild)\\n         RemoveAll();\\n \\n-      MenuConstruct(aMenuEvent, nsnull, nsnull, nsnull);\\n+      MenuConstruct(aMenuEvent, nsnull, nsnull);\\n       mConstructed = true;\\n     }\\n \\n@@ -515,8 +513,7 @@ nsEventStatus nsMenuX::MenuDeselected(const nsMenuEvent & aMenuEvent)\\n nsEventStatus nsMenuX::MenuConstruct(\\n     const nsMenuEvent & aMenuEvent,\\n     nsIWidget         * aParentWindow, \\n-    void              * /* menuNode */,\\n-    void              * aDocShell)\\n+    void              * aMenuNode)\\n {\\n   mConstructed = false;\\n   gConstructingMenu = PR_TRUE;\\ndiff --git a/xpfe/appshell/src/nsWebShellWindow.cpp b/xpfe/appshell/src/nsWebShellWindow.cpp\\nindex 9ab19cc..086dd66 100644\\n--- a/xpfe/appshell/src/nsWebShellWindow.cpp\\n+++ b/xpfe/appshell/src/nsWebShellWindow.cpp\\n@@ -494,7 +494,7 @@ nsWebShellWindow::HandleEvent(nsGUIEvent *aEvent)\\n }\\n \\n #ifdef USE_NATIVE_MENUS\\n-static void LoadNativeMenus(nsIDOMDocument *aDOMDoc, nsIWidget *aParentWindow, nsIDocShell *aDocShell)\\n+static void LoadNativeMenus(nsIDOMDocument *aDOMDoc, nsIWidget *aParentWindow)\\n {\\n   // Find the menubar tag (if there is more than one, we ignore all but\\n   // the first).\\n@@ -519,7 +519,7 @@ static void LoadNativeMenus(nsIDOMDocument *aDOMDoc, nsIWidget *aParentWindow, n\\n \\n   // fake event\\n   nsMenuEvent fake(PR_TRUE, 0, nsnull);\\n-  menuListener->MenuConstruct(fake, aParentWindow, menubarNode, aDocShell);\\n+  menuListener->MenuConstruct(fake, aParentWindow, menubarNode);\\n }\\n #endif\\n \\n@@ -608,9 +608,7 @@ nsWebShellWindow::OnStateChange(nsIWebProgress *aProgress,\\n   ///////////////////////////////\\n   nsCOMPtr<nsIDOMDocument> menubarDOMDoc(GetNamedDOMDoc(NS_LITERAL_STRING(\\\"this\\\"))); // XXX \\\"this\\\" is a small kludge for code reused\\n   if (menubarDOMDoc)\\n-  {\\n-    LoadNativeMenus(menubarDOMDoc, mWindow, mDocShell);\\n-  }\\n+    LoadNativeMenus(menubarDOMDoc, mWindow);\\n #endif // USE_NATIVE_MENUS\\n \\n   OnChromeLoaded();\\n\""}