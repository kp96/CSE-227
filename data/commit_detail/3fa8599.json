{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas3fa8599\""},"diff":"\"3fa8599 Bug 396870 - Add file in use uninstall support (also fixes bug 252273). r=sspitzer, a1.9=mconnor\\ndiff --git a/browser/installer/windows/nsis/installer.nsi b/browser/installer/windows/nsis/installer.nsi\\nindex 410eabe..c175bfd 100755\\n--- a/browser/installer/windows/nsis/installer.nsi\\n+++ b/browser/installer/windows/nsis/installer.nsi\\n@@ -52,6 +52,7 @@ CRCCheck on\\n !system 'echo ; > options.ini'\\n !system 'echo ; > components.ini'\\n !system 'echo ; > shortcuts.ini'\\n+!system 'echo ; > summary.ini'\\n \\n Var TmpVal\\n Var StartMenuDir\\n@@ -105,6 +106,7 @@ VIAddVersionKey \\\"FileDescription\\\" \\\"${BrandShortName} Installer\\\"\\n !insertmacro AddHandlerValues\\n !insertmacro CloseApp\\n !insertmacro CreateRegKey\\n+!insertmacro ManualCloseAppPrompt\\n !insertmacro RegCleanMain\\n !insertmacro RegCleanUninstall\\n !insertmacro WriteRegStr2\\n@@ -129,6 +131,7 @@ ShowInstDetails nevershow\\n ReserveFile options.ini\\n ReserveFile components.ini\\n ReserveFile shortcuts.ini\\n+ReserveFile summary.ini\\n \\n ################################################################################\\n # Modern User Interface - MUI\\n@@ -181,8 +184,10 @@ Page custom preShortcuts leaveShortcuts\\n !define MUI_STARTMENUPAGE_REGISTRY_VALUENAME \\\"Start Menu Folder\\\"\\n !insertmacro MUI_PAGE_STARTMENU Application $StartMenuDir\\n \\n+; Custom Summary Page\\n+Page custom preSummary leaveSummary\\n+\\n ; Install Files Page\\n-!define MUI_PAGE_CUSTOMFUNCTION_PRE preInstFiles\\n !insertmacro MUI_PAGE_INSTFILES\\n \\n ; Finish Page\\n@@ -534,7 +539,7 @@ Function CopyFile\\n       ${If} ${Errors}\\n         ${LogMsg}  \\\"** ERROR Creating Directory: $R1$R3\\\\$R7 **\\\"\\n         StrCpy $0 \\\"$R1$R3\\\\$R7\\\"\\n-        ${WordReplace} \\\"$(^FileError_NoIgnore)\\\" \\\"\\\\r\\\\n\\\" \\\"$\\\\r$\\\\n\\\" \\\"+*\\\" $0\\n+        StrCpy $0 \\\"$(ERROR_CREATE_DIRECTORY)\\\"\\n         MessageBox MB_RETRYCANCEL|MB_ICONQUESTION \\\"$0\\\" IDRETRY retry\\n         Quit\\n       ${Else}\\n@@ -548,7 +553,7 @@ Function CopyFile\\n       ${If} ${Errors}\\n         ${LogMsg}  \\\"** ERROR Creating Directory: $R1$R3 **\\\"\\n         StrCpy $0 \\\"$R1$R3\\\"\\n-        ${WordReplace} \\\"$(^FileError_NoIgnore)\\\" \\\"\\\\r\\\\n\\\" \\\"$\\\\r$\\\\n\\\" \\\"+*\\\" $0\\n+        StrCpy $0 \\\"$(ERROR_CREATE_DIRECTORY)\\\"\\n         MessageBox MB_RETRYCANCEL|MB_ICONQUESTION \\\"$0\\\" IDRETRY retry\\n         Quit\\n       ${Else}\\n@@ -590,7 +595,7 @@ Function CopyFile\\n FunctionEnd\\n \\n Function LaunchApp\\n-  ${CloseApp} \\\"true\\\" $(WARN_APP_RUNNING_INSTALL)\\n+  ${ManualCloseAppPrompt} \\\"${WindowClass}\\\" \\\"$(WARN_MANUALLY_CLOSE_APP_LAUNCH)\\\"\\n   Exec \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n FunctionEnd\\n \\n@@ -677,7 +682,26 @@ Function preStartMenu\\n   ${EndIf}\\n FunctionEnd\\n \\n-Function preInstFiles\\n+Function preSummary\\n+  !insertmacro createSummaryINI\\n+  !insertmacro MUI_HEADER_TEXT \\\"$(SUMMARY_PAGE_TITLE)\\\" \\\"$(SUMMARY_PAGE_SUBTITLE)\\\"\\n+\\n+  ; The Summary custom page has a textbox that will automatically receive\\n+  ; focus. This sets the focus to the Install button instead.\\n+  !insertmacro MUI_INSTALLOPTIONS_INITDIALOG \\\"summary.ini\\\"\\n+  GetDlgItem $0 $HWNDPARENT 1\\n+  System::Call \\\"user32::SetFocus(i r0, i 0x0007, i,i)i\\\"\\n+  !insertmacro MUI_INSTALLOPTIONS_SHOW\\n+FunctionEnd\\n+\\n+Function leaveSummary\\n+  ; If there is a pending deletion from a previous uninstall don't allow\\n+  ; installing until after the system has rebooted.\\n+  IfFileExists \\\"$INSTDIR\\\\${FileMainEXE}.moz-delete\\\" +1 +4\\n+  MessageBox MB_YESNO \\\"$(WARN_RESTART_REQUIRED_UNINSTALL)\\\" IDNO +2\\n+  Reboot\\n+  Quit\\n+\\n   ${If} $InstallType != ${INSTALLTYPE_CUSTOM}\\n     ; Set DOMi to be installed\\n     SectionSetFlags ${DOMI_IDX} 1\\n@@ -700,6 +724,7 @@ Function .onInit\\n   !insertmacro MUI_INSTALLOPTIONS_EXTRACT \\\"options.ini\\\"\\n   !insertmacro MUI_INSTALLOPTIONS_EXTRACT \\\"components.ini\\\"\\n   !insertmacro MUI_INSTALLOPTIONS_EXTRACT \\\"shortcuts.ini\\\"\\n+  !insertmacro MUI_INSTALLOPTIONS_EXTRACT \\\"summary.ini\\\"\\n   !insertmacro createBasicCustomOptionsINI\\n   !insertmacro createComponentsINI\\n   !insertmacro createShortcutsINI\\ndiff --git a/browser/installer/windows/nsis/uninstaller.nsi b/browser/installer/windows/nsis/uninstaller.nsi\\nindex b397a068..e790fda 100755\\n--- a/browser/installer/windows/nsis/uninstaller.nsi\\n+++ b/browser/installer/windows/nsis/uninstaller.nsi\\n@@ -101,9 +101,9 @@ VIAddVersionKey \\\"FileDescription\\\" \\\"${BrandShortName} Helper\\\"\\n !insertmacro WriteRegStr2\\n \\n !insertmacro un.CleanVirtualStore\\n-!insertmacro un.CloseApp\\n !insertmacro un.GetLongPath\\n !insertmacro un.GetSecondInstallPath\\n+!insertmacro un.ManualCloseAppPrompt\\n !insertmacro un.ParseUninstallLog\\n !insertmacro un.RegCleanMain\\n !insertmacro un.RegCleanUninstall\\n@@ -145,10 +145,10 @@ ShowUnInstDetails nevershow\\n !insertmacro MUI_UNPAGE_WELCOME\\n \\n ; Uninstall Confirm Page\\n+!define MUI_PAGE_CUSTOMFUNCTION_LEAVE un.leaveConfirm\\n !insertmacro MUI_UNPAGE_CONFIRM\\n \\n ; Remove Files Page\\n-!define MUI_PAGE_CUSTOMFUNCTION_PRE un.preInstFiles\\n !insertmacro MUI_UNPAGE_INSTFILES\\n \\n ; Finish Page\\n@@ -179,6 +179,18 @@ Section \\\"Uninstall\\\"\\n   DetailPrint $(STATUS_UNINSTALL_MAIN)\\n   SetDetailsPrint none\\n \\n+  ; Delete the app exe to prevent launching the app while we are uninstalling.\\n+  ClearErrors\\n+  ${DeleteFile} \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n+  ${If} ${Errors}\\n+    ; If the user closed the application it can take several seconds for it to\\n+    ; shut down completely. If the application is being used by another user we\\n+    ; can still delete the files when the system is restarted. \\n+    Sleep 5000\\n+    ${DeleteFile} \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n+    ClearErrors\\n+  ${EndIf}\\n+\\n   ; Remove registry entries for non-existent apps and for apps that point to our\\n   ; install location in the Software\\\\Mozilla key and uninstall registry entries\\n   ; that point to our install location for both HKCU and HKLM.\\n@@ -237,18 +249,27 @@ Section \\\"Uninstall\\\"\\n     ${EndIf}\\n   ${EndIf}\\n \\n-  ; Remove directories and files we always control\\n-  RmDir /r \\\"$INSTDIR\\\\updates\\\"\\n-  RmDir /r \\\"$INSTDIR\\\\defaults\\\\shortcuts\\\"\\n-  RmDir /r \\\"$INSTDIR\\\\distribution\\\"\\n-  Delete \\\"$INSTDIR\\\\removed-files\\\"\\n+  ; Remove directories and files we always control before parsing the uninstall\\n+  ; log so empty directories can be removed.\\n+  ${If} ${FileExists} \\\"$INSTDIR\\\\updates\\\"\\n+    RmDir /r /REBOOTOK \\\"$INSTDIR\\\\updates\\\"\\n+  ${EndIf}\\n+  ${If} ${FileExists} \\\"$INSTDIR\\\\defaults\\\\shortcuts\\\"\\n+    RmDir /r /REBOOTOK \\\"$INSTDIR\\\\defaults\\\\shortcuts\\\"\\n+  ${EndIf}\\n+  ${If} ${FileExists} \\\"$INSTDIR\\\\distribution\\\"\\n+    RmDir /r /REBOOTOK \\\"$INSTDIR\\\\distribution\\\"\\n+  ${EndIf}\\n+  ${If} ${FileExists} \\\"$INSTDIR\\\\removed-files\\\"\\n+    Delete /REBOOTOK \\\"$INSTDIR\\\\removed-files\\\"\\n+  ${EndIf}\\n \\n   ; Parse the uninstall log to unregister dll's and remove all installed\\n   ; files / directories this install is responsible for.\\n   ${un.ParseUninstallLog}\\n \\n   ; Remove the uninstall directory that we control\\n-  RmDir /r \\\"$INSTDIR\\\\uninstall\\\"\\n+  RmDir /r /REBOOTOK \\\"$INSTDIR\\\\uninstall\\\"\\n \\n   ; Remove the installation directory if it is empty\\n   ${RemoveDir} \\\"$INSTDIR\\\"\\n@@ -257,6 +278,19 @@ Section \\\"Uninstall\\\"\\n   ; VirtualStore directory.\\n   ${un.CleanVirtualStore}\\n \\n+  ; If firefox.exe was successfully deleted yet we still need to restart to\\n+  ; remove other files create a dummy firefox.exe.moz-delete to prevent the\\n+  ; installer from allowing an install without restart when it is required\\n+  ; to complete an uninstall.\\n+  ${If} ${RebootFlag}\\n+    ${Unless} ${FileExists} \\\"$INSTDIR\\\\${FileMainEXE}.moz-delete\\\"\\n+      FileOpen $0 \\\"$INSTDIR\\\\${FileMainEXE}.moz-delete\\\" w\\n+      FileWrite $0 \\\"Will be deleted on restart\\\"\\n+      Delete /REBOOTOK \\\"$INSTDIR\\\\${FileMainEXE}.moz-delete\\\"\\n+      FileClose $0\\n+    ${EndUnless}\\n+  ${EndIf}\\n+\\n   ; Refresh desktop icons otherwise the start menu internet item won't be\\n   ; removed and other ugly things will happen like recreation of the app's\\n   ; clients registry key by the OS under some conditions.\\n@@ -292,38 +326,27 @@ BrandingText \\\" \\\"\\n # Page pre and leave functions\\n \\n ; Checks if the app being uninstalled is running.\\n-Function un.preInstFiles\\n-  ; Try to delete the app executable and if we can't delete it try to close the\\n-  ; app. This allows running an instance that is located in another directory.\\n+Function un.leaveConfirm\\n+  ; Try to delete the app executable and if we can't delete it try to find the\\n+  ; app's message window and prompt the user to close the app. This allows\\n+  ; running an instance that is located in another directory. If for whatever\\n+  ; reason there is no message window we will just rename the app's files and\\n+  ; then remove them on restart if they are in use.\\n+  StrCpy $TmpVal \\\"\\\"\\n   ClearErrors\\n-  ${If} ${FileExists} \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n-    ${DeleteFile} \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n-  ${EndIf}\\n+  ${DeleteFile} \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n   ${If} ${Errors}\\n-    ClearErrors\\n-    ${un.CloseApp} \\\"true\\\" $(WARN_APP_RUNNING_UNINSTALL)\\n-    ; Delete the app exe to prevent launching the app while we are uninstalling.\\n-    ClearErrors\\n-    ${DeleteFile} \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n-    ${If} ${Errors}\\n-      ClearErrors\\n-      ${un.CloseApp} \\\"true\\\" $(WARN_APP_RUNNING_UNINSTALL)\\n-      ClearErrors\\n-      ${DeleteFile} \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n-    ${EndIf}\\n+    ${un.ManualCloseAppPrompt} \\\"${WindowClass}\\\" \\\"$(WARN_MANUALLY_CLOSE_APP_UNINSTALL)\\\"\\n   ${EndIf}\\n FunctionEnd\\n \\n-; When we add an optional action to the finish page the cancel button is\\n-; enabled. This disables it and leaves the finish button as the only choice.\\n Function un.preFinish\\n-  !insertmacro MUI_INSTALLOPTIONS_WRITE \\\"ioSpecial.ini\\\" \\\"settings\\\" \\\"cancelenabled\\\" \\\"0\\\"\\n-\\n-  ; Setup the survey controls, functions, etc. except when the application has\\n-  ; defined NO_UNINSTALL_SURVEY\\n-  !ifdef NO_UNINSTALL_SURVEY\\n+  ; Do not modify the finish page if there is a reboot pending\\n+  ${Unless} ${RebootFlag}\\n+!ifdef NO_UNINSTALL_SURVEY\\n     !insertmacro MUI_INSTALLOPTIONS_WRITE \\\"ioSpecial.ini\\\" \\\"settings\\\" \\\"NumFields\\\" \\\"3\\\"\\n-  !else\\n+!else\\n+    ; Setup the survey controls, functions, etc.\\n     StrCpy $TmpVal \\\"SOFTWARE\\\\Microsoft\\\\IE Setup\\\\Setup\\\"\\n     ClearErrors\\n     ReadRegStr $0 HKLM $TmpVal \\\"Path\\\"\\n@@ -339,9 +362,15 @@ Function un.preFinish\\n       GetFullPathName $TmpVal $0\\n       ${If} ${Errors}\\n         !insertmacro MUI_INSTALLOPTIONS_WRITE \\\"ioSpecial.ini\\\" \\\"settings\\\" \\\"NumFields\\\" \\\"3\\\"\\n+      ${Else}\\n+        ; When we add an optional action to the finish page the cancel button\\n+        ; is enabled. This disables it and leaves the finish button as the\\n+        ; only choice.\\n+        !insertmacro MUI_INSTALLOPTIONS_WRITE \\\"ioSpecial.ini\\\" \\\"settings\\\" \\\"cancelenabled\\\" \\\"0\\\"\\n       ${EndIf}\\n     ${EndIf}\\n-  !endif\\n+!endif\\n+  ${EndUnless}\\n FunctionEnd\\n \\n ################################################################################\\ndiff --git a/browser/locales/en-US/installer/custom.properties b/browser/locales/en-US/installer/custom.properties\\nindex 88d782a..da0174a 100755\\n--- a/browser/locales/en-US/installer/custom.properties\\n+++ b/browser/locales/en-US/installer/custom.properties\\n@@ -62,17 +62,24 @@ OPTIONS_PAGE_TITLE=Setup Type\\n OPTIONS_PAGE_SUBTITLE=Choose setup options\\n SHORTCUTS_PAGE_TITLE=Set Up Shortcuts\\n SHORTCUTS_PAGE_SUBTITLE=Create Program Icons\\n+SUMMARY_PAGE_TITLE=Summary\\n+SUMMARY_PAGE_SUBTITLE=Ready to start installing ${BrandShortName}\\n+SUMMARY_INSTALLED_TO=${BrandShortName} will be installed to the following location:\\n+SUMMARY_CLICK=Click Install to continue.\\n SURVEY_TEXT=&Tell us what you thought of ${BrandShortName}\\n LAUNCH_TEXT=&Launch ${BrandFullName} now\\n WARN_APP_RUNNING_INSTALL=${BrandFullName} must be closed to proceed with the installation.\\\\n\\\\nClick \\\"OK\\\" to exit ${BrandFullName} automatically and continue.\\n-WARN_APP_RUNNING_UNINSTALL=${BrandFullName} must be closed to proceed with the uninstall.\\\\n\\\\nClick \\\"OK\\\" to exit ${BrandFullName} automatically and continue.\\n CREATE_ICONS_DESC=Create icons for ${BrandShortName}:\\n ICONS_DESKTOP=On my &Desktop\\n ICONS_STARTMENU=In my &Start Menu Programs folder\\n ICONS_QUICKLAUNCH=In my &Quick Launch bar\\n+WARN_MANUALLY_CLOSE_APP_UNINSTALL=${BrandFullName} must be closed to proceed with the uninstall.\\\\n\\\\nPlease close ${BrandFullName} to continue.\\n+WARN_MANUALLY_CLOSE_APP_LAUNCH=${BrandFullName} is already running.\\\\n\\\\nPlease close ${BrandFullName} prior to launching the version you have just installed.\\n WARN_WRITE_ACCESS=You don't have access to write to the installation directory.\\\\n\\\\nClick OK to select a different directory.\\n WARN_DISK_SPACE=You don't have sufficient disk space to install to this location.\\\\n\\\\nClick OK to select a different location.\\n WARN_UNSUPPORTED_MSG=Sorry, ${BrandShortName} can't be installed. This version of ${BrandShortName} requires ${MinUnsupportedVer} or newer.\\n+WARN_RESTART_REQUIRED_UNINSTALL=Your computer must be restarted to complete a previous uninstall of ${BrandShortName}. Do you want to reboot now?\\n+ERROR_CREATE_DIRECTORY=Error creating directory:\\\\n\\\\n$0\\\\n\\\\nClick Cancel to stop the installation or\\\\nRetry to try again.\\n \\n STATUS_INSTALL_APP=Installing ${BrandShortName}...\\n STATUS_INSTALL_LANG=Installing Language Files (${AB_CD})...\\ndiff --git a/toolkit/mozapps/installer/windows/nsis/common.nsh b/toolkit/mozapps/installer/windows/nsis/common.nsh\\nindex 0dd1b34..64b004a 100755\\n--- a/toolkit/mozapps/installer/windows/nsis/common.nsh\\n+++ b/toolkit/mozapps/installer/windows/nsis/common.nsh\\n@@ -499,6 +499,37 @@\\n   WriteINIStr \\\"$PLUGINSDIR\\\\options.ini\\\" \\\"Field 7\\\" Bottom \\\"117\\\"\\n !macroend\\n \\n+!macro createSummaryINI\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Settings\\\" NumFields \\\"3\\\"\\n+\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 1\\\" Type   \\\"label\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 1\\\" Text   \\\"$(SUMMARY_INSTALLED_TO)\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 1\\\" Left   \\\"0\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 1\\\" Right  \\\"-1\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 1\\\" Top    \\\"5\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 1\\\" Bottom \\\"15\\\"\\n+\\n+  ; XXXrstrong - a side affect of using a READONLY textbox is if the path is\\n+  ; longer than the visible area of the textbox it will display the characters\\n+  ; at the end and the beginning of the path will be hidden. Since the path has\\n+  ; to be greater than 74 characters in length I'm not going to spend any\\n+  ; cycles trying to come up with a workaround.\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 2\\\" Type   \\\"text\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 2\\\" state  \\\"$INSTDIR\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 2\\\" Left   \\\"0\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 2\\\" Right  \\\"-1\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 2\\\" Top    \\\"17\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 2\\\" Bottom \\\"30\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 2\\\" flags  \\\"READONLY\\\"\\n+\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 3\\\" Type   \\\"label\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 3\\\" Text   \\\"$(SUMMARY_CLICK)\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 3\\\" Left   \\\"0\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 3\\\" Right  \\\"-1\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 3\\\" Top    \\\"130\\\"\\n+  WriteINIStr \\\"$PLUGINSDIR\\\\summary.ini\\\" \\\"Field 3\\\" Bottom \\\"150\\\"\\n+!macroend\\n+\\n /**\\n  * DEPRECATED - use GetParent instead.\\n  */\\n@@ -568,7 +599,7 @@\\n \\n \\n ################################################################################\\n-# Macros for creating Install Options ini files\\n+# Macros for handling files in use\\n \\n /**\\n  * The macros below will automatically prepend un. to the function names when\\n@@ -594,6 +625,80 @@\\n !macroend\\n \\n /**\\n+ * Displays a MessageBox and then calls abort to prevent continuing to the\\n+ * next page when the specified Window Class is found.\\n+ *\\n+ * @param   _WINDOW_CLASS\\n+ *          The Window Class to search for with FindWindow.\\n+ * @param   _MSG\\n+ *          The message text to display in the message box.\\n+ *\\n+ * $R7 = return value from FindWindow\\n+ * $R8 = _WINDOW_CLASS\\n+ * $R9 = _MSG\\n+ */\\n+!macro ManualCloseAppPrompt\\n+\\n+  !ifndef ${_MOZFUNC_UN}ManualCloseAppPrompt\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !define ${_MOZFUNC_UN}ManualCloseAppPrompt \\\"!insertmacro ${_MOZFUNC_UN}ManualCloseAppPromptCall\\\"\\n+\\n+    Function ${_MOZFUNC_UN}ManualCloseAppPrompt\\n+      Exch $R9\\n+      Exch 1\\n+      Exch $R8\\n+      Push $R7\\n+\\n+      FindWindow $R7 \\\"$R8\\\"\\n+      IntCmp $R7 0 +3 +1 +1\\n+      MessageBox MB_OK|MB_ICONQUESTION \\\"$R9\\\"\\n+      Abort\\n+\\n+      Pop $R7\\n+      Exch $R8\\n+      Exch 1\\n+      Exch $R9\\n+    FunctionEnd\\n+\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+!macro ManualCloseAppPromptCall _WINDOW_CLASS _MSG\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_WINDOW_CLASS}\\\"\\n+  Push \\\"${_MSG}\\\"\\n+  Call ManualCloseAppPrompt\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.ManualCloseAppPromptCall _WINDOW_CLASS _MSG\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_WINDOW_CLASS}\\\"\\n+  Push \\\"${_MSG}\\\"\\n+  Call un.ManualCloseAppPrompt\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.ManualCloseAppPrompt\\n+  !ifndef un.ManualCloseAppPrompt\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN \\\"un.\\\"\\n+\\n+    !insertmacro ManualCloseAppPrompt\\n+\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+/**\\n  * Posts WM_QUIT to the application's message window which is found using the\\n  * message window's class. This macro uses the nsProcess plugin available\\n  * from http://nsis.sourceforge.net/NsProcess_plugin\\n@@ -2770,7 +2875,7 @@\\n       ${un.LineFind} \\\"$TmpVal\\\" \\\"/NUL\\\" \\\"1:-1\\\" \\\"un.RemoveDirsCallback\\\"\\n \\n       ; Delete the temporary uninstall log file\\n-      ${DeleteFile} \\\"$TmpVal\\\"\\n+      Delete /REBOOTOK \\\"$TmpVal\\\"\\n \\n       end:\\n \\n@@ -2798,7 +2903,16 @@\\n       StrCmp \\\"$R0\\\" \\\"\\\\\\\" +2 +1\\n       StrCpy $R1 \\\"$R9\\\"\\n \\n-      ${DeleteFile} \\\"$R1\\\"\\n+      IfFileExists \\\"$R1\\\" +1 end\\n+      Delete \\\"$R1\\\"\\n+      IfErrors +1 end\\n+      ClearErrors\\n+      Rename \\\"$R1\\\" \\\"$R1.moz-delete\\\"\\n+      IfErrors +1 +3\\n+      Delete /REBOOTOK \\\"$R1\\\"\\n+      GoTo end\\n+\\n+      Delete /REBOOTOK \\\"$R1.moz-delete\\\"\\n \\n       end:\\n       ClearErrors\\n\""}