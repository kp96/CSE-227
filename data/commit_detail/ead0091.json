{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basead0091\""},"diff":"\"ead0091 sync engine fixes; logging improvements; try to ensure that property keys are always strings\\ndiff --git a/services/sync/nsBookmarksSyncService.js b/services/sync/nsBookmarksSyncService.js\\nindex 463d366..7a771b9 100644\\n--- a/services/sync/nsBookmarksSyncService.js\\n+++ b/services/sync/nsBookmarksSyncService.js\\n@@ -155,6 +155,8 @@ BookmarksSyncService.prototype = {\\n   },\\n \\n   _saveSnapshot: function BSS__saveSnapshot() {\\n+    this.notice(\\\"Saving snapshot to disk\\\");\\n+\\n     let dirSvc = Cc[\\\"@mozilla.org/file/directory_service;1\\\"].\\n       getService(Ci.nsIProperties);\\n \\n@@ -329,6 +331,11 @@ BookmarksSyncService.prototype = {\\n     if (a.action != b.action)\\n       return false;\\n \\n+    // Items with the same guid do not qualify - they need to be\\n+    // processed for edits\\n+    if (a.guid == b.guid)\\n+      return false;\\n+\\n     // this check works because reconcile() fixes up the parent guids\\n     // as it runs, and the command list is sorted by depth\\n     if (a.parentGuid != b.parentGuid)\\n@@ -429,6 +436,9 @@ BookmarksSyncService.prototype = {\\n           delete listA[i];\\n           delete listB[j];\\n         } else if (this._commandLike(listA[i], listB[j])) {\\n+          // Disregard likeness if the target guid already exists locally\\n+          if (this._bms.getItemIdForGUID(listB[j].guid) >= 0)\\n+            continue;\\n           this._fixParents(listA, listA[i].guid, listB[j].guid);\\n           listB[j].data = {guid: listB[j].guid};\\n           listB[j].guid = listA[i].guid;\\n@@ -629,58 +639,33 @@ BookmarksSyncService.prototype = {\\n       folder = this._bms.bookmarksRoot;\\n     var query = this._hsvc.getNewQuery();\\n     query.setFolders([folder], 1);\\n-    return this._hsvc.executeQuery(query, this._hsvc.getNewQueryOptions()).root;\\n-  },\\n-\\n-  // FIXME: these print functions need some love...\\n-  _mungeJSON: function BSS__mungeJSON(json) {\\n-    json.replace(\\\":{type\\\", \\\":\\\\n\\\\t{type\\\");\\n-    json.replace(\\\", \\\", \\\",\\\\n\\\\t\\\");\\n+    let root = this._hsvc.executeQuery(query, this._hsvc.getNewQueryOptions()).root;\\n+    return this._wrapNode(root);\\n+  },\\n+\\n+  _mungeNodes: function BSS__mungeNodes(nodes) {\\n+    let json = uneval(nodes);\\n+    json = json.replace(/:{type/g, \\\":\\\\n\\\\t{type\\\");\\n+    json = json.replace(/}, /g, \\\"},\\\\n  \\\");\\n+    json = json.replace(/, parentGuid/g, \\\",\\\\n\\\\t parentGuid\\\");\\n+    json = json.replace(/, index/g, \\\",\\\\n\\\\t index\\\");\\n+    json = json.replace(/, title/g, \\\",\\\\n\\\\t title\\\");\\n+    json = json.replace(/, uri/g, \\\",\\\\n\\\\t uri\\\");\\n     return json;\\n   },\\n \\n-  _printNodes: function BSS__printNodes(nodes) {\\n-    let nodeList = [];\\n-    for (let guid in nodes) {\\n-      switch (nodes[guid].type) {\\n-      case 0:\\n-        nodeList.push(nodes[guid].parentGuid + \\\" b \\\" + guid + \\\"\\\\n\\\\t\\\" +\\n-                      nodes[guid].title + nodes[guid].uri);\\n-        break;\\n-      case 6:\\n-        nodeList.push(nodes[guid].parentGuid + \\\" f \\\" + guid + \\\"\\\\n\\\\t\\\" +\\n-                      nodes[guid].title);\\n-        break;\\n-      case 7:\\n-        nodeList.push(nodes[guid].parentGuid + \\\" s \\\" + guid);\\n-        break;\\n-      default:\\n-        nodeList.push(\\\"error: unknown item type!\\\\n\\\" + uneval(nodes[guid]));\\n-        break;\\n-      }\\n-    }\\n-    nodeList.sort();\\n-    return nodeList.join(\\\"\\\\n\\\");\\n+  _mungeCommands: function BSS__mungeCommands(commands) {\\n+    let json = uneval(commands);\\n+    json = json.replace(/ {action/g, \\\"\\\\n {action\\\");\\n+    //json = json.replace(/, data/g, \\\",\\\\n  data\\\");\\n+    return json;\\n   },\\n \\n-  _printCommands: function BSS__printCommands(commands) {\\n-    let ret = [];\\n-    for (let i = 0; i < commands.length; i++) {\\n-      switch (commands[i].action) {\\n-      case \\\"create\\\":\\n-        ret.push(\\\"create\\\");\\n-        break;\\n-      case \\\"edit\\\":\\n-        ret.push();\\n-        break;\\n-      case \\\"remove\\\":\\n-        ret.push();\\n-        break;\\n-      default:\\n-        ret.push(\\\"error: unknown command action!\\\\n\\\" + uneval(commands[i]));\\n-        break;\\n-      }\\n-    }\\n+  _mungeConflicts: function BSS__mungeConflicts(conflicts) {\\n+    let json = uneval(conflicts);\\n+    json = json.replace(/ {action/g, \\\"\\\\n {action\\\");\\n+    //json = json.replace(/, data/g, \\\",\\\\n  data\\\");\\n+    return json;\\n   },\\n \\n   // 1) Fetch server deltas\\n@@ -703,9 +688,8 @@ BookmarksSyncService.prototype = {\\n       //var data = yield;\\n       var data;\\n \\n-      var localBookmarks = this._getBookmarks();\\n-      var localJson = this._wrapNode(localBookmarks);\\n-      this.notice(\\\"local json:\\\\n\\\" + this._mungeJSON(uneval(localJson)));\\n+      var localJson = this._getBookmarks();\\n+      this.notice(\\\"local json:\\\\n\\\" + this._mungeNodes(localJson));\\n \\n       // 1) Fetch server deltas\\n       let gsd_gen = this._getServerData(handlers['complete'], localJson);\\n@@ -713,7 +697,16 @@ BookmarksSyncService.prototype = {\\n       gsd_gen.send(gsd_gen);\\n       let server = yield;\\n \\n-      this.notice(\\\"server: \\\" + uneval(server));\\n+      this.notice(\\\"Server status: \\\" + server.status);\\n+      this.notice(\\\"Server version: \\\" + server.version);\\n+      this.notice(\\\"Server version type: \\\" + typeof server.version);\\n+      this.notice(\\\"Local snapshot version: \\\" + this._snapshotVersion);\\n+\\n+      for (version in server.deltas) {\\n+        this.notice(\\\"Server delta \\\" + version + \\\":\\\\n\\\" +\\n+                    this._mungeCommands(server.deltas[version]));\\n+      }\\n+\\n       if (server['status'] == 2) {\\n         this._os.notifyObservers(null, \\\"bookmarks-sync:end\\\", \\\"\\\");\\n         this.notice(\\\"Sync complete\\\");\\n@@ -724,14 +717,10 @@ BookmarksSyncService.prototype = {\\n         return;\\n       }\\n \\n-      this.notice(\\\"Local snapshot version: \\\" + this._snapshotVersion);\\n-      this.notice(\\\"Latest server version: \\\" + server['version']);\\n-\\n       // 2) Generate local deltas from snapshot -> current client status\\n \\n-      this.notice(\\\"Generating local updates\\\");\\n-      var localUpdates = this._detectUpdates(this._snapshot, localJson);\\n-      this.notice(\\\"updates: \\\" + uneval(localUpdates));\\n+      let localUpdates = this._detectUpdates(this._snapshot, localJson);\\n+      this.notice(\\\"Local updates: \\\" + this._mungeCommands(localUpdates));\\n       if (!(server['status'] == 1 || localUpdates.length > 0)) {\\n         this._os.notifyObservers(null, \\\"bookmarks-sync:end\\\", \\\"\\\");\\n         this.notice(\\\"Sync complete (1): no changes needed on client or server\\\");\\n@@ -740,7 +729,7 @@ BookmarksSyncService.prototype = {\\n \\t  \\n       // 3) Reconcile client/server deltas and generate new deltas for them.\\n \\n-      this.notice(\\\"Reconciling updates\\\");\\n+      this.notice(\\\"Reconciling client/server updates\\\");\\n       let callback = function(retval) { continueGenerator(generator, retval); };\\n       let rec_gen = this._reconcile(callback, [localUpdates, server.updates]);\\n       rec_gen.next(); // must initialize before sending\\n@@ -764,17 +753,17 @@ BookmarksSyncService.prototype = {\\n       if (ret.conflicts && ret.conflicts[1])\\n         serverConflicts = ret.conflicts[1];\\n \\n-      this.notice(\\\"Changes for client: \\\" + uneval(clientChanges));\\n-      this.notice(\\\"Changes for server: \\\" + uneval(serverChanges));\\n-      this.notice(\\\"Client conflicts: \\\" + uneval(clientConflicts));\\n-      this.notice(\\\"Server conflicts: \\\" + uneval(serverConflicts));\\n+      this.notice(\\\"Changes for client: \\\" + this._mungeCommands(clientChanges));\\n+      this.notice(\\\"Changes for server: \\\" + this._mungeCommands(serverChanges));\\n+      this.notice(\\\"Client conflicts: \\\" + this._mungeConflicts(clientConflicts));\\n+      this.notice(\\\"Server conflicts: \\\" + this._mungeConflicts(serverConflicts));\\n \\n       if (!(clientChanges.length || serverChanges.length ||\\n             clientConflicts.length || serverConflicts.length)) {\\n         this._os.notifyObservers(null, \\\"bookmarks-sync:end\\\", \\\"\\\");\\n         this.notice(\\\"Sync complete (2): no changes needed on client or server\\\");\\n-        this._snapshot = this._wrapNode(localBookmarks);\\n-        this._snapshotVersion = server['version'];\\n+        this._snapshot = localJson;\\n+        this._snapshotVersion = server.version;\\n         this._saveSnapshot();\\n         return;\\n       }\\n@@ -788,17 +777,17 @@ BookmarksSyncService.prototype = {\\n         this.notice(\\\"Applying changes locally\\\");\\n         // Note that we need to need to apply client changes to the\\n         // current tree, not the saved snapshot\\n-        this._snapshot = this._applyCommandsToObj(clientChanges,\\n-                                                  this._wrapNode(localBookmarks));\\n+\\n+        this._snapshot = this._applyCommandsToObj(clientChanges, localJson);\\n         this._snapshotVersion = server['version'];\\n         this._applyCommands(clientChanges);\\n \\n-        let newSnapshot = this._wrapNode(localBookmarks);\\n+        let newSnapshot = this._getBookmarks();\\n         let diff = this._detectUpdates(this._snapshot, newSnapshot);\\n         if (diff.length != 0) {\\n           this.notice(\\\"Error: commands did not apply correctly.  Diff:\\\\n\\\" +\\n                       uneval(diff));\\n-          this._snapshot = this._wrapNode(localBookmarks);\\n+          this._snapshot = newSnapshot;\\n           // FIXME: What else can we do?\\n         }\\n         this._saveSnapshot();\\n@@ -807,9 +796,9 @@ BookmarksSyncService.prototype = {\\n       // 3.2) Append server delta to the delta file and upload\\n       if (serverChanges.length) {\\n         this.notice(\\\"Uploading changes to server\\\");\\n-        this._snapshot = this._wrapNode(localBookmarks);\\n+        this._snapshot = this._getBookmarks();\\n         this._snapshotVersion = server['version'] + 1;\\n-        server['deltas'][this._snapshotVersion] = serverChanges;\\n+        server['deltas']['version ' + this._snapshotVersion] = serverChanges;\\n         this._dav.PUT(\\\"bookmarks.delta\\\", uneval(server['deltas']), handlers);\\n         data = yield;\\n \\n@@ -862,40 +851,31 @@ BookmarksSyncService.prototype = {\\n       this.notice(\\\"Got bookmarks delta from server\\\");\\n \\n       ret.deltas = eval(data.target.responseText);\\n-      var tmp = eval(uneval(this._snapshot)); // fixme hack hack hack\\n \\n-      // FIXME: debug here for conditional below...\\n-      /*\\n-      this.notice(\\\"[sync bowels] local version: \\\" + this._snapshotVersion);\\n-      for (var z in ret.deltas) {\\n-        this.notice(\\\"[sync bowels] remote version: \\\" + z);\\n-      }\\n-      this.notice(\\\"foo: \\\" + uneval(ret.deltas[this._snapshotVersion + 1]));\\n-      if (ret.deltas[this._snapshotVersion + 1])\\n-        this.notice(\\\"-> is true\\\");\\n-      else\\n-        this.notice(\\\"-> is false\\\");\\n-      */\\n-\\n-      if (ret.deltas[this._snapshotVersion + 1]) {\\n+      let next = \\\"version \\\" + (this._snapshotVersion + 1);\\n+      let cur = \\\"version \\\" + this._snapshotVersion;\\n+\\n+      if (next in ret.deltas) {\\n         // Merge the matching deltas into one, find highest version\\n-        var keys = [];\\n-        for (var v in ret.deltas) {\\n+        let keys = [];\\n+        for (var vstr in ret.deltas) {\\n+          let v = parseInt(vstr.replace(/^version /, ''));\\n           if (v > this._snapshotVersion)\\n-            keys.push(v);\\n+            keys.push(vstr);\\n           if (v > ret.version)\\n             ret.version = v;\\n         }\\n         keys = keys.sort();\\n-        //this.notice(\\\"TMP: \\\" + uneval(tmp));\\n+\\n+        let tmp = eval(uneval(this._snapshot)); // fixme hack hack hack\\n         for (var i = 0; i < keys.length; i++) {\\n           tmp = this._applyCommandsToObj(ret.deltas[keys[i]], tmp);\\n-          //this.notice(\\\"TMP: \\\" + uneval(tmp));\\n         }\\n+\\n         ret.status = 1;\\n-        ret[\\\"updates\\\"] = this._detectUpdates(this._snapshot, tmp);\\n+        ret.updates = this._detectUpdates(this._snapshot, tmp);\\n \\n-      } else if (ret.deltas[this._snapshotVersion]) {\\n+      } else if (cur in ret.deltas) {\\n         this.notice(\\\"No changes from server\\\");\\n         ret.status = 0;\\n         ret.version = this._snapshotVersion;\\n@@ -916,18 +896,19 @@ BookmarksSyncService.prototype = {\\n               \\\"New snapshot uploaded, may be inconsistent with deltas!\\\");\\n         }\\n \\n-        var tmp = eval(uneval(this._snapshot)); // fixme hack hack hack\\n-        tmp = this._applyCommandsToObj(data.updates, tmp);\\n-\\n         // fixme: this is duplicated from above, need to do some refactoring\\n-        var keys = [];\\n-        for (var v in ret.deltas) {\\n+        let keys = [];\\n+        for (var vstr in ret.deltas) {\\n+          let v = parseInt(vstr.replace(/^version /, ''));\\n           if (v > this._snapshotVersion)\\n-            keys.push(v);\\n+            keys.push(vstr);\\n           if (v > ret.version)\\n             ret.version = v;\\n         }\\n         keys = keys.sort();\\n+\\n+        let tmp = eval(uneval(this._snapshot)); // fixme hack hack hack\\n+        tmp = this._applyCommandsToObj(data.updates, tmp);\\n         for (var i = 0; i < keys.length; i++) {\\n           tmp = this._applyCommandsToObj(ret.deltas[keys[i]], tmp);\\n         }\\n@@ -935,11 +916,18 @@ BookmarksSyncService.prototype = {\\n         ret.status = data.status;\\n         ret.updates = this._detectUpdates(this._snapshot, tmp);\\n         ret.version = data.version;\\n-        var keys = [];\\n-        for (var v in ret.deltas) {\\n+\\n+        for (var vstr in ret.deltas) {\\n+          let v = parseInt(vstr.replace(/^version /, ''));\\n           if (v > ret.version)\\n             ret.version = v;\\n         }\\n+\\n+        if (typeof ret.version != \\\"number\\\") {\\n+          this.notice(\\\"Error: version is not a number!  Correcting...\\\");\\n+          ret.version = parseInt(ret.version);\\n+        }\\n+\\n       }\\n       break;\\n     case 404:\\n@@ -974,6 +962,9 @@ BookmarksSyncService.prototype = {\\n       ret.status = 1;\\n       ret.updates = this._detectUpdates(this._snapshot, tmp.snapshot);\\n       ret.version = tmp.version;\\n+      if (typeof ret.version != \\\"number\\\")\\n+        this.notice(\\\"Error: version is not a number!  Full server response text:\\\\n\\\" +\\n+                    data.target.responseText);\\n       break;\\n     case 404:\\n       this.notice(\\\"No bookmarks on server.  Starting initial sync to server\\\");\\n@@ -985,6 +976,7 @@ BookmarksSyncService.prototype = {\\n \\n       if (data.target.status >= 200 || data.target.status < 300) {\\n         this.notice(\\\"Initial sync to server successful\\\");\\n+        this._saveSnapshot();\\n         ret.status = 2;\\n       } else {\\n         this.notice(\\\"Initial sync to server failed\\\");\\n\""}