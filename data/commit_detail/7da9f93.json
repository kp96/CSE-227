{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas7da9f93\""},"diff":"\"7da9f93 Bug 378667: Better \\\"passwords for given realm\\\" query support. r=gavin\\ndiff --git a/browser/base/content/pageinfo/security.js b/browser/base/content/pageinfo/security.js\\nindex 99c0f81..f45633e 100644\\n--- a/browser/base/content/pageinfo/security.js\\n+++ b/browser/base/content/pageinfo/security.js\\n@@ -319,10 +319,7 @@ function realmHasPasswords(location) {\\n   var realm = makeURI(location).prePath;\\n   var passwordManager = Components.classes[\\\"@mozilla.org/login-manager;1\\\"]\\n                                   .getService(Components.interfaces.nsILoginManager);\\n-  var passwords = passwordManager.getAllLogins({});\\n-\\n-  // XXX untested\\n-  return passwords.some(function (login) { return (login.hostname == realm); });\\n+  return passwordManager.countLogins(realm, \\\"\\\", \\\"\\\");\\n }\\n \\n /**\\ndiff --git a/toolkit/components/passwordmgr/public/nsILoginManager.idl b/toolkit/components/passwordmgr/public/nsILoginManager.idl\\nindex 2309f44..1a205a6 100644\\n--- a/toolkit/components/passwordmgr/public/nsILoginManager.idl\\n+++ b/toolkit/components/passwordmgr/public/nsILoginManager.idl\\n@@ -180,6 +180,28 @@ interface nsILoginManager : nsISupports {\\n                     [retval, array, size_is(count)] out nsILoginInfo logins);\\n \\n \\n+   /**\\n+    * Search for logins matching the specified criteria, as with\\n+    * findLogins(). This interface only returns the number of matching\\n+    * logins (and not the logins themselves), which allows a caller to\\n+    * check for logins without causing the user to be prompted for a master\\n+    * password to decrypt the logins.\\n+    *\\n+    * @param aHostname\\n+    *        The hostname to restrict searches to.\\n+    * @param aActionURL\\n+    *        The URL to which a form login will be submitted. To match any\\n+    *        form login, specify an empty string. To not match any form\\n+    *        login, specify null.\\n+    * @param aHttpRealm\\n+    *        The HTTP Realm for which the login applies. To match logins for\\n+    *        any realm, specify an empty string. To not match logins for any\\n+    *        realm, specify null.\\n+    */\\n+   unsigned long countLogins(in AString aHostname, in AString aActionURL,\\n+                             in AString aHttpRealm);\\n+\\n+\\n     /**\\n      * Generate results for a userfield autocomplete menu.\\n      *\\ndiff --git a/toolkit/components/passwordmgr/public/nsILoginManagerStorage.idl b/toolkit/components/passwordmgr/public/nsILoginManagerStorage.idl\\nindex fbed7c2..b9e30b9 100644\\n--- a/toolkit/components/passwordmgr/public/nsILoginManagerStorage.idl\\n+++ b/toolkit/components/passwordmgr/public/nsILoginManagerStorage.idl\\n@@ -202,4 +202,26 @@ interface nsILoginManagerStorage : nsISupports {\\n     void findLogins(out unsigned long count, in AString aHostname,\\n                     in AString aActionURL,   in AString aHttpRealm,\\n                     [retval, array, size_is(count)] out nsILoginInfo logins);\\n+\\n+\\n+   /**\\n+    * Search for logins matching the specified criteria, as with\\n+    * findLogins(). This interface only returns the number of matching\\n+    * logins (and not the logins themselves), which allows a caller to\\n+    * check for logins without causing the user to be prompted for a master\\n+    * password to decrypt the logins.\\n+    *\\n+    * @param aHostname\\n+    *        The hostname to restrict searches to.\\n+    * @param aActionURL\\n+    *        The URL to which a form login will be submitted. To match any\\n+    *        form login, specify an empty string. To not match any form\\n+    *        login, specify null.\\n+    * @param aHttpRealm\\n+    *        The HTTP Realm for which the login applies. To match logins for\\n+    *        any realm, specify an empty string. To not match logins for any\\n+    *        realm, specify null.\\n+    */\\n+   unsigned long countLogins(in AString aHostname, in AString aActionURL,\\n+                             in AString aHttpRealm);\\n };\\ndiff --git a/toolkit/components/passwordmgr/src/nsLoginManager.js b/toolkit/components/passwordmgr/src/nsLoginManager.js\\nindex 7160f9b..8bfd667 100644\\n--- a/toolkit/components/passwordmgr/src/nsLoginManager.js\\n+++ b/toolkit/components/passwordmgr/src/nsLoginManager.js\\n@@ -470,8 +470,7 @@ LoginManager.prototype = {\\n     /*\\n      * findLogins\\n      *\\n-     * Search the known logins for entries matching the specified criteria\\n-     * for a protocol login (eg HTTP Auth).\\n+     * Search for the known logins for entries matching the specified criteria.\\n      */\\n     findLogins : function (count, hostname, formSubmitURL, httpRealm) {\\n         this.log(\\\"Searching for logins matching host: \\\" + hostname +\\n@@ -483,6 +482,20 @@ LoginManager.prototype = {\\n \\n \\n     /*\\n+     * countLogins\\n+     *\\n+     * Search for the known logins for entries matching the specified criteria,\\n+     * returns only the count.\\n+     */\\n+    countLogins : function (hostname, formSubmitURL, httpRealm) {\\n+        this.log(\\\"Counting logins matching host: \\\" + hostname +\\n+            \\\", formSubmitURL: \\\" + formSubmitURL + \\\", httpRealm: \\\" + httpRealm);\\n+\\n+        return this._storage.countLogins(hostname, formSubmitURL, httpRealm);\\n+    },\\n+\\n+\\n+    /*\\n      * getLoginSavingEnabled\\n      *\\n      * Check to see if user has disabled saving logins for the host.\\ndiff --git a/toolkit/components/passwordmgr/src/storage-Legacy.js b/toolkit/components/passwordmgr/src/storage-Legacy.js\\nindex 3421861..21209ca 100644\\n--- a/toolkit/components/passwordmgr/src/storage-Legacy.js\\n+++ b/toolkit/components/passwordmgr/src/storage-Legacy.js\\n@@ -324,32 +324,12 @@ LoginManagerStorage_legacy.prototype = {\\n      *\\n      */\\n     findLogins : function (count, hostname, formSubmitURL, httpRealm) {\\n-        var hostLogins = this._logins[hostname];\\n-        if (hostLogins == null) {\\n-            count.value = 0;\\n-            return [];\\n-        }\\n-\\n-        var result = [], userCanceled;\\n-\\n-        for each (var login in hostLogins) {\\n-\\n-            // If looking for an HTTP login, make sure the httpRealms match.\\n-            if (httpRealm != login.httpRealm)\\n-                continue;\\n-\\n-            // If looking for a form login, make sure the action URLs match \\n-            // ...unless the stored login is blank (not null), which means\\n-            // login was stored before we started keeping the action URL.\\n-            if (formSubmitURL != login.formSubmitURL &&\\n-                login.formSubmitURL != \\\"\\\")\\n-                continue;\\n+        var userCanceled;\\n \\n-            result.push(login);\\n-        }\\n+        var logins = this._searchLogins(hostname, formSubmitURL, httpRealm);\\n \\n         // Decrypt entries found for the caller.\\n-        [result, userCanceled] = this._decryptLogins(result);\\n+        [logins, userCanceled] = this._decryptLogins(logins);\\n \\n         // We want to throw in this case, so that the Login Manager\\n         // knows to stop processing forms on the page so the user isn't\\n@@ -357,8 +337,19 @@ LoginManagerStorage_legacy.prototype = {\\n         if (userCanceled)\\n             throw \\\"User canceled Master Password entry\\\";\\n \\n-        count.value = result.length; // needed for XPCOM\\n-        return result;\\n+        count.value = logins.length; // needed for XPCOM\\n+        return logins;\\n+    },\\n+\\n+    \\n+    /*\\n+     * countLogins\\n+     *\\n+     */\\n+    countLogins : function (hostname, formSubmitURL, httpRealm) {\\n+        var logins = this._searchLogins(hostname, formSubmitURL, httpRealm);\\n+\\n+        return logins.length;\\n     },\\n \\n \\n@@ -370,6 +361,54 @@ LoginManagerStorage_legacy.prototype = {\\n \\n \\n     /*\\n+     * _searchLogins\\n+     *\\n+     */\\n+    _searchLogins : function (hostname, formSubmitURL, httpRealm) {\\n+        var hostLogins = this._logins[hostname];\\n+        if (hostLogins == null)\\n+            return [];\\n+\\n+        var result = [], userCanceled;\\n+\\n+        for each (var login in hostLogins) {\\n+\\n+            // If search arg is null, skip login unless it doesn't specify a\\n+            // httpRealm (ie, it's also null). If the seach arg is an empty\\n+            // string, always match.\\n+            if (httpRealm == null) {\\n+                if (login.httpRealm != null)\\n+                    continue;\\n+            } else if (httpRealm != \\\"\\\") {\\n+                // Make sure the realms match. If search arg is null,\\n+                // only match if login doesn't specify a realm (is null)\\n+                if (httpRealm != login.httpRealm)\\n+                    continue;\\n+            }\\n+\\n+            // If search arg is null, skip login unless it doesn't specify a\\n+            // action URL (ie, it's also null). If the seach arg is an empty\\n+            // string, always match.\\n+            if (formSubmitURL == null) {\\n+                if (login.formSubmitURL != null)\\n+                    continue;\\n+            } else if (formSubmitURL != \\\"\\\") {\\n+                // If the stored login is blank (not null), that means the\\n+                // login was stored before we started keeping the action\\n+                // URL, so always match. Unless the search g\\n+                if (login.formSubmitURL != \\\"\\\" &&\\n+                    formSubmitURL != login.formSubmitURL)\\n+                    continue;\\n+            }\\n+\\n+            result.push(login);\\n+        }\\n+\\n+        return result;\\n+    },\\n+\\n+\\n+    /*\\n      * _getSignonsFile\\n      *\\n      * Determines what file to use based on prefs. Returns it as a\\n@@ -547,7 +586,11 @@ LoginManagerStorage_legacy.prototype = {\\n \\n                 // Line is the action URL\\n                 case STATE.ACTIONURL:\\n-                    entry.formSubmitURL = line.value;\\n+                    var formSubmitURL = line.value;\\n+                    if (!formSubmitURL && entry.httpRealm)\\n+                        entry.formSubmitURL = null;\\n+                    else\\n+                        entry.formSubmitURL = formSubmitURL;\\n                     processEntry = true;\\n                     parseState = STATE.USERFIELD;\\n                     break;\\ndiff --git a/toolkit/components/passwordmgr/test/unit/test_storage_legacy_1.js b/toolkit/components/passwordmgr/test/unit/test_storage_legacy_1.js\\nindex 51ce771..88a3e20 100644\\n--- a/toolkit/components/passwordmgr/test/unit/test_storage_legacy_1.js\\n+++ b/toolkit/components/passwordmgr/test/unit/test_storage_legacy_1.js\\n@@ -112,6 +112,14 @@ testdesc = \\\"Initialize with signons-05.txt (0 disabled, 1 login)\\\";\\n \\n LoginTest.initStorage(storage, INDIR, \\\"signons-05.txt\\\");\\n LoginTest.checkStorageData(storage, [], [testuser1]);\\n+// counting logins matching host\\n+do_check_eq(1, storage.countLogins(\\\"http://dummyhost.mozilla.org\\\", \\\"\\\",    null));\\n+// counting logins matching host (login has blank actionURL)\\n+do_check_eq(1, storage.countLogins(\\\"http://dummyhost.mozilla.org\\\", \\\"foo\\\", null));\\n+// counting logins (don't match form login for HTTP search)\\n+do_check_eq(0, storage.countLogins(\\\"http://dummyhost.mozilla.org\\\", null,    \\\"\\\"));\\n+// counting logins (don't match a bogus hostname)\\n+do_check_eq(0, storage.countLogins(\\\"blah\\\", \\\"\\\", \\\"\\\"));\\n \\n \\n /* ========== 9 ========== */\\n@@ -128,6 +136,14 @@ testdesc = \\\"Initialize with signons-07.txt (0 disabled, 2 logins on same host)\\\";\\n \\n LoginTest.initStorage(storage, INDIR, \\\"signons-07.txt\\\");\\n LoginTest.checkStorageData(storage, [], [testuser1, testuser2]);\\n+// counting logins matching host\\n+do_check_eq(2, storage.countLogins(\\\"http://dummyhost.mozilla.org\\\", \\\"\\\", null));\\n+// counting logins matching host (login has blank actionURL)\\n+do_check_eq(2, storage.countLogins(\\\"http://dummyhost.mozilla.org\\\", \\\"foo\\\", null));\\n+// counting logins (don't match form login for HTTP search)\\n+do_check_eq(0, storage.countLogins(\\\"http://dummyhost.mozilla.org\\\", null, \\\"\\\"));\\n+// counting logins (don't match a bogus hostname)\\n+do_check_eq(0, storage.countLogins(\\\"blah\\\", \\\"\\\", \\\"\\\"));\\n \\n \\n /* ========== 11 ========== */\\n@@ -150,6 +166,10 @@ for (i = 1; i <= 500; i++) {\\n }\\n LoginTest.checkStorageData(storage, disabledHosts, logins);\\n \\n+// counting all logins for dummyhost\\n+do_check_eq(500, storage.countLogins(\\\"http://dummyhost.site.org\\\", \\\"\\\", \\\"\\\"));\\n+// counting all logins for dummyhost-1\\n+do_check_eq(1, storage.countLogins(\\\"http://dummyhost-1.site.org\\\", \\\"\\\", \\\"\\\"));\\n \\n } catch (e) {\\n     throw \\\"FAILED in test #\\\" + testnum + \\\" -- \\\" + testdesc + \\\": \\\" + e;\\ndiff --git a/toolkit/components/passwordmgr/test/unit/test_storage_legacy_2.js b/toolkit/components/passwordmgr/test/unit/test_storage_legacy_2.js\\nindex 9ff4d6a..bd9b743 100644\\n--- a/toolkit/components/passwordmgr/test/unit/test_storage_legacy_2.js\\n+++ b/toolkit/components/passwordmgr/test/unit/test_storage_legacy_2.js\\n@@ -198,6 +198,14 @@ LoginTest.initStorage(storage, OUTDIR, \\\"output-05.txt\\\", null, null);\\n testdesc = \\\"Verify output-05.txt\\\";\\n LoginTest.checkStorageData(storage, [], [dummyuser1, dummyuser2, dummyuser3]);\\n \\n+// count dummyhost2 logins\\n+do_check_eq(2, storage.countLogins(\\\"http://dummyhost2.mozilla.org\\\", \\\"\\\", \\\"\\\"));\\n+// count dummyhost logins\\n+do_check_eq(1, storage.countLogins(\\\"http://dummyhost.mozilla.org\\\",  \\\"\\\", \\\"\\\"));\\n+\\n+// count dummyhost2 logins w/ specific formSubmitURL\\n+do_check_eq(2, storage.countLogins(\\\"http://dummyhost2.mozilla.org\\\", \\\"http://cgi.site.com\\\", \\\"\\\"));\\n+\\n /* ========== 10 ========== */\\n testnum++;\\n \\n\""}