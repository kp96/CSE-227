{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas04701ea\""},"diff":"\"04701ea Make protocol handling dialog appear with protocols that are unknown to the OS if we have handlers (bug 392964), r=myk,biesi; sr=biesi; a=mconnor\\ndiff --git a/uriloader/exthandler/nsExternalHelperAppService.cpp b/uriloader/exthandler/nsExternalHelperAppService.cpp\\nindex 6f0f09a..bb5086a 100644\\n--- a/uriloader/exthandler/nsExternalHelperAppService.cpp\\n+++ b/uriloader/exthandler/nsExternalHelperAppService.cpp\\n@@ -696,10 +696,13 @@ NS_IMETHODIMP nsExternalHelperAppService::ExternalProtocolHandlerExists(const ch\\n       nsDependentCString(aProtocolScheme), getter_AddRefs(handlerInfo));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  // See if we have a preferred handler app for this\\n-  nsCOMPtr<nsIHandlerApp> preferredApp;\\n-  handlerInfo->GetPreferredApplicationHandler(getter_AddRefs(preferredApp));\\n-  if (preferredApp) {\\n+  // See if we have any known possible handler apps for this\\n+  nsCOMPtr<nsIMutableArray> possibleHandlers;\\n+  handlerInfo->GetPossibleApplicationHandlers(getter_AddRefs(possibleHandlers));\\n+\\n+  PRUint32 length;\\n+  possibleHandlers->GetLength(&length);\\n+  if (length) {\\n     *aHandlerExists = PR_TRUE;\\n     return NS_OK;\\n   }\\ndiff --git a/uriloader/exthandler/nsIExternalProtocolService.idl b/uriloader/exthandler/nsIExternalProtocolService.idl\\nindex 2d20708..0ed2b4d 100644\\n--- a/uriloader/exthandler/nsIExternalProtocolService.idl\\n+++ b/uriloader/exthandler/nsIExternalProtocolService.idl\\n@@ -59,9 +59,14 @@ interface nsIHandlerInfo;\\n interface nsIExternalProtocolService : nsISupports\\n {\\n   /**\\n-   * Check whether a handler for a specific protocol exists.\\n+   * Check whether a handler for a specific protocol exists.  Specifically,\\n+   * this looks to see whether there are any known possible application handlers\\n+   * in either the nsIHandlerService datastore or registered with the OS.\\n+   *\\n    * @param aProtocolScheme The scheme from a url: http, ftp, mailto, etc.\\n+   *\\n    * @return true if we have a handler and false otherwise.\\n+   *\\n    * XXX shouldn't aProtocolScheme be an ACString like nsIURI::scheme?\\n    */\\n   boolean externalProtocolHandlerExists(in string aProtocolScheme);\\n\""}