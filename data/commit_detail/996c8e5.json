{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas996c8e5\""},"diff":"\"996c8e5 Bug 252830: Blocked XPI install should have allow once feature. r+sr=dveditz, r=gavin.sharp, a=bzbarsky\\ndiff --git a/browser/base/content/browser.js b/browser/base/content/browser.js\\nindex 3445899..8fed3a7 100644\\n--- a/browser/base/content/browser.js\\n+++ b/browser/base/content/browser.js\\n@@ -662,13 +662,16 @@ const gXPInstallObserver = {\\n   {\\n     var brandBundle = document.getElementById(\\\"bundle_brand\\\");\\n     var browserBundle = document.getElementById(\\\"bundle_browser\\\");\\n-    var browser, webNav, wm;\\n     switch (aTopic) {\\n     case \\\"xpinstall-install-blocked\\\":\\n-      var shell = aSubject.QueryInterface(Components.interfaces.nsIDocShell);\\n-      browser = this._getBrowser(shell);\\n+      var installInfo = aSubject.QueryInterface(Components.interfaces.nsIXPIInstallInfo);\\n+      var win = installInfo.originatingWindow;\\n+      var shell = win.QueryInterface(Components.interfaces.nsIInterfaceRequestor)\\n+                     .getInterface(Components.interfaces.nsIWebNavigation)\\n+                     .QueryInterface(Components.interfaces.nsIDocShell);\\n+      var browser = this._getBrowser(shell);\\n       if (browser) {\\n-        var host = aData;\\n+        var host = installInfo.originatingURI.host;\\n         var brandShortName = brandBundle.getString(\\\"brandShortName\\\");\\n         var notificationName, messageString, buttons;\\n         if (!gPrefService.getBoolPref(\\\"xpinstall.enabled\\\")) {\\n@@ -698,10 +701,15 @@ const gXPInstallObserver = {\\n                                                            [brandShortName, host]);\\n \\n           buttons = [{\\n-            label: browserBundle.getString(\\\"xpinstallPromptWarningButton\\\"),\\n-            accessKey: browserBundle.getString(\\\"xpinstallPromptWarningButton.accesskey\\\"),\\n+            label: browserBundle.getString(\\\"xpinstallPromptAllowButton\\\"),\\n+            accessKey: browserBundle.getString(\\\"xpinstallPromptAllowButton.accesskey\\\"),\\n             popup: null,\\n-            callback: function() { return xpinstallEditPermissions(shell, host); }\\n+            callback: function() {\\n+              var mgr = Components.classes[\\\"@mozilla.org/xpinstall/install-manager;1\\\"]\\n+                                  .createInstance(Components.interfaces.nsIXPInstallManager);\\n+              mgr.initManagerWithInstallInfo(installInfo);\\n+              return false;\\n+            }\\n           }];\\n         }\\n \\n@@ -718,34 +726,6 @@ const gXPInstallObserver = {\\n   }\\n };\\n \\n-function xpinstallEditPermissions(aDocShell, aHost)\\n-{\\n-  var browser = gXPInstallObserver._getBrowser(aDocShell);\\n-  if (browser) {\\n-    var bundlePreferences = document.getElementById(\\\"bundle_preferences\\\");\\n-    var params = { blockVisible   : false,\\n-                   sessionVisible : false,\\n-                   allowVisible   : true,\\n-                   prefilledHost  : aHost,\\n-                   permissionType : \\\"install\\\",\\n-                   windowTitle    : bundlePreferences.getString(\\\"addons_permissions_title\\\"),\\n-                   introText      : bundlePreferences.getString(\\\"addonspermissionstext\\\") };\\n-    var wm = Components.classes[\\\"@mozilla.org/appshell/window-mediator;1\\\"]\\n-                   .getService(Components.interfaces.nsIWindowMediator);\\n-    var existingWindow = wm.getMostRecentWindow(\\\"Browser:Permissions\\\");\\n-    if (existingWindow) {\\n-      existingWindow.initWithParams(params);\\n-      existingWindow.focus();\\n-    }\\n-    else\\n-      window.openDialog(\\\"chrome://browser/content/preferences/permissions.xul\\\",\\n-                        \\\"_blank\\\", \\\"resizable,dialog=no,centerscreen\\\", params);\\n-    return false;\\n-  }\\n-\\n-  return true;\\n-}\\n-\\n function BrowserStartup()\\n {\\n   gBrowser = document.getElementById(\\\"content\\\");\\ndiff --git a/browser/locales/en-US/chrome/browser/browser.properties b/browser/locales/en-US/chrome/browser/browser.properties\\nindex 09faac2..a0d47a1 100644\\n--- a/browser/locales/en-US/chrome/browser/browser.properties\\n+++ b/browser/locales/en-US/chrome/browser/browser.properties\\n@@ -28,11 +28,11 @@ bookmarkCurTab_accesskey=B\\n bookmarkAllTabsDefault=[Folder Name]\\n \\n xpinstallPromptWarning=%S prevented this site (%S) from asking you to install software on your computer.\\n-xpinstallPromptWarningButton=Edit Options...\\n+xpinstallPromptAllowButton=Allow\\n # Accessibility Note:\\n # Be sure you do not choose an accesskey that is used elsewhere in the active context (e.g. main menu bar, submenu of the warning popup button)\\n # See http://www.mozilla.org/access/keyboard/accesskey for details\\n-xpinstallPromptWarningButton.accesskey=O\\n+xpinstallPromptAllowButton.accesskey=A\\n xpinstallDisabledMessageLocked=Software installation has been disabled by your system administrator.\\n xpinstallDisabledMessage=Software installation is currently disabled. Click Enable and try again.\\n xpinstallDisabledButton=Enable\\ndiff --git a/xpinstall/public/Makefile.in b/xpinstall/public/Makefile.in\\nindex 8bbce2e..1bd754b 100644\\n--- a/xpinstall/public/Makefile.in\\n+++ b/xpinstall/public/Makefile.in\\n@@ -53,6 +53,7 @@ XPIDLSRCS\\t= \\\\\\n \\t\\tnsIXPIProgressDialog.idl \\\\\\n \\t\\tnsIXPINotifier.idl \\\\\\n \\t\\tnsIXPInstallManager.idl \\\\\\n+\\t\\tnsIXPIInstallInfo.idl \\\\\\n \\t\\tnsPIXPIProxy.idl \\\\\\n \\t\\tnsPIXPIStubHook.idl \\\\\\n \\t\\tnsPICertNotification.idl \\\\\\ndiff --git a/xpinstall/public/nsIDOMInstallTriggerGlobal.h b/xpinstall/public/nsIDOMInstallTriggerGlobal.h\\nindex 93a0383..83c92b4 100644\\n--- a/xpinstall/public/nsIDOMInstallTriggerGlobal.h\\n+++ b/xpinstall/public/nsIDOMInstallTriggerGlobal.h\\n@@ -42,11 +42,12 @@\\n #include \\\"nsString.h\\\"\\n #include \\\"nsIScriptContext.h\\\"\\n #include \\\"nsXPITriggerInfo.h\\\"\\n+#include \\\"nsIXPIInstallInfo.h\\\"\\n \\n \\n #define NS_IDOMINSTALLTRIGGERGLOBAL_IID \\\\\\n- { 0x18c2f987, 0xb09f, 0x11d2, \\\\\\n-  {0xbc, 0xde, 0x00, 0x80, 0x5f, 0x0e, 0x13, 0x53}}\\n+ { 0xe8c7941c, 0xaaa0, 0x4faf, \\\\\\n+  {0x83, 0xe8, 0x01, 0xbe, 0x8b, 0xbe, 0x8a, 0x57}}\\n \\n class nsIDOMInstallTriggerGlobal : public nsISupports {\\n public:\\n@@ -60,8 +61,14 @@ public:\\n     EQUAL = 0\\n   };\\n \\n+  NS_IMETHOD    GetOriginatingURI(nsIScriptGlobalObject* aGlobalObject, nsIURI * *aUri)=0;\\n+\\n   NS_IMETHOD    UpdateEnabled(nsIScriptGlobalObject* aGlobalObject, PRBool aUseWhitelist, PRBool* aReturn)=0;\\n \\n+  NS_IMETHOD    UpdateEnabled(nsIURI* aURI, PRBool aUseWhitelist, PRBool* aReturn)=0;\\n+\\n+  NS_IMETHOD    StartInstall(nsIXPIInstallInfo* aInstallInfo, PRBool* aReturn)=0;\\n+\\n   NS_IMETHOD    Install(nsIScriptGlobalObject* globalObject, nsXPITriggerInfo* aInfo, PRBool* aReturn)=0;\\n \\n   NS_IMETHOD    InstallChrome(nsIScriptGlobalObject* globalObject, PRUint32 aType, nsXPITriggerItem* aItem, PRBool* aReturn)=0;\\ndiff --git a/xpinstall/public/nsIXPIInstallInfo.idl b/xpinstall/public/nsIXPIInstallInfo.idl\\nnew file mode 100644\\nindex 0000000..819bd92\\n--- /dev/null\\n+++ b/xpinstall/public/nsIXPIInstallInfo.idl\\n@@ -0,0 +1,74 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is Mozilla XPInstall.\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Dave Townsend <dtownsend@oxymoronical.com>.\\n+ *\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK *****\\n+ */\\n+\\n+#include \\\"nsISupports.idl\\\"\\n+\\n+[ptr] native triggerInfoPtr(nsXPITriggerInfo);\\n+\\n+interface nsIDOMWindowInternal;\\n+interface nsIDocShell;\\n+interface nsIURI;\\n+\\n+/**\\n+ * Interface holding information about a triggered install that can be passed\\n+ * to and from script.\\n+ */\\n+[scriptable, uuid(5a4a775c-e452-4cf2-8ff8-d327ae24aec6)]\\n+interface nsIXPIInstallInfo : nsISupports\\n+{\\n+  /**\\n+   * The install triggers supplied by the install.\\n+   */\\n+  [noscript, notxpcom] attribute triggerInfoPtr triggerInfo;\\n+  \\n+  /**\\n+   * The original window that initiated the install.\\n+   */\\n+  readonly attribute nsIDOMWindowInternal originatingWindow;\\n+  \\n+  /**\\n+   * The original URI calling the install. This is the URI that would have been\\n+   * checked against the whitelist if necessary.\\n+   */\\n+  readonly attribute nsIURI originatingURI;\\n+  \\n+  /**\\n+   * The chome type of the install.\\n+   */\\n+  readonly attribute PRUint32 chromeType;\\n+};\\ndiff --git a/xpinstall/public/nsIXPInstallManager.idl b/xpinstall/public/nsIXPInstallManager.idl\\nindex ac76d6f..bb82cee 100644\\n--- a/xpinstall/public/nsIXPInstallManager.idl\\n+++ b/xpinstall/public/nsIXPInstallManager.idl\\n@@ -37,11 +37,12 @@\\n #include \\\"nsISupports.idl\\\"\\n \\n interface nsIXPIProgressDialog;\\n+interface nsIXPIInstallInfo;\\n \\n /**\\n  * Interface to XPInstallManager - manages download and install operations.\\n  */\\n-[scriptable, uuid(566689cb-9926-4bec-a66e-a034e364ad2c)]\\n+[scriptable, uuid(83fdd52f-2d34-4e22-981d-cf3c4ae76faa)]\\n interface nsIXPInstallManager : nsISupports\\n {\\n     /** \\n@@ -70,5 +71,14 @@ interface nsIXPInstallManager : nsISupports\\n                                [array, size_is(aURLCount)] in string aHashes,\\n                                in unsigned long aURLCount,\\n                                in nsIXPIProgressDialog aListener);\\n+    \\n+    /**\\n+     * Initiates a set of downloads based on an install info object. Will\\n+     * display confirmation dialog as if the install info had been supplied\\n+     * by content.\\n+     * @param aInstallInfo The install info object providing install triggers\\n+     *                     and script context for the install.\\n+     */\\n+    void initManagerWithInstallInfo(in nsIXPIInstallInfo aInstallInfo);\\n };\\n \\ndiff --git a/xpinstall/src/Makefile.in b/xpinstall/src/Makefile.in\\nindex a37008c..5a09568 100644\\n--- a/xpinstall/src/Makefile.in\\n+++ b/xpinstall/src/Makefile.in\\n@@ -124,6 +124,7 @@ CPPSRCS\\t\\t= \\\\\\n \\t\\tnsJSFileSpecObj.cpp \\\\\\n \\t\\tnsInstallLogComment.cpp \\\\\\n \\t\\tnsInstallBitwise.cpp \\\\\\n+\\t\\tnsXPIInstallInfo.cpp \\\\\\n \\t\\t$(NULL)\\n \\n ifeq ($(OS_ARCH),WINNT)\\ndiff --git a/xpinstall/src/nsInstallTrigger.cpp b/xpinstall/src/nsInstallTrigger.cpp\\nindex a95575c..8fd4dca 100644\\n--- a/xpinstall/src/nsInstallTrigger.cpp\\n+++ b/xpinstall/src/nsInstallTrigger.cpp\\n@@ -43,6 +43,7 @@\\n #include \\\"nsIDOMInstallTriggerGlobal.h\\\"\\n \\n #include \\\"nscore.h\\\"\\n+#include \\\"nsAutoPtr.h\\\"\\n #include \\\"netCore.h\\\"\\n #include \\\"nsIFactory.h\\\"\\n #include \\\"nsISupports.h\\\"\\n@@ -69,7 +70,7 @@\\n #include \\\"nsIContentHandler.h\\\"\\n #include \\\"nsIChannel.h\\\"\\n #include \\\"nsIURI.h\\\"\\n-\\n+#include \\\"nsXPIInstallInfo.h\\\"\\n \\n \\n nsInstallTrigger::nsInstallTrigger()\\n@@ -190,13 +191,7 @@ nsInstallTrigger::HandleContent(const char * aContentType,\\n         return NS_ERROR_INVALID_ARG;\\n \\n \\n-    // We have what we need to start an XPInstall, now figure out if we are\\n-    // going to honor this request based on PermissionManager settings\\n-    PRBool enabled = PR_FALSE;\\n-    // Keep the host so that it can be sent to the\\n-    // xpinstall-install-blocked observers to display the host to be\\n-    // whitelisted\\n-    nsCAutoString host;\\n+    nsCOMPtr<nsIURI> checkuri;\\n \\n     if ( useReferrer )\\n     {\\n@@ -207,10 +202,8 @@ nsInstallTrigger::HandleContent(const char * aContentType,\\n         // they trust the actual source when they get the install confirmation\\n         // dialog. The decision we're making here is whether the triggering\\n         // site is one which is allowed to annoy the user with modal dialogs.\\n-\\n-        enabled = AllowInstall( referringURI );\\n-        if (referringURI)\\n-            referringURI->GetHost(host);\\n+        \\n+        checkuri = referringURI;\\n     }\\n     else\\n     {\\n@@ -246,31 +239,39 @@ nsInstallTrigger::HandleContent(const char * aContentType,\\n         // controls) and will require community policing of the default\\n         // trusted sites.\\n \\n-        enabled = AllowInstall( uri );\\n-        uri->GetHost(host);\\n+        checkuri = uri;\\n     }\\n \\n-\\n-    if ( enabled )\\n+    nsAutoPtr<nsXPITriggerInfo> trigger(new nsXPITriggerInfo());\\n+    nsAutoPtr<nsXPITriggerItem> item(new nsXPITriggerItem(0, NS_ConvertUTF8toUTF16(urispec).get(),\\n+                                                          nsnull));\\n+    if (trigger && item)\\n     {\\n-        rv = StartSoftwareUpdate( globalObject,\\n-                                  NS_ConvertUTF8toUTF16(urispec),\\n-                                  0,\\n-                                  &enabled);\\n-    }\\n-    else\\n-    {\\n-        nsCOMPtr<nsPIDOMWindow> win(do_QueryInterface(globalObject));\\n-        nsCOMPtr<nsIObserverService> os(do_GetService(\\\"@mozilla.org/observer-service;1\\\"));\\n-        if (os) {\\n-            os->NotifyObservers(win->GetDocShell(),\\n-                                \\\"xpinstall-install-blocked\\\",\\n-                                NS_ConvertUTF8toUTF16(host).get());\\n+        // trigger will own the item now\\n+        trigger->Add(item.forget());\\n+        nsCOMPtr<nsIDOMWindowInternal> win(do_QueryInterface(globalObject));\\n+        nsCOMPtr<nsIXPIInstallInfo> installInfo =\\n+                              new nsXPIInstallInfo(win, checkuri, trigger, 0);\\n+        if (installInfo)\\n+        {\\n+            // From here trigger is owned by installInfo until passed on to nsXPInstallManager\\n+            trigger.forget();\\n+            if (AllowInstall(checkuri))\\n+            {\\n+                return StartInstall(installInfo, nsnull);\\n+            }\\n+            else\\n+            {\\n+                nsCOMPtr<nsIObserverService> os(do_GetService(\\\"@mozilla.org/observer-service;1\\\"));\\n+                if (os)\\n+                    os->NotifyObservers(installInfo,\\n+                                        \\\"xpinstall-install-blocked\\\",\\n+                                        nsnull);\\n+                return NS_ERROR_ABORT;\\n+            }\\n         }\\n-        rv = NS_ERROR_ABORT;\\n     }\\n-    \\n-    return rv;\\n+    return NS_ERROR_OUT_OF_MEMORY;\\n }\\n \\n \\n@@ -385,8 +386,37 @@ nsInstallTrigger::AllowInstall(nsIURI* aLaunchURI)\\n \\n \\n NS_IMETHODIMP\\n+nsInstallTrigger::GetOriginatingURI(nsIScriptGlobalObject* aGlobalObject, nsIURI * *aUri)\\n+{\\n+    NS_ENSURE_ARG_POINTER(aGlobalObject);\\n+\\n+    *aUri = nsnull;\\n+    \\n+    // find the current site\\n+    nsCOMPtr<nsIDOMDocument> domdoc;\\n+    nsCOMPtr<nsIDOMWindow> window(do_QueryInterface(aGlobalObject));\\n+    if ( window )\\n+    {\\n+        window->GetDocument(getter_AddRefs(domdoc));\\n+        nsCOMPtr<nsIDocument> doc(do_QueryInterface(domdoc));\\n+        if ( doc )\\n+            NS_ADDREF(*aUri = doc->GetDocumentURI());\\n+    }\\n+    return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n nsInstallTrigger::UpdateEnabled(nsIScriptGlobalObject* aGlobalObject, PRBool aUseWhitelist, PRBool* aReturn)\\n {\\n+    nsCOMPtr<nsIURI> uri;\\n+    nsresult rv = GetOriginatingURI(aGlobalObject, getter_AddRefs(uri));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    return UpdateEnabled(uri, aUseWhitelist, aReturn);\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsInstallTrigger::UpdateEnabled(nsIURI* aURI, PRBool aUseWhitelist, PRBool* aReturn)\\n+{\\n     // disallow unless we successfully find otherwise\\n     *aReturn = PR_FALSE;\\n \\n@@ -397,22 +427,9 @@ nsInstallTrigger::UpdateEnabled(nsIScriptGlobalObject* aGlobalObject, PRBool aUs\\n         if (prefBranch)\\n             prefBranch->GetBoolPref( XPINSTALL_ENABLE_PREF, aReturn);\\n     }\\n-    else\\n+    else if (aURI)\\n     {\\n-        NS_ENSURE_ARG_POINTER(aGlobalObject);\\n-\\n-        // find the current site\\n-        nsCOMPtr<nsIDOMDocument> domdoc;\\n-        nsCOMPtr<nsIDOMWindow> window(do_QueryInterface(aGlobalObject));\\n-        if ( window )\\n-        {\\n-            window->GetDocument(getter_AddRefs(domdoc));\\n-            nsCOMPtr<nsIDocument> doc(do_QueryInterface(domdoc));\\n-            if ( doc )\\n-            {\\n-                *aReturn = AllowInstall( doc->GetDocumentURI() );\\n-            }\\n-        }\\n+        *aReturn = AllowInstall(aURI);\\n     }\\n \\n     return NS_OK;\\n@@ -420,6 +437,26 @@ nsInstallTrigger::UpdateEnabled(nsIScriptGlobalObject* aGlobalObject, PRBool aUs\\n \\n \\n NS_IMETHODIMP\\n+nsInstallTrigger::StartInstall(nsIXPIInstallInfo* aInstallInfo, PRBool* aReturn)\\n+{\\n+    if (aReturn)\\n+        *aReturn = PR_FALSE;\\n+    \\n+    nsXPInstallManager *mgr = new nsXPInstallManager();\\n+    if (mgr)\\n+    {\\n+        nsresult rv = mgr->InitManagerWithInstallInfo(aInstallInfo);\\n+        if (NS_SUCCEEDED(rv) && aReturn)\\n+            *aReturn = PR_TRUE;\\n+        return rv;\\n+    }\\n+    else\\n+    {\\n+        return NS_ERROR_OUT_OF_MEMORY;\\n+    }\\n+}\\n+\\n+NS_IMETHODIMP\\n nsInstallTrigger::Install(nsIScriptGlobalObject* aGlobalObject, nsXPITriggerInfo* aTrigger, PRBool* aReturn)\\n {\\n     NS_ASSERTION(aReturn, \\\"Invalid pointer arg\\\");\\n@@ -429,8 +466,9 @@ nsInstallTrigger::Install(nsIScriptGlobalObject* aGlobalObject, nsXPITriggerInfo\\n     nsXPInstallManager *mgr = new nsXPInstallManager();\\n     if (mgr)\\n     {\\n+        nsCOMPtr<nsIDOMWindowInternal> win(do_QueryInterface(aGlobalObject));\\n         // The Install manager will delete itself when done\\n-        rv = mgr->InitManager( aGlobalObject, aTrigger, 0 );\\n+        rv = mgr->InitManager( win, aTrigger, 0 );\\n         if (NS_SUCCEEDED(rv))\\n             *aReturn = PR_TRUE;\\n     }\\n@@ -464,16 +502,22 @@ nsInstallTrigger::InstallChrome(nsIScriptGlobalObject* aGlobalObject, PRUint32 a\\n         {\\n             trigger->Add( aItem );\\n \\n+            nsCOMPtr<nsIDOMWindowInternal> win(do_QueryInterface(aGlobalObject));\\n             // The Install manager will delete itself when done\\n-            rv = mgr->InitManager( aGlobalObject, trigger, aType );\\n+            rv = mgr->InitManager( win, trigger, aType );\\n             *aReturn = PR_TRUE;\\n         }\\n         else\\n         {\\n             rv = NS_ERROR_OUT_OF_MEMORY;\\n             delete mgr;\\n+            delete aItem;\\n         }\\n     }\\n+    else\\n+    {\\n+        delete aItem;\\n+    }\\n \\n     return NS_OK;\\n }\\n@@ -496,8 +540,9 @@ nsInstallTrigger::StartSoftwareUpdate(nsIScriptGlobalObject* aGlobalObject, cons\\n             if (item)\\n             {\\n                 trigger->Add( item );\\n+                nsCOMPtr<nsIDOMWindowInternal> win(do_QueryInterface(aGlobalObject));\\n                 // The Install manager will delete itself when done\\n-                rv = mgr->InitManager(aGlobalObject, trigger, 0 );\\n+                rv = mgr->InitManager(win, trigger, 0 );\\n                 *aReturn = PR_TRUE;\\n             }\\n             else\\ndiff --git a/xpinstall/src/nsInstallTrigger.h b/xpinstall/src/nsInstallTrigger.h\\nindex fff0bd5..76df2f6 100644\\n--- a/xpinstall/src/nsInstallTrigger.h\\n+++ b/xpinstall/src/nsInstallTrigger.h\\n@@ -47,7 +47,10 @@ class nsInstallTrigger: public nsIScriptObjectOwner,\\n         NS_IMETHOD    GetScriptObject(nsIScriptContext *aContext, void** aScriptObject);\\n         NS_IMETHOD    SetScriptObject(void* aScriptObject);\\n \\n+        NS_IMETHOD    GetOriginatingURI(nsIScriptGlobalObject* aGlobalObject, nsIURI * *aUri);\\n         NS_IMETHOD    UpdateEnabled(nsIScriptGlobalObject* aGlobalObject, PRBool aUseWhitelist, PRBool* aReturn);\\n+        NS_IMETHOD    UpdateEnabled(nsIURI* aURI, PRBool aUseWhitelist, PRBool* aReturn);\\n+        NS_IMETHOD    StartInstall(nsIXPIInstallInfo* aInstallInfo, PRBool* aReturn);\\n         NS_IMETHOD    Install(nsIScriptGlobalObject* aGlobalObject, nsXPITriggerInfo *aInfo, PRBool* aReturn);\\n         NS_IMETHOD    InstallChrome(nsIScriptGlobalObject* aGlobalObject, PRUint32 aType, nsXPITriggerItem* aItem, PRBool* aReturn);\\n         NS_IMETHOD    StartSoftwareUpdate(nsIScriptGlobalObject* aGlobalObject, const nsString& aURL, PRInt32 aFlags, PRInt32* aReturn);\\ndiff --git a/xpinstall/src/nsJSInstallTriggerGlobal.cpp b/xpinstall/src/nsJSInstallTriggerGlobal.cpp\\nindex 51c8159..3609d04 100644\\n--- a/xpinstall/src/nsJSInstallTriggerGlobal.cpp\\n+++ b/xpinstall/src/nsJSInstallTriggerGlobal.cpp\\n@@ -37,6 +37,7 @@\\n \\n #include \\\"jsapi.h\\\"\\n #include \\\"nscore.h\\\"\\n+#include \\\"nsAutoPtr.h\\\"\\n #include \\\"nsIScriptContext.h\\\"\\n #include \\\"nsIScriptObjectOwner.h\\\"\\n #include \\\"nsIScriptGlobalObject.h\\\"\\n@@ -52,6 +53,7 @@\\n #include \\\"nsInstallTrigger.h\\\"\\n #include \\\"nsXPITriggerInfo.h\\\"\\n #include \\\"nsDOMJSUtils.h\\\"\\n+#include \\\"nsXPIInstallInfo.h\\\"\\n \\n #include \\\"nsIComponentManager.h\\\"\\n #include \\\"nsNetUtil.h\\\"\\n@@ -238,21 +240,9 @@ InstallTriggerGlobalInstall(JSContext *cx, JSObject *obj, uintN argc, jsval *arg\\n   if (scriptContext)\\n     globalObject = scriptContext->GetGlobalObject();\\n \\n-  PRBool enabled = PR_FALSE;\\n-  nativeThis->UpdateEnabled(globalObject, XPI_WHITELIST, &enabled);\\n-  if (!enabled || !globalObject)\\n-  {\\n-    nsCOMPtr<nsPIDOMWindow> win(do_QueryInterface(globalObject));\\n-    nsCOMPtr<nsIObserverService> os(do_GetService(\\\"@mozilla.org/observer-service;1\\\"));\\n-    if (os)\\n-    {\\n-      os->NotifyObservers(win->GetDocShell(), \\\"xpinstall-install-blocked\\\", \\n-                          NS_LITERAL_STRING(\\\"install\\\").get());\\n-    }\\n-    return JS_TRUE;\\n-  }\\n-\\n-\\n+  if (!globalObject)\\n+      return JS_TRUE;\\n+  \\n   nsCOMPtr<nsIScriptSecurityManager> secman(do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID));\\n   if (!secman)\\n   {\\n@@ -394,10 +384,36 @@ InstallTriggerGlobalInstall(JSContext *cx, JSObject *obj, uintN argc, jsval *arg\\n     // pass on only if good stuff found\\n     if (!abortLoad && trigger->Size() > 0)\\n     {\\n-        PRBool result;\\n-        nativeThis->Install(globalObject, trigger, &result);\\n-        *rval = BOOLEAN_TO_JSVAL(result);\\n-        return JS_TRUE;\\n+        nsCOMPtr<nsIURI> checkuri;\\n+        nsresult rv = nativeThis->GetOriginatingURI(globalObject,\\n+                                                    getter_AddRefs(checkuri));\\n+        if (NS_SUCCEEDED(rv))\\n+        {\\n+            nsCOMPtr<nsIDOMWindowInternal> win(do_QueryInterface(globalObject));\\n+            nsCOMPtr<nsIXPIInstallInfo> installInfo =\\n+                new nsXPIInstallInfo(win, checkuri, trigger, 0);\\n+            if (installInfo)\\n+            {\\n+                // installInfo now owns triggers\\n+                PRBool enabled = PR_FALSE;\\n+                nativeThis->UpdateEnabled(checkuri, XPI_WHITELIST, &enabled);\\n+                if (!enabled)\\n+                {\\n+                    nsCOMPtr<nsIObserverService> os(do_GetService(\\\"@mozilla.org/observer-service;1\\\"));\\n+                    if (os)\\n+                        os->NotifyObservers(installInfo,\\n+                                            \\\"xpinstall-install-blocked\\\", \\n+                                            nsnull);\\n+                }\\n+                else\\n+                {\\n+                    PRBool result;\\n+                    nativeThis->StartInstall(installInfo, &result);\\n+                    *rval = BOOLEAN_TO_JSVAL(result);\\n+                }\\n+                return JS_TRUE;\\n+            }\\n+        }\\n     }\\n     // didn't pass it on so we must delete trigger\\n     delete trigger;\\n@@ -434,21 +450,9 @@ InstallTriggerGlobalInstallChrome(JSContext *cx, JSObject *obj, uintN argc, jsva\\n   if (scriptContext)\\n       globalObject = scriptContext->GetGlobalObject();\\n \\n-  PRBool enabled = PR_FALSE;\\n-  nativeThis->UpdateEnabled(globalObject, XPI_WHITELIST, &enabled);\\n-  if (!enabled || !globalObject)\\n-  {\\n-    nsCOMPtr<nsPIDOMWindow> win(do_QueryInterface(globalObject));\\n-    nsCOMPtr<nsIObserverService> os(do_GetService(\\\"@mozilla.org/observer-service;1\\\"));\\n-    if (os)\\n-    {\\n-      os->NotifyObservers(win->GetDocShell(), \\\"xpinstall-install-blocked\\\", \\n-                          NS_LITERAL_STRING(\\\"install\\\").get());\\n-    }\\n-    return JS_TRUE;\\n-  }\\n-\\n-\\n+  if (!globalObject)\\n+      return JS_TRUE;\\n+  \\n   // get window.location to construct relative URLs\\n   nsCOMPtr<nsIURI> baseURL;\\n   JSObject* global = JS_GetGlobalObject(cx);\\n@@ -484,13 +488,46 @@ InstallTriggerGlobalInstallChrome(JSContext *cx, JSObject *obj, uintN argc, jsva\\n     if ( chromeType & CHROME_ALL )\\n     {\\n         // there's at least one known chrome type\\n-        nsXPITriggerItem* item = new nsXPITriggerItem(name.get(),\\n-                                                      sourceURL.get(), \\n-                                                      nsnull);\\n-\\n-        PRBool nativeRet = PR_FALSE;\\n-        nativeThis->InstallChrome(globalObject, chromeType, item, &nativeRet);\\n-        *rval = BOOLEAN_TO_JSVAL(nativeRet);\\n+        nsCOMPtr<nsIURI> checkuri;\\n+        nsresult rv = nativeThis->GetOriginatingURI(globalObject,\\n+                                                    getter_AddRefs(checkuri));\\n+        if (NS_SUCCEEDED(rv))\\n+        {\\n+            nsAutoPtr<nsXPITriggerInfo> trigger(new nsXPITriggerInfo());\\n+            nsAutoPtr<nsXPITriggerItem> item(new nsXPITriggerItem(name.get(),\\n+                                                                  sourceURL.get(),\\n+                                                                  nsnull));\\n+            if (trigger && item)\\n+            {\\n+                // trigger will free item when complete\\n+                trigger->Add(item.forget());\\n+                nsCOMPtr<nsIDOMWindowInternal> win(do_QueryInterface(globalObject));\\n+                nsCOMPtr<nsIXPIInstallInfo> installInfo =\\n+                    new nsXPIInstallInfo(win, checkuri, trigger, chromeType);\\n+                if (installInfo)\\n+                {\\n+                    // installInfo owns trigger now\\n+                    trigger.forget();\\n+                    PRBool enabled = PR_FALSE;\\n+                    nativeThis->UpdateEnabled(checkuri, XPI_WHITELIST,\\n+                                              &enabled);\\n+                    if (!enabled)\\n+                    {\\n+                        nsCOMPtr<nsIObserverService> os(do_GetService(\\\"@mozilla.org/observer-service;1\\\"));\\n+                        if (os)\\n+                            os->NotifyObservers(installInfo,\\n+                                                \\\"xpinstall-install-blocked\\\", \\n+                                                nsnull);\\n+                    }\\n+                    else\\n+                    {\\n+                        PRBool nativeRet = PR_FALSE;\\n+                        nativeThis->StartInstall(installInfo, &nativeRet);\\n+                        *rval = BOOLEAN_TO_JSVAL(nativeRet);\\n+                    }\\n+                }\\n+            }\\n+        }\\n     }\\n   }\\n   return JS_TRUE;\\n@@ -512,26 +549,14 @@ InstallTriggerGlobalStartSoftwareUpdate(JSContext *cx, JSObject *obj, uintN argc\\n \\n   *rval = JSVAL_FALSE;\\n \\n-  // make sure XPInstall is enabled, return if not\\n   nsIScriptGlobalObject *globalObject = nsnull;\\n   nsIScriptContext *scriptContext = GetScriptContextFromJSContext(cx);\\n   if (scriptContext)\\n       globalObject = scriptContext->GetGlobalObject();\\n \\n-  PRBool enabled = PR_FALSE;\\n-  nativeThis->UpdateEnabled(globalObject, XPI_WHITELIST, &enabled);\\n-  if (!enabled || !globalObject)\\n-  {\\n-    nsCOMPtr<nsPIDOMWindow> win(do_QueryInterface(globalObject));\\n-    nsCOMPtr<nsIObserverService> os(do_GetService(\\\"@mozilla.org/observer-service;1\\\"));\\n-    if (os)\\n-    {\\n-      os->NotifyObservers(win->GetDocShell(), \\\"xpinstall-install-blocked\\\", \\n-                          NS_LITERAL_STRING(\\\"install\\\").get());\\n-    }\\n-    return JS_TRUE;\\n-  }\\n-\\n+  if (!globalObject)\\n+      return JS_TRUE;\\n+  \\n   // get window.location to construct relative URLs\\n   nsCOMPtr<nsIURI> baseURL;\\n   JSObject* global = JS_GetGlobalObject(cx);\\n@@ -569,9 +594,42 @@ InstallTriggerGlobalStartSoftwareUpdate(JSContext *cx, JSObject *obj, uintN argc\\n         return JS_FALSE;\\n     }\\n \\n-    if(NS_OK == nativeThis->StartSoftwareUpdate(globalObject, xpiURL, flags, &nativeRet))\\n+    nsCOMPtr<nsIURI> checkuri;\\n+    rv = nativeThis->GetOriginatingURI(globalObject, getter_AddRefs(checkuri));\\n+    if (NS_SUCCEEDED(rv))\\n     {\\n-        *rval = BOOLEAN_TO_JSVAL(nativeRet);\\n+        nsAutoPtr<nsXPITriggerInfo> trigger(new nsXPITriggerInfo());\\n+        nsAutoPtr<nsXPITriggerItem> item(new nsXPITriggerItem(0,\\n+                                                              xpiURL.get(),\\n+                                                              nsnull));\\n+        if (trigger && item)\\n+        {\\n+            // trigger will free item when complete\\n+            trigger->Add(item.forget());\\n+            nsCOMPtr<nsIDOMWindowInternal> win(do_QueryInterface(globalObject));\\n+            nsCOMPtr<nsIXPIInstallInfo> installInfo =\\n+                                new nsXPIInstallInfo(win, checkuri, trigger, 0);\\n+            if (installInfo)\\n+            {\\n+                // From here trigger is owned by installInfo until passed on to nsXPInstallManager\\n+                trigger.forget();\\n+                PRBool enabled = PR_FALSE;\\n+                nativeThis->UpdateEnabled(checkuri, XPI_WHITELIST, &enabled);\\n+                if (!enabled)\\n+                {\\n+                    nsCOMPtr<nsIObserverService> os(do_GetService(\\\"@mozilla.org/observer-service;1\\\"));\\n+                    if (os)\\n+                        os->NotifyObservers(installInfo,\\n+                                            \\\"xpinstall-install-blocked\\\",\\n+                                            nsnull);\\n+                }\\n+                else\\n+                {\\n+                    nativeThis->StartInstall(installInfo, &nativeRet);\\n+                    *rval = BOOLEAN_TO_JSVAL(nativeRet);\\n+                }\\n+            }\\n+        }\\n     }\\n   }\\n   else\\ndiff --git a/xpinstall/src/nsXPIInstallInfo.cpp b/xpinstall/src/nsXPIInstallInfo.cpp\\nnew file mode 100644\\nindex 0000000..fe1f425\\n--- /dev/null\\n+++ b/xpinstall/src/nsXPIInstallInfo.cpp\\n@@ -0,0 +1,94 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is Mozilla XPInstall.\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Dave Townsend <dtownsend@oxymoronical.com>.\\n+ *\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK *****\\n+ */\\n+\\n+#include \\\"nsXPIInstallInfo.h\\\"\\n+\\n+NS_IMPL_ISUPPORTS1(nsXPIInstallInfo, nsIXPIInstallInfo)\\n+\\n+nsXPIInstallInfo::nsXPIInstallInfo(nsIDOMWindowInternal *aOriginatingWindow,\\n+                                   nsIURI *aOriginatingURI,\\n+                                   nsXPITriggerInfo *aTriggerInfo,\\n+                                   PRUint32 aChromeType)\\n+  : mOriginatingWindow(aOriginatingWindow), mOriginatingURI(aOriginatingURI),\\n+    mTriggerInfo(aTriggerInfo), mChromeType(aChromeType)\\n+{\\n+}\\n+\\n+nsXPIInstallInfo::~nsXPIInstallInfo()\\n+{\\n+    delete mTriggerInfo;\\n+}\\n+\\n+/* [noscript, notxpcom] attribute triggerInfoPtr triggerInfo; */\\n+NS_IMETHODIMP\\n+nsXPIInstallInfo::GetTriggerInfo(nsXPITriggerInfo * *aTriggerInfo)\\n+{\\n+    *aTriggerInfo = mTriggerInfo;\\n+    return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXPIInstallInfo::SetTriggerInfo(nsXPITriggerInfo * aTriggerInfo)\\n+{\\n+    mTriggerInfo = aTriggerInfo;\\n+    return NS_OK;\\n+}\\n+\\n+/* readonly attribute nsIDOMWindowInternal originatingWindow; */\\n+NS_IMETHODIMP\\n+nsXPIInstallInfo::GetOriginatingWindow(nsIDOMWindowInternal * *aOriginatingWindow)\\n+{\\n+    NS_IF_ADDREF(*aOriginatingWindow = mOriginatingWindow);\\n+    return NS_OK;\\n+}\\n+\\n+/* readonly attribute nsIURI uri; */\\n+NS_IMETHODIMP\\n+nsXPIInstallInfo::GetOriginatingURI(nsIURI * *aOriginatingURI)\\n+{\\n+    NS_IF_ADDREF(*aOriginatingURI = mOriginatingURI);\\n+    return NS_OK;\\n+}\\n+\\n+/* readonly attribute PRUint32 type; */\\n+NS_IMETHODIMP\\n+nsXPIInstallInfo::GetChromeType(PRUint32 *aChromeType)\\n+{\\n+    *aChromeType = mChromeType;\\n+    return NS_OK;\\n+}\\ndiff --git a/xpinstall/src/nsXPIInstallInfo.h b/xpinstall/src/nsXPIInstallInfo.h\\nnew file mode 100644\\nindex 0000000..5caa47f\\n--- /dev/null\\n+++ b/xpinstall/src/nsXPIInstallInfo.h\\n@@ -0,0 +1,62 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is Mozilla XPInstall.\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Dave Townsend <dtownsend@oxymoronical.com>.\\n+ *\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK *****\\n+ */\\n+\\n+#include \\\"nsXPITriggerInfo.h\\\"\\n+#include \\\"nsIXPIInstallInfo.h\\\"\\n+#include \\\"nsIDOMWindowInternal.h\\\"\\n+#include \\\"nsIDocShell.h\\\"\\n+#include \\\"nsIURI.h\\\"\\n+\\n+class nsXPIInstallInfo : public nsIXPIInstallInfo\\n+{\\n+public:\\n+  NS_DECL_ISUPPORTS\\n+  NS_DECL_NSIXPIINSTALLINFO\\n+\\n+  nsXPIInstallInfo(nsIDOMWindowInternal *aOriginatingWindow,\\n+                   nsIURI *aOriginatingURI, nsXPITriggerInfo *aTriggerInfo,\\n+                   PRUint32 aChromeType);\\n+\\n+private:\\n+  ~nsXPIInstallInfo();\\n+  \\n+  nsXPITriggerInfo* mTriggerInfo;\\n+  nsCOMPtr<nsIDOMWindowInternal> mOriginatingWindow;\\n+  nsCOMPtr<nsIURI> mOriginatingURI;\\n+  PRUint32 mChromeType;\\n+};\\ndiff --git a/xpinstall/src/nsXPInstallManager.cpp b/xpinstall/src/nsXPInstallManager.cpp\\nindex 89e8121..a70e90b 100644\\n--- a/xpinstall/src/nsXPInstallManager.cpp\\n+++ b/xpinstall/src/nsXPInstallManager.cpp\\n@@ -212,13 +212,38 @@ nsXPInstallManager::InitManagerWithHashes(const PRUnichar **aURLs,\\n     return rv;\\n }\\n \\n+NS_IMETHODIMP\\n+nsXPInstallManager::InitManagerWithInstallInfo(nsIXPIInstallInfo* aInstallInfo)\\n+{\\n+    nsXPITriggerInfo* triggers;\\n+    nsresult rv = aInstallInfo->GetTriggerInfo(&triggers);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    nsCOMPtr<nsIDOMWindowInternal> win;\\n+    rv = aInstallInfo->GetOriginatingWindow(getter_AddRefs(win));\\n+    if (NS_SUCCEEDED(rv))\\n+    {\\n+        PRUint32 type;\\n+        rv = aInstallInfo->GetChromeType(&type);\\n+        if (NS_SUCCEEDED(rv))\\n+        {\\n+            // Passing ownership onto InitManager which will free when necessary\\n+            aInstallInfo->SetTriggerInfo(nsnull);\\n+            return InitManager(win, triggers, type);\\n+        }\\n+    }\\n+\\n+    NS_RELEASE_THIS();\\n+    return rv;\\n+}\\n \\n NS_IMETHODIMP\\n-nsXPInstallManager::InitManager(nsIScriptGlobalObject* aGlobalObject, nsXPITriggerInfo* aTriggers, PRUint32 aChromeType)\\n+nsXPInstallManager::InitManager(nsIDOMWindowInternal* aParentWindow, nsXPITriggerInfo* aTriggers, PRUint32 aChromeType)\\n {\\n     if ( !aTriggers || aTriggers->Size() == 0 )\\n     {\\n         NS_WARNING(\\\"XPInstallManager called with no trigger info!\\\");\\n+        delete aTriggers;\\n         NS_RELEASE_THIS();\\n         return NS_ERROR_INVALID_POINTER;\\n     }\\n@@ -229,7 +254,7 @@ nsXPInstallManager::InitManager(nsIScriptGlobalObject* aGlobalObject, nsXPITrigg\\n     mChromeType = aChromeType;\\n     mNeedsShutdown = PR_TRUE;\\n \\n-    mParentWindow = do_QueryInterface(aGlobalObject);\\n+    mParentWindow = aParentWindow;\\n \\n     // Start downloading initial chunks looking for signatures,\\n     mOutstandingCertLoads = mTriggers->Size();\\ndiff --git a/xpinstall/src/nsXPInstallManager.h b/xpinstall/src/nsXPInstallManager.h\\nindex dea006e..59b1651 100644\\n--- a/xpinstall/src/nsXPInstallManager.h\\n+++ b/xpinstall/src/nsXPInstallManager.h\\n@@ -58,6 +58,7 @@\\n #include \\\"nsIObserver.h\\\"\\n #include \\\"nsIBadCertListener.h\\\"\\n #include \\\"nsIChannelEventSink.h\\\"\\n+#include \\\"nsIXPIInstallInfo.h\\\"\\n \\n #include \\\"nsISoftwareUpdate.h\\\"\\n \\n@@ -106,7 +107,7 @@ class nsXPInstallManager : public nsIXPIListener,\\n         NS_DECL_NSIBADCERTLISTENER\\n         NS_DECL_NSICHANNELEVENTSINK\\n \\n-        NS_IMETHOD InitManager(nsIScriptGlobalObject* aGlobalObject, nsXPITriggerInfo* aTrigger, PRUint32 aChromeType );\\n+        NS_IMETHOD InitManager(nsIDOMWindowInternal* aParentWindow, nsXPITriggerInfo* aTrigger, PRUint32 aChromeType );\\n \\n     private:\\n         nsresult    InitManagerInternal();\\n\""}