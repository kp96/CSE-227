{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas56d122c\""},"diff":"\"56d122c Fix nsStandardURL serialization/deserialization to properly restore all state. Bug 396389, r+sr=biesi, a=bsmedberg\\ndiff --git a/content/xul/document/public/nsIXULPrototypeCache.h b/content/xul/document/public/nsIXULPrototypeCache.h\\nindex fd9d41d..8d21b83 100644\\n--- a/content/xul/document/public/nsIXULPrototypeCache.h\\n+++ b/content/xul/document/public/nsIXULPrototypeCache.h\\n@@ -82,7 +82,7 @@ const char XUL_FASTLOAD_FILE_BASENAME[] = \\\"XUL\\\";\\n // (opaque to XPCOM FastLoad code) format of XUL-specific XDR serializations.\\n // See also JSXDR_BYTECODE_VERSION in jsxdrapi.h, which tracks incompatible JS\\n // bytecode version changes.\\n-#define XUL_FASTLOAD_FILE_VERSION       (0xfeedbeef - 23)\\n+#define XUL_FASTLOAD_FILE_VERSION       (0xfeedbeef - 24)\\n \\n #define XUL_SERIALIZATION_BUFFER_SIZE   (64 * 1024)\\n #define XUL_DESERIALIZATION_BUFFER_SIZE (8 * 1024)\\ndiff --git a/netwerk/base/src/nsStandardURL.cpp b/netwerk/base/src/nsStandardURL.cpp\\nindex caf3903..5fd5993 100644\\n--- a/netwerk/base/src/nsStandardURL.cpp\\n+++ b/netwerk/base/src/nsStandardURL.cpp\\n@@ -2631,6 +2631,10 @@ nsStandardURL::SetMutable(PRBool value)\\n NS_IMETHODIMP\\n nsStandardURL::Read(nsIObjectInputStream *stream)\\n {\\n+    NS_PRECONDITION(!mHostA, \\\"Shouldn't have cached ASCII host\\\");\\n+    NS_PRECONDITION(mSpecEncoding == eEncoding_Unknown,\\n+                    \\\"Shouldn't have spec encoding here\\\");\\n+    \\n     nsresult rv;\\n     \\n     PRUint32 urlType;\\n@@ -2706,9 +2710,30 @@ nsStandardURL::Read(nsIObjectInputStream *stream)\\n     PRBool isMutable;\\n     rv = stream->ReadBoolean(&isMutable);\\n     if (NS_FAILED(rv)) return rv;\\n-\\n+    if (isMutable != PR_TRUE && isMutable != PR_FALSE) {\\n+        NS_WARNING(\\\"Unexpected boolean value\\\");\\n+        return NS_ERROR_UNEXPECTED;\\n+    }\\n     mMutable = isMutable;\\n \\n+    PRBool supportsFileURL;\\n+    rv = stream->ReadBoolean(&supportsFileURL);\\n+    if (NS_FAILED(rv)) return rv;\\n+    if (supportsFileURL != PR_TRUE && supportsFileURL != PR_FALSE) {\\n+        NS_WARNING(\\\"Unexpected boolean value\\\");\\n+        return NS_ERROR_UNEXPECTED;\\n+    }\\n+    mSupportsFileURL = supportsFileURL;\\n+\\n+    PRUint32 hostEncoding;\\n+    rv = stream->Read32(&hostEncoding);\\n+    if (NS_FAILED(rv)) return rv;\\n+    if (hostEncoding != eEncoding_ASCII && hostEncoding != eEncoding_UTF8) {\\n+        NS_WARNING(\\\"Unexpected host encoding\\\");\\n+        return NS_ERROR_UNEXPECTED;\\n+    }\\n+    mHostEncoding = hostEncoding;\\n+    \\n     return NS_OK;\\n }\\n \\n@@ -2774,6 +2799,14 @@ nsStandardURL::Write(nsIObjectOutputStream *stream)\\n     rv = stream->WriteBoolean(mMutable);\\n     if (NS_FAILED(rv)) return rv;\\n \\n+    rv = stream->WriteBoolean(mSupportsFileURL);\\n+    if (NS_FAILED(rv)) return rv;\\n+\\n+    rv = stream->Write32(mHostEncoding);\\n+    if (NS_FAILED(rv)) return rv;\\n+\\n+    // mSpecEncoding and mHostA are just caches that can be recovered as needed.\\n+\\n     return NS_OK;\\n }\\n \\n\""}