{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0ca5566\""},"diff":"\"0ca5566 Improve places command updating performance, part 1. Bug 394695, r=dietrich, a=mconnor.\\ndiff --git a/browser/components/places/content/controller.js b/browser/components/places/content/controller.js\\nindex a4e35fa..cf34be8 100755\\n--- a/browser/components/places/content/controller.js\\n+++ b/browser/components/places/content/controller.js\\n@@ -84,9 +84,9 @@ function PlacesController(aView) {\\n   this._view = aView;\\n }\\n \\n-PlacesController.prototype = {  \\n+PlacesController.prototype = {\\n   /**\\n-   * The places view. \\n+   * The places view.\\n    */\\n   _view: null,\\n \\n@@ -350,7 +350,7 @@ PlacesController.prototype = {\\n     }\\n     return false;\\n   },\\n-  \\n+\\n   /**\\n    * Looks at the data on the clipboard to see if it is paste-able. \\n    * Paste-able data is:\\n@@ -362,34 +362,24 @@ PlacesController.prototype = {\\n   _isClipboardDataPasteable: function PC__isClipboardDataPasteable() {\\n     // if the clipboard contains TYPE_X_MOZ_PLACE_* data, it is definitely\\n     // pasteable, with no need to unwrap all the nodes.\\n-    \\n-    var placeTypes = [PlacesUtils.TYPE_X_MOZ_PLACE_CONTAINER,\\n-                      PlacesUtils.TYPE_X_MOZ_PLACE_SEPARATOR,\\n-                      PlacesUtils.TYPE_X_MOZ_PLACE];\\n-    var flavors = Cc[\\\"@mozilla.org/supports-array;1\\\"].\\n-                    createInstance(Ci.nsISupportsArray);\\n-    for (var i = 0; i < placeTypes.length; ++i) {\\n-      var cstring = Cc[\\\"@mozilla.org/supports-cstring;1\\\"].\\n-                      createInstance(Ci.nsISupportsCString);\\n-      cstring.data = placeTypes[i];\\n-      flavors.AppendElement(cstring);\\n-    }\\n-    var clipboard = Cc[\\\"@mozilla.org/widget/clipboard;1\\\"].\\n-                      getService(Ci.nsIClipboard);\\n-    var hasPlacesData = clipboard.hasDataMatchingFlavors(flavors,\\n-                                            Ci.nsIClipboard.kGlobalClipboard);\\n+\\n+    var flavors = PlacesUtils.placesFlavors;\\n+    var clipboard = PlacesUtils.clipboard;\\n+    var hasPlacesData =\\n+      clipboard.hasDataMatchingFlavors(flavors,\\n+                                       Ci.nsIClipboard.kGlobalClipboard);\\n     if (hasPlacesData)\\n       return this._view.insertionPoint != null;\\n-      \\n+\\n     // if the clipboard doesn't have TYPE_X_MOZ_PLACE_* data, we also allow\\n     // pasting of valid \\\"text/unicode\\\" and \\\"text/x-moz-url\\\" data\\n     var xferable = Cc[\\\"@mozilla.org/widget/transferable;1\\\"].\\n-                     createInstance(Ci.nsITransferable);\\n+                   createInstance(Ci.nsITransferable);\\n \\n     xferable.addDataFlavor(PlacesUtils.TYPE_X_MOZ_URL);\\n     xferable.addDataFlavor(PlacesUtils.TYPE_UNICODE);\\n     clipboard.getData(xferable, Ci.nsIClipboard.kGlobalClipboard);\\n-    \\n+\\n     try {\\n       // getAnyTransferData will throw if no data is available.\\n       var data = { }, type = { };\\n@@ -1379,17 +1369,32 @@ var PlacesControllerDragHelper = {\\n };\\n \\n function goUpdatePlacesCommands() {\\n-  goUpdateCommand(\\\"placesCmd_open\\\");\\n-  goUpdateCommand(\\\"placesCmd_open:window\\\");\\n-  goUpdateCommand(\\\"placesCmd_open:tab\\\");\\n-  goUpdateCommand(\\\"placesCmd_new:folder\\\");\\n-  goUpdateCommand(\\\"placesCmd_new:bookmark\\\");\\n-  goUpdateCommand(\\\"placesCmd_new:livemark\\\");\\n-  goUpdateCommand(\\\"placesCmd_new:separator\\\");\\n-  goUpdateCommand(\\\"placesCmd_show:info\\\");\\n-  goUpdateCommand(\\\"placesCmd_moveBookmarks\\\");\\n-  goUpdateCommand(\\\"placesCmd_setAsBookmarksToolbarFolder\\\");\\n-  goUpdateCommand(\\\"placesCmd_reload\\\");\\n-  goUpdateCommand(\\\"placesCmd_reloadMicrosummary\\\");\\n-  goUpdateCommand(\\\"placesCmd_sortBy:name\\\");\\n+  var placesController;\\n+  try {\\n+    // Or any other command...\\n+    placesController = top.document.commandDispatcher\\n+                          .getControllerForCommand(\\\"placesCmd_open\\\");\\n+  }\\n+  catch(ex) { return; }\\n+\\n+  function updatePlacesCommand(aCommand) {\\n+    var enabled = false;\\n+    if (placesController)\\n+      enabled = placesController.isCommandEnabled(aCommand);\\n+    goSetCommandEnabled(aCommand, enabled);\\n+  }\\n+\\n+  updatePlacesCommand(\\\"placesCmd_open\\\");\\n+  updatePlacesCommand(\\\"placesCmd_open:window\\\");\\n+  updatePlacesCommand(\\\"placesCmd_open:tab\\\");\\n+  updatePlacesCommand(\\\"placesCmd_new:folder\\\");\\n+  updatePlacesCommand(\\\"placesCmd_new:bookmark\\\");\\n+  updatePlacesCommand(\\\"placesCmd_new:livemark\\\");\\n+  updatePlacesCommand(\\\"placesCmd_new:separator\\\");\\n+  updatePlacesCommand(\\\"placesCmd_show:info\\\");\\n+  updatePlacesCommand(\\\"placesCmd_moveBookmarks\\\");\\n+  updatePlacesCommand(\\\"placesCmd_setAsBookmarksToolbarFolder\\\");\\n+  updatePlacesCommand(\\\"placesCmd_reload\\\");\\n+  updatePlacesCommand(\\\"placesCmd_reloadMicrosummary\\\");\\n+  updatePlacesCommand(\\\"placesCmd_sortBy:name\\\");\\n }\\ndiff --git a/browser/components/places/content/menu.xml b/browser/components/places/content/menu.xml\\nindex 62c97e5..1e33e6e 100755\\n--- a/browser/components/places/content/menu.xml\\n+++ b/browser/components/places/content/menu.xml\\n@@ -628,6 +628,9 @@\\n       <!-- nsIPlacesView -->\\n       <property name=\\\"insertionPoint\\\">\\n         <getter><![CDATA[\\n+          if (this._cachedInsertionPoint !== undefined)\\n+            return this._cachedInsertionPoint;\\n+\\n           // By default, the insertion point is at the top level, at the end.\\n           var index = -1;\\n           var folderId = 0;\\n@@ -645,7 +648,8 @@\\n               index = PlacesUtils.getIndexOfNode(this.selectedNode)\\n             }\\n           }\\n-          return new InsertionPoint(folderId, index);\\n+          this._cachedInsertionPoint = new InsertionPoint(folderId, index);\\n+          return this._cachedInsertionPoint;\\n         ]]></getter>\\n       </property>\\n \\n@@ -835,6 +839,7 @@\\n \\n         onDragStart: function TBV_DO_onDragStart(event, xferData, dragAction) {\\n           this._self._selection = event.target.node;\\n+          this._self._cachedInsertionPoint = undefined;\\n           if (event.ctrlKey)\\n             dragAction.action = Ci.nsIDragService.DRAGDROP_ACTION_COPY;\\n           xferData.data = this._self._controller.getTransferData(dragAction.action);\\n@@ -956,6 +961,7 @@\\n           // Set the selection to the node that was activated.  If that\\n           // node has a command but no data associated with it, it should\\n           // act on the entire menu.\\n+          this._cachedInsertionPoint = undefined;\\n           this._selection = event.target.node || this._resultNode;\\n         }\\n       ]]></handler>\\n@@ -965,8 +971,10 @@\\n         var popupNode = document.popupNode;\\n         // |popupNode == this| happens when the area between menuseparators\\n         // is clicked.\\n-        if (popupNode == this || popupNode.parentNode == this)\\n+        if (popupNode == this || popupNode.parentNode == this) {\\n           this._selection = popupNode.node || this._resultNode;\\n+          this._cachedInsertionPoint = undefined;\\n+        }\\n       ]]></handler>\\n \\n       <handler event=\\\"draggesture\\\"><![CDATA[\\ndiff --git a/browser/components/places/content/toolbar.xml b/browser/components/places/content/toolbar.xml\\nindex b4adfeb..6a39372 100755\\n--- a/browser/components/places/content/toolbar.xml\\n+++ b/browser/components/places/content/toolbar.xml\\n@@ -403,6 +403,9 @@\\n       <!-- nsIPlacesView -->\\n       <property name=\\\"insertionPoint\\\">\\n         <getter><![CDATA[\\n+          if (this._cachedInsertionPoint !== undefined)\\n+            return this._cachedInsertionPoint;\\n+\\n           // By default, the insertion point is at the top level, at the end. \\n           var index = -1;\\n           var folderId = this._result.root.itemId;\\n@@ -418,7 +421,8 @@\\n               index = PlacesUtils.getIndexOfNode(this.selectedNode)\\n             }\\n           }\\n-          return new InsertionPoint(folderId, index, 1);\\n+          this._cachedInsertionPoint = new InsertionPoint(folderId, index, 1);\\n+          return this._cachedInsertionPoint;\\n         ]]></getter>\\n       </property>\\n \\n@@ -994,6 +998,7 @@\\n           this._selection = event.target.node;\\n         else\\n           this._selection = this.getResult().root;\\n+        this._cachedInsertionPoint = undefined;\\n       ]]></handler>\\n       <handler event=\\\"draggesture\\\"><![CDATA[\\n         if (event.target.localName == \\\"toolbarbutton\\\")\\ndiff --git a/browser/components/places/content/tree.xml b/browser/components/places/content/tree.xml\\nindex 32ac687..e6226ab 100644\\n--- a/browser/components/places/content/tree.xml\\n+++ b/browser/components/places/content/tree.xml\\n@@ -144,6 +144,7 @@\\n           var treeView = new PlacesTreeView(this.showRoot);\\n           result.viewer = treeView;\\n           this.view = treeView;\\n+          this._cachedInsertionPoint = undefined;\\n         ]]></body>\\n       </method>\\n \\n@@ -432,24 +433,31 @@\\n           return null;\\n         ]]></getter>\\n       </property>\\n-      \\n+\\n+\\n       <!-- nsIPlacesView -->\\n       <property name=\\\"insertionPoint\\\">\\n         <getter><![CDATA[\\n+          // invalidated on selection and focus changes\\n+          if (this._cachedInsertionPoint !== undefined)\\n+            return this._cachedInsertionPoint;\\n+\\n           // there is no insertion point for history queries\\n           // so bail out now and save a lot of work when updating commands\\n           var resultNode = this.getResultNode();\\n           if (PlacesUtils.nodeIsQuery(resultNode)) {\\n             var options = asQuery(resultNode).queryOptions;\\n-            if (options.queryType == options.QUERY_TYPE_HISTORY) \\n-              return null;\\n+            if (options.queryType == options.QUERY_TYPE_HISTORY)\\n+              return this._cachedInsertionPoint = null;\\n           }\\n \\n           var orientation = NHRVO.DROP_AFTER;\\n           // If there is no selection, insert at the end of the container. \\n           if (!this.hasSelection) {\\n             var index = this.view.rowCount - 1;\\n-            return this._getInsertionPoint(index, orientation);\\n+            this._cachedInsertionPoint =\\n+              this._getInsertionPoint(index, orientation);\\n+            return this._cachedInsertionPoint;\\n           }\\n \\n           // This is a two-part process. The first part is determining the drop\\n@@ -484,7 +492,9 @@\\n                          .itemId == PlacesUtils.bookmarksRootId))\\n             orientation = NHRVO.DROP_ON;\\n \\n-          return this._getInsertionPoint(max.value, orientation);\\n+          this._cachedInsertionPoint =\\n+            this._getInsertionPoint(max.value, orientation);\\n+          return this._cachedInsertionPoint;\\n         ]]></getter>\\n       </property>\\n       \\n@@ -992,11 +1002,15 @@\\n     </implementation>\\n     <handlers>\\n       <handler event=\\\"focus\\\"><![CDATA[\\n+        this._cachedInsertionPoint = undefined;\\n+\\n         // See select handler. We need the sidebar's places commandset to be\\n         // updated as well\\n         document.commandDispatcher.updateCommands(\\\"focus\\\");\\n       ]]></handler>\\n       <handler event=\\\"select\\\"><![CDATA[\\n+        this._cachedInsertionPoint = undefined;\\n+\\n         // This additional complexity is here for the sidebars\\n         var win = window;\\n         while (true) {\\ndiff --git a/browser/components/places/content/utils.js b/browser/components/places/content/utils.js\\nindex f50cae4..b4cee52 100644\\n--- a/browser/components/places/content/utils.js\\n+++ b/browser/components/places/content/utils.js\\n@@ -200,6 +200,15 @@ var PlacesUtils = {\\n     return this._ptm;\\n   },\\n \\n+  _clipboard: null,\\n+  get clipboard() {\\n+    if (!this._clipboard) {\\n+      this._clipboard = Cc[\\\"@mozilla.org/widget/clipboard;1\\\"].\\n+                        getService(Ci.nsIClipboard);\\n+    }\\n+    return this._clipboard;\\n+  },\\n+\\n   /**\\n    * Makes a URI from a spec.\\n    * @param   aSpec\\n@@ -537,7 +546,7 @@ var PlacesUtils = {\\n                        type: self.TYPE_X_MOZ_PLACE_CONTAINER };\\n               bNode.containerOpen = wasOpen;\\n             }\\n-          } \\n+          }\\n           return node;\\n         }\\n         return JSON.toString(gatherDataPlace(convertNode(aNode)));\\n@@ -605,7 +614,7 @@ var PlacesUtils = {\\n         var wasOpen = bNode.containerOpen;\\n         if (!wasOpen)\\n           bNode.containerOpen = true;\\n-          \\n+\\n         var childString = bNode.title + NEWLINE;\\n         var cc = bNode.childCount;\\n         for (var i = 0; i < cc; ++i) {\\n@@ -669,14 +678,14 @@ var PlacesUtils = {\\n                        return aExcludeAnnotations.indexOf(aValue.name) == -1;\\n                     });\\n     }\\n-    \\n+\\n     return this.ptm.createItem(itemURL, aContainer, aIndex, itemTitle, keyword,\\n                                annos);\\n   },\\n \\n   /**\\n    * Gets a transaction for copying (recursively nesting to include children)\\n-   * a folder (or container) and its contents from one folder to another. \\n+   * a folder (or container) and its contents from one folder to another.\\n    *\\n    * @param   aData\\n    *          Unwrapped dropped folder data - Obj containing folder and children\\n@@ -696,12 +705,12 @@ var PlacesUtils = {\\n       for (var i = 0; i < cc; ++i) {\\n         var txn = null;\\n         var node = aChildren[i];\\n-        \\n+\\n         // adjusted to make sure that items are given the correct index -\\n         // transactions insert differently if index == -1\\n         if (aIndex > -1)\\n           index = aIndex + i;\\n-          \\n+\\n         if (node.type == self.TYPE_X_MOZ_PLACE_CONTAINER) {\\n           if (node.folder) {\\n             var title = node.folder.title;\\n@@ -823,11 +832,11 @@ var PlacesUtils = {\\n     case this.TYPE_X_MOZ_PLACE:\\n       if (data.id <= 0)\\n         return this._getURIItemCopyTransaction(data, container, index);\\n-  \\n+\\n       if (copy) {\\n         // Copying a child of a live-bookmark by itself should result\\n         // as a new normal bookmark item (bug 376731)\\n-        var copyBookmarkAnno = \\n+        var copyBookmarkAnno =\\n           this._getBookmarkItemCopyTransaction(data, container, index,\\n                                                [\\\"livemark/bookmarkFeedURI\\\"]);\\n         return copyBookmarkAnno;\\n@@ -1633,6 +1642,24 @@ var PlacesUtils = {\\n         urlsToOpen.push(aNodes[i].uri);\\n     }\\n     this._openTabset(urlsToOpen, aEvent);\\n+  },\\n+\\n+  _placesFlavors: null,\\n+  get placesFlavors() {\\n+    if (!this._placesFlavors) {\\n+      var placeTypes = [PlacesUtils.TYPE_X_MOZ_PLACE_CONTAINER,\\n+                        PlacesUtils.TYPE_X_MOZ_PLACE_SEPARATOR,\\n+                        PlacesUtils.TYPE_X_MOZ_PLACE];\\n+      this._placesFlavors = Cc[\\\"@mozilla.org/supports-array;1\\\"].\\n+                            createInstance(Ci.nsISupportsArray);\\n+      for (var i = 0; i < placeTypes.length; ++i) {\\n+        var cstring = Cc[\\\"@mozilla.org/supports-cstring;1\\\"].\\n+                        createInstance(Ci.nsISupportsCString);\\n+        cstring.data = placeTypes[i];\\n+        this._placesFlavors.AppendElement(cstring);\\n+      }\\n+    }\\n+    return this._placesFlavors;\\n   }\\n };\\n \\n\""}