{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basfd89f0a\""},"diff":"\"fd89f0a Bug 387970: Fix permissions of release deliverables; also, some path-construction cleanup, and a MozBuild::Util fix. r=cf\\ndiff --git a/tools/release/Bootstrap/Step/Stage.pm b/tools/release/Bootstrap/Step/Stage.pm\\nindex a7ca261..b7beceb 100644\\n--- a/tools/release/Bootstrap/Step/Stage.pm\\n+++ b/tools/release/Bootstrap/Step/Stage.pm\\n@@ -7,7 +7,7 @@ package Bootstrap::Step::Stage;\\n use File::Basename;\\n use File::Copy qw(copy move);\\n use File::Find qw(find);\\n-use File::Path qw(rmtree);\\n+use File::Path qw(rmtree mkpath);\\n \\n use Cwd;\\n \\n@@ -213,7 +213,7 @@ sub Execute {\\n  \\n     # Create skeleton batch directory.\\n     my $skelDir = catfile($stageDir, 'batch-skel', 'stage');\\n-    if (not -d \\\"$skelDir\\\") {\\n+    if (not -d $skelDir) {\\n         MkdirWithPath(dir => $skelDir) \\n           or die \\\"Cannot create $skelDir: $!\\\";\\n         $this->Log(msg => \\\"Created directory $skelDir\\\");\\n@@ -246,6 +246,7 @@ sub Execute {\\n           or die \\\"Cannot create $batch1Dir: $!\\\";\\n         $this->Log(msg => \\\"Created directory $batch1Dir\\\");\\n     }\\n+\\n     $this->Shell(\\n       cmd => 'cvs',\\n       cmdArgs => [ '-d', $mofoCvsroot, \\n@@ -255,14 +256,16 @@ sub Execute {\\n       logFile => catfile($logDir, 'stage_publickey_checkout.log'),\\n       dir => $batch1Dir\\n     );\\n+\\n+    # We do this to get the version of the key we shipped with in the logfile\\n     $this->Shell(\\n       cmd => 'cvs',\\n       cmdArgs => [ 'status' ],\\n       logFile => catfile($logDir, 'stage_publickey_checkout.log'),\\n-      dir => catfile($stageDir, 'batch1', 'key-checkout'),\\n+      dir => catfile($batch1Dir, 'key-checkout'),\\n     );\\n \\n-    my $keyFile = catfile($stageDir, 'batch1', 'key-checkout', 'PUBLIC-KEY');\\n+    my $keyFile = catfile($batch1Dir, 'key-checkout', 'PUBLIC-KEY');\\n     my $keyFileDest = catfile($skelDir, 'KEY');\\n     copy($keyFile, $keyFileDest) or die(\\\"Could not copy $keyFile to $keyFileDest: $!\\\");\\n \\n@@ -276,9 +279,9 @@ sub Execute {\\n     \\n     # Collect the release files from the candidates directory into a prestage\\n     # directory.\\n-    my $prestageDir = catfile($stageDir, 'batch1', 'prestage');\\n+    my $prestageDir = catfile($batch1Dir, 'prestage');\\n     if (not -d $prestageDir) {\\n-        MkdirWithPath(dir => $prestageDir) \\n+        MkdirWithPath(dir => $prestageDir, mask => 0755) \\n           or die \\\"Cannot create $prestageDir: $!\\\";\\n         $this->Log(msg => \\\"Created directory $prestageDir\\\");\\n     }\\n@@ -290,7 +293,7 @@ sub Execute {\\n                                  '/',\\n                     './'],\\n       logFile => catfile($logDir, 'stage_collect.log'),\\n-      dir => catfile($stageDir, 'batch1', 'prestage'),\\n+      dir => $prestageDir\\n     );\\n \\n     # Create a pruning/\\\"trimmed\\\" area; this area will be used to remove\\n@@ -302,13 +305,16 @@ sub Execute {\\n       dir => $batch1Dir\\n     );\\n \\n+    my $prestageTrimmedDir = catfile($batch1Dir, 'prestage-trimmed');\\n+\\n     # Remove unknown/unrecognized directories from the -candidates dir; after\\n     # this, the only directories that should be in the prestage-trimmed\\n     # directory are directories that we expliciately handle below, to prep\\n     # for groom-files.\\n     $this->{'scrubTrimmedDirDeleteList'} = [];\\n-    find(sub { return $this->ScrubTrimmedDirCallback(); },\\n-     catfile($stageDir, 'batch1', 'prestage-trimmed'));\\n+\\n+    find(sub { return $this->ScrubTrimmedDirCallback(); }, $prestageTrimmedDir);\\n+\\n     foreach my $delDir (@{$this->{'scrubTrimmedDirDeleteList'}}) {\\n         if (-e $delDir && -d $delDir) {\\n             $this->Log(msg => \\\"rmtree() ing $delDir\\\");\\n@@ -322,26 +328,28 @@ sub Execute {\\n \\n     # All the magic happens here; we remove unshipped deliverables and cross-\\n     # check the locales we do ship in this callback.\\n-    find(sub { return $this->TrimCallback(); },\\n-     catfile($stageDir, 'batch1', 'prestage-trimmed'));\\n+    #\\n+    # We also set the correct permissions and ownership of the dictories and\\n+    # files in a mishmash of chmod()/chown() calls in TrimCallback() and later\\n+    # in GroomFiles(); we should really attempt to consolidate these calls at\\n+    # some point (says the hacker who wrote most of that ickyness ;-)\\n+    find(sub { return $this->TrimCallback(); }, $prestageTrimmedDir);\\n    \\n     # Create a stage-unsigned directory to run groom-files in.\\n     $this->Shell(\\n       cmd => 'rsync',\\n       cmdArgs => ['-av', 'prestage-trimmed/', 'stage-unsigned/'],\\n       logFile => catfile($logDir, 'stage_collect_stage.log'),\\n-      dir => catfile($stageDir, 'batch1'),\\n+      dir => $batch1Dir\\n     );\\n \\n     find(sub { return $this->RemoveMarsCallback(); },\\n-     catfile($stageDir, 'batch1', 'stage-unsigned'));\\n+     catfile($batch1Dir, 'stage-unsigned'));\\n \\n     # Nightly builds using a different naming scheme than production.\\n     # Rename the files.\\n     # TODO should support --long filenames, for e.g. Alpha and Beta\\n-    $this->GroomFiles(\\n-                      catfile($stageDir, 'batch1', 'stage-unsigned')\\n-                     );\\n+    $this->GroomFiles(catfile($batch1Dir, 'stage-unsigned'));\\n \\n     # fix xpi dir names - This is a hash of directory names in the pre-stage\\n     # dir -> directories under which those directories should be moved to;\\n@@ -351,8 +359,8 @@ sub Execute {\\n                    'mac-xpi' => 'mac');\\n \\n     foreach my $xpiDir (keys(%xpiDirs)) {\\n-        my $fromDir = catfile($stageDir, 'batch1', 'stage-unsigned', $xpiDir);\\n-        my $toDir = catfile($stageDir, 'batch1', 'stage-unsigned',\\n+        my $fromDir = catfile($batch1Dir, 'stage-unsigned', $xpiDir);\\n+        my $toDir = catfile($batch1Dir, 'stage-unsigned',\\n          $xpiDirs{$xpiDir}, 'xpi');\\n \\n         if (-e $fromDir) {\\n@@ -399,10 +407,7 @@ sub Execute {\\n         }\\n     }\\n \\n-    $this->GroomFiles(\\n-                      catfile($stageDir, 'batch1', 'mar')\\n-                      );\\n-\\n+    $this->GroomFiles(catfile($batch1Dir, 'mar'));\\n }\\n \\n sub Verify {\\n@@ -512,8 +517,7 @@ sub ScrubTrimmedDirCallback {\\n             return if (basename($dirent) eq $allowedDir);\\n         }\\n \\n-        $this->Log(msg => \\\"Adding extra RC directory entry for deletion: \\\" .\\n-         $dirent);\\n+        $this->Log(msg => \\\"WILL DELETE: $dirent\\\");\\n         push(@{$this->{'scrubTrimmedDirDeleteList'}}, $dirent);\\n     }\\n }\\n@@ -530,9 +534,9 @@ sub TrimCallback {\\n          # ZIP files are not shipped; neither are en-US lang packs\\n          ($dirent =~ /\\\\.zip$/) ||\\n          ($dirent =~ /en-US\\\\.xpi$/)) {\\n-          unlink($dirent) || die \\\"Could not unlink $dirent: $!\\\";\\n+            unlink($dirent) || die \\\"Could not unlink $dirent: $!\\\";\\n             $this->Log(msg => \\\"Unlinked $dirent\\\");\\n-          return;\\n+            return;\\n         }\\n \\n         # source tarballs don't have a locale, so don't check them for one;\\n@@ -575,7 +579,8 @@ sub TrimCallback {\\n           or die \\\"Could not chmod $dirent to 0755: $!\\\";\\n         $this->Log(msg => \\\"Changed mode of $dirent to 0755\\\");\\n     } else {\\n-        die(\\\"Unexpected non-file/non-dir directory entry: $dirent\\\");\\n+        die(\\\"Bootstrap::Step::Stage::TrimCallback(): Unexpected \\\" .\\n+         \\\"non-file/non-dir directory entry: $dirent\\\");\\n     }\\n \\n     my $product = $config->Get(var => 'product');\\n@@ -658,6 +663,8 @@ sub GroomFiles {\\n     }\\n \\n     my $config = new Bootstrap::Config();\\n+    my (undef, undef, $gid) = getgrnam($config->Get(var => 'product')) or\\n+     die \\\"Could not getgrname for \\\" . $config->Get(var => 'product') .\\\": $!\\\";\\n \\n     my $start_dir = getcwd();\\n     chdir($dir) or\\n@@ -686,12 +693,28 @@ sub GroomFiles {\\n \\n             if ( ! -e $pretty_name ) {\\n                 if (! -d $pretty_dirname) {\\n-                    MkdirWithPath(dir => $pretty_dirname) \\n-                        or die \\\"Cannot create $pretty_dirname: $!\\\";\\n+                    my @dirsCreated = ();\\n+\\n+                    eval { @dirsCreated = mkpath($pretty_dirname, 1) };\\n+           \\n+                    if ($@ ne '') {\\n+                        die(\\\"Cannot create $pretty_dirname: $@\\\");\\n+                    }\\n+\\n+                    foreach my $dir (@dirsCreated) {\\n+                        chmod(0755, $dir) or die(\\\"Could not chmod $dir to 755\\\");\\n+                        chown(-1, $gid, $dir) or die(\\\"Could not chown $dir \\\" .\\n+                         \\\"to group $gid\\\");\\n+                    }\\n+\\n                     $this->Log(msg => \\\"Created directory $pretty_dirname\\\");\\n                 }\\n                 copy($original_name, $pretty_name) or\\n                     die(\\\"Could not copy $original_name to $pretty_name: $!\\\");\\n+                chmod(0644, $pretty_name) or\\n+                 die(\\\"Could not chmod $pretty_name to 644\\\");\\n+                chown(-1, $gid, $pretty_name) or \\n+                 die(\\\"Could not chown $pretty_name to group $gid\\\");\\n                 $once = 1;\\n             }\\n         }\\ndiff --git a/tools/release/MozBuild/Util.pm b/tools/release/MozBuild/Util.pm\\nindex 3f04a70..637eba6 100644\\n--- a/tools/release/MozBuild/Util.pm\\n+++ b/tools/release/MozBuild/Util.pm\\n@@ -310,7 +310,7 @@ sub MkdirWithPath {\\n     $dirMask = defined($dirMask) ? $dirMask : 0777;\\n \\n     eval { mkpath($dirToCreate, $printProgress, $dirMask) };\\n-    return defined($@);\\n+    return ($@ eq '');\\n }\\n \\n sub HashFile {\\n\""}