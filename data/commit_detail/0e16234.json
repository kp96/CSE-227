{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0e16234\""},"diff":"\"0e16234 Fix leak when two documents race to load the same script (but leave for later fixing that we load the same script twice).  b=392542  r=enndeakin  sr=bzbarsky  a=roc\\ndiff --git a/content/xul/document/src/nsXULPrototypeCache.cpp b/content/xul/document/src/nsXULPrototypeCache.cpp\\nindex accfb32..e71f435 100644\\n--- a/content/xul/document/src/nsXULPrototypeCache.cpp\\n+++ b/content/xul/document/src/nsXULPrototypeCache.cpp\\n@@ -269,9 +269,27 @@ nsXULPrototypeCache::GetScript(nsIURI* aURI, PRUint32 *aLangID)\\n }\\n \\n \\n+/* static */\\n+PR_STATIC_CALLBACK(PLDHashOperator)\\n+ReleaseScriptObjectCallback(nsIURI* aKey, CacheScriptEntry &aData, void* aClosure)\\n+{\\n+    nsCOMPtr<nsIScriptRuntime> rt;\\n+    if (NS_SUCCEEDED(NS_GetScriptRuntimeByID(aData.mScriptTypeID, getter_AddRefs(rt))))\\n+        rt->DropScriptObject(aData.mScriptObject);\\n+    return PL_DHASH_REMOVE;\\n+}\\n+\\n nsresult\\n nsXULPrototypeCache::PutScript(nsIURI* aURI, PRUint32 aLangID, void* aScriptObject)\\n {\\n+    CacheScriptEntry existingEntry;\\n+    if (mScriptTable.Get(aURI, &existingEntry)) {\\n+        NS_WARNING(\\\"loaded the same script twice (bug 392650)\\\");\\n+\\n+        // Reuse the callback used for enumeration in FlushScripts\\n+        ReleaseScriptObjectCallback(aURI, existingEntry, nsnull);\\n+    }\\n+\\n     CacheScriptEntry entry = {aLangID, aScriptObject};\\n \\n     NS_ENSURE_TRUE(mScriptTable.Put(aURI, entry), NS_ERROR_OUT_OF_MEMORY);\\n@@ -287,16 +305,6 @@ nsXULPrototypeCache::PutScript(nsIURI* aURI, PRUint32 aLangID, void* aScriptObje\\n     return rv;\\n }\\n \\n-/* static */\\n-PR_STATIC_CALLBACK(PLDHashOperator)\\n-ReleaseScriptObjectCallback(nsIURI* aKey, CacheScriptEntry &aData, void* aClosure)\\n-{\\n-    nsCOMPtr<nsIScriptRuntime> rt;\\n-    if (NS_SUCCEEDED(NS_GetScriptRuntimeByID(aData.mScriptTypeID, getter_AddRefs(rt))))\\n-        rt->DropScriptObject(aData.mScriptObject);\\n-    return PL_DHASH_REMOVE;\\n-}\\n-\\n void\\n nsXULPrototypeCache::FlushScripts()\\n {\\n\""}