{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas6e096da\""},"diff":"\"6e096da send native events to plugins on mouse enter and exit. b=332597 r=smichaud sr=roc\\ndiff --git a/widget/src/cocoa/nsChildView.mm b/widget/src/cocoa/nsChildView.mm\\nindex 808f112..03a8dd4 100644\\n--- a/widget/src/cocoa/nsChildView.mm\\n+++ b/widget/src/cocoa/nsChildView.mm\\n@@ -87,6 +87,11 @@\\n PRLogModuleInfo* sCocoaLog = nsnull;\\n #endif\\n \\n+// npapi.h defines NPEventType_AdjustCursorEvent but we don't want to include npapi.h here.\\n+// We need to send this in the \\\"what\\\" field for certain native plugin events. WebKit does\\n+// this as well.\\n+#define adjustCursorEvent 33\\n+\\n extern \\\"C\\\" {\\n   CG_EXTERN void CGContextResetCTM(CGContextRef);\\n   CG_EXTERN void CGContextSetCTM(CGContextRef, CGAffineTransform);\\n@@ -2621,11 +2626,12 @@ class nsNonNativeContextMenuEvent : public nsRunnable {\\n }\\n \\n \\n-static nsEventStatus SendMouseEvent(PRBool isTrusted,\\n-                                    PRUint32 msg,\\n-                                    nsIWidget *widget,\\n-                                    nsMouseEvent::reasonType aReason,\\n-                                    NSPoint* localEventLocation)\\n+// sends a mouse enter or exit event into gecko\\n+static nsEventStatus SendGeckoMouseEnterOrExitEvent(PRBool isTrusted,\\n+                                                    PRUint32 msg,\\n+                                                    nsIWidget *widget,\\n+                                                    nsMouseEvent::reasonType aReason,\\n+                                                    NSPoint* localEventLocation)\\n {\\n   if (!widget || !localEventLocation)\\n     return nsEventStatus_eIgnore;\\n@@ -2634,6 +2640,14 @@ static nsEventStatus SendMouseEvent(PRBool isTrusted,\\n   event.refPoint.x = nscoord((PRInt32)localEventLocation->x);\\n   event.refPoint.y = nscoord((PRInt32)localEventLocation->y);\\n \\n+  EventRecord macEvent;\\n+  macEvent.what = adjustCursorEvent;\\n+  macEvent.message = 0;\\n+  macEvent.when = ::TickCount();\\n+  ::GetGlobalMouse(&macEvent.where);\\n+  macEvent.modifiers = GetCurrentKeyModifiers();\\n+  event.nativeMsg = &macEvent;\\n+\\n   nsEventStatus status;\\n   widget->DispatchEvent(&event, status);\\n   return status;\\n@@ -2655,7 +2669,7 @@ static nsEventStatus SendMouseEvent(PRBool isTrusted,\\n   if (![NSApp isActive] && ![ChildView mouseEventIsOverRollupWidget:theEvent]) {\\n     if (sLastViewEntered) {\\n       nsIWidget* lastViewEnteredWidget = [(NSView<mozView>*)sLastViewEntered widget];\\n-      SendMouseEvent(PR_TRUE, NS_MOUSE_EXIT, lastViewEnteredWidget, nsMouseEvent::eReal, &viewEventLocation);\\n+      SendGeckoMouseEnterOrExitEvent(PR_TRUE, NS_MOUSE_EXIT, lastViewEnteredWidget, nsMouseEvent::eReal, &viewEventLocation);\\n       sLastViewEntered = nil;\\n     }\\n     return;\\n@@ -2733,7 +2747,7 @@ static nsEventStatus SendMouseEvent(PRBool isTrusted,\\n     if (sLastViewEntered) {\\n       // NSLog(@\\\"sending NS_MOUSE_EXIT event with point %f,%f\\\\n\\\", viewEventLocation.x, viewEventLocation.y);\\n       nsIWidget* lastViewEnteredWidget = [(NSView<mozView>*)sLastViewEntered widget];\\n-      SendMouseEvent(PR_TRUE, NS_MOUSE_EXIT, lastViewEnteredWidget, nsMouseEvent::eReal, &viewEventLocation);\\n+      SendGeckoMouseEnterOrExitEvent(PR_TRUE, NS_MOUSE_EXIT, lastViewEnteredWidget, nsMouseEvent::eReal, &viewEventLocation);\\n       sLastViewEntered = nil;      \\n     }\\n     return;\\n@@ -2748,11 +2762,11 @@ static nsEventStatus SendMouseEvent(PRBool isTrusted,\\n     if (sLastViewEntered) {\\n       // NSLog(@\\\"sending NS_MOUSE_EXIT event with point %f,%f\\\\n\\\", viewEventLocation.x, viewEventLocation.y);\\n       nsIWidget* lastViewEnteredWidget = [(NSView<mozView>*)sLastViewEntered widget];\\n-      SendMouseEvent(PR_TRUE, NS_MOUSE_EXIT, lastViewEnteredWidget, nsMouseEvent::eReal, &viewEventLocation);\\n+      SendGeckoMouseEnterOrExitEvent(PR_TRUE, NS_MOUSE_EXIT, lastViewEnteredWidget, nsMouseEvent::eReal, &viewEventLocation);\\n     }\\n \\n     // NSLog(@\\\"sending NS_MOUSE_ENTER event with point %f,%f\\\\n\\\", viewEventLocation.x, viewEventLocation.y);\\n-    SendMouseEvent(PR_TRUE, NS_MOUSE_ENTER, mGeckoChild, nsMouseEvent::eReal, &viewEventLocation);\\n+    SendGeckoMouseEnterOrExitEvent(PR_TRUE, NS_MOUSE_ENTER, mGeckoChild, nsMouseEvent::eReal, &viewEventLocation);\\n \\n     // mark this view as the last view entered\\n     sLastViewEntered = (NSView*)self;\\n@@ -2772,11 +2786,10 @@ static nsEventStatus SendMouseEvent(PRBool isTrusted,\\n \\n   // create native EventRecord for use by plugins\\n   EventRecord macEvent;\\n-  macEvent.what = nullEvent;\\n+  macEvent.what = adjustCursorEvent;\\n   macEvent.message = 0;\\n   macEvent.when = ::TickCount();\\n   ::GetGlobalMouse(&macEvent.where);\\n-  \\n   macEvent.modifiers = GetCurrentKeyModifiers();\\n   geckoEvent.nativeMsg = &macEvent;\\n \\n\""}