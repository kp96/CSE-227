{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basc87eb16\""},"diff":"\"c87eb16 bug 376721 - send time-since-last-crash with crash report.  r=bsmedberg/mento\\ndiff --git a/toolkit/crashreporter/nsExceptionHandler.cpp b/toolkit/crashreporter/nsExceptionHandler.cpp\\nindex a6dd2a5..657576b 100755\\n--- a/toolkit/crashreporter/nsExceptionHandler.cpp\\n+++ b/toolkit/crashreporter/nsExceptionHandler.cpp\\n@@ -88,6 +88,11 @@ typedef wchar_t XP_CHAR;\\n #define XP_PATH_MAX 4096\\n // \\\"<reporter path>\\\" \\\"<minidump path>\\\"\\n #define CMDLINE_SIZE ((XP_PATH_MAX * 2) + 6)\\n+#ifdef _USE_32BIT_TIME_T\\n+#define XP_TTOA(time, buffer, base) ltoa(time, buffer, base)\\n+#else\\n+#define XP_TTOA(time, buffer, base) _i64toa(time, buffer, base)\\n+#endif\\n #else\\n typedef char XP_CHAR;\\n #define TO_NEW_XP_CHAR(x) ToNewUTF8String(x)\\n@@ -97,6 +102,7 @@ typedef char XP_CHAR;\\n #define PATH_SEPARATOR \\\"/\\\"\\n #define XP_PATH_SEPARATOR \\\"/\\\"\\n #define XP_PATH_MAX PATH_MAX\\n+#define XP_TTOA(time, buffer, base) sprintf(buffer, \\\"%ld\\\", time)\\n #endif // XP_WIN32\\n \\n static const XP_CHAR dumpFileExtension[] = {'.', 'd', 'm', 'p',\\n@@ -114,6 +120,19 @@ static bool doReport = true;\\n // if this is true, we pass the exception on to the OS crash reporter\\n static bool showOSCrashReporter = false;\\n \\n+// The time of the last recorded crash, as a time_t value.\\n+static time_t lastCrashTime = 0;\\n+// The pathname of a file to store the crash time in\\n+static XP_CHAR lastCrashTimeFilename[XP_PATH_MAX] = {0};\\n+\\n+// these are just here for readability\\n+static const char kCrashTimeParameter[] = \\\"CrashTime=\\\";\\n+static const int kCrashTimeParameterLen = sizeof(kCrashTimeParameter)-1;\\n+\\n+static const char kTimeSinceLastCrashParameter[] = \\\"SecondsSinceLastCrash=\\\";\\n+static const int kTimeSinceLastCrashParameterLen =\\n+                                     sizeof(kTimeSinceLastCrashParameter)-1;\\n+\\n // this holds additional data sent via the API\\n static nsDataHashtable<nsCStringHashKey,nsCString>* crashReporterAPIData_Hash;\\n static nsCString* crashReporterAPIData = nsnull;\\n@@ -157,7 +176,46 @@ bool MinidumpCallback(const XP_CHAR* dump_path,\\n   p = Concat(p, minidump_id, &size);\\n   Concat(p, extraFileExtension, &size);\\n \\n-#ifdef XP_WIN32\\n+  // calculate time since last crash (if possible), and store\\n+  // the time of this crash.\\n+  time_t crashTime = time(NULL);\\n+  time_t timeSinceLastCrash = 0;\\n+  // stringified versions of the above\\n+  char crashTimeString[32];\\n+  int crashTimeStringLen = 0;\\n+  char timeSinceLastCrashString[32];\\n+  int timeSinceLastCrashStringLen = 0;\\n+\\n+  XP_TTOA(crashTime, crashTimeString, 10);\\n+  crashTimeStringLen = strlen(crashTimeString);\\n+  if (lastCrashTime != 0) {\\n+    timeSinceLastCrash = crashTime - lastCrashTime;\\n+    XP_TTOA(timeSinceLastCrash, timeSinceLastCrashString, 10);\\n+    timeSinceLastCrashStringLen = strlen(timeSinceLastCrashString);\\n+  }\\n+  // write crash time to file\\n+  if (lastCrashTimeFilename[0] != 0) {\\n+#if defined(XP_WIN32)\\n+    HANDLE hFile = CreateFile(lastCrashTimeFilename, GENERIC_WRITE, 0,\\n+                              NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL,\\n+                              NULL);\\n+    if(hFile != INVALID_HANDLE_VALUE) {\\n+      DWORD nBytes;\\n+      WriteFile(hFile, crashTimeString, crashTimeStringLen, &nBytes, NULL);\\n+      CloseHandle(hFile);\\n+    }\\n+#elif defined(XP_UNIX)\\n+    int fd = open(lastCrashTimeFilename,\\n+                  O_WRONLY | O_CREAT | O_TRUNC,\\n+                  0600);\\n+    if (fd != -1) {\\n+      write(fd, crashTimeString, crashTimeStringLen);\\n+      close(fd);\\n+    }\\n+#endif\\n+  }\\n+  \\n+#if defined(XP_WIN32)\\n   XP_CHAR cmdLine[CMDLINE_SIZE];\\n   size = CMDLINE_SIZE;\\n   p = Concat(cmdLine, L\\\"\\\\\\\"\\\", &size);\\n@@ -175,6 +233,17 @@ bool MinidumpCallback(const XP_CHAR* dump_path,\\n       DWORD nBytes;\\n       WriteFile(hFile, crashReporterAPIData->get(),\\n                 crashReporterAPIData->Length(), &nBytes, NULL);\\n+      WriteFile(hFile, kCrashTimeParameter, kCrashTimeParameterLen,\\n+                &nBytes, NULL);\\n+      WriteFile(hFile, crashTimeString, crashTimeStringLen, &nBytes, NULL);\\n+      WriteFile(hFile, \\\"\\\\n\\\", 1, &nBytes, NULL);\\n+      if (timeSinceLastCrash != 0) {\\n+        WriteFile(hFile, kTimeSinceLastCrashParameter,\\n+                  kTimeSinceLastCrashParameterLen, &nBytes, NULL);\\n+        WriteFile(hFile, timeSinceLastCrashString, timeSinceLastCrashStringLen,\\n+                  &nBytes, NULL);\\n+        WriteFile(hFile, \\\"\\\\n\\\", 1, &nBytes, NULL);\\n+      }\\n       CloseHandle(hFile);\\n     }\\n   }\\n@@ -209,6 +278,14 @@ bool MinidumpCallback(const XP_CHAR* dump_path,\\n     if (fd != -1) {\\n       // not much we can do in case of error\\n       write(fd, crashReporterAPIData->get(), crashReporterAPIData->Length());\\n+      write(fd, kCrashTimeParameter, kCrashTimeParameterLen);\\n+      write(fd, crashTimeString, crashTimeStringLen);\\n+      write(fd, \\\"\\\\n\\\", 1);\\n+      if (timeSinceLastCrash != 0) {\\n+        write(fd, kTimeSinceLastCrashParameter,kTimeSinceLastCrashParameterLen);\\n+        write(fd, timeSinceLastCrashString, timeSinceLastCrashStringLen);\\n+        write(fd, \\\"\\\\n\\\", 1);\\n+      }\\n       close (fd);\\n     }\\n   }\\n@@ -400,7 +477,7 @@ typedef nsresult (*InitDataFunc)(nsACString&);\\n // does not exist, create it and initialize its contents\\n // by calling aInitFunc for the data.\\n static nsresult \\n-GetOrInit(nsILocalFile* aDir, const nsAString& filename,\\n+GetOrInit(nsIFile* aDir, const nsAString& filename,\\n           nsACString& aContents, InitDataFunc aInitFunc)\\n {\\n   PRBool exists;\\n@@ -416,10 +493,16 @@ GetOrInit(nsILocalFile* aDir, const nsAString& filename,\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   if (!exists) {\\n-    // get the initial value and write it to the file\\n-    rv = aInitFunc(aContents);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-    rv = WriteDataToFile(dataFile, aContents);\\n+    if (aInitFunc) {\\n+      // get the initial value and write it to the file\\n+      rv = aInitFunc(aContents);\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+      rv = WriteDataToFile(dataFile, aContents);\\n+    }\\n+    else {\\n+      // didn't pass in an init func\\n+      rv = NS_ERROR_FAILURE;\\n+    }\\n   }\\n   else {\\n     // just get the file's contents\\n@@ -479,27 +562,69 @@ InitInstallTime(nsACString& aInstallTime)\\n   return NS_OK;\\n }\\n \\n-// Annotate the crash report with a Unique User ID.\\n-// TODO: also add time since install, and time since last crash.\\n-// (bug 376720 and bug 376721)\\n+// Annotate the crash report with a Unique User ID and time\\n+// since install.  Also do some prep work for recording\\n+// time since last crash, which must be calculated at\\n+// crash time.\\n // If any piece of data doesn't exist, initialize it first.\\n nsresult SetupExtraData(nsILocalFile* aAppDataDirectory,\\n                         const nsACString& aBuildID)\\n {\\n-  nsresult rv = aAppDataDirectory->Append(NS_LITERAL_STRING(\\\"Crash Reports\\\"));\\n+  \\n+  nsCOMPtr<nsIFile> dataDirectory;\\n+  nsresult rv = aAppDataDirectory->Clone(getter_AddRefs(dataDirectory));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  rv = dataDirectory->Append(NS_LITERAL_STRING(\\\"Crash Reports\\\"));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   nsCAutoString data;\\n-  if(NS_SUCCEEDED(GetOrInit(aAppDataDirectory, NS_LITERAL_STRING(\\\"UserID\\\"),\\n+  if(NS_SUCCEEDED(GetOrInit(dataDirectory, NS_LITERAL_STRING(\\\"UserID\\\"),\\n                             data, InitUserID)))\\n     AnnotateCrashReport(NS_LITERAL_CSTRING(\\\"UserID\\\"), data);\\n \\n-  if(NS_SUCCEEDED(GetOrInit(aAppDataDirectory,\\n+  if(NS_SUCCEEDED(GetOrInit(dataDirectory,\\n                             NS_LITERAL_STRING(\\\"InstallTime\\\") +\\n                             NS_ConvertASCIItoUTF16(aBuildID),\\n                             data, InitInstallTime)))\\n     AnnotateCrashReport(NS_LITERAL_CSTRING(\\\"InstallTime\\\"), data);\\n \\n+  // this is a little different, since we can't init it with anything,\\n+  // since it's stored at crash time, and we can't annotate the\\n+  // crash report with the stored value, since we really want\\n+  // (now - LastCrash), so we just get a value if it exists,\\n+  // and store it in a time_t value.\\n+  if(NS_SUCCEEDED(GetOrInit(dataDirectory, NS_LITERAL_STRING(\\\"LastCrash\\\"),\\n+                            data, NULL))) {\\n+    lastCrashTime = (time_t)atol(data.get());\\n+    \\n+  }\\n+\\n+  // not really the best place to init this, but I have the path I need here\\n+  nsCOMPtr<nsIFile> lastCrashFile;\\n+  rv = dataDirectory->Clone(getter_AddRefs(lastCrashFile));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  rv = lastCrashFile->Append(NS_LITERAL_STRING(\\\"LastCrash\\\"));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+  memset(lastCrashTimeFilename, 0, sizeof(lastCrashTimeFilename));\\n+\\n+#if defined(XP_WIN32)\\n+  nsAutoString filename;\\n+  rv = lastCrashFile->GetPath(filename);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  if (filename.Length() < XP_PATH_MAX)\\n+    wcsncpy(lastCrashTimeFilename, filename.get(), filename.Length());\\n+#else\\n+  nsCAutoString filename;\\n+  rv = lastCrashFile->GetNativePath(filename);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  if (filename.Length() < XP_PATH_MAX)\\n+    strncpy(lastCrashTimeFilename, filename.get(), filename.Length());\\n+#endif\\n+\\n   return NS_OK;\\n }\\n \\n\""}