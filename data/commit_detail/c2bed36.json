{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basc2bed36\""},"diff":"\"c2bed36 Bug 353594 - Don't expose tabbrowser-alltabs-popup's event handlers as methods. r=gavin\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 027c94b..1e793d5 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -2875,94 +2875,84 @@\\n           }\\n         ]]></body>\\n       </method>\\n+    </implementation>\\n \\n-      <method name=\\\"_onHidingAllTabsPopup\\\">\\n-        <body><![CDATA[\\n-          // clear out the menu popup and remove the listeners\\n-          while (this.hasChildNodes()) {\\n-            var menuItem = this.lastChild;\\n-            menuItem.removeEventListener(\\\"command\\\", this, false);\\n-            menuItem.tab.removeEventListener(\\\"DOMAttrModified\\\", this, false);\\n-            menuItem.tab.mCorrespondingMenuitem = null;\\n-            this.removeChild(menuItem);\\n-          }\\n-        ]]></body>\\n-      </method>\\n-\\n-      <method name=\\\"_onShowingAllTabsPopup\\\">\\n-        <body><![CDATA[\\n-          // set up the menu popup\\n-          var tabcontainer = document.getBindingParent(this);\\n-          var tabs = tabcontainer.childNodes;\\n-\\n-          // if an animation is in progress and the user\\n-          // clicks on the \\\"all tabs\\\" button, stop the animation\\n-          tabcontainer._stopAnimation();\\n-\\n-          for (var i = 0; i < tabs.length; i++) {\\n-            var menuItem = document.createElementNS(\\n-              \\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\", \\n-              \\\"menuitem\\\");\\n-            var curTab = tabs[i];\\n-\\n-            if (curTab.selected)\\n-              menuItem.setAttribute(\\\"selected\\\", \\\"true\\\");\\n-            menuItem.setAttribute(\\\"class\\\", \\\"menuitem-iconic alltabs-item\\\");\\n-\\n-            menuItem.setAttribute(\\\"label\\\", curTab.label);\\n-            menuItem.setAttribute(\\\"crop\\\", curTab.getAttribute(\\\"crop\\\"));\\n-            menuItem.setAttribute(\\\"image\\\", curTab.getAttribute(\\\"image\\\"));\\n-            if (curTab.hasAttribute(\\\"busy\\\"))\\n-              menuItem.setAttribute(\\\"busy\\\", curTab.getAttribute(\\\"busy\\\"));\\n-\\n-            // Keep some attributes of the menuitem in sync with its\\n-            // corresponding tab (e.g. the tab label)\\n-            curTab.mCorrespondingMenuitem = menuItem;\\n-            curTab.addEventListener(\\\"DOMAttrModified\\\", this, false);\\n-\\n-            menuItem.tab = curTab;\\n-            menuItem.addEventListener(\\\"command\\\", this, false);\\n-            this.appendChild(menuItem);\\n-          }\\n-        ]]></body>\\n-      </method>\\n-\\n-      <method name=\\\"_onMenuItemActive\\\">\\n-        <parameter name=\\\"aEvent\\\"/>\\n-        <body><![CDATA[\\n-          if (!this._xulWindow || !this._xulWindow.XULBrowserWindow)\\n-            return;\\n+    <handlers>\\n+      <handler event=\\\"popupshowing\\\">\\n+      <![CDATA[\\n+        // set up the menu popup\\n+        var tabcontainer = document.getBindingParent(this);\\n+        var tabs = tabcontainer.childNodes;\\n+\\n+        // if an animation is in progress and the user\\n+        // clicks on the \\\"all tabs\\\" button, stop the animation\\n+        tabcontainer._stopAnimation();\\n+\\n+        for (var i = 0; i < tabs.length; i++) {\\n+          var menuItem = document.createElementNS(\\n+            \\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\", \\n+            \\\"menuitem\\\");\\n+          var curTab = tabs[i];\\n+\\n+          if (curTab.selected)\\n+            menuItem.setAttribute(\\\"selected\\\", \\\"true\\\");\\n+          menuItem.setAttribute(\\\"class\\\", \\\"menuitem-iconic alltabs-item\\\");\\n+\\n+          menuItem.setAttribute(\\\"label\\\", curTab.label);\\n+          menuItem.setAttribute(\\\"crop\\\", curTab.getAttribute(\\\"crop\\\"));\\n+          menuItem.setAttribute(\\\"image\\\", curTab.getAttribute(\\\"image\\\"));\\n+          if (curTab.hasAttribute(\\\"busy\\\"))\\n+            menuItem.setAttribute(\\\"busy\\\", curTab.getAttribute(\\\"busy\\\"));\\n+\\n+          // Keep some attributes of the menuitem in sync with its\\n+          // corresponding tab (e.g. the tab label)\\n+          curTab.mCorrespondingMenuitem = menuItem;\\n+          curTab.addEventListener(\\\"DOMAttrModified\\\", this, false);\\n+\\n+          menuItem.tab = curTab;\\n+          menuItem.addEventListener(\\\"command\\\", this, false);\\n+          this.appendChild(menuItem);\\n+        }\\n+      ]]></handler>\\n \\n-          var tab = aEvent.target.tab;\\n-          if (tab) {\\n-            var statusText = tab.linkedBrowser.currentURI.spec;\\n-            if (statusText == \\\"about:blank\\\") {\\n-              // XXXhack: Passing a space here (and not \\\"\\\")\\n-              // to make sure the the browser implementation would\\n-              // still consider it a hovered link.\\n-              statusText = \\\" \\\";\\n-            }\\n+      <handler event=\\\"popuphiding\\\">\\n+      <![CDATA[\\n+        // clear out the menu popup and remove the listeners\\n+        while (this.hasChildNodes()) {\\n+          var menuItem = this.lastChild;\\n+          menuItem.removeEventListener(\\\"command\\\", this, false);\\n+          menuItem.tab.removeEventListener(\\\"DOMAttrModified\\\", this, false);\\n+          menuItem.tab.mCorrespondingMenuitem = null;\\n+          this.removeChild(menuItem);\\n+        }\\n+      ]]></handler>\\n \\n-            this._xulWindow.XULBrowserWindow.setOverLink(statusText, null);\\n+      <handler event=\\\"DOMMenuItemActive\\\">\\n+      <![CDATA[\\n+        if (!this._xulWindow || !this._xulWindow.XULBrowserWindow)\\n+          return;\\n+\\n+        var tab = event.target.tab;\\n+        if (tab) {\\n+          var statusText = tab.linkedBrowser.currentURI.spec;\\n+          if (statusText == \\\"about:blank\\\") {\\n+            // XXXhack: Passing a space here (and not \\\"\\\")\\n+            // to make sure the the browser implementation would\\n+            // still consider it a hovered link.\\n+            statusText = \\\" \\\";\\n           }\\n-        ]]></body>\\n-      </method>\\n \\n-      <method name=\\\"_onMenuItemInactive\\\">\\n-        <parameter name=\\\"aEvent\\\"/>\\n-        <body><![CDATA[\\n-          if (!this._xulWindow || !this._xulWindow.XULBrowserWindow)\\n-            return;\\n+          this._xulWindow.XULBrowserWindow.setOverLink(statusText, null);\\n+        }\\n+      ]]></handler>\\n \\n-          this._xulWindow.XULBrowserWindow.setOverLink(\\\"\\\", null);\\n-        ]]></body>\\n-      </method>\\n-    </implementation>\\n-    <handlers>\\n-      <handler event=\\\"popupshowing\\\" action=\\\"this._onShowingAllTabsPopup();\\\"/>\\n-      <handler event=\\\"popuphiding\\\" action=\\\"this._onHidingAllTabsPopup();\\\"/>\\n-      <handler event=\\\"DOMMenuItemActive\\\" action=\\\"this._onMenuItemActive(event);\\\"/>\\n-      <handler event=\\\"DOMMenuItemInactive\\\" action=\\\"this._onMenuItemInactive(event);\\\"/>\\n+      <handler event=\\\"DOMMenuItemInactive\\\">\\n+      <![CDATA[\\n+        if (!this._xulWindow || !this._xulWindow.XULBrowserWindow)\\n+          return;\\n+\\n+        this._xulWindow.XULBrowserWindow.setOverLink(\\\"\\\", null);\\n+      ]]></handler>\\n     </handlers>\\n   </binding>\\n \\n\""}