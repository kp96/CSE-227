{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas3055bc7\""},"diff":"\"3055bc7 Bug 393286: Make nsCSSScanner::Read regularize newlines. r+sr=bzbarsky, a=dbaron\\ndiff --git a/layout/style/nsCSSScanner.cpp b/layout/style/nsCSSScanner.cpp\\nindex 51317ec5..d3bcf76 100644\\n--- a/layout/style/nsCSSScanner.cpp\\n+++ b/layout/style/nsCSSScanner.cpp\\n@@ -288,7 +288,6 @@ void nsCSSScanner::Init(nsIUnicharInputStream* aInput,\\n   // Reset variables that we use to keep track of our progress through the input\\n   mOffset = 0;\\n   mPushbackCount = 0;\\n-  mLastRead = 0;\\n \\n #ifdef CSS_REPORT_PARSE_ERRORS\\n   mColNumber = 0;\\n@@ -466,6 +465,24 @@ void nsCSSScanner::Close()\\n #define TAB_STOP_WIDTH 8\\n #endif\\n \\n+PRBool nsCSSScanner::EnsureData(nsresult& aErrorCode)\\n+{\\n+  if (mOffset < mCount)\\n+    return PR_TRUE;\\n+\\n+  if (mInputStream) {\\n+    mOffset = 0;\\n+    aErrorCode = mInputStream->Read(mBuffer, CSS_BUFFER_SIZE, &mCount);\\n+    if (NS_FAILED(aErrorCode) || mCount == 0) {\\n+      mCount = 0;\\n+      return PR_FALSE;\\n+    }\\n+    return PR_TRUE;\\n+  }\\n+\\n+  return PR_FALSE;\\n+}\\n+\\n // Returns -1 on error or eof\\n PRInt32 nsCSSScanner::Read(nsresult& aErrorCode)\\n {\\n@@ -473,20 +490,21 @@ PRInt32 nsCSSScanner::Read(nsresult& aErrorCode)\\n   if (0 < mPushbackCount) {\\n     rv = PRInt32(mPushback[--mPushbackCount]);\\n   } else {\\n-    if (mOffset == mCount) {\\n-      mOffset = 0;\\n-      if (!mInputStream) {\\n-        mCount = 0;\\n-        return -1;\\n-      }\\n-      aErrorCode = mInputStream->Read(mBuffer, CSS_BUFFER_SIZE, &mCount);\\n-      if (NS_FAILED(aErrorCode) || mCount == 0) {\\n-        mCount = 0;\\n-        return -1;\\n-      }\\n+    if (mOffset == mCount && !EnsureData(aErrorCode)) {\\n+      return -1;\\n     }\\n     rv = PRInt32(mReadPointer[mOffset++]);\\n-    if (((rv == '\\\\n') && (mLastRead != '\\\\r')) || (rv == '\\\\r')) {\\n+    // There are four types of newlines in CSS: \\\"\\\\r\\\", \\\"\\\\n\\\", \\\"\\\\r\\\\n\\\", and \\\"\\\\f\\\".\\n+    // To simplify dealing with newlines, they are all normalized to \\\"\\\\n\\\" here\\n+    if (rv == '\\\\r') {\\n+      if (EnsureData(aErrorCode) && mReadPointer[mOffset] == '\\\\n') {\\n+        mOffset++;\\n+      }\\n+      rv = '\\\\n';\\n+    } else if (rv == '\\\\f') {\\n+      rv = '\\\\n';\\n+    }\\n+    if (rv == '\\\\n') {\\n       // 0 is a magical line number meaning that we don't know (i.e., script)\\n       if (mLineNumber != 0)\\n         ++mLineNumber;\\n@@ -503,7 +521,6 @@ PRInt32 nsCSSScanner::Read(nsresult& aErrorCode)\\n     }\\n #endif\\n   }\\n-  mLastRead = rv;\\n //printf(\\\"Read => %x\\\\n\\\", rv);\\n   return rv;\\n }\\n@@ -511,9 +528,7 @@ PRInt32 nsCSSScanner::Read(nsresult& aErrorCode)\\n PRInt32 nsCSSScanner::Peek(nsresult& aErrorCode)\\n {\\n   if (0 == mPushbackCount) {\\n-    PRInt32 savedLastRead = mLastRead;\\n     PRInt32 ch = Read(aErrorCode);\\n-    mLastRead = savedLastRead;\\n     if (ch < 0) {\\n       return -1;\\n     }\\n@@ -562,7 +577,7 @@ PRBool nsCSSScanner::EatWhiteSpace(nsresult& aErrorCode)\\n     if (ch < 0) {\\n       break;\\n     }\\n-    if ((ch == ' ') || (ch == '\\\\n') || (ch == '\\\\r') || (ch == '\\\\t')) {\\n+    if ((ch == ' ') || (ch == '\\\\n') || (ch == '\\\\t')) {\\n       eaten = PR_TRUE;\\n       continue;\\n     }\\n@@ -579,13 +594,7 @@ PRBool nsCSSScanner::EatNewline(nsresult& aErrorCode)\\n     return PR_FALSE;\\n   }\\n   PRBool eaten = PR_FALSE;\\n-  if (ch == '\\\\r') {\\n-    eaten = PR_TRUE;\\n-    ch = Peek(aErrorCode);\\n-    if (ch == '\\\\n') {\\n-      (void) Read(aErrorCode);\\n-    }\\n-  } else if (ch == '\\\\n') {\\n+  if (ch == '\\\\n') {\\n     eaten = PR_TRUE;\\n   } else {\\n     Pushback(ch);\\n@@ -862,10 +871,6 @@ nsCSSScanner::ParseAndAppendEscape(nsresult& aErrorCode, nsString& aOutput)\\n       } else {\\n         NS_ASSERTION((lexTable[ch] & IS_WHITESPACE) != 0, \\\"bad control flow\\\");\\n         // single space ends escape\\n-        if (ch == '\\\\r' && Peek(aErrorCode) == '\\\\n') {\\n-          // if CR/LF, eat LF too\\n-          Read(aErrorCode);\\n-        }\\n         break;\\n       }\\n     }\\n@@ -874,13 +879,6 @@ nsCSSScanner::ParseAndAppendEscape(nsresult& aErrorCode, nsString& aOutput)\\n       if ((0 <= ch) && (ch <= 255) && \\n           ((lexTable[ch] & IS_WHITESPACE) != 0)) {\\n         ch = Read(aErrorCode);\\n-        // special case: if trailing whitespace is CR/LF, eat both chars (not part of spec, but should be)\\n-        if (ch == '\\\\r') {\\n-          ch = Peek(aErrorCode);\\n-          if (ch == '\\\\n') {\\n-            ch = Read(aErrorCode);\\n-          }\\n-        }\\n       }\\n     }\\n     NS_ASSERTION(rv >= 0, \\\"How did rv become negative?\\\");\\ndiff --git a/layout/style/nsCSSScanner.h b/layout/style/nsCSSScanner.h\\nindex c053e27..1c2643d 100644\\n--- a/layout/style/nsCSSScanner.h\\n+++ b/layout/style/nsCSSScanner.h\\n@@ -198,6 +198,7 @@ class nsCSSScanner {\\n   }\\n   \\n protected:\\n+  PRBool EnsureData(nsresult& aErrorCode);\\n   PRInt32 Read(nsresult& aErrorCode);\\n   PRInt32 Peek(nsresult& aErrorCode);\\n   void Pushback(PRUnichar aChar);\\n@@ -230,7 +231,6 @@ protected:\\n   PRUnichar* mPushback;\\n   PRInt32 mPushbackCount;\\n   PRInt32 mPushbackSize;\\n-  PRInt32 mLastRead;\\n   PRUnichar mLocalPushback[4];\\n \\n   PRUint32 mLineNumber;\\n\""}