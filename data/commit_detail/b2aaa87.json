{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basb2aaa87\""},"diff":"\"b2aaa87 Bug 387023: minor string cleanup in nsAtomTable.cpp. r=bsmedberg, a=bzbarsky.\\ndiff --git a/xpcom/ds/nsAtomTable.cpp b/xpcom/ds/nsAtomTable.cpp\\nindex 6bfc3d8..cdea14b 100644\\n--- a/xpcom/ds/nsAtomTable.cpp\\n+++ b/xpcom/ds/nsAtomTable.cpp\\n@@ -288,9 +288,9 @@ AtomTableMatchKey(PLDHashTable *table, const PLDHashEntryHdr *entry,\\n \\n   if (strKey->IsUTF16String()) {\\n     return\\n-      CompareUTF8toUTF16(nsDependentCString(atomString, he->getLength()),\\n-                         nsDependentString(strKey->getUTF16String(),\\n-                                           strKey->getLength())) == 0;\\n+      CompareUTF8toUTF16(nsDependentCSubstring(atomString, atomString + he->getLength()),\\n+                         nsDependentSubstring(strKey->getUTF16String(),\\n+                                              strKey->getUTF16String() + strKey->getLength())) == 0;\\n   }\\n \\n   PRUint32 length = he->getLength();\\n@@ -544,7 +544,7 @@ NS_IMETHODIMP\\n AtomImpl::Equals(const nsAString& aString, PRBool* aResult)\\n {\\n   *aResult = CompareUTF8toUTF16(nsDependentCString(mString, mLength),\\n-                                PromiseFlatString(aString)) == 0;\\n+                                aString) == 0;\\n   return NS_OK;\\n }\\n \\n@@ -605,7 +605,7 @@ nsStaticAtomWrapper::Equals(const nsAString& aString, PRBool* aResult)\\n {\\n   *aResult = CompareUTF8toUTF16(nsDependentCString(mStaticAtom->mString,\\n                                                    mLength),\\n-                                PromiseFlatString(aString)) == 0;\\n+                                aString) == 0;\\n   return NS_OK;\\n }\\n //----------------------------------------------------------------------\\n@@ -715,7 +715,7 @@ NS_NewAtom(const char* aUTF8String)\\n NS_COM nsIAtom*\\n NS_NewAtom(const nsACString& aUTF8String)\\n {\\n-  AtomTableEntry *he = GetAtomHashEntry(PromiseFlatCString(aUTF8String).get(),\\n+  AtomTableEntry *he = GetAtomHashEntry(aUTF8String.Data(),\\n                                         aUTF8String.Length());\\n \\n   if (!he) {\\n@@ -728,10 +728,7 @@ NS_NewAtom(const nsACString& aUTF8String)\\n   if (he->HasValue())\\n     return he->GetAtom();\\n \\n-  // MSVC.NET doesn't like passing a temporary nsDependentCString() to\\n-  // operator new, so declare one as a local instead.\\n-  nsDependentCString str(aUTF8String);\\n-  AtomImpl* atom = new (str) AtomImpl();\\n+  AtomImpl* atom = new (aUTF8String) AtomImpl();\\n   he->SetAtomImpl(atom);\\n   if (!atom) {\\n     PL_DHashTableRawRemove(&gAtomTable, he);\\n@@ -751,7 +748,7 @@ NS_NewAtom(const PRUnichar* aUTF16String)\\n NS_COM nsIAtom*\\n NS_NewAtom(const nsAString& aUTF16String)\\n {\\n-  AtomTableEntry *he = GetAtomHashEntry(PromiseFlatString(aUTF16String).get(),\\n+  AtomTableEntry *he = GetAtomHashEntry(aUTF16String.Data(),\\n                                         aUTF16String.Length());\\n \\n   if (he->HasValue())\\n@@ -780,7 +777,7 @@ NS_NewPermanentAtom(const char* aUTF8String)\\n NS_COM nsIAtom*\\n NS_NewPermanentAtom(const nsACString& aUTF8String)\\n {\\n-  AtomTableEntry *he = GetAtomHashEntry(PromiseFlatCString(aUTF8String).get(),\\n+  AtomTableEntry *he = GetAtomHashEntry(aUTF8String.Data(),\\n                                         aUTF8String.Length());\\n \\n   if (he->HasValue() && he->IsStaticAtom())\\n\""}