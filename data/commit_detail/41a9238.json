{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas41a9238\""},"diff":"\"41a9238 Bug 343585 - tab scrolling: scenario where open link in background doesn't enable the scroll buttons. r=sspitzer/mconnor.\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 5ea29c6..7adb943 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -1197,7 +1197,18 @@\\n               b.loadURIWithFlags(aURI, flags, aReferrerURI, aCharset, aPostData);\\n             }\\n \\n-            this.mTabContainer.adjustTabstrip(false);\\n+            // |setTimeout| here to ensure we're post reflow\\n+            var _delayedUpdate = function(aTabContainer) {\\n+              aTabContainer.adjustTabstrip(false);\\n+\\n+              // XXXmano: this is a temporary workaround to bug 343585\\n+              // We need to manually update the scroll buttons disabled state\\n+              // if a tab was inserted to the overflow area or removed from it\\n+              // without any scrolling and when the tabbar has already\\n+              // overflowed.\\n+              aTabContainer.mTabstrip._updateScrollButtonsDisabledState();\\n+            }\\n+            setTimeout(_delayedUpdate, 0, this.mTabContainer);\\n \\n             // Dispatch a new tab notification.  We do this once we're\\n             // entirely done, so that things are in a consistent state\\n@@ -1318,6 +1329,13 @@\\n             if (ds.contentViewer && !ds.contentViewer.permitUnload())\\n               return;\\n \\n+            // see notes in addTab\\n+            var _delayedUpdate = function(aTabContainer) {\\n+              aTabContainer.adjustTabstrip(true);\\n+              aTabContainer.mTabstrip._updateScrollButtonsDisabledState();\\n+            }\\n+            setTimeout(_delayedUpdate, 0, this.mTabContainer);\\n+\\n             // We're committed to closing the tab now.  \\n             // Dispatch a notification.\\n             // We dispatch it before any teardown so that event listeners can\\n@@ -2536,10 +2554,7 @@\\n           // 3 - closeatend = close button at the end of the tabstrip\\n           switch (this.mCloseButtons) {\\n           case 0:\\n-            // TabClose fires before the tab closes, so if we have two tabs\\n-            // and we're removing the tab we should go to no closebutton\\n-            if ((aRemovingTab && this.childNodes.length == 2) ||\\n-                this.childNodes.length == 1)\\n+            if (this.childNodes.length == 1)\\n               this.setAttribute(\\\"closebuttons\\\", \\\"noclose\\\");\\n             else\\n               this.setAttribute(\\\"closebuttons\\\", \\\"activetab\\\");\\n@@ -2547,8 +2562,7 @@\\n           case 1:\\n             try {\\n               // if we have only one tab, hide the closebutton\\n-              if ((aRemovingTab && this.childNodes.length == 2) ||\\n-                  this.childNodes.length == 1)\\n+              if (this.childNodes.length == 1)\\n                 this.setAttribute(\\\"closebuttons\\\", \\\"noclose\\\");\\n               else {\\n                 var width = this.firstChild.boxObject.width;\\n@@ -2668,7 +2682,6 @@\\n       </method>\\n     </implementation>\\n     <handlers>\\n-      <handler event=\\\"TabClose\\\"  action=\\\"this.adjustTabstrip(true);\\\"/>\\n       <handler event=\\\"TabSelect\\\" action=\\\"this._handleTabSelect();\\\"/>\\n     </handlers>\\n   </binding>\\n\""}