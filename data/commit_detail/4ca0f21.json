{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas4ca0f21\""},"diff":"\"4ca0f21 make certain native controls look inactive when they are inactive windows. b=54488 r=cbarrett sr=roc\\ndiff --git a/widget/src/cocoa/nsChildView.mm b/widget/src/cocoa/nsChildView.mm\\nindex 6a866cf..e96b3e9 100644\\n--- a/widget/src/cocoa/nsChildView.mm\\n+++ b/widget/src/cocoa/nsChildView.mm\\n@@ -4094,6 +4094,9 @@ static PRBool IsSpecialGeckoKey(UInt32 macKeyCode)\\n \\n   if (isMozWindow)\\n     [[self window] setSuppressMakeKeyFront:NO];\\n+\\n+  // invalidate so that things with a different appearance in background windows will redraw\\n+  mGeckoChild->Invalidate(PR_FALSE);\\n }\\n \\n \\n@@ -4106,6 +4109,9 @@ static PRBool IsSpecialGeckoKey(UInt32 macKeyCode)\\n \\n   [self sendFocusEvent:NS_DEACTIVATE];\\n   [self sendFocusEvent:NS_LOSTFOCUS];\\n+\\n+  // invalidate so that things with a different appearance in background windows will redraw\\n+  mGeckoChild->Invalidate(PR_FALSE);\\n }\\n \\n \\ndiff --git a/widget/src/cocoa/nsNativeThemeCocoa.h b/widget/src/cocoa/nsNativeThemeCocoa.h\\nindex 2985e8b..2746aba 100644\\n--- a/widget/src/cocoa/nsNativeThemeCocoa.h\\n+++ b/widget/src/cocoa/nsNativeThemeCocoa.h\\n@@ -92,33 +92,34 @@ protected:\\n   nsresult GetSystemFont(PRUint8 aWidgetType, nsSystemFontID& aFont);\\n \\n   // HITheme drawing routines\\n-  void DrawFrame (CGContextRef context, HIThemeFrameKind inKind,\\n-                  const HIRect& inBoxRect, PRBool inIsDisabled,\\n-                  PRInt32 inState);\\n+  void DrawFrame(CGContextRef context, HIThemeFrameKind inKind,\\n+                 const HIRect& inBoxRect, PRBool inIsDisabled,\\n+                 PRInt32 inState);\\n   void DrawProgress(CGContextRef context, const HIRect& inBoxRect,\\n                     PRBool inIsIndeterminate, PRBool inIsHorizontal,\\n-                    PRInt32 inValue);\\n-  void DrawTab (CGContextRef context, const HIRect& inBoxRect,\\n-                PRBool inIsDisabled, PRBool inIsFrontmost, \\n-                PRBool inIsHorizontal, PRBool inTabBottom,\\n-                PRInt32 inState);\\n-  void DrawTabPanel (CGContextRef context, const HIRect& inBoxRect);\\n-  void DrawScale (CGContextRef context, const HIRect& inBoxRect,\\n-                  PRBool inIsDisabled, PRInt32 inState,\\n-                  PRBool inDirection, PRBool inIsReverse,\\n-                  PRInt32 inCurrentValue,\\n-                  PRInt32 inMinValue, PRInt32 inMaxValue);\\n-  void DrawButton (CGContextRef context, ThemeButtonKind inKind,\\n-                   const HIRect& inBoxRect, PRBool inIsDefault, \\n-                   PRBool inDisabled, ThemeButtonValue inValue,\\n-                   ThemeButtonAdornment inAdornment, PRInt32 inState);\\n-  void DrawSpinButtons (CGContextRef context, ThemeButtonKind inKind,\\n-                        const HIRect& inBoxRect,\\n-                        PRBool inDisabled, ThemeDrawState inDrawState,\\n-                        ThemeButtonAdornment inAdornment, PRInt32 inState);\\n-  void DrawCheckboxRadio (CGContextRef context, ThemeButtonKind inKind,\\n-                          const HIRect& inBoxRect, PRBool inChecked, \\n-                          PRBool inDisabled, PRInt32 inState);\\n+                    PRInt32 inValue, nsIFrame* aFrame);\\n+  void DrawTab(CGContextRef context, const HIRect& inBoxRect,\\n+               PRBool inIsDisabled, PRBool inIsFrontmost,\\n+               PRBool inIsHorizontal, PRBool inTabBottom,\\n+               PRInt32 inState, nsIFrame* aFrame);\\n+  void DrawTabPanel(CGContextRef context, const HIRect& inBoxRect, nsIFrame* aFrame);\\n+  void DrawScale(CGContextRef context, const HIRect& inBoxRect,\\n+                 PRBool inIsDisabled, PRInt32 inState,\\n+                 PRBool inDirection, PRBool inIsReverse,\\n+                 PRInt32 inCurrentValue, PRInt32 inMinValue,\\n+                 PRInt32 inMaxValue, nsIFrame* aFrame);\\n+  void DrawButton(CGContextRef context, ThemeButtonKind inKind,\\n+                  const HIRect& inBoxRect, PRBool inIsDefault, \\n+                  PRBool inDisabled, ThemeButtonValue inValue,\\n+                  ThemeButtonAdornment inAdornment, PRInt32 inState,\\n+                  nsIFrame* aFrame);\\n+  void DrawSpinButtons(CGContextRef context, ThemeButtonKind inKind,\\n+                       const HIRect& inBoxRect, PRBool inDisabled,\\n+                       ThemeDrawState inDrawState, ThemeButtonAdornment inAdornment,\\n+                       PRInt32 inState, nsIFrame* aFrame);\\n+  void DrawCheckboxRadio(CGContextRef context, ThemeButtonKind inKind,\\n+                         const HIRect& inBoxRect, PRBool inChecked, \\n+                         PRBool inDisabled, PRInt32 inState, nsIFrame* aFrame);\\n   // Scrollbars\\n   void DrawScrollbar(CGContextRef aCGContext, const HIRect& aBoxRect, nsIFrame *aFrame);\\n   void GetScrollbarPressStates (nsIFrame *aFrame, PRInt32 aButtonStates[]);\\ndiff --git a/widget/src/cocoa/nsNativeThemeCocoa.mm b/widget/src/cocoa/nsNativeThemeCocoa.mm\\nindex ce601d0..6636496 100644\\n--- a/widget/src/cocoa/nsNativeThemeCocoa.mm\\n+++ b/widget/src/cocoa/nsNativeThemeCocoa.mm\\n@@ -54,6 +54,7 @@\\n #include \\\"nsPresContext.h\\\"\\n #include \\\"nsILookAndFeel.h\\\"\\n #include \\\"nsWidgetAtoms.h\\\"\\n+#include \\\"nsIWidget.h\\\"\\n \\n #include \\\"gfxContext.h\\\"\\n #include \\\"gfxQuartzSurface.h\\\"\\n@@ -103,10 +104,37 @@ nsNativeThemeCocoa::~nsNativeThemeCocoa()\\n }\\n \\n \\n+static BOOL frameIsInActiveWindow(nsIFrame* aFrame)\\n+{\\n+  // default return value should be YES here, so things are painted as active by default\\n+  if (!aFrame) return YES;  \\n+\\n+  nsIWidget* widget = aFrame->GetWindow();\\n+  if (!widget) return YES;\\n+\\n+  // get the top-level widget\\n+  nsIWidget* topLevelWidget = widget;\\n+  while (PR_TRUE) {\\n+    widget = topLevelWidget->GetParent();\\n+    if (widget)\\n+      topLevelWidget = widget;\\n+    else\\n+      break;\\n+  }\\n+\\n+  NSWindow* nativeWindow = (NSWindow*)topLevelWidget->GetNativeData(NS_NATIVE_WINDOW);\\n+  if (!nativeWindow) return YES;\\n+\\n+  nsWindowType windowType;\\n+  topLevelWidget->GetWindowType(windowType);\\n+  return [nativeWindow isKeyWindow] || (windowType == eWindowType_popup);\\n+}\\n+\\n+\\n void\\n nsNativeThemeCocoa::DrawCheckboxRadio(CGContextRef cgContext, ThemeButtonKind inKind,\\n                                       const HIRect& inBoxRect, PRBool inChecked,\\n-                                      PRBool inDisabled, PRInt32 inState)\\n+                                      PRBool inDisabled, PRInt32 inState, nsIFrame* aFrame)\\n {\\n   HIThemeButtonDrawInfo bdi;\\n   bdi.version = 0;\\n@@ -117,7 +145,7 @@ nsNativeThemeCocoa::DrawCheckboxRadio(CGContextRef cgContext, ThemeButtonKind in\\n   else if ((inState & NS_EVENT_STATE_ACTIVE) && (inState & NS_EVENT_STATE_HOVER))\\n     bdi.state = kThemeStatePressed;\\n   else\\n-    bdi.state = kThemeStateActive;\\n+    bdi.state = frameIsInActiveWindow(aFrame) ? kThemeStateActive : kThemeStateInactive;\\n \\n   bdi.value = inChecked ? kThemeButtonOn : kThemeButtonOff;\\n   bdi.adornment = (inState & NS_EVENT_STATE_FOCUS) ? kThemeAdornmentFocus : kThemeAdornmentNone;\\n@@ -139,7 +167,7 @@ void\\n nsNativeThemeCocoa::DrawButton(CGContextRef cgContext, ThemeButtonKind inKind,\\n                                const HIRect& inBoxRect, PRBool inIsDefault, PRBool inDisabled,\\n                                ThemeButtonValue inValue, ThemeButtonAdornment inAdornment,\\n-                               PRInt32 inState)\\n+                               PRInt32 inState, nsIFrame* aFrame)\\n {\\n   HIThemeButtonDrawInfo bdi;\\n   bdi.version = 0;\\n@@ -147,12 +175,18 @@ nsNativeThemeCocoa::DrawButton(CGContextRef cgContext, ThemeButtonKind inKind,\\n   bdi.value = inValue;\\n   bdi.adornment = inAdornment;\\n \\n-  if (inDisabled)\\n+  if (inDisabled) {\\n     bdi.state = kThemeStateUnavailable;\\n-  else if ((inState & NS_EVENT_STATE_ACTIVE) && (inState & NS_EVENT_STATE_HOVER))\\n+  }\\n+  else if ((inState & NS_EVENT_STATE_ACTIVE) && (inState & NS_EVENT_STATE_HOVER)) {\\n     bdi.state = kThemeStatePressed;\\n-  else\\n-    bdi.state = (inKind == kThemeArrowButton) ? kThemeStateUnavailable : kThemeStateActive;\\n+  }\\n+  else {\\n+    if (inKind == kThemeArrowButton)\\n+      bdi.state = kThemeStateUnavailable; // these are always drawn as unavailable\\n+    else\\n+      bdi.state = frameIsInActiveWindow(aFrame) ? kThemeStateActive : kThemeStateInactive;\\n+  }\\n \\n   if (inState & NS_EVENT_STATE_FOCUS)\\n     bdi.adornment |= kThemeAdornmentFocus;\\n@@ -216,9 +250,8 @@ nsNativeThemeCocoa::DrawButton(CGContextRef cgContext, ThemeButtonKind inKind,\\n void\\n nsNativeThemeCocoa::DrawSpinButtons(CGContextRef cgContext, ThemeButtonKind inKind,\\n                                     const HIRect& inBoxRect, PRBool inDisabled,\\n-                                    ThemeDrawState inDrawState,\\n-                                    ThemeButtonAdornment inAdornment,\\n-                                    PRInt32 inState)\\n+                                    ThemeDrawState inDrawState, ThemeButtonAdornment inAdornment,\\n+                                    PRInt32 inState, nsIFrame* aFrame)\\n {\\n   HIThemeButtonDrawInfo bdi;\\n   bdi.version = 0;\\n@@ -229,6 +262,8 @@ nsNativeThemeCocoa::DrawSpinButtons(CGContextRef cgContext, ThemeButtonKind inKi\\n \\n   if (inDisabled)\\n     bdi.state = kThemeStateUnavailable;\\n+  else\\n+    bdi.state = frameIsInActiveWindow(aFrame) ? kThemeStateActive : kThemeStateInactive;\\n \\n   HIThemeDrawButton(&inBoxRect, &bdi, cgContext, HITHEME_ORIENTATION, NULL);\\n }\\n@@ -236,12 +271,17 @@ nsNativeThemeCocoa::DrawSpinButtons(CGContextRef cgContext, ThemeButtonKind inKi\\n \\n void\\n nsNativeThemeCocoa::DrawFrame(CGContextRef cgContext, HIThemeFrameKind inKind,\\n-                              const HIRect& inBoxRect, PRBool inIsDisabled, PRInt32 inState)\\n+                              const HIRect& inBoxRect, PRBool inIsDisabled,\\n+                              PRInt32 inState)\\n {\\n   HIThemeFrameDrawInfo fdi;\\n   fdi.version = 0;\\n   fdi.kind = inKind;\\n+\\n+  // We don't ever set an inactive state for this because it doesn't\\n+  // look right(see other apps).\\n   fdi.state = inIsDisabled ? kThemeStateUnavailable : kThemeStateActive;\\n+\\n   // We do not draw focus rings for frame widgets because their complex layout has nasty\\n   // drawing bugs and it looks terrible.\\n   // fdi.isFocused = (inState & NS_EVENT_STATE_FOCUS) != 0;\\n@@ -270,9 +310,9 @@ nsNativeThemeCocoa::DrawFrame(CGContextRef cgContext, HIThemeFrameKind inKind,\\n \\n \\n void\\n-nsNativeThemeCocoa::DrawProgress(CGContextRef cgContext,\\n-                                 const HIRect& inBoxRect, PRBool inIsIndeterminate, \\n-                                 PRBool inIsHorizontal, PRInt32 inValue)\\n+nsNativeThemeCocoa::DrawProgress(CGContextRef cgContext, const HIRect& inBoxRect,\\n+                                 PRBool inIsIndeterminate, PRBool inIsHorizontal,\\n+                                 PRInt32 inValue, nsIFrame* aFrame)\\n {\\n   HIThemeTrackDrawInfo tdi;\\n   static SInt32 sPhase = 0;\\n@@ -284,7 +324,7 @@ nsNativeThemeCocoa::DrawProgress(CGContextRef cgContext,\\n   tdi.max = 100;\\n   tdi.value = inValue;\\n   tdi.attributes = inIsHorizontal ? kThemeTrackHorizontal : 0;\\n-  tdi.enableState = kThemeTrackActive;\\n+  tdi.enableState = frameIsInActiveWindow(aFrame) ? kThemeTrackActive : kThemeTrackInactive;\\n   tdi.trackInfo.progress.phase = sPhase++; // animate for the next time we're called\\n \\n   HIThemeDrawTrack(&tdi, NULL, cgContext, HITHEME_ORIENTATION);\\n@@ -292,12 +332,12 @@ nsNativeThemeCocoa::DrawProgress(CGContextRef cgContext,\\n \\n \\n void\\n-nsNativeThemeCocoa::DrawTabPanel(CGContextRef cgContext, const HIRect& inBoxRect)\\n+nsNativeThemeCocoa::DrawTabPanel(CGContextRef cgContext, const HIRect& inBoxRect, nsIFrame* aFrame)\\n {\\n   HIThemeTabPaneDrawInfo tpdi;\\n \\n   tpdi.version = 0;\\n-  tpdi.state = kThemeStateActive;\\n+  tpdi.state = frameIsInActiveWindow(aFrame) ? kThemeStateActive : kThemeStateInactive;\\n   tpdi.direction = kThemeTabNorth;\\n   tpdi.size = kHIThemeTabSizeNormal;\\n \\n@@ -309,8 +349,8 @@ void\\n nsNativeThemeCocoa::DrawScale(CGContextRef cgContext, const HIRect& inBoxRect,\\n                               PRBool inIsDisabled, PRInt32 inState,\\n                               PRBool inIsVertical, PRBool inIsReverse,\\n-                              PRInt32 inCurrentValue,\\n-                              PRInt32 inMinValue, PRInt32 inMaxValue)\\n+                              PRInt32 inCurrentValue, PRInt32 inMinValue,\\n+                              PRInt32 inMaxValue, nsIFrame* aFrame)\\n {\\n   HIThemeTrackDrawInfo tdi;\\n \\n@@ -327,7 +367,10 @@ nsNativeThemeCocoa::DrawScale(CGContextRef cgContext, const HIRect& inBoxRect,\\n     tdi.attributes |= kThemeTrackRightToLeft;\\n   if (inState & NS_EVENT_STATE_FOCUS)\\n     tdi.attributes |= kThemeTrackHasFocus;\\n-  tdi.enableState = inIsDisabled ? kThemeTrackDisabled : kThemeTrackActive;\\n+  if (inIsDisabled)\\n+    tdi.enableState = kThemeTrackDisabled;\\n+  else\\n+    tdi.enableState = frameIsInActiveWindow(aFrame) ? kThemeTrackActive : kThemeTrackInactive;\\n   tdi.trackInfo.slider.thumbDir = kThemeThumbPlain;\\n   tdi.trackInfo.slider.pressState = 0;\\n \\n@@ -339,7 +382,7 @@ void\\n nsNativeThemeCocoa::DrawTab(CGContextRef cgContext, const HIRect& inBoxRect,\\n                             PRBool inIsDisabled, PRBool inIsFrontmost,\\n                             PRBool inIsHorizontal, PRBool inTabBottom,\\n-                            PRInt32 inState)\\n+                            PRInt32 inState, nsIFrame* aFrame)\\n {\\n   HIThemeTabDrawInfo tdi;\\n \\n@@ -349,14 +392,14 @@ nsNativeThemeCocoa::DrawTab(CGContextRef cgContext, const HIRect& inBoxRect,\\n     if (inIsDisabled) \\n       tdi.style = kThemeTabFrontUnavailable;\\n     else\\n-      tdi.style = kThemeTabFront;\\n+      tdi.style = frameIsInActiveWindow(aFrame) ? kThemeTabFront : kThemeTabFrontInactive;\\n   } else {\\n     if (inIsDisabled)\\n       tdi.style = kThemeTabNonFrontUnavailable;\\n     else if ((inState & NS_EVENT_STATE_ACTIVE) && (inState & NS_EVENT_STATE_HOVER))\\n       tdi.style = kThemeTabNonFrontPressed;\\n     else\\n-      tdi.style = kThemeTabNonFront;  \\n+      tdi.style = frameIsInActiveWindow(aFrame) ? kThemeTabNonFront : kThemeTabNonFrontInactive;  \\n   }\\n \\n   // don't yet support vertical tabs\\n@@ -439,6 +482,13 @@ nsNativeThemeCocoa::GetScrollbarDrawInfo(HIThemeTrackDrawInfo& aTdi, nsIFrame *a\\n   PRInt32 longSideLength = (PRInt32)(isHorizontal ? (aRect.size.width) : (aRect.size.height));\\n   aTdi.trackInfo.scrollbar.viewsize = (SInt32)longSideLength;\\n \\n+  // This should be done early on so things like \\\"kThemeTrackNothingToScroll\\\" can\\n+  // override the active enable state.\\n+  if (frameIsInActiveWindow(aFrame))\\n+    aTdi.enableState = kThemeTrackActive;\\n+  else\\n+    aTdi.enableState = kThemeTrackInactive;\\n+\\n   // Only display the thumb if we have room for it to display. Note that this doesn't \\n   // affect the actual tracking rects Gecko maintains -- this is a purely cosmetic\\n   // change. See bmo bug 380185 for more info.\\n@@ -649,32 +699,32 @@ nsNativeThemeCocoa::DrawWidgetBackground(nsIRenderingContext* aContext, nsIFrame\\n       break;\\n \\n     case NS_THEME_CHECKBOX:\\n-      DrawCheckboxRadio(cgContext, kThemeCheckBox, macRect, IsChecked(aFrame), IsDisabled(aFrame), eventState);\\n+      DrawCheckboxRadio(cgContext, kThemeCheckBox, macRect, IsChecked(aFrame), IsDisabled(aFrame), eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_CHECKBOX_SMALL:\\n-      DrawCheckboxRadio(cgContext, kThemeSmallCheckBox, macRect, IsChecked(aFrame), IsDisabled(aFrame), eventState);\\n+      DrawCheckboxRadio(cgContext, kThemeSmallCheckBox, macRect, IsChecked(aFrame), IsDisabled(aFrame), eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_RADIO:\\n-      DrawCheckboxRadio(cgContext, kThemeRadioButton, macRect, IsSelected(aFrame), IsDisabled(aFrame), eventState);\\n+      DrawCheckboxRadio(cgContext, kThemeRadioButton, macRect, IsSelected(aFrame), IsDisabled(aFrame), eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_RADIO_SMALL:\\n       DrawCheckboxRadio(cgContext, kThemeSmallRadioButton, macRect,\\n-                        IsSelected(aFrame), IsDisabled(aFrame), eventState);\\n+                        IsSelected(aFrame), IsDisabled(aFrame), eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_BUTTON:\\n       DrawButton(cgContext, kThemePushButton, macRect,\\n                  IsDefaultButton(aFrame), IsDisabled(aFrame),\\n-                 kThemeButtonOn, kThemeAdornmentNone, eventState);\\n+                 kThemeButtonOn, kThemeAdornmentNone, eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_BUTTON_BEVEL:\\n       DrawButton(cgContext, kThemeMediumBevelButton, macRect,\\n                  IsDefaultButton(aFrame), IsDisabled(aFrame), \\n-                 kThemeButtonOff, kThemeAdornmentNone, eventState);\\n+                 kThemeButtonOff, kThemeAdornmentNone, eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_SPINNER: {\\n@@ -690,14 +740,14 @@ nsNativeThemeCocoa::DrawWidgetBackground(nsIRenderingContext* aContext, nsIFrame\\n       }\\n \\n       DrawSpinButtons(cgContext, kThemeIncDecButton, macRect, IsDisabled(aFrame),\\n-                      state, kThemeAdornmentNone, eventState);\\n+                      state, kThemeAdornmentNone, eventState, aFrame);\\n     }\\n       break;\\n \\n     case NS_THEME_TOOLBAR_BUTTON:\\n       DrawButton(cgContext, kThemePushButton, macRect,\\n                  IsDefaultButton(aFrame), IsDisabled(aFrame),\\n-                 kThemeButtonOn, kThemeAdornmentNone, eventState);\\n+                 kThemeButtonOn, kThemeAdornmentNone, eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_TOOLBAR_SEPARATOR: {\\n@@ -717,13 +767,13 @@ nsNativeThemeCocoa::DrawWidgetBackground(nsIRenderingContext* aContext, nsIFrame\\n     case NS_THEME_DROPDOWN:\\n       DrawButton(cgContext, kThemePopupButton, macRect,\\n                  IsDefaultButton(aFrame), IsDisabled(aFrame), \\n-                 kThemeButtonOn, kThemeAdornmentNone, eventState);\\n+                 kThemeButtonOn, kThemeAdornmentNone, eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_DROPDOWN_BUTTON:\\n-      DrawButton (cgContext, kThemeArrowButton, macRect, PR_FALSE,\\n-                  IsDisabled(aFrame), kThemeButtonOn,\\n-                  kThemeAdornmentArrowDownArrow, eventState);\\n+      DrawButton(cgContext, kThemeArrowButton, macRect, PR_FALSE,\\n+                 IsDisabled(aFrame), kThemeButtonOn,\\n+                 kThemeAdornmentArrowDownArrow, eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_TEXTFIELD:\\n@@ -736,12 +786,12 @@ nsNativeThemeCocoa::DrawWidgetBackground(nsIRenderingContext* aContext, nsIFrame\\n       \\n     case NS_THEME_PROGRESSBAR:\\n       DrawProgress(cgContext, macRect, IsIndeterminateProgress(aFrame),\\n-                   PR_TRUE, GetProgressValue(aFrame));\\n+                   PR_TRUE, GetProgressValue(aFrame), aFrame);\\n       break;\\n \\n     case NS_THEME_PROGRESSBAR_VERTICAL:\\n       DrawProgress(cgContext, macRect, IsIndeterminateProgress(aFrame),\\n-                   PR_FALSE, GetProgressValue(aFrame));\\n+                   PR_FALSE, GetProgressValue(aFrame), aFrame);\\n       break;\\n \\n     case NS_THEME_PROGRESSBAR_CHUNK:\\n@@ -751,12 +801,12 @@ nsNativeThemeCocoa::DrawWidgetBackground(nsIRenderingContext* aContext, nsIFrame\\n \\n     case NS_THEME_TREEVIEW_TWISTY:\\n       DrawButton(cgContext, kThemeDisclosureButton, macRect, PR_FALSE, IsDisabled(aFrame), \\n-                 kThemeDisclosureRight, kThemeAdornmentNone, eventState);\\n+                 kThemeDisclosureRight, kThemeAdornmentNone, eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_TREEVIEW_TWISTY_OPEN:\\n       DrawButton(cgContext, kThemeDisclosureButton, macRect, PR_FALSE, IsDisabled(aFrame), \\n-                 kThemeDisclosureDown, kThemeAdornmentNone, eventState);\\n+                 kThemeDisclosureDown, kThemeAdornmentNone, eventState, aFrame);\\n       break;\\n \\n     case NS_THEME_TREEVIEW_HEADER_CELL: {\\n@@ -764,7 +814,7 @@ nsNativeThemeCocoa::DrawWidgetBackground(nsIRenderingContext* aContext, nsIFrame\\n       DrawButton(cgContext, kThemeListHeaderButton, macRect, PR_FALSE, IsDisabled(aFrame), \\n                  sortDirection == eTreeSortDirection_Natural ? kThemeButtonOff : kThemeButtonOn,\\n                  sortDirection == eTreeSortDirection_Descending ?\\n-                 kThemeAdornmentHeaderButtonSortUp : kThemeAdornmentNone, eventState);      \\n+                 kThemeAdornmentHeaderButtonSortUp : kThemeAdornmentNone, eventState, aFrame);      \\n     }\\n       break;\\n \\n@@ -797,7 +847,7 @@ nsNativeThemeCocoa::DrawWidgetBackground(nsIRenderingContext* aContext, nsIFrame\\n                     NS_LITERAL_STRING(\\\"reverse\\\"), eCaseMatters);\\n       DrawScale(cgContext, macRect, IsDisabled(aFrame), eventState,\\n                 (aWidgetType == NS_THEME_SCALE_VERTICAL), reverse,\\n-                curpos, minpos, maxpos);\\n+                curpos, minpos, maxpos, aFrame);\\n     }\\n       break;\\n \\n@@ -868,20 +918,20 @@ nsNativeThemeCocoa::DrawWidgetBackground(nsIRenderingContext* aContext, nsIFrame\\n       // HIThemeSetFill is not available on 10.3\\n       CGContextSetRGBFillColor(cgContext, 1.0, 1.0, 1.0, 1.0);\\n       CGContextFillRect(cgContext, macRect);\\n-      DrawFrame(cgContext, kHIThemeFrameListBox,\\n-                macRect, (IsDisabled(aFrame) || IsReadOnly(aFrame)), eventState);\\n+      DrawFrame(cgContext, kHIThemeFrameListBox, macRect,\\n+                (IsDisabled(aFrame) || IsReadOnly(aFrame)), eventState);\\n       break;\\n     \\n     case NS_THEME_TAB: {\\n       DrawTab(cgContext, macRect,\\n               IsDisabled(aFrame), IsSelectedTab(aFrame),\\n               PR_TRUE, IsBottomTab(aFrame),\\n-              eventState);\\n+              eventState, aFrame);\\n     }\\n       break;\\n \\n     case NS_THEME_TAB_PANELS:\\n-      DrawTabPanel(cgContext, macRect);\\n+      DrawTabPanel(cgContext, macRect, aFrame);\\n       break;\\n   }\\n \\n\""}