{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basc57e8ed\""},"diff":"\"c57e8ed Bug 394666 - prefpane height is incorrect when animateFadeIn is true and some other edgecases. r=mconnor, a1.9=mconnor\\ndiff --git a/browser/components/preferences/tabs.xul b/browser/components/preferences/tabs.xul\\nindex 6f4fb38..5b8eff3 100644\\n--- a/browser/components/preferences/tabs.xul\\n+++ b/browser/components/preferences/tabs.xul\\n@@ -49,7 +49,7 @@\\n <overlay id=\\\"TabsPaneOverlay\\\"\\n          xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\">\\n \\n-  <prefpane id=\\\"paneTabs\\\" helpTopic=\\\"prefs-tabs\\\" helpURI=\\\"chrome://browser/locale/help/help.rdf\\\" flex=\\\"1\\\">\\n+  <prefpane id=\\\"paneTabs\\\" helpTopic=\\\"prefs-tabs\\\" helpURI=\\\"chrome://browser/locale/help/help.rdf\\\">\\n \\n     <preferences id=\\\"tabsPreferences\\\">\\n       <preference id=\\\"browser.link.open_external\\\"      name=\\\"browser.link.open_external\\\"      type=\\\"int\\\"/>\\n@@ -75,8 +75,8 @@\\n \\n     <separator id=\\\"tabsSeparator\\\"/>\\n \\n-    <!-- XXX flex below and on prefpane is a hack because wrapping checkboxes don't\\n-             reflow properly; see bug 349098 -->\\n+    <!-- XXX flex below is a hack because wrapping checkboxes don't reflow\\n+             properly; see bug 349098 -->\\n     <vbox id=\\\"tabPrefsBox\\\" align=\\\"start\\\" flex=\\\"1\\\">\\n       <checkbox id=\\\"warnCloseMultiple\\\" label=\\\"&warnCloseMultipleTabs.label;\\\"\\n                 accesskey=\\\"&warnCloseMultipleTabs.accesskey;\\\"\\ndiff --git a/toolkit/content/widgets/preferences.xml b/toolkit/content/widgets/preferences.xml\\nindex 425ae1a..8cf9955 100644\\n--- a/toolkit/content/widgets/preferences.xml\\n+++ b/toolkit/content/widgets/preferences.xml\\n@@ -575,6 +575,9 @@\\n         }\\n         var panes = this.preferencePanes;\\n \\n+        if (this._shouldAnimate)\\n+          this.style.minHeight = 0;\\n+\\n         var lastPane = null;\\n         if (this.lastSelected) {\\n           lastPane = document.getElementById(this.lastSelected);\\n@@ -735,23 +738,28 @@\\n               this._paneDeck.selectedIndex = i;\\n               \\n               if (this.type != \\\"child\\\") {\\n+                // Calling sizeToContent after the first prefpane is loaded\\n+                // will size the windows contents so style information is\\n+                // available to calculate correct sizing.\\n+                if (!this._initialized)\\n+                  window.sizeToContent();\\n+\\n                 var oldPane = this.lastSelected ? document.getElementById(this.lastSelected) : this.preferencePanes[0];\\n                 oldPane.selected = !(aPaneElement.selected = true);\\n                 this.lastSelected = aPaneElement.id;\\n                 this.currentPane = aPaneElement;\\n+                this._initialized = true;\\n+\\n                 // Only animate if we've switched between prefpanes\\n                 if (this._shouldAnimate && oldPane.id != aPaneElement.id) {\\n-                  // Don't let the new pane content flex to the current window\\n-                  // height if we're animating \\n-                  aPaneElement.removeAttribute(\\\"flex\\\");\\n                   aPaneElement.style.opacity = 0.0;\\n                   this.animate(oldPane, aPaneElement);\\n                 }\\n-                else if (this._initialized && !this._shouldAnimate) {\\n+                else if (!this._shouldAnimate) {\\n                   var targetHeight = parseInt(window.getComputedStyle(this._paneDeckContainer, \\\"\\\").height);\\n-                  targetHeight -= parseInt(window.getComputedStyle(this, \\\"\\\").paddingTop);\\n-                  targetHeight -= parseInt(window.getComputedStyle(this, \\\"\\\").paddingBottom);\\n-                  if (aPaneElement.contentHeight > targetHeight) {\\n+                  var verticalPadding = parseInt(window.getComputedStyle(aPaneElement, \\\"\\\").paddingTop);\\n+                  verticalPadding += parseInt(window.getComputedStyle(aPaneElement, \\\"\\\").paddingBottom);\\n+                  if (aPaneElement.contentHeight > targetHeight - verticalPadding) {\\n                     // To workaround the bottom border of a groupbox from being\\n                     // cutoff an hbox with a class of bottomBox may enclose it.\\n                     // This needs to include its padding to resize properly.\\n@@ -760,10 +768,14 @@\\n                     var bottomBox = aPaneElement.getElementsByAttribute(\\\"class\\\", \\\"bottomBox\\\")[0];\\n                     if (bottomBox)\\n                       bottomPadding = parseInt(window.getComputedStyle(bottomBox, \\\"\\\").paddingBottom);\\n-                    window.innerHeight += bottomPadding + aPaneElement.contentHeight - targetHeight;\\n+                    window.innerHeight += bottomPadding + verticalPadding + aPaneElement.contentHeight - targetHeight;\\n                   }\\n+\\n+                  // XXX rstrong - extend the contents of the prefpane to\\n+                  // prevent elements from being cutoff (see bug 349098).\\n+                  if (aPaneElement.contentHeight + verticalPadding < targetHeight)\\n+                    aPaneElement._content.style.height = targetHeight - verticalPadding + \\\"px\\\";\\n                 }\\n-                this._initialized = true;\\n               }\\n               break;\\n             }\\n\""}