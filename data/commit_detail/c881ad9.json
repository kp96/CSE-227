{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basc881ad9\""},"diff":"\"c881ad9 bug 377302 - implement nsIAccessNode::scrollToPoint, r=aaronlev, sr=roc, a=dsicore\\ndiff --git a/accessible/src/atk/nsMaiInterfaceComponent.cpp b/accessible/src/atk/nsMaiInterfaceComponent.cpp\\nindex 90ae15c..c75dd1c 100644\\n--- a/accessible/src/atk/nsMaiInterfaceComponent.cpp\\n+++ b/accessible/src/atk/nsMaiInterfaceComponent.cpp\\n@@ -111,32 +111,11 @@ getExtentsCB(AtkComponent *aComponent,\\n     if (NS_FAILED(rv))\\n         return;\\n     if (aCoordType == ATK_XY_WINDOW) {\\n-      // Make coordinates relative to top level window instead of screen\\n-      nsCOMPtr<nsIDOMNode> domNode;\\n-      accWrap->GetDOMNode(getter_AddRefs(domNode));\\n-      nsCOMPtr<nsIDocShellTreeItem> treeItem = nsAccessNode::GetDocShellTreeItemFor(domNode);\\n-      nsCOMPtr<nsIDocShellTreeItem> rootTreeItem;\\n-      treeItem->GetRootTreeItem(getter_AddRefs(rootTreeItem));\\n-      nsCOMPtr<nsIDOMDocument> domDoc = do_GetInterface(rootTreeItem);\\n-      nsCOMPtr<nsIDOMDocumentView> docView(do_QueryInterface(domDoc));\\n-      if (!docView) {\\n-        return;\\n-      }\\n-\\n-      nsCOMPtr<nsIDOMAbstractView> abstractView;\\n-      docView->GetDefaultView(getter_AddRefs(abstractView));\\n-      nsCOMPtr<nsIDOMWindowInternal> windowInter(do_QueryInterface(abstractView));\\n-      if (!windowInter) {\\n-        return;\\n-      }\\n-\\n-      PRInt32 screenX, screenY;\\n-      if (NS_FAILED(windowInter->GetScreenX(&screenX)) ||\\n-          NS_FAILED(windowInter->GetScreenY(&screenY))) {\\n-        return;\\n-      }\\n-      nsAccX -= screenX;\\n-      nsAccY -= screenY;\\n+        nsCOMPtr<nsIDOMNode> domNode;\\n+        accWrap->GetDOMNode(getter_AddRefs(domNode));\\n+        nsIntPoint winCoords = nsAccUtils::GetScreenCoordsForWindow(domNode);\\n+        nsAccX -= winCoords.x;\\n+        nsAccY -= winCoords.y;\\n     }\\n \\n     *aAccX = nsAccX;\\ndiff --git a/accessible/src/base/nsAccessNode.cpp b/accessible/src/base/nsAccessNode.cpp\\nindex 64c571a..705a914 100755\\n--- a/accessible/src/base/nsAccessNode.cpp\\n+++ b/accessible/src/base/nsAccessNode.cpp\\n@@ -59,6 +59,7 @@\\n #include \\\"nsPIDOMWindow.h\\\"\\n #include \\\"nsIInterfaceRequestorUtils.h\\\"\\n #include \\\"nsIFrame.h\\\"\\n+#include \\\"nsIScrollableFrame.h\\\"\\n #include \\\"nsIPrefService.h\\\"\\n #include \\\"nsIPrefBranch.h\\\"\\n #include \\\"nsPresContext.h\\\"\\n@@ -336,8 +337,8 @@ already_AddRefed<nsIAccessibleDocument> nsAccessNode::GetDocAccessible()\\n \\n already_AddRefed<nsRootAccessible> nsAccessNode::GetRootAccessible()\\n {\\n-  nsCOMPtr<nsIDocShellTreeItem> docShellTreeItem = \\n-    GetDocShellTreeItemFor(mDOMNode);\\n+  nsCOMPtr<nsIDocShellTreeItem> docShellTreeItem =\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   NS_ASSERTION(docShellTreeItem, \\\"No docshell tree item for mDOMNode\\\");\\n   if (!docShellTreeItem) {\\n     return nsnull;\\n@@ -434,7 +435,77 @@ nsAccessNode::ScrollTo(PRUint32 aScrollType)\\n NS_IMETHODIMP\\n nsAccessNode::ScrollToPoint(PRUint32 aCoordinateType, PRInt32 aX, PRInt32 aY)\\n {\\n-  return NS_ERROR_NOT_IMPLEMENTED;\\n+  nsIFrame *frame = GetFrame();\\n+  if (!frame)\\n+    return NS_ERROR_FAILURE;\\n+\\n+  nsPresContext *presContext = frame->PresContext();\\n+\\n+  switch (aCoordinateType) {\\n+    case nsIAccessibleCoordinateType::COORDTYPE_SCREEN_RELATIVE:\\n+      break;\\n+\\n+    case nsIAccessibleCoordinateType::COORDTYPE_WINDOW_RELATIVE:\\n+    {\\n+      nsIntPoint wndCoords = nsAccUtils::GetScreenCoordsForWindow(mDOMNode);\\n+      aX += wndCoords.x;\\n+      aY += wndCoords.y;\\n+      break;\\n+    }\\n+\\n+    case nsIAccessibleCoordinateType::COORDTYPE_PARENT_RELATIVE:\\n+    {\\n+      nsCOMPtr<nsPIAccessNode> parent;\\n+\\n+      nsCOMPtr<nsIAccessible> accessible;\\n+      nsresult rv = QueryInterface(NS_GET_IID(nsIAccessible),\\n+                                   getter_AddRefs(accessible));\\n+      if (NS_SUCCEEDED(rv) && accessible) {\\n+        nsCOMPtr<nsIAccessible> parentAccessible;\\n+        accessible->GetParent(getter_AddRefs(parentAccessible));\\n+        parent = do_QueryInterface(parentAccessible);\\n+      } else {\\n+        nsCOMPtr<nsIAccessNode> parentAccessNode;\\n+        GetParentNode(getter_AddRefs(parentAccessNode));\\n+        parent = do_QueryInterface(parentAccessNode);\\n+      }\\n+\\n+      NS_ENSURE_STATE(parent);\\n+      nsIFrame *parentFrame = parent->GetFrame();\\n+      NS_ENSURE_STATE(parentFrame);\\n+\\n+      nsIntRect parentRect = parentFrame->GetScreenRectExternal();\\n+      aX += parentRect.x;\\n+      aY += parentRect.y;\\n+      break;\\n+    }\\n+\\n+    default:\\n+      return NS_ERROR_INVALID_ARG;\\n+  }\\n+\\n+  nsIFrame *parentFrame = frame;\\n+  while (parentFrame = parentFrame->GetParent()) {\\n+    nsIScrollableFrame *scrollableFrame = nsnull;\\n+    CallQueryInterface(parentFrame, &scrollableFrame);\\n+    if (scrollableFrame) {\\n+      nsIntRect frameRect = frame->GetScreenRectExternal();\\n+      PRInt32 devDeltaX = aX - frameRect.x;\\n+      PRInt32 devDeltaY = aY - frameRect.y;\\n+\\n+      nsPoint deltaPoint;\\n+      deltaPoint.x = presContext->DevPixelsToAppUnits(devDeltaX);\\n+      deltaPoint.y = presContext->DevPixelsToAppUnits(devDeltaY);\\n+\\n+      nsPoint scrollPoint = scrollableFrame->GetScrollPosition();\\n+\\n+      scrollPoint -= deltaPoint;\\n+\\n+      scrollableFrame->ScrollTo(scrollPoint);\\n+    }\\n+  }\\n+\\n+  return NS_OK;\\n }\\n \\n nsresult\\n@@ -681,30 +752,6 @@ nsAccessNode::GetPresShellFor(nsIDOMNode *aNode)\\n   return presShell;\\n }\\n \\n-\\n-already_AddRefed<nsIDocShellTreeItem>\\n-nsAccessNode::GetDocShellTreeItemFor(nsIDOMNode *aStartNode)\\n-{\\n-  if (!aStartNode) {\\n-    return nsnull;\\n-  }\\n-  nsCOMPtr<nsIDOMDocument> domDoc;\\n-  aStartNode->GetOwnerDocument(getter_AddRefs(domDoc));\\n-  nsCOMPtr<nsIDocument> doc(do_QueryInterface(domDoc));\\n-  if (!doc) {\\n-    doc = do_QueryInterface(aStartNode);\\n-  }\\n-  NS_ASSERTION(doc, \\\"No document for node passed in\\\");\\n-  NS_ENSURE_TRUE(doc, nsnull);\\n-  nsCOMPtr<nsISupports> container = doc->GetContainer();\\n-  nsIDocShellTreeItem *docShellTreeItem = nsnull;\\n-  if (container) {\\n-    CallQueryInterface(container, &docShellTreeItem);\\n-  }\\n-\\n-  return docShellTreeItem;\\n-}\\n-\\n already_AddRefed<nsIDOMNode>\\n nsAccessNode::GetDOMNodeForContainer(nsISupports *aContainer)\\n {\\ndiff --git a/accessible/src/base/nsAccessNode.h b/accessible/src/base/nsAccessNode.h\\nindex f20a052..81673a8 100755\\n--- a/accessible/src/base/nsAccessNode.h\\n+++ b/accessible/src/base/nsAccessNode.h\\n@@ -49,7 +49,6 @@\\n #include \\\"nsIAccessNode.h\\\"\\n #include \\\"nsIContent.h\\\"\\n #include \\\"nsPIAccessNode.h\\\"\\n-#include \\\"nsIDocShellTreeItem.h\\\"\\n #include \\\"nsIDOMNode.h\\\"\\n #include \\\"nsINameSpaceManager.h\\\"\\n #include \\\"nsIStringBundle.h\\\"\\n@@ -104,7 +103,6 @@ class nsAccessNode: public nsIAccessNode, public nsPIAccessNode\\n     static already_AddRefed<nsIAccessibleDocument> GetDocAccessibleFor(nsISupports *aContainer, PRBool aCanCreate = PR_FALSE);\\n     static already_AddRefed<nsIAccessibleDocument> GetDocAccessibleFor(nsIDOMNode *aNode);\\n \\n-    static already_AddRefed<nsIDocShellTreeItem> GetDocShellTreeItemFor(nsIDOMNode *aStartNode);\\n     static already_AddRefed<nsIDOMNode> GetDOMNodeForContainer(nsISupports *aContainer);\\n     static already_AddRefed<nsIPresShell> GetPresShellFor(nsIDOMNode *aStartNode);\\n     \\ndiff --git a/accessible/src/base/nsAccessibilityUtils.cpp b/accessible/src/base/nsAccessibilityUtils.cpp\\nindex 91d46b3..23dcace 100755\\n--- a/accessible/src/base/nsAccessibilityUtils.cpp\\n+++ b/accessible/src/base/nsAccessibilityUtils.cpp\\n@@ -42,9 +42,14 @@\\n #include \\\"nsPIAccessible.h\\\"\\n #include \\\"nsAccessibleEventData.h\\\"\\n \\n+#include \\\"nsIDocument.h\\\"\\n+#include \\\"nsIDOMAbstractView.h\\\"\\n+#include \\\"nsIDOMDocument.h\\\"\\n+#include \\\"nsIDOMDocumentView.h\\\"\\n #include \\\"nsIDOMRange.h\\\"\\n #include \\\"nsIDOMXULSelectCntrlEl.h\\\"\\n #include \\\"nsIDOMXULSelectCntrlItemEl.h\\\"\\n+#include \\\"nsIDOMWindowInternal.h\\\"\\n #include \\\"nsIEventListenerManager.h\\\"\\n #include \\\"nsIPresShell.h\\\"\\n #include \\\"nsPresContext.h\\\"\\n@@ -54,6 +59,7 @@\\n \\n #include \\\"nsContentCID.h\\\"\\n #include \\\"nsComponentManagerUtils.h\\\"\\n+#include \\\"nsIInterfaceRequestorUtils.h\\\"\\n \\n static NS_DEFINE_IID(kRangeCID, NS_RANGE_CID);\\n \\n@@ -347,3 +353,52 @@ nsAccUtils::ConvertScrollTypeToPercents(PRUint32 aScrollType,\\n   }\\n }\\n \\n+nsIntPoint\\n+nsAccUtils::GetScreenCoordsForWindow(nsIDOMNode *aNode)\\n+{\\n+  nsIntPoint coords(0, 0);\\n+  nsCOMPtr<nsIDocShellTreeItem> treeItem(GetDocShellTreeItemFor(aNode));\\n+  if (!treeItem)\\n+    return coords;\\n+\\n+  nsCOMPtr<nsIDocShellTreeItem> rootTreeItem;\\n+  treeItem->GetRootTreeItem(getter_AddRefs(rootTreeItem));\\n+  nsCOMPtr<nsIDOMDocument> domDoc = do_GetInterface(rootTreeItem);\\n+  nsCOMPtr<nsIDOMDocumentView> docView(do_QueryInterface(domDoc));\\n+  if (!docView)\\n+    return coords;\\n+\\n+  nsCOMPtr<nsIDOMAbstractView> abstractView;\\n+  docView->GetDefaultView(getter_AddRefs(abstractView));\\n+  nsCOMPtr<nsIDOMWindowInternal> windowInter(do_QueryInterface(abstractView));\\n+  if (!windowInter)\\n+    return coords;\\n+\\n+  windowInter->GetScreenX(&coords.x);\\n+  windowInter->GetScreenY(&coords.y);\\n+  return coords;\\n+}\\n+\\n+already_AddRefed<nsIDocShellTreeItem>\\n+nsAccUtils::GetDocShellTreeItemFor(nsIDOMNode *aNode)\\n+{\\n+  if (!aNode)\\n+    return nsnull;\\n+\\n+  nsCOMPtr<nsIDOMDocument> domDoc;\\n+  aNode->GetOwnerDocument(getter_AddRefs(domDoc));\\n+  nsCOMPtr<nsIDocument> doc(do_QueryInterface(domDoc));\\n+  if (!doc)\\n+    doc = do_QueryInterface(aNode);\\n+\\n+  NS_ASSERTION(doc, \\\"No document for node passed in\\\");\\n+  NS_ENSURE_TRUE(doc, nsnull);\\n+\\n+  nsCOMPtr<nsISupports> container = doc->GetContainer();\\n+  nsIDocShellTreeItem *docShellTreeItem = nsnull;\\n+  if (container)\\n+    CallQueryInterface(container, &docShellTreeItem);\\n+\\n+  return docShellTreeItem;\\n+}\\n+\\ndiff --git a/accessible/src/base/nsAccessibilityUtils.h b/accessible/src/base/nsAccessibilityUtils.h\\nindex 13eef1d..b4c9c8d 100755\\n--- a/accessible/src/base/nsAccessibilityUtils.h\\n+++ b/accessible/src/base/nsAccessibilityUtils.h\\n@@ -46,6 +46,8 @@\\n #include \\\"nsIPersistentProperties2.h\\\"\\n #include \\\"nsIContent.h\\\"\\n #include \\\"nsIFrame.h\\\"\\n+#include \\\"nsIDocShellTreeItem.h\\\"\\n+#include \\\"nsPoint.h\\\"\\n \\n class nsAccUtils\\n {\\n@@ -165,6 +167,19 @@ public:\\n   static void ConvertScrollTypeToPercents(PRUint32 aScrollType,\\n                                           PRInt16 *aVPercent,\\n                                           PRInt16 *aHPercent);\\n+\\n+  /**\\n+   * Returns coordinates relative screen for the top level window.\\n+   *\\n+   * @param - aNode - the DOM node hosted in the window.\\n+   */\\n+  static nsIntPoint GetScreenCoordsForWindow(nsIDOMNode *aNode);\\n+\\n+  /**\\n+   * Return document shell tree item for the given DOM node.\\n+   */\\n+  static already_AddRefed<nsIDocShellTreeItem>\\n+    GetDocShellTreeItemFor(nsIDOMNode *aNode);\\n };\\n \\n #endif\\ndiff --git a/accessible/src/base/nsDocAccessible.cpp b/accessible/src/base/nsDocAccessible.cpp\\nindex 04b7016..1a02eaa 100644\\n--- a/accessible/src/base/nsDocAccessible.cpp\\n+++ b/accessible/src/base/nsDocAccessible.cpp\\n@@ -109,8 +109,8 @@ nsDocAccessible::nsDocAccessible(nsIDOMNode *aDOMNode, nsIWeakReference* aShell)\\n   // XXX aaronl should we use an algorithm for the initial cache size?\\n   mAccessNodeCache.Init(kDefaultCacheSize);\\n \\n-  nsCOMPtr<nsIDocShellTreeItem> docShellTreeItem =                              \\n-    GetDocShellTreeItemFor(mDOMNode);\\n+  nsCOMPtr<nsIDocShellTreeItem> docShellTreeItem =\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   nsCOMPtr<nsIDocShell> docShell = do_QueryInterface(docShellTreeItem);\\n   if (docShell) {\\n     PRUint32 busyFlags;\\n@@ -164,7 +164,7 @@ NS_IMETHODIMP nsDocAccessible::GetRole(PRUint32 *aRole)\\n   *aRole = nsIAccessibleRole::ROLE_PANE; // Fall back\\n \\n   nsCOMPtr<nsIDocShellTreeItem> docShellTreeItem =\\n-    GetDocShellTreeItemFor(mDOMNode);\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   if (docShellTreeItem) {\\n     nsCOMPtr<nsIDocShellTreeItem> sameTypeRoot;\\n     docShellTreeItem->GetSameTypeRootTreeItem(getter_AddRefs(sameTypeRoot));\\n@@ -278,7 +278,8 @@ NS_IMETHODIMP nsDocAccessible::TakeFocus()\\n     return NS_ERROR_FAILURE; // Not focusable\\n   }\\n \\n-  nsCOMPtr<nsIDocShellTreeItem> treeItem = GetDocShellTreeItemFor(mDOMNode);\\n+  nsCOMPtr<nsIDocShellTreeItem> treeItem =\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   nsCOMPtr<nsIDocShell> docShell = do_QueryInterface(treeItem);\\n   NS_ENSURE_TRUE(docShell, NS_ERROR_FAILURE);\\n \\n@@ -525,7 +526,8 @@ NS_IMETHODIMP nsDocAccessible::Shutdown()\\n     return NS_OK;  // Already shutdown\\n   }\\n \\n-  nsCOMPtr<nsIDocShellTreeItem> treeItem = GetDocShellTreeItemFor(mDOMNode);\\n+  nsCOMPtr<nsIDocShellTreeItem> treeItem =\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   ShutdownChildDocuments(treeItem);\\n \\n   if (mDocLoadTimer) {\\n@@ -787,7 +789,8 @@ NS_IMETHODIMP nsDocAccessible::FireDocLoadEvents(PRUint32 aEventType)\\n                                           nsITimer::TYPE_ONE_SHOT);\\n     }\\n   } else {\\n-    nsCOMPtr<nsIDocShellTreeItem> treeItem = GetDocShellTreeItemFor(mDOMNode);\\n+    nsCOMPtr<nsIDocShellTreeItem> treeItem =\\n+      nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n     if (!treeItem) {\\n       return NS_OK;\\n     }\\n@@ -1852,7 +1855,7 @@ void nsDocAccessible::DocLoadCallback(nsITimer *aTimer, void *aClosure)\\n     // Fire STATE_CHANGE event for doc load finish if focus is in same doc tree\\n     if (gLastFocusedNode) {\\n       nsCOMPtr<nsIDocShellTreeItem> focusedTreeItem =\\n-        GetDocShellTreeItemFor(gLastFocusedNode);\\n+        nsAccUtils::GetDocShellTreeItemFor(gLastFocusedNode);\\n       if (focusedTreeItem) {\\n         nsCOMPtr<nsIDocShellTreeItem> sameTypeRootOfFocus;\\n         focusedTreeItem->GetSameTypeRootTreeItem(getter_AddRefs(sameTypeRootOfFocus));\\ndiff --git a/accessible/src/base/nsRootAccessible.cpp b/accessible/src/base/nsRootAccessible.cpp\\nindex 78d823e..2f6ceb1 100644\\n--- a/accessible/src/base/nsRootAccessible.cpp\\n+++ b/accessible/src/base/nsRootAccessible.cpp\\n@@ -132,7 +132,7 @@ NS_IMETHODIMP nsRootAccessible::GetName(nsAString& aName)\\n   }\\n \\n   nsCOMPtr<nsIDocShellTreeItem> docShellAsItem =\\n-    GetDocShellTreeItemFor(mDOMNode);\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   NS_ENSURE_TRUE(docShellAsItem, NS_ERROR_FAILURE);\\n \\n   nsCOMPtr<nsIDocShellTreeOwner> treeOwner;\\n@@ -191,7 +191,8 @@ PRUint32 nsRootAccessible::GetChromeFlags()\\n   // Return the flag set for the top level window as defined \\n   // by nsIWebBrowserChrome::CHROME_WINDOW_[FLAGNAME]\\n   // Not simple: nsIXULWindow is not just a QI from nsIDOMWindow\\n-  nsCOMPtr<nsIDocShellTreeItem> treeItem = GetDocShellTreeItemFor(mDOMNode);\\n+  nsCOMPtr<nsIDocShellTreeItem> treeItem =\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   NS_ENSURE_TRUE(treeItem, 0);\\n   nsCOMPtr<nsIDocShellTreeOwner> treeOwner;\\n   treeItem->GetTreeOwner(getter_AddRefs(treeOwner));\\n@@ -377,7 +378,7 @@ void nsRootAccessible::TryFireEarlyLoadEvent(nsIDOMNode *aDocNode)\\n   // This also works for firing events for error pages\\n \\n   nsCOMPtr<nsIDocShellTreeItem> treeItem =\\n-    GetDocShellTreeItemFor(aDocNode);\\n+    nsAccUtils::GetDocShellTreeItemFor(aDocNode);\\n   NS_ASSERTION(treeItem, \\\"No docshelltreeitem for aDocNode\\\");\\n   if (!treeItem) {\\n     return;\\n@@ -975,7 +976,8 @@ NS_IMETHODIMP nsRootAccessible::GetAccessibleRelated(PRUint32 aRelationType,\\n     return nsDocAccessibleWrap::GetAccessibleRelated(aRelationType, aRelated);\\n   }\\n \\n-  nsCOMPtr<nsIDocShellTreeItem> treeItem = GetDocShellTreeItemFor(mDOMNode);   \\n+  nsCOMPtr<nsIDocShellTreeItem> treeItem =\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   nsCOMPtr<nsIDocShellTreeItem> contentTreeItem = GetContentDocShell(treeItem);\\n   // there may be no content area, so we need a null check\\n   if (contentTreeItem) {\\n@@ -996,7 +998,7 @@ NS_IMETHODIMP nsRootAccessible::FireDocLoadEvents(PRUint32 aEventType)\\n   }\\n \\n   nsCOMPtr<nsIDocShellTreeItem> docShellTreeItem =\\n-    nsAccessNode::GetDocShellTreeItemFor(mDOMNode);\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   NS_ASSERTION(docShellTreeItem, \\\"No doc shell tree item for document\\\");\\n   NS_ENSURE_TRUE(docShellTreeItem, NS_ERROR_FAILURE);\\n   PRInt32 contentType;\\ndiff --git a/accessible/src/html/nsHyperTextAccessible.cpp b/accessible/src/html/nsHyperTextAccessible.cpp\\nindex 8058734..1b5f2c1 100644\\n--- a/accessible/src/html/nsHyperTextAccessible.cpp\\n+++ b/accessible/src/html/nsHyperTextAccessible.cpp\\n@@ -1268,7 +1268,8 @@ nsHyperTextAccessible::GetAssociatedEditor(nsIEditor **aEditor)\\n     return NS_OK;\\n   }\\n \\n-  nsCOMPtr<nsIDocShellTreeItem> docShellTreeItem = GetDocShellTreeItemFor(mDOMNode);\\n+  nsCOMPtr<nsIDocShellTreeItem> docShellTreeItem =\\n+    nsAccUtils::GetDocShellTreeItemFor(mDOMNode);\\n   nsCOMPtr<nsIEditingSession> editingSession(do_GetInterface(docShellTreeItem));\\n   if (!editingSession)\\n     return NS_OK; // No editing session interface\\n\""}