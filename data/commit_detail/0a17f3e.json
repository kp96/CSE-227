{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0a17f3e\""},"diff":"\"0a17f3e Bug 356819 - drag&drop to a background tab that's scrolled off the tabstrip not functional if the drag source is another application p=Martijn Wargers <martijn.martijn@gmail.com> r=gavin\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 77b4912..958f173 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -1759,128 +1759,127 @@\\n         <parameter name=\\\"aDragSession\\\"/>\\n         <body>\\n           <![CDATA[\\n-            if (aDragSession.sourceNode) {\\n-              var tabStrip = this.mTabContainer.mTabstrip;\\n-\\n-              // autoscroll the tab strip if we drag over the scroll\\n-              // buttons, even if we aren't dragging a tab, but then\\n-              // return to avoid drawing the drop indicator\\n-              var pixelsToScroll = 0;\\n-\\n-              var targetAnonid = aEvent.originalTarget.getAttribute(\\\"anonid\\\");\\n-              if (targetAnonid == \\\"scrollbutton-up\\\") {\\n-                pixelsToScroll = tabStrip.scrollIncrement * -1;\\n-                tabStrip.scrollByPixels(pixelsToScroll);\\n-              }\\n-              else if (targetAnonid == \\\"scrollbutton-down\\\" || \\n-                       (targetAnonid == \\\"alltabs-button\\\" && \\n-                        this.mTabContainer.getAttribute(\\\"overflow\\\") == \\\"true\\\")) {\\n-                pixelsToScroll = tabStrip.scrollIncrement;\\n-                tabStrip.scrollByPixels(pixelsToScroll);\\n-              }\\n+            var tabStrip = this.mTabContainer.mTabstrip;\\n+\\n+            // autoscroll the tab strip if we drag over the scroll\\n+            // buttons, even if we aren't dragging a tab, but then\\n+            // return to avoid drawing the drop indicator\\n+            var pixelsToScroll = 0;\\n+\\n+            var targetAnonid = aEvent.originalTarget.getAttribute(\\\"anonid\\\");\\n+            if (targetAnonid == \\\"scrollbutton-up\\\") {\\n+              pixelsToScroll = tabStrip.scrollIncrement * -1;\\n+              tabStrip.scrollByPixels(pixelsToScroll);\\n+            }\\n+            else if (targetAnonid == \\\"scrollbutton-down\\\" || \\n+                     (targetAnonid == \\\"alltabs-button\\\" && \\n+                      this.mTabContainer.getAttribute(\\\"overflow\\\") == \\\"true\\\")) {\\n+              pixelsToScroll = tabStrip.scrollIncrement;\\n+              tabStrip.scrollByPixels(pixelsToScroll);\\n+            }\\n+\\n+            var isTabDrag = (aDragSession.sourceNode && \\n+                             aDragSession.sourceNode.parentNode == this.mTabContainer);\\n+            if (!isTabDrag && aEvent.target.localName == \\\"tab\\\") {\\n+              if (!this.mDragTime) \\n+                this.mDragTime = Date.now();\\n+              if (Date.now() >= this.mDragTime + this.mDragOverDelay)\\n+                this.mTabContainer.selectedItem = aEvent.target;\\n+              return;\\n+            }\\n \\n-              var isTabDrag = (aDragSession.sourceNode.parentNode == this.mTabContainer);\\n-              if (!isTabDrag && aEvent.target.localName == \\\"tab\\\") {\\n-                if (!this.mDragTime) \\n-                  this.mDragTime = Date.now();\\n-                if (Date.now() >= this.mDragTime + this.mDragOverDelay)\\n-                  this.mTabContainer.selectedItem = aEvent.target;\\n-                return;\\n+            var newIndex = this.getNewIndex(aEvent);\\n+\\n+            var ib = this.mTabDropIndicatorBar;\\n+            var ind = ib.firstChild;\\n+            ib.setAttribute('dragging',\\n+               aDragSession.canDrop ? 'true' : 'false');\\n+\\n+            var tabStripBoxObject = tabStrip.scrollBoxObject;\\n+            var halfIndWidth = Math.floor((ind.boxObject.width + 1) / 2);\\n+            if (window.getComputedStyle(this.parentNode, null)\\n+                      .direction == \\\"ltr\\\") {\\n+              var newMarginLeft;\\n+              var minMarginLeft = tabStripBoxObject.x - halfIndWidth -\\n+                                  ib.boxObject.x;\\n+              // make sure we don't place the tab drop indicator past the\\n+              // edge, or the containing box will flex and stretch\\n+              // the tab drop indicator bar, which will flex the url bar.  \\n+              // XXX todo\\n+              // just use first value if you can figure out how to get\\n+              // the tab drop indicator to crop instead of flex and stretch\\n+              // the tab drop indicator bar.\\n+              var maxMarginLeft = Math.min(\\n+                (minMarginLeft + tabStripBoxObject.width), \\n+                (ib.boxObject.x + ib.boxObject.width - ind.boxObject.width));\\n+\\n+              // if we are scrolling, put the drop indicator at the edge\\n+              // so that it doesn't jump while scrolling\\n+              if (pixelsToScroll > 0)\\n+                newMarginLeft = maxMarginLeft;\\n+              else if (pixelsToScroll < 0)\\n+                newMarginLeft = minMarginLeft;\\n+              else {\\n+              if (newIndex == this.mTabs.length) {\\n+                  newMarginLeft = this.mTabs[newIndex-1].boxObject.screenX +\\n+                                  this.mTabs[newIndex-1].boxObject.width - \\n+                                  this.boxObject.screenX - halfIndWidth;\\n+              } else {\\n+                  newMarginLeft = this.mTabs[newIndex].boxObject.screenX - \\n+                                  this.boxObject.screenX - halfIndWidth;\\n               }\\n \\n-              var newIndex = this.getNewIndex(aEvent);\\n-\\n-              var ib = this.mTabDropIndicatorBar;\\n-              var ind = ib.firstChild;\\n-              ib.setAttribute('dragging',\\n-                 aDragSession.canDrop ? 'true' : 'false');\\n-\\n-              var tabStripBoxObject = tabStrip.scrollBoxObject;\\n-              var halfIndWidth = Math.floor((ind.boxObject.width + 1) / 2);\\n-              if (window.getComputedStyle(this.parentNode, null)\\n-                        .direction == \\\"ltr\\\") {\\n-                var newMarginLeft;\\n-                var minMarginLeft = tabStripBoxObject.x - halfIndWidth -\\n-                                    ib.boxObject.x;\\n-                // make sure we don't place the tab drop indicator past the\\n-                // edge, or the containing box will flex and stretch\\n-                // the tab drop indicator bar, which will flex the url bar.  \\n-                // XXX todo\\n-                // just use first value if you can figure out how to get\\n-                // the tab drop indicator to crop instead of flex and stretch\\n-                // the tab drop indicator bar.\\n-                var maxMarginLeft = Math.min(\\n-                  (minMarginLeft + tabStripBoxObject.width), \\n-                  (ib.boxObject.x + ib.boxObject.width - ind.boxObject.width));\\n-\\n-                // if we are scrolling, put the drop indicator at the edge\\n-                // so that it doesn't jump while scrolling\\n-                if (pixelsToScroll > 0)\\n-                  newMarginLeft = maxMarginLeft;\\n-                else if (pixelsToScroll < 0)\\n+                // ensure we never place the drop indicator beyond\\n+                // our limits\\n+                if (newMarginLeft < minMarginLeft)\\n                   newMarginLeft = minMarginLeft;\\n-                else {\\n-                if (newIndex == this.mTabs.length) {\\n-                    newMarginLeft = this.mTabs[newIndex-1].boxObject.screenX +\\n-                                    this.mTabs[newIndex-1].boxObject.width - \\n-                                    this.boxObject.screenX - halfIndWidth;\\n-                } else {\\n-                    newMarginLeft = this.mTabs[newIndex].boxObject.screenX - \\n-                                    this.boxObject.screenX - halfIndWidth;\\n+                else if (newMarginLeft > maxMarginLeft)\\n+                  newMarginLeft = maxMarginLeft;\\n+              }\\n+              ind.style.marginLeft = newMarginLeft + 'px';\\n+            } else {\\n+              var newMarginRight;\\n+              var minMarginRight = tabStripBoxObject.x - halfIndWidth -\\n+                                   ib.boxObject.x;\\n+              // make sure we don't place the tab drop indicator past the\\n+              // edge, or the containing box will flex and stretch\\n+              // the tab drop indicator bar, which will flex the url bar.  \\n+              // XXX todo\\n+              // just use first value if you can figure out how to get\\n+              // the tab drop indicator to crop instead of flex and stretch\\n+              // the tab drop indicator bar.\\n+              var maxMarginRight = Math.min(\\n+                (minMarginRight + tabStripBoxObject.width), \\n+                (ib.boxObject.x + ib.boxObject.width - ind.boxObject.width));\\n+\\n+              // if we are scrolling, put the drop indicator at the edge\\n+              // so that it doesn't jump while scrolling\\n+              if (pixelsToScroll > 0)\\n+                newMarginRight = maxMarginRight;\\n+              else if (pixelsToScroll < 0)\\n+                newMarginRight = minMarginRight;\\n+              else {\\n+              if (newIndex == this.mTabs.length) {\\n+                  newMarginRight = this.boxObject.width + \\n+                                   this.boxObject.screenX -\\n+                                   this.mTabs[newIndex-1].boxObject.screenX -\\n+                                   halfIndWidth;\\n+              } else {\\n+                  newMarginRight = this.boxObject.width + \\n+                                   this.boxObject.screenX -\\n+                                   this.mTabs[newIndex].boxObject.screenX -\\n+                                   this.mTabs[newIndex].boxObject.width -\\n+                                   halfIndWidth;\\n                 }\\n \\n-                  // ensure we never place the drop indicator beyond\\n-                  // our limits\\n-                  if (newMarginLeft < minMarginLeft)\\n-                    newMarginLeft = minMarginLeft;\\n-                  else if (newMarginLeft > maxMarginLeft)\\n-                    newMarginLeft = maxMarginLeft;\\n-                }\\n-                ind.style.marginLeft = newMarginLeft + 'px';\\n-              } else {\\n-                var newMarginRight;\\n-                var minMarginRight = tabStripBoxObject.x - halfIndWidth -\\n-                                     ib.boxObject.x;\\n-                // make sure we don't place the tab drop indicator past the\\n-                // edge, or the containing box will flex and stretch\\n-                // the tab drop indicator bar, which will flex the url bar.  \\n-                // XXX todo\\n-                // just use first value if you can figure out how to get\\n-                // the tab drop indicator to crop instead of flex and stretch\\n-                // the tab drop indicator bar.\\n-                var maxMarginRight = Math.min(\\n-                  (minMarginRight + tabStripBoxObject.width), \\n-                  (ib.boxObject.x + ib.boxObject.width - ind.boxObject.width));\\n-\\n-                // if we are scrolling, put the drop indicator at the edge\\n-                // so that it doesn't jump while scrolling\\n-                if (pixelsToScroll > 0)\\n-                  newMarginRight = maxMarginRight;\\n-                else if (pixelsToScroll < 0)\\n+                // ensure we never place the drop indicator beyond\\n+                // our limits\\n+                if (newMarginRight < minMarginRight)\\n                   newMarginRight = minMarginRight;\\n-                else {\\n-                if (newIndex == this.mTabs.length) {\\n-                    newMarginRight = this.boxObject.width + \\n-                                     this.boxObject.screenX -\\n-                                     this.mTabs[newIndex-1].boxObject.screenX -\\n-                                     halfIndWidth;\\n-                } else {\\n-                    newMarginRight = this.boxObject.width + \\n-                                     this.boxObject.screenX -\\n-                                     this.mTabs[newIndex].boxObject.screenX -\\n-                                     this.mTabs[newIndex].boxObject.width -\\n-                                     halfIndWidth;\\n-                  }\\n-\\n-                  // ensure we never place the drop indicator beyond\\n-                  // our limits\\n-                  if (newMarginRight < minMarginRight)\\n-                    newMarginRight = minMarginRight;\\n-                  else if (newMarginRight > maxMarginRight)\\n-                    newMarginRight = maxMarginRight;\\n-                }\\n-                ind.style.marginRight = newMarginRight + 'px';\\n+                else if (newMarginRight > maxMarginRight)\\n+                  newMarginRight = maxMarginRight;\\n               }\\n+              ind.style.marginRight = newMarginRight + 'px';\\n             }\\n           ]]>\\n         </body>\\n\""}