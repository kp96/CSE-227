{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas18a066b\""},"diff":"\"18a066b Fix spelling mistakes to force the Windows unit test box to cycle.\\ndiff --git a/layout/doc/regression_tests.html b/layout/doc/regression_tests.html\\nindex 68e97f2..64079bd 100644\\n--- a/layout/doc/regression_tests.html\\n+++ b/layout/doc/regression_tests.html\\n@@ -52,7 +52,7 @@ pre.screen {display:table-cell}\\n <h6>Bernd Mielke</h6>\\n <h2>About This Document</h2>\\n <p>\\n-This document describes my guerilla approach to successfully  running the table layout regression tests. It should encourage more people to run those tests.\\n+This document describes my guerrilla approach to successfully  running the table layout regression tests. It should encourage more people to run those tests.\\n \\n <h2>Subject Overview</h2>\\n <p>\\n@@ -84,11 +84,11 @@ In order to run these tests, you will need to have:\\n <li>execute in the <code>layout/html/tests/block</code>  directory <code>rtest.sh verify &gt;regression.txt</code>\\n <li>Check how many tests have failed and analyse your results:\\n <ul>\\n-<li>If the regression tests have failed at the same place as the previous diagnosted false positives =&gt; ignore\\n+<li>If the regression tests have failed at the same place as the previous diagnosed false positives =&gt; ignore\\n <ol>\\n <li>copy  <code>rtest.sh</code>  to <code>my_rtest.sh</code> \\n <li>create a new directory <code>my_files</code>. \\n-<li>create in this diretory a file <code>file_list.txt</code>, where you put the url's of your remaining test failures\\n+<li>create in this directory a file <code>file_list.txt</code>, where you put the url's of your remaining test failures\\n <li>change <code>my_rtest.sh</code> to use only directory <code>my_files</code>\\n <li>go back to the original gklayout.dll and gkcontent.dll and repeat the regression test procedure on a much smaller set now.\\n </ol>\\n@@ -123,7 +123,7 @@ When <code>-o</code> is specified  together with a output directory for instance\\n the frame trees are dumped to separate files in that directory for all URL's in <code>file_list.txt</code> (see: \\n <a href=\\\"http://lxr.mozilla.org/seamonkey/search?string=nsWebCrawler%3A%3ADumpRegression\\\">\\n nsWebCrawler::DumpRegressionData</a>) . \\n-<p>Theire name is generated by replacing the old extension <code>.html</code> or <code>.xml</code> with <code>.rgd</code>.  For <code>file:///s|/mozilla/layout/html/tests/table/dom/appendCells1.html</code> a file <code>appendCells1.rgd</code> will be created in the <code>s:\\\\mozilla\\\\layout\\\\html\\\\tests\\\\table\\\\dom\\\\</code> directory.\\n+<p>Their name is generated by replacing the old extension <code>.html</code> or <code>.xml</code> with <code>.rgd</code>.  For <code>file:///s|/mozilla/layout/html/tests/table/dom/appendCells1.html</code> a file <code>appendCells1.rgd</code> will be created in the <code>s:\\\\mozilla\\\\layout\\\\html\\\\tests\\\\table\\\\dom\\\\</code> directory.\\n \\n <p>\\n  There is a special type of frame dumps - the printing regression tests, they are invoked by the <code>-Prt</code> command line argument to the <code>viewer</code> and include first a display then a frame dump taking into account the printer pages. A typical beginning of a dump (<code>*.rgd</code> file) looks like:<p>\\n\""}