{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas63b8975\""},"diff":"\"63b8975 bug 390127 - non-ascii characters in profile names saved incorrectly, fix use of Append and GetNativePath in crashreporter code.  r=bsmedberg\\ndiff --git a/toolkit/crashreporter/nsExceptionHandler.cpp b/toolkit/crashreporter/nsExceptionHandler.cpp\\nindex 54bed2f..eeab50f 100755\\n--- a/toolkit/crashreporter/nsExceptionHandler.cpp\\n+++ b/toolkit/crashreporter/nsExceptionHandler.cpp\\n@@ -78,7 +78,6 @@ namespace CrashReporter {\\n \\n #ifdef XP_WIN32\\n typedef wchar_t XP_CHAR;\\n-#define TO_NEW_XP_CHAR(x) ToNewUnicode(x)\\n #define CONVERT_UTF16_TO_XP_CHAR(x) x\\n #define XP_STRLEN(x) wcslen(x)\\n #define CRASH_REPORTER_FILENAME \\\"crashreporter.exe\\\"\\n@@ -95,7 +94,6 @@ typedef wchar_t XP_CHAR;\\n #endif\\n #else\\n typedef char XP_CHAR;\\n-#define TO_NEW_XP_CHAR(x) ToNewUTF8String(x)\\n #define CONVERT_UTF16_TO_XP_CHAR(x) NS_ConvertUTF16toUTF8(x)\\n #define XP_STRLEN(x) strlen(x)\\n #define CRASH_REPORTER_FILENAME \\\"crashreporter\\\"\\n@@ -348,16 +346,24 @@ nsresult SetExceptionHandler(nsILocalFile* aXREDirectory,\\n   exePath->Append(NS_LITERAL_STRING(\\\"MacOS\\\"));\\n #endif\\n \\n-  exePath->Append(NS_LITERAL_STRING(CRASH_REPORTER_FILENAME));\\n+  exePath->AppendNative(NS_LITERAL_CSTRING(CRASH_REPORTER_FILENAME));\\n \\n+#ifdef XP_WIN32\\n   nsString crashReporterPath_temp;\\n   exePath->GetPath(crashReporterPath_temp);\\n \\n-  crashReporterPath = TO_NEW_XP_CHAR(crashReporterPath_temp);\\n+  crashReporterPath = ToNewUnicode(crashReporterPath_temp);\\n+#else\\n+  nsCString crashReporterPath_temp;\\n+  exePath->GetNativePath(crashReporterPath_temp);\\n+\\n+  crashReporterPath = ToNewCString(crashReporterPath_temp);\\n+#endif\\n \\n   // get temp path to use for minidump path\\n-  nsString tempPath;\\n #if defined(XP_WIN32)\\n+  nsString tempPath;\\n+\\n   // first figure out buffer size\\n   int pathLen = GetTempPath(0, NULL);\\n   if (pathLen == 0)\\n@@ -366,6 +372,7 @@ nsresult SetExceptionHandler(nsILocalFile* aXREDirectory,\\n   tempPath.SetLength(pathLen);\\n   GetTempPath(pathLen, (LPWSTR)tempPath.BeginWriting());\\n #elif defined(XP_MACOSX)\\n+  nsCString tempPath;\\n   FSRef fsRef;\\n   OSErr err = FSFindFolder(kUserDomain, kTemporaryFolderType,\\n                            kCreateFolder, &fsRef);\\n@@ -376,19 +383,19 @@ nsresult SetExceptionHandler(nsILocalFile* aXREDirectory,\\n   OSStatus status = FSRefMakePath(&fsRef, (UInt8*)path, PATH_MAX);\\n   if (status != noErr)\\n     return NS_ERROR_FAILURE;\\n-  tempPath = NS_ConvertUTF8toUTF16(path);\\n+\\n+  tempPath = path;\\n \\n #elif defined(XP_UNIX)\\n   // we assume it's always /tmp on unix systems\\n-  tempPath = NS_LITERAL_STRING(\\\"/tmp/\\\");\\n+  nsCString tempPath = NS_LITERAL_CSTRING(\\\"/tmp/\\\");\\n #else\\n-  //XXX: implement get temp path on other platforms\\n-  return NS_ERROR_NOT_IMPLEMENTED;\\n+#error \\\"Implement this for your platform\\\"\\n #endif\\n \\n   // now set the exception handler\\n   gExceptionHandler = new google_breakpad::\\n-    ExceptionHandler(CONVERT_UTF16_TO_XP_CHAR(tempPath).get(),\\n+    ExceptionHandler(tempPath.get(),\\n                      nsnull,\\n                      MinidumpCallback,\\n                      nsnull,\\n@@ -429,12 +436,13 @@ nsresult SetMinidumpPath(const nsAString& aPath)\\n static nsresult\\n WriteDataToFile(nsIFile* aFile, const nsACString& data)\\n {\\n-  nsCAutoString filename;\\n-  nsresult rv = aFile->GetNativePath(filename);\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n+  nsCOMPtr<nsILocalFile> localFile = do_QueryInterface(aFile);\\n+  NS_ENSURE_TRUE(localFile, NS_ERROR_FAILURE);\\n \\n-  PRFileDesc* fd = PR_Open(filename.get(), PR_WRONLY | PR_CREATE_FILE, 00600);\\n-  NS_ENSURE_TRUE(fd, NS_ERROR_FAILURE);\\n+  PRFileDesc* fd;\\n+  nsresult rv = localFile->OpenNSPRFileDesc(PR_WRONLY | PR_CREATE_FILE, 00600,\\n+                                            &fd);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n   rv = NS_OK;\\n   if (PR_Write(fd, data.Data(), data.Length()) == -1) {\\n@@ -447,12 +455,12 @@ WriteDataToFile(nsIFile* aFile, const nsACString& data)\\n static nsresult\\n GetFileContents(nsIFile* aFile, nsACString& data)\\n {\\n-  nsCAutoString filename;\\n-  nsresult rv = aFile->GetNativePath(filename);\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n+  nsCOMPtr<nsILocalFile> localFile = do_QueryInterface(aFile);\\n+  NS_ENSURE_TRUE(localFile, NS_ERROR_FAILURE);\\n \\n-  PRFileDesc* fd = PR_Open(filename.get(), PR_RDONLY, 0);\\n-  NS_ENSURE_TRUE(fd, NS_ERROR_FILE_NOT_FOUND);\\n+  PRFileDesc* fd;\\n+  nsresult rv = localFile->OpenNSPRFileDesc(PR_RDONLY, 0, &fd);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n   rv = NS_OK;\\n   PRInt32 filesize = PR_Available(fd);\\n@@ -477,7 +485,7 @@ typedef nsresult (*InitDataFunc)(nsACString&);\\n // does not exist, create it and initialize its contents\\n // by calling aInitFunc for the data.\\n static nsresult \\n-GetOrInit(nsIFile* aDir, const nsAString& filename,\\n+GetOrInit(nsIFile* aDir, const nsACString& filename,\\n           nsACString& aContents, InitDataFunc aInitFunc)\\n {\\n   PRBool exists;\\n@@ -486,7 +494,7 @@ GetOrInit(nsIFile* aDir, const nsAString& filename,\\n   nsresult rv = aDir->Clone(getter_AddRefs(dataFile));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  rv = dataFile->Append(filename);\\n+  rv = dataFile->AppendNative(filename);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   rv = dataFile->Exists(&exists);\\n@@ -570,12 +578,11 @@ InitInstallTime(nsACString& aInstallTime)\\n nsresult SetupExtraData(nsILocalFile* aAppDataDirectory,\\n                         const nsACString& aBuildID)\\n {\\n-  \\n   nsCOMPtr<nsIFile> dataDirectory;\\n   nsresult rv = aAppDataDirectory->Clone(getter_AddRefs(dataDirectory));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  rv = dataDirectory->Append(NS_LITERAL_STRING(\\\"Crash Reports\\\"));\\n+  rv = dataDirectory->AppendNative(NS_LITERAL_CSTRING(\\\"Crash Reports\\\"));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   PRBool exists;\\n@@ -588,13 +595,12 @@ nsresult SetupExtraData(nsILocalFile* aAppDataDirectory,\\n   }\\n \\n   nsCAutoString data;\\n-  if(NS_SUCCEEDED(GetOrInit(dataDirectory, NS_LITERAL_STRING(\\\"UserID\\\"),\\n+  if(NS_SUCCEEDED(GetOrInit(dataDirectory, NS_LITERAL_CSTRING(\\\"UserID\\\"),\\n                             data, InitUserID)))\\n     AnnotateCrashReport(NS_LITERAL_CSTRING(\\\"UserID\\\"), data);\\n \\n   if(NS_SUCCEEDED(GetOrInit(dataDirectory,\\n-                            NS_LITERAL_STRING(\\\"InstallTime\\\") +\\n-                            NS_ConvertASCIItoUTF16(aBuildID),\\n+                            NS_LITERAL_CSTRING(\\\"InstallTime\\\") + aBuildID,\\n                             data, InitInstallTime)))\\n     AnnotateCrashReport(NS_LITERAL_CSTRING(\\\"InstallTime\\\"), data);\\n \\n@@ -603,10 +609,9 @@ nsresult SetupExtraData(nsILocalFile* aAppDataDirectory,\\n   // crash report with the stored value, since we really want\\n   // (now - LastCrash), so we just get a value if it exists,\\n   // and store it in a time_t value.\\n-  if(NS_SUCCEEDED(GetOrInit(dataDirectory, NS_LITERAL_STRING(\\\"LastCrash\\\"),\\n+  if(NS_SUCCEEDED(GetOrInit(dataDirectory, NS_LITERAL_CSTRING(\\\"LastCrash\\\"),\\n                             data, NULL))) {\\n     lastCrashTime = (time_t)atol(data.get());\\n-    \\n   }\\n \\n   // not really the best place to init this, but I have the path I need here\\n@@ -614,7 +619,7 @@ nsresult SetupExtraData(nsILocalFile* aAppDataDirectory,\\n   rv = dataDirectory->Clone(getter_AddRefs(lastCrashFile));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  rv = lastCrashFile->Append(NS_LITERAL_STRING(\\\"LastCrash\\\"));\\n+  rv = lastCrashFile->AppendNative(NS_LITERAL_CSTRING(\\\"LastCrash\\\"));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n   memset(lastCrashTimeFilename, 0, sizeof(lastCrashTimeFilename));\\n \\n\""}