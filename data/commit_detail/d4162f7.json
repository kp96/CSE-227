{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basd4162f7\""},"diff":"\"d4162f7 Bug 284225: Use right security context for xslt. r/sr=peterv\\ndiff --git a/content/xslt/src/xml/Makefile.in b/content/xslt/src/xml/Makefile.in\\nindex 9381572..2517b31 100644\\n--- a/content/xslt/src/xml/Makefile.in\\n+++ b/content/xslt/src/xml/Makefile.in\\n@@ -63,6 +63,7 @@ REQUIRES += \\\\\\n \\t\\t  unicharutil \\\\\\n \\t\\t  necko \\\\\\n \\t\\t  htmlparser \\\\\\n+\\t\\t  caps \\\\\\n \\t\\t  $(NULL)\\n else\\n REQUIRES += expat\\ndiff --git a/content/xslt/src/xml/txXMLParser.cpp b/content/xslt/src/xml/txXMLParser.cpp\\nindex 4e39fa9..f951d38 100644\\n--- a/content/xslt/src/xml/txXMLParser.cpp\\n+++ b/content/xslt/src/xml/txXMLParser.cpp\\n@@ -45,6 +45,7 @@\\n #include \\\"nsIDOMDocument.h\\\"\\n #include \\\"nsSyncLoadService.h\\\"\\n #include \\\"nsNetUtil.h\\\"\\n+#include \\\"nsIPrincipal.h\\\"\\n #else\\n #include \\\"expat_config.h\\\"\\n #include \\\"expat.h\\\"\\n@@ -98,8 +99,13 @@ txParseDocumentFromURI(const nsAString& aHref, const txXPathNode& aLoader,\\n     nsIDocument* loaderDocument = txXPathNativeNode::getDocument(aLoader);\\n \\n     nsCOMPtr<nsILoadGroup> loadGroup = loaderDocument->GetDocumentLoadGroup();\\n-    nsIURI *loaderUri = loaderDocument->GetDocumentURI();\\n-    NS_ENSURE_TRUE(loaderUri, NS_ERROR_FAILURE);\\n+\\n+    nsCOMPtr<nsIURI> loaderUri;\\n+    rv = loaderDocument->NodePrincipal()->GetURI(getter_AddRefs(loaderUri));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    // For the system principal loaderUri will be null here, which is good\\n+    // since that means that chrome documents can load any uri.\\n \\n     // Raw pointer, we want the resulting txXPathNode to hold a reference to\\n     // the document.\\ndiff --git a/content/xslt/src/xslt/txMozillaStylesheetCompiler.cpp b/content/xslt/src/xslt/txMozillaStylesheetCompiler.cpp\\nindex 0d83c96..cfb71cc 100644\\n--- a/content/xslt/src/xslt/txMozillaStylesheetCompiler.cpp\\n+++ b/content/xslt/src/xslt/txMozillaStylesheetCompiler.cpp\\n@@ -422,48 +422,16 @@ txStylesheetSink::GetInterface(const nsIID& aIID, void** aResult)\\n     return QueryInterface(aIID, aResult);\\n }\\n \\n-static nsresult\\n-CheckLoadURI(nsIURI *aUri, nsIURI *aReferrerUri,\\n-             nsIPrincipal *aReferrerPrincipal, nsISupports *aContext)\\n-{\\n-    // First do a security check.\\n-    nsresult rv;\\n-    nsCOMPtr<nsIScriptSecurityManager> securityManager = \\n-        do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-\\n-    rv = securityManager->\\n-        CheckLoadURIWithPrincipal(aReferrerPrincipal, aUri,\\n-                                  nsIScriptSecurityManager::STANDARD);\\n-    NS_ENSURE_SUCCESS(rv, NS_ERROR_XSLT_LOAD_BLOCKED_ERROR);\\n-\\n-    rv = securityManager->CheckSameOriginURI(aReferrerUri, aUri);\\n-    NS_ENSURE_SUCCESS(rv, NS_ERROR_XSLT_LOAD_BLOCKED_ERROR);\\n-\\n-    // Then do a content policy check.\\n-    PRInt16 decision = nsIContentPolicy::ACCEPT;\\n-    rv = NS_CheckContentLoadPolicy(nsIContentPolicy::TYPE_STYLESHEET,\\n-                                   aUri, aReferrerPrincipal, aContext,\\n-                                   NS_LITERAL_CSTRING(\\\"application/xml\\\"), nsnull,\\n-                                   &decision,\\n-                                   nsContentUtils::GetContentPolicy(),\\n-                                   nsContentUtils::GetSecurityManager());\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-\\n-    return NS_CP_REJECTED(decision) ? NS_ERROR_XSLT_LOAD_BLOCKED_ERROR : NS_OK;\\n-}\\n-\\n class txCompileObserver : public txACompileObserver\\n {\\n public:\\n     txCompileObserver(txMozillaXSLTProcessor* aProcessor,\\n-                      nsILoadGroup* aLoadGroup,\\n-                      nsIPrincipal* aCallerPrincipal);\\n+                      nsILoadGroup* aLoadGroup);\\n \\n     TX_DECL_ACOMPILEOBSERVER;\\n \\n     nsresult startLoad(nsIURI* aUri, txStylesheetCompiler* aCompiler,\\n-                       nsIURI* aReferrerURI);\\n+                       nsIPrincipal* aSourcePrincipal);\\n \\n protected:\\n     nsAutoRefCnt mRefCnt;\\n@@ -479,11 +447,9 @@ protected:\\n };\\n \\n txCompileObserver::txCompileObserver(txMozillaXSLTProcessor* aProcessor,\\n-                                     nsILoadGroup* aLoadGroup,\\n-                                     nsIPrincipal* aCallerPrincipal)\\n+                                     nsILoadGroup* aLoadGroup)\\n     : mProcessor(aProcessor),\\n-      mLoadGroup(aLoadGroup),\\n-      mCallerPrincipal(aCallerPrincipal)\\n+      mLoadGroup(aLoadGroup)\\n {\\n }\\n \\n@@ -521,11 +487,20 @@ txCompileObserver::loadURI(const nsAString& aUri,\\n     rv = NS_NewURI(getter_AddRefs(referrerUri), aReferrerUri);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n \\n+    nsCOMPtr<nsIPrincipal> referrerPrincipal;\\n+    rv = nsContentUtils::GetSecurityManager()->\\n+      GetCodebasePrincipal(referrerUri, getter_AddRefs(referrerPrincipal));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n     // Do security check.\\n-    rv = CheckLoadURI(uri, referrerUri, mCallerPrincipal, nsnull);\\n+    rv = nsContentUtils::\\n+      CheckSecurityBeforeLoad(uri, referrerPrincipal,\\n+                              nsIScriptSecurityManager::STANDARD, PR_FALSE,\\n+                              nsIContentPolicy::TYPE_STYLESHEET,\\n+                              nsnull, NS_LITERAL_CSTRING(\\\"application/xml\\\"));\\n     NS_ENSURE_SUCCESS(rv, rv);\\n \\n-    return startLoad(uri, aCompiler, referrerUri);\\n+    return startLoad(uri, aCompiler, referrerPrincipal);\\n }\\n \\n void\\n@@ -544,7 +519,7 @@ txCompileObserver::onDoneCompiling(txStylesheetCompiler* aCompiler,\\n \\n nsresult\\n txCompileObserver::startLoad(nsIURI* aUri, txStylesheetCompiler* aCompiler,\\n-                             nsIURI* aReferrerURI)\\n+                             nsIPrincipal* aReferrerPrincipal)\\n {\\n     nsCOMPtr<nsIChannel> channel;\\n     nsresult rv = NS_NewChannel(getter_AddRefs(channel), aUri);\\n@@ -560,8 +535,10 @@ txCompileObserver::startLoad(nsIURI* aUri, txStylesheetCompiler* aCompiler,\\n                                       NS_LITERAL_CSTRING(\\\"text/xml,application/xml,application/xhtml+xml,*/*;q=0.1\\\"),\\n                                       PR_FALSE);\\n \\n-        if (aReferrerURI) {\\n-            httpChannel->SetReferrer(aReferrerURI);\\n+        nsCOMPtr<nsIURI> referrerURI;\\n+        aReferrerPrincipal->GetURI(getter_AddRefs(referrerURI));\\n+        if (referrerURI) {\\n+            httpChannel->SetReferrer(referrerURI);\\n         }\\n     }\\n \\n@@ -588,24 +565,24 @@ TX_LoadSheet(nsIURI* aUri, txMozillaXSLTProcessor* aProcessor,\\n     aUri->GetSpec(spec);\\n     PR_LOG(txLog::xslt, PR_LOG_ALWAYS, (\\\"TX_LoadSheet: %s\\\\n\\\", spec.get()));\\n \\n-    nsCOMPtr<nsIURI> referrerURI;\\n-    aCallerPrincipal->GetURI(getter_AddRefs(referrerURI));\\n-    NS_ASSERTION(referrerURI, \\\"Caller principal must have a URI!\\\");\\n-\\n     // Pass source document as the context\\n-    nsresult rv = CheckLoadURI(aUri, referrerURI, aCallerPrincipal,\\n-                               aProcessor->GetSourceContentModel());\\n+    nsresult rv = nsContentUtils::\\n+      CheckSecurityBeforeLoad(aUri, aCallerPrincipal,\\n+                              nsIScriptSecurityManager::STANDARD, PR_FALSE,\\n+                              nsIContentPolicy::TYPE_STYLESHEET,\\n+                              aProcessor->GetSourceContentModel(),\\n+                              NS_LITERAL_CSTRING(\\\"application/xml\\\"));\\n     NS_ENSURE_SUCCESS(rv, rv);\\n \\n     nsRefPtr<txCompileObserver> observer =\\n-        new txCompileObserver(aProcessor, aLoadGroup, aCallerPrincipal);\\n+        new txCompileObserver(aProcessor, aLoadGroup);\\n     NS_ENSURE_TRUE(observer, NS_ERROR_OUT_OF_MEMORY);\\n \\n     nsRefPtr<txStylesheetCompiler> compiler =\\n         new txStylesheetCompiler(NS_ConvertUTF8toUTF16(spec), observer);\\n     NS_ENSURE_TRUE(compiler, NS_ERROR_OUT_OF_MEMORY);\\n \\n-    return observer->startLoad(aUri, compiler, referrerURI);\\n+    return observer->startLoad(aUri, compiler, aCallerPrincipal);\\n }\\n \\n /**\\n@@ -613,105 +590,88 @@ TX_LoadSheet(nsIURI* aUri, txMozillaXSLTProcessor* aProcessor,\\n  * Observer needs to do synchronous loads.\\n  */\\n static nsresult\\n-handleNode(nsIDOMNode* aNode, txStylesheetCompiler* aCompiler)\\n+handleNode(nsINode* aNode, txStylesheetCompiler* aCompiler)\\n {\\n     nsresult rv = NS_OK;\\n-    PRUint16 nodetype;\\n-    aNode->GetNodeType(&nodetype);\\n-    switch (nodetype) {\\n-        case nsIDOMNode::ELEMENT_NODE:\\n-        {\\n-            nsCOMPtr<nsIContent> element = do_QueryInterface(aNode);\\n-\\n-            PRUint32 attsCount = element->GetAttrCount();\\n-            nsAutoArrayPtr<txStylesheetAttr> atts;\\n-            if (attsCount > 0) {\\n-                atts = new txStylesheetAttr[attsCount];\\n-                NS_ENSURE_TRUE(atts, NS_ERROR_OUT_OF_MEMORY);\\n-\\n-                PRUint32 counter;\\n-                for (counter = 0; counter < attsCount; ++counter) {\\n-                    txStylesheetAttr& att = atts[counter];\\n-                    const nsAttrName* name = element->GetAttrNameAt(counter);\\n-                    att.mNamespaceID = name->NamespaceID();\\n-                    att.mLocalName = name->LocalName();\\n-                    att.mPrefix = name->GetPrefix();\\n-                    element->GetAttr(att.mNamespaceID, att.mLocalName, att.mValue);\\n-                }\\n-            }\\n-\\n-            nsINodeInfo *ni = element->NodeInfo();\\n-\\n-            rv = aCompiler->startElement(ni->NamespaceID(),\\n-                                         ni->NameAtom(),\\n-                                         ni->GetPrefixAtom(), atts,\\n-                                         attsCount);\\n-            NS_ENSURE_SUCCESS(rv, rv);\\n-\\n-            // explicitly destroy the attrs here since we no longer need it\\n-            atts = nsnull;\\n-\\n-            PRUint32 childCount = element->GetChildCount();\\n-            if (childCount > 0) {\\n-                PRUint32 counter = 0;\\n-                nsIContent *child;\\n-                while ((child = element->GetChildAt(counter++))) {\\n-                    nsCOMPtr<nsIDOMNode> childNode = do_QueryInterface(child);\\n-                    rv = handleNode(childNode, aCompiler);\\n-                    NS_ENSURE_SUCCESS(rv, rv);\\n-                }\\n+    \\n+    if (aNode->IsNodeOfType(nsINode::eELEMENT)) {\\n+        nsIContent* element = static_cast<nsIContent*>(aNode);\\n+\\n+        PRUint32 attsCount = element->GetAttrCount();\\n+        nsAutoArrayPtr<txStylesheetAttr> atts;\\n+        if (attsCount > 0) {\\n+            atts = new txStylesheetAttr[attsCount];\\n+            NS_ENSURE_TRUE(atts, NS_ERROR_OUT_OF_MEMORY);\\n+\\n+            PRUint32 counter;\\n+            for (counter = 0; counter < attsCount; ++counter) {\\n+                txStylesheetAttr& att = atts[counter];\\n+                const nsAttrName* name = element->GetAttrNameAt(counter);\\n+                att.mNamespaceID = name->NamespaceID();\\n+                att.mLocalName = name->LocalName();\\n+                att.mPrefix = name->GetPrefix();\\n+                element->GetAttr(att.mNamespaceID, att.mLocalName, att.mValue);\\n             }\\n+        }\\n \\n-            rv = aCompiler->endElement();\\n-            NS_ENSURE_SUCCESS(rv, rv);\\n+        nsINodeInfo *ni = element->NodeInfo();\\n \\n-            break;\\n-        }\\n-        case nsIDOMNode::CDATA_SECTION_NODE:\\n-        case nsIDOMNode::TEXT_NODE:\\n-        {\\n-            nsAutoString chars;\\n-            aNode->GetNodeValue(chars);\\n-            rv = aCompiler->characters(chars);\\n-            NS_ENSURE_SUCCESS(rv, rv);\\n+        rv = aCompiler->startElement(ni->NamespaceID(),\\n+                                     ni->NameAtom(),\\n+                                     ni->GetPrefixAtom(), atts,\\n+                                     attsCount);\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n \\n-            break;\\n-        }\\n-        case nsIDOMNode::DOCUMENT_NODE:\\n-        {\\n-            nsCOMPtr<nsIDocument> document = do_QueryInterface(aNode);\\n+        // explicitly destroy the attrs here since we no longer need it\\n+        atts = nsnull;\\n \\n+        PRUint32 childCount = element->GetChildCount();\\n+        if (childCount > 0) {\\n             PRUint32 counter = 0;\\n             nsIContent *child;\\n-            while ((child = document->GetChildAt(counter++))) {\\n-                nsCOMPtr<nsIDOMNode> childNode = do_QueryInterface(child);\\n-                rv = handleNode(childNode, aCompiler);\\n+            while ((child = element->GetChildAt(counter++))) {\\n+                rv = handleNode(child, aCompiler);\\n                 NS_ENSURE_SUCCESS(rv, rv);\\n             }\\n-            break;\\n+        }\\n+\\n+        rv = aCompiler->endElement();\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+    }\\n+    else if (aNode->IsNodeOfType(nsINode::eTEXT)) {\\n+        nsAutoString chars;\\n+        static_cast<nsIContent*>(aNode)->AppendTextTo(chars);\\n+        rv = aCompiler->characters(chars);\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+    }\\n+    else if (aNode->IsNodeOfType(nsINode::eDOCUMENT)) {\\n+        nsIDocument* document = static_cast<nsIDocument*>(aNode);\\n+\\n+        PRUint32 counter = 0;\\n+        nsIContent *child;\\n+        while ((child = document->GetChildAt(counter++))) {\\n+            rv = handleNode(child, aCompiler);\\n+            NS_ENSURE_SUCCESS(rv, rv);\\n         }\\n     }\\n+\\n     return NS_OK;\\n }\\n \\n class txSyncCompileObserver : public txACompileObserver\\n {\\n public:\\n-    txSyncCompileObserver(txMozillaXSLTProcessor* aProcessor,\\n-                          nsIPrincipal* aCallerPrincipal);\\n+    txSyncCompileObserver(txMozillaXSLTProcessor* aProcessor);\\n \\n     TX_DECL_ACOMPILEOBSERVER;\\n \\n protected:\\n     nsRefPtr<txMozillaXSLTProcessor> mProcessor;\\n-    nsCOMPtr<nsIPrincipal> mCallerPrincipal;\\n     nsAutoRefCnt mRefCnt;\\n };\\n \\n-txSyncCompileObserver::txSyncCompileObserver(txMozillaXSLTProcessor* aProcessor,\\n-                                            nsIPrincipal* aCallerPrincipal)\\n-  : mProcessor(aProcessor),\\n-    mCallerPrincipal(aCallerPrincipal)\\n+txSyncCompileObserver::txSyncCompileObserver(txMozillaXSLTProcessor* aProcessor)\\n+  : mProcessor(aProcessor)\\n {\\n }\\n \\n@@ -749,7 +709,16 @@ txSyncCompileObserver::loadURI(const nsAString& aUri,\\n     rv = NS_NewURI(getter_AddRefs(referrerUri), aReferrerUri);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n \\n-    rv = CheckLoadURI(uri, referrerUri, mCallerPrincipal, nsnull);\\n+    nsCOMPtr<nsIPrincipal> referrerPrincipal;\\n+    rv = nsContentUtils::GetSecurityManager()->\\n+      GetCodebasePrincipal(referrerUri, getter_AddRefs(referrerPrincipal));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    rv = nsContentUtils::\\n+      CheckSecurityBeforeLoad(uri, referrerPrincipal,\\n+                              nsIScriptSecurityManager::STANDARD,\\n+                              PR_FALSE, nsIContentPolicy::TYPE_STYLESHEET,\\n+                              nsnull, NS_LITERAL_CSTRING(\\\"application/xml\\\"));\\n     NS_ENSURE_SUCCESS(rv, rv);\\n \\n     // This is probably called by js, a loadGroup for the channel doesn't\\n@@ -758,7 +727,9 @@ txSyncCompileObserver::loadURI(const nsAString& aUri,\\n     rv = nsSyncLoadService::LoadDocument(uri, referrerUri, nsnull, PR_FALSE,\\n                                          getter_AddRefs(document));\\n     NS_ENSURE_SUCCESS(rv, rv);\\n-    rv = handleNode(document, aCompiler);\\n+\\n+    nsCOMPtr<nsIDocument> doc = do_QueryInterface(document);\\n+    rv = handleNode(doc, aCompiler);\\n     if (NS_FAILED(rv)) {\\n         nsCAutoString spec;\\n         uri->GetSpec(spec);\\n@@ -778,27 +749,22 @@ void txSyncCompileObserver::onDoneCompiling(txStylesheetCompiler* aCompiler,\\n }\\n \\n nsresult\\n-TX_CompileStylesheet(nsIDOMNode* aNode, txMozillaXSLTProcessor* aProcessor,\\n+TX_CompileStylesheet(nsINode* aNode, txMozillaXSLTProcessor* aProcessor,\\n                      nsIPrincipal* aCallerPrincipal,\\n                      txStylesheet** aStylesheet)\\n {\\n     // If we move GetBaseURI to nsINode this can be simplified.\\n-    nsCOMPtr<nsIURI> uri;\\n-    nsCOMPtr<nsIDocument> doc;\\n-    nsCOMPtr<nsIContent> cont = do_QueryInterface(aNode);\\n-    if (cont) {\\n-        doc = cont->GetOwnerDoc();\\n-        NS_ENSURE_TRUE(doc, NS_ERROR_FAILURE);\\n+    nsCOMPtr<nsIDocument> doc = aNode->GetOwnerDoc();\\n+    NS_ENSURE_TRUE(doc, NS_ERROR_FAILURE);\\n \\n-        uri = cont->GetBaseURI();\\n+    nsCOMPtr<nsIURI> uri;\\n+    if (aNode->IsNodeOfType(nsINode::eCONTENT)) {\\n+      uri = static_cast<nsIContent*>(aNode)->GetBaseURI();\\n     }\\n-    else {\\n-        doc = do_QueryInterface(aNode);\\n-        NS_ASSERTION(doc, \\\"aNode should be a doc or an element by now\\\");\\n-\\n-        uri = doc->GetBaseURI();\\n+    else { \\n+      NS_ASSERTION(aNode->IsNodeOfType(nsINode::eDOCUMENT), \\\"not a doc\\\");\\n+      uri = static_cast<nsIDocument*>(aNode)->GetBaseURI();\\n     }\\n-\\n     NS_ENSURE_TRUE(uri, NS_ERROR_FAILURE);\\n     \\n     nsCAutoString spec;\\n@@ -812,7 +778,7 @@ TX_CompileStylesheet(nsIDOMNode* aNode, txMozillaXSLTProcessor* aProcessor,\\n     NS_ConvertUTF8toUTF16 stylesheetURI(spec);\\n \\n     nsRefPtr<txSyncCompileObserver> obs =\\n-        new txSyncCompileObserver(aProcessor, aCallerPrincipal);\\n+        new txSyncCompileObserver(aProcessor);\\n     NS_ENSURE_TRUE(obs, NS_ERROR_OUT_OF_MEMORY);\\n \\n     nsRefPtr<txStylesheetCompiler> compiler =\\ndiff --git a/content/xslt/src/xslt/txMozillaXSLTProcessor.cpp b/content/xslt/src/xslt/txMozillaXSLTProcessor.cpp\\nindex 47e53a9..5c59d63 100644\\n--- a/content/xslt/src/xslt/txMozillaXSLTProcessor.cpp\\n+++ b/content/xslt/src/xslt/txMozillaXSLTProcessor.cpp\\n@@ -338,7 +338,8 @@ txMozillaXSLTProcessor::TransformDocument(nsIDOMNode* aSourceDOM,\\n                    type == nsIDOMNode::DOCUMENT_NODE,\\n                    NS_ERROR_INVALID_ARG);\\n \\n-    nsresult rv = TX_CompileStylesheet(aStyleDOM, this, mPrincipal,\\n+    nsCOMPtr<nsINode> styleNode = do_QueryInterface(aStyleDOM);\\n+    nsresult rv = TX_CompileStylesheet(styleNode, this, mPrincipal,\\n                                        getter_AddRefs(mStylesheet));\\n     NS_ENSURE_SUCCESS(rv, rv);\\n \\n@@ -586,29 +587,25 @@ txMozillaXSLTProcessor::ImportStylesheet(nsIDOMNode *aStyle)\\n         return NS_ERROR_DOM_SECURITY_ERR;\\n     }\\n     \\n-    PRUint16 type = 0;\\n-    aStyle->GetNodeType(&type);\\n-    NS_ENSURE_TRUE(type == nsIDOMNode::ELEMENT_NODE ||\\n-                   type == nsIDOMNode::DOCUMENT_NODE,\\n+    nsCOMPtr<nsINode> styleNode = do_QueryInterface(aStyle);\\n+    NS_ENSURE_TRUE(styleNode &&\\n+                   (styleNode->IsNodeOfType(nsINode::eELEMENT) ||\\n+                    styleNode->IsNodeOfType(nsINode::eDOCUMENT)),\\n                    NS_ERROR_INVALID_ARG);\\n \\n-    nsresult rv = TX_CompileStylesheet(aStyle, this, mPrincipal,\\n+    nsresult rv = TX_CompileStylesheet(styleNode, this, mPrincipal,\\n                                        getter_AddRefs(mStylesheet));\\n     // XXX set up exception context, bug 204658\\n     NS_ENSURE_SUCCESS(rv, rv);\\n \\n-    if (type == nsIDOMNode::ELEMENT_NODE) {\\n-        nsCOMPtr<nsIDOMDocument> domDoc;\\n-        aStyle->GetOwnerDocument(getter_AddRefs(domDoc));\\n-        NS_ENSURE_TRUE(domDoc, NS_ERROR_UNEXPECTED);\\n+    if (styleNode->IsNodeOfType(nsINode::eELEMENT)) {\\n+        mStylesheetDocument = styleNode->GetOwnerDoc();\\n+        NS_ENSURE_TRUE(mStylesheetDocument, NS_ERROR_UNEXPECTED);\\n \\n-        nsCOMPtr<nsIDocument> styleDoc = do_QueryInterface(domDoc);\\n-        mStylesheetDocument = styleDoc;\\n-        mEmbeddedStylesheetRoot = do_QueryInterface(aStyle);\\n+        mEmbeddedStylesheetRoot = static_cast<nsIContent*>(styleNode.get());\\n     }\\n     else {\\n-        nsCOMPtr<nsIDocument> styleDoc = do_QueryInterface(aStyle);\\n-        mStylesheetDocument = styleDoc;\\n+        mStylesheetDocument = static_cast<nsIDocument*>(styleNode.get());\\n     }\\n \\n     mStylesheetDocument->AddMutationObserver(this);\\n@@ -1173,10 +1170,11 @@ txMozillaXSLTProcessor::ensureStylesheet()\\n \\n     NS_ENSURE_TRUE(mStylesheetDocument, NS_ERROR_NOT_INITIALIZED);\\n \\n-    nsCOMPtr<nsIDOMNode> style = do_QueryInterface(mEmbeddedStylesheetRoot);\\n+    nsINode* style = mEmbeddedStylesheetRoot;\\n     if (!style) {\\n-        style = do_QueryInterface(mStylesheetDocument);\\n+        style = mStylesheetDocument;\\n     }\\n+\\n     return TX_CompileStylesheet(style, this, mPrincipal,\\n                                 getter_AddRefs(mStylesheet));\\n }\\ndiff --git a/content/xslt/src/xslt/txMozillaXSLTProcessor.h b/content/xslt/src/xslt/txMozillaXSLTProcessor.h\\nindex 8b4bd60..7dbd225 100644\\n--- a/content/xslt/src/xslt/txMozillaXSLTProcessor.h\\n+++ b/content/xslt/src/xslt/txMozillaXSLTProcessor.h\\n@@ -171,7 +171,7 @@ extern nsresult TX_LoadSheet(nsIURI* aUri, txMozillaXSLTProcessor* aProcessor,\\n                              nsILoadGroup* aLoadGroup,\\n                              nsIPrincipal* aCallerPrincipal);\\n \\n-extern nsresult TX_CompileStylesheet(nsIDOMNode* aNode,\\n+extern nsresult TX_CompileStylesheet(nsINode* aNode,\\n                                      txMozillaXSLTProcessor* aProcessor,\\n                                      nsIPrincipal* aCallerPrincipal,\\n                                      txStylesheet** aStylesheet);\\n\""}