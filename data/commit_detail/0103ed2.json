{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0103ed2\""},"diff":"\"0103ed2 Bug 391617 - CAccessibleText::scroll* methods are incorrect, r=aaronlev, a=dsicore\\ndiff --git a/accessible/public/nsIAccessibleText.idl b/accessible/public/nsIAccessibleText.idl\\nindex 89024a1..af11371 100644\\n--- a/accessible/public/nsIAccessibleText.idl\\n+++ b/accessible/public/nsIAccessibleText.idl\\n@@ -45,7 +45,7 @@ typedef long nsAccessibleTextBoundary;\\n \\n interface nsIAccessible;\\n \\n-[scriptable, uuid(948419b2-53f6-4a74-bb69-1345faf3e8e8)]\\n+[scriptable, uuid(caa4f543-070e-4705-8428-2e53575c41bb)]\\n interface nsIAccessibleText : nsISupports\\n {\\n   const nsAccessibleTextBoundary BOUNDARY_CHAR = 0;\\n@@ -180,15 +180,31 @@ interface nsIAccessibleText : nsISupports\\n   /**\\n    * Makes a specific part of string visible on screen.\\n    *\\n-   * @param aStartIndex - 0-based character offset.\\n-   * @param aEndIndex - 0-based character offset - the offset of the\\n-   *                        character just past the last character of the\\n-   *                        string.\\n-   * @param aScrollType - defines how to scroll (see nsIAccessibleScrollType for\\n-   *                      available constants).\\n+   * @param startIndex  0-based character offset\\n+   * @param endIndex    0-based character offset - the offset of the\\n+   *                    character just past the last character of the\\n+   *                    string\\n+   * @param scrollType  defines how to scroll (see nsIAccessibleScrollType for\\n+   *                    available constants)\\n    */\\n-  void scrollSubstringTo(in long aStartIndex, in long aEndIndex,\\n-                         in unsigned long aScrollType);\\n+  void scrollSubstringTo(in long startIndex, in long endIndex,\\n+                         in unsigned long scrollType);\\n+\\n+  /**\\n+   * Moves the top left of a substring to a specified location.\\n+   *\\n+   * @param startIndex      0-based character offset\\n+   * @param endIndex        0-based character offset - the offset of the\\n+   *                        character just past the last character of\\n+   *                        the string\\n+   * @param coordinateType  specifies the coordinates origin (for available\\n+   *                        constants refer to nsIAccessibleCoordinateType)\\n+   * @param x               defines the x coordinate\\n+   * @param y               defines the y coordinate\\n+   */\\n+  void scrollSubstringToPoint(in long startIndex, in long endIndex,\\n+                              in unsigned long coordinateType,\\n+                              in long x, in long y);\\n };\\n \\n /*\\ndiff --git a/accessible/public/nsIAccessibleTypes.idl b/accessible/public/nsIAccessibleTypes.idl\\nindex 0ea7825..8bec471 100755\\n--- a/accessible/public/nsIAccessibleTypes.idl\\n+++ b/accessible/public/nsIAccessibleTypes.idl\\n@@ -90,8 +90,7 @@ interface nsIAccessibleScrollType : nsISupports\\n \\n \\n /**\\n- * These constants define which coordinate system a point is located in. Note,\\n- * keep them synchronized with IA2CoordinateType.\\n+ * These constants define which coordinate system a point is located in.\\n  */\\n [scriptable, uuid(c9fbdf10-619e-436f-bf4b-8566686f1577)]\\n interface nsIAccessibleCoordinateType : nsISupports\\ndiff --git a/accessible/src/base/nsAccessNode.cpp b/accessible/src/base/nsAccessNode.cpp\\nindex 8ddea6d..38cf7de 100755\\n--- a/accessible/src/base/nsAccessNode.cpp\\n+++ b/accessible/src/base/nsAccessNode.cpp\\n@@ -61,7 +61,6 @@\\n #include \\\"nsPIDOMWindow.h\\\"\\n #include \\\"nsIInterfaceRequestorUtils.h\\\"\\n #include \\\"nsIFrame.h\\\"\\n-#include \\\"nsIScrollableFrame.h\\\"\\n #include \\\"nsIPrefService.h\\\"\\n #include \\\"nsIPrefBranch.h\\\"\\n #include \\\"nsPresContext.h\\\"\\n@@ -441,71 +440,14 @@ nsAccessNode::ScrollToPoint(PRUint32 aCoordinateType, PRInt32 aX, PRInt32 aY)\\n   if (!frame)\\n     return NS_ERROR_FAILURE;\\n \\n-  nsPresContext *presContext = frame->PresContext();\\n-\\n-  switch (aCoordinateType) {\\n-    case nsIAccessibleCoordinateType::COORDTYPE_SCREEN_RELATIVE:\\n-      break;\\n-\\n-    case nsIAccessibleCoordinateType::COORDTYPE_WINDOW_RELATIVE:\\n-    {\\n-      nsIntPoint wndCoords = nsAccUtils::GetScreenCoordsForWindow(mDOMNode);\\n-      aX += wndCoords.x;\\n-      aY += wndCoords.y;\\n-      break;\\n-    }\\n-\\n-    case nsIAccessibleCoordinateType::COORDTYPE_PARENT_RELATIVE:\\n-    {\\n-      nsCOMPtr<nsPIAccessNode> parent;\\n-\\n-      nsCOMPtr<nsIAccessible> accessible;\\n-      nsresult rv = QueryInterface(NS_GET_IID(nsIAccessible),\\n-                                   getter_AddRefs(accessible));\\n-      if (NS_SUCCEEDED(rv) && accessible) {\\n-        nsCOMPtr<nsIAccessible> parentAccessible;\\n-        accessible->GetParent(getter_AddRefs(parentAccessible));\\n-        parent = do_QueryInterface(parentAccessible);\\n-      } else {\\n-        nsCOMPtr<nsIAccessNode> parentAccessNode;\\n-        GetParentNode(getter_AddRefs(parentAccessNode));\\n-        parent = do_QueryInterface(parentAccessNode);\\n-      }\\n-\\n-      NS_ENSURE_STATE(parent);\\n-      nsIFrame *parentFrame = parent->GetFrame();\\n-      NS_ENSURE_STATE(parentFrame);\\n-\\n-      nsIntRect parentRect = parentFrame->GetScreenRectExternal();\\n-      aX += parentRect.x;\\n-      aY += parentRect.y;\\n-      break;\\n-    }\\n-\\n-    default:\\n-      return NS_ERROR_INVALID_ARG;\\n-  }\\n+  nsIntPoint coords;\\n+  nsresult rv = nsAccUtils::ConvertToScreenCoords(aX, aY, aCoordinateType,\\n+                                                  this, &coords);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n   nsIFrame *parentFrame = frame;\\n-  while (parentFrame = parentFrame->GetParent()) {\\n-    nsIScrollableFrame *scrollableFrame = nsnull;\\n-    CallQueryInterface(parentFrame, &scrollableFrame);\\n-    if (scrollableFrame) {\\n-      nsIntRect frameRect = frame->GetScreenRectExternal();\\n-      PRInt32 devDeltaX = aX - frameRect.x;\\n-      PRInt32 devDeltaY = aY - frameRect.y;\\n-\\n-      nsPoint deltaPoint;\\n-      deltaPoint.x = presContext->DevPixelsToAppUnits(devDeltaX);\\n-      deltaPoint.y = presContext->DevPixelsToAppUnits(devDeltaY);\\n-\\n-      nsPoint scrollPoint = scrollableFrame->GetScrollPosition();\\n-\\n-      scrollPoint -= deltaPoint;\\n-\\n-      scrollableFrame->ScrollTo(scrollPoint);\\n-    }\\n-  }\\n+  while (parentFrame = parentFrame->GetParent())\\n+    nsAccUtils::ScrollFrameToPoint(parentFrame, frame, coords);\\n \\n   return NS_OK;\\n }\\ndiff --git a/accessible/src/base/nsAccessibilityUtils.cpp b/accessible/src/base/nsAccessibilityUtils.cpp\\nindex 1ea8875..fd4806a 100755\\n--- a/accessible/src/base/nsAccessibilityUtils.cpp\\n+++ b/accessible/src/base/nsAccessibilityUtils.cpp\\n@@ -40,6 +40,7 @@\\n \\n #include \\\"nsIAccessibleTypes.h\\\"\\n #include \\\"nsPIAccessible.h\\\"\\n+#include \\\"nsPIAccessNode.h\\\"\\n #include \\\"nsAccessibleEventData.h\\\"\\n \\n #include \\\"nsAccessNode.h\\\"\\n@@ -57,6 +58,7 @@\\n #include \\\"nsIEventListenerManager.h\\\"\\n #include \\\"nsIPresShell.h\\\"\\n #include \\\"nsPresContext.h\\\"\\n+#include \\\"nsIScrollableFrame.h\\\"\\n #include \\\"nsIEventStateManager.h\\\"\\n #include \\\"nsISelection2.h\\\"\\n #include \\\"nsISelectionController.h\\\"\\n@@ -287,6 +289,19 @@ nsAccUtils::ScrollSubstringTo(nsIFrame *aFrame,\\n                               nsIDOMNode *aEndNode, PRInt32 aEndIndex,\\n                               PRUint32 aScrollType)\\n {\\n+  PRInt16 vPercent, hPercent;\\n+  ConvertScrollTypeToPercents(aScrollType, &vPercent, &hPercent);\\n+\\n+  return ScrollSubstringTo(aFrame, aStartNode, aStartIndex, aEndNode, aEndIndex,\\n+                           vPercent, hPercent);\\n+}\\n+\\n+nsresult\\n+nsAccUtils::ScrollSubstringTo(nsIFrame *aFrame,\\n+                              nsIDOMNode *aStartNode, PRInt32 aStartIndex,\\n+                              nsIDOMNode *aEndNode, PRInt32 aEndIndex,\\n+                              PRInt16 aVPercent, PRInt16 aHPercent)\\n+{\\n   if (!aFrame || !aStartNode || !aEndNode)\\n     return NS_ERROR_FAILURE;\\n \\n@@ -311,10 +326,8 @@ nsAccUtils::ScrollSubstringTo(nsIFrame *aFrame,\\n     selection->RemoveAllRanges();\\n     selection->AddRange(scrollToRange);\\n \\n-    PRInt16 vPercent, hPercent;\\n-    ConvertScrollTypeToPercents(aScrollType, &vPercent, &hPercent);\\n     selection->ScrollIntoView(nsISelectionController::SELECTION_ANCHOR_REGION,\\n-                              PR_TRUE, vPercent, hPercent);\\n+                              PR_TRUE, aVPercent, aHPercent);\\n \\n     selection->CollapseToStart();\\n   }\\n@@ -323,6 +336,32 @@ nsAccUtils::ScrollSubstringTo(nsIFrame *aFrame,\\n }\\n \\n void\\n+nsAccUtils::ScrollFrameToPoint(nsIFrame *aScrollableFrame,\\n+                               nsIFrame *aFrame,\\n+                               const nsIntPoint& aPoint)\\n+{\\n+  nsIScrollableFrame *scrollableFrame = nsnull;\\n+  CallQueryInterface(aScrollableFrame, &scrollableFrame);\\n+  if (!scrollableFrame)\\n+    return;\\n+\\n+  nsPresContext *presContext = aFrame->PresContext();\\n+\\n+  nsIntRect frameRect = aFrame->GetScreenRectExternal();\\n+  PRInt32 devDeltaX = aPoint.x - frameRect.x;\\n+  PRInt32 devDeltaY = aPoint.y - frameRect.y;\\n+\\n+  nsPoint deltaPoint;\\n+  deltaPoint.x = presContext->DevPixelsToAppUnits(devDeltaX);\\n+  deltaPoint.y = presContext->DevPixelsToAppUnits(devDeltaY);\\n+\\n+  nsPoint scrollPoint = scrollableFrame->GetScrollPosition();\\n+  scrollPoint -= deltaPoint;\\n+\\n+  scrollableFrame->ScrollTo(scrollPoint);\\n+}\\n+\\n+void\\n nsAccUtils::ConvertScrollTypeToPercents(PRUint32 aScrollType,\\n                                         PRInt16 *aVPercent,\\n                                         PRInt16 *aHPercent)\\n@@ -359,6 +398,67 @@ nsAccUtils::ConvertScrollTypeToPercents(PRUint32 aScrollType,\\n   }\\n }\\n \\n+nsresult\\n+nsAccUtils::ConvertToScreenCoords(PRInt32 aX, PRInt32 aY,\\n+                                  PRUint32 aCoordinateType,\\n+                                  nsIAccessNode *aAccessNode,\\n+                                  nsIntPoint *aCoords)\\n+{\\n+  NS_ENSURE_ARG_POINTER(aCoords);\\n+\\n+  aCoords->MoveTo(aX, aY);\\n+\\n+  switch (aCoordinateType) {\\n+    case nsIAccessibleCoordinateType::COORDTYPE_SCREEN_RELATIVE:\\n+      break;\\n+\\n+    case nsIAccessibleCoordinateType::COORDTYPE_WINDOW_RELATIVE:\\n+    {\\n+      NS_ENSURE_ARG(aAccessNode);\\n+\\n+      nsCOMPtr<nsIDOMNode> DOMNode;\\n+      aAccessNode->GetDOMNode(getter_AddRefs(DOMNode));\\n+      NS_ENSURE_STATE(DOMNode);\\n+\\n+      nsIntPoint wndCoords = nsAccUtils::GetScreenCoordsForWindow(DOMNode);\\n+      *aCoords += wndCoords;\\n+      break;\\n+    }\\n+\\n+    case nsIAccessibleCoordinateType::COORDTYPE_PARENT_RELATIVE:\\n+    {\\n+      NS_ENSURE_ARG(aAccessNode);\\n+\\n+      nsCOMPtr<nsPIAccessNode> parent;\\n+      nsCOMPtr<nsIAccessible> accessible(do_QueryInterface(aAccessNode));\\n+      if (accessible) {\\n+        nsCOMPtr<nsIAccessible> parentAccessible;\\n+        accessible->GetParent(getter_AddRefs(parentAccessible));\\n+        parent = do_QueryInterface(parentAccessible);\\n+      } else {\\n+        nsCOMPtr<nsIAccessNode> parentAccessNode;\\n+        aAccessNode->GetParentNode(getter_AddRefs(parentAccessNode));\\n+        parent = do_QueryInterface(parentAccessNode);\\n+      }\\n+\\n+      NS_ENSURE_STATE(parent);\\n+\\n+      nsIFrame *parentFrame = parent->GetFrame();\\n+      NS_ENSURE_STATE(parentFrame);\\n+\\n+      nsIntRect parentRect = parentFrame->GetScreenRectExternal();\\n+      aCoords->x += parentRect.x;\\n+      aCoords->y += parentRect.y;\\n+      break;\\n+    }\\n+\\n+    default:\\n+      return NS_ERROR_INVALID_ARG;\\n+  }\\n+\\n+  return NS_OK;\\n+}\\n+\\n nsIntPoint\\n nsAccUtils::GetScreenCoordsForWindow(nsIDOMNode *aNode)\\n {\\ndiff --git a/accessible/src/base/nsAccessibilityUtils.h b/accessible/src/base/nsAccessibilityUtils.h\\nindex fc6454c..e6da866 100755\\n--- a/accessible/src/base/nsAccessibilityUtils.h\\n+++ b/accessible/src/base/nsAccessibilityUtils.h\\n@@ -41,6 +41,7 @@\\n \\n #include \\\"nsAccessibilityAtoms.h\\\"\\n #include \\\"nsIAccessible.h\\\"\\n+#include \\\"nsIAccessNode.h\\\"\\n #include \\\"nsARIAMap.h\\\"\\n \\n #include \\\"nsIDOMNode.h\\\"\\n@@ -162,6 +163,33 @@ public:\\n                                     nsIDOMNode *aEndNode, PRInt32 aEndIndex,\\n                                     PRUint32 aScrollType);\\n \\n+  /** Helper method to scroll range into view, used for implementation of\\n+   * nsIAccessibleText::scrollSubstringTo[Point]().\\n+   *\\n+   * @param aFrame        the frame for accessible the range belongs to.\\n+   * @param aStartNode    start node of a range\\n+   * @param aStartOffset  an offset inside the start node\\n+   * @param aEndNode      end node of a range\\n+   * @param aEndOffset    an offset inside the end node\\n+   * @param aVPercent     how to align vertically, specified in percents\\n+   * @param aHPercent     how to align horizontally, specified in percents\\n+   */\\n+  static nsresult ScrollSubstringTo(nsIFrame *aFrame,\\n+                                    nsIDOMNode *aStartNode, PRInt32 aStartIndex,\\n+                                    nsIDOMNode *aEndNode, PRInt32 aEndIndex,\\n+                                    PRInt16 aVPercent, PRInt16 aHPercent);\\n+\\n+  /**\\n+   * Scrolls the given frame to the point, used for implememntation of\\n+   * nsIAccessNode::scrollToPoint and nsIAccessibleText::scrollSubstringToPoint.\\n+   *\\n+   * @param aScrollableFrame  the scrollable frame\\n+   * @param aFrame            the frame to scroll\\n+   * @param aPoint            the point scroll to\\n+   */\\n+  static void ScrollFrameToPoint(nsIFrame *aScrollableFrame,\\n+                                 nsIFrame *aFrame, const nsIntPoint& aPoint);\\n+\\n   /**\\n    * Converts scroll type constant defined in nsIAccessibleScrollType to\\n    * vertical and horizontal percents.\\n@@ -171,6 +199,22 @@ public:\\n                                           PRInt16 *aHPercent);\\n \\n   /**\\n+   * Converts the given coordinates to coordinates relative screen.\\n+   *\\n+   * @param aX               [in] the given x coord\\n+   * @param aY               [in] the given y coord\\n+   * @param aCoordinateType  [in] specifies coordinates origin (refer to\\n+   *                         nsIAccessibleCoordinateType)\\n+   * @param aAccessNode      [in] the accessible if coordinates are given\\n+   *                         relative it.\\n+   * @param aCoords          [out] converted coordinates\\n+   */\\n+  static nsresult ConvertToScreenCoords(PRInt32 aX, PRInt32 aY,\\n+                                        PRUint32 aCoordinateType,\\n+                                        nsIAccessNode *aAccessNode,\\n+                                        nsIntPoint *aCoords);\\n+\\n+  /**\\n    * Returns coordinates relative screen for the top level window.\\n    *\\n    * @param - aNode - the DOM node hosted in the window.\\ndiff --git a/accessible/src/html/Makefile.in b/accessible/src/html/Makefile.in\\nindex e717f00..77fc2e5 100644\\n--- a/accessible/src/html/Makefile.in\\n+++ b/accessible/src/html/Makefile.in\\n@@ -61,6 +61,7 @@ REQUIRES\\t= composer \\\\\\n \\t\\t  necko \\\\\\n \\t\\t  string \\\\\\n \\t\\t  thebes \\\\\\n+\\t\\t  view \\\\\\n \\t\\t  webshell \\\\\\n \\t\\t  widget \\\\\\n \\t\\t  xpcom \\\\\\ndiff --git a/accessible/src/html/nsHyperTextAccessible.cpp b/accessible/src/html/nsHyperTextAccessible.cpp\\nindex 98b2b17..49e146d 100644\\n--- a/accessible/src/html/nsHyperTextAccessible.cpp\\n+++ b/accessible/src/html/nsHyperTextAccessible.cpp\\n@@ -56,6 +56,7 @@\\n #include \\\"nsIEditor.h\\\"\\n #include \\\"nsIFontMetrics.h\\\"\\n #include \\\"nsIFrame.h\\\"\\n+#include \\\"nsIScrollableFrame.h\\\"\\n #include \\\"nsIInterfaceRequestorUtils.h\\\"\\n #include \\\"nsIPlaintextEditor.h\\\"\\n #include \\\"nsISelection2.h\\\"\\n@@ -665,6 +666,59 @@ nsresult nsHyperTextAccessible::DOMPointToHypertextOffset(nsIDOMNode* aNode, PRI\\n   return NS_OK;\\n }\\n \\n+nsresult\\n+nsHyperTextAccessible::HypertextOffsetsToDOMRange(PRInt32 aStartHTOffset,\\n+                                                  PRInt32 aEndHTOffset,\\n+                                                  nsIDOMNode **aStartNode,\\n+                                                  PRInt32 *aStartOffset,\\n+                                                  nsIDOMNode **aEndNode,\\n+                                                  PRInt32 *aEndOffset)\\n+{\\n+  NS_ENSURE_ARG_POINTER(aStartNode);\\n+  *aStartNode = nsnull;\\n+\\n+  NS_ENSURE_ARG_POINTER(aStartOffset);\\n+  *aStartOffset = -1;\\n+\\n+  NS_ENSURE_ARG_POINTER(aEndNode);\\n+  *aEndNode = nsnull;\\n+\\n+  NS_ENSURE_ARG_POINTER(aEndOffset);\\n+  *aEndOffset = -1;\\n+\\n+  nsCOMPtr<nsIAccessible> startAcc, endAcc;\\n+  PRInt32 startOffset = aStartHTOffset, endOffset = aEndHTOffset;\\n+  nsIFrame *startFrame = nsnull, *endFrame = nsnull;\\n+\\n+  startFrame = GetPosAndText(startOffset, endOffset, nsnull, &endFrame, nsnull,\\n+                             getter_AddRefs(startAcc), getter_AddRefs(endAcc));\\n+  if (!startAcc || !endAcc)\\n+    return NS_ERROR_FAILURE;\\n+\\n+  nsCOMPtr<nsIDOMNode> startNode, endNode;\\n+  nsresult rv = GetDOMPointByFrameOffset(startFrame, startOffset, startAcc,\\n+                                         getter_AddRefs(startNode),\\n+                                         &startOffset);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  if (aStartHTOffset != aEndHTOffset) {\\n+    rv = GetDOMPointByFrameOffset(endFrame, endOffset, endAcc,\\n+                                  getter_AddRefs(endNode), &endOffset);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+  } else {\\n+    endNode = startNode;\\n+    endOffset = startOffset;\\n+  }\\n+\\n+  NS_ADDREF(*aStartNode = startNode);\\n+  *aStartOffset = startOffset;\\n+\\n+  NS_ADDREF(*aEndNode = endNode);\\n+  *aEndOffset = endOffset;\\n+\\n+  return NS_OK;\\n+}\\n+\\n PRInt32\\n nsHyperTextAccessible::GetRelativeOffset(nsIPresShell *aPresShell,\\n                                          nsIFrame *aFromFrame,\\n@@ -1572,13 +1626,17 @@ NS_IMETHODIMP nsHyperTextAccessible::GetSelectionBounds(PRInt32 aSelectionNum, P\\n /*\\n  * Changes the start and end offset of the specified selection.\\n  */\\n-NS_IMETHODIMP nsHyperTextAccessible::SetSelectionBounds(PRInt32 aSelectionNum, PRInt32 aStartOffset, PRInt32 aEndOffset)\\n+NS_IMETHODIMP\\n+nsHyperTextAccessible::SetSelectionBounds(PRInt32 aSelectionNum,\\n+                                          PRInt32 aStartOffset,\\n+                                          PRInt32 aEndOffset)\\n {\\n   nsCOMPtr<nsISelection> domSel;\\n   nsresult rv = GetSelections(nsnull, getter_AddRefs(domSel));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  PRInt32 isOnlyCaret = (aStartOffset == aEndOffset); // Caret is a collapsed selection\\n+  // Caret is a collapsed selection\\n+  PRBool isOnlyCaret = (aStartOffset == aEndOffset);\\n \\n   PRInt32 rangeCount;\\n   domSel->GetRangeCount(&rangeCount);\\n@@ -1595,78 +1653,20 @@ NS_IMETHODIMP nsHyperTextAccessible::SetSelectionBounds(PRInt32 aSelectionNum, P\\n     NS_ENSURE_TRUE(range, NS_ERROR_FAILURE);\\n   }\\n \\n-  nsIFrame *endFrame;\\n-  nsCOMPtr<nsIAccessible> startAcc, endAcc;\\n-  nsIFrame *startFrame = GetPosAndText(aStartOffset, aEndOffset, nsnull, &endFrame, nsnull,\\n-                                       getter_AddRefs(startAcc), getter_AddRefs(endAcc));\\n+  PRInt32 startOffset, endOffset;\\n+  nsCOMPtr<nsIDOMNode> startNode, endNode;\\n \\n-  nsCOMPtr<nsIPresShell> shell = GetPresShell();\\n+  rv = HypertextOffsetsToDOMRange(aStartOffset, aEndOffset,\\n+                                  getter_AddRefs(startNode), &startOffset,\\n+                                  getter_AddRefs(endNode), &endOffset);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  if (!startFrame) { // past the end of the hyper text\\n-    nsCOMPtr<nsIAccessNode> startAccessNode = do_QueryInterface(startAcc);\\n-    NS_ENSURE_TRUE(startAccessNode, NS_ERROR_FAILURE);\\n-    nsCOMPtr<nsIDOMNode> node;\\n-    startAccessNode->GetDOMNode(getter_AddRefs(node));\\n-    NS_ENSURE_TRUE(node, NS_ERROR_FAILURE);\\n-    rv = range->SetStartAfter(node);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-  }\\n-  else {\\n-    nsIContent *startParentContent = startFrame->GetContent();\\n-    PRInt32 startOffset;\\n-    if (startFrame->GetType() != nsAccessibilityAtoms::textFrame) {\\n-      nsIContent *newParent = startParentContent->GetParent();\\n-      startOffset = newParent->IndexOf(startParentContent);\\n-      startParentContent = newParent;\\n-    }\\n-    else {\\n-      // We have a rendered offset into the text frame, and it needs to be\\n-      // a content offset for us to set the caret\\n-      nsIFrame *startPrimaryFrame =\\n-        shell->GetPrimaryFrameFor(startFrame->GetContent());\\n-      rv = RenderedToContentOffset(startPrimaryFrame, aStartOffset, &startOffset);\\n-      NS_ENSURE_SUCCESS(rv, rv);\\n-    }\\n-    nsCOMPtr<nsIDOMNode> startParentNode(do_QueryInterface(startParentContent));\\n-    NS_ENSURE_TRUE(startParentNode, NS_ERROR_FAILURE);\\n-    rv = range->SetStart(startParentNode, startOffset);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-  }\\n+  rv = range->SetStart(startNode, startOffset);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  if (isOnlyCaret) { \\n-    rv = range->Collapse(PR_TRUE);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-  }\\n-  else if (!endFrame) {  // past the end of the hyper text\\n-    nsCOMPtr<nsIAccessNode> endAccessNode = do_QueryInterface(endAcc);\\n-    NS_ENSURE_TRUE(endAccessNode, NS_ERROR_FAILURE);\\n-    nsCOMPtr<nsIDOMNode> node;\\n-    endAccessNode->GetDOMNode(getter_AddRefs(node));\\n-    NS_ENSURE_TRUE(node, NS_ERROR_FAILURE);\\n-    rv = range->SetEndAfter(node);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-  }\\n-  else {\\n-    nsIContent *endParentContent = endFrame->GetContent();\\n-    PRInt32 endOffset;\\n-    if (endFrame->GetType() != nsAccessibilityAtoms::textFrame) {\\n-      nsIContent *newParent = endParentContent->GetParent();\\n-      endOffset = newParent->IndexOf(endParentContent);\\n-      endParentContent = newParent;\\n-    }\\n-    else {\\n-      // We have a rendered offset into the text frame, and it needs to be\\n-      // a content offset for us to set the caret\\n-      nsIFrame *endPrimaryFrame =\\n-        shell->GetPrimaryFrameFor(endFrame->GetContent());\\n-      rv = RenderedToContentOffset(endPrimaryFrame, aEndOffset, &endOffset);\\n-      NS_ENSURE_SUCCESS(rv, rv);\\n-    }\\n-    nsCOMPtr<nsIDOMNode> endParentNode(do_QueryInterface(endParentContent));\\n-    NS_ENSURE_TRUE(endParentNode, NS_ERROR_FAILURE);\\n-    rv = range->SetEnd(endParentNode, endOffset);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-  }\\n+  rv = isOnlyCaret ? range->Collapse(PR_TRUE) :\\n+                     range->SetEnd(endNode, endOffset);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n   if (aSelectionNum == rangeCount) { // Add successfully created new range\\n     return domSel->AddRange(range);\\n@@ -1708,54 +1708,94 @@ NS_IMETHODIMP nsHyperTextAccessible::RemoveSelection(PRInt32 aSelectionNum)\\n   return domSel->RemoveRange(range);\\n }\\n \\n+// void nsIAccessibleText::\\n+//   scrollSubstringTo(in long startIndex, in long endIndex,\\n+//                     in unsigned long scrollType);\\n NS_IMETHODIMP\\n nsHyperTextAccessible::ScrollSubstringTo(PRInt32 aStartIndex, PRInt32 aEndIndex,\\n                                          PRUint32 aScrollType)\\n {\\n-  PRInt32 startOffset = aStartIndex, endOffset = aEndIndex;\\n-  nsIFrame *startFrame = nsnull, *endFrame = nsnull;\\n-  nsCOMPtr<nsIAccessible> startAcc, endAcc;\\n+  PRInt32 startOffset, endOffset;\\n+  nsCOMPtr<nsIDOMNode> startNode, endNode;\\n+\\n+  nsresult rv = HypertextOffsetsToDOMRange(aStartIndex, aEndIndex,\\n+                                           getter_AddRefs(startNode),\\n+                                           &startOffset,\\n+                                           getter_AddRefs(endNode),\\n+                                           &endOffset);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  startFrame = GetPosAndText(startOffset, endOffset,\\n-                             nsnull, &endFrame, nsnull,\\n-                             getter_AddRefs(startAcc), getter_AddRefs(endAcc));\\n-  if (!startFrame || !endFrame)\\n+  return nsAccUtils::ScrollSubstringTo(GetFrame(), startNode, startOffset,\\n+                                       endNode, endOffset, aScrollType);\\n+}\\n+\\n+// void nsIAccessibleText::\\n+//   scrollSubstringToPoint(in long startIndex, in long endIndex,\\n+//                          in unsigned long coordinateType,\\n+//                          in long x, in long y);\\n+NS_IMETHODIMP\\n+nsHyperTextAccessible::ScrollSubstringToPoint(PRInt32 aStartIndex,\\n+                                              PRInt32 aEndIndex,\\n+                                              PRUint32 aCoordinateType,\\n+                                              PRInt32 aX, PRInt32 aY)\\n+{\\n+  nsIFrame *frame = GetFrame();\\n+  if (!frame)\\n     return NS_ERROR_FAILURE;\\n \\n-  nsCOMPtr<nsIDOMNode> startNode;\\n-  nsCOMPtr<nsIContent> startContent(startFrame->GetContent());\\n+  nsIntPoint coords;\\n+  nsresult rv = nsAccUtils::ConvertToScreenCoords(aX, aY, aCoordinateType,\\n+                                                  this, &coords);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  if (startFrame->GetType() == nsAccessibilityAtoms::textFrame) {\\n-    nsresult rv = RenderedToContentOffset(startFrame, startOffset,\\n-                                          &startOffset);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-    startNode = do_QueryInterface(startContent);\\n-  } else {\\n-    nsCOMPtr<nsIContent> startParent(startContent->GetParent());\\n-    NS_ENSURE_STATE(startParent);\\n-    startOffset = startParent->IndexOf(startContent);\\n-    startNode = do_QueryInterface(startParent);\\n-  }\\n-  NS_ENSURE_STATE(startNode);\\n+  PRInt32 startOffset, endOffset;\\n+  nsCOMPtr<nsIDOMNode> startNode, endNode;\\n \\n-  nsCOMPtr<nsIDOMNode> endNode;\\n-  nsCOMPtr<nsIContent> endContent(endFrame->GetContent());\\n+  rv = HypertextOffsetsToDOMRange(aStartIndex, aEndIndex,\\n+                                  getter_AddRefs(startNode), &startOffset,\\n+                                  getter_AddRefs(endNode), &endOffset);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  if (endFrame->GetType() == nsAccessibilityAtoms::textFrame) {\\n-    nsresult rv = RenderedToContentOffset(endFrame, endOffset,\\n-                                          &endOffset);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-    endNode = do_QueryInterface(endContent);\\n-  } else {\\n-    nsCOMPtr<nsIContent> endParent(endContent->GetParent());\\n-    NS_ENSURE_STATE(endParent);\\n-    endOffset = endParent->IndexOf(endContent);\\n-    endNode = do_QueryInterface(endParent);\\n+  nsPresContext *presContext = frame->PresContext();\\n+\\n+  PRBool initialScrolled = PR_FALSE;\\n+  nsIFrame *parentFrame = frame;\\n+  while (parentFrame = parentFrame->GetParent()) {\\n+    nsIScrollableFrame *scrollableFrame = nsnull;\\n+    CallQueryInterface(parentFrame, &scrollableFrame);\\n+    if (scrollableFrame) {\\n+      if (!initialScrolled) {\\n+        // Scroll substring to the given point. Turn the point into percents\\n+        // relative scrollable area to use nsAccUtils::ScrollSubstringTo.\\n+        nsIntRect frameRect = parentFrame->GetScreenRectExternal();\\n+        PRInt32 devOffsetX = coords.x - frameRect.x;\\n+        PRInt32 devOffsetY = coords.y - frameRect.y;\\n+\\n+        nsPoint offsetPoint(presContext->DevPixelsToAppUnits(devOffsetX),\\n+                            presContext->DevPixelsToAppUnits(devOffsetY));\\n+\\n+        nsSize size(parentFrame->GetSize());\\n+        PRInt16 hPercent = offsetPoint.x * 100 / size.width;\\n+        PRInt16 vPercent = offsetPoint.y * 100 / size.height;\\n+\\n+        rv = nsAccUtils::ScrollSubstringTo(GetFrame(), startNode, startOffset,\\n+                                           endNode, endOffset,\\n+                                           vPercent, hPercent);\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+        initialScrolled = PR_TRUE;\\n+      } else {\\n+        // Substring was scrolled to the given point already inside its closest\\n+        // scrollable area. If there are nested scrollable areas then make\\n+        // sure we scroll lower areas to the given point inside currently\\n+        // traversed scrollable area.\\n+        nsAccUtils::ScrollFrameToPoint(parentFrame, frame, coords);\\n+      }\\n+    }\\n+    frame = parentFrame;\\n   }\\n-  NS_ENSURE_STATE(endNode);\\n \\n-  return nsAccUtils::ScrollSubstringTo(GetFrame(), startNode, startOffset,\\n-                                       endNode, endOffset, aScrollType);\\n+  return NS_OK;\\n }\\n \\n nsresult nsHyperTextAccessible::ContentToRenderedOffset(nsIFrame *aFrame, PRInt32 aContentOffset,\\n@@ -1803,4 +1843,58 @@ nsresult nsHyperTextAccessible::RenderedToContentOffset(nsIFrame *aFrame, PRUint\\n   return NS_OK;\\n }\\n \\n+nsresult\\n+nsHyperTextAccessible::GetDOMPointByFrameOffset(nsIFrame *aFrame,\\n+                                                PRInt32 aOffset,\\n+                                                nsIAccessible *aAccessible,\\n+                                                nsIDOMNode **aNode,\\n+                                                PRInt32 *aNodeOffset)\\n+{\\n+  NS_ENSURE_ARG(aAccessible);\\n+\\n+  nsCOMPtr<nsIDOMNode> node;\\n+\\n+  if (!aFrame) {\\n+    // If the given frame is null then set offset after the DOM node of the\\n+    // given accessible.\\n+    nsCOMPtr<nsIAccessNode> accessNode(do_QueryInterface(aAccessible));\\n+\\n+    nsCOMPtr<nsIDOMNode> DOMNode;\\n+    accessNode->GetDOMNode(getter_AddRefs(DOMNode));\\n+    nsCOMPtr<nsIContent> content(do_QueryInterface(DOMNode));\\n+    NS_ENSURE_STATE(content);\\n+\\n+    nsCOMPtr<nsIContent> parent(content->GetParent());\\n+    NS_ENSURE_STATE(parent);\\n+\\n+    *aNodeOffset = parent->IndexOf(content) + 1;\\n+    node = do_QueryInterface(parent);\\n+\\n+  } else if (aFrame->GetType() == nsAccessibilityAtoms::textFrame) {\\n+    nsCOMPtr<nsIContent> content(aFrame->GetContent());\\n+    NS_ENSURE_STATE(content);\\n+\\n+    nsCOMPtr<nsIPresShell> shell(GetPresShell());\\n+    NS_ENSURE_STATE(shell);\\n+\\n+    nsIFrame *primaryFrame = shell->GetPrimaryFrameFor(content);\\n+    nsresult rv = RenderedToContentOffset(primaryFrame, aOffset, aNodeOffset);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    node = do_QueryInterface(content);\\n+\\n+  } else {\\n+    nsCOMPtr<nsIContent> content(aFrame->GetContent());\\n+    NS_ENSURE_STATE(content);\\n+\\n+    nsCOMPtr<nsIContent> parent(content->GetParent());\\n+    NS_ENSURE_STATE(parent);\\n+\\n+    *aNodeOffset = parent->IndexOf(content);\\n+    node = do_QueryInterface(parent);\\n+  }\\n+\\n+  NS_IF_ADDREF(*aNode = node);\\n+  return NS_OK;\\n+}\\n \\ndiff --git a/accessible/src/html/nsHyperTextAccessible.h b/accessible/src/html/nsHyperTextAccessible.h\\nindex 8d09a34..86e552d 100644\\n--- a/accessible/src/html/nsHyperTextAccessible.h\\n+++ b/accessible/src/html/nsHyperTextAccessible.h\\n@@ -123,6 +123,23 @@ public:\\n                                      nsIAccessible **aFinalAccessible = nsnull,\\n                                      PRBool aIsEndOffset = PR_FALSE);\\n \\n+  /**\\n+   * Turn a start and end hypertext offsets into DOM range.\\n+   *\\n+   * @param  aStartHTOffset  [in] the given start hypertext offset\\n+   * @param  aEndHTOffset    [in] the given end hypertext offset\\n+   * @param  aStartNode      [out] start node of the range\\n+   * @param  aStartOffset    [out] start offset of the range\\n+   * @param  aEndNode        [out] end node of the range\\n+   * @param  aEndOffset      [out] end offset of the range\\n+   */\\n+  nsresult HypertextOffsetsToDOMRange(PRInt32 aStartHTOffset,\\n+                                      PRInt32 aEndHTOffset,\\n+                                      nsIDOMNode **aStartNode,\\n+                                      PRInt32 *aStartOffset,\\n+                                      nsIDOMNode **aEndNode,\\n+                                      PRInt32 *aEndOffset);\\n+\\n protected:\\n   /*\\n    * This does the work for nsIAccessibleText::GetText[At|Before|After]Offset\\n@@ -203,6 +220,11 @@ protected:\\n                          nsISelection **aDomSel = nsnull,\\n                          nsCOMArray<nsIDOMRange>* aRanges = nsnull);\\n   nsresult SetSelectionRange(PRInt32 aStartPos, PRInt32 aEndPos);\\n+\\n+  // Helpers\\n+  nsresult GetDOMPointByFrameOffset(nsIFrame *aFrame, PRInt32 aOffset,\\n+                                    nsIAccessible *aAccessible,\\n+                                    nsIDOMNode **aNode, PRInt32 *aNodeOffset);\\n };\\n \\n NS_DEFINE_STATIC_IID_ACCESSOR(nsHyperTextAccessible,\\ndiff --git a/accessible/src/msaa/CAccessibleText.cpp b/accessible/src/msaa/CAccessibleText.cpp\\nindex 82ba452..6b3f55a 100755\\n--- a/accessible/src/msaa/CAccessibleText.cpp\\n+++ b/accessible/src/msaa/CAccessibleText.cpp\\n@@ -370,34 +370,18 @@ CAccessibleText::scrollSubstringTo(long aStartIndex, long aEndIndex,\\n \\n STDMETHODIMP\\n CAccessibleText::scrollSubstringToPoint(long aStartIndex, long aEndIndex,\\n-                                        enum IA2CoordinateType aCoordinateType,\\n+                                        enum IA2CoordinateType aCoordType,\\n                                         long aX, long aY)\\n {\\n   GET_NSIACCESSIBLETEXT\\n \\n-  nsCOMPtr<nsIAccessible> accessible;\\n-  PRInt32 startOffset = 0, endOffset = 0;\\n-\\n-  // XXX: aEndIndex isn't used.\\n-  textAcc->GetAttributeRange(aStartIndex, &startOffset, &endOffset,\\n-                             getter_AddRefs(accessible));\\n-  if (!accessible)\\n-    return E_FAIL;\\n-\\n-  nsCOMPtr<nsIWinAccessNode> winAccessNode(do_QueryInterface(accessible));\\n-  if (!winAccessNode)\\n-    return E_FAIL;\\n-\\n-  void **instancePtr = 0;\\n-  winAccessNode->QueryNativeInterface(IID_IAccessible2, instancePtr);\\n-  if (!instancePtr)\\n-    return E_FAIL;\\n-\\n-  IAccessible2 *pAccessible2 = static_cast<IAccessible2*>(*instancePtr);\\n-  HRESULT hr = pAccessible2->scrollToPoint(aCoordinateType, aX, aY);\\n-  pAccessible2->Release();\\n+  PRUint32 geckoCoordType = (aCoordType == IA2_COORDTYPE_SCREEN_RELATIVE) ?\\n+    nsIAccessibleCoordinateType::COORDTYPE_SCREEN_RELATIVE :\\n+    nsIAccessibleCoordinateType::COORDTYPE_PARENT_RELATIVE;\\n \\n-  return hr;\\n+  nsresult rv = textAcc->ScrollSubstringToPoint(aStartIndex, aEndIndex,\\n+                                                geckoCoordType, aX, aY);\\n+  return NS_FAILED(rv) ? E_FAIL : S_OK;\\n }\\n \\n STDMETHODIMP\\ndiff --git a/accessible/src/msaa/nsAccessibleWrap.cpp b/accessible/src/msaa/nsAccessibleWrap.cpp\\nindex d108e31..1b0ac8a 100644\\n--- a/accessible/src/msaa/nsAccessibleWrap.cpp\\n+++ b/accessible/src/msaa/nsAccessibleWrap.cpp\\n@@ -1189,10 +1189,15 @@ nsAccessibleWrap::scrollTo(enum IA2ScrollType aScrollType)\\n }\\n \\n STDMETHODIMP\\n-nsAccessibleWrap::scrollToPoint(enum IA2CoordinateType coordinateType,\\n-                                long x, long y)\\n+nsAccessibleWrap::scrollToPoint(enum IA2CoordinateType aCoordType,\\n+                                long aX, long aY)\\n {\\n-  return E_NOTIMPL;\\n+  PRUint32 geckoCoordType = (aCoordType == IA2_COORDTYPE_SCREEN_RELATIVE) ?\\n+    nsIAccessibleCoordinateType::COORDTYPE_SCREEN_RELATIVE :\\n+    nsIAccessibleCoordinateType::COORDTYPE_PARENT_RELATIVE;\\n+\\n+  return NS_SUCCEEDED(ScrollToPoint(geckoCoordType, aX, aY)) ?\\n+    S_OK : E_FAIL;\\n }\\n \\n STDMETHODIMP\\n\""}