{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas9c88fe5\""},"diff":"\"9c88fe5 Bug 395667 - New style nsSVGInteger. r=tor,sr=roc,a=roc\\ndiff --git a/content/svg/content/src/Makefile.in b/content/svg/content/src/Makefile.in\\nindex 1420ac0..c475cfd 100644\\n--- a/content/svg/content/src/Makefile.in\\n+++ b/content/svg/content/src/Makefile.in\\n@@ -73,7 +73,6 @@ CPPSRCS\\t\\t= \\\\\\n \\t\\tnsSVGAngle.cpp \\\\\\n \\t\\tnsSVGAnimatedAngle.cpp \\\\\\n \\t\\tnsSVGAnimatedBoolean.cpp \\\\\\n-\\t\\tnsSVGAnimatedInteger.cpp \\\\\\n \\t\\tnsSVGAnimatedLengthList.cpp \\\\\\n \\t\\tnsSVGAnimatedNumberList.cpp \\\\\\n \\t\\tnsSVGAnimatedRect.cpp \\\\\\n@@ -97,6 +96,7 @@ CPPSRCS\\t\\t= \\\\\\n \\t\\tnsSVGGradientElement.cpp \\\\\\n \\t\\tnsSVGGraphicElement.cpp \\\\\\n \\t\\tnsSVGImageElement.cpp \\\\\\n+\\t\\tnsSVGInteger.cpp \\\\\\n \\t\\tnsSVGLength.cpp \\\\\\n \\t\\tnsSVGLength2.cpp \\\\\\n \\t\\tnsSVGLengthList.cpp \\\\\\ndiff --git a/content/svg/content/src/nsSVGAnimatedInteger.cpp b/content/svg/content/src/nsSVGAnimatedInteger.cpp\\ndeleted file mode 100644\\nindex 3368a97..0000000\\n--- a/content/svg/content/src/nsSVGAnimatedInteger.cpp\\n+++ /dev/null\\n@@ -1,212 +0,0 @@\\n-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n-/* ***** BEGIN LICENSE BLOCK *****\\n- * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n- *\\n- * The contents of this file are subject to the Mozilla Public License Version\\n- * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n- * the License. You may obtain a copy of the License at\\n- * http://www.mozilla.org/MPL/\\n- *\\n- * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n- * for the specific language governing rights and limitations under the\\n- * License.\\n- *\\n- * The Original Code is the Mozilla SVG project.\\n- *\\n- * The Initial Developer of the Original Code is\\n- * IBM Corporation.\\n- * Portions created by the Initial Developer are Copyright (C) 2005\\n- * the Initial Developer. All Rights Reserved.\\n- *\\n- * Contributor(s):\\n- *\\n- * Alternatively, the contents of this file may be used under the terms of\\n- * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n- * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n- * in which case the provisions of the GPL or the LGPL are applicable instead\\n- * of those above. If you wish to allow use of your version of this file only\\n- * under the terms of either the GPL or the LGPL, and not to allow others to\\n- * use your version of this file under the terms of the MPL, indicate your\\n- * decision by deleting the provisions above and replace them with the notice\\n- * and other provisions required by the GPL or the LGPL. If you do not delete\\n- * the provisions above, a recipient may use your version of this file under\\n- * the terms of any one of the MPL, the GPL or the LGPL.\\n- *\\n- * Parts of this file contain code derived from the following files(s)\\n- * of the Mozilla SVG project (these parts are Copyright (C) by their\\n- * respective copyright-holders):\\n- *    content/svg/content/src/nsSVGAnimatedNumber.cpp\\n- *\\n- * ***** END LICENSE BLOCK ***** */\\n-\\n-#include \\\"nsSVGAnimatedInteger.h\\\"\\n-#include \\\"nsTextFormatter.h\\\"\\n-#include \\\"prdtoa.h\\\"\\n-#include \\\"nsSVGValue.h\\\"\\n-#include \\\"nsISVGValueUtils.h\\\"\\n-#include \\\"nsDOMError.h\\\"\\n-#include \\\"nsContentUtils.h\\\"\\n-\\n-////////////////////////////////////////////////////////////////////////\\n-// nsSVGAnimatedInteger\\n-\\n-class nsSVGAnimatedInteger : public nsIDOMSVGAnimatedInteger,\\n-                             public nsSVGValue\\n-{\\n-protected:\\n-  friend nsresult NS_NewSVGAnimatedInteger(nsIDOMSVGAnimatedInteger** result,\\n-                                          PRInt32 aBaseVal);\\n-  nsSVGAnimatedInteger();\\n-  ~nsSVGAnimatedInteger();\\n-  void Init(PRInt32 aBaseVal);\\n-  \\n-public:\\n-  // nsISupports interface:\\n-  NS_DECL_ISUPPORTS\\n-\\n-  // nsIDOMSVGAnimatedInteger interface:\\n-  NS_DECL_NSIDOMSVGANIMATEDINTEGER\\n-\\n-  // remainder of nsISVGValue interface:\\n-  NS_IMETHOD SetValueString(const nsAString& aValue);\\n-  NS_IMETHOD GetValueString(nsAString& aValue);\\n-\\n-protected:\\n-  PRInt32 mBaseVal;\\n-};\\n-\\n-\\n-\\n-//----------------------------------------------------------------------\\n-// Implementation\\n-\\n-nsSVGAnimatedInteger::nsSVGAnimatedInteger()\\n-{\\n-}\\n-\\n-nsSVGAnimatedInteger::~nsSVGAnimatedInteger()\\n-{\\n-}\\n-\\n-void\\n-nsSVGAnimatedInteger::Init(PRInt32 aBaseVal)\\n-{\\n-  mBaseVal = aBaseVal;\\n-}\\n-\\n-//----------------------------------------------------------------------\\n-// nsISupports methods:\\n-\\n-NS_IMPL_ADDREF(nsSVGAnimatedInteger)\\n-NS_IMPL_RELEASE(nsSVGAnimatedInteger)\\n-\\n-\\n-NS_INTERFACE_MAP_BEGIN(nsSVGAnimatedInteger)\\n-  NS_INTERFACE_MAP_ENTRY(nsISVGValue)\\n-  NS_INTERFACE_MAP_ENTRY(nsIDOMSVGAnimatedInteger)\\n-  NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO(SVGAnimatedInteger)\\n-  NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsISVGValue)\\n-NS_INTERFACE_MAP_END\\n-  \\n-//----------------------------------------------------------------------\\n-// nsISVGValue methods:\\n-\\n-NS_IMETHODIMP\\n-nsSVGAnimatedInteger::SetValueString(const nsAString& aValue)\\n-{\\n-  nsresult rv = NS_OK;\\n-  WillModify();\\n-  \\n-  char *str = ToNewCString(aValue);\\n-\\n-  if (*str) {\\n-    char *tmp = str;\\n-\\n-    // check if string is well formed\\n-\\n-    if (*tmp != '-' &&\\n-        *tmp != '+' &&\\n-        !isdigit(*tmp))\\n-      rv = NS_ERROR_FAILURE;\\n-\\n-    tmp++;\\n-\\n-    while (*tmp) {\\n-      if (!isdigit(*tmp)) {\\n-        rv = NS_ERROR_FAILURE;\\n-        break;\\n-      }\\n-      tmp++;\\n-    }\\n-\\n-    if (NS_SUCCEEDED(rv))\\n-      sscanf(str, \\\"%d\\\", &mBaseVal);\\n-  }\\n-  nsMemory::Free(str);\\n-  DidModify();\\n-  return rv;\\n-}\\n-\\n-NS_IMETHODIMP\\n-nsSVGAnimatedInteger::GetValueString(nsAString& aValue)\\n-{\\n-  PRUnichar buf[24];\\n-  nsTextFormatter::snprintf(buf, sizeof(buf)/sizeof(PRUnichar),\\n-                            NS_LITERAL_STRING(\\\"%d\\\").get(),\\n-                            mBaseVal);\\n-  aValue.Assign(buf);\\n-  \\n-  return NS_OK;\\n-}\\n-\\n-//----------------------------------------------------------------------\\n-// nsIDOMSVGAnimatedInteger methods:\\n-\\n-/* attribute nsIDOMSVGNumber baseVal; */\\n-NS_IMETHODIMP\\n-nsSVGAnimatedInteger::GetBaseVal(PRInt32 *aBaseVal)\\n-{\\n-  *aBaseVal = mBaseVal;\\n-  return NS_OK;\\n-}\\n-\\n-/* attribute nsIDOMSVGNumber baseVal; */\\n-NS_IMETHODIMP\\n-nsSVGAnimatedInteger::SetBaseVal(PRInt32 aBaseVal)\\n-{\\n-  WillModify();\\n-  mBaseVal = aBaseVal;\\n-  DidModify();\\n-  return NS_OK;\\n-}\\n-\\n-/* readonly attribute nsIDOMSVGNumber animVal; */\\n-NS_IMETHODIMP\\n-nsSVGAnimatedInteger::GetAnimVal(PRInt32 *aAnimVal)\\n-{\\n-  *aAnimVal = mBaseVal;\\n-  return NS_OK;\\n-}\\n-\\n-////////////////////////////////////////////////////////////////////////\\n-// Exported creation functions\\n-\\n-nsresult\\n-NS_NewSVGAnimatedInteger(nsIDOMSVGAnimatedInteger** aResult,\\n-                         PRInt32 aBaseVal)\\n-{\\n-  *aResult = nsnull;\\n-  \\n-  nsSVGAnimatedInteger* animatedNumber = new nsSVGAnimatedInteger();\\n-  if (!animatedNumber) return NS_ERROR_OUT_OF_MEMORY;\\n-  NS_ADDREF(animatedNumber);\\n-\\n-  animatedNumber->Init(aBaseVal);\\n-  \\n-  *aResult = (nsIDOMSVGAnimatedInteger*) animatedNumber;\\n-  \\n-  return NS_OK;\\n-}\\n-\\n-\\ndiff --git a/content/svg/content/src/nsSVGElement.cpp b/content/svg/content/src/nsSVGElement.cpp\\nindex f64dff9..afbb654 100644\\n--- a/content/svg/content/src/nsSVGElement.cpp\\n+++ b/content/svg/content/src/nsSVGElement.cpp\\n@@ -67,6 +67,7 @@\\n #include \\\"nsSVGUtils.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n #include \\\"nsSVGNumber2.h\\\"\\n+#include \\\"nsSVGInteger.h\\\"\\n #include \\\"nsSVGEnum.h\\\"\\n #include \\\"nsIDOMSVGUnitTypes.h\\\"\\n #include \\\"nsIDOMSVGAngle.h\\\"\\n@@ -123,6 +124,12 @@ nsSVGElement::Init()\\n     numberInfo.mNumbers[i].Init(i, numberInfo.mNumberInfo[i].mDefaultValue);\\n   }\\n \\n+  IntegerAttributesInfo integerInfo = GetIntegerInfo();\\n+\\n+  for (i = 0; i < integerInfo.mIntegerCount; i++) {\\n+    integerInfo.mIntegers[i].Init(i, integerInfo.mIntegerInfo[i].mDefaultValue);\\n+  }\\n+\\n   EnumAttributesInfo enumInfo = GetEnumInfo();\\n \\n   for (i = 0; i < enumInfo.mEnumCount; i++) {\\n@@ -261,6 +268,15 @@ nsSVGElement::ParseAttribute(PRInt32 aNamespaceID,\\n       }\\n     }\\n \\n+    // Check for nsSVGInteger attribute\\n+    IntegerAttributesInfo integerInfo = GetIntegerInfo();\\n+    for (PRUint32 i = 0; i < integerInfo.mIntegerCount && !foundMatch; i++) {\\n+      if (aAttribute == *integerInfo.mIntegerInfo[i].mName) {\\n+        rv = integerInfo.mIntegers[i].SetBaseValueString(aValue, this, PR_FALSE);\\n+        foundMatch = PR_TRUE;\\n+      }\\n+    }\\n+\\n     // Check for nsSVGEnum attribute\\n     EnumAttributesInfo enumInfo = GetEnumInfo();\\n     for (PRUint32 i = 0; i < enumInfo.mEnumCount && !foundMatch; i++) {\\n@@ -312,7 +328,6 @@ nsSVGElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n                                    lenInfo.mLengthInfo[i].mDefaultValue,\\n                                    lenInfo.mLengthInfo[i].mDefaultUnitType);\\n           DidChangeLength(i, PR_FALSE);\\n-          break;\\n         }\\n       }\\n       // Check if this is a number attribute going away\\n@@ -322,18 +337,26 @@ nsSVGElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n         if (aName == *numInfo.mNumberInfo[i].mName) {\\n           numInfo.mNumbers[i].Init(i, numInfo.mNumberInfo[i].mDefaultValue);\\n           DidChangeNumber(i, PR_FALSE);\\n-          break;\\n         }\\n       }\\n \\n-      // Check if this is a number attribute going away\\n+      // Check if this is an integer attribute going away\\n+      IntegerAttributesInfo intInfo = GetIntegerInfo();\\n+\\n+      for (i = 0; i < intInfo.mIntegerCount; i++) {\\n+        if (aName == *intInfo.mIntegerInfo[i].mName) {\\n+          intInfo.mIntegers[i].Init(i, intInfo.mIntegerInfo[i].mDefaultValue);\\n+          DidChangeInteger(i, PR_FALSE);\\n+        }\\n+      }\\n+\\n+      // Check if this is an enum attribute going away\\n       EnumAttributesInfo enumInfo = GetEnumInfo();\\n \\n       for (i = 0; i < enumInfo.mEnumCount; i++) {\\n         if (aName == *enumInfo.mEnumInfo[i].mName) {\\n           enumInfo.mEnums[i].Init(i, enumInfo.mEnumInfo[i].mDefaultValue);\\n           DidChangeEnum(i, PR_FALSE);\\n-          break;\\n         }\\n       }\\n \\n@@ -347,9 +370,6 @@ nsSVGElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n \\n         nsCOMPtr<nsIDOMSVGAnimatedBoolean> b = do_QueryInterface(svg_value);\\n         NS_ASSERTION(!b, \\\"must provide element processing for unset boolean\\\");\\n-\\n-        nsCOMPtr<nsIDOMSVGAnimatedInteger> i = do_QueryInterface(svg_value);\\n-        NS_ASSERTION(!i, \\\"must provide element processing for unset integer\\\");\\n #endif\\n \\n         nsCOMPtr<nsIDOMSVGAnimatedRect> r = do_QueryInterface(svg_value);\\n@@ -973,6 +993,53 @@ nsSVGElement::GetAnimatedNumberValues(float *aFirst, ...)\\n   va_end(args);\\n }\\n \\n+nsSVGElement::IntegerAttributesInfo\\n+nsSVGElement::GetIntegerInfo()\\n+{\\n+  return IntegerAttributesInfo(nsnull, nsnull, 0);\\n+}\\n+\\n+void\\n+nsSVGElement::DidChangeInteger(PRUint8 aAttrEnum, PRBool aDoSetAttr)\\n+{\\n+  if (!aDoSetAttr)\\n+    return;\\n+\\n+  IntegerAttributesInfo info = GetIntegerInfo();\\n+\\n+  NS_ASSERTION(info.mIntegerCount > 0,\\n+               \\\"DidChangeInteger on element with no integer attribs\\\");\\n+\\n+  NS_ASSERTION(aAttrEnum < info.mIntegerCount, \\\"aAttrEnum out of range\\\");\\n+\\n+  nsAutoString newStr;\\n+  info.mIntegers[aAttrEnum].GetBaseValueString(newStr);\\n+\\n+  SetAttr(kNameSpaceID_None, *info.mIntegerInfo[aAttrEnum].mName,\\n+          newStr, PR_TRUE);\\n+}\\n+\\n+void\\n+nsSVGElement::GetAnimatedIntegerValues(PRInt32 *aFirst, ...)\\n+{\\n+  IntegerAttributesInfo info = GetIntegerInfo();\\n+\\n+  NS_ASSERTION(info.mIntegerCount > 0,\\n+               \\\"GetAnimatedIntegerValues on element with no integer attribs\\\");\\n+\\n+  PRInt32 *n = aFirst;\\n+  PRUint32 i = 0;\\n+\\n+  va_list args;\\n+  va_start(args, aFirst);\\n+\\n+  while (n && i < info.mIntegerCount) {\\n+    *n = info.mIntegers[i++].GetAnimValue();\\n+    n = va_arg(args, PRInt32*);\\n+  }\\n+  va_end(args);\\n+}\\n+\\n nsSVGElement::EnumAttributesInfo\\n nsSVGElement::GetEnumInfo()\\n {\\n@@ -988,7 +1055,7 @@ nsSVGElement::DidChangeEnum(PRUint8 aAttrEnum, PRBool aDoSetAttr)\\n   EnumAttributesInfo info = GetEnumInfo();\\n \\n   NS_ASSERTION(info.mEnumCount > 0,\\n-               \\\"DidChangeNumber on element with no number attribs\\\");\\n+               \\\"DidChangeEnum on element with no enum attribs\\\");\\n \\n   NS_ASSERTION(aAttrEnum < info.mEnumCount, \\\"aAttrEnum out of range\\\");\\n \\ndiff --git a/content/svg/content/src/nsSVGElement.h b/content/svg/content/src/nsSVGElement.h\\nindex 0fc2680..31671c5 100644\\n--- a/content/svg/content/src/nsSVGElement.h\\n+++ b/content/svg/content/src/nsSVGElement.h\\n@@ -57,6 +57,7 @@\\n class nsSVGSVGElement;\\n class nsSVGLength2;\\n class nsSVGNumber2;\\n+class nsSVGInteger;\\n class nsSVGEnum;\\n struct nsSVGEnumMapping;\\n \\n@@ -118,10 +119,12 @@ public:\\n \\n   virtual void DidChangeLength(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n   virtual void DidChangeNumber(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n+  virtual void DidChangeInteger(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n   virtual void DidChangeEnum(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n \\n   void GetAnimatedLengthValues(float *aFirst, ...);\\n   void GetAnimatedNumberValues(float *aFirst, ...);\\n+  void GetAnimatedIntegerValues(PRInt32 *aFirst, ...);\\n \\n   virtual void RecompileScriptEventListeners();\\n \\n@@ -143,9 +146,7 @@ protected:\\n   \\n   static nsIAtom* GetEventNameForAttr(nsIAtom* aAttr);\\n \\n-  // The following two structures should be protected, but VC6\\n-  // doesn't allow children of nsSVGElement to access them.\\n-public:\\n+protected:\\n   struct LengthInfo {\\n     nsIAtom** mName;\\n     float     mDefaultValue;\\n@@ -182,6 +183,25 @@ public:\\n       {}\\n   };\\n \\n+  struct IntegerInfo {\\n+    nsIAtom** mName;\\n+    PRInt32   mDefaultValue;\\n+  };\\n+\\n+  struct IntegerAttributesInfo {\\n+    nsSVGInteger* mIntegers;\\n+    IntegerInfo*  mIntegerInfo;\\n+    PRUint32      mIntegerCount;\\n+\\n+    IntegerAttributesInfo(nsSVGInteger *aIntegers,\\n+                          IntegerInfo *aIntegerInfo,\\n+                          PRUint32 aIntegerCount) :\\n+      mIntegers(aIntegers), mIntegerInfo(aIntegerInfo), mIntegerCount(aIntegerCount)\\n+      {}\\n+  };\\n+\\n+  friend class nsSVGEnum;\\n+\\n   struct EnumInfo {\\n     nsIAtom**         mName;\\n     nsSVGEnumMapping* mMapping;\\n@@ -205,6 +225,7 @@ public:\\n protected:\\n   virtual LengthAttributesInfo GetLengthInfo();\\n   virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual IntegerAttributesInfo GetIntegerInfo();\\n \\n   static nsresult ReportAttributeParseFailure(nsIDocument* aDocument,\\n                                               nsIAtom* aAttribute,\\ndiff --git a/content/svg/content/src/nsSVGFilterElement.cpp b/content/svg/content/src/nsSVGFilterElement.cpp\\nindex 6845bbb..9f245c2 100644\\n--- a/content/svg/content/src/nsSVGFilterElement.cpp\\n+++ b/content/svg/content/src/nsSVGFilterElement.cpp\\n@@ -37,7 +37,6 @@\\n #include \\\"nsGkAtoms.h\\\"\\n #include \\\"nsSVGLength.h\\\"\\n #include \\\"nsCOMPtr.h\\\"\\n-#include \\\"nsSVGAnimatedInteger.h\\\"\\n #include \\\"nsSVGAnimatedString.h\\\"\\n #include \\\"nsSVGFilterElement.h\\\"\\n \\n@@ -49,6 +48,12 @@ nsSVGElement::LengthInfo nsSVGFilterElement::sLengthInfo[4] =\\n   { &nsGkAtoms::height, 120, nsIDOMSVGLength::SVG_LENGTHTYPE_PERCENTAGE, nsSVGUtils::Y },\\n };\\n \\n+nsSVGElement::IntegerInfo nsSVGFilterElement::sIntegerInfo[2] =\\n+{\\n+  { &nsGkAtoms::filterRes, 0 },\\n+  { &nsGkAtoms::filterRes, 0 }\\n+};\\n+\\n nsSVGElement::EnumInfo nsSVGFilterElement::sEnumInfo[2] =\\n {\\n   { &nsGkAtoms::filterUnits,\\n@@ -94,18 +99,6 @@ nsSVGFilterElement::Init()\\n \\n   // Create mapped properties:\\n \\n-  // DOM property: filterResX , #IMPLIED attrib: filterRes\\n-  {\\n-    rv = NS_NewSVGAnimatedInteger(getter_AddRefs(mFilterResX), 0);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  // DOM property: filterResY , #IMPLIED attrib: filterRes\\n-  {\\n-    rv = NS_NewSVGAnimatedInteger(getter_AddRefs(mFilterResY), 0);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n   // nsIDOMSVGURIReference properties\\n \\n   // DOM property: href , #REQUIRED attrib: xlink:href\\n@@ -169,17 +162,13 @@ NS_IMETHODIMP nsSVGFilterElement::GetPrimitiveUnits(nsIDOMSVGAnimatedEnumeration\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration filterResY; */\\n NS_IMETHODIMP nsSVGFilterElement::GetFilterResX(nsIDOMSVGAnimatedInteger * *aFilterResX)\\n {\\n-  *aFilterResX = mFilterResX;\\n-  NS_IF_ADDREF(*aFilterResX);\\n-  return NS_OK;\\n+  return mIntegerAttributes[FILTERRES_X].ToDOMAnimatedInteger(aFilterResX, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedEnumeration filterResY; */\\n NS_IMETHODIMP nsSVGFilterElement::GetFilterResY(nsIDOMSVGAnimatedInteger * *aFilterResY)\\n {\\n-  *aFilterResY = mFilterResY;\\n-  NS_IF_ADDREF(*aFilterResY);\\n-  return NS_OK;\\n+  return mIntegerAttributes[FILTERRES_Y].ToDOMAnimatedInteger(aFilterResY, this);\\n }\\n \\n /* void setFilterRes (in unsigned long filterResX, in unsigned long filterResY);\\n@@ -187,8 +176,8 @@ NS_IMETHODIMP nsSVGFilterElement::GetFilterResY(nsIDOMSVGAnimatedInteger * *aFil\\n NS_IMETHODIMP\\n nsSVGFilterElement::SetFilterRes(PRUint32 filterResX, PRUint32 filterResY)\\n {\\n-  mFilterResX->SetBaseVal(filterResX);\\n-  mFilterResY->SetBaseVal(filterResY);\\n+  mIntegerAttributes[FILTERRES_X].SetBaseValue(filterResX, this, PR_FALSE);\\n+  mIntegerAttributes[FILTERRES_Y].SetBaseValue(filterResY, this, PR_FALSE);\\n   return NS_OK;\\n }\\n \\n@@ -222,12 +211,12 @@ nsSVGFilterElement::SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n     int num = sscanf(str, \\\"%d %d\\\\n\\\", &resX, &resY);\\n     switch (num) {\\n     case 2:\\n-      mFilterResX->SetBaseVal(resX);\\n-      mFilterResY->SetBaseVal(resY);\\n+      mIntegerAttributes[FILTERRES_X].SetBaseValue(resX, this, PR_FALSE);\\n+      mIntegerAttributes[FILTERRES_Y].SetBaseValue(resY, this, PR_FALSE);\\n       break;\\n     case 1:\\n-      mFilterResX->SetBaseVal(resX);\\n-      mFilterResY->SetBaseVal(resX);\\n+      mIntegerAttributes[FILTERRES_X].SetBaseValue(resX, this, PR_FALSE);\\n+      mIntegerAttributes[FILTERRES_Y].SetBaseValue(resX, this, PR_FALSE);\\n       break;\\n     default:\\n       break;\\n@@ -238,20 +227,6 @@ nsSVGFilterElement::SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n   return rv;\\n }\\n \\n-nsresult\\n-nsSVGFilterElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                              PRBool aNotify)\\n-{\\n-  if (aName == nsGkAtoms::filterRes && aNamespaceID == kNameSpaceID_None) {\\n-    mFilterResX->SetBaseVal(0);\\n-    mFilterResY->SetBaseVal(0);\\n-\\n-    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n-  }\\n-\\n-  return nsSVGFilterElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n-}\\n-\\n NS_IMETHODIMP_(PRBool)\\n nsSVGFilterElement::IsAttributeMapped(const nsIAtom* name) const\\n {\\n@@ -279,6 +254,13 @@ nsSVGFilterElement::GetLengthInfo()\\n                               NS_ARRAY_LENGTH(sLengthInfo));\\n }\\n \\n+nsSVGElement::IntegerAttributesInfo\\n+nsSVGFilterElement::GetIntegerInfo()\\n+{\\n+  return IntegerAttributesInfo(mIntegerAttributes, sIntegerInfo,\\n+                               NS_ARRAY_LENGTH(sIntegerInfo));\\n+}\\n+\\n nsSVGElement::EnumAttributesInfo\\n nsSVGFilterElement::GetEnumInfo()\\n {\\ndiff --git a/content/svg/content/src/nsSVGFilterElement.h b/content/svg/content/src/nsSVGFilterElement.h\\nindex b4d418b..0a2abd7 100644\\n--- a/content/svg/content/src/nsSVGFilterElement.h\\n+++ b/content/svg/content/src/nsSVGFilterElement.h\\n@@ -42,6 +42,7 @@\\n #include \\\"nsIDOMSVGURIReference.h\\\"\\n #include \\\"nsIDOMSVGUnitTypes.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n+#include \\\"nsSVGInteger.h\\\"\\n #include \\\"nsSVGEnum.h\\\"\\n \\n typedef nsSVGGraphicElement nsSVGFilterElementBase;\\n@@ -79,8 +80,6 @@ public:\\n   virtual nsresult SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n                            nsIAtom* aPrefix, const nsAString& aValue,\\n                            PRBool aNotify);\\n-  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                             PRBool aNotify);\\n \\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n   NS_IMETHOD_(PRBool) IsAttributeMapped(const nsIAtom* aAttribute) const;\\n@@ -88,18 +87,21 @@ public:\\n protected:\\n \\n   virtual LengthAttributesInfo GetLengthInfo();\\n+  virtual IntegerAttributesInfo GetIntegerInfo();\\n   virtual EnumAttributesInfo GetEnumInfo();\\n \\n   enum { X, Y, WIDTH, HEIGHT };\\n   nsSVGLength2 mLengthAttributes[4];\\n   static LengthInfo sLengthInfo[4];\\n \\n+  enum { FILTERRES_X, FILTERRES_Y };\\n+  nsSVGInteger mIntegerAttributes[2];\\n+  static IntegerInfo sIntegerInfo[2];\\n+\\n   enum { FILTERUNITS, PRIMITIVEUNITS };\\n   nsSVGEnum mEnumAttributes[2];\\n   static EnumInfo sEnumInfo[2];\\n \\n-  nsCOMPtr<nsIDOMSVGAnimatedInteger> mFilterResX;\\n-  nsCOMPtr<nsIDOMSVGAnimatedInteger> mFilterResY;\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mHref;\\n };\\n \\ndiff --git a/content/svg/content/src/nsSVGFilters.cpp b/content/svg/content/src/nsSVGFilters.cpp\\nindex 8072de0..df15814 100644\\n--- a/content/svg/content/src/nsSVGFilters.cpp\\n+++ b/content/svg/content/src/nsSVGFilters.cpp\\n@@ -39,6 +39,7 @@\\n #include \\\"nsSVGLength.h\\\"\\n #include \\\"nsGkAtoms.h\\\"\\n #include \\\"nsSVGNumber2.h\\\"\\n+#include \\\"nsSVGInteger.h\\\"\\n #include \\\"nsIDOMSVGFilters.h\\\"\\n #include \\\"nsCOMPtr.h\\\"\\n #include \\\"nsISVGFilter.h\\\"\\n@@ -57,7 +58,6 @@\\n #include \\\"nsStyleContext.h\\\"\\n #include \\\"nsIDocument.h\\\"\\n #include \\\"nsIFrame.h\\\"\\n-#include \\\"nsSVGAnimatedInteger.h\\\"\\n #include \\\"gfxContext.h\\\"\\n #include \\\"nsSVGAnimatedBoolean.h\\\"\\n #include \\\"nsSVGLengthList.h\\\"\\n@@ -334,10 +334,14 @@ nsSVGFE::ScanDualValueAttribute(const nsAString& aValue, nsIAtom* aAttribute,\\n     ReportAttributeParseFailure(GetOwnerDoc(), aAttribute, aValue);\\n     x = aInfo1->mDefaultValue;\\n     y = aInfo2->mDefaultValue;\\n-    return PR_FALSE;\\n   }\\n+\\n   aNum1->SetBaseValue(x, this, PR_FALSE);\\n   aNum2->SetBaseValue(y, this, PR_FALSE);\\n+\\n+  if (parseError)\\n+    return PR_FALSE;\\n+\\n   aResult.SetTo(aValue);\\n   return PR_TRUE;\\n }\\n@@ -1971,13 +1975,6 @@ nsSVGComponentTransferFunctionElement::Init()\\n   return NS_OK;\\n }\\n \\n-nsSVGElement::EnumAttributesInfo\\n-nsSVGComponentTransferFunctionElement::GetEnumInfo()\\n-{\\n-  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n-                            NS_ARRAY_LENGTH(sEnumInfo));\\n-}\\n-\\n //----------------------------------------------------------------------\\n // nsIDOMSVGComponentTransferFunctionElement methods\\n \\n@@ -2122,6 +2119,13 @@ nsSVGComponentTransferFunctionElement::GenerateLookupTable(PRUint8 *aTable)\\n //----------------------------------------------------------------------\\n // nsSVGElement methods\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGComponentTransferFunctionElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n nsSVGElement::NumberAttributesInfo\\n nsSVGComponentTransferFunctionElement::GetNumberInfo()\\n {\\n@@ -2983,7 +2987,6 @@ class nsSVGFETurbulenceElement : public nsSVGFETurbulenceElementBase,\\n protected:\\n   nsSVGFETurbulenceElement(nsINodeInfo* aNodeInfo)\\n     : nsSVGFETurbulenceElementBase(aNodeInfo) {}\\n-  nsresult Init();\\n \\n public:\\n   virtual PRBool SubregionIsUnionOfRegions() { return PR_FALSE; }\\n@@ -3010,25 +3013,26 @@ public:\\n                                 const nsAString& aValue,\\n                                 nsAttrValue& aResult);\\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n-  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                             PRBool aNotify);\\n \\n protected:\\n   virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual IntegerAttributesInfo GetIntegerInfo();\\n   virtual EnumAttributesInfo GetEnumInfo();\\n \\n   enum { BASE_FREQ_X, BASE_FREQ_Y, SEED}; // floating point seed?!\\n   nsSVGNumber2 mNumberAttributes[3];\\n   static NumberInfo sNumberInfo[3];\\n \\n+  enum { OCTAVES };\\n+  nsSVGInteger mIntegerAttributes[1];\\n+  static IntegerInfo sIntegerInfo[1];\\n+\\n   enum { STITCHTILES, TYPE };\\n   nsSVGEnum mEnumAttributes[2];\\n   static nsSVGEnumMapping sStitchTilesMap[];\\n   static nsSVGEnumMapping sTypeMap[];\\n   static EnumInfo sEnumInfo[2];\\n \\n-  nsCOMPtr<nsIDOMSVGAnimatedInteger> mNumOctaves;\\n-\\n private:\\n \\n   /* The turbulence calculation code is an adapted version of what\\n@@ -3082,7 +3086,7 @@ private:\\n     int mWrapY;\\n   };\\n \\n-  void Init(PRInt32 aSeed);\\n+  void InitSeed(PRInt32 aSeed);\\n   double Noise2(int aColorChannel, double aVec[2], StitchInfo *aStitchInfo);\\n   double\\n   Turbulence(int aColorChannel, double *aPoint, double aBaseFreqX,\\n@@ -3098,6 +3102,11 @@ nsSVGElement::NumberInfo nsSVGFETurbulenceElement::sNumberInfo[3] =\\n   { &nsGkAtoms::seed, 0 }\\n };\\n \\n+nsSVGElement::IntegerInfo nsSVGFETurbulenceElement::sIntegerInfo[1] =\\n+{\\n+  { &nsGkAtoms::numOctaves, 1 }\\n+};\\n+\\n nsSVGEnumMapping nsSVGFETurbulenceElement::sTypeMap[] = {\\n   {&nsGkAtoms::fractalNoise,\\n    nsIDOMSVGFETurbulenceElement::SVG_TURBULENCE_TYPE_FRACTALNOISE},\\n@@ -3145,35 +3154,6 @@ NS_INTERFACE_MAP_BEGIN(nsSVGFETurbulenceElement)\\n NS_INTERFACE_MAP_END_INHERITING(nsSVGFETurbulenceElementBase)\\n \\n //----------------------------------------------------------------------\\n-// Implementation\\n-\\n-nsresult\\n-nsSVGFETurbulenceElement::Init()\\n-{\\n-  nsresult rv = nsSVGFETurbulenceElementBase::Init();\\n-  NS_ENSURE_SUCCESS(rv,rv);\\n-\\n-  // Create mapped properties:\\n-\\n-  // DOM property: numOctaves ,  #IMPLIED attrib: numOctaves\\n-  {\\n-    rv = NS_NewSVGAnimatedInteger(getter_AddRefs(mNumOctaves), 1);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::numOctaves, mNumOctaves);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  return rv;\\n-}\\n-\\n-nsSVGElement::EnumAttributesInfo\\n-nsSVGFETurbulenceElement::GetEnumInfo()\\n-{\\n-  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n-                            NS_ARRAY_LENGTH(sEnumInfo));\\n-}\\n-\\n-//----------------------------------------------------------------------\\n // nsIDOMNode methods\\n \\n NS_IMPL_ELEMENT_CLONE_WITH_INIT(nsSVGFETurbulenceElement)\\n@@ -3196,9 +3176,7 @@ NS_IMETHODIMP nsSVGFETurbulenceElement::GetBaseFrequencyY(nsIDOMSVGAnimatedNumbe\\n /* readonly attribute nsIDOMSVGAnimatedInteger numOctaves; */\\n NS_IMETHODIMP nsSVGFETurbulenceElement::GetNumOctaves(nsIDOMSVGAnimatedInteger * *aNum)\\n {\\n-  *aNum = mNumOctaves;\\n-  NS_IF_ADDREF(*aNum);\\n-  return NS_OK;\\n+  return mIntegerAttributes[OCTAVES].ToDOMAnimatedInteger(aNum, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedNumber seed; */\\n@@ -3236,18 +3214,6 @@ nsSVGFETurbulenceElement::ParseAttribute(PRInt32 aNameSpaceID, nsIAtom* aName,\\n                                                       aValue, aResult);\\n }\\n \\n-nsresult\\n-nsSVGFETurbulenceElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                                    PRBool aNotify)\\n-{\\n-  if (aNamespaceID == kNameSpaceID_None && aName == nsGkAtoms::numOctaves) {\\n-    mNumOctaves->SetBaseVal(1);\\n-    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n-  }\\n-\\n-  return nsSVGFETurbulenceElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n-}\\n-\\n NS_IMETHODIMP\\n nsSVGFETurbulenceElement::Filter(nsSVGFilterInstance *instance)\\n {\\n@@ -3276,9 +3242,9 @@ nsSVGFETurbulenceElement::Filter(nsSVGFilterInstance *instance)\\n   PRUint16 stitch = mEnumAttributes[STITCHTILES].GetAnimValue();\\n \\n   GetAnimatedNumberValues(&fX, &fY, &seed, nsnull);\\n-  mNumOctaves->GetAnimVal(&octaves);\\n+  GetAnimatedIntegerValues(&octaves, nsnull);\\n \\n-  Init((PRInt32)seed);\\n+  InitSeed((PRInt32)seed);\\n \\n   float filterX, filterY, filterWidth, filterHeight;\\n   instance->GetFilterBox(&filterX, &filterY, &filterWidth, &filterHeight);\\n@@ -3350,7 +3316,7 @@ nsSVGFETurbulenceElement::GetRequirements(PRUint32 *aRequirements)\\n }\\n \\n void\\n-nsSVGFETurbulenceElement::Init(PRInt32 aSeed)\\n+nsSVGFETurbulenceElement::InitSeed(PRInt32 aSeed)\\n {\\n   double s;\\n   int i, j, k;\\n@@ -3514,6 +3480,20 @@ nsSVGFETurbulenceElement::GetNumberInfo()\\n                               NS_ARRAY_LENGTH(sNumberInfo));\\n }\\n \\n+nsSVGElement::IntegerAttributesInfo\\n+nsSVGFETurbulenceElement::GetIntegerInfo()\\n+{\\n+  return IntegerAttributesInfo(mIntegerAttributes, sIntegerInfo,\\n+                               NS_ARRAY_LENGTH(sIntegerInfo));\\n+}\\n+\\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGFETurbulenceElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //---------------------Morphology------------------------\\n \\n typedef nsSVGFE nsSVGFEMorphologyElementBase;\\n@@ -3860,21 +3840,22 @@ protected:\\n   }\\n \\n   virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual IntegerAttributesInfo GetIntegerInfo();\\n   virtual EnumAttributesInfo GetEnumInfo();\\n \\n   enum { DIVISOR, BIAS, KERNEL_UNIT_LENGTH_X, KERNEL_UNIT_LENGTH_Y };\\n   nsSVGNumber2 mNumberAttributes[4];\\n   static NumberInfo sNumberInfo[4];\\n \\n+  enum { ORDER_X, ORDER_Y, TARGET_X, TARGET_Y };\\n+  nsSVGInteger mIntegerAttributes[4];\\n+  static IntegerInfo sIntegerInfo[4];\\n+\\n   enum { EDGEMODE };\\n   nsSVGEnum mEnumAttributes[1];\\n   static nsSVGEnumMapping sEdgeModeMap[];\\n   static EnumInfo sEnumInfo[1];\\n \\n-  nsCOMPtr<nsIDOMSVGAnimatedInteger> mOrderX;\\n-  nsCOMPtr<nsIDOMSVGAnimatedInteger> mOrderY;\\n-  nsCOMPtr<nsIDOMSVGAnimatedInteger> mTargetX;\\n-  nsCOMPtr<nsIDOMSVGAnimatedInteger> mTargetY;\\n   nsCOMPtr<nsIDOMSVGAnimatedNumberList>  mKernelMatrix;\\n   nsCOMPtr<nsIDOMSVGAnimatedBoolean> mPreserveAlpha;\\n \\n@@ -3889,6 +3870,14 @@ nsSVGElement::NumberInfo nsSVGFEConvolveMatrixElement::sNumberInfo[4] =\\n   { &nsGkAtoms::kernelUnitLength, 0 }\\n };\\n \\n+nsSVGElement::IntegerInfo nsSVGFEConvolveMatrixElement::sIntegerInfo[4] =\\n+{\\n+  { &nsGkAtoms::order, 0 },\\n+  { &nsGkAtoms::order, 0 },\\n+  { &nsGkAtoms::targetX, 0 },\\n+  { &nsGkAtoms::targetY, 0 }\\n+};\\n+\\n nsSVGEnumMapping nsSVGFEConvolveMatrixElement::sEdgeModeMap[] = {\\n   {&nsGkAtoms::duplicate, nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_DUPLICATE},\\n   {&nsGkAtoms::wrap, nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_WRAP},\\n@@ -3944,29 +3933,6 @@ nsSVGFEConvolveMatrixElement::Init()\\n     NS_ENSURE_SUCCESS(rv,rv);\\n   }\\n \\n-  {\\n-    rv = NS_NewSVGAnimatedInteger(getter_AddRefs(mOrderX), 0);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedInteger(getter_AddRefs(mOrderY), 0);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  // DOM property: targetX , #IMPLIED attrib: targetX\\n-  {\\n-    rv = NS_NewSVGAnimatedInteger(getter_AddRefs(mTargetX), 0);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::targetX, mTargetX);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  // DOM property: targetY , #IMPLIED attrib: targetY\\n-  {\\n-    rv = NS_NewSVGAnimatedInteger(getter_AddRefs(mTargetY), 0);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::targetY, mTargetY);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n   // DOM property: preserveAlpha , #IMPLIED attrib: preserveAlpha\\n   {\\n     rv = NS_NewSVGAnimatedBoolean(getter_AddRefs(mPreserveAlpha), PR_FALSE);\\n@@ -4003,16 +3969,12 @@ NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetIn1(nsIDOMSVGAnimatedString * *aI\\n \\n NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetOrderX(nsIDOMSVGAnimatedInteger * *aOrderX)\\n {\\n-  *aOrderX = mOrderX;\\n-  NS_IF_ADDREF(*aOrderX);\\n-  return NS_OK;\\n+  return mIntegerAttributes[ORDER_X].ToDOMAnimatedInteger(aOrderX, this);\\n }\\n \\n NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetOrderY(nsIDOMSVGAnimatedInteger * *aOrderY)\\n {\\n-  *aOrderY = mOrderY;\\n-  NS_IF_ADDREF(*aOrderY);\\n-  return NS_OK;\\n+  return mIntegerAttributes[ORDER_Y].ToDOMAnimatedInteger(aOrderY, this);\\n }\\n \\n NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetKernelMatrix(nsIDOMSVGAnimatedNumberList * *aKernelMatrix)\\n@@ -4024,16 +3986,12 @@ NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetKernelMatrix(nsIDOMSVGAnimatedNum\\n \\n NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetTargetX(nsIDOMSVGAnimatedInteger * *aTargetX)\\n {\\n-  *aTargetX = mTargetX;\\n-  NS_IF_ADDREF(*aTargetX);\\n-  return NS_OK;\\n+  return mIntegerAttributes[TARGET_X].ToDOMAnimatedInteger(aTargetX, this);\\n }\\n \\n NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetTargetY(nsIDOMSVGAnimatedInteger * *aTargetY)\\n {\\n-  *aTargetY = mTargetY;\\n-  NS_IF_ADDREF(*aTargetY);\\n-  return NS_OK;\\n+  return mIntegerAttributes[TARGET_Y].ToDOMAnimatedInteger(aTargetY, this);\\n }\\n \\n NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetEdgeMode(nsIDOMSVGAnimatedEnumeration * *aEdgeMode)\\n@@ -4111,13 +4069,18 @@ nsSVGFEConvolveMatrixElement::ParseAttribute(PRInt32 aNameSpaceID, nsIAtom* aNam\\n       }\\n     }\\n \\n-    mOrderX->SetBaseVal(x);\\n-    mOrderY->SetBaseVal(y);\\n-\\n     if (parseError) {\\n       ReportAttributeParseFailure(GetOwnerDoc(), aName, aValue);\\n-      return PR_FALSE;\\n+      x = sIntegerInfo[ORDER_X].mDefaultValue;\\n+      y = sIntegerInfo[ORDER_Y].mDefaultValue;\\n     }\\n+\\n+    mIntegerAttributes[ORDER_X].SetBaseValue(x, this, PR_FALSE);\\n+    mIntegerAttributes[ORDER_Y].SetBaseValue(y, this, PR_FALSE);\\n+\\n+    if (parseError)\\n+      return PR_FALSE;\\n+\\n     aResult.SetTo(aValue);\\n     return PR_TRUE;\\n   }\\n@@ -4137,28 +4100,11 @@ nsSVGFEConvolveMatrixElement::ParseAttribute(PRInt32 aNameSpaceID, nsIAtom* aNam\\n \\n nsresult\\n nsSVGFEConvolveMatrixElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                                    PRBool aNotify)\\n-{\\n-  if (aNamespaceID == kNameSpaceID_None) {\\n-    PRBool processed = PR_FALSE;\\n-    if (aName == nsGkAtoms::order) {\\n-      mOrderX->SetBaseVal(0);\\n-      mOrderY->SetBaseVal(0);\\n-      processed = PR_TRUE;\\n-    } else if (aName == nsGkAtoms::targetX) {\\n-      mTargetX->SetBaseVal(0);\\n-      processed = PR_TRUE;\\n-    } else if (aName == nsGkAtoms::targetY) {\\n-      mTargetY->SetBaseVal(0);\\n-      processed = PR_TRUE;\\n-    } else if (aName == nsGkAtoms::preserveAlpha) {\\n-      mPreserveAlpha->SetBaseVal(PR_FALSE);\\n-      processed = PR_TRUE;\\n-    }\\n-\\n-    if (processed) {\\n-      return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n-    }\\n+                                        PRBool aNotify)\\n+{\\n+  if (aNamespaceID == kNameSpaceID_None && aName == nsGkAtoms::preserveAlpha) {\\n+    mPreserveAlpha->SetBaseVal(PR_FALSE);\\n+    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n   }\\n \\n   return nsSVGFEConvolveMatrixElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n@@ -4247,23 +4193,21 @@ nsSVGFEConvolveMatrixElement::Filter(nsSVGFilterInstance *instance)\\n   }\\n \\n   PRInt32 orderX, orderY;\\n-  mOrderX->GetAnimVal(&orderX);\\n-  mOrderY->GetAnimVal(&orderY);\\n+  PRInt32 targetX, targetY;\\n+  GetAnimatedIntegerValues(&orderX, &orderY, &targetX, &targetY, nsnull);\\n+\\n   if (orderX <= 0 || orderY <= 0 ||\\n       static_cast<PRUint32>(orderX * orderY) != num) {\\n     return NS_ERROR_FAILURE;\\n   }\\n \\n-  PRInt32 targetX, targetY;\\n   if (HasAttr(kNameSpaceID_None, nsGkAtoms::targetX)) {\\n-    mTargetX->GetAnimVal(&targetX);\\n     if (targetX < 0 || targetX >= orderX)\\n       return NS_ERROR_FAILURE;\\n   } else {\\n     targetX = orderX / 2;\\n   }\\n   if (HasAttr(kNameSpaceID_None, nsGkAtoms::targetY)) {\\n-    mTargetY->GetAnimVal(&targetY);\\n     if (targetY < 0 || targetY >= orderY)\\n       return NS_ERROR_FAILURE;\\n   } else {\\n@@ -4355,6 +4299,13 @@ nsSVGFEConvolveMatrixElement::GetNumberInfo()\\n                               NS_ARRAY_LENGTH(sNumberInfo));\\n }\\n \\n+nsSVGElement::IntegerAttributesInfo\\n+nsSVGFEConvolveMatrixElement::GetIntegerInfo()\\n+{\\n+  return IntegerAttributesInfo(mIntegerAttributes, sIntegerInfo,\\n+                               NS_ARRAY_LENGTH(sIntegerInfo));\\n+}\\n+\\n nsSVGElement::EnumAttributesInfo\\n nsSVGFEConvolveMatrixElement::GetEnumInfo()\\n {\\ndiff --git a/content/svg/content/src/nsSVGAnimatedInteger.h b/content/svg/content/src/nsSVGInteger.cpp\\nold mode 100644\\nnew mode 100755\\nsimilarity index 51%\\nrename from content/svg/content/src/nsSVGAnimatedInteger.h\\nrename to content/svg/content/src/nsSVGInteger.cpp\\nindex b0ce768..d042e2ba\\n--- a/content/svg/content/src/nsSVGAnimatedInteger.h\\n+++ b/content/svg/content/src/nsSVGInteger.cpp\\n@@ -14,9 +14,8 @@\\n  *\\n  * The Original Code is the Mozilla SVG project.\\n  *\\n- * The Initial Developer of the Original Code is\\n- * IBM Corporation.\\n- * Portions created by the Initial Developer are Copyright (C) 2005\\n+ * The Initial Developer of the Original Code is Robert Longson.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n  * the Initial Developer. All Rights Reserved.\\n  *\\n  * Contributor(s):\\n@@ -33,21 +32,64 @@\\n  * the provisions above, a recipient may use your version of this file under\\n  * the terms of any one of the MPL, the GPL or the LGPL.\\n  *\\n- * Parts of this file contain code derived from the following files(s)\\n- * of the Mozilla SVG project (these parts are Copyright (C) by their\\n- * respective copyright-holders):\\n- *    content/svg/content/src/nsSVGAnimatedNumber.h\\n- *\\n  * ***** END LICENSE BLOCK ***** */\\n \\n-#ifndef __NS_SVGANIMATEDINTEGER_H__\\n-#define __NS_SVGANIMATEDINTEGER_H__\\n+#include \\\"nsSVGInteger.h\\\"\\n+#include \\\"nsTextFormatter.h\\\"\\n+#include \\\"prdtoa.h\\\"\\n+\\n+NS_IMPL_ADDREF(nsSVGInteger::DOMAnimatedInteger)\\n+NS_IMPL_RELEASE(nsSVGInteger::DOMAnimatedInteger)\\n+\\n+NS_INTERFACE_MAP_BEGIN(nsSVGInteger::DOMAnimatedInteger)\\n+  NS_INTERFACE_MAP_ENTRY(nsIDOMSVGAnimatedInteger)\\n+  NS_INTERFACE_MAP_ENTRY(nsISupports)\\n+  NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO(SVGAnimatedInteger)\\n+NS_INTERFACE_MAP_END\\n+\\n+/* Implementation */\\n+\\n+nsresult\\n+nsSVGInteger::SetBaseValueString(const nsAString &aValueAsString,\\n+                                 nsSVGElement *aSVGElement,\\n+                                 PRBool aDoSetAttr)\\n+{\\n+  nsAutoString s;\\n+  s.Assign(aValueAsString);\\n+  PRInt32 err;\\n+  PRInt32 val = s.ToInteger(&err);\\n+  nsresult rv = static_cast<nsresult>(err);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+  mBaseVal = mAnimVal = val;\\n+  return NS_OK;\\n+}\\n \\n-#include \\\"nsIDOMSVGAnimatedInteger.h\\\"\\n+void\\n+nsSVGInteger::GetBaseValueString(nsAString & aValueAsString)\\n+{\\n+  nsAutoString s;\\n+  s.AppendInt(mBaseVal);\\n+  aValueAsString.Assign(s);\\n+}\\n \\n-nsresult NS_NewSVGAnimatedInteger(nsIDOMSVGAnimatedInteger** result,\\n-                                 PRInt32 baseVal);\\n+void\\n+nsSVGInteger::SetBaseValue(int aValue,\\n+                           nsSVGElement *aSVGElement,\\n+                           PRBool aDoSetAttr)\\n+{\\n+  mAnimVal = mBaseVal = aValue;\\n+  aSVGElement->DidChangeInteger(mAttrEnum, aDoSetAttr);\\n+}\\n \\n-#endif //__NS_SVGANIMATEDINTEGER_H__\\n+nsresult\\n+nsSVGInteger::ToDOMAnimatedInteger(nsIDOMSVGAnimatedInteger **aResult,\\n+                                   nsSVGElement *aSVGElement)\\n+{\\n+  *aResult = new DOMAnimatedInteger(this, aSVGElement);\\n+  if (!*aResult)\\n+    return NS_ERROR_OUT_OF_MEMORY;\\n \\n+  NS_ADDREF(*aResult);\\n+  return NS_OK;\\n+}\\n \\ndiff --git a/content/svg/content/src/nsSVGInteger.h b/content/svg/content/src/nsSVGInteger.h\\nnew file mode 100755\\nindex 0000000..3408300\\n--- /dev/null\\n+++ b/content/svg/content/src/nsSVGInteger.h\\n@@ -0,0 +1,93 @@\\n+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is the Mozilla SVG project.\\n+ *\\n+ * The Initial Developer of the Original Code is Robert Longson.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either of the GNU General Public License Version 2 or later (the \\\"GPL\\\"),\\n+ * or the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+#ifndef __NS_SVGINTEGER_H__\\n+#define __NS_SVGINTEGER_H__\\n+\\n+#include \\\"nsIDOMSVGAnimatedInteger.h\\\"\\n+#include \\\"nsSVGElement.h\\\"\\n+#include \\\"nsDOMError.h\\\"\\n+\\n+class nsSVGInteger\\n+{\\n+\\n+public:\\n+  void Init(PRUint8 aAttrEnum = 0xff, PRInt32 aValue = 0) {\\n+    mAnimVal = mBaseVal = aValue;\\n+    mAttrEnum = aAttrEnum;\\n+  }\\n+\\n+  nsresult SetBaseValueString(const nsAString& aValue,\\n+                              nsSVGElement *aSVGElement,\\n+                              PRBool aDoSetAttr);\\n+  void GetBaseValueString(nsAString& aValue);\\n+\\n+  void SetBaseValue(PRInt32 aValue, nsSVGElement *aSVGElement, PRBool aDoSetAttr);\\n+  PRInt32 GetBaseValue() const\\n+    { return mBaseVal; }\\n+  PRInt32 GetAnimValue() const\\n+    { return mAnimVal; }\\n+\\n+  nsresult ToDOMAnimatedInteger(nsIDOMSVGAnimatedInteger **aResult,\\n+                                nsSVGElement* aSVGElement);\\n+\\n+private:\\n+\\n+  PRInt32 mAnimVal;\\n+  PRInt32 mBaseVal;\\n+  PRUint8 mAttrEnum; // element specified tracking for attribute\\n+\\n+  struct DOMAnimatedInteger : public nsIDOMSVGAnimatedInteger\\n+  {\\n+    NS_DECL_ISUPPORTS\\n+\\n+    DOMAnimatedInteger(nsSVGInteger* aVal, nsSVGElement *aSVGElement)\\n+      : mVal(aVal), mSVGElement(aSVGElement) {}\\n+\\n+    nsSVGInteger* mVal; // kept alive because it belongs to content\\n+    nsRefPtr<nsSVGElement> mSVGElement;\\n+\\n+    NS_IMETHOD GetBaseVal(PRInt32* aResult)\\n+      { *aResult = mVal->GetBaseValue(); return NS_OK; }\\n+    NS_IMETHOD SetBaseVal(PRInt32 aValue)\\n+      { mVal->SetBaseValue(aValue, mSVGElement, PR_TRUE); return NS_OK; }\\n+    NS_IMETHOD GetAnimVal(PRInt32* aResult)\\n+      { *aResult = mVal->GetAnimValue(); return NS_OK; }\\n+\\n+  };\\n+\\n+};\\n+#endif //__NS_SVGINTEGER_H__\\ndiff --git a/layout/svg/base/src/nsSVGFilterFrame.cpp b/layout/svg/base/src/nsSVGFilterFrame.cpp\\nindex 2661b6c..719bcc3 100644\\n--- a/layout/svg/base/src/nsSVGFilterFrame.cpp\\n+++ b/layout/svg/base/src/nsSVGFilterFrame.cpp\\n@@ -41,7 +41,6 @@\\n #include \\\"nsSVGOuterSVGFrame.h\\\"\\n #include \\\"nsISVGFilter.h\\\"\\n #include \\\"nsGkAtoms.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedInteger.h\\\"\\n #include \\\"nsSVGUtils.h\\\"\\n #include \\\"nsSVGFilterElement.h\\\"\\n #include \\\"nsSVGFilterInstance.h\\\"\\n@@ -170,8 +169,7 @@ nsSVGFilterFrame::FilterPaint(nsSVGRenderState *aContext,\\n \\n   if (mContent->HasAttr(kNameSpaceID_None, nsGkAtoms::filterRes)) {\\n     PRInt32 filterResX, filterResY;\\n-    filter->mFilterResX->GetAnimVal(&filterResX);\\n-    filter->mFilterResY->GetAnimVal(&filterResY);\\n+    filter->GetAnimatedIntegerValues(&filterResX, &filterResY, nsnull);\\n \\n     filterRes =\\n       nsSVGUtils::ConvertToSurfaceSize(gfxSize(filterResX, filterResY),\\n\""}