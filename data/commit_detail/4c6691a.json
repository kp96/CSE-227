{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas4c6691a\""},"diff":"\"4c6691a Bug 397607 - \\\"libXss.so.1 is unloaded while an XESetCloseDisplay callback is still registered\\\" [p=karlt r+sr+a1.9=roc]\\ndiff --git a/widget/src/gtk2/nsIdleServiceGTK.cpp b/widget/src/gtk2/nsIdleServiceGTK.cpp\\nindex 0d5dd21..7301c5d 100644\\n--- a/widget/src/gtk2/nsIdleServiceGTK.cpp\\n+++ b/widget/src/gtk2/nsIdleServiceGTK.cpp\\n@@ -57,7 +57,7 @@ typedef XScreenSaverInfo* (*_XScreenSaverAllocInfo_fn)(void);\\n typedef void (*_XScreenSaverQueryInfo_fn)(Display* dpy, Drawable drw,\\n                                           XScreenSaverInfo *info);\\n \\n-static PRLibrary* xsslib = nsnull;\\n+static PRBool sInitialized = PR_FALSE;\\n static _XScreenSaverQueryExtension_fn _XSSQueryExtension = nsnull;\\n static _XScreenSaverAllocInfo_fn _XSSAllocInfo = nsnull;\\n static _XScreenSaverQueryInfo_fn _XSSQueryInfo = nsnull;\\n@@ -68,13 +68,17 @@ NS_IMPL_ISUPPORTS1(nsIdleServiceGTK, nsIIdleService)\\n nsIdleServiceGTK::nsIdleServiceGTK()\\n     : mXssInfo(nsnull)\\n {\\n-    NS_ASSERTION(!xsslib, \\\"created two instances of the idle service\\\");\\n+}\\n+\\n+static void Initialize()\\n+{\\n+    sInitialized = PR_TRUE;\\n #ifdef PR_LOGGING\\n-    if (!sIdleLog)\\n-        sIdleLog = PR_NewLogModule(\\\"nsIIdleService\\\");\\n+    sIdleLog = PR_NewLogModule(\\\"nsIIdleService\\\");\\n #endif\\n \\n-    xsslib = PR_LoadLibrary(\\\"libXss.so.1\\\");\\n+    // This will leak - See comments in ~nsIdleServiceGTK().\\n+    PRLibrary* xsslib = PR_LoadLibrary(\\\"libXss.so.1\\\");\\n     if (!xsslib) // ouch.\\n     {\\n #ifdef PR_LOGGING\\n@@ -97,39 +101,47 @@ nsIdleServiceGTK::nsIdleServiceGTK()\\n     if (!_XSSQueryInfo)\\n         PR_LOG(sIdleLog, PR_LOG_WARNING, (\\\"Failed to get XSSQueryInfo!\\\\n\\\"));\\n #endif\\n- \\n }\\n \\n nsIdleServiceGTK::~nsIdleServiceGTK()\\n {\\n     if (mXssInfo)\\n         XFree(mXssInfo);\\n+\\n+// It is not safe to unload libXScrnSaver until each display is closed because\\n+// the library registers callbacks through XESetCloseDisplay (Bug 397607).\\n+// (Also the library and its functions are scoped for the file not the object.)\\n+#if 0\\n     if (xsslib) {\\n         PR_UnloadLibrary(xsslib);\\n         xsslib = nsnull;\\n     }\\n+#endif\\n }\\n \\n NS_IMETHODIMP\\n nsIdleServiceGTK::GetIdleTime(PRUint32 *aTimeDiff)\\n {\\n     // Ask xscreensaver about idle time:\\n-    int event_base, error_base;\\n     *aTimeDiff = 0;\\n \\n     // We might not have a display (cf. in xpcshell)\\n     Display *dplay = GDK_DISPLAY();\\n-    if (!dplay || !_XSSQueryExtension || !_XSSAllocInfo || !_XSSQueryInfo)\\n-    {\\n+    if (!dplay) {\\n #ifdef PR_LOGGING\\n-        if (!dplay)\\n-            PR_LOG(sIdleLog, PR_LOG_WARNING, (\\\"No display found!\\\\n\\\"));\\n-        else\\n-            PR_LOG(sIdleLog, PR_LOG_WARNING, (\\\"One of the Xss functions is missing!\\\\n\\\"));\\n+        PR_LOG(sIdleLog, PR_LOG_WARNING, (\\\"No display found!\\\\n\\\"));\\n #endif\\n         return NS_ERROR_FAILURE;\\n     }\\n \\n+    if (!sInitialized) {\\n+        Initialize();\\n+    }\\n+    if (!_XSSQueryExtension || !_XSSAllocInfo || !_XSSQueryInfo) {\\n+        return NS_ERROR_FAILURE;\\n+    }\\n+\\n+    int event_base, error_base;\\n     if (_XSSQueryExtension(dplay, &event_base, &error_base))\\n     {\\n         if (!mXssInfo)\\n\""}