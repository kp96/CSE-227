{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas6d4f3a6\""},"diff":"\"6d4f3a6 Backout of 320622.\\ndiff --git a/content/svg/content/src/nsSVGAnimatedString.cpp b/content/svg/content/src/nsSVGAnimatedString.cpp\\nindex cec6167..e0ea3e1 100644\\n--- a/content/svg/content/src/nsSVGAnimatedString.cpp\\n+++ b/content/svg/content/src/nsSVGAnimatedString.cpp\\n@@ -41,13 +41,49 @@\\n #include \\\"nsSVGAnimatedString.h\\\"\\n #include \\\"nsContentUtils.h\\\"\\n \\n+\\n+////////////////////////////////////////////////////////////////////////\\n+// nsSVGAnimatedString\\n+\\n+class nsSVGAnimatedString : public nsIDOMSVGAnimatedString,\\n+                            public nsSVGValue\\n+{\\n+protected:\\n+  friend nsresult NS_NewSVGAnimatedString(nsIDOMSVGAnimatedString** result);\\n+  nsSVGAnimatedString();\\n+  ~nsSVGAnimatedString();\\n+  void Init();\\n+  \\n+public:\\n+  // nsISupports interface:\\n+  NS_DECL_ISUPPORTS\\n+\\n+  // nsIDOMSVGAnimatedString interface:\\n+  NS_DECL_NSIDOMSVGANIMATEDSTRING\\n+\\n+  // remainder of nsISVGValue interface:\\n+  NS_IMETHOD SetValueString(const nsAString& aValue);\\n+  NS_IMETHOD GetValueString(nsAString& aValue);\\n+\\n+protected:\\n+  nsString mBaseVal;\\n+};\\n+\\n+\\n //----------------------------------------------------------------------\\n // Implementation\\n \\n+nsSVGAnimatedString::nsSVGAnimatedString()\\n+{\\n+}\\n+\\n+nsSVGAnimatedString::~nsSVGAnimatedString()\\n+{\\n+}\\n+\\n void\\n-nsSVGAnimatedString::Clear()\\n+nsSVGAnimatedString::Init()\\n {\\n-  mBaseVal.Truncate();\\n }\\n \\n //----------------------------------------------------------------------\\n@@ -121,6 +157,8 @@ NS_NewSVGAnimatedString(nsIDOMSVGAnimatedString** aResult)\\n   if(!animatedString) return NS_ERROR_OUT_OF_MEMORY;\\n   NS_ADDREF(animatedString);\\n \\n+  animatedString->Init();\\n+  \\n   *aResult = (nsIDOMSVGAnimatedString*) animatedString;\\n   \\n   return NS_OK;\\ndiff --git a/content/svg/content/src/nsSVGAnimatedString.h b/content/svg/content/src/nsSVGAnimatedString.h\\nindex b7bae38..6068566 100644\\n--- a/content/svg/content/src/nsSVGAnimatedString.h\\n+++ b/content/svg/content/src/nsSVGAnimatedString.h\\n@@ -40,34 +40,10 @@\\n #define __NS_SVGANIMATEDSTRING_H__\\n \\n #include \\\"nsIDOMSVGAnimatedString.h\\\"\\n-#include \\\"nsSVGValue.h\\\"\\n \\n nsresult NS_NewSVGAnimatedString(nsIDOMSVGAnimatedString** result);\\n \\n-////////////////////////////////////////////////////////////////////////\\n-// nsSVGAnimatedString\\n \\n-class nsSVGAnimatedString : public nsIDOMSVGAnimatedString,\\n-                            public nsSVGValue\\n-{\\n-protected:\\n-  friend nsresult NS_NewSVGAnimatedString(nsIDOMSVGAnimatedString** result);\\n \\n-public:\\n-  // nsISupports interface:\\n-  NS_DECL_ISUPPORTS\\n-\\n-  // nsIDOMSVGAnimatedString interface:\\n-  NS_DECL_NSIDOMSVGANIMATEDSTRING\\n-\\n-  // remainder of nsISVGValue interface:\\n-  NS_IMETHOD SetValueString(const nsAString& aValue);\\n-  NS_IMETHOD GetValueString(nsAString& aValue);\\n-\\n-  void Clear();\\n-\\n-protected:\\n-  nsString mBaseVal;\\n-};\\n \\n #endif //__NS_SVGANIMATEDSTRING_H__\\ndiff --git a/content/svg/content/src/nsSVGElement.cpp b/content/svg/content/src/nsSVGElement.cpp\\nindex 165963f..6d861cf 100644\\n--- a/content/svg/content/src/nsSVGElement.cpp\\n+++ b/content/svg/content/src/nsSVGElement.cpp\\n@@ -69,25 +69,6 @@\\n #include \\\"nsSVGNumber2.h\\\"\\n #include \\\"nsSVGEnum.h\\\"\\n #include \\\"nsIDOMSVGUnitTypes.h\\\"\\n-#include \\\"nsIDOMSVGAngle.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedAngle.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedBoolean.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedInteger.h\\\"\\n-#include \\\"nsIDOMSVGLength.h\\\"\\n-#include \\\"nsIDOMSVGLengthList.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedLengthList.h\\\"\\n-#include \\\"nsIDOMSVGNumberList.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedNumberList.h\\\"\\n-#include \\\"nsIDOMSVGPointList.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedPoints.h\\\"\\n-#include \\\"nsIDOMSVGPresAspectRatio.h\\\"\\n-#include \\\"nsIDOMSVGAnimPresAspRatio.h\\\"\\n-#include \\\"nsIDOMSVGTransformList.h\\\"\\n-#include \\\"nsIDOMSVGAnimTransformList.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedString.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedRect.h\\\"\\n-#include \\\"nsSVGRect.h\\\"\\n-#include \\\"nsSVGAnimatedString.h\\\"\\n #include <stdarg.h>\\n \\n nsSVGEnumMapping nsSVGElement::sSVGUnitTypesMap[] = {\\n@@ -336,62 +317,6 @@ nsSVGElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n           break;\\n         }\\n       }\\n-\\n-      // Now check for one of the old style basetypes going away\\n-      nsCOMPtr<nsISVGValue> svg_value = GetMappedAttribute(aNamespaceID, aName);\\n-\\n-      if (svg_value) {\\n-#ifdef DEBUG_tor\\n-        nsCOMPtr<nsIDOMSVGAnimatedAngle> a = do_QueryInterface(svg_value);\\n-        NS_ASSERTION(!a, \\\"must provide element processing for unset angle\\\");\\n-\\n-        nsCOMPtr<nsIDOMSVGAnimatedBoolean> b = do_QueryInterface(svg_value);\\n-        NS_ASSERTION(!b, \\\"must provide element processing for unset boolean\\\");\\n-\\n-        nsCOMPtr<nsIDOMSVGAnimatedInteger> i = do_QueryInterface(svg_value);\\n-        NS_ASSERTION(!i, \\\"must provide element processing for unset integer\\\");\\n-#endif\\n-\\n-        nsCOMPtr<nsIDOMSVGAnimatedRect> r = do_QueryInterface(svg_value);\\n-        if (r) {\\n-          nsIDOMSVGRect *rect;\\n-          r->GetBaseVal(&rect);\\n-          static_cast<nsSVGRect*>(rect)->Clear();\\n-        }\\n-        nsCOMPtr<nsIDOMSVGAnimatedPreserveAspectRatio> ar = do_QueryInterface(svg_value);\\n-        if (ar) {\\n-          nsIDOMSVGPreserveAspectRatio *par;\\n-          ar->GetBaseVal(&par);\\n-          par->SetAlign(nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMIDYMID);\\n-          par->SetMeetOrSlice(nsIDOMSVGPreserveAspectRatio::SVG_MEETORSLICE_MEET);\\n-        }\\n-        nsCOMPtr<nsIDOMSVGAnimatedString> s = do_QueryInterface(svg_value);\\n-        if (s) {\\n-          static_cast<nsSVGAnimatedString*>(s.get())->Clear();\\n-        }\\n-        nsCOMPtr<nsIDOMSVGPointList> pl = do_QueryInterface(svg_value);\\n-        if (pl) {\\n-          pl->Clear();\\n-        }\\n-        nsCOMPtr<nsIDOMSVGAnimatedLengthList> ll = do_QueryInterface(svg_value);\\n-        if (ll) {\\n-          nsIDOMSVGLengthList *lengthlist;\\n-          ll->GetBaseVal(&lengthlist);\\n-          lengthlist->Clear();\\n-        }\\n-        nsCOMPtr<nsIDOMSVGAnimatedNumberList> nl = do_QueryInterface(svg_value);\\n-        if (nl) {\\n-          nsIDOMSVGNumberList *numberlist;\\n-          nl->GetBaseVal(&numberlist);\\n-          numberlist->Clear();\\n-        }\\n-        nsCOMPtr<nsIDOMSVGAnimatedTransformList> tl = do_QueryInterface(svg_value);\\n-        if (tl) {\\n-          nsIDOMSVGTransformList *transform;\\n-          tl->GetBaseVal(&transform);\\n-          transform->Clear();\\n-        }\\n-      }\\n     }\\n   }\\n \\ndiff --git a/content/svg/content/src/nsSVGFilterElement.cpp b/content/svg/content/src/nsSVGFilterElement.cpp\\nindex 6845bbb..25b49a7f 100644\\n--- a/content/svg/content/src/nsSVGFilterElement.cpp\\n+++ b/content/svg/content/src/nsSVGFilterElement.cpp\\n@@ -238,20 +238,6 @@ nsSVGFilterElement::SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n   return rv;\\n }\\n \\n-nsresult\\n-nsSVGFilterElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                              PRBool aNotify)\\n-{\\n-  if (aName == nsGkAtoms::filterRes && aNamespaceID == kNameSpaceID_None) {\\n-    mFilterResX->SetBaseVal(0);\\n-    mFilterResY->SetBaseVal(0);\\n-\\n-    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n-  }\\n-\\n-  return nsSVGFilterElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n-}\\n-\\n NS_IMETHODIMP_(PRBool)\\n nsSVGFilterElement::IsAttributeMapped(const nsIAtom* name) const\\n {\\ndiff --git a/content/svg/content/src/nsSVGFilterElement.h b/content/svg/content/src/nsSVGFilterElement.h\\nindex b4d418b..bb115ff 100644\\n--- a/content/svg/content/src/nsSVGFilterElement.h\\n+++ b/content/svg/content/src/nsSVGFilterElement.h\\n@@ -79,8 +79,6 @@ public:\\n   virtual nsresult SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n                            nsIAtom* aPrefix, const nsAString& aValue,\\n                            PRBool aNotify);\\n-  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                             PRBool aNotify);\\n \\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n   NS_IMETHOD_(PRBool) IsAttributeMapped(const nsIAtom* aAttribute) const;\\ndiff --git a/content/svg/content/src/nsSVGFilters.cpp b/content/svg/content/src/nsSVGFilters.cpp\\nindex 8072de0..0aa2e39 100644\\n--- a/content/svg/content/src/nsSVGFilters.cpp\\n+++ b/content/svg/content/src/nsSVGFilters.cpp\\n@@ -3010,8 +3010,6 @@ public:\\n                                 const nsAString& aValue,\\n                                 nsAttrValue& aResult);\\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n-  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                             PRBool aNotify);\\n \\n protected:\\n   virtual NumberAttributesInfo GetNumberInfo();\\n@@ -3236,18 +3234,6 @@ nsSVGFETurbulenceElement::ParseAttribute(PRInt32 aNameSpaceID, nsIAtom* aName,\\n                                                       aValue, aResult);\\n }\\n \\n-nsresult\\n-nsSVGFETurbulenceElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                                    PRBool aNotify)\\n-{\\n-  if (aNamespaceID == kNameSpaceID_None && aName == nsGkAtoms::numOctaves) {\\n-    mNumOctaves->SetBaseVal(1);\\n-    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n-  }\\n-\\n-  return nsSVGFETurbulenceElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n-}\\n-\\n NS_IMETHODIMP\\n nsSVGFETurbulenceElement::Filter(nsSVGFilterInstance *instance)\\n {\\n@@ -3849,8 +3835,6 @@ public:\\n                                 const nsAString& aValue,\\n                                 nsAttrValue& aResult);\\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n-  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                             PRBool aNotify);\\n \\n protected:\\n   virtual PRBool OperatesOnPremultipledAlpha() {\\n@@ -3967,7 +3951,7 @@ nsSVGFEConvolveMatrixElement::Init()\\n     NS_ENSURE_SUCCESS(rv,rv);\\n   }\\n \\n-  // DOM property: preserveAlpha , #IMPLIED attrib: preserveAlpha\\n+  // DOM property: targetY , #IMPLIED attrib: targetY\\n   {\\n     rv = NS_NewSVGAnimatedBoolean(getter_AddRefs(mPreserveAlpha), PR_FALSE);\\n     NS_ENSURE_SUCCESS(rv,rv);\\n@@ -4135,35 +4119,6 @@ nsSVGFEConvolveMatrixElement::ParseAttribute(PRInt32 aNameSpaceID, nsIAtom* aNam\\n                                                           aValue, aResult);\\n }\\n \\n-nsresult\\n-nsSVGFEConvolveMatrixElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                                    PRBool aNotify)\\n-{\\n-  if (aNamespaceID == kNameSpaceID_None) {\\n-    PRBool processed = PR_FALSE;\\n-    if (aName == nsGkAtoms::order) {\\n-      mOrderX->SetBaseVal(0);\\n-      mOrderY->SetBaseVal(0);\\n-      processed = PR_TRUE;\\n-    } else if (aName == nsGkAtoms::targetX) {\\n-      mTargetX->SetBaseVal(0);\\n-      processed = PR_TRUE;\\n-    } else if (aName == nsGkAtoms::targetY) {\\n-      mTargetY->SetBaseVal(0);\\n-      processed = PR_TRUE;\\n-    } else if (aName == nsGkAtoms::preserveAlpha) {\\n-      mPreserveAlpha->SetBaseVal(PR_FALSE);\\n-      processed = PR_TRUE;\\n-    }\\n-\\n-    if (processed) {\\n-      return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n-    }\\n-  }\\n-\\n-  return nsSVGFEConvolveMatrixElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n-}\\n-\\n #define BOUND(val, min, max) \\\\\\n   PR_MIN(PR_MAX(val, min), max)\\n \\ndiff --git a/content/svg/content/src/nsSVGMarkerElement.cpp b/content/svg/content/src/nsSVGMarkerElement.cpp\\nindex a509740..eb71fc3 100644\\n--- a/content/svg/content/src/nsSVGMarkerElement.cpp\\n+++ b/content/svg/content/src/nsSVGMarkerElement.cpp\\n@@ -306,13 +306,7 @@ nsSVGMarkerElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n       vb->SetHeight(mLengthAttributes[MARKERHEIGHT].GetAnimValue(mCoordCtx));\\n     } else if (aName == nsGkAtoms::orient) {\\n       mOrientType.SetBaseValue(SVG_MARKER_ORIENT_AUTO, this, PR_FALSE);\\n-      nsIDOMSVGAngle *angle;\\n-      mOrient->GetBaseVal(&angle);\\n-      angle->NewValueSpecifiedUnits(nsIDOMSVGAngle::SVG_ANGLETYPE_UNSPECIFIED,\\n-                                    0.0f);\\n     }\\n-\\n-    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n   }\\n \\n   return nsSVGMarkerElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\ndiff --git a/content/svg/content/src/nsSVGPathElement.cpp b/content/svg/content/src/nsSVGPathElement.cpp\\nindex a79c931..648ad6b 100644\\n--- a/content/svg/content/src/nsSVGPathElement.cpp\\n+++ b/content/svg/content/src/nsSVGPathElement.cpp\\n@@ -442,24 +442,6 @@ nsSVGPathElement::BeforeSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n                                              aValue, aNotify);\\n }\\n \\n-nsresult\\n-nsSVGPathElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                            PRBool aNotify)\\n-{\\n-  if (aNamespaceID == kNameSpaceID_None && aName == nsGkAtoms::d) {\\n-    if (mSegments) {\\n-      NS_REMOVE_SVGVALUE_OBSERVER(mSegments);\\n-      mSegments = nsnull;\\n-    }\\n-\\n-    mPathData.Clear();\\n-\\n-    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n-  }\\n-\\n-  return nsSVGPathElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n-}\\n-\\n NS_IMETHODIMP\\n nsSVGPathElement::DidModifySVGObservable(nsISVGValue* observable,\\n                                          nsISVGValue::modificationType aModType)\\ndiff --git a/content/svg/content/src/nsSVGPathElement.h b/content/svg/content/src/nsSVGPathElement.h\\nindex 98ec22b..0ca812d 100644\\n--- a/content/svg/content/src/nsSVGPathElement.h\\n+++ b/content/svg/content/src/nsSVGPathElement.h\\n@@ -56,9 +56,10 @@ public:\\n   nsSVGPathList() : mArguments(nsnull), mNumCommands(0), mNumArguments(0) {}\\n   ~nsSVGPathList() { Clear(); }\\n   void Playback(gfxContext *aCtx);\\n-  void Clear();\\n \\n protected:\\n+  void Clear();\\n+\\n   float   *mArguments;\\n   PRUint32 mNumCommands;\\n   PRUint32 mNumArguments;\\n@@ -105,17 +106,13 @@ public:\\n \\n   virtual already_AddRefed<gfxFlattenedPath> GetFlattenedPath(nsIDOMSVGMatrix *aMatrix);\\n \\n-  // nsIContent interface\\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n-  virtual nsresult BeforeSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                                 const nsAString* aValue, PRBool aNotify);\\n-  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                             PRBool aNotify);\\n \\n protected:\\n \\n-  // nsSVGElement method\\n   virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual nsresult BeforeSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                                 const nsAString* aValue, PRBool aNotify);\\n \\n   // Helper for lazily creating pathseg list\\n   nsresult CreatePathSegList();\\ndiff --git a/content/svg/content/src/nsSVGRect.cpp b/content/svg/content/src/nsSVGRect.cpp\\nindex caf8cd0..074238b 100644\\n--- a/content/svg/content/src/nsSVGRect.cpp\\n+++ b/content/svg/content/src/nsSVGRect.cpp\\n@@ -48,6 +48,30 @@\\n #include \\\"nsContentUtils.h\\\"\\n #include \\\"nsDOMError.h\\\"\\n \\n+////////////////////////////////////////////////////////////////////////\\n+// nsSVGRect class\\n+\\n+class nsSVGRect : public nsIDOMSVGRect,\\n+                  public nsSVGValue\\n+{\\n+public:\\n+  nsSVGRect(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f);\\n+  \\n+  // nsISupports interface:\\n+  NS_DECL_ISUPPORTS\\n+\\n+  // nsIDOMSVGRect interface:\\n+  NS_DECL_NSIDOMSVGRECT\\n+\\n+  // nsISVGValue interface:\\n+  NS_IMETHOD SetValueString(const nsAString& aValue);\\n+  NS_IMETHOD GetValueString(nsAString& aValue);\\n+\\n+\\n+protected:\\n+  float mX, mY, mWidth, mHeight;\\n+};\\n+\\n //----------------------------------------------------------------------\\n // implementation:\\n \\n@@ -56,12 +80,6 @@ nsSVGRect::nsSVGRect(float x, float y, float w, float h)\\n {\\n }\\n \\n-void\\n-nsSVGRect::Clear()\\n-{\\n-  mX = mY = mWidth = mHeight = 0.0f;\\n-}\\n-\\n //----------------------------------------------------------------------\\n // nsISupports methods:\\n \\ndiff --git a/content/svg/content/src/nsSVGRect.h b/content/svg/content/src/nsSVGRect.h\\nindex 883cf9b..e44510d 100644\\n--- a/content/svg/content/src/nsSVGRect.h\\n+++ b/content/svg/content/src/nsSVGRect.h\\n@@ -41,9 +41,10 @@\\n #define __NS_SVGRECT_H__\\n \\n #include \\\"nsIDOMSVGRect.h\\\"\\n-#include \\\"nsSVGValue.h\\\"\\n #include \\\"gfxRect.h\\\"\\n \\n+class nsIDOMSVGLength;\\n+\\n nsresult\\n NS_NewSVGRect(nsIDOMSVGRect** result,\\n               float x=0.0f, float y=0.0f,\\n@@ -57,29 +58,4 @@ NS_NewSVGReadonlyRect(nsIDOMSVGRect** result,\\n                       float x=0.0f, float y=0.0f,\\n                       float width=0.0f, float height=0.0f);\\n \\n-////////////////////////////////////////////////////////////////////////\\n-// nsSVGRect class\\n-\\n-class nsSVGRect : public nsIDOMSVGRect,\\n-                  public nsSVGValue\\n-{\\n-public:\\n-  nsSVGRect(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f);\\n-\\n-  // nsISupports interface:\\n-  NS_DECL_ISUPPORTS\\n-\\n-  // nsIDOMSVGRect interface:\\n-  NS_DECL_NSIDOMSVGRECT\\n-\\n-  // nsISVGValue interface:\\n-  NS_IMETHOD SetValueString(const nsAString& aValue);\\n-  NS_IMETHOD GetValueString(nsAString& aValue);\\n-\\n-  void Clear();\\n-\\n-protected:\\n-  float mX, mY, mWidth, mHeight;\\n-};\\n-\\n #endif //__NS_SVGRECT_H__\\n\""}