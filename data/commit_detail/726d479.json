{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas726d479\""},"diff":"\"726d479 Bug 393899. Accessible text broken for list items, also avoid possible crashes and incorrect behavior by ensuring GetRenderedText() and gfxSkipChars is only used for text frames. r=surkov, a=dsicore\\ndiff --git a/accessible/src/base/nsAccessible.cpp b/accessible/src/base/nsAccessible.cpp\\nindex d995ce2..e9e3075 100644\\n--- a/accessible/src/base/nsAccessible.cpp\\n+++ b/accessible/src/base/nsAccessible.cpp\\n@@ -3152,12 +3152,13 @@ PRInt32 nsAccessible::TextLength(nsIAccessible *aAccessible)\\n   NS_ASSERTION(pAccNode, \\\"QI to nsPIAccessNode failed\\\");\\n \\n   nsIFrame *frame = pAccNode->GetFrame();\\n-  if (frame) { // Optimal way to get the text length -- no string copy\\n+  if (frame && frame->GetType() == nsAccessibilityAtoms::textFrame) {\\n+    // Ensure that correct text length is calculated (with non-rendered whitespace chars not counted)\\n     nsIContent *content = frame->GetContent();\\n     if (content) {\\n       PRUint32 length;\\n       nsresult rv = nsHyperTextAccessible::ContentToRenderedOffset(frame, content->TextLength(), &length);\\n-      return NS_SUCCEEDED(rv) ? length : -1;\\n+      return NS_SUCCEEDED(rv) ? static_cast<PRInt32>(length) : -1;\\n     }\\n   }\\n \\ndiff --git a/accessible/src/html/nsHyperTextAccessible.cpp b/accessible/src/html/nsHyperTextAccessible.cpp\\nindex 1b5f2c1..1035cc9 100644\\n--- a/accessible/src/html/nsHyperTextAccessible.cpp\\n+++ b/accessible/src/html/nsHyperTextAccessible.cpp\\n@@ -242,6 +242,11 @@ nsIntRect nsHyperTextAccessible::GetBoundsForString(nsIFrame *aFrame, PRUint32 a\\n {\\n   nsIntRect screenRect;\\n   NS_ENSURE_TRUE(aFrame, screenRect);\\n+  if (aFrame->GetType() != nsAccessibilityAtoms::textFrame) {\\n+    // XXX fallback for non-text frames, happens for bullets right now\\n+    // but in the future bullets will have proper text frames\\n+    return aFrame->GetScreenRectExternal();\\n+  }\\n \\n   PRInt32 startContentOffset, endContentOffset;\\n   nsresult rv = RenderedToContentOffset(aFrame, aStartRenderedOffset, &startContentOffset);\\n@@ -364,17 +369,20 @@ nsHyperTextAccessible::GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset,\\n     if (IsText(accessible)) {\\n       // We only need info up to rendered offset -- that is what we're\\n       // converting to content offset\\n-      PRInt32 substringEndOffset;\\n-      nsresult rv = frame->GetRenderedText(nsnull, &skipChars, &iter);\\n-      PRUint32 ourRenderedStart = iter.GetSkippedOffset();\\n-      PRInt32 ourContentStart = iter.GetOriginalOffset();\\n-      if (NS_SUCCEEDED(rv)) {\\n-        substringEndOffset =\\n-          iter.ConvertOriginalToSkipped(skipChars.GetOriginalCharCount() +\\n-                                        ourContentStart) -\\n-          ourRenderedStart;\\n+      PRInt32 substringEndOffset = -1;\\n+      PRUint32 ourRenderedStart = 0;\\n+      PRInt32 ourContentStart = 0;\\n+      if (frame->GetType() == nsAccessibilityAtoms::textFrame) {\\n+        nsresult rv = frame->GetRenderedText(nsnull, &skipChars, &iter);\\n+        if (NS_SUCCEEDED(rv)) {\\n+          ourRenderedStart = iter.GetSkippedOffset();\\n+          ourContentStart = iter.GetOriginalOffset();\\n+          substringEndOffset =\\n+            iter.ConvertOriginalToSkipped(skipChars.GetOriginalCharCount() +\\n+                                          ourContentStart) - ourRenderedStart;\\n+        }\\n       }\\n-      else {\\n+      if (substringEndOffset < 0) {\\n         // XXX for non-textframe text like list bullets,\\n         // should go away after list bullet rewrite\\n         substringEndOffset = TextLength(accessible);\\n@@ -385,8 +393,13 @@ nsHyperTextAccessible::GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset,\\n           // We don't want the whole string for this accessible\\n           // Get out the continuing text frame with this offset\\n           PRInt32 outStartLineUnused;\\n-          PRInt32 contentOffset = iter.ConvertSkippedToOriginal(startOffset) +\\n-                                  ourRenderedStart - ourContentStart;\\n+          PRInt32 contentOffset;\\n+          if (frame->GetType() == nsAccessibilityAtoms::textFrame) {\\n+            iter.ConvertSkippedToOriginal(startOffset) + ourRenderedStart - ourContentStart;\\n+          }\\n+          else {\\n+            contentOffset = startOffset;\\n+          }\\n           frame->GetChildFrameContainingOffset(contentOffset, PR_TRUE,\\n                                                &outStartLineUnused, &frame);\\n           if (aEndFrame) {\\n@@ -654,9 +667,10 @@ nsHyperTextAccessible::GetRelativeOffset(nsIPresShell *aPresShell,\\n \\n     nsIFrame *frame = accessNode->GetFrame();\\n     NS_ENSURE_TRUE(frame, -1);\\n-\\n-    rv = RenderedToContentOffset(frame, aFromOffset, &contentOffset);\\n-    NS_ENSURE_SUCCESS(rv, -1);\\n+    if (frame->GetType() == nsAccessibilityAtoms::textFrame) {\\n+      rv = RenderedToContentOffset(frame, aFromOffset, &contentOffset);\\n+      NS_ENSURE_SUCCESS(rv, -1);\\n+    }\\n   }\\n \\n   pos.SetData(aAmount, aDirection, contentOffset,\\n@@ -1089,7 +1103,7 @@ nsHyperTextAccessible::GetOffsetAtPoint(PRInt32 aX, PRInt32 aY,\\n       nsSize frameSize = frame->GetSize();\\n       if (pointInFrame.x < frameSize.width && pointInFrame.y < frameSize.height) {\\n         // Finished\\n-        if (IsText(accessible)) {\\n+        if (frame->GetType() == nsAccessibilityAtoms::textFrame) {\\n           nsIFrame::ContentOffsets contentOffsets = frame->GetContentOffsetsFromPointExternal(pointInFrame, PR_TRUE);\\n           if (contentOffsets.IsNull() || contentOffsets.content != content) {\\n             return NS_OK; // Not found, will return -1\\n@@ -1565,8 +1579,7 @@ nsHyperTextAccessible::ScrollSubstringTo(PRInt32 aStartIndex, PRInt32 aEndIndex,\\n   nsCOMPtr<nsIDOMNode> startNode;\\n   nsCOMPtr<nsIContent> startContent(startFrame->GetContent());\\n \\n-  PRBool isStartAccText = IsText(startAcc);\\n-  if (isStartAccText) {\\n+  if (startFrame->GetType() == nsAccessibilityAtoms::textFrame) {\\n     nsresult rv = RenderedToContentOffset(startFrame, startOffset,\\n                                           &startOffset);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n@@ -1582,8 +1595,7 @@ nsHyperTextAccessible::ScrollSubstringTo(PRInt32 aStartIndex, PRInt32 aEndIndex,\\n   nsCOMPtr<nsIDOMNode> endNode;\\n   nsCOMPtr<nsIContent> endContent(endFrame->GetContent());\\n \\n-  PRBool isEndAccText = IsText(endAcc);\\n-  if (isEndAccText) {\\n+  if (endFrame->GetType() == nsAccessibilityAtoms::textFrame) {\\n     nsresult rv = RenderedToContentOffset(endFrame, endOffset,\\n                                           &endOffset);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n@@ -1603,6 +1615,11 @@ nsHyperTextAccessible::ScrollSubstringTo(PRInt32 aStartIndex, PRInt32 aEndIndex,\\n nsresult nsHyperTextAccessible::ContentToRenderedOffset(nsIFrame *aFrame, PRInt32 aContentOffset,\\n                                                         PRUint32 *aRenderedOffset)\\n {\\n+  NS_ASSERTION(aFrame->GetType() == nsAccessibilityAtoms::textFrame,\\n+               \\\"Need text frame for offset conversion\\\");\\n+  NS_ASSERTION(aFrame->GetPrevContinuation() == nsnull,\\n+               \\\"Call on primary frame only\\\");\\n+\\n   gfxSkipChars skipChars;\\n   gfxSkipCharsIterator iter;\\n   // Only get info up to original ofset, we know that will be larger than skipped offset\\n@@ -1621,6 +1638,11 @@ nsresult nsHyperTextAccessible::ContentToRenderedOffset(nsIFrame *aFrame, PRInt3\\n nsresult nsHyperTextAccessible::RenderedToContentOffset(nsIFrame *aFrame, PRUint32 aRenderedOffset,\\n                                                         PRInt32 *aContentOffset)\\n {\\n+  NS_ASSERTION(aFrame->GetType() == nsAccessibilityAtoms::textFrame,\\n+               \\\"Need text frame for offset conversion\\\");\\n+  NS_ASSERTION(aFrame->GetPrevContinuation() == nsnull,\\n+               \\\"Call on primary frame only\\\");\\n+\\n   gfxSkipChars skipChars;\\n   gfxSkipCharsIterator iter;\\n   // We only need info up to skipped offset -- that is what we're converting to original offset\\n\""}