{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas17faf74\""},"diff":"\"17faf74 fix for bug #343251 add \\\"all tabs\\\" menu to tabstrip to address usability problems with tab overflow / scrolling r=mano\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 23e761e..5ea29c6 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -26,6 +26,7 @@\\n    -   Peter Parente <parente@cs.unc.edu>\\n    -   Giorgio Maone <g.maone@informaction.com>\\n    -   Asaf Romano <mozilla.mano@sent.com>\\n+   -   Seth Spitzer <sspitzer@mozilla.org>\\n    -\\n    - Alternatively, the contents of this file may be used under the terms of\\n    - either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n@@ -1033,6 +1034,9 @@\\n             }\\n             if (!bgLoad)\\n               this.selectedTab = tab;\\n+            else\\n+              this.mTabContainer._notifyBackgroundTab(tab);\\n+            \\n             return tab;\\n          ]]>\\n         </body>\\n@@ -1092,7 +1096,8 @@\\n             if (this.mCurrentTab.owner)\\n               this.mCurrentTab.owner = null;\\n \\n-            var t = document.createElementNS(\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n+            var t = document.createElementNS(\\n+              \\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n                                              \\\"tab\\\");\\n \\n             var blank = (aURI == \\\"about:blank\\\");\\n@@ -1131,7 +1136,8 @@\\n               }\\n             }\\n \\n-            var b = document.createElementNS(\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n+            var b = document.createElementNS(\\n+              \\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n                                              \\\"browser\\\");\\n             b.setAttribute(\\\"type\\\", \\\"content-targetable\\\");\\n             b.setAttribute(\\\"message\\\", \\\"true\\\");\\n@@ -1191,13 +1197,14 @@\\n               b.loadURIWithFlags(aURI, flags, aReferrerURI, aCharset, aPostData);\\n             }\\n \\n+            this.mTabContainer.adjustTabstrip(false);\\n+\\n             // Dispatch a new tab notification.  We do this once we're\\n             // entirely done, so that things are in a consistent state\\n             // even if the event listener opens or closes tabs.\\n             var evt = document.createEvent(\\\"Events\\\");\\n             evt.initEvent(\\\"TabOpen\\\", true, false);\\n             t.dispatchEvent(evt);\\n-\\n             return t;\\n           ]]>\\n         </body>\\n@@ -1565,7 +1572,6 @@\\n                 onget=\\\"return this.mCurrentBrowser;\\\"\\n                 readonly=\\\"true\\\"/>\\n \\n-\\n       <property name=\\\"browsers\\\" readonly=\\\"true\\\">\\n        <getter>\\n           <![CDATA[\\n@@ -2397,16 +2403,25 @@\\n       <xul:arrowscrollbox anonid=\\\"arrowscrollbox\\\" orient=\\\"horizontal\\\" flex=\\\"1\\\" style=\\\"min-width: 1px;\\\" clicktoscroll=\\\"true\\\">\\n         <children includes=\\\"tab\\\"/>\\n       </xul:arrowscrollbox>\\n+      <xul:hbox class=\\\"tabs-alltabs-box\\\" align=\\\"center\\\" pack=\\\"end\\\" \\n+                anonid=\\\"alltabs-box\\\">\\n+        <xul:toolbarbutton class=\\\"tabs-alltabs-button\\\" type=\\\"menu\\\">\\n+          <xul:menupopup class=\\\"tabs-alltabs-popup\\\"\\n+                         anonid=\\\"alltabs-popup\\\" \\n+                         position=\\\"after_end\\\"/>\\n+        </xul:toolbarbutton>\\n+      </xul:hbox>\\n       <xul:hbox class=\\\"tabs-closebutton-box\\\" align=\\\"center\\\" pack=\\\"end\\\" anonid=\\\"tabstrip-closebutton\\\">\\n         <xul:toolbarbutton class=\\\"close-button tabs-closebutton\\\"/>\\n       </xul:hbox>\\n     </content>\\n-    <implementation>\\n+    <implementation implements=\\\"nsITimerCallback\\\">\\n       <constructor>\\n         <![CDATA[\\n           var pb2 =\\n               Components.classes['@mozilla.org/preferences-service;1'].\\n               getService(Components.interfaces.nsIPrefBranch2);\\n+\\n           try {\\n             this.mTabMinWidth = pb2.getIntPref(\\\"browser.tabs.tabMinWidth\\\");\\n             this.mTabClipWidth = pb2.getIntPref(\\\"browser.tabs.tabClipWidth\\\");\\n@@ -2419,8 +2434,10 @@\\n           this._updateDisableBackgroundClose();\\n           this.adjustTabstrip(false);\\n \\n-          pb2.addObserver(\\\"browser.tabs.disableBackgroundClose\\\", this._prefObserver, true);\\n-          pb2.addObserver(\\\"browser.tabs.closeButtons\\\", this._prefObserver, true);\\n+          pb2.addObserver(\\\"browser.tabs.disableBackgroundClose\\\", \\n+                          this._prefObserver, true);\\n+          pb2.addObserver(\\\"browser.tabs.closeButtons\\\", \\n+                          this._prefObserver, true);\\n \\n           var self = this;\\n           function onResize() {\\n@@ -2437,6 +2454,16 @@\\n         ]]>\\n       </constructor>\\n \\n+      <destructor>\\n+        <![CDATA[\\n+          // Release timer to avoid reference cycles.\\n+          if (this.mFlashTimer) {\\n+            this.mFlashTimer.cancel();\\n+            this.mFlashTimer = null;\\n+          }\\n+        ]]>\\n+      </destructor>\\n+\\n       <field name=\\\"mTabstripWidth\\\">0</field>\\n \\n       <field name=\\\"mTabstrip\\\">\\n@@ -2571,22 +2598,173 @@\\n         \\n       <method name=\\\"_handleTabSelect\\\">\\n         <body><![CDATA[\\n-          this.mTabstrip.scrollBoxObject.ensureElementIsVisible(this.selectedItem);\\n+          this.mTabstrip.scrollBoxObject\\n+                        .ensureElementIsVisible(this.selectedItem);\\n         ]]></body>\\n       </method>\\n         \\n-    </implementation>\\n+      <field name=\\\"mAllTabsPopup\\\">\\n+        document.getAnonymousElementByAttribute(this, \\n+                                                \\\"anonid\\\", \\\"alltabs-popup\\\");\\n+      </field>\\n+\\n+      <field name=\\\"mAllTabsBox\\\">\\n+        document.getAnonymousElementByAttribute(this, \\n+                                                \\\"anonid\\\", \\\"alltabs-box\\\");\\n+      </field>\\n \\n+      <field name=\\\"mFlashTimer\\\">null</field>\\n+      <field name=\\\"mFlashStage\\\">0</field>\\n+      <field name=\\\"mFlashStart\\\">6</field>\\n+      <field name=\\\"mFlashDelay\\\">150</field>\\n+\\n+      <method name=\\\"_notifyBackgroundTab\\\">\\n+        <parameter name=\\\"aTab\\\"/>\\n+        <body><![CDATA[\\n+          if (this.mFlashStage)\\n+            return;\\n+\\n+          var tsbo = this.mTabstrip.scrollBoxObject;\\n+          var tsboStart = tsbo.screenX;\\n+          var tsboEnd = tsboStart + tsbo.width;\\n+\\n+          var ctbo = aTab.boxObject;\\n+          var ctboStart = ctbo.screenX;\\n+          var ctboEnd = ctboStart + ctbo.width;\\n+\\n+          // only start the flash timer if the new tab (which was loaded in\\n+          // the background) is not completely visible\\n+          if (tsboStart > ctboStart || ctboEnd > tsboEnd) {\\n+            this.mFlashStage = this.mFlashStart;\\n+\\n+            if (!this.mFlashTimer) \\n+              this.mFlashTimer =\\n+                Components.classes[\\\"@mozilla.org/timer;1\\\"]\\n+                          .createInstance(Components.interfaces.nsITimer);\\n+            else\\n+               this.mFlashTimer.cancel();\\n+\\n+            this.mFlashTimer.initWithCallback(this,\\n+                         this.mFlashDelay,\\n+                         Components.interfaces.nsITimer.TYPE_REPEATING_SLACK);\\n+          }\\n+        ]]></body>\\n+      </method>\\n+      \\n+      <method name=\\\"notify\\\">\\n+        <parameter name=\\\"aTimer\\\"/>\\n+        <body><![CDATA[\\n+          if (!document)\\n+            aTimer.cancel();\\n+\\n+          this.mFlashStage--;\\n+\\n+          this.mAllTabsBox.setAttribute(\\\"flash\\\",\\n+            (this.mFlashStage % 2) ? \\\"true\\\" : \\\"false\\\");\\n+\\n+          if (!this.mFlashStage)\\n+            aTimer.cancel();\\n+        ]]></body>\\n+      </method>\\n+    </implementation>\\n     <handlers>\\n-      <handler event=\\\"TabOpen\\\"   action=\\\"this.adjustTabstrip(false);\\\"/>\\n       <handler event=\\\"TabClose\\\"  action=\\\"this.adjustTabstrip(true);\\\"/>\\n       <handler event=\\\"TabSelect\\\" action=\\\"this._handleTabSelect();\\\"/>\\n     </handlers>\\n   </binding>\\n \\n+  <!-- alltabs-popup binding\\n+       This binding relies on the structure of the tabbrowser binding.\\n+       Therefore it should only be used as a child of the tabs element.\\n+       This binding is exposed as a pseudo-public-API so themes can customize\\n+       the tabbar appearance without having to be scriptable\\n+       (see globalBindings.xml in Pinstripe for example).\\n+  -->\\n+  <binding id=\\\"tabbrowser-alltabs-popup\\\"\\n+           extends=\\\"chrome://global/content/bindings/popup.xml#popup\\\">\\n+    <implementation>\\n+      <field name=\\\"_allTabsMenuItemCommandHandler\\\" readonly=\\\"true\\\">\\n+      <![CDATA[({\\n+        mOuter: this,\\n+        handleEvent: function handleEvent(aEvent) {\\n+          if (!aEvent.isTrusted) {\\n+            // Don't let untrusted events mess with tabs.\\n+            return;\\n+          }\\n+\\n+          // note, the tab may not be valid (if after we built the popup\\n+          // the tab was closed.  but selectedItem setter handles that\\n+          // gracefully.\\n+          var tabcontainer = document.getBindingParent(this.mOuter);\\n+          tabcontainer.selectedItem = aEvent.target.tab;\\n+        }\\n+      })]]>\\n+      </field>\\n+\\n+      <method name=\\\"_onHidingAllTabsPopup\\\">\\n+        <body><![CDATA[\\n+          // clear out the menu popup and remove the listeners\\n+          while (this.hasChildNodes()) {\\n+            var menuItem = this.lastChild;\\n+            menuItem.removeEventListener(\\\"command\\\", \\n+                                         this._allTabsMenuItemCommandHandler, \\n+                                         false);\\n+            this.removeChild(menuItem);\\n+          }\\n+        ]]></body>\\n+      </method>\\n+\\n+      <method name=\\\"_onShowingAllTabsPopup\\\">\\n+        <body><![CDATA[\\n+          // set up the menu popup\\n+          var tabcontainer = document.getBindingParent(this);\\n+          var tabs = tabcontainer.childNodes;\\n+\\n+          for (var i = 0; i < tabs.length; i++) {\\n+            var menuItem = document.createElementNS(\\n+              \\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\", \\n+              \\\"menuitem\\\");\\n+            var curTab = tabs[i];\\n+\\n+            if (curTab.selected)\\n+              menuItem.setAttribute(\\\"selected\\\", \\\"true\\\");\\n+            menuItem.setAttribute(\\\"class\\\", \\\"menuitem-iconic alltabs-item\\\");\\n+\\n+            // XXX todo\\n+            // what if uri, image/favicon, title change \\n+            // while this popup is open?\\n+            // mano warns:  \\\"be careful of leaks when addressing this.\\\"\\n+            menuItem.setAttribute(\\\"label\\\", curTab.label);\\n+            menuItem.setAttribute(\\\"image\\\", curTab.getAttribute(\\\"image\\\"));\\n+            var URI = curTab.linkedBrowser.currentURI.spec;\\n+            // XXX todo\\n+            // statustext not working yet, since I don't have a menubar\\n+            // reuse the menubar statustext logic\\n+            menuItem.setAttribute(\\\"statustext\\\", URI);\\n+            menuItem.tab = curTab;\\n+            menuItem.addEventListener(\\\"command\\\", \\n+                                      this._allTabsMenuItemCommandHandler, \\n+                                      false);\\n+            this.appendChild(menuItem);\\n+          }\\n+        ]]></body>\\n+      </method>\\n+    </implementation>\\n+    <handlers>\\n+      <handler event=\\\"popupshowing\\\"><![CDATA[\\n+        if (event.target == this)\\n+          this._onShowingAllTabsPopup();\\n+      ]]></handler>\\n+      <handler event=\\\"popuphiding\\\"><![CDATA[\\n+        if (event.target == this)\\n+          this._onHidingAllTabsPopup();\\n+      ]]></handler>\\n+    </handlers>\\n+  </binding>\\n+\\n   <!-- close-tab-button binding\\n        This binding relies on the structure of the tabbrowser binding.\\n-       Therefor it should only be used as a child of the tab or the tabs\\n+       Therefore it should only be used as a child of the tab or the tabs\\n        element (in both cases, when they are anonymous nodes of <tabbrowser>).\\n        This binding is exposed as a pseudo-public-API so themes can customize\\n        the tabbar appearance without having to be scriptable\\ndiff --git a/browser/themes/pinstripe/browser/tabbrowser/tabbrowserBindings.xml b/browser/themes/pinstripe/browser/tabbrowser/tabbrowserBindings.xml\\nindex 0833cd6..883d692 100644\\n--- a/browser/themes/pinstripe/browser/tabbrowser/tabbrowserBindings.xml\\n+++ b/browser/themes/pinstripe/browser/tabbrowser/tabbrowserBindings.xml\\n@@ -62,6 +62,13 @@\\n             <xul:arrowscrollbox anonid=\\\"arrowscrollbox\\\" orient=\\\"horizontal\\\" flex=\\\"1\\\" style=\\\"min-width: 1px;\\\" clicktoscroll=\\\"true\\\">\\n               <children/>\\n             </xul:arrowscrollbox>\\n+            <xul:hbox class=\\\"tabs-alltabs-box\\\" pack=\\\"end\\\" align=\\\"center\\\"\\n+                      anonid=\\\"alltabs-box\\\">\\n+              <xul:toolbarbutton class=\\\"tabs-alltabs-button\\\" type=\\\"menu\\\">\\n+                <xul:menupopup class=\\\"tabs-alltabs-popup\\\"\\n+                  anonid=\\\"alltabs-popup\\\" position=\\\"after_end\\\"/>\\n+              </xul:toolbarbutton>\\n+            </xul:hbox>\\n             <xul:hbox class=\\\"tabs-closebutton-box\\\" align=\\\"center\\\" pack=\\\"end\\\" anonid=\\\"tabstrip-closebutton\\\">\\n               <xul:toolbarbutton class=\\\"close-button tabs-closebutton\\\"/>\\n             </xul:hbox>\\n\""}