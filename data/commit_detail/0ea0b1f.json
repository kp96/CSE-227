{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0ea0b1f\""},"diff":"\"0ea0b1f Bug 397218 - Persist the selection when sorting a places tree. r=dietrich. a=mconnor.\\ndiff --git a/browser/components/places/content/treeView.js b/browser/components/places/content/treeView.js\\nindex e845467..7ff2bbb 100644\\n--- a/browser/components/places/content/treeView.js\\n+++ b/browser/components/places/content/treeView.js\\n@@ -160,8 +160,6 @@ PlacesTreeView.prototype = {\\n    * Call to completely rebuild the list of visible items. Note if there is no\\n    * tree or root this will just clear out the list, so you can also call this\\n    * when a tree is detached to clear the list.\\n-   *\\n-   * This does NOT update the screen.\\n    */\\n   _buildVisibleList: function PTV__buildVisibleList() {\\n     if (this._result) {\\n@@ -171,11 +169,6 @@ PlacesTreeView.prototype = {\\n       }\\n     }\\n \\n-    var oldCount = this.rowCount;\\n-    this._visibleElements.splice(0);\\n-    if (this._tree)\\n-      this._tree.rowCountChanged(0, -oldCount);\\n-\\n     var rootNode = this._result.root;\\n     if (rootNode && this._tree) {\\n       this._computeShowSessions();\\n@@ -189,7 +182,7 @@ PlacesTreeView.prototype = {\\n       }\\n       else if (!rootNode.containerOpen) {\\n         // this triggers containerOpened which then builds the visible\\n-        // selection\\n+        // section\\n         rootNode.containerOpen = true;\\n         return;\\n       }\\n@@ -325,8 +318,8 @@ PlacesTreeView.prototype = {\\n     if (aContainer.viewIndex != -1)\\n       replaceCount-=1;\\n \\n-    // Mark the removees as invisible\\n-    for (var i = 0; i < replaceCount; i ++)\\n+    // Mark the removes as invisible\\n+    for (var i = 0; i < replaceCount; i++)\\n       this._visibleElements[startReplacement + i].viewIndex = -1;\\n \\n     // Building the new list will set the new elements' visible indices.\\n@@ -334,6 +327,22 @@ PlacesTreeView.prototype = {\\n     var toOpenElements = [];\\n     this._buildVisibleSection(aContainer, newElements, toOpenElements, startReplacement);\\n \\n+    // Persist selection state\\n+    var nodesToSelect = [];\\n+    var selection = this.selection;\\n+    var rc = selection.getRangeCount();\\n+    for (var rangeIndex = 0; rangeIndex < rc; rangeIndex++) {\\n+      var min = { }, max = { };\\n+      selection.getRangeAt(rangeIndex, min, max);\\n+      if (min.value > startReplacement + replaceCount)\\n+        continue;\\n+\\n+      for (var nodeIndex = min.value; nodeIndex <= max.value; nodeIndex++) {\\n+        if (newElements.indexOf(this._visibleElements[nodeIndex]) != -1)\\n+          nodesToSelect.push(this._visibleElements[nodeIndex]);\\n+      }\\n+    }\\n+\\n     // actually update the visible list\\n     this._visibleElements =\\n       this._visibleElements.slice(0, startReplacement).concat(newElements)\\n@@ -350,6 +359,9 @@ PlacesTreeView.prototype = {\\n     }\\n \\n     // now update the number of elements\\n+    if (nodesToSelect.length > 0)\\n+      selection.selectEventsSuppressed = true;\\n+\\n     this._tree.beginUpdateBatch();\\n     if (replaceCount)\\n       this._tree.rowCountChanged(startReplacement, -replaceCount);\\n@@ -362,6 +374,15 @@ PlacesTreeView.prototype = {\\n       var item = asContainer(toOpenElements[i]);\\n       item.containerOpen = !item.containerOpen;\\n     }\\n+\\n+    // restore selection\\n+    if (nodesToSelect.length > 0) {\\n+      for each (var node in nodesToSelect) {\\n+        var index = node.viewIndex;\\n+        selection.rangedSelect(index, index, true);\\n+      }\\n+      selection.selectEventsSuppressed = false;\\n+    }\\n   },\\n \\n   /**\\n@@ -387,7 +408,7 @@ PlacesTreeView.prototype = {\\n     aShowThisOne.value = aTop.time < aNext.time;\\n     return true;\\n   },\\n-  \\n+\\n   _convertPRTimeToString: function PTV__convertPRTimeToString(aTime) {\\n     var timeInMilliseconds = aTime / 1000; // PRTime is in microseconds\\n     var timeObj = new Date(timeInMilliseconds);\\n@@ -415,7 +436,7 @@ PlacesTreeView.prototype = {\\n       timeObj.getDate(), timeObj.getHours(),\\n       timeObj.getMinutes(), timeObj.getSeconds()));\\n   },\\n-  \\n+\\n   COLUMN_TYPE_UNKNOWN: 0,\\n   COLUMN_TYPE_TITLE: 1,\\n   COLUMN_TYPE_URI: 2,\\n@@ -726,12 +747,6 @@ PlacesTreeView.prototype = {\\n \\n     // update flat list to new contents\\n     this._buildVisibleList();\\n-\\n-    // redraw the tree, inserting new items\\n-    this._tree.beginUpdateBatch();\\n-    this._tree.rowCountChanged(0, -oldRowCount);\\n-    this._tree.rowCountChanged(0, this._visibleElements.length);\\n-    this._tree.endUpdateBatch();\\n   },\\n \\n   sortingChanged: function PTV__sortingChanged(aSortingMode) {\\n\""}