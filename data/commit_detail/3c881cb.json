{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas3c881cb\""},"diff":"\"3c881cb adding a unit test for bug #393191.  r=gavin\\ndiff --git a/toolkit/components/autocomplete/tests/unit/test_393191.js b/toolkit/components/autocomplete/tests/unit/test_393191.js\\nnew file mode 100644\\nindex 0000000..dbd844e\\n--- /dev/null\\n+++ b/toolkit/components/autocomplete/tests/unit/test_393191.js\\n@@ -0,0 +1,288 @@\\n+/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n+/* vim:set ts=2 sw=2 sts=2 et: */\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is Bug 378079 unit test code.\\n+ *\\n+ * The Initial Developer of the Original Code is POTI Inc.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *   Matt Crocker <matt@songbirdnest.com>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+const Cc = Components.classes;\\n+const Ci = Components.interfaces;\\n+\\n+/**\\n+ * Unit test for Bug 393191 - AutoComplete crashes if result is null\\n+ */\\n+\\n+\\n+\\n+/**\\n+ * Dummy nsIAutoCompleteInput source that returns\\n+ * the given list of AutoCompleteSearch names. \\n+ * \\n+ * Implements only the methods needed for this test.\\n+ */\\n+function AutoCompleteInput(aSearches) {\\n+  this.searches = aSearches;\\n+}\\n+AutoCompleteInput.prototype = {\\n+  constructor: AutoCompleteInput, \\n+  \\n+  // Array of AutoCompleteSearch names\\n+  searches: null,\\n+  \\n+  minResultsForPopup: 0,\\n+  timeout: 10,\\n+  searchParam: \\\"\\\",\\n+  textValue: \\\"\\\",\\n+  disableAutoComplete: false,  \\n+  completeDefaultIndex: false,\\n+  \\n+  get searchCount() {\\n+    return this.searches.length;\\n+  },\\n+  \\n+  getSearchAt: function(aIndex) {\\n+    return this.searches[aIndex];\\n+  },\\n+  \\n+  onSearchComplete: function() {},\\n+  \\n+  popupOpen: false,  \\n+  \\n+  popup: { \\n+    setSelectedIndex: function(aIndex) {},\\n+    invalidate: function() {},\\n+\\n+    // nsISupports implementation\\n+    QueryInterface: function(iid) {\\n+      if (iid.equals(Ci.nsISupports) ||\\n+          iid.equals(Ci.nsIAutoCompletePopup))\\n+        return this;\\n+\\n+      throw Components.results.NS_ERROR_NO_INTERFACE;\\n+    }    \\n+  },\\n+    \\n+  // nsISupports implementation\\n+  QueryInterface: function(iid) {\\n+    if (iid.equals(Ci.nsISupports) ||\\n+        iid.equals(Ci.nsIAutoCompleteInput))\\n+      return this;\\n+\\n+    throw Components.results.NS_ERROR_NO_INTERFACE;\\n+  }\\n+}\\n+\\n+\\n+\\n+/** \\n+ * nsIAutoCompleteResult implementation\\n+ */\\n+function AutoCompleteResult(aValues, aComments, aStyles) {\\n+  this._values = aValues;\\n+  this._comments = aComments;\\n+  this._styles = aStyles;\\n+  \\n+  if (this._values.length > 0) {\\n+    this.searchResult = Ci.nsIAutoCompleteResult.RESULT_SUCCESS;\\n+  } else {\\n+    this.searchResult = Ci.nsIAutoCompleteResult.NOMATCH;\\n+  }\\n+}\\n+AutoCompleteResult.prototype = {\\n+  constructor: AutoCompleteResult,\\n+  \\n+  // Arrays\\n+  _values: null,\\n+  _comments: null,\\n+  _styles: null,\\n+  \\n+  searchString: \\\"\\\",\\n+  searchResult: null,\\n+  \\n+  defaultIndex: 0,\\n+\\n+  get matchCount() {\\n+    return this._values.length;\\n+  },\\n+\\n+  getValueAt: function(aIndex) {\\n+    return this._values[aIndex];\\n+  },\\n+  \\n+  getCommentAt: function(aIndex) {\\n+    return this._comments[aIndex];\\n+  },\\n+  \\n+  getStyleAt: function(aIndex) {\\n+    return this._styles[aIndex];\\n+  },\\n+  \\n+  getImageAt: function(aIndex) {\\n+    return \\\"\\\";\\n+  },\\n+\\n+  removeValueAt: function (aRowIndex, aRemoveFromDb) {},\\n+\\n+  // nsISupports implementation\\n+  QueryInterface: function(iid) {\\n+    if (iid.equals(Ci.nsISupports) ||\\n+        iid.equals(Ci.nsIAutoCompleteResult))\\n+      return this;\\n+\\n+    throw Components.results.NS_ERROR_NO_INTERFACE;\\n+  }  \\n+}\\n+\\n+\\n+\\n+/** \\n+ * nsIAutoCompleteSearch implementation that always returns\\n+ * the same result set.\\n+ */\\n+function AutoCompleteSearch(aName, aResult) {\\n+  this.name = aName;\\n+}\\n+AutoCompleteSearch.prototype = {\\n+  constructor: AutoCompleteSearch,\\n+  \\n+  // Search name. Used by AutoCompleteController\\n+  name: null,\\n+\\n+  // AutoCompleteResult\\n+  _result:null,  \\n+  \\n+  \\n+  /**\\n+   * Return the same result set for every search\\n+   */\\n+  startSearch: function(aSearchString, \\n+                        aSearchParam, \\n+                        aPreviousResult, \\n+                        aListener) \\n+  {\\n+    aListener.onSearchResult(this, this._result);\\n+  },\\n+  \\n+  stopSearch: function() {},\\n+\\n+  // nsISupports implementation\\n+  QueryInterface: function(iid) {\\n+    if (iid.equals(Ci.nsISupports) ||\\n+        iid.equals(Ci.nsIFactory) ||\\n+        iid.equals(Ci.nsIAutoCompleteSearch))\\n+      return this;\\n+\\n+    throw Components.results.NS_ERROR_NO_INTERFACE;\\n+  },\\n+  \\n+  // nsIFactory implementation\\n+  createInstance: function(outer, iid) {\\n+    return this.QueryInterface(iid);\\n+  }\\n+}\\n+\\n+\\n+\\n+/** \\n+ * Helper to register an AutoCompleteSearch with the given name.\\n+ * Allows the AutoCompleteController to find the search.\\n+ */\\n+function registerAutoCompleteSearch(aSearch) {\\n+  var name = \\\"@mozilla.org/autocomplete/search;1?name=\\\" + aSearch.name;\\n+\\n+  var uuidGenerator = Cc[\\\"@mozilla.org/uuid-generator;1\\\"].\\n+                      getService(Ci.nsIUUIDGenerator);\\n+  var cid = uuidGenerator.generateUUID();\\n+\\n+  var desc = \\\"Test AutoCompleteSearch\\\";\\n+  \\n+  var componentManager = Components.manager\\n+                                   .QueryInterface(Ci.nsIComponentRegistrar);\\n+  componentManager.registerFactory(cid, desc, name, aSearch);\\n+\\n+  // Keep the id on the object so we can unregister later\\n+  aSearch.cid = cid; \\n+}\\n+\\n+\\n+\\n+/** \\n+ * Helper to unregister an AutoCompleteSearch. \\n+ */\\n+function unregisterAutoCompleteSearch(aSearch) {\\n+  var componentManager = Components.manager\\n+                                   .QueryInterface(Ci.nsIComponentRegistrar);  \\n+  componentManager.unregisterFactory(aSearch.cid, aSearch);\\n+}\\n+\\n+\\n+\\n+/** \\n+ * Test AutoComplete with a search that returns a null result\\n+ */\\n+function run_test() {\\n+  \\n+  // Make an AutoCompleteSearch that always returns nothing\\n+  var emptySearch = new AutoCompleteSearch(\\\"test-empty-search\\\", \\n+                             new AutoCompleteResult([], [], []));\\n+  \\n+  // Register search so AutoCompleteController can find them\\n+  registerAutoCompleteSearch(emptySearch);\\n+    \\n+  var controller = Components.classes[\\\"@mozilla.org/autocomplete/controller;1\\\"].\\n+                   getService(Components.interfaces.nsIAutoCompleteController);  \\n+  \\n+  // Make an AutoCompleteInput that uses our search\\n+  // and confirms results on search complete\\n+  var input = new AutoCompleteInput([emptySearch.name]);\\n+  input.onSearchComplete = function() {\\n+\\n+    do_check_eq(controller.searchStatus, \\n+                Ci.nsIAutoCompleteController.STATUS_COMPLETE_NO_MATCH);\\n+    do_check_eq(controller.matchCount, 0);\\n+\\n+    // Unregister searches\\n+    unregisterAutoCompleteSearch(emptySearch);\\n+\\n+    do_test_finished();\\n+  };\\n+\\n+  controller.input = input;\\n+\\n+  // Search is asynchronous, so don't let the test finish immediately\\n+  do_test_pending();\\n+  \\n+  controller.startSearch(\\\"test\\\");\\n+}\\n+\\n\""}