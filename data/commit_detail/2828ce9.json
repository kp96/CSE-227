{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas2828ce9\""},"diff":"\"2828ce9 Bug 393356. Spellchecker should not use private copy(ies) of the Unicode category tables. r=smontagu,a=damon\\ndiff --git a/extensions/spellcheck/src/mozEnglishWordUtils.cpp b/extensions/spellcheck/src/mozEnglishWordUtils.cpp\\nindex caa594c..d2beb7c 100644\\n--- a/extensions/spellcheck/src/mozEnglishWordUtils.cpp\\n+++ b/extensions/spellcheck/src/mozEnglishWordUtils.cpp\\n@@ -41,7 +41,6 @@\\n #include \\\"nsIServiceManager.h\\\"\\n #include \\\"nsUnicharUtilCIID.h\\\"\\n #include \\\"nsCRT.h\\\"\\n-#include \\\"cattable.h\\\"\\n \\n NS_IMPL_ISUPPORTS1(mozEnglishWordUtils, mozISpellI18NUtil)\\n \\n@@ -51,6 +50,8 @@ mozEnglishWordUtils::mozEnglishWordUtils()\\n \\n   nsresult rv;\\n   mURLDetector = do_CreateInstance(MOZ_TXTTOHTMLCONV_CONTRACTID, &rv);\\n+  mCaseConv = do_GetService(NS_UNICHARUTIL_CONTRACTID);\\n+  mCategories = do_GetService(NS_UNICHARCATEGORY_CONTRACTID);\\n }\\n \\n mozEnglishWordUtils::~mozEnglishWordUtils()\\n@@ -78,12 +79,6 @@ NS_IMETHODIMP mozEnglishWordUtils::GetRootForm(const PRUnichar *aWord, PRUint32\\n \\n   *count = 0;\\n \\n-  if (!mCaseConv) {\\n-    mCaseConv = do_GetService(NS_UNICHARUTIL_CONTRACTID);\\n-    if (!mCaseConv)\\n-      return NS_ERROR_FAILURE;\\n-  }\\n-\\n   mozEnglishWordUtils::myspCapitalization ct = captype(word);\\n   switch (ct)\\n     {\\n@@ -159,10 +154,10 @@ NS_IMETHODIMP mozEnglishWordUtils::GetRootForm(const PRUnichar *aWord, PRUint32\\n }\\n \\n // This needs vast improvement\\n-static PRBool ucIsAlpha(PRUnichar c)\\n+PRBool mozEnglishWordUtils::ucIsAlpha(PRUnichar aChar)\\n {\\n   // XXX we have to fix callers to handle the full Unicode range\\n-  return (5 == GetCat(PRUint32(c)));\\n+  return nsIUGenCategory::kLetter == mCategories->Get(PRUint32(aChar));\\n }\\n \\n /* void FindNextWord (in wstring word, in PRUint32 length, in PRUint32 offset, out PRUint32 begin, out PRUint32 end); */\\ndiff --git a/extensions/spellcheck/src/mozEnglishWordUtils.h b/extensions/spellcheck/src/mozEnglishWordUtils.h\\nindex 7d38e55..5732de8c 100644\\n--- a/extensions/spellcheck/src/mozEnglishWordUtils.h\\n+++ b/extensions/spellcheck/src/mozEnglishWordUtils.h\\n@@ -44,6 +44,7 @@\\n #include \\\"nsIUnicodeDecoder.h\\\"\\n #include \\\"nsString.h\\\"\\n #include \\\"nsICaseConversion.h\\\"\\n+#include \\\"nsIUGenCategory.h\\\"\\n \\n #include \\\"mozITXTToHTMLConv.h\\\" \\n \\n@@ -62,10 +63,12 @@ public:\\n \\n protected:\\n   mozEnglishWordUtils::myspCapitalization captype(const nsString &word);\\n+  PRBool ucIsAlpha(PRUnichar aChar);\\n \\n   nsString mLanguage;\\n   nsString mCharset;\\n   nsCOMPtr<nsICaseConversion> mCaseConv;\\n+  nsCOMPtr<nsIUGenCategory>   mCategories;\\n   nsCOMPtr<mozITXTToHTMLConv> mURLDetector; // used to detect urls so the spell checker can skip them.\\n };\\n \\ndiff --git a/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp b/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp\\nindex 900380d..0246ace 100644\\n--- a/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp\\n+++ b/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp\\n@@ -36,7 +36,6 @@\\n  *\\n  * ***** END LICENSE BLOCK ***** */\\n \\n-#include \\\"cattable.h\\\"\\n #include \\\"mozInlineSpellWordUtil.h\\\"\\n #include \\\"nsDebug.h\\\"\\n #include \\\"nsIAtom.h\\\"\\n@@ -49,14 +48,8 @@\\n #include \\\"nsIEditor.h\\\"\\n #include \\\"nsIDOMNode.h\\\"\\n #include \\\"nsIDOMHTMLBRElement.h\\\"\\n-\\n-// some character categories we care about from GetCat()\\n-#define CHAR_CAT_NUMBER 2\\n-#define CHAR_CAT_SPACE 3\\n-#define CHAR_CAT_CONTROL 4\\n-#define CHAR_CAT_WORD 5\\n-#define CHAR_CAT_PUNCTUATION1 6\\n-#define CHAR_CAT_PUNCTUATION2 7\\n+#include \\\"nsUnicharUtilCIID.h\\\"\\n+#include \\\"nsServiceManagerUtils.h\\\"\\n \\n // IsIgnorableCharacter\\n //\\n@@ -87,6 +80,10 @@ mozInlineSpellWordUtil::Init(nsWeakPtr aWeakEditor)\\n {\\n   nsresult rv;\\n \\n+  mCategories = do_GetService(NS_UNICHARCATEGORY_CONTRACTID, &rv);\\n+  if (NS_FAILED(rv))\\n+    return rv;\\n+  \\n   // getting the editor can fail commonly because the editor was detached, so\\n   // don't assert\\n   nsCOMPtr<nsIEditor> editor = do_QueryReferent(aWeakEditor, &rv);\\n@@ -841,8 +838,9 @@ WordSplitState::ClassifyCharacter(PRInt32 aIndex, PRBool aRecurse) const\\n \\n   // this will classify the character, we want to treat \\\"ignorable\\\" characters\\n   // such as soft hyphens as word characters.\\n-  PRInt32 charCategory = GetCat(mDOMWordText[aIndex]);\\n-  if (charCategory == CHAR_CAT_WORD ||\\n+  nsIUGenCategory::nsUGenCategory\\n+    charCategory = mWordUtil->GetCategories()->Get(PRUint32(mDOMWordText[aIndex]));\\n+  if (charCategory == nsIUGenCategory::kLetter ||\\n       IsIgnorableCharacter(mDOMWordText[aIndex]))\\n     return CHAR_CLASS_WORD;\\n \\n@@ -871,10 +869,10 @@ WordSplitState::ClassifyCharacter(PRInt32 aIndex, PRBool aRecurse) const\\n   }\\n \\n   // all other punctuation\\n-  if (charCategory == CHAR_CAT_SPACE ||\\n-      charCategory == CHAR_CAT_CONTROL ||\\n-      charCategory == CHAR_CAT_PUNCTUATION1 ||\\n-      charCategory == CHAR_CAT_PUNCTUATION2)\\n+  if (charCategory == nsIUGenCategory::kSeparator ||\\n+      charCategory == nsIUGenCategory::kOther ||\\n+      charCategory == nsIUGenCategory::kPunctuation ||\\n+      charCategory == nsIUGenCategory::kSymbol)\\n     return CHAR_CLASS_SEPARATOR;\\n \\n   // any other character counts as a word\\ndiff --git a/extensions/spellcheck/src/mozInlineSpellWordUtil.h b/extensions/spellcheck/src/mozInlineSpellWordUtil.h\\nindex 04fd4c4..9591f8f 100644\\n--- a/extensions/spellcheck/src/mozInlineSpellWordUtil.h\\n+++ b/extensions/spellcheck/src/mozInlineSpellWordUtil.h\\n@@ -42,6 +42,7 @@\\n #include \\\"nsIDocument.h\\\"\\n #include \\\"nsString.h\\\"\\n #include \\\"nsTArray.h\\\"\\n+#include \\\"nsIUGenCategory.h\\\"\\n \\n //#define DEBUG_SPELLCHECK\\n \\n@@ -118,13 +119,15 @@ public:\\n   nsIDOMDocumentRange* GetDocumentRange() const { return mDOMDocumentRange; }\\n   nsIDocument* GetDocument() const { return mDocument; }\\n   nsIDOMNode* GetRootNode() { return mRootNode; }\\n-\\n+  nsIUGenCategory* GetCategories() { return mCategories; }\\n+  \\n private:\\n \\n   // cached stuff for the editor, set by Init\\n   nsCOMPtr<nsIDOMDocumentRange> mDOMDocumentRange;\\n   nsCOMPtr<nsIDocument>         mDocument;\\n   nsCOMPtr<nsIDOMViewCSS>       mCSSView;\\n+  nsCOMPtr<nsIUGenCategory>     mCategories;\\n \\n   // range to check, see SetRange\\n   nsIDOMNode* mRootNode;\\ndiff --git a/intl/build/nsI18nModule.cpp b/intl/build/nsI18nModule.cpp\\nindex 8ec6196..198c4aa 100644\\n--- a/intl/build/nsI18nModule.cpp\\n+++ b/intl/build/nsI18nModule.cpp\\n@@ -69,6 +69,8 @@ static nsModuleComponentInfo components[] =\\n  // unicharutil\\n   { \\\"Unichar Utility\\\", NS_UNICHARUTIL_CID, \\n       NS_UNICHARUTIL_CONTRACTID, nsCaseConversionImp2Constructor},\\n+  { \\\"Unichar Category Table\\\", NS_UNICHARCATEGORY_CID, \\n+      NS_UNICHARCATEGORY_CONTRACTID, nsCategoryImpConstructor},\\n   { \\\"Unicode To Entity Converter\\\", NS_ENTITYCONVERTER_CID, \\n       NS_ENTITYCONVERTER_CONTRACTID, nsEntityConverterConstructor },\\n   { \\\"Unicode To Charset Converter\\\", NS_SAVEASCHARSET_CID, \\ndiff --git a/intl/unicharutil/public/Makefile.in b/intl/unicharutil/public/Makefile.in\\nindex 6b9522a..491c527 100644\\n--- a/intl/unicharutil/public/Makefile.in\\n+++ b/intl/unicharutil/public/Makefile.in\\n@@ -48,7 +48,7 @@ EXPORTS\\t\\t= \\\\\\n \\t\\tnsICaseConversion.h \\\\\\n \\t\\tnsIOrderIdFormater.h \\\\\\n \\t\\tnsITextTransform.h \\\\\\n-\\t\\tnsIUGenDetailCategory.h \\\\\\n+\\t\\tnsIUGenCategory.h \\\\\\n \\t\\tnsUnicharUtilCIID.h \\\\\\n \\t\\tnsHankakuToZenkakuCID.h \\\\\\n \\t\\t$(NULL)\\ndiff --git a/intl/unicharutil/public/nsIUGenCategory.h b/intl/unicharutil/public/nsIUGenCategory.h\\nindex bfb0f17..65a26f8 100644\\n--- a/intl/unicharutil/public/nsIUGenCategory.h\\n+++ b/intl/unicharutil/public/nsIUGenCategory.h\\n@@ -41,10 +41,10 @@\\n #include \\\"nsISupports.h\\\"\\n #include \\\"nscore.h\\\"\\n \\n-// {E86B3371-BF89-11d2-B3AF-00805F8A6670}\\n+// {671fea05-fcee-4b1c-82a3-6eb03eda8ddc}\\n #define NS_IUGENCATEGORY_IID \\\\\\n-{ 0xe86b3371, 0xbf89, 0x11d2, \\\\\\n-    { 0xb3, 0xaf, 0x0, 0x80, 0x5f, 0x8a, 0x66, 0x70 } }\\n+{ 0x671fea05, 0xfcee, 0x4b1c, \\\\\\n+    { 0x82, 0xa3, 0x6e, 0xb0, 0x3e, 0xda, 0x8d, 0xdc } }\\n \\n \\n class nsIUGenCategory : public nsISupports {\\n@@ -54,31 +54,24 @@ public:\\n   NS_DECLARE_STATIC_IID_ACCESSOR(NS_IUGENCATEGORY_IID)\\n \\n    /**\\n-    *  Read ftp://ftp.unicode.org/Public/UNIDATA/ReadMe-Latest.txt\\n-    *  section GENERAL CATEGORY\\n-    *  for the detail defintation of the following categories\\n+    *  Read http://www.unicode.org/Public/UNIDATA/UCD.html#General_Category_Values\\n+    *  for the detailed definition of the following categories\\n     */\\n    typedef enum {\\n-     kUGenCategory_Mark         = 1, // Mn, Mc, and Me\\n-     kUGenCategory_Number       = 2, // Nd, Nl, and No \\n-     kUGenCategory_Separator    = 3, // Zs, Zl, and Zp\\n-     kUGenCategory_Other        = 4, // Cc, Cf, Cs, Co, and Cn\\n-     kUGenCategory_Letter       = 5, // Lu, Ll, Lt, Lm, and Lo\\n-     kUGenCategory_Punctuation  = 6, // Pc, Pd, Ps, Pe, Pi, Pf, and Po\\n-     kUGenCategory_Symbol       = 7  // Sm, Sc, Sk, and So\\n+     kUndefined    = 0,\\n+     kMark         = 1, // Mn, Mc, and Me\\n+     kNumber       = 2, // Nd, Nl, and No \\n+     kSeparator    = 3, // Zs, Zl, and Zp\\n+     kOther        = 4, // Cc, Cf, Cs, Co, and Cn\\n+     kLetter       = 5, // Lu, Ll, Lt, Lm, and Lo\\n+     kPunctuation  = 6, // Pc, Pd, Ps, Pe, Pi, Pf, and Po\\n+     kSymbol       = 7  // Sm, Sc, Sk, and So\\n    } nsUGenCategory;\\n \\n    /**\\n     * Give a Unichar, return a nsUGenCategory\\n     */\\n-   NS_IMETHOD Get( PRUnichar aChar, nsUGenCategory* oResult) = 0 ;\\n-    \\n-   /**\\n-    * Give a Unichar, and a nsUGenCategory, \\n-    * return PR_TRUE if the Unichar is in that category, \\n-    * return PR_FALSE, otherwise\\n-    */\\n-   NS_IMETHOD Is( PRUnichar aChar, nsUGenCategory aCategory, PRBool* oResult) = 0;\\n+   virtual nsUGenCategory Get(PRUint32 aChar) = 0;\\n };\\n \\n NS_DEFINE_STATIC_IID_ACCESSOR(nsIUGenCategory, NS_IUGENCATEGORY_IID)\\ndiff --git a/intl/unicharutil/public/nsUnicharUtilCIID.h b/intl/unicharutil/public/nsUnicharUtilCIID.h\\nindex 7cbc91b..2be0ab9 100644\\n--- a/intl/unicharutil/public/nsUnicharUtilCIID.h\\n+++ b/intl/unicharutil/public/nsUnicharUtilCIID.h\\n@@ -46,4 +46,11 @@\\n   { 0xb3, 0xae, 0x0, 0x80, 0x5f, 0x8a, 0x66, 0x70 } }\\n \\n #define NS_UNICHARUTIL_CONTRACTID \\\"@mozilla.org/intl/unicharutil;1\\\"\\n+\\n+#define NS_UNICHARCATEGORY_CID \\\\\\n+{ 0x748a1132, 0x671a, 0x409a, \\\\\\n+  { 0x8d, 0x1d, 0xf1, 0xcd, 0xf6, 0xb3, 0xa6, 0xb4 } }\\n+\\n+#define NS_UNICHARCATEGORY_CONTRACTID \\\"@mozilla.org/intl/unicharcategory;1\\\"\\n+\\n #endif\\ndiff --git a/intl/unicharutil/src/Makefile.in b/intl/unicharutil/src/Makefile.in\\nindex d40d55d..f26c2bf 100644\\n--- a/intl/unicharutil/src/Makefile.in\\n+++ b/intl/unicharutil/src/Makefile.in\\n@@ -57,6 +57,7 @@ EXPORTS = cattable.h\\n \\n CPPSRCS\\t\\t= \\\\\\n \\t\\tnsCaseConversionImp2.cpp \\\\\\n+\\t\\tnsCategoryImp.cpp \\\\\\n \\t\\tnsHankakuToZenkaku.cpp \\\\\\n \\t\\tnsEntityConverter.cpp \\\\\\n \\t\\tnsSaveAsCharset.cpp \\\\\\ndiff --git a/intl/unicharutil/src/nsCategoryImp.cpp b/intl/unicharutil/src/nsCategoryImp.cpp\\nindex 039f96e..98f0563 100644\\n--- a/intl/unicharutil/src/nsCategoryImp.cpp\\n+++ b/intl/unicharutil/src/nsCategoryImp.cpp\\n@@ -42,36 +42,26 @@\\n #include \\\"nsCategoryImp.h\\\"\\n #include \\\"cattable.h\\\"\\n \\n-NS_IMPL_ISUPPORTS1(nsCategoryImp, nsIUGenCategory)\\n+static nsCategoryImp gCategoryImp;\\n \\n+NS_IMPL_THREADSAFE_QUERY_INTERFACE1(nsCategoryImp, nsIUGenCategory)\\n \\n-nsCategoryImp::nsCategoryImp()\\n+NS_IMETHODIMP_(nsrefcnt) nsCategoryImp::AddRef(void)\\n {\\n+  return nsrefcnt(1);\\n }\\n \\n-nsCategoryImp::~nsCategoryImp()\\n+NS_IMETHODIMP_(nsrefcnt) nsCategoryImp::Release(void)\\n {\\n+  return nsrefcnt(1);\\n }\\n \\n-nsresult nsCategoryImp::Get( PRUnichar aChar, nsUGenCategory* oResult)\\n+nsCategoryImp* nsCategoryImp::GetInstance()\\n {\\n-   PRUint8 ret = GetCat(aChar);\\n-   if( 0 == ret)\\n-      *oResult = kUGenCategory_Other; // treat it as Cn - Other, Not Assigned\\n-   else \\n-      *oResult = (nsUGenCategory)ret;\\n-   return NS_OK;\\n+  return &gCategoryImp;\\n }\\n-    \\n-nsresult nsCategoryImp::Is( PRUnichar aChar, nsUGenCategory aCategory, PRBool* oResult)\\n \\n+nsIUGenCategory::nsUGenCategory nsCategoryImp::Get(PRUint32 aChar)\\n {\\n-   nsUGenCategory cat ;\\n-   PRUint8 ret = GetCat(aChar);\\n-   if( 0 == ret)\\n-      cat = kUGenCategory_Other; // treat it as Cn - Other, Not Assigned\\n-   else \\n-      cat = (nsUGenCategory)ret;\\n-   *oResult = (aCategory == cat );\\n-   return NS_OK;\\n+  return nsUGenCategory(GetCat(aChar));\\n }\\ndiff --git a/intl/unicharutil/src/nsCategoryImp.h b/intl/unicharutil/src/nsCategoryImp.h\\nindex 839fd03..b8c2023 100644\\n--- a/intl/unicharutil/src/nsCategoryImp.h\\n+++ b/intl/unicharutil/src/nsCategoryImp.h\\n@@ -37,29 +37,18 @@\\n #ifndef nsCategoryImp_h__\\n #define nsCategoryImp_h__\\n \\n-#include \\\"nscore.h\\\"\\n-#include \\\"nsISupports.h\\\"\\n #include \\\"nsIUGenCategory.h\\\"\\n \\n class nsCategoryImp : public nsIUGenCategory {\\n    NS_DECL_ISUPPORTS\\n    \\n-public: \\n-   nsCategoryImp();\\n-   virtual ~nsCategoryImp();\\n-\\n-\\n-   /**\\n-    * Give a Unichar, return a nsUGenCategory\\n-    */\\n-   NS_IMETHOD Get( PRUnichar aChar, nsUGenCategory* oResult);\\n+public:\\n+   static nsCategoryImp* GetInstance();\\n     \\n    /**\\n-    * Give a Unichar, and a nsUGenCategory, \\n-    * return PR_TRUE if the Unichar is in that category, \\n-    * return PR_FALSE, otherwise\\n+    * Give a Unichar, return a nsUGenCategory\\n     */\\n-   NS_IMETHOD Is( PRUnichar aChar, nsUGenCategory aCategory, PRBool* oResult);\\n+   virtual nsUGenCategory Get(PRUint32 aChar);\\n };\\n \\n #endif  /* nsCategoryImp_h__ */\\ndiff --git a/intl/unicharutil/src/nsUcharUtilConstructors.h b/intl/unicharutil/src/nsUcharUtilConstructors.h\\nindex 7c821a4..6a26458 100644\\n--- a/intl/unicharutil/src/nsUcharUtilConstructors.h\\n+++ b/intl/unicharutil/src/nsUcharUtilConstructors.h\\n@@ -40,6 +40,7 @@\\n \\n #include \\\"nsUnicharUtilCIID.h\\\"\\n #include \\\"nsCaseConversionImp2.h\\\"\\n+#include \\\"nsCategoryImp.h\\\"\\n #include \\\"nsHankakuToZenkakuCID.h\\\"\\n #include \\\"nsTextTransformFactory.h\\\"\\n #include \\\"nsICaseConversion.h\\\"\\n@@ -82,6 +83,8 @@ UNICHARUTIL_MAKE_CTOR(HankakuToZenkaku)\\n \\n NS_GENERIC_FACTORY_SINGLETON_CONSTRUCTOR(nsCaseConversionImp2,\\n                                          nsCaseConversionImp2::GetInstance)\\n+NS_GENERIC_FACTORY_SINGLETON_CONSTRUCTOR(nsCategoryImp,\\n+                                         nsCategoryImp::GetInstance)\\n NS_GENERIC_FACTORY_CONSTRUCTOR(nsEntityConverter)\\n NS_GENERIC_FACTORY_CONSTRUCTOR(nsSaveAsCharset)\\n NS_GENERIC_FACTORY_CONSTRUCTOR(nsUnicodeNormalizer)\\n\""}