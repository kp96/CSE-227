{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas58f54cd\""},"diff":"\"58f54cd Merge from cvs-trunk-mirror.\\n\\ndiff --cc client.py\\nindex f1ec8c4,0000000..0e13eee\\nmode 100644,000000..100644\\n--- a/client.py\\n+++ b/client.py\\n@@@ -1,115 -1,0 +1,115 @@@\\n +#!/usr/bin/python\\n +\\n- NSPR_CO_TAG = 'NSPR_HEAD_20070713'\\n++NSPR_CO_TAG = 'NSPR_HEAD_20070820'\\n +NSS_CO_TAG  = 'NSS_3_12_ALPHA1B'\\n +\\n +NSPR_DIRS = ('nsprpub',)\\n +NSS_DIRS  = ('dbm',\\n +             'security/nss',\\n +             'security/coreconf',\\n +             'security/dbm')\\n +\\n +# URL of the default hg repository to clone for Tamarin.\\n +DEFAULT_TAMARIN_REPO = 'http://hg.mozilla.org/tamarin-central/'\\n +\\n +import os\\n +import sys\\n +from optparse import OptionParser\\n +\\n +topsrcdir = os.path.dirname(__file__)\\n +if topsrcdir == '':\\n +    topsrcdir = '.'\\n +\\n +try:\\n +    from subprocess import check_call\\n +except ImportError:\\n +    import subprocess\\n +    def check_call(*popenargs, **kwargs):\\n +        retcode = subprocess.call(*popenargs, **kwargs)\\n +        if retcode:\\n +            cmd = kwargs.get(\\\"args\\\")\\n +            if cmd is None:\\n +                cmd = popenargs[0]\\n +                raise Exception(\\\"Command '%s' returned non-zero exit status %i\\\" % (cmd, retcode))\\n +\\n +def check_call_noisy(cmd, *args, **kwargs):\\n +    print \\\"Executing command:\\\", cmd\\n +    check_call(cmd, *args, **kwargs)\\n +\\n +def do_hg_pull(dir, repository, hg):\\n +    fulldir = os.path.join(topsrcdir, dir)\\n +    # clone if the dir doesn't exist, pull if it does\\n +    if not os.path.exists(fulldir):\\n +        fulldir = os.path.join(topsrcdir, dir)\\n +        check_call_noisy([hg, 'clone', repository, fulldir])\\n +    else:\\n +        cmd = [hg, 'pull', '-u', '-R', fulldir]\\n +        if repository is not None:\\n +            cmd.append(repository)\\n +        check_call_noisy(cmd)\\n +\\n +def do_cvs_checkout(modules, tag, cvsroot, cvs):\\n +    \\\"\\\"\\\"Check out a CVS directory.\\n +    modules is a list of directories to check out, e.g. ['nsprpub']\\n +    \\\"\\\"\\\"\\n +    for module in modules:\\n +        (parent, leaf) = os.path.split(module)\\n +        check_call_noisy([cvs, '-d', cvsroot,\\n +                          'checkout', '-P', '-r', tag, '-d', leaf,\\n +                          'mozilla/%s' % module],\\n +                         cwd=os.path.join(topsrcdir, parent))\\n +\\n +o = OptionParser(usage=\\\"client.py [options] checkout\\\")\\n +o.add_option(\\\"-m\\\", \\\"--mozilla-repo\\\", dest=\\\"mozilla_repo\\\",\\n +             default=None,\\n +             help=\\\"URL of Mozilla repository to pull from (default: use hg default in .hg/hgrc)\\\")\\n +o.add_option(\\\"-t\\\", \\\"--tamarin-repo\\\", dest=\\\"tamarin_repo\\\",\\n +             default=None,\\n +             help=\\\"URL of Tamarin repository to pull from (default: use hg default in js/tamarin/.hg/hgrc; or if that file doesn't exist, use \\\\\\\"\\\" + DEFAULT_TAMARIN_REPO + \\\"\\\\\\\".)\\\")\\n +o.add_option(\\\"--hg\\\", dest=\\\"hg\\\", default=os.environ.get('HG', 'hg'),\\n +             help=\\\"The location of the hg binary\\\")\\n +o.add_option(\\\"--cvs\\\", dest=\\\"cvs\\\", default=os.environ.get('CVS', 'cvs'),\\n +             help=\\\"The location of the cvs binary\\\")\\n +o.add_option(\\\"--cvsroot\\\", dest=\\\"cvsroot\\\",\\n +             default=os.environ.get('CVSROOT', ':pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot'),\\n +             help=\\\"The CVSROOT (default: :pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot\\\")\\n +\\n +\\n +def fixup_repo_options(options):\\n +    \\\"\\\"\\\" Check options.mozilla_repo and options.tamarin_repo values;\\n +    populate tamarin_repo if needed.\\n +\\n +    options.mozilla_repo and options.tamarin_repo are normally None.\\n +    This is fine-- our \\\"hg pull\\\" commands will omit the repo URL.\\n +    The exception is the initial checkout, which does an \\\"hg clone\\\"\\n +    for Tamarin.  That command requires a repository URL.\\n +    \\\"\\\"\\\"\\n +\\n +    if (options.mozilla_repo is None\\n +            and not os.path.exists(os.path.join(topsrcdir, '.hg'))):\\n +        o.print_help()\\n +        print\\n +        print \\\"*** The -m option is required for the initial checkout.\\\"\\n +        sys.exit(2)\\n +\\n +    # Handle special case: initial checkout of Tamarin.\\n +    if (options.tamarin_repo is None\\n +            and not os.path.exists(os.path.join(topsrcdir, 'js', 'tamarin'))):\\n +        options.tamarin_repo = DEFAULT_TAMARIN_REPO\\n +\\n +try:\\n +    (options, (action,)) = o.parse_args()\\n +except ValueError:\\n +    o.print_help()\\n +    sys.exit(2)\\n +\\n +fixup_repo_options(options)\\n +\\n +if action in ('checkout', 'co'):\\n +    do_cvs_checkout(NSPR_DIRS, NSPR_CO_TAG, options.cvsroot, options.cvs)\\n +    do_cvs_checkout(NSS_DIRS, NSS_CO_TAG, options.cvsroot, options.cvs)\\n +    do_hg_pull('js/tamarin', options.tamarin_repo, options.hg)\\n +    do_hg_pull('.', options.mozilla_repo, options.hg)\\n +else:\\n +    o.print_help()\\n +    sys.exit(2)\\n\""}