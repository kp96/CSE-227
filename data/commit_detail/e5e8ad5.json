{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Base5e8ad5\""},"diff":"\"e5e8ad5 Bug 394241 - Add a closeDatabase() method to mozStorage.  r=sspitzer\\ndiff --git a/storage/public/mozIStorageConnection.idl b/storage/public/mozIStorageConnection.idl\\nindex 6b68c08..4182efa 100644\\n--- a/storage/public/mozIStorageConnection.idl\\n+++ b/storage/public/mozIStorageConnection.idl\\n@@ -54,11 +54,17 @@ interface nsIFile;\\n  * creating prepared statements, executing SQL, and examining database\\n  * errors.\\n  */\\n-[scriptable, uuid(9f36de9d-6471-4249-afed-1ee7760e325c)]\\n+[scriptable, uuid(e42f0655-cdc3-47c6-824a-cdb88c731cb9)]\\n interface mozIStorageConnection : nsISupports {\\n   /*\\n    * Initialization and status\\n    */\\n+  \\n+  /**\\n+   * Closes a database connection.  C++ callers should simply set the database\\n+   * variable to NULL.\\n+   */\\n+   void close();\\n \\n   /**\\n    * whether the database is open or not\\ndiff --git a/storage/src/mozStorageConnection.cpp b/storage/src/mozStorageConnection.cpp\\nindex ba9bf24..bffc6ad 100644\\n--- a/storage/src/mozStorageConnection.cpp\\n+++ b/storage/src/mozStorageConnection.cpp\\n@@ -78,19 +78,7 @@ mozStorageConnection::mozStorageConnection(mozIStorageService* aService)\\n \\n mozStorageConnection::~mozStorageConnection()\\n {\\n-    if (mDBConn) {\\n-        if (mProgressHandler)\\n-          sqlite3_progress_handler(mDBConn, 0, NULL, NULL);\\n-        int srv = sqlite3_close (mDBConn);\\n-        if (srv != SQLITE_OK)\\n-            NS_WARNING(\\\"sqlite3_close failed. There are probably outstanding statements!\\\");\\n-\\n-        // make sure it really got closed\\n-        ((mozStorageService*)(mStorageService.get()))->FlushAsyncIO();\\n-\\n-        // Release all functions\\n-        mFunctions.EnumerateRead(s_ReleaseFuncEnum, NULL);\\n-    }\\n+    (void)Close();\\n }\\n \\n #ifdef PR_LOGGING\\n@@ -184,6 +172,28 @@ mozStorageConnection::Initialize(nsIFile *aDatabaseFile)\\n  **/\\n \\n NS_IMETHODIMP\\n+mozStorageConnection::Close()\\n+{\\n+    if (!mDBConn)\\n+        return NS_ERROR_NOT_INITIALIZED;\\n+\\n+    if (mProgressHandler)\\n+        sqlite3_progress_handler(mDBConn, 0, NULL, NULL);\\n+    int srv = sqlite3_close(mDBConn);\\n+    if (srv != SQLITE_OK)\\n+        NS_WARNING(\\\"sqlite3_close failed. There are probably outstanding statements!\\\");\\n+\\n+    // make sure it really got closed\\n+    ((mozStorageService*)(mStorageService.get()))->FlushAsyncIO();\\n+\\n+    // Release all functions\\n+    mFunctions.EnumerateRead(s_ReleaseFuncEnum, NULL);\\n+\\n+    mDBConn = NULL;\\n+    return ConvertResultCode(srv);\\n+}\\n+\\n+NS_IMETHODIMP\\n mozStorageConnection::GetConnectionReady(PRBool *aConnectionReady)\\n {\\n     *aConnectionReady = (mDBConn != nsnull);\\ndiff --git a/storage/test/unit/test_storage_connection.js b/storage/test/unit/test_storage_connection.js\\nindex 20f4d7d..fa2d8e5 100644\\n--- a/storage/test/unit/test_storage_connection.js\\n+++ b/storage/test/unit/test_storage_connection.js\\n@@ -39,9 +39,10 @@\\n \\n const BACKUP_FILE_NAME = \\\"test_storage.sqlite.backup\\\";\\n \\n-function test_connectionReady()\\n+function test_connectionReady_open()\\n {\\n-  // there doesn't seem to be a way for the connection to not be ready\\n+  // there doesn't seem to be a way for the connection to not be ready (unless\\n+  // we close it with mozIStorageConnection::Close(), but we don't for this).\\n   // It can only fail if GetPath fails on the database file, or if we run out\\n   // of memory trying to use an in-memory database\\n \\n@@ -49,6 +50,16 @@ function test_connectionReady()\\n   do_check_true(msc.connectionReady);\\n }\\n \\n+function test_connectionReady_closed()\\n+{\\n+  // This also tests mozIStorageConnection::Close()\\n+\\n+  var msc = getOpenedDatabase();\\n+  msc.close();\\n+  do_check_false(msc.connectionReady);\\n+  gDBConn = null; // this is so later tests don't start to fail.\\n+}\\n+\\n function test_databaseFile()\\n {\\n   var msc = getOpenedDatabase();\\n@@ -211,7 +222,8 @@ function test_backup_new_folder()\\n   parentDir.remove(true);\\n }\\n \\n-var tests = [test_connectionReady, test_databaseFile,\\n+var tests = [test_connectionReady_open, test_connectionReady_closed,\\n+             test_databaseFile,\\n              test_tableExists_not_created, test_indexExists_not_created,\\n              test_createTable_not_created, test_indexExists_created,\\n              test_createTable_already_created, test_lastInsertRowID,\\n\""}