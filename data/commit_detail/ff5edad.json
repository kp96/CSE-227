{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basff5edad\""},"diff":"\"ff5edad Fixing bug 395651. Make our UTF-8 and UTF-16 comparison code etc more robust when dealing with invalid UTF-16 data. r+sr=jonas@sicking.cc, a=jst@mozilla.org/jonas@sicking.cc\\ndiff --git a/xpcom/string/public/nsUTF8Utils.h b/xpcom/string/public/nsUTF8Utils.h\\nindex 5b24366..fe0abf5 100644\\n--- a/xpcom/string/public/nsUTF8Utils.h\\n+++ b/xpcom/string/public/nsUTF8Utils.h\\n@@ -293,13 +293,18 @@ public:\\n       }\\n     else if (NS_IS_HIGH_SURROGATE(c)) // U+D800 - U+DBFF\\n       {\\n-        if (*buffer == end)\\n+        if (p == end)\\n           {\\n-            NS_ERROR(\\\"Unexpected end of buffer after high surrogate\\\");\\n+            // Found a high surrogate the end of the buffer. Flag this\\n+            // as an error and return the Unicode replacement\\n+            // character 0xFFFD.\\n+\\n+            NS_WARNING(\\\"Unexpected end of buffer after high surrogate\\\");\\n+\\n             if (err)\\n               *err = PR_TRUE;\\n-\\n-            return 0;\\n+            *buffer = p;\\n+            return 0xFFFD;\\n           }\\n \\n         // D800- DBFF - High Surrogate\\n@@ -319,15 +324,31 @@ public:\\n           }\\n         else\\n           {\\n-            NS_ERROR(\\\"got a High Surrogate but no low surrogate\\\");\\n-            // output nothing.\\n+            // Found a high surrogate followed by something other than\\n+            // a low surrogate. Flag this as an error and return the\\n+            // Unicode replacement character 0xFFFD.\\n+\\n+            NS_WARNING(\\\"got a High Surrogate but no low surrogate\\\");\\n+\\n+            if (err)\\n+              *err = PR_TRUE;\\n+            *buffer = p;\\n+            return 0xFFFD;\\n           }\\n       }\\n     else // U+DC00 - U+DFFF\\n       {\\n         // DC00- DFFF - Low Surrogate\\n-        NS_ERROR(\\\"got a low Surrogate but no high surrogate\\\");\\n-        // output nothing.\\n+\\n+        // Found a low surrogate w/o a preceeding high surrogate. Flag\\n+        // this as an error and return the Unicode replacement\\n+        // character 0xFFFD.\\n+\\n+        NS_WARNING(\\\"got a low Surrogate but no high surrogate\\\");\\n+        if (err)\\n+          *err = PR_TRUE;\\n+        *buffer = p;\\n+        return 0xFFFD;\\n       }\\n \\n     if (err)\\n@@ -359,10 +380,15 @@ public:\\n       {\\n         if (iter == end)\\n           {\\n+            // Found a high surrogate the end of the buffer. Flag this\\n+            // as an error and return the Unicode replacement\\n+            // character 0xFFFD.\\n+\\n+            NS_WARNING(\\\"Unexpected end of buffer after high surrogate\\\");\\n+\\n             if (err)\\n               *err = PR_TRUE;\\n-\\n-            return 0;\\n+            return 0xFFFD;\\n           }\\n \\n         // D800- DBFF - High Surrogate\\n@@ -381,15 +407,30 @@ public:\\n           }\\n         else\\n           {\\n-            NS_ERROR(\\\"got a High Surrogate but no low surrogate\\\");\\n-            // output nothing.\\n+            // Found a high surrogate followed by something other than\\n+            // a low surrogate. Flag this as an error and return the\\n+            // Unicode replacement character 0xFFFD.\\n+\\n+            NS_WARNING(\\\"got a High Surrogate but no low surrogate\\\");\\n+\\n+            if (err)\\n+              *err = PR_TRUE;\\n+            return 0xFFFD;\\n           }\\n       }\\n     else // U+DC00 - U+DFFF\\n       {\\n         // DC00- DFFF - Low Surrogate\\n-        NS_ERROR(\\\"got a low Surrogate but no high surrogate\\\");\\n-        // output nothing.\\n+\\n+        // Found a low surrogate w/o a preceeding high surrogate. Flag\\n+        // this as an error and return the Unicode replacement\\n+        // character 0xFFFD.\\n+\\n+        NS_WARNING(\\\"got a low Surrogate but no high surrogate\\\");\\n+\\n+        if (err)\\n+          *err = PR_TRUE;\\n+        return 0xFFFD;\\n       }\\n \\n     if (err)\\ndiff --git a/xpcom/string/src/nsReadableUtils.cpp b/xpcom/string/src/nsReadableUtils.cpp\\nindex 5120e1a..c40c220b 100755\\n--- a/xpcom/string/src/nsReadableUtils.cpp\\n+++ b/xpcom/string/src/nsReadableUtils.cpp\\n@@ -1158,11 +1158,20 @@ CompareUTF8toUTF16(const nsASingleFragmentCString& aUTF8String,\\n             if (err)\\n               return PR_INT32_MIN;\\n \\n-            PRUint32 c16_32 = UTF16CharEnumerator::NextChar(&u16, u16end,\\n-                                                            &err);\\n-            if (err)\\n-              return PR_INT32_MIN;\\n-\\n+            PRUint32 c16_32 = UTF16CharEnumerator::NextChar(&u16, u16end);\\n+            // The above UTF16CharEnumerator::NextChar() calls can\\n+            // fail, but if it does for anything other than no data to\\n+            // look at (which can't happen here), it returns the\\n+            // Unicode replacement character 0xFFFD for the invalid\\n+            // data they were fed. Ignore that error and treat invalid\\n+            // UTF16 as 0xFFFD.\\n+            //\\n+            // This matches what our UTF16 to UTF8 conversion code\\n+            // does, and thus a UTF8 string that came from an invalid\\n+            // UTF16 string will compare equal to the invalid UTF16\\n+            // string it came from. Same is true for any other UTF16\\n+            // string differs only in the invalid part of the string.\\n+            \\n             if (c8_32 != c16_32)\\n               return c8_32 < c16_32 ? -1 : 1;\\n           }\\n\""}