{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Base992ddd\""},"diff":"\"e992ddd Bug 393464  Bookmarks manager doesn't search in tags field (r=sspitzer, a=mconnor)\\ndiff --git a/toolkit/components/places/public/nsITaggingService.idl b/toolkit/components/places/public/nsITaggingService.idl\\nindex cbf048f..de99adc 100644\\n--- a/toolkit/components/places/public/nsITaggingService.idl\\n+++ b/toolkit/components/places/public/nsITaggingService.idl\\n@@ -91,3 +91,9 @@ interface nsITaggingService : nsISupports\\n    */\\n   readonly attribute nsIVariant allTags;\\n };\\n+\\n+%{C++\\n+\\n+#define TAGGING_SERVICE_CID \\\"@mozilla.org/browser/tagging-service;1\\\"\\n+\\n+%}\\ndiff --git a/toolkit/components/places/src/nsNavHistory.cpp b/toolkit/components/places/src/nsNavHistory.cpp\\nindex 2ff5361..3e2756a 100644\\n--- a/toolkit/components/places/src/nsNavHistory.cpp\\n+++ b/toolkit/components/places/src/nsNavHistory.cpp\\n@@ -69,6 +69,9 @@\\n #include \\\"prtime.h\\\"\\n #include \\\"prprf.h\\\"\\n #include \\\"nsEscape.h\\\"\\n+#include \\\"nsITaggingService.h\\\"\\n+#include \\\"nsIVariant.h\\\"\\n+#include \\\"nsVariant.h\\\"\\n \\n #include \\\"mozIStorageService.h\\\"\\n #include \\\"mozIStorageConnection.h\\\"\\n@@ -4096,6 +4099,45 @@ nsNavHistory::GroupByHost(nsNavHistoryQueryResultNode *aResultNode,\\n   return NS_OK;\\n }\\n \\n+PRBool\\n+nsNavHistory::URIHasTag(nsIURI* aURI, const nsAString& aTag)\\n+{\\n+  nsresult rv;\\n+  nsCOMPtr<nsITaggingService> tagService =\\n+    do_GetService(TAGGING_SERVICE_CID, &rv);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  nsCOMPtr<nsIVariant> tagsV;\\n+  rv = tagService->GetTagsForURI(aURI, getter_AddRefs(tagsV));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  // confirm that type is array, and has elements\\n+  // (data type is different for empty array)\\n+  PRUint16 dataType;\\n+  tagsV->GetDataType(&dataType);\\n+  if (dataType != nsIDataType::VTYPE_ARRAY)\\n+    return PR_FALSE;\\n+\\n+  // get tags as array\\n+  PRUint16 type;\\n+  nsIID iid;\\n+  PRUint32 count;\\n+  PRUnichar** tags;\\n+  rv = tagsV->GetAsArray(&type, &iid, &count, (void**)&tags);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  for (PRUint32 i = 0; i < count; i++) {\\n+    nsAutoString tag(tags[i]);\\n+    PRInt32 position = Compare(tag, aTag, nsCaseInsensitiveStringComparator());\\n+    if (position == 0) {\\n+      nsMemory::Free(tags);\\n+      return PR_TRUE;\\n+    }\\n+  }\\n+  nsMemory::Free(tags);\\n+  return PR_FALSE;\\n+}\\n+\\n \\n // nsNavHistory::FilterResultSet\\n //\\n@@ -4161,6 +4203,7 @@ nsNavHistory::FilterResultSet(nsNavHistoryQueryResultNode* aParentNode,\\n     if (terms.Count() == 0) {\\n         allTermsFound = PR_TRUE;\\n     } else {\\n+\\n       for (PRInt32 termIndex = 0; termIndex < terms.Count(); termIndex ++) {\\n         PRBool termFound = PR_FALSE;\\n         // title and URL\\n@@ -4170,6 +4213,7 @@ nsNavHistory::FilterResultSet(nsNavHistoryQueryResultNode* aParentNode,\\n              CaseInsensitiveFindInReadable(*terms[termIndex],\\n                                     NS_ConvertUTF8toUTF16(aSet[nodeIndex]->mURI))))\\n           termFound = PR_TRUE;\\n+\\n         // searchable annotations\\n         /*if (! termFound) {\\n           for (PRInt32 annotIndex = 0; annotIndex < curAnnotations.Count(); annotIndex ++) {\\n@@ -4178,7 +4222,16 @@ nsNavHistory::FilterResultSet(nsNavHistoryQueryResultNode* aParentNode,\\n               termFound = PR_TRUE;\\n           }\\n         }*/\\n-        if (! termFound) {\\n+\\n+        // search tags\\n+        if (!termFound) {\\n+          nsCOMPtr<nsIURI> itemURI;\\n+          rv = NS_NewURI(getter_AddRefs(itemURI), aSet[nodeIndex]->mURI);\\n+          NS_ENSURE_SUCCESS(rv, rv);\\n+          termFound = URIHasTag(itemURI, *terms[termIndex]);\\n+        }\\n+\\n+        if (!termFound) {\\n           allTermsFound = PR_FALSE;\\n           break;\\n         }\\ndiff --git a/toolkit/components/places/src/nsNavHistory.h b/toolkit/components/places/src/nsNavHistory.h\\nindex 792a074..b128b4e 100644\\n--- a/toolkit/components/places/src/nsNavHistory.h\\n+++ b/toolkit/components/places/src/nsNavHistory.h\\n@@ -511,6 +511,8 @@ protected:\\n                        nsCOMArray<nsNavHistoryResultNode>* aDest,\\n                        PRBool aIsDomain);\\n \\n+  PRBool URIHasTag(nsIURI* aURI, const nsAString& aTag);\\n+\\n   nsresult FilterResultSet(nsNavHistoryQueryResultNode *aParentNode,\\n                            const nsCOMArray<nsNavHistoryResultNode>& aSet,\\n                            nsCOMArray<nsNavHistoryResultNode>* aFiltered,\\ndiff --git a/toolkit/components/places/tests/bookmarks/test_395101.js b/toolkit/components/places/tests/bookmarks/test_395101.js\\nnew file mode 100644\\nindex 0000000..50d04f6\\n--- /dev/null\\n+++ b/toolkit/components/places/tests/bookmarks/test_395101.js\\n@@ -0,0 +1,115 @@\\n+/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n+/* vim:set ts=2 sw=2 sts=2 et: */\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is mozilla.org code.\\n+ *\\n+ * The Initial Developer of the Original Code is Google Inc.\\n+ * Portions created by the Initial Developer are Copyright (C) 2005\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *  Dietrich Ayala <dietrich@mozilla.com>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+// Get bookmark service\\n+try {\\n+  var bmsvc = Cc[\\\"@mozilla.org/browser/nav-bookmarks-service;1\\\"].getService(Ci.nsINavBookmarksService);\\n+} catch(ex) {\\n+  do_throw(\\\"Could not get nav-bookmarks-service\\\\n\\\");\\n+}\\n+\\n+// Get history service\\n+try {\\n+  var histsvc = Cc[\\\"@mozilla.org/browser/nav-history-service;1\\\"].getService(Ci.nsINavHistoryService);\\n+} catch(ex) {\\n+  do_throw(\\\"Could not get history service\\\\n\\\");\\n+} \\n+\\n+// Get tagging service\\n+try {\\n+  var tagssvc = Cc[\\\"@mozilla.org/browser/tagging-service;1\\\"].\\n+                getService(Ci.nsITaggingService);\\n+} catch(ex) {\\n+  do_throw(\\\"Could not get tagging service\\\\n\\\");\\n+}\\n+\\n+// get bookmarks root id\\n+var root = bmsvc.bookmarksRoot;\\n+\\n+// main\\n+function run_test() {\\n+  // test searching for tagged bookmarks\\n+\\n+  // test folder\\n+  var folder = bmsvc.createFolder(root, \\\"bug 395101 test\\\", bmsvc.DEFAULT_INDEX);\\n+\\n+  // create a bookmark\\n+  var testURI = uri(\\\"http://a1.com\\\");\\n+  var b1 = bmsvc.insertBookmark(folder, testURI,\\n+                                bmsvc.DEFAULT_INDEX, \\\"1 title\\\");\\n+\\n+  // tag the bookmarked URI\\n+  tagssvc.tagURI(testURI, [\\\"elephant\\\", \\\"walrus\\\", \\\"giraffe\\\", \\\"turkey\\\", \\\"hiPPo\\\", \\\"BABOON\\\", \\\"alf\\\"]);\\n+\\n+  // search for the bookmark, using a tag\\n+  var query = histsvc.getNewQuery();\\n+  query.searchTerms = \\\"elephant\\\";\\n+  var options = histsvc.getNewQueryOptions();\\n+  options.queryType = Ci.nsINavHistoryQueryOptions.QUERY_TYPE_BOOKMARKS;\\n+  query.setFolders([folder], 1);\\n+\\n+  var result = histsvc.executeQuery(query, options);\\n+  var rootNode = result.root;\\n+  rootNode.containerOpen = true;\\n+\\n+  do_check_eq(rootNode.childCount, 1);\\n+  do_check_eq(rootNode.getChild(0).itemId, b1);\\n+\\n+  // only exact matches\\n+  query.searchTerms = \\\"wal\\\";\\n+  var result = histsvc.executeQuery(query, options);\\n+  var rootNode = result.root;\\n+  rootNode.containerOpen = true;\\n+  do_check_eq(rootNode.childCount, 0);\\n+\\n+  // case insensitive search term\\n+  query.searchTerms = \\\"WALRUS\\\";\\n+  var result = histsvc.executeQuery(query, options);\\n+  var rootNode = result.root;\\n+  rootNode.containerOpen = true;\\n+  do_check_eq(rootNode.childCount, 1);\\n+  do_check_eq(rootNode.getChild(0).itemId, b1);\\n+\\n+  // case insensitive tag\\n+  query.searchTerms = \\\"baboon\\\";\\n+  var result = histsvc.executeQuery(query, options);\\n+  var rootNode = result.root;\\n+  rootNode.containerOpen = true;\\n+  do_check_eq(rootNode.childCount, 1);\\n+  do_check_eq(rootNode.getChild(0).itemId, b1);\\n+}\\n\""}