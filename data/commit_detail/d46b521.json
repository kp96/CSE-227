{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basd46b521\""},"diff":"\"d46b521 Fix dumb signed comparison bug (395828, r=mrbkap).\\ndiff --git a/js/src/jsstr.c b/js/src/jsstr.c\\nindex 017f21d..9340390 100644\\n--- a/js/src/jsstr.c\\n+++ b/js/src/jsstr.c\\n@@ -2365,14 +2365,13 @@ js_InitRuntimeStringState(JSContext *cx)\\n #define UNIT_STRING_SPACE_RT(rt) UNIT_STRING_SPACE((rt)->unitStrings)\\n \\n #define IN_UNIT_STRING_SPACE(sp,cp)                                           \\\\\\n-    ((cp) - UNIT_STRING_SPACE(sp) < 2 * UNIT_STRING_LIMIT)\\n+    ((size_t)((cp) - UNIT_STRING_SPACE(sp)) < 2 * UNIT_STRING_LIMIT)\\n #define IN_UNIT_STRING_SPACE_RT(rt,cp)                                        \\\\\\n     IN_UNIT_STRING_SPACE((rt)->unitStrings, cp)\\n \\n JSString *\\n js_GetUnitString(JSContext *cx, jschar c)\\n {\\n-#if 1\\n     JSRuntime *rt;\\n     JSString **sp, *str;\\n     jschar *cp, i;\\n@@ -2404,38 +2403,20 @@ js_GetUnitString(JSContext *cx, jschar c)\\n     if (!rt->unitStrings[c]) {\\n         cp = UNIT_STRING_SPACE_RT(rt);\\n         str = js_NewString(cx, cp + 2 * c, 1);\\n-        if (!str || !js_LockGCThing(cx, str))\\n+        if (!str)\\n             return NULL;\\n         JS_LOCK_GC(rt);\\n-        if (!rt->unitStrings[c]) {\\n+        if (!rt->unitStrings[c])\\n             rt->unitStrings[c] = str;\\n-            JS_UNLOCK_GC(rt);\\n-        } else {\\n-            JS_UNLOCK_GC(rt);\\n-            js_UnlockGCThingRT(rt, str);\\n-        }\\n+        JS_UNLOCK_GC(rt);\\n     }\\n     return rt->unitStrings[c];\\n-#else\\n-    return js_NewStringCopyN(cx, &c, 1);\\n-#endif\\n }\\n \\n void\\n js_FinishRuntimeStringState(JSContext *cx)\\n {\\n-    JSRuntime *rt = cx->runtime;\\n-\\n-    rt->emptyString = NULL;\\n-\\n-    if (rt->unitStrings) {\\n-        jschar c;\\n-\\n-        for (c = 0; c < UNIT_STRING_LIMIT; c++) {\\n-            if (rt->unitStrings[c])\\n-                js_UnlockGCThingRT(rt, rt->unitStrings[c]);\\n-        }\\n-    }\\n+    cx->runtime->emptyString = NULL;\\n }\\n \\n void\\n@@ -2665,8 +2646,14 @@ js_FinalizeStringRT(JSRuntime *rt, JSString *str)\\n     } else {\\n         /* A stillborn string has null chars, so is not valid. */\\n         valid = (str->u.chars != NULL);\\n-        if (valid && !IN_UNIT_STRING_SPACE_RT(rt, str->u.chars))\\n-            free(str->u.chars);\\n+        if (valid) {\\n+            if (IN_UNIT_STRING_SPACE_RT(rt, str->u.chars)) {\\n+                JS_ASSERT(rt->unitStrings[*str->u.chars] == str);\\n+                rt->unitStrings[*str->u.chars] = NULL;\\n+            } else {\\n+                free(str->u.chars);\\n+            }\\n+        }\\n     }\\n     if (valid)\\n         js_PurgeDeflatedStringCache(rt, str);\\ndiff --git a/js/src/jsstr.h b/js/src/jsstr.h\\nindex c6e3c5d..67452b0 100644\\n--- a/js/src/jsstr.h\\n+++ b/js/src/jsstr.h\\n@@ -358,7 +358,7 @@ js_InitRuntimeStringState(JSContext *cx);\\n  * Maximum character code for which we will create a pinned unit string on\\n  * demand -- see JSRuntime.unitStrings in jscntxt.h.\\n  */\\n-#define UNIT_STRING_LIMIT 256\\n+#define UNIT_STRING_LIMIT 256U\\n \\n /*\\n  * Get the independent string containing only character code c (backstopped\\n\""}