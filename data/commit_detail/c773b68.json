{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basc773b68\""},"diff":"\"c773b68 bug 397644. File control not exposed correctly to a11y apis. r+sr+a=roc\\ndiff --git a/accessible/src/base/nsAccessibleTreeWalker.cpp b/accessible/src/base/nsAccessibleTreeWalker.cpp\\nindex f1a0c2e..f2a9770 100755\\n--- a/accessible/src/base/nsAccessibleTreeWalker.cpp\\n+++ b/accessible/src/base/nsAccessibleTreeWalker.cpp\\n@@ -230,6 +230,7 @@ void nsAccessibleTreeWalker::UpdateFrame(PRBool aTryFirstChild)\\n     return;\\n   }\\n   if (aTryFirstChild) {\\n+    nsIContent *containerContent = mState.frame->GetContent();\\n     mState.frame = mState.frame->GetFirstChild(nsnull);\\n // temporary workaround for Bug 359210. We never want to walk frames.\\n // Aaron Leventhal will refix :before and :after content later without walking frames.\\n@@ -253,6 +254,17 @@ void nsAccessibleTreeWalker::UpdateFrame(PRBool aTryFirstChild)\\n       mState.siblingIndex = eSiblingsWalkFrames;\\n     }\\n #endif\\n+    // Special case: <input type=\\\"file\\\">\\n+    // We should still need to walk frames inside the file control frame\\n+    // This special case may turn into a more general rule after Firefox 3,\\n+    // if HTML 5 controls use nsIAnonymousContentCreator\\n+    if (containerContent->Tag() == nsAccessibilityAtoms::input &&\\n+        containerContent->AttrValueIs(kNameSpaceID_None, nsAccessibilityAtoms::type,\\n+                                      NS_LITERAL_STRING(\\\"file\\\"), eIgnoreCase) &&\\n+        mState.frame && mState.siblingIndex < 0)  {\\n+      mState.domNode = do_QueryInterface(mState.frame->GetContent());\\n+      mState.siblingIndex = eSiblingsWalkFrames;\\n+    }\\n   }\\n   else {\\n     mState.frame = mState.frame->GetNextSibling();\\ndiff --git a/layout/forms/nsFileControlFrame.cpp b/layout/forms/nsFileControlFrame.cpp\\nindex f402bad..a89c181 100644\\n--- a/layout/forms/nsFileControlFrame.cpp\\n+++ b/layout/forms/nsFileControlFrame.cpp\\n@@ -70,6 +70,9 @@\\n #include \\\"nsContentCreatorFunctions.h\\\"\\n #include \\\"nsContentUtils.h\\\"\\n #include \\\"nsDisplayList.h\\\"\\n+#ifdef ACCESSIBILITY\\n+#include \\\"nsIAccessibilityService.h\\\"\\n+#endif\\n \\n #define SYNC_TEXT 0x1\\n #define SYNC_BUTTON 0x2\\n@@ -598,6 +601,15 @@ nsFileControlFrame::BuildDisplayList(nsDisplayListBuilder*   aBuilder,\\n   return DisplaySelectionOverlay(aBuilder, aLists);\\n }\\n \\n+#ifdef ACCESSIBILITY\\n+NS_IMETHODIMP nsFileControlFrame::GetAccessible(nsIAccessible** aAccessible)\\n+{\\n+  // No accessible object for file control, only for child text frame and button\\n+  *aAccessible = nsnull;\\n+  return NS_ERROR_FAILURE;\\n+}\\n+#endif\\n+\\n ////////////////////////////////////////////////////////////\\n // Mouse listener implementation\\n \\ndiff --git a/layout/forms/nsFileControlFrame.h b/layout/forms/nsFileControlFrame.h\\nindex 09d87b6..e23f357 100644\\n--- a/layout/forms/nsFileControlFrame.h\\n+++ b/layout/forms/nsFileControlFrame.h\\n@@ -93,6 +93,10 @@ public:\\n   // nsIAnonymousContentCreator\\n   virtual nsresult CreateAnonymousContent(nsTArray<nsIContent*>& aElements);\\n \\n+#ifdef ACCESSIBILITY\\n+  NS_IMETHOD GetAccessible(nsIAccessible** aAccessible);\\n+#endif\\n+\\n protected:\\n   class MouseListener;\\n   friend class MouseListener;\\n\""}