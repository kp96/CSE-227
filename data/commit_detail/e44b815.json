{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Base44b815\""},"diff":"\"e44b815 Inject default web-based protocol handlers into mimeTypes.rdf (bug 392978), r=myk, sr=biesi, a=mconnor\\ndiff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js\\nindex 7ef0af5..1e835c1 100644\\n--- a/browser/app/profile/firefox.js\\n+++ b/browser/app/profile/firefox.js\\n@@ -496,6 +496,20 @@ pref(\\\"browser.contentHandlers.types.5.type\\\", \\\"application/vnd.mozilla.maybe.feed\\n \\n pref(\\\"browser.feeds.handler\\\", \\\"ask\\\");\\n \\n+// For now, this is living in content rather than in locales, as per Pike.\\n+// Eventually it will get merged into region.properties; see bug 395277.\\n+//\\n+// At startup, if the handler service notices that the version number here\\n+// is newer than the version number in the handler service datastore, it will\\n+// add any handlers it finds in the prefs (as seeded by this file) to its\\n+// datastore.  \\n+pref(\\\"gecko.handlerService.defaultHandlersVersion\\\", \\\"0\\\");\\n+//\\n+// The default set of web-based protocol handlers shown in the application\\n+// selection dialog\\n+pref(\\\"gecko.handlerService.schemes.webcal.0.name\\\", \\\"WebCal Test Handler\\\");\\n+pref(\\\"gecko.handlerService.schemes.webcal.0.uriTemplate\\\", \\\"http://handler-test.mozilla.org/webcal?url=%s\\\");\\n+\\n #ifdef MOZ_SAFE_BROWSING\\n // Safe browsing does nothing unless both these prefs are set.\\n pref(\\\"browser.safebrowsing.enabled\\\", true);\\ndiff --git a/uriloader/exthandler/nsHandlerService.js b/uriloader/exthandler/nsHandlerService.js\\nindex 13b17ca..6709ba3 100755\\n--- a/uriloader/exthandler/nsHandlerService.js\\n+++ b/uriloader/exthandler/nsHandlerService.js\\n@@ -19,6 +19,7 @@\\n  *\\n  * Contributor(s):\\n  *   Myk Melez <myk@mozilla.org>\\n+ *   Dan Mosedale <dmose@mozilla.org>\\n  *\\n  * Alternatively, the contents of this file may be used under the terms of\\n  * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n@@ -47,6 +48,9 @@ const CLASS_PROTOCOLINFO    = \\\"scheme\\\";\\n // namespace prefix\\n const NC_NS                 = \\\"http://home.netscape.com/NC-rdf#\\\";\\n \\n+// the most recent default handlers that have been injected\\n+const NC_DEFAULT_HANDLERS_VERSION = NC_NS + \\\"defaultHandlersVersion\\\";\\n+\\n // type list properties\\n \\n const NC_MIME_TYPES         = NC_NS + \\\"MIME-types\\\";\\n@@ -118,11 +122,33 @@ HandlerService.prototype = {\\n     // Observe xpcom-shutdown so we can remove these observers\\n     // when the application shuts down.\\n     this._observerSvc.addObserver(this, \\\"xpcom-shutdown\\\", false);\\n+\\n+    // Observe profile-do-change so that non-default profiles get upgraded too\\n+    this._observerSvc.addObserver(this, \\\"profile-do-change\\\", false);\\n+    \\n+    // do any necessary updating of the datastore\\n+    this._updateDB();\\n   },\\n \\n+  _updateDB: function HS__updateDB() {\\n+    // if the default prefs have changed, inject any new default handers\\n+    // into the datastore \\n+    try { \\n+      if (this._datastoreDefaultHandlersVersion <\\n+          this._prefsDefaultHandlersVersion) {\\n+        this._injectNewDefaults();\\n+        this._datastoreDefaultHandlersVersion = \\n+        this._prefsDefaultHandlersVersion;\\n+      }\\n+    } catch (ex) {\\n+      // if injecting the defaults failed, life goes on...\\n+    }\\n+  },\\n+  \\n   _destroy: function HS__destroy() {\\n     this._observerSvc.removeObserver(this, \\\"profile-before-change\\\");\\n     this._observerSvc.removeObserver(this, \\\"xpcom-shutdown\\\");\\n+    this._observerSvc.removeObserver(this, \\\"profile-do-change\\\");\\n \\n     // XXX Should we also null references to all the services that get stored\\n     // by our memoizing getters in the Convenience Getters section?\\n@@ -134,6 +160,95 @@ HandlerService.prototype = {\\n     this.__ds = null;\\n   },\\n \\n+  _isInHandlerArray: function HS__isInHandlerArray(aArray, aHandler) {\\n+    var enumerator = aArray.enumerate();\\n+    while (enumerator.hasMoreElements()) {\\n+      let handler = enumerator.getNext();\\n+      handler.QueryInterface(Ci.nsIHandlerApp);\\n+      if (handler.equals(aHandler))\\n+        return true;\\n+    }\\n+    \\n+    return false;\\n+  },\\n+\\n+  get _datastoreDefaultHandlersVersion() {\\n+    var version = this._getValue(\\\"urn:root\\\", NC_DEFAULT_HANDLERS_VERSION); \\n+    \\n+    version = version ? version : -1;\\n+    \\n+    return version;\\n+  },\\n+\\n+  set _datastoreDefaultHandlersVersion(aNewVersion) {\\n+    return this._setLiteral(\\\"urn:root\\\", NC_DEFAULT_HANDLERS_VERSION, \\n+                            aNewVersion);\\n+  },\\n+\\n+  get _prefsDefaultHandlersVersion() {\\n+    // get handler service pref branch\\n+    var prefSvc = Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n+                  getService(Ci.nsIPrefService);\\n+    var handlerSvcBranch = prefSvc.getBranch(\\\"gecko.handlerService.\\\");\\n+  \\n+    // get the version of the preferences for this locale\\n+    var version = handlerSvcBranch.getComplexValue(\\\"defaultHandlersVersion\\\",\\n+                                                   Ci.nsISupportsString).data;\\n+                                                   \\n+    return version;                                                   \\n+  },\\n+  \\n+  _injectNewDefaults: function HS__injectNewDefaults() {\\n+    // get handler service pref branch\\n+    var prefSvc = Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n+                  getService(Ci.nsIPrefService);\\n+\\n+    let schemesPrefBranch = prefSvc.getBranch(\\\"gecko.handlerService.schemes.\\\");\\n+    let schemePrefList = schemesPrefBranch.getChildList(\\\"\\\", {}); \\n+\\n+    let protoSvc = Cc[\\\"@mozilla.org/uriloader/external-protocol-service;1\\\"].\\n+                   getService(Ci.nsIExternalProtocolService);\\n+\\n+    var schemes = {};\\n+\\n+    // read all the scheme prefs into a hash\\n+    for each (var schemePrefName in schemePrefList) {\\n+\\n+      let [scheme, handlerNumber, attribute] = schemePrefName.split(\\\".\\\");\\n+\\n+      if (!(scheme in schemes))\\n+        schemes[scheme] = {};\\n+      if (!(handlerNumber in schemes[scheme]))\\n+        schemes[scheme][handlerNumber] = {};\\n+        \\n+      schemes[scheme][handlerNumber][attribute] = \\n+        schemesPrefBranch.getComplexValue(schemePrefName,\\n+                                          Ci.nsISupportsString).data;\\n+    }\\n+\\n+    for (var scheme in schemes) {\\n+\\n+      // get a protocol info object for that scheme and cache the possible\\n+      // handlers to avoid extra xpconnect traversals\\n+      let protoInfo = protoSvc.getProtocolHandlerInfo(scheme);  \\n+      let possibleHandlers = protoInfo.possibleApplicationHandlers;\\n+\\n+      for each (var handlerPrefs in schemes[scheme]) {\\n+\\n+        let handlerApp = Cc[\\\"@mozilla.org/uriloader/web-handler-app;1\\\"].\\n+                         createInstance(Ci.nsIWebHandlerApp);\\n+\\n+        handlerApp.uriTemplate = handlerPrefs.uriTemplate;\\n+        handlerApp.name = handlerPrefs.name;                \\n+\\n+        if (!this._isInHandlerArray(possibleHandlers, handlerApp)) {\\n+             possibleHandlers.appendElement(handlerApp, false);\\n+        }\\n+      }\\n+\\n+      this.store(protoInfo);\\n+    }\\n+  },\\n \\n   //**************************************************************************//\\n   // nsIObserver\\n@@ -146,6 +261,9 @@ HandlerService.prototype = {\\n       case \\\"xpcom-shutdown\\\":\\n         this._destroy();\\n         break;\\n+      case \\\"profile-do-change\\\":\\n+        this._updateDB();\\n+        break;  \\n     }\\n   },\\n \\ndiff --git a/uriloader/exthandler/tests/unit/test_handlerService.js b/uriloader/exthandler/tests/unit/test_handlerService.js\\nindex 1d37464..8dda11c 100755\\n--- a/uriloader/exthandler/tests/unit/test_handlerService.js\\n+++ b/uriloader/exthandler/tests/unit/test_handlerService.js\\n@@ -19,6 +19,7 @@\\n  *\\n  * Contributor(s):\\n  *   Myk Melez <myk@mozilla.org>\\n+ *   Dan Mosedale <dmose@mozilla.org>\\n  *\\n  * Alternatively, the contents of this file may be used under the terms of\\n  * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n@@ -44,7 +45,11 @@ function run_test() {\\n   const mimeSvc = Cc[\\\"@mozilla.org/uriloader/external-helper-app-service;1\\\"].\\n                   getService(Ci.nsIMIMEService);\\n \\n-\\n+  const prefSvc = Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n+                  getService(Ci.nsIPrefService);\\n+                  \\n+  const rootPrefBranch = prefSvc.getBranch(\\\"\\\");\\n+  \\n   //**************************************************************************//\\n   // Sample Data\\n \\n@@ -141,11 +146,18 @@ function run_test() {\\n   do_check_false(handlerInfo.alwaysAskBeforeHandling);\\n \\n   // Make sure the handler service's enumerate method lists all known handlers.\\n-  // FIXME: store and test enumeration of a protocol handler once bug 391150\\n-  // gets fixed and we can actually retrieve a protocol handler.\\n   var handlerInfo2 = mimeSvc.getFromTypeAndExtension(\\\"nonexistent/type2\\\", null);\\n   handlerSvc.store(handlerInfo2);\\n   var handlerTypes = [\\\"nonexistent/type\\\", \\\"nonexistent/type2\\\"];\\n+  try { \\n+    // If we have a defaultHandlersVersion pref, then assume that we're in the\\n+    // firefox tree and that we'll also have an added webcal handler.\\n+    // Bug 395131 has been filed to make this test work more generically\\n+    // by providing our own prefs for this test rather than this icky\\n+    // special casing.\\n+    rootPrefBranch.getCharPref(\\\"gecko.handlerService.defaultHandlersVersion\\\");\\n+    handlerTypes.push(\\\"webcal\\\");\\n+  } catch (ex) {}   \\n   var handlers = handlerSvc.enumerate();\\n   while (handlers.hasMoreElements()) {\\n     var handler = handlers.getNext().QueryInterface(Ci.nsIHandlerInfo);\\n\""}