{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas6bcc6c1\""},"diff":"\"6bcc6c1 Bug 378018, add a numberbox test, r=mano\\ndiff --git a/toolkit/content/tests/widgets/Makefile.in b/toolkit/content/tests/widgets/Makefile.in\\nindex 64f1cd2..397a5ca 100644\\n--- a/toolkit/content/tests/widgets/Makefile.in\\n+++ b/toolkit/content/tests/widgets/Makefile.in\\n@@ -69,6 +69,7 @@ _TEST_FILES = \\ttest_bug360220.xul \\\\\\n \\t\\ttest_progressmeter.xul \\\\\\n \\t\\ttest_datepicker.xul \\\\\\n \\t\\ttest_timepicker.xul \\\\\\n+\\t\\ttest_textbox_number.xul \\\\\\n \\t\\txul_selectcontrol.js \\\\\\n \\t\\ttest_panelfrommenu.xul \\\\\\n \\t\\ttest_hiddenitems.xul \\\\\\ndiff --git a/toolkit/content/tests/widgets/test_textbox_number.xul b/toolkit/content/tests/widgets/test_textbox_number.xul\\nnew file mode 100644\\nindex 0000000..b0bca5e\\n--- /dev/null\\n+++ b/toolkit/content/tests/widgets/test_textbox_number.xul\\n@@ -0,0 +1,314 @@\\n+<?xml version=\\\"1.0\\\"?>\\n+<?xml-stylesheet href=\\\"chrome://global/skin\\\" type=\\\"text/css\\\"?>\\n+<?xml-stylesheet href=\\\"/tests/SimpleTest/test.css\\\" type=\\\"text/css\\\"?>\\n+<!--\\n+  XUL Widget Test for textbox type=\\\"number\\\"\\n+  -->\\n+<window title=\\\"Textbox type='number' test\\\" width=\\\"500\\\" height=\\\"600\\\"\\n+        onfocus=\\\"if (!gDone) { gDone = true; doTests(); }\\\"\\n+        xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\">\\n+  <script type=\\\"application/javascript\\\" src=\\\"/MochiKit/packed.js\\\"></script>\\n+  <script type=\\\"application/javascript\\\" src=\\\"/tests/SimpleTest/SimpleTest.js\\\"></script>  \\n+  <script type=\\\"application/javascript\\\" src=\\\"/tests/SimpleTest/EventUtils.js\\\"></script>  \\n+\\n+<hbox>\\n+  <textbox id=\\\"n1\\\" type=\\\"number\\\" size=\\\"4\\\"/>\\n+  <textbox id=\\\"n2\\\" type=\\\"number\\\" value=\\\"10\\\" min=\\\"5\\\" max=\\\"15\\\" wraparound=\\\"true\\\"/>\\n+  <textbox id=\\\"n3\\\" type=\\\"number\\\" value=\\\"25\\\" min=\\\"1\\\" max=\\\"12\\\" increment=\\\"3\\\"/>\\n+</hbox>\\n+<hbox>\\n+  <textbox id=\\\"n4\\\" type=\\\"number\\\" size=\\\"4\\\" value=\\\"-2\\\" min=\\\"-8\\\" max=\\\"18\\\"/>\\n+  <textbox id=\\\"n5\\\" type=\\\"number\\\" value=\\\"-17\\\" min=\\\"-10\\\" max=\\\"-3\\\"/>\\n+  <textbox id=\\\"n6\\\" type=\\\"number\\\" value=\\\"9\\\" min=\\\"12\\\" max=\\\"8\\\"/>\\n+</hbox>\\n+<hbox>\\n+  <textbox id=\\\"n7\\\" type=\\\"number\\\" size=\\\"4\\\" value=\\\"4.678\\\" min=\\\"2\\\" max=\\\"10.5\\\" decimalplaces=\\\"2\\\"/>\\n+  <textbox id=\\\"n8\\\" type=\\\"number\\\" hidespinbuttons=\\\"true\\\"/>\\n+</hbox>\\n+\\n+  <!-- test resuls are displayed in the html:body -->\\n+  <body xmlns=\\\"http://www.w3.org/1999/xhtml\\\" style=\\\"height: 300px; overflow: auto;\\\"/>\\n+\\n+  <!-- test code goes here -->\\n+  <script type=\\\"application/javascript\\\"><![CDATA[\\n+// ise - is exact - compares using ===\\n+function ise(left, right, name) { SimpleTest.ok(left === right, name); }\\n+\\n+var gDone = false;\\n+\\n+SimpleTest.waitForExplicitFinish();\\n+\\n+// ---- NOTE: the numbers used in these tests are carefully chosen to avoid\\n+// ----       floating point rounding issues\\n+\\n+function doTests() {\\n+  var n1 = $(\\\"n1\\\");\\n+  var n2 = $(\\\"n2\\\");\\n+  var n3 = $(\\\"n3\\\");\\n+  var n4 = $(\\\"n4\\\");\\n+  var n5 = $(\\\"n5\\\");\\n+  var n6 = $(\\\"n6\\\");\\n+  var n7 = $(\\\"n7\\\");\\n+\\n+  testValsMinMax(n1, \\\"initial n1\\\", 0, 0, Infinity);\\n+  testValsMinMax(n2, \\\"initial n2\\\", 10, 5, 15);\\n+  testValsMinMax(n3, \\\"initial n3\\\", 12, 1, 12);\\n+  testValsMinMax(n4, \\\"initial n4\\\", -2, -8, 18);\\n+  testValsMinMax(n5, \\\"initial n5\\\", -10, -10, -3);\\n+  testValsMinMax(n6, \\\"initial n6\\\", 12, 12, 12);\\n+  testValsMinMax(n7, \\\"initial n7\\\", 4.68, 2, 10.5, \\\"4.68\\\"); // value should be rounded\\n+\\n+  ok(n1.spinButtons != null && n1.spinButtons.localName == \\\"spinbuttons\\\", \\\"spinButtons set\\\");\\n+  ise(n1.decimalSymbol, \\\".\\\", \\\"decimalSymbol defaults to .\\\");\\n+  ise(n1.wrapAround, false, \\\"wrapAround defaults to false\\\");\\n+  ise(n1.increment, 1, \\\"increment defaults to 1\\\");\\n+  ise(n1.decimalPlaces, 0, \\\"decimalPlaces defaults to 0\\\");\\n+\\n+  ise(n2.wrapAround, true, \\\"wrapAround when set to true\\\");\\n+  ise(n3.increment, 3, \\\"increment when set to 1\\\");\\n+  ise(n7.decimalPlaces, 2, \\\"decimalPlaces when set to 2\\\");\\n+\\n+  // test changing the value\\n+  n1.value = \\\"1700\\\";\\n+  testVals(n1, \\\"set value,\\\", 1700);\\n+  n1.value = 1600;\\n+  testVals(n1, \\\"set value int,\\\", 1600);\\n+  n2.value = \\\"2\\\";\\n+  testVals(n2, \\\"set value below min,\\\", 5);\\n+  n2.value = 2;\\n+  testVals(n2, \\\"set value below min int,\\\", 5);\\n+  n2.value = 18;\\n+  testVals(n2, \\\"set value above max,\\\", 15);\\n+  n2.value = -6;\\n+  testVals(n2, \\\"set value below min negative,\\\", 5);\\n+  n5.value = -2;\\n+  testVals(n5, \\\"set value above max positive,\\\", -3);\\n+  n7.value = 5.999;\\n+  testVals(n7, \\\"set value to decimal,\\\", 6, \\\"6.00\\\");\\n+  n7.value = \\\"1.42\\\";\\n+  testVals(n7, \\\"set value to decimal below min,\\\", 2.00, \\\"2.00\\\");\\n+  n7.value = 24.1;\\n+  testVals(n7, \\\"set value to decimal above max,\\\", 10.5, \\\"10.50\\\");\\n+  n1.value = 4.75;\\n+  testVals(n1, \\\"set value to decimal round,\\\", 5);\\n+\\n+  // test changing the valueNumber\\n+  n1.valueNumber = 27;\\n+  testVals(n1, \\\"set valueNumber,\\\", 27);\\n+  n2.valueNumber = 1;\\n+  testVals(n2, \\\"set valueNumber below min,\\\", 5);\\n+  n2.valueNumber = 77;\\n+  testVals(n2, \\\"set valueNumber above max,\\\", 15);\\n+  n2.valueNumber = -5;\\n+  testVals(n2, \\\"set valueNumber below min negative,\\\", 5);\\n+  n5.valueNumber = -8;\\n+  n5.valueNumber = -1;\\n+  testVals(n5, \\\"set valueNumber above max positive,\\\", -3);\\n+  n7.valueNumber = 8.23;\\n+  testVals(n7, \\\"set valueNumber to decimal,\\\", 8.23);\\n+  n7.valueNumber = 0.77;\\n+  testVals(n7, \\\"set valueNumber to decimal below min,\\\", 2.00, \\\"2.00\\\");\\n+  n7.valueNumber = 29.157;\\n+  testVals(n7, \\\"set valueNumber to decimal above max,\\\", 10.5, \\\"10.50\\\");\\n+  n1.value = 8.9;\\n+  testVals(n1, \\\"set valueNumber to decimal round,\\\", 9);\\n+\\n+  // test changing the min\\n+  n1.value = 6;\\n+  n1.min = 8;\\n+  testValsMinMax(n1, \\\"set integer min,\\\", 8, 8, Infinity);\\n+  n7.value = 5.5;\\n+  n7.min = 6.7;\\n+  testValsMinMax(n7, \\\"set decimal min,\\\", 6.7, 6.7, 10.5, \\\"6.70\\\");\\n+\\n+  // test changing the max\\n+  n1.value = 25;\\n+  n1.max = 22;\\n+  testValsMinMax(n1, \\\"set integer max,\\\", 22, 8, 22);\\n+  n7.value = 10.2;\\n+  n7.max = 10.1;\\n+  testValsMinMax(n7, \\\"set decimal max,\\\", 10.1, 6.7, 10.1, \\\"10.10\\\");\\n+\\n+  // test decrease() and increase() methods\\n+  testIncreaseDecrease(n1, \\\"integer\\\", 1, 0, 8, 22);\\n+  testIncreaseDecrease(n7, \\\"decimal\\\", 1, 2, 6.7, 10.1);\\n+  testIncreaseDecrease(n3, \\\"integer with increment\\\", 3, 0, 1, 12);\\n+\\n+  n7.min = 2.7;\\n+  n7.value = 10.1;\\n+  n7.increment = 4.3;\\n+  ise(n7.increment, 4.3, \\\"increment changed\\\");\\n+  testIncreaseDecrease(n7, \\\"integer with increment\\\", 4.3, 2, 2.7, 10.1);\\n+\\n+  n2.value = n2.min;\\n+  n2.decrease();\\n+  testVals(n2, \\\"integer wraparound decrease method\\\", n2.max);\\n+  n2.increase();\\n+  testVals(n2, \\\"integer wraparound decrease method\\\", n2.min);\\n+\\n+  n7.wrapAround = true;\\n+  ise(n7.wrapAround, true, \\\"change wrapAround\\\");\\n+  n7.value = n7.min + 0.01;\\n+  n7.decrease();\\n+  testVals(n7, \\\"decimal wraparound decrease method\\\", n7.max, n7.max.toFixed(2));\\n+  n7.increase();\\n+  testVals(n7, \\\"decimal wraparound decrease method\\\", n7.min, n7.min.toFixed(2));\\n+\\n+  n1.value = 22;\\n+  n1.decimalPlaces = 3;\\n+  testVals(n1, \\\"set decimalPlaces 3\\\", 22, \\\"22.000\\\");\\n+  n1.value = 10.624;\\n+  testVals(n1, \\\"set decimalPlaces 3 set value,\\\", 10.624);\\n+  n1.decimalPlaces = 0;\\n+  testVals(n1, \\\"set decimalPlaces 0 set value,\\\", 11);\\n+  n1.decimalPlaces = Infinity;\\n+  n1.value = 10.678123;\\n+  testVals(n1, \\\"set decimalPlaces Infinity set value,\\\", 10.678123);\\n+\\n+  n1.decimalSymbol = \\\",\\\";\\n+  n1.value = \\\"9.67\\\";\\n+  testVals(n1, \\\"set decimalPlaces set value,\\\", 9.67, \\\"9,67\\\");\\n+\\n+  n1.decimalSymbol = \\\".\\\";\\n+  n1.decimalPlaces = 0;\\n+\\n+  // UI tests\\n+  n1.min = 5;\\n+  n1.max = 15;\\n+  n1.value = 5;\\n+  n1.focus();\\n+\\n+  var sb = n1.spinButtons;\\n+  var sbbottom = sb.getBoundingClientRect().bottom - sb.getBoundingClientRect().top - 2;\\n+\\n+  synthesizeKey(\\\"VK_UP\\\", {});\\n+  testVals(n1, \\\"key up\\\", 6);\\n+\\n+  synthesizeKey(\\\"VK_DOWN\\\", {});\\n+  testVals(n1, \\\"key down\\\", 5);\\n+\\n+  synthesizeMouse(sb, 2, 2, {});\\n+  testVals(n1, \\\"spinbuttons up\\\", 6);\\n+  synthesizeMouse(sb, 2, sbbottom, {});\\n+  testVals(n1, \\\"spinbuttons down\\\", 5);\\n+\\n+  n1.value = 15;\\n+  synthesizeKey(\\\"VK_UP\\\", {});\\n+  testVals(n1, \\\"key up at max\\\", 15);\\n+  synthesizeMouse(sb, 2, 2, {});\\n+  testVals(n1, \\\"spinbuttons up at max\\\", 15);\\n+\\n+  n1.value = 5;\\n+  synthesizeKey(\\\"VK_DOWN\\\", {});\\n+  testVals(n1, \\\"key down at min\\\", 5);\\n+  synthesizeMouse(sb, 2, sbbottom, {});\\n+  testVals(n1, \\\"spinbuttons down at min\\\", 5);\\n+\\n+  n1.wrapAround = true;\\n+  n1.value = 15;\\n+  synthesizeKey(\\\"VK_UP\\\", {});\\n+  testVals(n1, \\\"key up wraparound at max\\\", 5);\\n+  n1.value = 5;\\n+  synthesizeKey(\\\"VK_DOWN\\\", {});\\n+  testVals(n1, \\\"key down wraparound at min\\\", 15);\\n+\\n+  n1.value = 15;\\n+  synthesizeMouse(sb, 2, 2, {});\\n+  testVals(n1, \\\"spinbuttons up wraparound at max\\\", 5);\\n+  n1.value = 5;\\n+  synthesizeMouse(sb, 2, sbbottom, {});\\n+  testVals(n1, \\\"spinbuttons down wraparound at min\\\", 15);\\n+\\n+  // check read only state\\n+  n1.readOnly = true;\\n+  n1.min = -10;\\n+  n1.max = 15;\\n+  n1.value = 12;\\n+  // no events should fire and no changes should occur when the field is read only\\n+  synthesizeKeyExpectEvent(\\\"VK_UP\\\", { }, n1, \\\"!change\\\", \\\"key up read only\\\");\\n+  is(n1.value, 12, \\\"key up read only value\\\");\\n+  synthesizeKeyExpectEvent(\\\"VK_DOWN\\\", { }, n1, \\\"!change\\\", \\\"key down read only\\\");\\n+  is(n1.value, 12, \\\"key down read only value\\\");\\n+\\n+  synthesizeMouseExpectEvent(sb, 2, 2, { }, n1, \\\"!change\\\", \\\"mouse up read only\\\");\\n+  is(n1.value, 12, \\\"mouse up read only value\\\");\\n+  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, n1, \\\"!change\\\", \\\"mouse down read only\\\");\\n+  is(n1.value, 12, \\\"mouse down read only value\\\");\\n+\\n+  n1.readOnly = false;\\n+  n1.disabled = true;\\n+  synthesizeMouseExpectEvent(sb, 2, 2, { }, n1, \\\"!change\\\", \\\"mouse up disabled\\\");\\n+  is(n1.value, 12, \\\"mouse up disabled value\\\");\\n+  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, n1, \\\"!change\\\", \\\"mouse down disabled\\\");\\n+  is(n1.value, 12, \\\"mouse down disabled value\\\");\\n+\\n+  var nsbrect = $(\\\"n8\\\").spinButtons.getBoundingClientRect();\\n+  ok(nsbrect.left == 0 && nsbrect.top == 0 && nsbrect.right == 0, nsbrect.bottom == 0,\\n+     \\\"hidespinbuttons\\\");\\n+\\n+  SimpleTest.finish();\\n+}\\n+\\n+function testVals(nb, name, valueNumber, valueFieldNumber) {\\n+  if (!valueFieldNumber)\\n+    valueFieldNumber = \\\"\\\" + valueNumber;\\n+  ise(nb.value, \\\"\\\" + valueNumber, name + \\\" value is '\\\" + valueNumber + \\\"'\\\");\\n+  ise(nb.valueNumber, valueNumber, name + \\\" valueNumber is \\\" + valueNumber);\\n+  ise(nb.inputField.value, valueFieldNumber, name + \\\" inputField value is \\\" + valueNumber);\\n+}\\n+\\n+function testValsMinMax(nb, name, valueNumber, min, max, valueFieldNumber) {\\n+  testVals(nb, name, valueNumber, valueFieldNumber);\\n+  ise(nb.min, min, name + \\\" min is \\\" + min);\\n+  ise(nb.max, max, name + \\\" max is \\\" + max);\\n+}\\n+\\n+function testIncreaseDecrease(nb, testid, increment, fixedCount, min, max)\\n+{\\n+  testid += \\\" \\\";\\n+\\n+  nb.value = max;\\n+  nb.decrease();\\n+  testVals(nb, testid + \\\"decrease method\\\", max - increment,\\n+           (max - increment).toFixed(fixedCount));\\n+  nb.increase();\\n+  testVals(nb, testid + \\\"increase method\\\", max, max.toFixed(fixedCount));\\n+  nb.value = min;\\n+  nb.decrease();\\n+  testVals(nb, testid + \\\"decrease method at min\\\", min, min.toFixed(fixedCount));\\n+  nb.value = max;\\n+  nb.increase();\\n+  testVals(nb, testid + \\\"increase method at max\\\", max, max.toFixed(fixedCount));\\n+\\n+  nb.focus();\\n+  nb.value = min;\\n+\\n+  // pressing the cursor up and down keys should adjust the value\\n+  synthesizeKeyExpectEvent(\\\"VK_UP\\\", { }, nb, \\\"change\\\", testid + \\\"key up\\\");\\n+  is(nb.value, min + increment, testid + \\\"key up\\\");\\n+  nb.value = max;\\n+  synthesizeKeyExpectEvent(\\\"VK_UP\\\", { }, nb, \\\"!change\\\", testid + \\\"key up at max\\\");\\n+  is(nb.value, max, testid + \\\"key up at max\\\");\\n+  synthesizeKeyExpectEvent(\\\"VK_DOWN\\\", { }, nb, \\\"change\\\", testid + \\\"key down\\\");\\n+  is(nb.value, max - increment, testid + \\\"key down\\\");\\n+  nb.value = min;\\n+  synthesizeKeyExpectEvent(\\\"VK_DOWN\\\", { }, nb, \\\"!change\\\", testid + \\\"key down at min\\\");\\n+  is(nb.value, min, testid + \\\"key down at min\\\");\\n+\\n+  // check pressing the spinbutton arrows\\n+  var sb = nb.spinButtons;\\n+  var sbbottom = sb.getBoundingClientRect().bottom - sb.getBoundingClientRect().top - 2;\\n+  nb.value = min;\\n+  synthesizeMouseExpectEvent(sb, 2, 2, { }, nb, \\\"change\\\", testid + \\\"mouse up\\\");\\n+  is(nb.value, min + increment, testid + \\\"mouse up\\\");\\n+  nb.value = max;\\n+  synthesizeMouseExpectEvent(sb, 2, 2, { }, nb, \\\"!change\\\", testid + \\\"mouse up at max\\\");\\n+  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, nb, \\\"change\\\", testid + \\\"mouse down\\\");\\n+  is(nb.value, max - increment, testid + \\\"mouse down\\\");\\n+  nb.value = min;\\n+  synthesizeMouseExpectEvent(sb, 2, sbbottom, { }, nb, \\\"!change\\\", testid + \\\"mouse down at min\\\");\\n+}\\n+\\n+  ]]></script>\\n+\\n+</window>\\n\""}