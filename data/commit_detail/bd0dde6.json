{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basbd0dde6\""},"diff":"\"bd0dde6 Bug 396488 - Clean up nsDownloadManager - spaces and stars.  Patch by Edward Lee <edilee@gmail.com>.  r=sdwilsh, a=mconnor\\ndiff --git a/toolkit/components/downloads/src/nsDownloadManager.cpp b/toolkit/components/downloads/src/nsDownloadManager.cpp\\nindex e793164..7eedd2f 100644\\n--- a/toolkit/components/downloads/src/nsDownloadManager.cpp\\n+++ b/toolkit/components/downloads/src/nsDownloadManager.cpp\\n@@ -38,7 +38,7 @@\\n  * the terms of any one of the MPL, the GPL or the LGPL.\\n  *\\n  * ***** END LICENSE BLOCK ***** */\\n- \\n+\\n #include \\\"nsDownloadManager.h\\\"\\n #include \\\"nsIWebProgress.h\\\"\\n #include \\\"nsIRDFService.h\\\"\\n@@ -140,7 +140,7 @@ nsDownloadManager::CancelAllDownloads()\\n     // can be canceled.\\n     if (NS_FAILED(result)) rv = result;\\n   }\\n-  \\n+\\n   return rv;\\n }\\n \\n@@ -225,7 +225,7 @@ nsDownloadManager::InitDB(PRBool *aDoImport)\\n   nsCOMPtr<mozIStorageService> storage =\\n     do_GetService(MOZ_STORAGE_SERVICE_CONTRACTID, &rv);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n-  \\n+\\n   nsCOMPtr<nsIFile> dbFile;\\n   rv = NS_GetSpecialDirectory(NS_APP_USER_PROFILE_50_DIR,\\n                               getter_AddRefs(dbFile));\\n@@ -298,7 +298,7 @@ nsDownloadManager::InitDB(PRBool *aDoImport)\\n \\n       // Now recreate it with this schema version\\n       rv = mDBConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\\n-        \\\"CREATE  TABLE moz_downloads (\\\"\\n+        \\\"CREATE TABLE moz_downloads (\\\"\\n           \\\"id INTEGER PRIMARY KEY, \\\"\\n           \\\"name TEXT, \\\"\\n           \\\"source TEXT, \\\"\\n@@ -383,7 +383,7 @@ nsDownloadManager::InitDB(PRBool *aDoImport)\\n       nsCOMPtr<mozIStorageStatement> stmt;\\n       rv = mDBConn->CreateStatement(NS_LITERAL_CSTRING(\\n         \\\"SELECT id, name, source, target, startTime, endTime, state, referrer, \\\"\\n-        \\\"entityID \\\"\\n+               \\\"entityID \\\"\\n         \\\"FROM moz_downloads\\\"), getter_AddRefs(stmt));\\n       if (NS_SUCCEEDED(rv))\\n         break;\\n@@ -441,7 +441,7 @@ nsDownloadManager::ImportDownloadHistory()\\n   rv = dlFile->Exists(&check);\\n   if (NS_FAILED(rv) || !check)\\n     return rv;\\n-  \\n+\\n   rv = dlFile->IsFile(&check);\\n   if (NS_FAILED(rv) || !check)\\n     return rv;\\n@@ -449,7 +449,7 @@ nsDownloadManager::ImportDownloadHistory()\\n   nsCAutoString dlSrc;\\n   rv = NS_GetURLSpecFromFile(dlFile, dlSrc);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n-  \\n+\\n   nsCOMPtr<nsIRDFService> rdfs =\\n     do_GetService(\\\"@mozilla.org/rdf/rdf-service;1\\\", &rv);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n@@ -496,7 +496,7 @@ nsDownloadManager::ImportDownloadHistory()\\n   NS_ENSURE_SUCCESS(rv, rv);\\n   rv = container->Init(ds, NC_DownloadsRoot);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n-  \\n+\\n   nsCOMPtr<nsISimpleEnumerator> dls;\\n   rv = container->GetElements(getter_AddRefs(dls));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n@@ -515,7 +515,7 @@ nsDownloadManager::ImportDownloadHistory()\\n     nsCString source, target;\\n     PRInt64 startTime, endTime;\\n     PRInt32 state;\\n-    \\n+\\n     rv = ds->GetTarget(dl, NC_Name, PR_TRUE, getter_AddRefs(node));\\n     if (NS_FAILED(rv)) continue;\\n     nsCOMPtr<nsIRDFLiteral> rdfLit = do_QueryInterface(node, &rv);\\n@@ -546,7 +546,7 @@ nsDownloadManager::ImportDownloadHistory()\\n     if (NS_FAILED(rv)) continue;\\n     rv = rdfDate->GetValue(&startTime);\\n     if (NS_FAILED(rv)) continue;\\n-    \\n+\\n     rv = ds->GetTarget(dl, NC_DateEnded, PR_TRUE, getter_AddRefs(node));\\n     if (NS_FAILED(rv)) continue;\\n     rdfDate = do_QueryInterface(node, &rv);\\n@@ -560,7 +560,7 @@ nsDownloadManager::ImportDownloadHistory()\\n     if (NS_FAILED(rv)) continue;\\n     rv = rdfInt->GetValue(&state);\\n     if (NS_FAILED(rv)) continue;\\n- \\n+\\n     (void)AddDownloadToDB(name, source, target, startTime, endTime, state);\\n   }\\n \\n@@ -577,8 +577,8 @@ nsDownloadManager::RestoreDatabaseState()\\n     \\\"SELECT id \\\"\\n     \\\"FROM moz_downloads \\\"\\n     \\\"WHERE state = ?1 \\\"\\n-    \\\"OR state = ?2 \\\"\\n-    \\\"OR state = ?3\\\"), getter_AddRefs(stmt));\\n+      \\\"OR state = ?2 \\\"\\n+      \\\"OR state = ?3\\\"), getter_AddRefs(stmt));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   rv = stmt->BindInt32Parameter(0, nsIDownloadManager::DOWNLOAD_NOTSTARTED);\\n@@ -603,8 +603,8 @@ nsDownloadManager::RestoreDatabaseState()\\n     \\\"UPDATE moz_downloads \\\"\\n     \\\"SET state = ?1 \\\"\\n     \\\"WHERE state = ?2 \\\"\\n-    \\\"OR state = ?3 \\\"\\n-    \\\"OR state = ?4\\\"), getter_AddRefs(stmt));\\n+      \\\"OR state = ?3 \\\"\\n+      \\\"OR state = ?4\\\"), getter_AddRefs(stmt));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   rv = stmt->BindInt32Parameter(0, nsIDownloadManager::DOWNLOAD_FAILED);\\n@@ -694,7 +694,7 @@ nsDownloadManager::Init()\\n   nsCOMPtr<nsIStringBundleService> bundleService =\\n     do_GetService(NS_STRINGBUNDLE_CONTRACTID, &rv);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n-  \\n+\\n   rv = bundleService->CreateBundle(DOWNLOAD_MANAGER_BUNDLE,\\n                                    getter_AddRefs(mBundle));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n@@ -733,14 +733,14 @@ nsDownloadManager::Init()\\n   return NS_OK;\\n }\\n \\n-PRInt32 \\n+PRInt32\\n nsDownloadManager::GetRetentionBehavior()\\n {\\n   // We use 0 as the default, which is \\\"remove when done\\\"\\n   nsresult rv;\\n   nsCOMPtr<nsIPrefBranch> pref = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);\\n   NS_ENSURE_SUCCESS(rv, 0);\\n-  \\n+\\n   PRInt32 val;\\n   rv = pref->GetIntPref(PREF_BDM_RETENTION, &val);\\n   NS_ENSURE_SUCCESS(rv, 0);\\n@@ -780,7 +780,7 @@ nsDownloadManager::GetDownloadFromDB(PRUint32 aID, nsDownload **retVal)\\n   dl->mID = stmt->AsInt64(0);\\n   dl->mDownloadState = stmt->AsInt32(1);\\n   dl->mStartTime = stmt->AsInt64(2);\\n-  \\n+\\n   nsCString source;\\n   stmt->GetUTF8String(3, source);\\n   rv = NS_NewURI(getter_AddRefs(dl->mSource), source);\\n@@ -808,7 +808,7 @@ nsDownloadManager::GetDownloadFromDB(PRUint32 aID, nsDownload **retVal)\\n   if (NS_SUCCEEDED(file->Exists(&fileExists)) && fileExists) {\\n     if (dl->mDownloadState == nsIDownloadManager::DOWNLOAD_FINISHED) {\\n       dl->mPercentComplete = 100;\\n-      \\n+\\n       PRInt64 size;\\n       rv = file->GetFileSize(&size);\\n       NS_ENSURE_SUCCESS(rv, rv);\\n@@ -946,7 +946,7 @@ nsDownloadManager::GetUserDownloadsDirectory(nsILocalFile **aResult)\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   nsCOMPtr<nsIPrefBranch> prefBranch;\\n-  rv = prefService->GetBranch(NS_BRANCH_DOWNLOAD, \\n+  rv = prefService->GetBranch(NS_BRANCH_DOWNLOAD,\\n                               getter_AddRefs(prefBranch));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n@@ -987,7 +987,7 @@ nsDownloadManager::GetUserDownloadsDirectory(nsILocalFile **aResult)\\n     case 2: // Custom\\n       {\\n         nsCOMPtr<nsILocalFile> customDirectory;\\n-        prefBranch->GetComplexValue(NS_PREF_DIR, \\n+        prefBranch->GetComplexValue(NS_PREF_DIR,\\n                                     NS_GET_IID(nsILocalFile),\\n                                     getter_AddRefs(customDirectory));\\n         if (customDirectory) {\\n@@ -1020,15 +1020,15 @@ nsDownloadManager::GetUserDownloadsDirectory(nsILocalFile **aResult)\\n }\\n \\n NS_IMETHODIMP\\n-nsDownloadManager::AddDownload(DownloadType aDownloadType, \\n-                               nsIURI* aSource,\\n-                               nsIURI* aTarget,\\n+nsDownloadManager::AddDownload(DownloadType aDownloadType,\\n+                               nsIURI *aSource,\\n+                               nsIURI *aTarget,\\n                                const nsAString& aDisplayName,\\n                                nsIMIMEInfo *aMIMEInfo,\\n                                PRTime aStartTime,\\n-                               nsILocalFile* aTempFile,\\n-                               nsICancelable* aCancelable,\\n-                               nsIDownload** aDownload)\\n+                               nsILocalFile *aTempFile,\\n+                               nsICancelable *aCancelable,\\n+                               nsIDownload **aDownload)\\n {\\n   NS_ENSURE_ARG_POINTER(aSource);\\n   NS_ENSURE_ARG_POINTER(aTarget);\\n@@ -1057,7 +1057,7 @@ nsDownloadManager::AddDownload(DownloadType aDownloadType,\\n   dl->mDisplayName = aDisplayName;\\n   if (dl->mDisplayName.IsEmpty())\\n     targetFile->GetLeafName(dl->mDisplayName);\\n- \\n+\\n   dl->mMIMEInfo = aMIMEInfo;\\n   dl->SetStartTime(aStartTime);\\n \\n@@ -1068,7 +1068,7 @@ nsDownloadManager::AddDownload(DownloadType aDownloadType,\\n   nsCAutoString source, target;\\n   aSource->GetSpec(source);\\n   aTarget->GetSpec(target);\\n-  \\n+\\n   PRInt64 id = AddDownloadToDB(dl->mDisplayName, source, target, aStartTime, 0,\\n                                nsIDownloadManager::DOWNLOAD_NOTSTARTED);\\n   NS_ENSURE_TRUE(id, NS_ERROR_FAILURE);\\n@@ -1079,7 +1079,7 @@ nsDownloadManager::AddDownload(DownloadType aDownloadType,\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   NS_ADDREF(*aDownload = dl);\\n-  \\n+\\n   return NS_OK;\\n }\\n \\n@@ -1095,7 +1095,7 @@ nsDownloadManager::GetDownload(PRUint32 aID, nsIDownload **aDownloadItem)\\n \\n     itm = dl.get();\\n   }\\n-  \\n+\\n   NS_ADDREF(*aDownloadItem = itm);\\n \\n   return NS_OK;\\n@@ -1120,7 +1120,7 @@ nsDownloadManager::CancelDownload(PRUint32 aID)\\n {\\n   // We AddRef here so we don't lose access to member variables when we remove\\n   nsRefPtr<nsDownload> dl = FindDownload(aID);\\n-  \\n+\\n   // if it's null, someone passed us a bad id.\\n   if (!dl)\\n     return NS_ERROR_FAILURE;\\n@@ -1210,7 +1210,6 @@ NS_IMETHODIMP\\n nsDownloadManager::RemoveDownload(PRUint32 aID)\\n {\\n   nsDownload *dl = FindDownload(aID);\\n-  \\n   NS_ASSERTION(!dl, \\\"Can't call RemoveDownload on a download in progress!\\\");\\n   if (dl)\\n     return NS_ERROR_FAILURE;\\n@@ -1237,9 +1236,9 @@ nsDownloadManager::CleanUp()\\n   nsresult rv = mDBConn->CreateStatement(NS_LITERAL_CSTRING(\\n     \\\"DELETE FROM moz_downloads \\\"\\n     \\\"WHERE state = ?1 \\\"\\n-    \\\"OR state = ?2 \\\"\\n-    \\\"OR state = ?3 \\\"\\n-    \\\"OR state = ?4\\\"), getter_AddRefs(stmt));\\n+      \\\"OR state = ?2 \\\"\\n+      \\\"OR state = ?3 \\\"\\n+      \\\"OR state = ?4\\\"), getter_AddRefs(stmt));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n   for (PRUint32 i = 0; i < 4; ++i) {\\n     rv = stmt->BindInt32Parameter(i, states[i]);\\n@@ -1264,9 +1263,9 @@ nsDownloadManager::GetCanCleanUp(PRBool *aResult)\\n     \\\"SELECT COUNT(*) \\\"\\n     \\\"FROM moz_downloads \\\"\\n     \\\"WHERE state = ?1 \\\"\\n-    \\\"OR state = ?2 \\\"\\n-    \\\"OR state = ?3 \\\"\\n-    \\\"OR state = ?4\\\"), getter_AddRefs(stmt));\\n+      \\\"OR state = ?2 \\\"\\n+      \\\"OR state = ?3 \\\"\\n+      \\\"OR state = ?4\\\"), getter_AddRefs(stmt));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n   for (PRUint32 i = 0; i < 4; ++i) {\\n     rv = stmt->BindInt32Parameter(i, states[i]);\\n@@ -1276,13 +1275,13 @@ nsDownloadManager::GetCanCleanUp(PRBool *aResult)\\n   PRBool moreResults; // We don't really care...\\n   rv = stmt->ExecuteStep(&moreResults);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n- \\n-  PRInt32 count; \\n+\\n+  PRInt32 count;\\n   rv = stmt->GetInt32(0, &count);\\n-  \\n+\\n   if (count > 0)\\n     *aResult = PR_TRUE;\\n-  \\n+\\n   return rv;\\n }\\n \\n@@ -1302,7 +1301,6 @@ nsresult\\n nsDownloadManager::PauseResumeDownload(PRUint32 aID, PRBool aPause)\\n {\\n   nsDownload *dl = FindDownload(aID);\\n-  \\n   if (!dl)\\n     return NS_ERROR_FAILURE;\\n \\n@@ -1321,7 +1319,7 @@ NS_IMETHODIMP\\n nsDownloadManager::AddListener(nsIDownloadProgressListener *aListener)\\n {\\n   mListeners.AppendObject(aListener);\\n-  \\n+\\n   return NS_OK;\\n }\\n \\n@@ -1329,7 +1327,7 @@ NS_IMETHODIMP\\n nsDownloadManager::RemoveListener(nsIDownloadProgressListener *aListener)\\n {\\n   mListeners.RemoveObject(aListener);\\n-  \\n+\\n   return NS_OK;\\n }\\n \\n@@ -1374,7 +1372,7 @@ nsDownloadManager::NotifyListenersOnStateChange(nsIWebProgress *aProgress,\\n NS_IMETHODIMP\\n nsDownloadManager::Observe(nsISupports *aSubject,\\n                            const char *aTopic,\\n-                           const PRUnichar* aData)\\n+                           const PRUnichar *aData)\\n {\\n   PRInt32 currDownloadCount = mCurrentDownloads.Count();\\n \\n@@ -1387,15 +1385,15 @@ nsDownloadManager::Observe(nsISupports *aSubject,\\n     dl->GetId(&id);\\n     nsDownload *dl2 = FindDownload(id);\\n     if (dl2)\\n-      return CancelDownload(id);  \\n+      return CancelDownload(id);\\n   } else if (strcmp(aTopic, \\\"quit-application\\\") == 0) {\\n     gStoppingDownloads = PR_TRUE;\\n-    \\n+\\n     if (currDownloadCount)\\n       CancelAllDownloads();\\n \\n-    // Now that active downloads have been canceled, remove all downloads if \\n-    // the user's retention policy specifies it. \\n+    // Now that active downloads have been canceled, remove all downloads if\\n+    // the user's retention policy specifies it.\\n     if (GetRetentionBehavior() == 1)\\n       CleanUp();\\n   } else if (strcmp(aTopic, \\\"quit-application-requested\\\") == 0 &&\\n@@ -1437,19 +1435,19 @@ nsDownloadManager::Observe(nsISupports *aSubject,\\n \\n void\\n nsDownloadManager::ConfirmCancelDownloads(PRInt32 aCount,\\n-                                          nsISupportsPRBool* aCancelDownloads,\\n-                                          const PRUnichar* aTitle, \\n-                                          const PRUnichar* aCancelMessageMultiple, \\n-                                          const PRUnichar* aCancelMessageSingle,\\n-                                          const PRUnichar* aDontCancelButton)\\n+                                          nsISupportsPRBool *aCancelDownloads,\\n+                                          const PRUnichar *aTitle,\\n+                                          const PRUnichar *aCancelMessageMultiple,\\n+                                          const PRUnichar *aCancelMessageSingle,\\n+                                          const PRUnichar *aDontCancelButton)\\n {\\n   nsXPIDLString title, message, quitButton, dontQuitButton;\\n-  \\n-  mBundle->GetStringFromName(aTitle, getter_Copies(title));    \\n+\\n+  mBundle->GetStringFromName(aTitle, getter_Copies(title));\\n \\n   nsAutoString countString;\\n   countString.AppendInt(aCount);\\n-  const PRUnichar* strings[1] = { countString.get() };\\n+  const PRUnichar *strings[1] = { countString.get() };\\n   if (aCount > 1) {\\n     mBundle->FormatStringFromName(aCancelMessageMultiple, strings, 1,\\n                                   getter_Copies(message));\\n@@ -1504,7 +1502,7 @@ nsDownload::nsDownload() : mDownloadState(nsIDownloadManager::DOWNLOAD_NOTSTARTE\\n }\\n \\n nsDownload::~nsDownload()\\n-{  \\n+{\\n }\\n \\n nsresult\\n@@ -1549,7 +1547,7 @@ nsDownload::SetState(DownloadState aState)\\n     {\\n       mDownloadManager->CompleteDownload(this);\\n \\n-      // Master pref to control this function. \\n+      // Master pref to control this function.\\n       PRBool showTaskbarAlert = PR_TRUE;\\n       if (pref)\\n         pref->GetBoolPref(PREF_BDM_SHOWALERTONCOMPLETE, &showTaskbarAlert);\\n@@ -1562,7 +1560,7 @@ nsDownload::SetState(DownloadState aState)\\n         PRInt64 alertIntervalUSec = alertInterval * PR_USEC_PER_MSEC;\\n         PRInt64 goat = PR_Now() - mStartTime;\\n         showTaskbarAlert = goat > alertIntervalUSec;\\n-       \\n+\\n         PRInt32 size = mDownloadManager->mCurrentDownloads.Count();\\n         if (showTaskbarAlert && size == 0) {\\n           nsCOMPtr<nsIAlertsService> alerts =\\n@@ -1580,11 +1578,10 @@ nsDownload::SetState(DownloadState aState)\\n               PRBool removeWhenDone =\\n                 mDownloadManager->GetRetentionBehavior() == 0;\\n \\n-\\n               // If downloads are automatically removed per the user's\\n               // retention policy, there's no reason to make the text clickable\\n               // because if it is, they'll click open the download manager and\\n-              // the items they downloaded will have been removed. \\n+              // the items they downloaded will have been removed.\\n               alerts->ShowAlertNotification(\\n                   NS_LITERAL_STRING(DOWNLOAD_MANAGER_ALERT_ICON), title,\\n                   message, !removeWhenDone, EmptyString(), mDownloadManager);\\n@@ -1607,7 +1604,7 @@ nsDownload::SetState(DownloadState aState)\\n           nsCOMPtr<nsIFile> file;\\n           rv = fileURL->GetFile(getter_AddRefs(file));\\n           NS_ENSURE_SUCCESS(rv, rv);\\n-          \\n+\\n           nsAutoString path;\\n           rv = file->GetPath(path);\\n           NS_ENSURE_SUCCESS(rv, rv);\\n@@ -1634,7 +1631,7 @@ nsDownload::SetState(DownloadState aState)\\n   default:\\n     break;\\n   }\\n-  \\n+\\n   // Before notifying the listener, we must update the database so that calls\\n   // to it work out properly.\\n   rv = UpdateDB();\\n@@ -1721,7 +1718,7 @@ nsDownload::OnProgressChange64(nsIWebProgress *aWebProgress,\\n       }\\n     }\\n \\n-    //Fetch the entityID\\n+    // Fetch the entityID\\n     nsCOMPtr<nsIResumableChannel> resumableChannel(do_QueryInterface(aRequest));\\n     if (resumableChannel) {\\n       rv = resumableChannel->GetEntityID(mEntityID);\\n@@ -1809,7 +1806,7 @@ NS_IMETHODIMP\\n nsDownload::OnStatusChange(nsIWebProgress *aWebProgress,\\n                            nsIRequest *aRequest, nsresult aStatus,\\n                            const PRUnichar *aMessage)\\n-{   \\n+{\\n   if (NS_FAILED(aStatus)) {\\n     // We don't want to lose access to our member variables\\n     nsRefPtr<nsDownload> kungFuDeathGrip = this;\\n@@ -1818,7 +1815,7 @@ nsDownload::OnStatusChange(nsIWebProgress *aWebProgress,\\n \\n     // Get title for alert.\\n     nsXPIDLString title;\\n-    \\n+\\n     nsCOMPtr<nsIStringBundle> bundle = mDownloadManager->mBundle;\\n     bundle->GetStringFromName(NS_LITERAL_STRING(\\\"downloadErrorAlertTitle\\\").get(),\\n                               getter_Copies(title));\\n@@ -1843,8 +1840,8 @@ nsDownload::OnStatusChange(nsIWebProgress *aWebProgress,\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::OnStateChange(nsIWebProgress* aWebProgress,\\n-                          nsIRequest* aRequest, PRUint32 aStateFlags,\\n+nsDownload::OnStateChange(nsIWebProgress *aWebProgress,\\n+                          nsIRequest *aRequest, PRUint32 aStateFlags,\\n                           nsresult aStatus)\\n {\\n   // Record the start time only if it hasn't been set.\\n@@ -1853,7 +1850,7 @@ nsDownload::OnStateChange(nsIWebProgress* aWebProgress,\\n \\n   // We don't want to lose access to our member variables\\n   nsRefPtr<nsDownload> kungFuDeathGrip = this;\\n-  \\n+\\n   // We need to update mDownloadState before updating the dialog, because\\n   // that will close and call CancelDownload if it was the last open window.\\n \\n@@ -1865,7 +1862,6 @@ nsDownload::OnStateChange(nsIWebProgress* aWebProgress,\\n       rv = channel->GetResponseStatus(&status);\\n       // HTTP 450 - Blocked by parental control proxies\\n       if (NS_SUCCEEDED(rv) && status == 450) {\\n-\\n         // Cancel using the provided object\\n         if (mCancelable)\\n           (void)mCancelable->Cancel(NS_BINDING_ABORTED);\\n@@ -1911,13 +1907,13 @@ nsDownload::OnSecurityChange(nsIWebProgress *aWebProgress,\\n // nsIDownload\\n \\n NS_IMETHODIMP\\n-nsDownload::Init(nsIURI* aSource,\\n-                 nsIURI* aTarget,\\n+nsDownload::Init(nsIURI *aSource,\\n+                 nsIURI *aTarget,\\n                  const nsAString& aDisplayName,\\n                  nsIMIMEInfo *aMIMEInfo,\\n                  PRTime aStartTime,\\n-                 nsILocalFile* aTempFile,\\n-                 nsICancelable* aCancelable)\\n+                 nsILocalFile *aTempFile,\\n+                 nsICancelable *aCancelable)\\n {\\n   NS_WARNING(\\\"Huh...how did we get here?!\\\");\\n   return NS_OK;\\n@@ -1927,7 +1923,6 @@ NS_IMETHODIMP\\n nsDownload::GetState(PRInt16 *aState)\\n {\\n   *aState = mDownloadState;\\n-\\n   return NS_OK;\\n }\\n \\n@@ -1935,12 +1930,11 @@ NS_IMETHODIMP\\n nsDownload::GetDisplayName(nsAString &aDisplayName)\\n {\\n   aDisplayName = mDisplayName;\\n-\\n   return NS_OK;\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetCancelable(nsICancelable** aCancelable)\\n+nsDownload::GetCancelable(nsICancelable **aCancelable)\\n {\\n   *aCancelable = mCancelable;\\n   NS_IF_ADDREF(*aCancelable);\\n@@ -1948,7 +1942,7 @@ nsDownload::GetCancelable(nsICancelable** aCancelable)\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetTarget(nsIURI** aTarget)\\n+nsDownload::GetTarget(nsIURI **aTarget)\\n {\\n   *aTarget = mTarget;\\n   NS_IF_ADDREF(*aTarget);\\n@@ -1956,7 +1950,7 @@ nsDownload::GetTarget(nsIURI** aTarget)\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetSource(nsIURI** aSource)\\n+nsDownload::GetSource(nsIURI **aSource)\\n {\\n   *aSource = mSource;\\n   NS_IF_ADDREF(*aSource);\\n@@ -1964,35 +1958,35 @@ nsDownload::GetSource(nsIURI** aSource)\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetStartTime(PRInt64* aStartTime)\\n+nsDownload::GetStartTime(PRInt64 *aStartTime)\\n {\\n   *aStartTime = mStartTime;\\n   return NS_OK;\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetPercentComplete(PRInt32* aPercentComplete)\\n+nsDownload::GetPercentComplete(PRInt32 *aPercentComplete)\\n {\\n   *aPercentComplete = mPercentComplete;\\n   return NS_OK;\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetAmountTransferred(PRUint64* aAmountTransferred)\\n+nsDownload::GetAmountTransferred(PRUint64 *aAmountTransferred)\\n {\\n   *aAmountTransferred = mCurrBytes + mResumedAt;\\n   return NS_OK;\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetSize(PRUint64* aSize)\\n+nsDownload::GetSize(PRUint64 *aSize)\\n {\\n   *aSize = mMaxBytes + (mMaxBytes != LL_MAXUINT ? mResumedAt : 0);\\n   return NS_OK;\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetMIMEInfo(nsIMIMEInfo** aMIMEInfo)\\n+nsDownload::GetMIMEInfo(nsIMIMEInfo **aMIMEInfo)\\n {\\n   *aMIMEInfo = mMIMEInfo;\\n   NS_IF_ADDREF(*aMIMEInfo);\\n@@ -2000,7 +1994,7 @@ nsDownload::GetMIMEInfo(nsIMIMEInfo** aMIMEInfo)\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetTargetFile(nsILocalFile** aTargetFile)\\n+nsDownload::GetTargetFile(nsILocalFile **aTargetFile)\\n {\\n   nsresult rv;\\n \\n@@ -2015,7 +2009,7 @@ nsDownload::GetTargetFile(nsILocalFile** aTargetFile)\\n }\\n \\n NS_IMETHODIMP\\n-nsDownload::GetSpeed(double* aSpeed)\\n+nsDownload::GetSpeed(double *aSpeed)\\n {\\n   *aSpeed = mSpeed;\\n   return NS_OK;\\n@@ -2025,15 +2019,13 @@ NS_IMETHODIMP\\n nsDownload::GetId(PRUint32 *aId)\\n {\\n   *aId = mID;\\n-\\n   return NS_OK;\\n }\\n \\n-NS_IMETHODIMP \\n+NS_IMETHODIMP\\n nsDownload::GetReferrer(nsIURI **referrer)\\n {\\n   NS_IF_ADDREF(*referrer = mReferrer);\\n-\\n   return NS_OK;\\n }\\n \\n@@ -2058,7 +2050,7 @@ nsDownload::PauseResume(PRBool aPause)\\n     if (resumable) {\\n       rv = mCancelable->Cancel(NS_BINDING_ABORTED);\\n       NS_ENSURE_SUCCESS(rv, rv);\\n-    } else { \\n+    } else {\\n       // This is for non-resumable downloads and downloads that are used with\\n       // \\\"Open With...\\\".\\n       rv = mRequest->Suspend();\\n@@ -2172,7 +2164,7 @@ nsDownload::UpdateDB()\\n   }\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  //entityID\\n+  // entityID\\n   rv = stmt->BindUTF8StringParameter(4, mEntityID);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\ndiff --git a/toolkit/components/downloads/src/nsDownloadManager.h b/toolkit/components/downloads/src/nsDownloadManager.h\\nindex 88e369e..1a03c78 100644\\n--- a/toolkit/components/downloads/src/nsDownloadManager.h\\n+++ b/toolkit/components/downloads/src/nsDownloadManager.h\\n@@ -38,7 +38,7 @@\\n  * the terms of any one of the MPL, the GPL or the LGPL.\\n  *\\n  * ***** END LICENSE BLOCK ***** */\\n- \\n+\\n #ifndef downloadmanager___h___\\n #define downloadmanager___h___\\n \\n@@ -111,7 +111,6 @@ protected:\\n \\n   void SendEvent(nsDownload *aDownload, const char *aTopic);\\n \\n-\\n   /**\\n    * Adds a download with the specified information to the DB.\\n    *\\n@@ -144,21 +143,21 @@ protected:\\n   nsresult CancelAllDownloads();\\n \\n   /**\\n-   * Removes download from \\\"current downloads\\\". \\n+   * Removes download from \\\"current downloads\\\".\\n    *\\n-   * This method removes the cycle created when starting the download, so \\n+   * This method removes the cycle created when starting the download, so\\n    * make sure to use kungFuDeathGrip if you want to access member variables\\n    */\\n   void CompleteDownload(nsDownload *aDownload);\\n \\n-  void     ConfirmCancelDownloads(PRInt32 aCount,\\n-                                  nsISupportsPRBool* aCancelDownloads,\\n-                                  const PRUnichar* aTitle, \\n-                                  const PRUnichar* aCancelMessageMultiple, \\n-                                  const PRUnichar* aCancelMessageSingle,\\n-                                  const PRUnichar* aDontCancelButton);\\n+  void ConfirmCancelDownloads(PRInt32 aCount,\\n+                              nsISupportsPRBool *aCancelDownloads,\\n+                              const PRUnichar *aTitle,\\n+                              const PRUnichar *aCancelMessageMultiple,\\n+                              const PRUnichar *aCancelMessageSingle,\\n+                              const PRUnichar *aDontCancelButton);\\n \\n-  PRInt32  GetRetentionBehavior();\\n+  PRInt32 GetRetentionBehavior();\\n   nsresult ExecuteDesiredAction(nsDownload *aDownload);\\n \\n   static PRBool IsInFinalStage(DownloadState aState)\\n@@ -168,11 +167,11 @@ protected:\\n            aState == nsIDownloadManager::DOWNLOAD_DOWNLOADING;\\n   }\\n \\n-  static PRBool IsInProgress(DownloadState aState) \\n+  static PRBool IsInProgress(DownloadState aState)\\n   {\\n-    return aState == nsIDownloadManager::DOWNLOAD_NOTSTARTED || \\n+    return aState == nsIDownloadManager::DOWNLOAD_NOTSTARTED ||\\n            aState == nsIDownloadManager::DOWNLOAD_QUEUED ||\\n-           aState == nsIDownloadManager::DOWNLOAD_DOWNLOADING || \\n+           aState == nsIDownloadManager::DOWNLOAD_DOWNLOADING ||\\n            aState == nsIDownloadManager::DOWNLOAD_PAUSED;\\n   }\\n \\n@@ -224,7 +223,7 @@ protected:\\n \\n   nsresult PauseResume(PRBool aPause);\\n \\n-  nsDownloadManager* mDownloadManager;\\n+  nsDownloadManager *mDownloadManager;\\n   nsCOMPtr<nsIURI> mTarget;\\n \\n private:\\n@@ -237,9 +236,9 @@ private:\\n   nsCOMPtr<nsIRequest> mRequest;\\n   nsCOMPtr<nsILocalFile> mTempFile;\\n   nsCOMPtr<nsIMIMEInfo> mMIMEInfo;\\n-  \\n+\\n   DownloadState mDownloadState;\\n-  DownloadType  mDownloadType;\\n+  DownloadType mDownloadType;\\n \\n   PRUint32 mID;\\n   PRInt32 mPercentComplete;\\n\""}