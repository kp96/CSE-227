{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas1283321\""},"diff":"\"1283321 Bug 389056 Don't break line between periods and quote/Bug 388096 add line-breaking opportunity after U+058A ARMENIAN HYPHEN, U+2010 HYPHEN, U+2012 FIGURE DASH and U+2013 EN DASH. And U+2014 EM DASH should be breakable before and after except that between the same characters/Bug 389595 Don't break around '(' and ')'/Bug 390920 Don't break around &nbsp; r+sr=roc, b1.9=dbaron\\ndiff --git a/content/base/public/nsLineBreaker.h b/content/base/public/nsLineBreaker.h\\nindex 9fbaa8d..a9503a5 100644\\n--- a/content/base/public/nsLineBreaker.h\\n+++ b/content/base/public/nsLineBreaker.h\\n@@ -40,6 +40,7 @@\\n \\n #include \\\"nsString.h\\\"\\n #include \\\"nsTArray.h\\\"\\n+#include \\\"nsILineBreaker.h\\\"\\n \\n class nsIAtom;\\n \\n@@ -81,10 +82,7 @@ public:\\n   nsLineBreaker();\\n   ~nsLineBreaker();\\n   \\n-  static inline PRBool IsSpace(PRUnichar u)\\n-  {\\n-    return u == 0x0020 || u == 0x200b/*ZWSP*/ || u == '\\\\n' || u == '\\\\t';\\n-  }\\n+  static inline PRBool IsSpace(PRUnichar u) { return NS_IsSpace(u); }\\n \\n   static inline PRBool IsComplexASCIIChar(PRUnichar u)\\n   {\\ndiff --git a/intl/lwbrk/public/nsILineBreaker.h b/intl/lwbrk/public/nsILineBreaker.h\\nindex 94726ec..5430962 100644\\n--- a/intl/lwbrk/public/nsILineBreaker.h\\n+++ b/intl/lwbrk/public/nsILineBreaker.h\\n@@ -72,4 +72,18 @@ public:\\n \\n NS_DEFINE_STATIC_IID_ACCESSOR(nsILineBreaker, NS_ILINEBREAKER_IID)\\n \\n+static inline PRBool\\n+NS_IsSpace(PRUnichar u)\\n+{\\n+  return u == 0x0020 ||                  // SPACE\\n+         u == 0x0009 ||                  // CHARACTER TABULATION\\n+         u == 0x000D ||                  // CARRIAGE RETURN\\n+         (0x2000 <= u && u <= 0x2006) || // EN QUAD, EM QUAD, EN SPACE,\\n+                                         // EM SPACE, THREE-PER-EM SPACE,\\n+                                         // FOUR-PER-SPACE, SIX-PER-EM SPACE,\\n+         (0x2008 <= u && u <= 0x200B) || // PUNCTUATION SPACE, THIN SPACE,\\n+                                         // HAIR SPACE, ZERO WIDTH SPACE\\n+         u == 0x3000;                    // IDEOGRAPHIC SPACE\\n+}\\n+\\n #endif  /* nsILineBreaker_h__ */\\ndiff --git a/intl/lwbrk/src/jisx4501class.h b/intl/lwbrk/src/jisx4501class.h\\nindex 7f7d7d9..e3032db 100644\\n--- a/intl/lwbrk/src/jisx4501class.h\\n+++ b/intl/lwbrk/src/jisx4501class.h\\n@@ -43,104 +43,104 @@ static const PRUint32 gLBClass00[32] = {\\n 0x55555555, // U+0008 - U+000F\\n 0x55555555, // U+0010 - U+0017\\n 0x55555555, // U+0018 - U+001F\\n-0x88108815, // U+0020 - U+0027\\n-0x11118810, // U+0028 - U+002F\\n+0x7AABAAA5, // U+0020 - U+0027\\n+0x7A7AAAA9, // U+0028 - U+002F\\n 0x66666666, // U+0030 - U+0037\\n-0x11101866, // U+0038 - U+003F\\n-0x88888888, // U+0040 - U+0047\\n-0x88888888, // U+0048 - U+004F\\n-0x88888888, // U+0050 - U+0057\\n-0x88100888, // U+0058 - U+005F\\n-0x88888888, // U+0060 - U+0067\\n-0x88888888, // U+0068 - U+006F\\n-0x88888888, // U+0070 - U+0077\\n-0x88180888, // U+0078 - U+007F\\n-0x88888888, // U+0080 - U+0087\\n-0x88888888, // U+0088 - U+008F\\n-0x88888888, // U+0090 - U+0097\\n-0x88888888, // U+0098 - U+009F\\n-0x88383488, // U+00A0 - U+00A7\\n-0x88888888, // U+00A8 - U+00AF\\n-0x88888881, // U+00B0 - U+00B7\\n-0x88888888, // U+00B8 - U+00BF\\n-0x88888888, // U+00C0 - U+00C7\\n-0x88888888, // U+00C8 - U+00CF\\n-0x88888888, // U+00D0 - U+00D7\\n-0x88888888, // U+00D8 - U+00DF\\n-0x88888888, // U+00E0 - U+00E7\\n-0x88888888, // U+00E8 - U+00EF\\n-0x88888888, // U+00F0 - U+00F7\\n-0x88888888, // U+00F8 - U+00FF\\n+0x1AA9AA66, // U+0038 - U+003F\\n+0x77777777, // U+0040 - U+0047\\n+0x77777777, // U+0048 - U+004F\\n+0x77777777, // U+0050 - U+0057\\n+0x77AA9777, // U+0058 - U+005F\\n+0x77777777, // U+0060 - U+0067\\n+0x77777777, // U+0068 - U+006F\\n+0x77777777, // U+0070 - U+0077\\n+0x7AAA9777, // U+0078 - U+007F\\n+0x77777777, // U+0080 - U+0087\\n+0x77777777, // U+0088 - U+008F\\n+0x77777777, // U+0090 - U+0097\\n+0x77777777, // U+0098 - U+009F\\n+0xAA9A9AAB, // U+00A0 - U+00A7\\n+0x77A9A77A, // U+00A8 - U+00AF\\n+0xAAAAAAAA, // U+00B0 - U+00B7\\n+0xAAAAAAAA, // U+00B8 - U+00BF\\n+0x77777777, // U+00C0 - U+00C7\\n+0x77777777, // U+00C8 - U+00CF\\n+0x77777777, // U+00D0 - U+00D7\\n+0x77777777, // U+00D8 - U+00DF\\n+0x77777777, // U+00E0 - U+00E7\\n+0x77777777, // U+00E8 - U+00EF\\n+0xA7777777, // U+00F0 - U+00F7\\n+0x77777777, // U+00F8 - U+00FF\\n };\\n \\n static const PRUint32 gLBClass20[32] = {\\n-0x55555555, // U+2000 - U+2007\\n-0x88885555, // U+2008 - U+200F\\n-0x88828888, // U+2010 - U+2017\\n-0x88888888, // U+2018 - U+201F\\n-0x81118888, // U+2020 - U+2027\\n-0x88888888, // U+2028 - U+202F\\n-0x88884444, // U+2030 - U+2037\\n-0x88815888, // U+2038 - U+203F\\n-0x88818888, // U+2040 - U+2047\\n-0x88888888, // U+2048 - U+204F\\n-0x88888888, // U+2050 - U+2057\\n-0x88888888, // U+2058 - U+205F\\n-0x88888888, // U+2060 - U+2067\\n-0x88888888, // U+2068 - U+206F\\n-0x88888888, // U+2070 - U+2077\\n-0x88888888, // U+2078 - U+207F\\n-0x88888888, // U+2080 - U+2087\\n-0x88888888, // U+2088 - U+208F\\n-0x88888888, // U+2090 - U+2097\\n-0x88888888, // U+2098 - U+209F\\n-0x88888888, // U+20A0 - U+20A7\\n-0x88888888, // U+20A8 - U+20AF\\n-0x88888888, // U+20B0 - U+20B7\\n-0x88888888, // U+20B8 - U+20BF\\n-0x88888888, // U+20C0 - U+20C7\\n-0x88888888, // U+20C8 - U+20CF\\n-0x88888888, // U+20D0 - U+20D7\\n-0x88888888, // U+20D8 - U+20DF\\n-0x88888888, // U+20E0 - U+20E7\\n-0x88888888, // U+20E8 - U+20EF\\n-0x88888888, // U+20F0 - U+20F7\\n-0x88888888, // U+20F8 - U+20FF\\n+0xB5555555, // U+2000 - U+2007\\n+0x77775555, // U+2008 - U+200F\\n+0x777211B1, // U+2010 - U+2017\\n+0x77777777, // U+2018 - U+201F\\n+0xA2227777, // U+2020 - U+2027\\n+0xB7777777, // U+2028 - U+202F\\n+0x77744444, // U+2030 - U+2037\\n+0x7A115107, // U+2038 - U+203F\\n+0x11017777, // U+2040 - U+2047\\n+0x77777711, // U+2048 - U+204F\\n+0x77777777, // U+2050 - U+2057\\n+0x77777777, // U+2058 - U+205F\\n+0x77777777, // U+2060 - U+2067\\n+0x77777777, // U+2068 - U+206F\\n+0x77777777, // U+2070 - U+2077\\n+0x77777777, // U+2078 - U+207F\\n+0x77777777, // U+2080 - U+2087\\n+0x77777777, // U+2088 - U+208F\\n+0x77777777, // U+2090 - U+2097\\n+0x77777777, // U+2098 - U+209F\\n+0x77777777, // U+20A0 - U+20A7\\n+0x77777777, // U+20A8 - U+20AF\\n+0x77777777, // U+20B0 - U+20B7\\n+0x77777777, // U+20B8 - U+20BF\\n+0x77777777, // U+20C0 - U+20C7\\n+0x77777777, // U+20C8 - U+20CF\\n+0x77777777, // U+20D0 - U+20D7\\n+0x77777777, // U+20D8 - U+20DF\\n+0x77777777, // U+20E0 - U+20E7\\n+0x77777777, // U+20E8 - U+20EF\\n+0x77777777, // U+20F0 - U+20F7\\n+0x77777777, // U+20F8 - U+20FF\\n };\\n \\n static const PRUint32 gLBClass21[32] = {\\n-0x88888888, // U+2100 - U+2107\\n-0x88888888, // U+2108 - U+210F\\n-0x83888888, // U+2110 - U+2117\\n-0x88888888, // U+2118 - U+211F\\n-0x87888888, // U+2120 - U+2127\\n-0x88888888, // U+2128 - U+212F\\n-0x88888888, // U+2130 - U+2137\\n-0x88888888, // U+2138 - U+213F\\n-0x88888888, // U+2140 - U+2147\\n-0x88888888, // U+2148 - U+214F\\n-0x88888888, // U+2150 - U+2157\\n-0x88888888, // U+2158 - U+215F\\n+0x77777777, // U+2100 - U+2107\\n+0x77777777, // U+2108 - U+210F\\n+0x73777777, // U+2110 - U+2117\\n+0x77777777, // U+2118 - U+211F\\n+0x77777777, // U+2120 - U+2127\\n+0x77777777, // U+2128 - U+212F\\n+0x77777777, // U+2130 - U+2137\\n+0x77777777, // U+2138 - U+213F\\n+0x77777777, // U+2140 - U+2147\\n+0x77777777, // U+2148 - U+214F\\n+0x77777777, // U+2150 - U+2157\\n+0x77777777, // U+2158 - U+215F\\n 0x55555555, // U+2160 - U+2167\\n 0x55555555, // U+2168 - U+216F\\n 0x55555555, // U+2170 - U+2177\\n 0x55555555, // U+2178 - U+217F\\n-0x88888888, // U+2180 - U+2187\\n-0x88888888, // U+2188 - U+218F\\n-0x88888888, // U+2190 - U+2197\\n-0x88888888, // U+2198 - U+219F\\n-0x88888888, // U+21A0 - U+21A7\\n-0x88888888, // U+21A8 - U+21AF\\n-0x88888888, // U+21B0 - U+21B7\\n-0x88888888, // U+21B8 - U+21BF\\n-0x88888888, // U+21C0 - U+21C7\\n-0x88888888, // U+21C8 - U+21CF\\n-0x88888888, // U+21D0 - U+21D7\\n-0x88888888, // U+21D8 - U+21DF\\n-0x88888888, // U+21E0 - U+21E7\\n-0x88888888, // U+21E8 - U+21EF\\n-0x88888888, // U+21F0 - U+21F7\\n-0x88888888, // U+21F8 - U+21FF\\n+0x77777777, // U+2180 - U+2187\\n+0x77777777, // U+2188 - U+218F\\n+0x77777777, // U+2190 - U+2197\\n+0x77777777, // U+2198 - U+219F\\n+0x77777777, // U+21A0 - U+21A7\\n+0x77777777, // U+21A8 - U+21AF\\n+0x77777777, // U+21B0 - U+21B7\\n+0x77777777, // U+21B8 - U+21BF\\n+0x77777777, // U+21C0 - U+21C7\\n+0x77777777, // U+21C8 - U+21CF\\n+0x77777777, // U+21D0 - U+21D7\\n+0x77777777, // U+21D8 - U+21DF\\n+0x77777777, // U+21E0 - U+21E7\\n+0x77777777, // U+21E8 - U+21EF\\n+0x77777777, // U+21F0 - U+21F7\\n+0x77777777, // U+21F8 - U+21FF\\n };\\n \\n static const PRUint32 gLBClass30[32] = {\\n@@ -179,37 +179,37 @@ static const PRUint32 gLBClass30[32] = {\\n };\\n \\n static const PRUint32 gLBClass0E[32] = {\\n-0x99999999, // U+0E00 - U+0E07\\n-0x99999999, // U+0E08 - U+0E0F\\n-0x99999999, // U+0E10 - U+0E17\\n-0x99999999, // U+0E18 - U+0E1F\\n-0x99999999, // U+0E20 - U+0E27\\n-0x19999999, // U+0E28 - U+0E2F\\n-0x99999999, // U+0E30 - U+0E37\\n-0x09999999, // U+0E38 - U+0E3F\\n-0x91999999, // U+0E40 - U+0E47\\n-0x89999999, // U+0E48 - U+0E4F\\n+0x88888888, // U+0E00 - U+0E07\\n+0x88888888, // U+0E08 - U+0E0F\\n+0x88888888, // U+0E10 - U+0E17\\n+0x88888888, // U+0E18 - U+0E1F\\n+0x88888888, // U+0E20 - U+0E27\\n+0x18888888, // U+0E28 - U+0E2F\\n+0x88888888, // U+0E30 - U+0E37\\n+0x08888888, // U+0E38 - U+0E3F\\n+0x81888888, // U+0E40 - U+0E47\\n+0x78888888, // U+0E48 - U+0E4F\\n 0x66666666, // U+0E50 - U+0E57\\n-0x99991166, // U+0E58 - U+0E5F\\n-0x99999999, // U+0E60 - U+0E67\\n-0x99999999, // U+0E68 - U+0E6F\\n-0x99999999, // U+0E70 - U+0E77\\n-0x99999999, // U+0E78 - U+0E7F\\n-0x99999999, // U+0E80 - U+0E87\\n-0x99999999, // U+0E88 - U+0E8F\\n-0x99999999, // U+0E90 - U+0E97\\n-0x99999999, // U+0E98 - U+0E9F\\n-0x99999999, // U+0EA0 - U+0EA7\\n-0x19999999, // U+0EA8 - U+0EAF\\n-0x99999999, // U+0EB0 - U+0EB7\\n-0x99999999, // U+0EB8 - U+0EBF\\n-0x91999999, // U+0EC0 - U+0EC7\\n-0x99999999, // U+0EC8 - U+0ECF\\n+0x88881166, // U+0E58 - U+0E5F\\n+0x88888888, // U+0E60 - U+0E67\\n+0x88888888, // U+0E68 - U+0E6F\\n+0x88888888, // U+0E70 - U+0E77\\n+0x88888888, // U+0E78 - U+0E7F\\n+0x88888888, // U+0E80 - U+0E87\\n+0x88888888, // U+0E88 - U+0E8F\\n+0x88888888, // U+0E90 - U+0E97\\n+0x88888888, // U+0E98 - U+0E9F\\n+0x88888888, // U+0EA0 - U+0EA7\\n+0x18888888, // U+0EA8 - U+0EAF\\n+0x88888888, // U+0EB0 - U+0EB7\\n+0x88888888, // U+0EB8 - U+0EBF\\n+0x81888888, // U+0EC0 - U+0EC7\\n+0x88888888, // U+0EC8 - U+0ECF\\n 0x66666666, // U+0ED0 - U+0ED7\\n-0x99999966, // U+0ED8 - U+0EDF\\n-0x99999999, // U+0EE0 - U+0EE7\\n-0x99999999, // U+0EE8 - U+0EEF\\n-0x99999999, // U+0EF0 - U+0EF7\\n-0x99999999, // U+0EF8 - U+0EFF\\n+0x88888866, // U+0ED8 - U+0EDF\\n+0x88888888, // U+0EE0 - U+0EE7\\n+0x88888888, // U+0EE8 - U+0EEF\\n+0x88888888, // U+0EF0 - U+0EF7\\n+0x88888888, // U+0EF8 - U+0EFF\\n };\\n \\ndiff --git a/intl/lwbrk/src/nsJISx4501LineBreaker.cpp b/intl/lwbrk/src/nsJISx4501LineBreaker.cpp\\nindex 013e377..b1fd3ea6 100644\\n--- a/intl/lwbrk/src/nsJISx4501LineBreaker.cpp\\n+++ b/intl/lwbrk/src/nsJISx4501LineBreaker.cpp\\n@@ -66,78 +66,97 @@\\n         4        X  X  X  X  X                                               X\\n         5        X  X  X  X  X                                               X\\n         6        X  X  X  X  X                                               X\\n-        7        X  X  X  X  X  X                                            X \\n-        8        X  X  X  X  X                                X              E \\n+        7        X  X  X  X  X  X                                            X\\n+        8        X  X  X  X  X                                X              E\\n         9        X  X  X  X  X                                               X\\n        10        X  X  X  X  X                                               X\\n        11        X  X  X  X  X                                               X\\n-       12        X  X  X  X  X                                               X  \\n+       12        X  X  X  X  X                                               X\\n        13        X  X  X  X  X                    X                          X\\n        14        X  X  X  X  X                          X                    X\\n-       15        X  X  X  X  X        X                       X        X     X \\n+       15        X  X  X  X  X        X                       X        X     X\\n        16        X  X  X  X  X                                   X     X     X\\n-       17        X  X  X  X  X                                               E \\n-       18        X  X  X  X  X                                X  X     X     X \\n+       17        X  X  X  X  X                                               E\\n+       18        X  X  X  X  X                                X  X     X     X\\n        19     X  E  E  E  E  E  X  X  X  X  X  X  X  X  X  X  X  X  E  X  E  E\\n        20        X  X  X  X  X                                               E\\n \\n    * Same Char\\n    # Other Char\\n-    \\n+\\n    X Cannot Break\\n \\n+   The classes mean:\\n+      1: Open parenthesis\\n+      2: Close parenthesis\\n+      3: Prohibit a line break before\\n+      4: Punctuation for sentence end (except Full stop, e.g., \\\"!\\\" and \\\"?\\\")\\n+      5: Middle dot (e.g., U+30FB KATAKANA MIDDLE DOT)\\n+      6: Full stop\\n+      7: Non-breakable between same characters\\n+      8: Prefix (e.g., \\\"$\\\", \\\"NO.\\\")\\n+      9: Postfix (e.g., \\\"%\\\")\\n+     10: Ideographic space\\n+     11: Hiragana\\n+     12: Japanese characters (except class 11)\\n+     13: Subscript\\n+     14: Ruby\\n+     15: Numeric\\n+     16: Alphabet\\n+     17: Space for Western language\\n+     18: Western characters (except class 17)\\n+     19: Split line note (Warichu) begin quote\\n+     20: Split line note (Warichu) end quote\\n+\\n    2. Simplified by remove the class which we do not care\\n \\n-   However, since we do not care about class 13(Subscript), 14(Ruby), \\n-   19(split line note begin quote), and 20(split line note end quote) \\n-   we can simplify this par table into the following \\n+   However, since we do not care about class 13(Subscript), 14(Ruby),\\n+   16 (Aphabet), 19(split line note begin quote), and 20(split line note end\\n+   quote) we can simplify this par table into the following\\n \\n    Class of\\n    Leading    Class of Trailing Char Class\\n-   Char        \\n+   Char\\n+\\n+              1  2  3  4  5  6  7  8  9 10 11 12 15 17 18\\n \\n-              1  2  3  4  5  6  7  8  9 10 11 12 15 16 17 18 \\n-                                                 \\n-        1     X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X\\n-        2        X  X  X  X  X                             \\n-        3        X  X  X  X  X                            \\n+        1     X  X  X  X  X  X  X  X  X  X  X  X  X  X  X\\n+        2        X  X  X  X  X                           \\n+        3        X  X  X  X  X                           \\n         4        X  X  X  X  X                           \\n-        5        X  X  X  X  X                          \\n-        6        X  X  X  X  X                         \\n-        7        X  X  X  X  X  X                      \\n-        8        X  X  X  X  X                    X    \\n-        9        X  X  X  X  X                                   \\n-       10        X  X  X  X  X                                  \\n-       11        X  X  X  X  X                                 \\n-       12        X  X  X  X  X                                \\n-       15        X  X  X  X  X        X           X        X    \\n-       16        X  X  X  X  X                       X     X    \\n-       17        X  X  X  X  X                                  \\n-       18        X  X  X  X  X                    X  X     X    \\n+        5        X  X  X  X  X                           \\n+        6        X  X  X  X  X                           \\n+        7        X  X  X  X  X  X                        \\n+        8        X  X  X  X  X                    X      \\n+        9        X  X  X  X  X                           \\n+       10        X  X  X  X  X                           \\n+       11        X  X  X  X  X                           \\n+       12        X  X  X  X  X                           \\n+       15        X  X  X  X  X        X           X     X\\n+       17        X  X  X  X  X                           \\n+       18        X  X  X  X  X                    X     X\\n \\n    3. Simplified by merged classes\\n \\n-   After the 2 simplification, the pair table have some duplication \\n+   After the 2 simplification, the pair table have some duplication\\n    a. class 2, 3, 4, 5, 6,  are the same- we can merged them\\n    b. class 10, 11, 12, 17  are the same- we can merged them\\n \\n \\n    Class of\\n    Leading    Class of Trailing Char Class\\n-   Char        \\n+   Char\\n \\n-              1 [a] 7  8  9 [b]15 16 18 \\n-                                     \\n-        1     X  X  X  X  X  X  X  X  X\\n-      [a]        X                             \\n-        7        X  X                      \\n-        8        X              X    \\n-        9        X                                   \\n-      [b]        X                                  \\n-       15        X        X     X     X    \\n-       16        X                 X  X    \\n-       18        X              X  X  X    \\n+              1 [a] 7  8  9 [b]15 18\\n \\n+        1     X  X  X  X  X  X  X  X\\n+      [a]        X                  \\n+        7        X  X               \\n+        8        X              X   \\n+        9        X                  \\n+      [b]        X                  \\n+       15        X        X     X  X\\n+       18        X              X  X\\n \\n \\n    4. We add COMPLEX characters and make it breakable w/ all ther class\\n@@ -145,41 +164,173 @@\\n \\n    Class of\\n    Leading    Class of Trailing Char Class\\n-   Char        \\n+   Char\\n+\\n+              1 [a] 7  8  9 [b]15 18 COMPLEX\\n+\\n+        1     X  X  X  X  X  X  X  X  X\\n+      [a]        X                     \\n+        7        X  X                  \\n+        8        X              X      \\n+        9        X                     \\n+      [b]        X                     \\n+       15        X        X     X  X   \\n+       18        X              X  X   \\n+  COMPLEX        X                    T\\n \\n-              1 [a] 7  8  9 [b]15 16 18 COMPLEX\\n-                                     \\n-        1     X  X  X  X  X  X  X  X  X  X\\n-      [a]        X                             \\n-        7        X  X                      \\n-        8        X              X    \\n-        9        X                                   \\n-      [b]        X                                  \\n-       15        X        X     X     X    \\n-       16        X                 X  X    \\n-       18        X              X  X  X    \\n-  COMPLEX        X                       T\\n-      \\n      T : need special handling\\n \\n-   5. Now we use one bit to encode weather it is breakable, and use 2 bytes\\n+\\n+   5. However, we need two special class for some punctuations/parentheses,\\n+      theirs breaking rules like character class (18), see bug 389056.\\n+      And also we need character like punctuation that is same behavior with 18,\\n+      but the characters are not letters of all languages. (e.g., '_')\\n+      [c]. Based on open parenthesis class (1), but it is not breakable after\\n+           character class (18) or numeric class (15).\\n+      [d]. Based on close parenthesis (or punctuation) class (2), but it is not\\n+           breakable before character class (18) or numeric class (15).\\n+\\n+   Class of\\n+   Leading    Class of Trailing Char Class\\n+   Char\\n+\\n+              1 [a] 7  8  9 [b]15 18 COMPLEX [c] [d]\\n+\\n+        1     X  X  X  X  X  X  X  X  X       X    X\\n+      [a]        X                            X    X\\n+        7        X  X                               \\n+        8        X              X                   \\n+        9        X                                  \\n+      [b]        X                                 X\\n+       15        X        X     X  X          X    X\\n+       18        X              X  X          X    X\\n+  COMPLEX        X                    T             \\n+      [c]     X  X  X  X  X  X  X  X  X       X    X\\n+      [d]        X              X  X               X\\n+\\n+\\n+   6. And Unicode has \\\"NON-BREAK\\\" characters. The lines should be broken around\\n+      them. But in JIS X 4051, such class is not, therefore, we create [e].\\n+\\n+   Class of\\n+   Leading    Class of Trailing Char Class\\n+   Char\\n+\\n+              1 [a] 7  8  9 [b]15 18 COMPLEX [c] [d] [e]\\n+\\n+        1     X  X  X  X  X  X  X  X  X       X    X   X\\n+      [a]        X                            X    X   X\\n+        7        X  X                                  X\\n+        8        X              X                      X\\n+        9        X                                     X\\n+      [b]        X                                 X   X\\n+       15        X        X     X  X          X    X   X\\n+       18        X              X  X          X    X   X\\n+  COMPLEX        X                    T                X\\n+      [c]     X  X  X  X  X  X  X  X  X       X    X   X\\n+      [d]        X              X  X               X   X\\n+      [e]     X  X  X  X  X  X  X  X  X       X    X   X\\n+\\n+\\n+   7. Now we use one bit to encode weather it is breakable, and use 2 bytes\\n       for one row, then the bit table will look like:\\n \\n                  18    <-   1\\n-            \\n-       1  0000 0011 1111 1111  = 0x03FF\\n-      [a] 0000 0000 0000 0010  = 0x0002\\n-       7  0000 0000 0000 0110  = 0x0006\\n-       8  0000 0000 0100 0010  = 0x0042\\n-       9  0000 0000 0000 0010  = 0x0002\\n-      [b] 0000 0000 0000 0010  = 0x0002\\n-      15  0000 0001 0101 0010  = 0x0152\\n-      16  0000 0001 1000 0010  = 0x0182\\n-      18  0000 0001 1100 0010  = 0x01C2\\n- COMPLEX  0000 0010 0000 0010  = 0x0202\\n-\\n-   5. Now we map the class to number\\n-      \\n+\\n+       1  0000 1111 1111 1111  = 0x0FFF\\n+      [a] 0000 1110 0000 0010  = 0x0E02\\n+       7  0000 1000 0000 0110  = 0x0806\\n+       8  0000 1000 0100 0010  = 0x0842\\n+       9  0000 1000 0000 0010  = 0x0802\\n+      [b] 0000 1100 0000 0010  = 0x0C02\\n+      15  0000 1110 1101 0010  = 0x0ED2\\n+      18  0000 1110 1100 0010  = 0x0EC2\\n+ COMPLEX  0000 1001 0000 0010  = 0x0902\\n+      [c] 0000 1111 1111 1111  = 0x0FFF\\n+      [d] 0000 1100 1100 0010  = 0x0CC2\\n+      [e] 0000 1111 1111 1111  = 0x0FFF\\n+*/\\n+\\n+#define MAX_CLASSES 12\\n+\\n+static const PRUint16 gPair[MAX_CLASSES] = {\\n+  0x0FFF,\\n+  0x0E02,\\n+  0x0806,\\n+  0x0842,\\n+  0x0802,\\n+  0x0C02,\\n+  0x0ED2,\\n+  0x0EC2,\\n+  0x0902,\\n+  0x0FFF,\\n+  0x0CC2,\\n+  0x0FFF\\n+};\\n+\\n+\\n+/*\\n+\\n+   8. And if the character is not enough far from word start, word end and\\n+      another break point, we should not break in non-CJK languages.\\n+      I.e., Don't break around 15, 18, [c] and [d], but don't change\\n+      that if they are related to [b].\\n+\\n+   Class of\\n+   Leading    Class of Trailing Char Class\\n+   Char\\n+\\n+              1 [a] 7  8  9 [b]15 18 COMPLEX [c] [d] [e]\\n+\\n+        1     X  X  X  X  X  X  X  X  X       X    X   X\\n+      [a]        X              X  X          X    X   X\\n+        7        X  X           X  X          X    X   X\\n+        8        X              X  X          X    X   X\\n+        9        X              X  X          X    X   X\\n+      [b]        X                                 X   X\\n+       15     X  X  X  X  X     X  X  X       X    X   X\\n+       18     X  X  X  X  X     X  X  X       X    X   X\\n+  COMPLEX        X              X  X  T       X    X   X\\n+      [c]     X  X  X  X  X  X  X  X  X       X    X   X\\n+      [d]     X  X  X  X  X     X  X  X       X    X   X\\n+      [e]     X  X  X  X  X  X  X  X  X       X    X   X\\n+\\n+                 18    <-   1\\n+\\n+       1  0000 1111 1111 1111  = 0x0FFF\\n+      [a] 0000 1110 1100 0010  = 0x0EC2\\n+       7  0000 1110 1100 0110  = 0x0EC6\\n+       8  0000 1110 1100 0010  = 0x0EC2\\n+       9  0000 1110 1100 0010  = 0x0EC2\\n+      [b] 0000 1100 0000 0010  = 0x0C02\\n+      15  0000 1111 1101 1111  = 0x0FDF\\n+      18  0000 1111 1101 1111  = 0x0FDF\\n+ COMPLEX  0000 1111 1100 0010  = 0x0FC2\\n+      [c] 0000 1111 1111 1111  = 0x0FFF\\n+      [d] 0000 1111 1101 1111  = 0x0EDF\\n+      [e] 0000 1111 1111 1111  = 0x0FFF\\n+*/\\n+\\n+static const PRUint16 gPairConservative[MAX_CLASSES] = {\\n+  0x0FFF,\\n+  0x0EC2,\\n+  0x0EC6,\\n+  0x0EC2,\\n+  0x0EC2,\\n+  0x0C02,\\n+  0x0FDF,\\n+  0x0FDF,\\n+  0x0FC2,\\n+  0x0FFF,\\n+  0x0EDF,\\n+  0x0FFF\\n+};\\n+\\n+\\n+/*\\n+\\n+   9. Now we map the class to number\\n+\\n       0: 1 \\n       1: [a]- 2, 3, 4, 5, 6\\n       2: 7\\n@@ -187,27 +338,59 @@\\n       4: 9\\n       5: [b]- 10, 11, 12, 17\\n       6: 15\\n-      7: 16\\n-      8: 18\\n-      9: COMPLEX\\n+      7: 18\\n+      8: COMPLEX\\n+      9: [c]\\n+      A: [d]\\n+      B: [e]\\n+\\n+    and they mean:\\n+      0: Open parenthesis\\n+      1: Punctuation that prohibits break before\\n+      2: Non-breakable between same classes\\n+      3: Prefix\\n+      4: Postfix\\n+      5: Breakable character (Spaces and Most Japanese characters)\\n+      6: Numeric\\n+      7: Characters\\n+      8: Need special handling characters (E.g., Thai)\\n+      9: Open parentheses like Character (See bug 389056)\\n+      A: Close parenthese (or punctuations) like Character (See bug 389056)\\n+      B: Non breakable (See bug 390920)\\n \\n */\\n \\n-#define MAX_CLASSES 10\\n+#define CLASS_NONE                             PR_INT8_MAX\\n+\\n+#define CLASS_OPEN                             0x00\\n+#define CLASS_CLOSE                            0x01\\n+#define CLASS_NON_BREAKABLE_BETWEEN_SAME_CLASS 0x02\\n+#define CLASS_PREFIX                           0x03\\n+#define CLASS_POSTFFIX                         0x04\\n+#define CLASS_BREAKABLE                        0x05\\n+#define CLASS_NUMERIC                          0x06\\n+#define CLASS_CHARACTER                        0x07\\n+#define CLASS_COMPLEX                          0x08\\n+#define CLASS_OPEN_LIKE_CHARACTER              0x09\\n+#define CLASS_CLOSE_LIKE_CHARACTER             0x0A\\n+#define CLASS_NON_BREAKABLE                    0x0B\\n \\n-static const PRUint16 gPair[MAX_CLASSES] = {\\n-  0x03FF, \\n-  0x0002, \\n-  0x0006, \\n-  0x0042, \\n-  0x0002, \\n-  0x0002, \\n-  0x0152, \\n-  0x0182, \\n-  0x01C2,\\n-  0x0202\\n-};\\n+#define U_NULL      PRUnichar(0x0000)\\n+#define U_SLASH     PRUnichar('/')\\n+#define U_SPACE     PRUnichar(' ')\\n+#define U_HYPHEN    PRUnichar('-')\\n+#define U_EQUAL     PRUnichar('=')\\n+#define U_PERCENT   PRUnichar('%')\\n+#define U_AMPERSAND PRUnichar('&')\\n+#define U_BACKSLASH PRUnichar('\\\\\\\\')\\n \\n+#define NEED_CONTEXTUAL_ANALYSIS(c) (IS_HYPHEN(c) || \\\\\\n+                                     (c) == U_SLASH || \\\\\\n+                                     (c) == U_PERCENT || \\\\\\n+                                     (c) == U_AMPERSAND || \\\\\\n+                                     (c) == U_BACKSLASH)\\n+\\n+#define IS_ASCII_DIGIT(u) (0x0030 <= (u) && (u) <= 0x0039)\\n \\n static inline int\\n GETCLASSFROMTABLE(const PRUint32* t, PRUint16 l)\\n@@ -215,10 +398,6 @@ GETCLASSFROMTABLE(const PRUint32* t, PRUint16 l)\\n   return ((((t)[(l>>3)]) >> ((l & 0x0007)<<2)) & 0x000f);\\n }\\n \\n-#define CLASS_COMPLEX 9\\n-\\n-\\n-\\n static inline int\\n IS_HALFWIDTH_IN_JISx4051_CLASS3(PRUnichar u)\\n {\\n@@ -240,54 +419,48 @@ IS_COMPLEX(PRUnichar u)\\n   return (0x0e01 <= (u) && (u) <= 0x0e5b);\\n }\\n \\n-static inline int\\n-IS_SPACE(PRUnichar u)\\n+static inline PRBool\\n+IS_NONBREAKABLE_SPACE(PRUnichar u)\\n+{\\n+  return u == 0x00A0 || u == 0x2007; // NO-BREAK SPACE, FIGURE SPACE\\n+}\\n+\\n+static inline PRBool\\n+IS_HYPHEN(PRUnichar u)\\n {\\n-  return ((u) == 0x0020 || (u) == 0x0009 || (u) == 0x000a || (u) == 0x000d || (u)==0x200b);\\n+  return (u == U_HYPHEN ||\\n+          u == 0x058A || // ARMENIAN HYPHEN\\n+          u == 0x2010 || // HYPHEN\\n+          u == 0x2012);  // FIGURE DASH\\n }\\n \\n-static PRInt8 GetClass(PRUnichar u)\\n+static PRInt8\\n+GetClass(PRUnichar u)\\n {\\n    PRUint16 h = u & 0xFF00;\\n    PRUint16 l = u & 0x00ff;\\n    PRInt8 c;\\n-   \\n+\\n    // Handle 3 range table first\\n-   if( 0x0000 == h)\\n-   {\\n+   if (0x0000 == h) {\\n      c = GETCLASSFROMTABLE(gLBClass00, l);\\n-   } \\n-   else if( 0x0E00 == h)\\n-   {\\n+   } else if (0x0E00 == h) {\\n      c = GETCLASSFROMTABLE(gLBClass0E, l);\\n-   }\\n-   else if( 0x2000 == h)\\n-   {\\n+   } else if (0x2000 == h) {\\n      c = GETCLASSFROMTABLE(gLBClass20, l);\\n-   } \\n-   else if( 0x2100 == h)\\n-   {\\n+   } else if (0x2100 == h) {\\n      c = GETCLASSFROMTABLE(gLBClass21, l);\\n-   } \\n-   else if( 0x3000 == h)\\n-   {\\n+   } else if (0x3000 == h) {\\n      c = GETCLASSFROMTABLE(gLBClass30, l);\\n-   } \\n-   else if (  ( ( 0x3200 <= u) && ( u <= 0xA4CF) ) || // CJK and Yi \\n-              ( ( 0xAC00 <= h) && ( h <= 0xD7FF) ) || // Hangul\\n-              ( ( 0xf900 <= h) && ( h <= 0xfaff) )\\n-             )\\n-   { \\n-     c = 5; // CJK character, Han, and Han Compatability\\n-   } \\n-   else if( 0xff00 == h)\\n-   {\\n-     if( l < 0x0060) // Fullwidth ASCII variant \\n-     {\\n+   } else if (((0x3200 <= u) && (u <= 0xA4CF)) || // CJK and Yi\\n+              ((0xAC00 <= h) && (h <= 0xD7FF)) || // Hangul\\n+              ((0xf900 <= h) && (h <= 0xfaff))) {\\n+     c = CLASS_BREAKABLE; // CJK character, Han, and Han Compatability\\n+   } else if (0xff00 == h) {\\n+     if (l < 0x0060) { // Fullwidth ASCII variant\\n        c = GETCLASSFROMTABLE(gLBClass00, (l+0x20));\\n      } else if (l < 0x00a0) {\\n-       switch (l)\\n-       {\\n+       switch (l) {\\n          case 0x61: c = GetClass(0x3002); break;\\n          case 0x62: c = GetClass(0x300c); break;\\n          case 0x63: c = GetClass(0x300d); break;\\n@@ -296,53 +469,77 @@ static PRInt8 GetClass(PRUnichar u)\\n          case 0x9e: c = GetClass(0x309b); break;\\n          case 0x9f: c = GetClass(0x309c); break;\\n          default:\\n-           if(IS_HALFWIDTH_IN_JISx4051_CLASS3(u))\\n-              c = 1; // jis x4051 class 3\\n+           if (IS_HALFWIDTH_IN_JISx4051_CLASS3(u))\\n+              c = CLASS_CLOSE; // jis x4051 class 3\\n            else\\n-              c = 5; // jis x4051 class 11\\n+              c = CLASS_BREAKABLE; // jis x4051 class 11\\n            break;\\n        }\\n-       // Halfwidth Katakana variants\\n-     } else if( l < 0x00e0) {\\n-       c = 8; // Halfwidth Hangul variants \\n-     } else if( l < 0x00f0) {\\n-       static PRUnichar NarrowFFEx[16] = \\n-       { \\n+     // Halfwidth Katakana variants\\n+     } else if (l < 0x00e0) {\\n+       c = CLASS_CHARACTER; // Halfwidth Hangul variants\\n+     } else if (l < 0x00f0) {\\n+       static PRUnichar NarrowFFEx[16] = {\\n          0x00A2, 0x00A3, 0x00AC, 0x00AF, 0x00A6, 0x00A5, 0x20A9, 0x0000,\\n          0x2502, 0x2190, 0x2191, 0x2192, 0x2193, 0x25A0, 0x25CB, 0x0000\\n        };\\n        c = GetClass(NarrowFFEx[l - 0x00e0]);\\n      } else {\\n-       c = 8;\\n-     }\\n-   }\\n-   else if( 0x3100 == h) { \\n-     if ( l <= 0xbf) {  // Hangul Compatibility Jamo, Bopomofo, Kanbun\\n-                        // XXX: This is per UAX #14, but UAX #14 may change\\n-                        // the line breaking rules about Kanbun and Bopomofo.\\n-       c = 5;\\n+       c = CLASS_CHARACTER;\\n      }\\n-     else if ( l >= 0xf0)\\n-     {            // Katakana small letters for Ainu \\n-       c = 1;\\n+   } else if (0x3100 == h) { \\n+     if (l <= 0xbf) { // Hangul Compatibility Jamo, Bopomofo, Kanbun\\n+                      // XXX: This is per UAX #14, but UAX #14 may change\\n+                      // the line breaking rules about Kanbun and Bopomofo.\\n+       c = CLASS_BREAKABLE;\\n+     } else if (l >= 0xf0) { // Katakana small letters for Ainu\\n+       c = CLASS_CLOSE;\\n+     } else { // unassigned\\n+       c = CLASS_CHARACTER;\\n      }\\n-     else   // unassigned\\n-     {\\n-       c = 8;\\n-     }\\n-   } \\n-   else {\\n-     c = 8; // others \\n+   } else if (0x0300 == h) {\\n+     if (0x4F == l || (0x5C <= l && l <= 0x62))\\n+       c = CLASS_NON_BREAKABLE;\\n+     else\\n+       c = CLASS_CHARACTER;\\n+   } else if (0x0500 == h) {\\n+     // ARMENIAN HYPHEN (for \\\"Breaking Hyphens\\\" of UAX#14)\\n+     if (l == 0x8A)\\n+       c = GETCLASSFROMTABLE(gLBClass00, PRUint16(U_HYPHEN));\\n+     else\\n+       c = CLASS_CHARACTER;\\n+   } else if (0x0F00 == h) {\\n+     if (0x08 == l || 0x0C == l || 0x12 == l)\\n+       c = CLASS_NON_BREAKABLE;\\n+     else\\n+       c = CLASS_CHARACTER;\\n+   } else if (0x1800 == h) {\\n+     if (0x0E == l)\\n+       c = CLASS_NON_BREAKABLE;\\n+     else\\n+       c = CLASS_CHARACTER;\\n+   } else {\\n+     c = CLASS_CHARACTER; // others\\n    }\\n    return c;\\n }\\n \\n-static PRBool GetPair(PRInt8 c1, PRInt8 c2)\\n+static PRBool\\n+GetPair(PRInt8 c1, PRInt8 c2)\\n+{\\n+  NS_ASSERTION(c1 < MAX_CLASSES ,\\\"illegal classes 1\\\");\\n+  NS_ASSERTION(c2 < MAX_CLASSES ,\\\"illegal classes 2\\\");\\n+\\n+  return (0 == ((gPair[c1] >> c2) & 0x0001));\\n+}\\n+\\n+static PRBool\\n+GetPairConservative(PRInt8 c1, PRInt8 c2)\\n {\\n-  NS_ASSERTION( c1 < MAX_CLASSES ,\\\"illegal classes 1\\\");\\n-  NS_ASSERTION( c2 < MAX_CLASSES ,\\\"illegal classes 2\\\");\\n+  NS_ASSERTION(c1 < MAX_CLASSES ,\\\"illegal classes 1\\\");\\n+  NS_ASSERTION(c2 < MAX_CLASSES ,\\\"illegal classes 2\\\");\\n \\n-  return (0 == ((gPair[c1] >> c2 ) & 0x0001));\\n+  return (0 == ((gPairConservative[c1] >> c2) & 0x0001));\\n }\\n \\n nsJISx4051LineBreaker::nsJISx4051LineBreaker()\\n@@ -355,81 +552,204 @@ nsJISx4051LineBreaker::~nsJISx4051LineBreaker()\\n \\n NS_IMPL_ISUPPORTS1(nsJISx4051LineBreaker, nsILineBreaker)\\n \\n-#define U_PERIOD    PRUnichar('.')\\n-#define U_COMMA     PRUnichar(',')\\n-#define U_SEMICOLON PRUnichar(';')\\n-#define U_SLASH     PRUnichar('/')\\n-#define U_SPACE     PRUnichar(' ')\\n-#define U_HYPHEN    PRUnichar('-')\\n-#define U_EQUAL     PRUnichar('=')\\n-#define U_NULL      PRUnichar(0x0000)\\n-#define U_RIGHT_SINGLE_QUOTATION_MARK PRUnichar(0x2019)\\n-#define NEED_CONTEXTUAL_ANALYSIS(c) ((c) == U_PERIOD || \\\\\\n-                                     (c) == U_COMMA || \\\\\\n-                                     (c) == U_SEMICOLON || \\\\\\n-                                     (c) == U_SLASH || \\\\\\n-                                     (c) == U_HYPHEN || \\\\\\n-                                     (c) == U_EQUAL || \\\\\\n-                                     (c) == U_RIGHT_SINGLE_QUOTATION_MARK)\\n-#define NUMERIC_CLASS  6 // JIS x4051 class 15 is now map to simplified class 6\\n-#define CHARACTER_CLASS  8 // JIS x4051 class 18 is now map to simplified class 8\\n-#define IS_ASCII_DIGIT(u) (0x0030 <= (u) && (u) <= 0x0039)\\n+class ContextState {\\n+public:\\n+  ContextState(const PRUnichar* aText, PRUint32 aLength) {\\n+    mUniText = aText;\\n+    mText = nsnull;\\n+    mLength = aLength;\\n+    Init();\\n+  }\\n+\\n+  ContextState(const PRUint8* aText, PRUint32 aLength) {\\n+    mUniText = nsnull;\\n+    mText = aText;\\n+    mLength = aLength;\\n+    Init();\\n+  }\\n+\\n+  PRUint32 Length() { return mLength; }\\n+  PRUint32 Index() { return mIndex; }\\n+\\n+  PRUnichar GetCharAt(PRUint32 aIndex) {\\n+    NS_ASSERTION(0 <= aIndex && aIndex < mLength, \\\"Out of range!\\\");\\n+    return mUniText ? mUniText[aIndex] : PRUnichar(mText[aIndex]);\\n+  }\\n+\\n+  void AdvanceIndexTo(PRUint32 aIndex) {\\n+    NS_ASSERTION(mIndex <= aIndex, \\\"the index cannot decrease.\\\");\\n+    NS_ASSERTION(aIndex < mLength, \\\"out of range\\\");\\n+    mIndex = aIndex;\\n+  }\\n+\\n+  void NotifyBreakBefore() { mLastBreakIndex = mIndex; }\\n+\\n+// A word of western language should not be broken. But even if the word has\\n+// only ASCII characters, non-natural context words should be broken, e.g.,\\n+// URL and file path. For protecting the natural words, we should use\\n+// conservative breaking rules at following conditions:\\n+//   1. at near the start of word\\n+//   2. at near the end of word\\n+//   3. at near the latest broken point\\n+// CONSERVATIVE_BREAK_RANGE define the 'near' in characters.\\n+#define CONSERVATIVE_BREAK_RANGE 6\\n+\\n+  PRBool UseConservativeBreaking(PRUint32 aOffset = 0) {\\n+    if (mHasCJKChar)\\n+      return PR_FALSE;\\n+    PRUint32 index = mIndex + aOffset;\\n+    PRBool result = (index < CONSERVATIVE_BREAK_RANGE ||\\n+                     mLength - index < CONSERVATIVE_BREAK_RANGE ||\\n+                     index - mLastBreakIndex < CONSERVATIVE_BREAK_RANGE);\\n+    if (result || !mHasNonbreakableSpace)\\n+      return result;\\n+\\n+    // This text has no-breakable space, we need to check whether the index\\n+    // is near it.\\n+\\n+    // Note that index is always larger than CONSERVATIVE_BREAK_RANGE here.\\n+    for (PRUint32 i = index - 1; index - CONSERVATIVE_BREAK_RANGE < i; --i) {\\n+      if (IS_NONBREAKABLE_SPACE(GetCharAt(i)))\\n+        return PR_TRUE;\\n+      if (i == 0)\\n+        break;\\n+    }\\n+    // Note that index is always less than mLength - CONSERVATIVE_BREAK_RANGE.\\n+    for (PRUint32 i = index + 1; i < index + CONSERVATIVE_BREAK_RANGE; ++i) {\\n+      if (IS_NONBREAKABLE_SPACE(GetCharAt(i)))\\n+        return PR_TRUE;\\n+    }\\n+    return PR_FALSE;\\n+  }\\n+\\n+  PRBool HasCharacterAlready(PRUnichar aCh) {\\n+    // Be careful for the index being unsigned.\\n+    if (mIndex == 0)\\n+      return PR_FALSE;\\n+    for (PRUint32 i = mIndex - 1; 0 < i; --i) {\\n+      if (GetCharAt(i) == aCh)\\n+        return PR_TRUE;\\n+      if (i == 0)\\n+        break;\\n+    }\\n+    return PR_FALSE;\\n+  }\\n+\\n+  PRUnichar GetPreviousNonHyphenCharacter() {\\n+    NS_ASSERTION(IS_HYPHEN(GetCharAt(mIndex)),\\n+                 \\\"current character isn't hyphen\\\");\\n+    // Be careful for the index being unsigned.\\n+    if (mIndex == 0)\\n+      return PR_FALSE;\\n+    for (PRUint32 i = mIndex - 1; 0 < i; --i) {\\n+      PRUnichar ch = GetCharAt(i);\\n+      if (!IS_HYPHEN(ch))\\n+        return ch;\\n+      if (i == 0)\\n+        break;\\n+    }\\n+    return U_NULL;\\n+  }\\n+\\n+private:\\n+  void Init() {\\n+    mIndex = 0;\\n+    mLastBreakIndex = 0;\\n+    mHasCJKChar = 0;\\n+    mHasNonbreakableSpace = 0;\\n+\\n+    for (PRUint32 i = 0; i < mLength; ++i) {\\n+      PRUnichar u = GetCharAt(i);\\n+      if (!mHasNonbreakableSpace && IS_NONBREAKABLE_SPACE(u))\\n+        mHasNonbreakableSpace = 1;\\n+      else if (mUniText && !mHasCJKChar && IS_CJK_CHAR(u))\\n+        mHasCJKChar = 1;\\n+    }\\n+  }\\n \\n-static PRInt8 ContextualAnalysis(\\n-  PRUnichar prev, PRUnichar cur, PRUnichar next)\\n+  const PRUnichar* mUniText;\\n+  const PRUint8* mText;\\n+\\n+  PRUint32 mIndex;\\n+  PRUint32 mLength;         // length of text\\n+  PRUint32 mLastBreakIndex;\\n+  PRPackedBool mHasCJKChar; // if the text has CJK character, this is true.\\n+  PRPackedBool mHasNonbreakableSpace; // if the text has no-breakable space,\\n+                                     // this is true.\\n+};\\n+\\n+static PRInt8\\n+ContextualAnalysis(PRUnichar prev, PRUnichar cur, PRUnichar next,\\n+                   ContextState &aState)\\n {\\n-   if(U_COMMA == cur || U_SEMICOLON == cur)\\n-   {\\n-     if((IS_ASCII_DIGIT(prev) || prev == U_NULL) && IS_ASCII_DIGIT(next))\\n-       return NUMERIC_CLASS;\\n-   }\\n-   else if(U_PERIOD == cur)\\n-   {\\n-     if((IS_ASCII_DIGIT(prev) || prev == U_SPACE || prev == U_NULL) &&\\n-         IS_ASCII_DIGIT(next))\\n-       return NUMERIC_CLASS;\\n-\\n-     // By assigning a full stop  character class only when it's followed by\\n-     // class 6 (numeric), 7, and 8 (character). Note that class 9 (Thai) \\n-     // doesn't matter, either way, we prevent lines from breaking around \\n-     // full stop in those cases while  still allowing it to end a line when \\n-     // followed by CJK  characters. With an additional condition of it being \\n-     // preceded by  class 0 or class > 5, we make sure that it does not \\n-     // start a line  (see bug 164759). \\n-     PRUint8 pc = prev != U_NULL ? GetClass(prev) : CHARACTER_CLASS;\\n-     if((pc > 5 || pc == 0)  && GetClass(next) > 5)\\n-       return CHARACTER_CLASS;\\n-   }\\n-   else if(U_SLASH == cur || U_HYPHEN == cur || U_EQUAL == cur)\\n-   {\\n-     // if slash is a first character, don't break at this point (e.g., \\\"/root\\\")\\n-     if (U_SLASH == cur && prev == U_NULL)\\n-       return CHARACTER_CLASS;\\n-     if (IS_ASCII_DIGIT(next))\\n-       return NUMERIC_CLASS;\\n-   }\\n-   else if(U_RIGHT_SINGLE_QUOTATION_MARK == cur)\\n-   {\\n-     // somehow people use this as ' in \\\"it's\\\" sometimes...\\n-     if(U_SPACE != next)\\n-       return CHARACTER_CLASS;\\n-   }\\n-   return GetClass(cur);\\n+  // Don't return CLASS_OPEN/CLASS_CLOSE if aState.UseJISX4051 is FALSE.\\n+\\n+  if (IS_HYPHEN(cur)) {\\n+    // If next character is hyphen, we don't need to break between them.\\n+    if (IS_HYPHEN(next))\\n+      return CLASS_CHARACTER;\\n+    // If prev and next characters are numeric, it may be in Math context.\\n+    // So, we should not break here.\\n+    PRBool prevIsNum = IS_ASCII_DIGIT(prev);\\n+    PRBool nextIsNum = IS_ASCII_DIGIT(next);\\n+    if (prevIsNum && nextIsNum)\\n+      return CLASS_NUMERIC;\\n+    // If one side is numeric and the other is a character, or if both sides are\\n+    // characters, the hyphen should be breakable.\\n+    if (!aState.UseConservativeBreaking(1)) {\\n+      PRUnichar prevOfHyphen = aState.GetPreviousNonHyphenCharacter();\\n+      if (prevOfHyphen && next) {\\n+        PRBool prevIsChar = !NEED_CONTEXTUAL_ANALYSIS(prevOfHyphen) &&\\n+                            GetClass(prevOfHyphen) == CLASS_CHARACTER;\\n+        PRBool nextIsChar = !NEED_CONTEXTUAL_ANALYSIS(next) &&\\n+                            GetClass(next) == CLASS_CHARACTER;\\n+        if ((prevIsNum || prevIsChar) && (nextIsNum || nextIsChar))\\n+          return CLASS_CLOSE;\\n+      }\\n+    }\\n+  } else if (cur == U_SLASH || cur == U_BACKSLASH) {\\n+    // If this is immediately after same char, we should not break here.\\n+    if (prev == cur)\\n+      return CLASS_CHARACTER;\\n+    // If this text has two or more (BACK)SLASHs, this may be file path or URL.\\n+    if (!aState.UseConservativeBreaking() &&\\n+        aState.HasCharacterAlready(cur))\\n+      return CLASS_OPEN;\\n+  } else if (cur == U_PERCENT) {\\n+    // If this is a part of the param of URL, we should break before.\\n+    if (!aState.UseConservativeBreaking()) {\\n+      if (aState.Index() >= 3 &&\\n+          aState.GetCharAt(aState.Index() - 3) == U_PERCENT)\\n+        return CLASS_OPEN;\\n+      if (aState.Index() + 3 < aState.Length() &&\\n+          aState.GetCharAt(aState.Index() + 3) == U_PERCENT)\\n+        return CLASS_OPEN;\\n+    }\\n+  } else if (cur == U_AMPERSAND) {\\n+    // If this may be a separator of params of URL, we should break after.\\n+    if (!aState.UseConservativeBreaking(1) &&\\n+        aState.HasCharacterAlready(U_EQUAL))\\n+      return CLASS_CLOSE;\\n+  } else {\\n+    NS_ERROR(\\\"Forgot to handle the current character!\\\");\\n+  }\\n+  return GetClass(cur);\\n }\\n \\n \\n-PRInt32 nsJISx4051LineBreaker::WordMove(\\n-  const PRUnichar* aText, PRUint32 aLen, PRUint32 aPos, PRInt8 aDirection)\\n+PRInt32\\n+nsJISx4051LineBreaker::WordMove(const PRUnichar* aText, PRUint32 aLen,\\n+                                PRUint32 aPos, PRInt8 aDirection)\\n {\\n   PRBool  textNeedsJISx4051 = PR_FALSE;\\n   PRInt32 begin, end;\\n \\n-  for (begin = aPos; begin > 0 && !IS_SPACE(aText[begin - 1]); --begin) {\\n+  for (begin = aPos; begin > 0 && !NS_IsSpace(aText[begin - 1]); --begin) {\\n     if (IS_CJK_CHAR(aText[begin]) || IS_COMPLEX(aText[begin])) {\\n       textNeedsJISx4051 = PR_TRUE;\\n     }\\n   }\\n-  for (end = aPos + 1; end < PRInt32(aLen) && !IS_SPACE(aText[end]); ++end) {\\n+  for (end = aPos + 1; end < PRInt32(aLen) && !NS_IsSpace(aText[end]); ++end) {\\n     if (IS_CJK_CHAR(aText[end]) || IS_COMPLEX(aText[end])) {\\n       textNeedsJISx4051 = PR_TRUE;\\n     }\\n@@ -458,8 +778,9 @@ PRInt32 nsJISx4051LineBreaker::WordMove(\\n   return ret;\\n }\\n \\n-PRInt32 nsJISx4051LineBreaker::Next(\\n-  const PRUnichar* aText, PRUint32 aLen, PRUint32 aPos) \\n+PRInt32\\n+nsJISx4051LineBreaker::Next(const PRUnichar* aText, PRUint32 aLen,\\n+                            PRUint32 aPos) \\n {\\n   NS_ASSERTION(aText, \\\"aText shouldn't be null\\\");\\n   NS_ASSERTION(aLen > aPos, \\\"Illegal value (length > position)\\\");\\n@@ -468,8 +789,9 @@ PRInt32 nsJISx4051LineBreaker::Next(\\n   return nextPos < PRInt32(aLen) ? nextPos : NS_LINEBREAKER_NEED_MORE_TEXT;\\n }\\n \\n-PRInt32 nsJISx4051LineBreaker::Prev( \\n-  const PRUnichar* aText, PRUint32 aLen, PRUint32 aPos) \\n+PRInt32\\n+nsJISx4051LineBreaker::Prev(const PRUnichar* aText, PRUint32 aLen,\\n+                            PRUint32 aPos) \\n {\\n   NS_ASSERTION(aText, \\\"aText shouldn't be null\\\");\\n   NS_ASSERTION(aLen >= aPos, \\\"Illegal value (length >= position)\\\");\\n@@ -483,16 +805,19 @@ nsJISx4051LineBreaker::GetJISx4051Breaks(const PRUnichar* aChars, PRUint32 aLeng\\n                                          PRPackedBool* aBreakBefore)\\n {\\n   PRUint32 cur;\\n-  PRInt8 lastClass = -1;\\n+  PRInt8 lastClass = CLASS_NONE;\\n+  ContextState state(aChars, aLength);\\n \\n   for (cur = 0; cur < aLength; ++cur) {\\n     PRUnichar ch = aChars[cur];\\n     PRInt8 cl;\\n+    state.AdvanceIndexTo(cur);\\n \\n     if (NEED_CONTEXTUAL_ANALYSIS(ch)) {\\n       cl = ContextualAnalysis(cur > 0 ? aChars[cur - 1] : U_NULL,\\n                               ch,\\n-                              cur + 1 < aLength ? aChars[cur + 1] : U_NULL);\\n+                              cur + 1 < aLength ? aChars[cur + 1] : U_NULL,\\n+                              state);\\n     } else {\\n       cl = GetClass(ch);\\n     }\\n@@ -501,11 +826,16 @@ nsJISx4051LineBreaker::GetJISx4051Breaks(const PRUnichar* aChars, PRUint32 aLeng\\n     if (cur > 0) {\\n       NS_ASSERTION(CLASS_COMPLEX != lastClass || CLASS_COMPLEX != cl,\\n                    \\\"Loop should have prevented adjacent complex chars here\\\");\\n-      allowBreak = GetPair(lastClass, cl);\\n+      if (state.UseConservativeBreaking())\\n+        allowBreak = GetPairConservative(lastClass, cl);\\n+      else\\n+        allowBreak = GetPair(lastClass, cl);\\n     } else {\\n       allowBreak = PR_FALSE;\\n     }\\n     aBreakBefore[cur] = allowBreak;\\n+    if (allowBreak)\\n+      state.NotifyBreakBefore();\\n     lastClass = cl;\\n     if (CLASS_COMPLEX == cl) {\\n       PRUint32 end = cur + 1;\\n@@ -530,27 +860,35 @@ nsJISx4051LineBreaker::GetJISx4051Breaks(const PRUint8* aChars, PRUint32 aLength\\n                                          PRPackedBool* aBreakBefore)\\n {\\n   PRUint32 cur;\\n-  PRInt8 lastClass = -1;\\n+  PRInt8 lastClass = CLASS_NONE;\\n+  ContextState state(aChars, aLength);\\n \\n   for (cur = 0; cur < aLength; ++cur) {\\n     PRUnichar ch = aChars[cur];\\n     PRInt8 cl;\\n+    state.AdvanceIndexTo(cur);\\n \\n     if (NEED_CONTEXTUAL_ANALYSIS(ch)) {\\n       cl = ContextualAnalysis(cur > 0 ? aChars[cur - 1] : U_NULL,\\n                               ch,\\n-                              cur + 1 < aLength ? aChars[cur + 1] : U_NULL);\\n+                              cur + 1 < aLength ? aChars[cur + 1] : U_NULL,\\n+                              state);\\n     } else {\\n       cl = GetClass(ch);\\n     }\\n \\n     PRBool allowBreak;\\n     if (cur > 0) {\\n-      allowBreak = GetPair(lastClass, cl);\\n+      if (state.UseConservativeBreaking())\\n+        allowBreak = GetPairConservative(lastClass, cl);\\n+      else\\n+        allowBreak = GetPair(lastClass, cl);\\n     } else {\\n       allowBreak = PR_FALSE;\\n     }\\n     aBreakBefore[cur] = allowBreak;\\n+    if (allowBreak)\\n+      state.NotifyBreakBefore();\\n     lastClass = cl;\\n   }\\n }\\ndiff --git a/intl/lwbrk/tools/anzx4501.html b/intl/lwbrk/tools/anzx4501.html\\nindex 85b0e76..44da8ee 100644\\n--- a/intl/lwbrk/tools/anzx4501.html\\n+++ b/intl/lwbrk/tools/anzx4501.html\\n@@ -53,11 +53,10 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>14</TD>\\n-<TD>3</TD>\\n-<TD></TD>\\n-<TD BGCOLOR=white>17</TD>\\n+<TD>12</TD>\\n+<TD>1</TD>\\n <TD></TD>\\n+<TD BGCOLOR=white>13</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -78,24 +77,25 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD>1</TD>\\n-<TD>13</TD>\\n-<TD>2</TD>\\n <TD></TD>\\n+<TD>11</TD>\\n <TD>1</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD></TD>\\n+<TD></TD>\\n </TR>\\n <TR><TH>01_[a]<TH>\\n <TD></TD>\\n <TD>31</TD>\\n <TD>2</TD>\\n <TD></TD>\\n-<TD>32</TD>\\n-<TD>6</TD>\\n+<TD>28</TD>\\n+<TD>3</TD>\\n <TD></TD>\\n-<TD BGCOLOR=white>71</TD>\\n+<TD BGCOLOR=white>64</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -112,29 +112,29 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>2</TD>\\n-<TD>14</TD>\\n-<TD></TD>\\n+<TD>4</TD>\\n+<TD>12</TD>\\n+<TD>1</TD>\\n <TD></TD>\\n-<TD>16</TD>\\n+<TD>11</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD>2</TD>\\n-<TD>3</TD>\\n <TD>1</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD></TD>\\n </TR>\\n <TR><TH>02_7<TH>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>1</TD>\\n+<TD>4</TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD BGCOLOR=white>1</TD>\\n+<TD BGCOLOR=white>4</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -155,7 +155,7 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD></TD>\\n+<TD>3</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -171,9 +171,10 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>3</TD>\\n+<TD>1</TD>\\n+<TD></TD>\\n+<TD BGCOLOR=white>1</TD>\\n <TD></TD>\\n-<TD BGCOLOR=white>3</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -196,7 +197,6 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>2</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD>1</TD>\\n@@ -209,8 +209,8 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>4</TD>\\n-<TD>1</TD>\\n+<TD>5</TD>\\n+<TD></TD>\\n <TD></TD>\\n <TD BGCOLOR=white>5</TD>\\n <TD></TD>\\n@@ -233,9 +233,9 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>4</TD>\\n+<TD>5</TD>\\n+<TD></TD>\\n <TD></TD>\\n-<TD>1</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -245,20 +245,20 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n </TR>\\n <TR><TH>05_[b]<TH>\\n <TD>33</TD>\\n-<TD>154</TD>\\n+<TD>153</TD>\\n <TD></TD>\\n-<TD>53</TD>\\n+<TD>33</TD>\\n <TD>2</TD>\\n-<TD>305</TD>\\n-<TD>13</TD>\\n-<TD BGCOLOR=white>560</TD>\\n+<TD>5</TD>\\n+<TD>12</TD>\\n+<TD BGCOLOR=white>238</TD>\\n <TD>32</TD>\\n <TD>1</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>154</TD>\\n+<TD>153</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -266,7 +266,7 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD>33</TD>\\n-<TD>20</TD>\\n+<TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -277,10 +277,10 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>305</TD>\\n+<TD>5</TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>13</TD>\\n+<TD>12</TD>\\n </TR>\\n <TR><TH>06_15<TH>\\n <TD></TD>\\n@@ -321,85 +321,46 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n </TR>\\n-<TR><TH>07_16<TH>\\n-<TD></TD>\\n-<TD>1</TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD BGCOLOR=white>1</TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD>1</TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n+<TR><TH>07_18<TH>\\n+<TD>19</TD>\\n+<TD>157</TD>\\n <TD></TD>\\n+<TD>33</TD>\\n+<TD>54</TD>\\n+<TD>125</TD>\\n+<TD>3</TD>\\n+<TD BGCOLOR=white>391</TD>\\n <TD></TD>\\n+<TD>19</TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>67</TD>\\n+<TD>5</TD>\\n+<TD>4</TD>\\n <TD></TD>\\n+<TD>81</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>08_18<TH>\\n-<TD>10</TD>\\n-<TD>659</TD>\\n+<TD>3</TD>\\n+<TD>30</TD>\\n <TD>4</TD>\\n-<TD>130</TD>\\n-<TD>56</TD>\\n-<TD>941</TD>\\n <TD>2</TD>\\n-<TD BGCOLOR=white>1802</TD>\\n-<TD></TD>\\n-<TD>10</TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD>368</TD>\\n-<TD>1</TD>\\n+<TD>2</TD>\\n+<TD>2</TD>\\n <TD>4</TD>\\n-<TD></TD>\\n-<TD>286</TD>\\n-<TD></TD>\\n-<TD></TD>\\n+<TD>36</TD>\\n <TD>4</TD>\\n <TD></TD>\\n <TD>3</TD>\\n-<TD>127</TD>\\n-<TD>3</TD>\\n-<TD>5</TD>\\n-<TD>3</TD>\\n-<TD>4</TD>\\n-<TD>6</TD>\\n-<TD>30</TD>\\n-<TD>5</TD>\\n-<TD>12</TD>\\n-<TD>10</TD>\\n-<TD>273</TD>\\n-<TD>646</TD>\\n+<TD>23</TD>\\n+<TD>99</TD>\\n+<TD>1</TD>\\n <TD>1</TD>\\n <TD>1</TD>\\n-<TD></TD>\\n </TR>\\n-<TR><TH>09_COMPLEX<TH>\\n+<TR><TH>08_COMPLEX<TH>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -438,18 +399,15 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n </TR>\\n-<TR><TH>X<TH>\\n+<TR><TH>09_[c]<TH>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>3</TD>\\n+<TD>4</TD>\\n <TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD BGCOLOR=white>0</TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n+<TD BGCOLOR=white>7</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -471,80 +429,69 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>3</TD>\\n+<TD>2</TD>\\n <TD></TD>\\n+<TD>2</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n </TR>\\n-</TABLE>\\n-<TABLE BORDER=3>\\n-<TR BGCOLOR=blue><TH><TH>\\n-<TD BGCOLOR=red>00_1</TD>\\n-<TD BGCOLOR=red>01_[a]</TD>\\n-<TD BGCOLOR=red>02_7</TD>\\n-<TD BGCOLOR=red>03_8</TD>\\n-<TD BGCOLOR=red>04_9</TD>\\n-<TD BGCOLOR=red>05_[b]</TD>\\n-<TD BGCOLOR=red>06_15</TD>\\n-<TD BGCOLOR=red>07_16</TD>\\n-<TD BGCOLOR=red>08_18</TD>\\n-<TD BGCOLOR=red>09_COMPLEX</TD>\\n-<TD BGCOLOR=red>X</TD>\\n-</TR>\\n-<TR><TH>00<TH>\\n-<TD>6</TD>\\n-<TD>14</TD>\\n-<TD></TD>\\n-<TD>2</TD>\\n+<TR><TH>0A_[d]<TH>\\n <TD>1</TD>\\n-<TD>33</TD>\\n-<TD>10</TD>\\n-<TD></TD>\\n-<TD>156</TD>\\n-<TD></TD>\\n+<TD>2</TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>01<TH>\\n+<TD>6</TD>\\n+<TD>21</TD>\\n+<TD>16</TD>\\n <TD></TD>\\n+<TD BGCOLOR=white>46</TD>\\n <TD></TD>\\n+<TD>1</TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>2</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>128</TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>02<TH>\\n-<TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>6</TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>3</TD>\\n+<TD>1</TD>\\n+<TD>1</TD>\\n+<TD>16</TD>\\n <TD></TD>\\n+<TD>2</TD>\\n+<TD>3</TD>\\n+<TD>7</TD>\\n+<TD>4</TD>\\n <TD></TD>\\n-<TD>89</TD>\\n <TD></TD>\\n <TD></TD>\\n </TR>\\n-<TR><TH>03<TH>\\n+<TR><TH>0B_[e]<TH>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>1</TD>\\n+<TD>1</TD>\\n+<TD>3</TD>\\n+<TD BGCOLOR=white>5</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>76</TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>04<TH>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -553,51 +500,31 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>226</TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>0E<TH>\\n <TD>1</TD>\\n-<TD>6</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>20</TD>\\n <TD></TD>\\n <TD>1</TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>20<TH>\\n <TD></TD>\\n-<TD>5</TD>\\n-<TD>1</TD>\\n-<TD></TD>\\n-<TD>4</TD>\\n-<TD>13</TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD>86</TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>3</TD>\\n </TR>\\n-<TR><TH>21<TH>\\n-<TD></TD>\\n+<TR><TH>X<TH>\\n <TD></TD>\\n <TD></TD>\\n-<TD>1</TD>\\n <TD></TD>\\n-<TD>32</TD>\\n <TD></TD>\\n-<TD>1</TD>\\n-<TD>162</TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>22<TH>\\n <TD></TD>\\n+<TD BGCOLOR=white>0</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -605,11 +532,8 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>242</TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>23<TH>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -618,11 +542,8 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>1</TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>24<TH>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n@@ -631,46 +552,83 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>139</TD>\\n <TD></TD>\\n <TD></TD>\\n </TR>\\n-<TR><TH>25<TH>\\n+</TABLE>\\n+<TABLE BORDER=3>\\n+<TR BGCOLOR=blue><TH><TH>\\n+<TD BGCOLOR=red>00_1</TD>\\n+<TD BGCOLOR=red>01_[a]</TD>\\n+<TD BGCOLOR=red>02_7</TD>\\n+<TD BGCOLOR=red>03_8</TD>\\n+<TD BGCOLOR=red>04_9</TD>\\n+<TD BGCOLOR=red>05_[b]</TD>\\n+<TD BGCOLOR=red>06_15</TD>\\n+<TD BGCOLOR=red>07_18</TD>\\n+<TD BGCOLOR=red>08_COMPLEX</TD>\\n+<TD BGCOLOR=red>09_[c]</TD>\\n+<TD BGCOLOR=red>0A_[d]</TD>\\n+<TD BGCOLOR=red>0B_[e]</TD>\\n+<TD BGCOLOR=red>X</TD>\\n+</TR>\\n+<TR><TH>00<TH>\\n <TD></TD>\\n+<TD>1</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>33</TD>\\n+<TD>10</TD>\\n+<TD>126</TD>\\n <TD></TD>\\n+<TD>7</TD>\\n+<TD>44</TD>\\n+<TD>2</TD>\\n <TD></TD>\\n+</TR>\\n+<TR><TH>0E<TH>\\n+<TD>1</TD>\\n+<TD>6</TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>230</TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>26<TH>\\n+<TD>20</TD>\\n+<TD>1</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n+</TR>\\n+<TR><TH>20<TH>\\n+<TD>2</TD>\\n+<TD>11</TD>\\n+<TD>4</TD>\\n <TD></TD>\\n+<TD>5</TD>\\n+<TD>12</TD>\\n <TD></TD>\\n+<TD>101</TD>\\n <TD></TD>\\n-<TD>106</TD>\\n <TD></TD>\\n+<TD>2</TD>\\n+<TD>3</TD>\\n <TD></TD>\\n </TR>\\n-<TR><TH>27<TH>\\n+<TR><TH>21<TH>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n+<TD>1</TD>\\n <TD></TD>\\n+<TD>32</TD>\\n <TD></TD>\\n+<TD>163</TD>\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-<TD>160</TD>\\n <TD></TD>\\n <TD></TD>\\n </TR>\\n@@ -686,43 +644,6 @@ Analysis of JIS X 4051 to Unicode General Category Mapping\\n <TD></TD>\\n <TD></TD>\\n <TD></TD>\\n-</TR>\\n-<TR><TH>32<TH>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD>132</TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-</TR>\\n-<TR><TH>33<TH>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD>188</TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-</TR>\\n-<TR><TH>4E<TH>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD>256</TD>\\n-<TD></TD>\\n-<TD></TD>\\n-<TD></TD>\\n <TD></TD>\\n <TD></TD>\\n </TR>\\ndiff --git a/intl/lwbrk/tools/anzx4501.pl b/intl/lwbrk/tools/anzx4501.pl\\nindex 92a25f0..fa4d034 100644\\n--- a/intl/lwbrk/tools/anzx4501.pl\\n+++ b/intl/lwbrk/tools/anzx4501.pl\\n@@ -396,11 +396,11 @@ printf \\\"[%s || %s]\\\\n\\\", $r, $def;\\n    }\\n    print HEADER \\\"};\\\\n\\\\n\\\";\\n }\\n-printarray(\\\"00\\\", \\\"8\\\");\\n-printarray(\\\"20\\\", \\\"8\\\");\\n-printarray(\\\"21\\\", \\\"8\\\");\\n+printarray(\\\"00\\\", \\\"7\\\");\\n+printarray(\\\"20\\\", \\\"7\\\");\\n+printarray(\\\"21\\\", \\\"7\\\");\\n printarray(\\\"30\\\", \\\"5\\\");\\n-printarray(\\\"0E\\\", \\\"9\\\");\\n+printarray(\\\"0E\\\", \\\"8\\\");\\n \\n #print %rangecount;\\n \\ndiff --git a/intl/lwbrk/tools/jisx4501class.txt b/intl/lwbrk/tools/jisx4501class.txt\\nindex 9a60950..81e1c29 100644\\n--- a/intl/lwbrk/tools/jisx4501class.txt\\n+++ b/intl/lwbrk/tools/jisx4501class.txt\\n@@ -1,7 +1,85 @@\\n-0028;;1\\n-002F;;2\\n-005B;;1\\n-007B;;1\\n+0000;001f;17\\n+0020;;17\\n+0024;;24\\n+0027;;18\\n+0028;;22\\n+002D;;18\\n+002F;;18\\n+0021;002F;23\\n+0030;0039;15\\n+003C;;22\\n+003F;;4\\n+003A;003F;23\\n+0040;;18\\n+0041;005A;18\\n+005B;;22\\n+005E;;18\\n+005F;;18\\n+005B;005F;23\\n+0060;;18\\n+0061;007A;18\\n+007B;;22\\n+007B;007E;23\\n+00A0;;24\\n+00A3;;22\\n+00A5;;22\\n+00A9;;18\\n+00AA;;18\\n+00AC;;22\\n+00AE;;18\\n+00AF;;18\\n+00A1;00BF;23\\n+00B0;;18\\n+00F7;;23\\n+00C0;00FF;18\\n+0E3F;;1\\n+0E2F;;4\\n+0E46;;4\\n+0E5A;0E5B;4\\n+0E50;0E59;15\\n+0E4F;;18\\n+0EAF;;4\\n+0EC6;;4\\n+0ED0;0ED9;15\\n+2007;;24\\n+2000;200B;17\\n+200C;200F;18\\n+2010;;2\\n+2011;;24\\n+2012;2013;2\\n+2014;;7\\n+2015;;18\\n+2016;2017;18\\n+2018;201F;18\\n+2020;2023;18\\n+2024;2026;7\\n+2027;;23\\n+2028;202E;18\\n+202F;;24\\n+2030;2034;9\\n+2035;2038;18\\n+2039;;1\\n+203A;;2\\n+203B;;12\\n+203C;203D;3\\n+203E;;23\\n+203F;2043;18\\n+2044;;3\\n+2045;;1\\n+2046;;2\\n+2047;2049;3\\n+204A;2063;18\\n+206A;206F;18\\n+2070;2071;18\\n+2074;208E;18\\n+2090;2094;18\\n+2116;;8\\n+2160;217F;12\\n+2190;21EA;a12\\n+2126;;18\\n+2100;2138;18\\n+2153;2182;18\\n+2190;21EA;18\\n 3008;;1\\n 300A;;1\\n 300C;;1\\n@@ -12,10 +90,6 @@\\n 3018;;1\\n 301A;;1\\n 301D;;1\\n-0029;;2\\n-002C;;2\\n-005D;;2\\n-007D;;2\\n 3001;;2\\n 3009;;2\\n 300B;;2\\n@@ -28,8 +102,6 @@\\n 301B;;2\\n 301E;;2\\n 301F;;2\\n-203C;;3\\n-2044;;3\\n 301C;;3\\n 3041;;3\\n 3043;;3\\n@@ -58,65 +130,11 @@\\n 30FC;;3\\n 30FD;;3\\n 30FE;;3\\n-0021;;4\\n-003F;;4\\n-003A;;18\\n-003B;;5\\n 30FB;;5\\n-002E;;6\\n 3002;;6\\n-2014;;7\\n-2024;;2\\n-2025;;2\\n-2026;;2\\n-0024;;1\\n-005C;;1\\n-00A3;;8\\n-00A5;;8\\n-2116;;8\\n-0025;;2\\n-00A2;;9\\n-00B0;;2\\n-2030;;9\\n-2031;;9\\n-2032;;9\\n-2033;;9\\n 3000;;10\\n 3042;3094;11\\n 3099;309E;3\\n-002B;;18\\n-002D;;2\\n-003C;;1\\n-003D;;2\\n-003E;;2\\n-00A7;;18\\n-00A9;;18\\n-00AE;;18\\n-00B1;;18\\n-00B6;;18\\n-00D7;;18\\n-00F7;;18\\n-203B;;12\\n-2160;217F;12\\n-2190;21EA;a12\\n-2460;24EA;a12\\n-2500;257F;a12\\n-2580;2595;a12\\n-25A0;25EF;a12\\n-2600;2613;a12\\n-261A;266F;a12\\n-2701;2704;a12\\n-2706;2709;a12\\n-270C;2727;a12\\n-2729;274B;a12\\n-274D;;a12\\n-274F;2752;a12\\n-2756;;a12\\n-2758;275E;a12\\n-2761;2767;a12\\n-2776;2794;a12\\n-2798;27AF;a12\\n-27B1;27BE;a12\\n 3003;;12\\n 3004;;12\\n 3006;;12\\n@@ -126,76 +144,3 @@\\n 3020;;12\\n 3036;;12\\n 30A2;30FA;12\\n-3220;3243;12\\n-3280;32B0;12\\n-32D0;32FE;12\\n-3300;3357;12\\n-3371;3376;12\\n-3380;33DD;12\\n-4E00;9F45;12\\n-0030;0039;15\\n-2126;;16\\n-0020;;17\\n-0000;001f;17\\n-0021;007E;18\\n-00A1;00FF;18\\n-0100;017F;18\\n-0250;02A8;18\\n-0374;0375;18\\n-037A;;18\\n-037E;;18\\n-0384;038A;18\\n-038C;;18\\n-038E;03A1;18\\n-03A3;03CE;18\\n-0401;040C;18\\n-040E;044F;18\\n-0451;045C;18\\n-045E;047F;18\\n-0480;0486;18\\n-0480;0486;18\\n-0490;04C4;18\\n-04C7;04C8;18\\n-04CB;04CC;18\\n-04D0;04EB;18\\n-04EE;04F5;18\\n-04F8;04F9;18\\n-2000;200B;17\\n-200C;202E;18\\n-2030;2046;18\\n-2070;;18\\n-2074;208E;18\\n-20A0;20AA;18\\n-2100;2138;18\\n-2153;2182;18\\n-2190;21EA;18\\n-2200;227F;18\\n-2280;22F1;18\\n-2312;;18\\n-2460;24EA;18\\n-2500;257F;18\\n-2580;2595;18\\n-25A0;25EF;18\\n-2600;2613;18\\n-261A;266F;18\\n-2701;2704;18\\n-2706;2709;18\\n-270C;2727;18\\n-2729;274B;18\\n-274D;;18\\n-274F;2752;18\\n-2756;;18\\n-2758;275E;18\\n-2761;2767;18\\n-2776;2794;18\\n-2798;27AF;18\\n-27B1;27BE;18\\n-0E3F;;1\\n-0E2F;;4\\n-0E46;;4\\n-0E5A;0E5B;4\\n-0E50;0E59;15\\n-0E4F;;18\\n-0EAF;;4\\n-0EC6;;4\\n-0ED0;0ED9;15\\ndiff --git a/intl/lwbrk/tools/jisx4501simp.txt b/intl/lwbrk/tools/jisx4501simp.txt\\nindex 294f0e6..e12a7fd 100644\\n--- a/intl/lwbrk/tools/jisx4501simp.txt\\n+++ b/intl/lwbrk/tools/jisx4501simp.txt\\n@@ -13,9 +13,12 @@\\n 13;X\\n 14;X\\n 15;06_15\\n-16;07_16\\n+16;X\\n 17;05_[b]\\n-18;08_18\\n+18;07_18\\n 19;X\\n 20;X\\n-21;09_COMPLEX\\n+21;08_COMPLEX\\n+22;09_[c]\\n+23;0A_[d]\\n+24;0B_[e]\\ndiff --git a/intl/lwbrk/tools/spec_table.html b/intl/lwbrk/tools/spec_table.html\\nindex 03260b2..3a05d8b 100755\\n--- a/intl/lwbrk/tools/spec_table.html\\n+++ b/intl/lwbrk/tools/spec_table.html\\n@@ -21,99 +21,102 @@ td {\\n </head>\\n <body>\\n <p>This is a specification table for line breaking.</p>\\n-<p>The value 'A' means the line breakable After the character, and 'B' means Before. 'BA' means Before and After.</p>\\n-<p>(C) which is the tail of the browser name means Character. (N) means Numeric.\\n-This means that they are around the character. E.g., \\\"a$a\\\" is a testcase for (C), \\\"0$0\\\" is a testcase for (N).</p>\\n+<p>The values of IE7 and Opera9: 'A' means that the line is breakable After the character, and 'B' means Before. 'BA' means Before and After.</p>\\n+<p>(C) which is the tail of the IE7 and the Opera9 means Character. (N) means Numeric.\\n+This means that they are around the character at testing. E.g., \\\"a$a\\\" is a testcase for (C), \\\"0$0\\\" is a testcase for (N).</p>\\n+<p>Gecko is not breaking the lines on most western language context. But for file paths, URLs and very long word which is connected hyphens,\\n+some characters might be breakable. They are 'breakable' in the table. However, they are not always breakable,\\n+they <em>depend on the context</em> in the word.</p>\\n <table border=\\\"1\\\">\\n <thead>\\n-<tr><th colspan=\\\"2\\\">character</th><th>Gecko(C)</th><th>Gecko(N)</th><th>IE7(C)</th><th>IE7(N)</th><th>Opera9.2(C)</th><th>Opera9.2(N)</th></tr>\\n+<tr><th colspan=\\\"2\\\">character</th><th>Gecko</th><th>IE7(C)</th><th>IE7(N)</th><th>Opera9.2(C)</th><th>Opera9.2(N)</th></tr>\\n </thead>\\n <tfoot>\\n-<tr><th colspan=\\\"2\\\">character</th><th>Gecko(C)</th><th>Gecko(N)</th><th>IE7(C)</th><th>IE7(N)</th><th>Opera9.2(C)</th><th>Opera9.2(N)</th></tr>\\n+<tr><th colspan=\\\"2\\\">character</th><th>Gecko</th><th>IE7(C)</th><th>IE7(N)</th><th>Opera9.2(C)</th><th>Opera9.2(N)</th></tr>\\n </tfoot>\\n <tbody>\\n-<tr><th>0x21</th><th>&#x21;</th><td>A</td><td>A</td><td>A</td><td>A</td><td></td><td></td></tr>\\n-<tr><th>0x22</th><th>&#x22;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x23</th><th>&#x23;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x24</th><th>&#x24;</th><td>B</td><td>B</td><td></td><td>B</td><td></td><td></td></tr>\\n-<tr><th>0x25</th><th>&#x25;</th><td>A</td><td>A</td><td>A</td><td>A</td><td></td><td></td></tr>\\n-<tr><th>0x26</th><th>&#x26;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x27</th><th>&#x27;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x28</th><th>&#x28;</th><td>B</td><td>B</td><td>B</td><td>B</td><td></td><td></td></tr>\\n-<tr><th>0x29</th><th>&#x29;</th><td>A</td><td>A</td><td>A</td><td>A</td><td></td><td></td></tr>\\n-<tr><th>0x2A</th><th>&#x2A;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x2B</th><th>&#x2B;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x2C</th><th>&#x2C;</th><td>A</td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x2D</th><th>&#x2D;</th><td>A</td><td></td><td>BA</td><td>BA</td><td>A</td><td>A</td></tr>\\n-<tr><th>0x2E</th><th>&#x2E;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x2F</th><th>&#x2F;</th><td>A</td><td></td><td></td><td></td><td>A</td><td>A</td></tr>\\n+<tr><th>0x21</th><th>&#x21;</th><td></td><td>A</td><td>A</td><td></td><td></td></tr>\\n+<tr><th>0x22</th><th>&#x22;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x23</th><th>&#x23;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x24</th><th>&#x24;</th><td></td><td></td><td>B</td><td></td><td></td></tr>\\n+<tr><th>0x25</th><th>&#x25;</th><td>breakable</td><td>A</td><td>A</td><td></td><td></td></tr>\\n+<tr><th>0x26</th><th>&#x26;</th><td>breakable</td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x27</th><th>&#x27;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x28</th><th>&#x28;</th><td></td><td>B</td><td>B</td><td></td><td></td></tr>\\n+<tr><th>0x29</th><th>&#x29;</th><td></td><td>A</td><td>A</td><td></td><td></td></tr>\\n+<tr><th>0x2A</th><th>&#x2A;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x2B</th><th>&#x2B;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x2C</th><th>&#x2C;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x2D</th><th>&#x2D;</th><td>breakable</td><td>BA</td><td>BA</td><td>A</td><td>A</td></tr>\\n+<tr><th>0x2E</th><th>&#x2E;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x2F</th><th>&#x2F;</th><td>breakable</td><td></td><td></td><td>A</td><td>A</td></tr>\\n </tbody>\\n <tbody>\\n-<tr><th>0x3A</th><th>&#x3A;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x3B</th><th>&#x3B;</th><td>A</td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x3C</th><th>&#x3C;</th><td>B</td><td>B</td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x3D</th><th>&#x3D;</th><td>A</td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x3E</th><th>&#x3E;</th><td>A</td><td>A</td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x3F</th><th>&#x3F;</th><td>A</td><td>A</td><td>A</td><td>A</td><td></td><td></td></tr>\\n+<tr><th>0x3A</th><th>&#x3A;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x3B</th><th>&#x3B;</th><td>breakable</td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x3C</th><th>&#x3C;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x3D</th><th>&#x3D;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x3E</th><th>&#x3E;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x3F</th><th>&#x3F;</th><td></td><td>A</td><td>A</td><td></td><td></td></tr>\\n </tbody>\\n <tbody>\\n-<tr><th>0x40</th><th>&#x40;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x40</th><th>&#x40;</th><td></td><td></td><td></td><td></td></tr>\\n </tbody>\\n <tbody>\\n-<tr><th>0x5B</th><th>&#x5B;</th><td>B</td><td>B</td><td>B</td><td>B</td><td></td><td></td></tr>\\n-<tr><th>0x5C</th><th>&#x5C;</th><td>B</td><td>B</td><td></td><td>B</td><td></td><td></td></tr>\\n-<tr><th>0x5D</th><th>&#x5D;</th><td>A</td><td>A</td><td>A</td><td>A</td><td></td><td></td></tr>\\n-<tr><th>0x5E</th><th>&#x5E;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0x5F</th><th>&#x5F;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x5B</th><th>&#x5B;</th><td></td><td>B</td><td>B</td><td></td><td></td></tr>\\n+<tr><th>0x5C</th><th>&#x5C;</th><td>breakable</td><td></td><td>B</td><td></td><td></td></tr>\\n+<tr><th>0x5D</th><th>&#x5D;</th><td></td><td>A</td><td>A</td><td></td><td></td></tr>\\n+<tr><th>0x5E</th><th>&#x5E;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x5F</th><th>&#x5F;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n </tbody>\\n <tbody>\\n-<tr><th>0x60</th><th>&#x60;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x60</th><th>&#x60;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n </tbody>\\n <tbody>\\n-<tr><th>0x7B</th><th>&#x7B;</th><td>B</td><td>B</td><td>B</td><td>B</td><td></td><td></td></tr>\\n-<tr><th>0x7C</th><th>&#x7C;</th><td></td><td></td><td></td><td></td><td>A</td><td>A</td></tr>\\n-<tr><th>0x7D</th><th>&#x7D;</th><td>A</td><td>A</td><td>A</td><td>A</td><td></td><td></td></tr>\\n-<tr><th>0x7E</th><th>&#x7E;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0x7B</th><th>&#x7B;</th><td></td><td>B</td><td>B</td><td></td><td></td></tr>\\n+<tr><th>0x7C</th><th>&#x7C;</th><td></td><td></td><td></td><td>A</td><td>A</td></tr>\\n+<tr><th>0x7D</th><th>&#x7D;</th><td></td><td>A</td><td>A</td><td></td><td></td></tr>\\n+<tr><th>0x7E</th><th>&#x7E;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n </tbody>\\n <tbody>\\n-<tr><th>0xA1</th><th>&#xA1;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xA2</th><th>&#xA2;</th><td>BA</td><td>A</td><td>A</td><td>A</td><td></td><td></td></tr>\\n-<tr><th>0xA3</th><th>&#xA3;</th><td>BA</td><td>B</td><td></td><td>B</td><td></td><td></td></tr>\\n-<tr><th>0xA4</th><th>&#xA4;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xA5</th><th>&#xA5;</th><td>BA</td><td>B</td><td></td><td>B</td><td></td><td></td></tr>\\n-<tr><th>0xA6</th><th>&#xA6;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xA7</th><th>&#xA7;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xA8</th><th>&#xA8;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xA9</th><th>&#xA9;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xAA</th><th>&#xAA;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xAB</th><th>&#xAB;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xAC</th><th>&#xAC;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xAE</th><th>&#xAE;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xAF</th><th>&#xAF;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xA1</th><th>&#xA1;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xA2</th><th>&#xA2;</th><td></td><td>A</td><td>A</td><td></td><td></td></tr>\\n+<tr><th>0xA3</th><th>&#xA3;</th><td></td><td></td><td>B</td><td></td><td></td></tr>\\n+<tr><th>0xA4</th><th>&#xA4;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xA5</th><th>&#xA5;</th><td></td><td></td><td>B</td><td></td><td></td></tr>\\n+<tr><th>0xA6</th><th>&#xA6;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xA7</th><th>&#xA7;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xA8</th><th>&#xA8;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xA9</th><th>&#xA9;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xAA</th><th>&#xAA;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xAB</th><th>&#xAB;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xAC</th><th>&#xAC;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xAE</th><th>&#xAE;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xAF</th><th>&#xAF;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n </tbody>\\n <tbody>\\n-<tr><th>0xB0</th><th>&#xB0;</th><td>A</td><td>A</td><td>A</td><td>A</td><td></td><td></td></tr>\\n-<tr><th>0xB1</th><th>&#xB1;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xB2</th><th>&#xB2;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xB3</th><th>&#xB3;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xB4</th><th>&#xB4;</th><td></td><td></td><td></td><td></td><td>B</td><td>B</td></tr>\\n-<tr><th>0xB5</th><th>&#xB5;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xB6</th><th>&#xB6;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xB7</th><th>&#xB7;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xB8</th><th>&#xB8;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xB9</th><th>&#xB9;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xBA</th><th>&#xBA;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xBB</th><th>&#xBB;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xBC</th><th>&#xBC;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xBD</th><th>&#xBD;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xBE</th><th>&#xBE;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n-<tr><th>0xBF</th><th>&#xBF;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xB0</th><th>&#xB0;</th><td></td><td>A</td><td>A</td><td></td><td></td></tr>\\n+<tr><th>0xB1</th><th>&#xB1;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xB2</th><th>&#xB2;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xB3</th><th>&#xB3;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xB4</th><th>&#xB4;</th><td></td><td></td><td></td><td>B</td><td>B</td></tr>\\n+<tr><th>0xB5</th><th>&#xB5;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xB6</th><th>&#xB6;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xB7</th><th>&#xB7;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xB8</th><th>&#xB8;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xB9</th><th>&#xB9;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xBA</th><th>&#xBA;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xBB</th><th>&#xBB;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xBC</th><th>&#xBC;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xBD</th><th>&#xBD;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xBE</th><th>&#xBE;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xBF</th><th>&#xBF;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n </tbody>\\n <tbody>\\n-<tr><th>0xD7</th><th>&#xD7;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xD7</th><th>&#xD7;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n </tbody>\\n <tbody>\\n-<tr><th>0xF7</th><th>&#xF7;</th><td></td><td></td><td></td><td></td><td></td><td></td></tr>\\n+<tr><th>0xF7</th><th>&#xF7;</th><td></td><td></td><td></td><td></td><td></td></tr>\\n </tbody>\\n </table>\\n </body>\\n\""}