{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basb9fbe6a\""},"diff":"\"b9fbe6a Bug 393266 - add PerfConfigurator.py to talos directory\\ndiff --git a/testing/performance/talos/PerfConfigurator.py b/testing/performance/talos/PerfConfigurator.py\\nnew file mode 100644\\nindex 0000000..eb1d54c\\n--- /dev/null\\n+++ b/testing/performance/talos/PerfConfigurator.py\\n@@ -0,0 +1,197 @@\\n+#!/usr/bin/env python\\r\\n+# encoding: utf-8\\r\\n+\\\"\\\"\\\"\\r\\n+PerfConfigurator.py\\r\\n+\\r\\n+Created by Rob Campbell on 2007-03-02.\\r\\n+Modified by Rob Campbell on 2007-05-30\\r\\n+Modified by Rob Campbell on 2007-06-26 - added -i buildid option\\r\\n+Modified by Rob Campbell on 2007-07-06 - added -d testDate option\\r\\n+Modified by Rob Campbell on 2007-08-22 - fixed errors in main()\\r\\n+\\\"\\\"\\\"\\r\\n+\\r\\n+import sys\\r\\n+import getopt\\r\\n+import re\\r\\n+import time\\r\\n+from datetime import datetime\\r\\n+\\r\\n+executablePath = \\\"C:\\\\\\\\cygwin\\\\\\\\tmp\\\\\\\\test\\\\\\\\\\\"\\r\\n+configFilePath = \\\"C:\\\\\\\\mozilla\\\\\\\\testing\\\\\\\\performance\\\\\\\\talos\\\\\\\\\\\"\\r\\n+masterIniSubpath = 'firefox\\\\\\\\extensions\\\\\\\\talkback@mozilla.org\\\\\\\\components\\\\\\\\master.ini'\\r\\n+defaultTitle = \\\"qm-pxp01\\\"\\r\\n+\\r\\n+help_message = '''\\r\\n+This is the buildbot performance runner's YAML configurator.bean\\r\\n+\\r\\n+USAGE: python PerfConfigurator.py -e executablePath -c configFilePath \\r\\n+            -b branchid -t title -o output -i buildid -d\\r\\n+'''\\r\\n+\\r\\n+class PerfConfigurator:\\r\\n+    exePath = \\\"\\\"\\r\\n+    configPath = \\\"\\\"\\r\\n+    outputName = \\\"\\\"\\r\\n+    title = \\\"\\\"\\r\\n+    branch = \\\"\\\"\\r\\n+    buildid = \\\"\\\"\\r\\n+    currentDate = \\\"\\\"\\r\\n+    verbose = False\\r\\n+    testDateFromBuildId = False\\r\\n+    \\r\\n+    def _dumpConfiguration(self):\\r\\n+        \\\"\\\"\\\"dump class configuration for convenient pickup or perusal\\\"\\\"\\\"\\r\\n+        print \\\"Writing configuration:\\\"\\r\\n+        print \\\" - title = \\\" + self.title\\r\\n+        print \\\" - executablePath = \\\" + self.exePath\\r\\n+        print \\\" - configPath = \\\" + self.configPath\\r\\n+        print \\\" - outputName = \\\" + self.outputName\\r\\n+        print \\\" - branch = \\\" + self.branch\\r\\n+        print \\\" - buildid = \\\" + self.buildid\\r\\n+        print \\\" - currentDate = \\\" + self.currentDate\\r\\n+    \\r\\n+    def _getCurrentDateString(self):\\r\\n+        currentDateTime = datetime.now()\\r\\n+        return currentDateTime.strftime(\\\"%Y%m%d_%H%M\\\")\\r\\n+    \\r\\n+    def _getCurrentBuildId(self):\\r\\n+        master = open(self.exePath + masterIniSubpath)\\r\\n+        if not master:\\r\\n+            raise Configuration(\\\"Unable to open \\\" + self.exePath + masterIniSubpath)\\r\\n+        masterContents = master.readlines()\\r\\n+        master.close()\\r\\n+        reBuildid = re.compile('BuildID\\\\s*=\\\\s*\\\"(\\\\d{10})\\\"')\\r\\n+        for line in masterContents:\\r\\n+            match = re.match(reBuildid, line)\\r\\n+            if match:\\r\\n+                return match.group(1)\\r\\n+        raise Configuration(\\\"BuildID not found in \\\" + self.exePath + masterIniSubpath)\\r\\n+    \\r\\n+    def _getTimeFromBuildId(self):\\r\\n+        buildIdTime = time.strptime(self.buildid, \\\"%Y%m%d%H\\\")\\r\\n+        return time.strftime(\\\"%a, %d %b %Y %H:%M:%S GMT\\\", buildIdTime)\\r\\n+    \\r\\n+    def writeConfigFile(self):\\r\\n+        configFile = open(self.configPath + \\\"sample.config\\\")\\r\\n+        self.currentDate = self._getCurrentDateString()\\r\\n+        if not self.buildid:\\r\\n+            self.buildid = self._getCurrentBuildId()\\r\\n+        if not self.outputName:\\r\\n+            self.outputName = self.currentDate + \\\"_config.yml\\\"\\r\\n+        destination = open(self.outputName, \\\"w\\\")\\r\\n+        config = configFile.readlines()\\r\\n+        configFile.close()\\r\\n+        buildidString = \\\"'\\\" + str(self.buildid) + \\\"'\\\"\\r\\n+        for line in config:\\r\\n+            newline = line\\r\\n+            if 'firefox:' in line:\\r\\n+                newline = '  firefox: ' + self.exePath + 'firefox\\\\\\\\firefox.exe'\\r\\n+            if 'testtitle' in line:\\r\\n+                newline = line.replace('testtitle', self.title)\\r\\n+                if self.testDateFromBuildId:\\r\\n+                    newline += '\\\\n'\\r\\n+                    newline += 'testdate: \\\"%s\\\"\\\\n' % self._getTimeFromBuildId()\\r\\n+            if 'testfilename' in line:\\r\\n+                newline = line.replace('testfilename', self.outputName)\\r\\n+            if 'testbranchid' in line:\\r\\n+                newline = line.replace('testbranchid', buildidString)\\r\\n+            else:\\r\\n+                if 'testbranch' in line:\\r\\n+                    newline = line.replace('testbranch', self.branch)\\r\\n+            destination.write(newline)\\r\\n+        destination.close()\\r\\n+        if self.verbose:\\r\\n+            self._dumpConfiguration()\\r\\n+    \\r\\n+    def __init__(self, **kwargs):\\r\\n+        if 'title' in kwargs:\\r\\n+            self.title = kwargs['title']\\r\\n+        if 'branch' in kwargs:\\r\\n+            self.branch = kwargs['branch']\\r\\n+        if 'executablePath' in kwargs:\\r\\n+            self.exePath = kwargs['executablePath']\\r\\n+        if 'configFilePath' in kwargs:\\r\\n+            self.configPath = kwargs['configFilePath']\\r\\n+        if 'outputName' in kwargs:\\r\\n+            self.outputName = kwargs['outputName']\\r\\n+        if 'buildid' in kwargs:\\r\\n+            self.buildid = kwargs['buildid']\\r\\n+        if 'verbose' in kwargs:\\r\\n+            self.verbose = kwargs['verbose']\\r\\n+        if 'testDate' in kwargs:\\r\\n+            self.testDateFromBuildId = kwargs['testDate']\\r\\n+\\r\\n+\\r\\n+class Configuration(Exception):\\r\\n+    def __init__(self, msg):\\r\\n+        self.msg = \\\"ERROR: \\\" + msg\\r\\n+\\r\\n+class Usage(Exception):\\r\\n+    def __init__(self, msg):\\r\\n+        self.msg = msg\\r\\n+\\r\\n+\\r\\n+def main(argv=None):\\r\\n+    exePath = executablePath\\r\\n+    configPath = configFilePath\\r\\n+    output = \\\"\\\"\\r\\n+    title = defaultTitle\\r\\n+    branch = \\\"\\\"\\r\\n+    buildid = \\\"\\\"\\r\\n+    testDate = False\\r\\n+    verbose = False\\r\\n+    \\r\\n+    if argv is None:\\r\\n+        argv = sys.argv\\r\\n+    try:\\r\\n+        try:\\r\\n+            opts, args = getopt.getopt(argv[1:], \\\"hve:c:t:b:o:i:d\\\", \\r\\n+                [\\\"help\\\", \\\"verbose\\\", \\\"executablePath=\\\", \\\"configFilePath=\\\", \\\"title=\\\", \\r\\n+                \\\"branch=\\\", \\\"output=\\\", \\\"id=\\\", \\\"testDate\\\"])\\r\\n+        except getopt.error, msg:\\r\\n+            raise Usage(msg)\\r\\n+        \\r\\n+        # option processing\\r\\n+        for option, value in opts:\\r\\n+            if option in (\\\"-v\\\", \\\"--verbose\\\"):\\r\\n+                verbose = True\\r\\n+            if option in (\\\"-h\\\", \\\"--help\\\"):\\r\\n+                raise Usage(help_message)\\r\\n+            if option in (\\\"-e\\\", \\\"--executablePath\\\"):\\r\\n+                exePath = value\\r\\n+            if option in (\\\"-c\\\", \\\"--configFilePath\\\"):\\r\\n+                configPath = value\\r\\n+            if option in (\\\"-t\\\", \\\"--title\\\"):\\r\\n+                title = value\\r\\n+            if option in (\\\"-b\\\", \\\"--branch\\\"):\\r\\n+                branch = value\\r\\n+            if option in (\\\"-o\\\", \\\"--output\\\"):\\r\\n+                output = value\\r\\n+            if option in (\\\"-i\\\", \\\"--id\\\"):\\r\\n+                buildid = value\\r\\n+            if option in (\\\"-d\\\", \\\"--testDate\\\"):\\r\\n+                testDate = True\\r\\n+        \\r\\n+    except Usage, err:\\r\\n+        print >> sys.stderr, sys.argv[0].split(\\\"/\\\")[-1] + \\\": \\\" + str(err.msg)\\r\\n+        print >> sys.stderr, \\\"\\\\t for help use --help\\\"\\r\\n+        return 2\\r\\n+    \\r\\n+    configurator = PerfConfigurator(title=title,\\r\\n+                                    executablePath=exePath,\\r\\n+                                    configFilePath=configPath,\\r\\n+                                    buildid=buildid,\\r\\n+                                    branch=branch,\\r\\n+                                    verbose=verbose,\\r\\n+                                    testDate=testDate,\\r\\n+                                    outputName=output)\\r\\n+    try:\\r\\n+        configurator.writeConfigFile()\\r\\n+    except Configuration, err:\\r\\n+        print >> sys.stderr, sys.argv[0].split(\\\"/\\\")[-1] + \\\": \\\" + str(err.msg)\\r\\n+        return 5\\r\\n+    return 0\\r\\n+\\r\\n+\\r\\n+if __name__ == \\\"__main__\\\":\\r\\n+    sys.exit(main())\\r\\n\""}