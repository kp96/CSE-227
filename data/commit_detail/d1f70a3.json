{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basd1f70a3\""},"diff":"\"d1f70a3 b=391184, accidentally blew away this patch with cairo update\\ndiff --git a/gfx/cairo/cairo/src/cairo-malloc-private.h b/gfx/cairo/cairo/src/cairo-malloc-private.h\\nindex f503b39..ad22851 100644\\n--- a/gfx/cairo/cairo/src/cairo-malloc-private.h\\n+++ b/gfx/cairo/cairo/src/cairo-malloc-private.h\\n@@ -40,11 +40,26 @@\\n #include \\\"cairo-wideint-private.h\\\"\\n \\n /**\\n+ * _cairo_malloc:\\n+ * @size: size in bytes\\n+ *\\n+ * Allocate @size memory using malloc().\\n+ * The memory should be freed using free().\\n+ * malloc is skipped, if 0 bytes are requested, and %NULL will be returned.\\n+ *\\n+ * Return value: A pointer to the newly allocated memory, or %NULL in\\n+ * case of malloc() failure or size is 0.\\n+ */\\n+\\n+#define _cairo_malloc(size) \\\\\\n+   ((size) ? malloc((unsigned) (size)) : NULL)\\n+\\n+/**\\n  * _cairo_malloc_ab:\\n  * @n: number of elements to allocate\\n  * @size: size of each element\\n  *\\n- * Allocates @a*@size memory using malloc(), taking care to not\\n+ * Allocates @a*@size memory using _cairo_malloc(), taking care to not\\n  * overflow when doing the multiplication.  Behaves much like\\n  * calloc(), except that the returned memory is not set to zero.\\n  * The memory should be freed using free().\\n@@ -57,8 +72,8 @@\\n  */\\n \\n #define _cairo_malloc_ab(a, size) \\\\\\n-  ((unsigned) (a) >= INT32_MAX / (unsigned) (size) ? NULL : \\\\\\n-   malloc((unsigned) (a) * (unsigned) (size)))\\n+  ((size) && (unsigned) (a) >= INT32_MAX / (unsigned) (size) ? NULL : \\\\\\n+   _cairo_malloc((unsigned) (a) * (unsigned) (size)))\\n \\n /**\\n  * _cairo_malloc_abc:\\n@@ -66,7 +81,7 @@\\n  * @b: second factor of number of elements to allocate\\n  * @size: size of each element\\n  *\\n- * Allocates @a*@b*@size memory using malloc(), taking care to not\\n+ * Allocates @a*@b*@size memory using _cairo_malloc(), taking care to not\\n  * overflow when doing the multiplication.  Behaves like\\n  * _cairo_malloc_ab().  The memory should be freed using free().\\n  *\\n@@ -78,9 +93,9 @@\\n  */\\n \\n #define _cairo_malloc_abc(a, b, size) \\\\\\n-  ((unsigned) (a) >= INT32_MAX / (unsigned) (b) ? NULL : \\\\\\n-   (unsigned) ((a)*(b)) >= INT32_MAX / (unsigned) (size) ? NULL : \\\\\\n-   malloc((unsigned) (a) * (unsigned) (b) * (unsigned) size))\\n+  ((b) && (unsigned) (a) >= INT32_MAX / (unsigned) (b) ? NULL : \\\\\\n+   (size) && (unsigned) ((a)*(b)) >= INT32_MAX / (unsigned) (size) ? NULL : \\\\\\n+   _cairo_malloc((unsigned) (a) * (unsigned) (b) * (unsigned) (size)))\\n \\n /**\\n  * _cairo_malloc_ab_plus_c:\\n@@ -88,7 +103,7 @@\\n  * @size: size of each element\\n  * @k: additional size to allocate\\n  *\\n- * Allocates @a*@ksize+@k memory using malloc(), taking care to not\\n+ * Allocates @a*@ksize+@k memory using _cairo_malloc(), taking care to not\\n  * overflow when doing the arithmetic.  Behaves like\\n  * _cairo_malloc_ab().  The memory should be freed using free().\\n  *\\n@@ -97,8 +112,8 @@\\n  */\\n \\n #define _cairo_malloc_ab_plus_c(n, size, k) \\\\\\n-  ((unsigned) (n) >= INT32_MAX / (unsigned) (size) ? NULL : \\\\\\n+  ((size) && (unsigned) (n) >= INT32_MAX / (unsigned) (size) ? NULL : \\\\\\n    (unsigned) (k) >= INT32_MAX - (unsigned) (n) * (unsigned) (size) ? NULL : \\\\\\n-   malloc((unsigned) (n) * (unsigned) (size) + (unsigned) (k)))\\n+   _cairo_malloc((unsigned) (n) * (unsigned) (size) + (unsigned) (k)))\\n \\n #endif /* CAIRO_MALLOC_PRIVATE_H */\\n\""}