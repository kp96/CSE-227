{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas48d7fbc\""},"diff":"\"48d7fbc Bug 394286: Simplify add-on incompatible message. r=robstrong\\ndiff --git a/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties b/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties\\nindex c89c7ad..7e2cb90 100644\\n--- a/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties\\n+++ b/toolkit/locales/en-US/chrome/mozapps/extensions/extensions.properties\\n@@ -68,10 +68,7 @@ type-8=Language\\n type-4=Theme\\n type-2=Extension\\n incompatibleTitle=Incompatible %S\\n-incompatibleMsg=%S %S could not be installed because it is not compatible with %S %S. (%S %S will only work with %S versions from %S to %S)\\n-incompatibleMsgSingleAppVersion=%S %S could not be installed because it is not compatible with %S %S. (%S %S will only work with %S %S)\\n-incompatibleMessageNoApp=%S %S could not be installed because it is not compatible with %S.\\n-incompatibleOlder=versions 0.8 or older.\\n+incompatibleMessage=%S %S could not be installed because it is not compatible with %S %S.\\n incompatibleThemeName=this Theme\\n incompatibleExtension=Disabled - not compatible with %S %S\\n incompatibleAddonMsg=Not compatible with %S %S\\ndiff --git a/toolkit/mozapps/extensions/src/nsExtensionManager.js.in b/toolkit/mozapps/extensions/src/nsExtensionManager.js.in\\nindex a079c3e..4c9bfc5 100644\\n--- a/toolkit/mozapps/extensions/src/nsExtensionManager.js.in\\n+++ b/toolkit/mozapps/extensions/src/nsExtensionManager.js.in\\n@@ -722,42 +722,10 @@ function showIncompatibleError(installData) {\\n   var params = [extensionStrings.GetStringFromName(\\\"type-\\\" + installData.type)];\\n   var title = extensionStrings.formatStringFromName(\\\"incompatibleTitle\\\",\\n                                                     params, params.length);\\n-  var message;\\n-  var targetAppData = installData.currentApp;\\n-\\n-  var targetAppName;\\n-  var targetVersion;\\n-  if (targetAppData &&\\n-      (targetAppData.id == TOOLKIT_ID)) {\\n-    targetAppName = BundleManager.toolkitName;\\n-    targetVersion = gApp.platformVersion;\\n-  } else {\\n-    targetAppName = BundleManager.appName;\\n-    targetVersion = gApp.version;\\n-  }\\n-\\n-  if (!targetAppData) {\\n-    params = [installData.name, installData.version, targetAppName];\\n-    message = extensionStrings.formatStringFromName(\\\"incompatibleMessageNoApp\\\",\\n-                                                    params, params.length);\\n-  }\\n-  else if (targetAppData.minVersion == targetAppData.maxVersion) {\\n-    // If the min target app version and the max target app version are the same, don't show\\n-    // a message like, \\\"Foo is only compatible with Firefox versions 0.7 to 0.7\\\", rather just\\n-    // show, \\\"Foo is only compatible with Firefox 0.7\\\"\\n-    params = [installData.name, installData.version, targetAppName, targetVersion,\\n-              installData.name, installData.version, targetAppName,\\n-              targetAppData.minVersion];\\n-    message = extensionStrings.formatStringFromName(\\\"incompatibleMsgSingleAppVersion\\\",\\n-                                                    params, params.length);\\n-  }\\n-  else {\\n-    params = [installData.name, installData.version, targetAppName, targetVersion,\\n-              installData.name, installData.version, targetAppName,\\n-              targetAppData.minVersion, targetAppData.maxVersion];\\n-    message = extensionStrings.formatStringFromName(\\\"incompatibleMsg\\\", params, params.length);\\n-  }\\n-\\n+  params = [installData.name, installData.version, BundleManager.appName,\\n+            gApp.version];\\n+  var message = extensionStrings.formatStringFromName(\\\"incompatibleMessage\\\",\\n+                                                      params, params.length);\\n   var ps = Cc[\\\"@mozilla.org/embedcomp/prompt-service;1\\\"].\\n            getService(Ci.nsIPromptService);\\n   ps.alert(null, title, message);\\n@@ -871,44 +839,6 @@ function extractRDFFileToTempDir(zipFile, fileName, suppressErrors) {\\n }\\n \\n /**\\n- * Show a message to the user informing them they are installing an old non-EM\\n- * style Theme, and that these are not supported.\\n- * @param   installManifest\\n- *          The Old-Style Contents Manifest datasource representing the theme.\\n- */\\n-function showOldThemeError(contentsManifest) {\\n-  var extensionStrings = BundleManager.getBundle(URI_EXTENSIONS_PROPERTIES);\\n-  var params = [extensionStrings.GetStringFromName(\\\"theme\\\")];\\n-  var title = extensionStrings.formatStringFromName(\\\"incompatibleTitle\\\",\\n-                                                    params, params.length);\\n-  var appVersion = extensionStrings.GetStringFromName(\\\"incompatibleOlder\\\");\\n-\\n-  try {\\n-    var ctr = getContainer(contentsManifest,\\n-                           gRDF.GetResource(\\\"urn:mozilla:skin:root\\\"));\\n-    var elts = ctr.GetElements();\\n-    var nameArc = gRDF.GetResource(CHROME_NS(\\\"displayName\\\"));\\n-    while (elts.hasMoreElements()) {\\n-      var elt = elts.getNext().QueryInterface(Ci.nsIRDFResource);\\n-      themeName = stringData(contentsManifest.GetTarget(elt, nameArc, true));\\n-      if (themeName)\\n-        break;\\n-    }\\n-  }\\n-  catch (e) {\\n-    themeName = extensionStrings.GetStringFromName(\\\"incompatibleThemeName\\\");\\n-  }\\n-\\n-  params = [themeName, \\\"\\\", BundleManager.appName, gApp.version, themeName, \\\"\\\",\\n-            BundleManager.appName, appVersion];\\n-  var message = extensionStrings.formatStringFromName(\\\"incompatibleMsgSingleAppVersion\\\",\\n-                                                      params, params.length);\\n-  var ps = Cc[\\\"@mozilla.org/embedcomp/prompt-service;1\\\"].\\n-           getService(Ci.nsIPromptService);\\n-  ps.alert(null, title, message);\\n-}\\n-\\n-/**\\n  * Gets an Install Manifest datasource from a file.\\n  * @param   file\\n  *          The nsIFile that contains the Install Manifest RDF\\n@@ -1638,10 +1568,27 @@ Installer.prototype = {\\n         }\\n \\n         if (!installer.metadataDS && installer._type == nsIUpdateItem.TYPE_THEME) {\\n+          var themeName = extensionStrings.GetStringFromName(\\\"incompatibleThemeName\\\");\\n           if (contentsManifestFile && contentsManifestFile.exists()) {\\n             var contentsManifest = gRDF.GetDataSourceBlocking(getURLSpecFromFile(contentsManifestFile));\\n-            showOldThemeError(contentsManifest);\\n+            try {\\n+              var ctr = getContainer(contentsManifest,\\n+                                     gRDF.GetResource(\\\"urn:mozilla:skin:root\\\"));\\n+              var elts = ctr.GetElements();\\n+              var nameArc = gRDF.GetResource(CHROME_NS(\\\"displayName\\\"));\\n+              while (elts.hasMoreElements()) {\\n+                var elt = elts.getNext().QueryInterface(Components.interfaces.nsIRDFResource);\\n+                themeName = stringData(contentsManifest.GetTarget(elt, nameArc, true));\\n+                if (themeName)\\n+                  break;\\n+              }\\n+            }\\n+            catch (e) {\\n+              themeName = extensionStrings.GetStringFromName(\\\"incompatibleThemeName\\\");\\n+            }\\n           }\\n+          showIncompatibleError({ name: themeName, version: \\\"\\\",\\n+                                  type: nsIUpdateItem.TYPE_THEME });\\n           LOG(\\\"Theme JAR file: \\\" + jarFile.leafName + \\\" contains an Old-Style \\\" +\\n               \\\"Theme that is not compatible with this version of the software.\\\");\\n           throw new Error(\\\"Old Theme\\\"); // let the safe-op clean up\\n@@ -4305,6 +4252,10 @@ ExtensionManager.prototype = {\\n         else {\\n           em.datasource.removeDownload(this._xpi.path);\\n           showIncompatibleError(installData);\\n+          LOG(\\\"Add-on \\\" + installData.id + \\\" is incompatible with \\\" +\\n+              BundleManager.appName + \\\" \\\" + gApp.version + \\\", Toolkit \\\" +\\n+              gApp.platformVersion + \\\". Remote compatibility check did not \\\" +\\n+              \\\"resolve this.\\\");\\n           // We are responsible for cleaning up this file!\\n           InstallLocations.get(aInstallLocationKey).removeFile(this._xpi);\\n         }\\n@@ -4356,6 +4307,9 @@ ExtensionManager.prototype = {\\n         //        app that can handle this item, if so just stage and don't show\\n         //        this error!\\n         showIncompatibleError(installData);\\n+        LOG(\\\"Add-on \\\" + installData.id + \\\" is incompatible with \\\" +\\n+            BundleManager.appName + \\\" \\\" + gApp.version + \\\", Toolkit \\\" +\\n+            gApp.platformVersion + \\\". Remote compatibility check was not performed.\\\");\\n       }\\n       break;\\n     case INSTALLERROR_SUCCESS:\\n\""}