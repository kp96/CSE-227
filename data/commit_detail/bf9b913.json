{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basbf9b913\""},"diff":"\"bf9b913 Bug 393364: Patch from Jason Orendorff to restore ability to compile SpiderMonkey with C++ compiler. r=me\\ndiff --git a/js/src/jsatom.c b/js/src/jsatom.c\\nindex aaa25aa..547b26f 100644\\n--- a/js/src/jsatom.c\\n+++ b/js/src/jsatom.c\\n@@ -241,8 +241,39 @@ JS_STATIC_ASSERT(ATOM_ENTRY_FLAG_MASK < JSVAL_ALIGN);\\n #define CLEAR_ATOM_ENTRY_FLAGS(entry, flags)                                  \\\\\\n     ((void)((entry)->keyAndFlags &= ~(jsuword)(flags)))\\n \\n-static const JSDHashTableOps DoubleHashOps;\\n-static const JSDHashTableOps StringHashOps;\\n+JS_STATIC_DLL_CALLBACK(JSDHashNumber)\\n+HashDouble(JSDHashTable *table, const void *key);\\n+\\n+JS_STATIC_DLL_CALLBACK(JSBool)\\n+MatchDouble(JSDHashTable *table, const JSDHashEntryHdr *hdr, const void *key);\\n+\\n+JS_STATIC_DLL_CALLBACK(JSDHashNumber)\\n+HashString(JSDHashTable *table, const void *key);\\n+\\n+JS_STATIC_DLL_CALLBACK(JSBool)\\n+MatchString(JSDHashTable *table, const JSDHashEntryHdr *hdr, const void *key);\\n+\\n+static const JSDHashTableOps DoubleHashOps = {\\n+    JS_DHashAllocTable,\\n+    JS_DHashFreeTable,\\n+    HashDouble,\\n+    MatchDouble,\\n+    JS_DHashMoveEntryStub,\\n+    JS_DHashClearEntryStub,\\n+    JS_DHashFinalizeStub,\\n+    NULL\\n+};\\n+\\n+static const JSDHashTableOps StringHashOps = {\\n+    JS_DHashAllocTable,\\n+    JS_DHashFreeTable,\\n+    HashString,\\n+    MatchString,\\n+    JS_DHashMoveEntryStub,\\n+    JS_DHashClearEntryStub,\\n+    JS_DHashFinalizeStub,\\n+    NULL\\n+};\\n \\n #define IS_DOUBLE_TABLE(table)      ((table)->ops == &DoubleHashOps)\\n #define IS_STRING_TABLE(table)      ((table)->ops == &StringHashOps)\\n@@ -314,28 +345,6 @@ MatchString(JSDHashTable *table, const JSDHashEntryHdr *hdr, const void *key)\\n     return js_EqualStrings((JSString *)ATOM_ENTRY_KEY(entry), (JSString *)key);\\n }\\n \\n-static const JSDHashTableOps DoubleHashOps = {\\n-    JS_DHashAllocTable,\\n-    JS_DHashFreeTable,\\n-    HashDouble,\\n-    MatchDouble,\\n-    JS_DHashMoveEntryStub,\\n-    JS_DHashClearEntryStub,\\n-    JS_DHashFinalizeStub,\\n-    NULL\\n-};\\n-\\n-static const JSDHashTableOps StringHashOps = {\\n-    JS_DHashAllocTable,\\n-    JS_DHashFreeTable,\\n-    HashString,\\n-    MatchString,\\n-    JS_DHashMoveEntryStub,\\n-    JS_DHashClearEntryStub,\\n-    JS_DHashFinalizeStub,\\n-    NULL\\n-};\\n-\\n /*\\n  * For a browser build from 2007-08-09 after the browser starts up there are\\n  * just 55 double atoms, but over 15000 string atoms. Not to penalize more\\n\""}