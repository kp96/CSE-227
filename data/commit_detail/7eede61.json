{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas7eede61\""},"diff":"\"7eede61 Bug 391667 - imglib does not gracefully handle unknown images sent with incorrect MIME types p=Ben Karel <web+moz@eschew.org> r+a=pavlov\\ndiff --git a/modules/libpr0n/src/imgRequest.cpp b/modules/libpr0n/src/imgRequest.cpp\\nindex 51e2f44..c492dee 100644\\n--- a/modules/libpr0n/src/imgRequest.cpp\\n+++ b/modules/libpr0n/src/imgRequest.cpp\\n@@ -78,7 +78,8 @@ NS_IMPL_ISUPPORTS6(imgRequest, imgILoad,\\n imgRequest::imgRequest() : \\n   mLoading(PR_FALSE), mProcessing(PR_FALSE), mHadLastPart(PR_FALSE),\\n   mNetworkStatus(0), mImageStatus(imgIRequest::STATUS_NONE), mState(0),\\n-  mCacheId(0), mValidator(nsnull), mIsMultiPartChannel(PR_FALSE)\\n+  mCacheId(0), mValidator(nsnull), mIsMultiPartChannel(PR_FALSE),\\n+  mImageSniffers(\\\"image-sniffing-services\\\") \\n {\\n   /* member initializers and constructor code */\\n }\\n@@ -928,6 +929,24 @@ void\\n imgRequest::SniffMimeType(const char *buf, PRUint32 len)\\n {\\n   imgLoader::GetMimeTypeFromContent(buf, len, mContentType);\\n+\\n+  // The vast majority of the time, imgLoader will find a gif/jpeg/png image\\n+  // and fill mContentType with the sniffed MIME type.\\n+  if (!mContentType.IsEmpty())\\n+    return;\\n+\\n+  // When our sniffing fails, we want to query registered image decoders\\n+  // to see if they can identify the image. If we always trusted the server\\n+  // to send the right MIME, images sent as text/plain would not be rendered.\\n+  const nsCOMArray<nsIContentSniffer>& sniffers = mImageSniffers.GetEntries();\\n+  PRUint32 length = sniffers.Count();\\n+  for (PRUint32 i = 0; i < length; ++i) {\\n+    nsresult rv =\\n+      sniffers[i]->GetMIMETypeFromContent(nsnull, (const PRUint8 *) buf, len, mContentType);\\n+    if (NS_SUCCEEDED(rv) && !mContentType.IsEmpty()) {\\n+      return;\\n+    }\\n+  }\\n }\\n \\n nsresult \\ndiff --git a/modules/libpr0n/src/imgRequest.h b/modules/libpr0n/src/imgRequest.h\\nindex 0804733..fd1e7fb 100644\\n--- a/modules/libpr0n/src/imgRequest.h\\n+++ b/modules/libpr0n/src/imgRequest.h\\n@@ -47,11 +47,13 @@\\n #include \\\"imgIDecoderObserver.h\\\"\\n \\n #include \\\"nsICacheEntryDescriptor.h\\\"\\n+#include \\\"nsIContentSniffer.h\\\"\\n #include \\\"nsIRequest.h\\\"\\n #include \\\"nsIProperties.h\\\"\\n #include \\\"nsIStreamListener.h\\\"\\n #include \\\"nsIURI.h\\\"\\n \\n+#include \\\"nsCategoryCache.h\\\"\\n #include \\\"nsCOMPtr.h\\\"\\n #include \\\"nsString.h\\\"\\n #include \\\"nsVoidArray.h\\\"\\n@@ -173,6 +175,8 @@ private:\\n \\n   imgCacheValidator *mValidator;\\n   PRBool   mIsMultiPartChannel;\\n+\\n+  nsCategoryCache<nsIContentSniffer> mImageSniffers;\\n };\\n \\n #endif\\n\""}