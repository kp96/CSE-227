{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas9da2aba\""},"diff":"\"9da2aba fix for bug #385834:  places' sqlite file can get overly large, do incremental vacuuming. r=dietrich\\ndiff --git a/toolkit/components/places/src/nsNavHistory.cpp b/toolkit/components/places/src/nsNavHistory.cpp\\nindex 4258425..101175b 100644\\n--- a/toolkit/components/places/src/nsNavHistory.cpp\\n+++ b/toolkit/components/places/src/nsNavHistory.cpp\\n@@ -79,6 +79,7 @@\\n #include \\\"mozStorageHelper.h\\\"\\n #include \\\"nsAppDirectoryServiceDefs.h\\\"\\n #include \\\"nsAutoLock.h\\\"\\n+#include \\\"nsIIdleService.h\\\"\\n \\n // Microsecond timeout for \\\"recent\\\" events such as typed and bookmark following.\\n // If you typed it more than this time ago, it's not recent.\\n@@ -144,6 +145,11 @@\\n \\n #endif // LAZY_ADD\\n \\n+// 15 minutes = 900 seconds = 900000 milliseconds\\n+#define VACUUM_IDLE_TIME_IN_MSECS (900000)\\n+// check every 5 minutes\\n+#define VACUUM_TIMER_TIMEOUT (300 * PR_MSEC_PER_SEC)\\n+\\n NS_IMPL_ADDREF(nsNavHistory)\\n NS_IMPL_RELEASE(nsNavHistory)\\n \\n@@ -258,11 +264,6 @@ nsNavHistory::nsNavHistory() : mNowValid(PR_FALSE),\\n \\n nsNavHistory::~nsNavHistory()\\n {\\n-  if (mAutoCompleteTimer) {\\n-    mAutoCompleteTimer->Cancel();\\n-    mAutoCompleteTimer = nsnull;\\n-  }\\n-\\n   // remove the static reference to the service. Check to make sure its us\\n   // in case somebody creates an extra instance of the service.\\n   NS_ASSERTION(gHistoryService == this, \\\"YOU CREATED 2 COPIES OF THE HISTORY SERVICE.\\\");\\n@@ -499,6 +500,22 @@ nsNavHistory::InitDB(PRBool *aDoImport)\\n   PRBool tableExists;\\n   *aDoImport = PR_FALSE;\\n \\n+  // Set the database up for incremental vacuuming.\\n+  // if the database was created before we started doing \\n+  // incremental vacuuming, this will have no effect.\\n+  rv = mDBConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\\\"PRAGMA auto_vacuum=2\\\"));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  if (!mVacuumTimer) {\\n+    mVacuumTimer = do_CreateInstance(\\\"@mozilla.org/timer;1\\\", &rv);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    rv = mVacuumTimer->InitWithFuncCallback(VacuumTimerCallback, this,\\n+                                            VACUUM_TIMER_TIMEOUT,\\n+                                            nsITimer::TYPE_REPEATING_SLACK);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+  }\\n+\\n   // Set the database page size. This will only have any effect on empty files,\\n   // so must be done before anything else. If the file already exists, we'll\\n   // get that file's page size and this will have no effect.\\n@@ -3296,6 +3313,57 @@ nsNavHistory::AddDocumentRedirect(nsIChannel *aOldChannel,\\n   return NS_OK;\\n }\\n \\n+nsresult \\n+nsNavHistory::PerformVacuumIfIdle()\\n+{\\n+  nsresult rv;\\n+  nsCOMPtr<nsIIdleService> idleService =\\n+    do_GetService(\\\"@mozilla.org/widget/idleservice;1\\\", &rv);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  PRUint32 idleTime;\\n+  rv = idleService->GetIdleTime(&idleTime);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  // if we've been idle for more than VACUUM_IDLE_TIME_IN_MSECS\\n+  // incrementally vacuum\\n+  if (idleTime > VACUUM_IDLE_TIME_IN_MSECS) {\\n+    PRInt32 vacuum;\\n+    nsCOMPtr<mozIStorageStatement> statement;\\n+    rv = mDBConn->CreateStatement(NS_LITERAL_CSTRING(\\\"PRAGMA auto_vacuum\\\"),\\n+                                  getter_AddRefs(statement));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    PRBool hasResult;\\n+    rv = statement->ExecuteStep(&hasResult);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    NS_ENSURE_TRUE(hasResult, NS_ERROR_FAILURE);\\n+    vacuum = statement->AsInt32(0);\\n+\\n+    // if our database was created with incremental_vacuum, \\n+    // do incremental vacuuming\\n+    if (vacuum == 2) {\\n+      rv = mDBConn->ExecuteSimpleSQL(\\n+        NS_LITERAL_CSTRING(\\\"PRAGMA incremental_vacuum;\\\"));\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+    }\\n+    else {\\n+#if 0\\n+      // Currently commented out because compression is very slow\\n+      rv = mDBConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\\\"VACUUM;\\\"));\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+#endif\\n+    }\\n+  }\\n+  return NS_OK;\\n+}\\n+\\n+void // static\\n+nsNavHistory::VacuumTimerCallback(nsITimer* aTimer, void* aClosure)\\n+{\\n+  nsNavHistory* history = static_cast<nsNavHistory*>(aClosure);\\n+  (void)history->PerformVacuumIfIdle();\\n+}\\n \\n // nsIObserver *****************************************************************\\n \\n@@ -3304,6 +3372,14 @@ nsNavHistory::Observe(nsISupports *aSubject, const char *aTopic,\\n                     const PRUnichar *aData)\\n {\\n   if (nsCRT::strcmp(aTopic, gQuitApplicationMessage) == 0) {\\n+    if (mVacuumTimer) {\\n+      mVacuumTimer->Cancel();\\n+      mVacuumTimer = nsnull;\\n+    }\\n+    if (mAutoCompleteTimer) {\\n+      mAutoCompleteTimer->Cancel();\\n+      mAutoCompleteTimer = nsnull;\\n+    }\\n     if (gTldTypes) {\\n       delete gTldTypes;\\n       gTldTypes = nsnull;\\ndiff --git a/toolkit/components/places/src/nsNavHistory.h b/toolkit/components/places/src/nsNavHistory.h\\nindex 5dce3e5..4a36246 100644\\n--- a/toolkit/components/places/src/nsNavHistory.h\\n+++ b/toolkit/components/places/src/nsNavHistory.h\\n@@ -589,6 +589,10 @@ protected:\\n   // creates supplemental indexes that we'd like to not bother with\\n   // updating during import.\\n   nsresult CreateLookupIndexes();\\n+\\n+  nsresult PerformVacuumIfIdle();\\n+  nsCOMPtr<nsITimer> mVacuumTimer;\\n+  static void VacuumTimerCallback(nsITimer* aTimer, void* aClosure);\\n };\\n \\n /**\\n\""}