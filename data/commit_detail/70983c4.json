{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas70983c4\""},"diff":"\"70983c4 Suppress tracing around calls into original allocators, in case they recur back into our hooks.  Fixes most of leak *stats* regression from bug 392009.  r+a1.9=brendan\\ndiff --git a/tools/trace-malloc/lib/nsTraceMalloc.c b/tools/trace-malloc/lib/nsTraceMalloc.c\\nindex 360f9d9..6e6079d 100644\\n--- a/tools/trace-malloc/lib/nsTraceMalloc.c\\n+++ b/tools/trace-malloc/lib/nsTraceMalloc.c\\n@@ -1096,11 +1096,13 @@ my_malloc_hook(size_t size, __const __malloc_ptr_t caller)\\n \\n     PR_ASSERT(tracing_enabled);\\n     t = tm_get_thread();\\n+    t->suppress_tracing++;\\n     __malloc_hook = old_malloc_hook;\\n     start = PR_IntervalNow();\\n     ptr = __libc_malloc(size);\\n     end = PR_IntervalNow();\\n     __malloc_hook = my_malloc_hook;\\n+    t->suppress_tracing--;\\n     MallocCallback(ptr, size, start, end, t);\\n     return ptr;\\n }\\n@@ -1114,11 +1116,18 @@ my_realloc_hook(__ptr_t oldptr, size_t size, __const __malloc_ptr_t caller)\\n \\n     PR_ASSERT(tracing_enabled);\\n     t = tm_get_thread();\\n+    t->suppress_tracing++;\\n     __realloc_hook = old_realloc_hook;\\n     start = PR_IntervalNow();\\n+\\n+    /*\\n+     * __libc_realloc(NULL, size) recurs into my_malloc_hook, so it's\\n+     * important that we've incremented t->suppress_tracing here.\\n+     */\\n     ptr = __libc_realloc(oldptr, size);\\n     end = PR_IntervalNow();\\n     __realloc_hook = my_realloc_hook;\\n+    t->suppress_tracing--;\\n     ReallocCallback(oldptr, ptr, size, start, end, t);\\n     return ptr;\\n }\\n@@ -1132,11 +1141,13 @@ my_memalign_hook(size_t boundary, size_t size, __const __malloc_ptr_t caller)\\n \\n     PR_ASSERT(tracing_enabled);\\n     t = tm_get_thread();\\n+    t->suppress_tracing++;\\n     __memalign_hook = old_memalign_hook;\\n     start = PR_IntervalNow();\\n     ptr = __libc_memalign(boundary, size);\\n     end = PR_IntervalNow();\\n     __memalign_hook = my_memalign_hook;\\n+    t->suppress_tracing--;\\n     MallocCallback(ptr, size, start, end, t);\\n     return ptr;\\n }\\n@@ -1149,11 +1160,13 @@ my_free_hook(__ptr_t ptr, __const __malloc_ptr_t caller)\\n \\n     PR_ASSERT(tracing_enabled);\\n     t = tm_get_thread();\\n+    t->suppress_tracing++;\\n     __free_hook = old_free_hook;\\n     start = PR_IntervalNow();\\n     __libc_free(ptr);\\n     end = PR_IntervalNow();\\n     __free_hook = my_free_hook;\\n+    t->suppress_tracing--;\\n     FreeCallback(ptr, start, end, t);\\n }\\n \\n\""}