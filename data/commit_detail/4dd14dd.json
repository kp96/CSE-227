{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas4dd14dd\""},"diff":"\"4dd14dd sync.js: move code into an object.  Add observer implementation, use observer service to listen to sync events. sync.xul: cleanup, point into the global sync object from sync.js. nsBookmarksSyncService.js: add login code, use observer service to publish events. nsIBookmarksSyncService.idl: add login methods, add comments.\\ndiff --git a/services/sync/nsBookmarksSyncService.js b/services/sync/nsBookmarksSyncService.js\\nindex 56766cb..026a730 100644\\n--- a/services/sync/nsBookmarksSyncService.js\\n+++ b/services/sync/nsBookmarksSyncService.js\\n@@ -68,6 +68,14 @@ BookmarksSyncService.prototype = {\\n     return this.__ans;\\n   },\\n \\n+  __os: null,\\n+  get _os() {\\n+    if (!this.__os)\\n+      this.__os = Cc[\\\"@mozilla.org/observer-service;1\\\"]\\n+        .getService(Ci.nsIObserverService);\\n+    return this.__os;\\n+  },\\n+\\n   // DAVCollection object\\n   _dav: null,\\n \\n@@ -76,6 +84,14 @@ BookmarksSyncService.prototype = {\\n   _snapshot: {},\\n   _snapshotVersion: 0,\\n \\n+  get currentUser() {\\n+    // FIXME - need to expose that info some other way\\n+    if (this._dav._currentUserPath)\\n+      return this._dav._currentUserPath + \\\"@mozilla.com\\\";\\n+    else\\n+      return null;\\n+  },\\n+\\n   _init: function BSS__init() {\\n \\n     var serverUrl = \\\"http://sync.server.url/\\\";\\n@@ -351,10 +367,12 @@ BookmarksSyncService.prototype = {\\n     if (a.type != b.type)\\n       return -1;\\n \\n-    let ret = {};\\n+    let ret = {numProps: 0, props: {}};\\n     for (prop in a) {\\n-      if (a[prop] != b[prop])\\n-        ret[prop] = b[prop];\\n+      if (a[prop] != b[prop]) {\\n+        ret.numProps++;\\n+        ret.props[prop] = b[prop];\\n+      }\\n     }\\n \\n     // FIXME: prune out properties we don't care about\\n@@ -380,12 +398,12 @@ BookmarksSyncService.prototype = {\\n         let edits = this._getEdits(a[guid], b[guid]);\\n         if (edits == -1) // something went very wrong -- FIXME\\n           continue;\\n-        if (edits == {}) // no changes - skip\\n+        if (edits.numProps == 0) // no changes - skip\\n           continue;\\n         let parents = this._nodeParents(guid, b);\\n         cmds.push({action: \\\"edit\\\", guid: guid,\\n                    depth: parents.length, parents: parents,\\n-                   data: edits});\\n+                   data: edits.props});\\n       } else {\\n         let parents = this._nodeParents(guid, a); // ???\\n         cmds.push({action: \\\"remove\\\", guid: guid,\\n@@ -425,8 +443,9 @@ BookmarksSyncService.prototype = {\\n     return false;\\n   },\\n \\n-  // NEED TO also look at the parent chain & index; only items in the\\n-  // same \\\"spot\\\" qualify for likeness\\n+  // Bookmarks are allowed to be in a different index as long as they\\n+  // are in the same folder.  Folders and separators must be at the\\n+  // same index to qualify for 'likeness'.\\n   _commandLike: function BSS__commandLike(a, b) {\\n     if (!a || !b)\\n       return false;\\n@@ -434,6 +453,11 @@ BookmarksSyncService.prototype = {\\n     if (a.action != b.action)\\n       return false;\\n \\n+    // this check works because reconcile() fixes up the parent guids\\n+    // as it runs, and the command list is sorted by depth\\n+    if (a.parentGuid != b.parentGuid)\\n+      return false;\\n+\\n     switch (a.data.type) {\\n     case 0:\\n       if (b.data.type == a.data.type &&\\n@@ -442,14 +466,15 @@ BookmarksSyncService.prototype = {\\n         return true;\\n       return false;\\n     case 6:\\n-      if (b.data.type == a.data.type &&\\n+      if (b.index == a.index &&\\n+          b.data.type == a.data.type &&\\n           b.data.title == a.data.title)\\n         return true;\\n       return false;\\n     case 7:\\n-      // fixme: we need to enable this after we \\n-//      if (b.data.type == a.data.type)\\n-//        return true;\\n+      if (b.index == a.index &&\\n+          b.data.type == a.data.type)\\n+        return true;\\n       return false;\\n     default:\\n       LOG(\\\"_commandLike: Unknown item type: \\\" + uneval(a));\\n@@ -616,14 +641,16 @@ BookmarksSyncService.prototype = {\\n       // 3) Reconcile client/server deltas and generate new deltas for them.\\n \\n       var propagations = [server['updates'], localUpdates];\\n-      var conflicts;\\n+      var conflicts = [[],[]];\\n \\n-      if (server['status'] == 1 && localUpdates.length > 0) {\\n-        LOG(\\\"Reconciling updates\\\");\\n-        var ret = this._reconcile(localUpdates, server['updates']);\\n-        propagations = ret.propagations;\\n-        conflicts = ret.conflicts;\\n-      }\\n+      // reconciliation was wrapped in this - why?\\n+      //if (server['status'] == 1 && localUpdates.length > 0) {\\n+      //}\\n+\\n+      LOG(\\\"Reconciling updates\\\");\\n+      var ret = this._reconcile(localUpdates, server['updates']);\\n+      propagations = ret.propagations;\\n+      conflicts = ret.conflicts;\\n \\n       LOG(\\\"Propagations: \\\" + uneval(propagations) + \\\"\\\\n\\\");\\n       LOG(\\\"Conflicts: \\\" + uneval(conflicts) + \\\"\\\\n\\\");\\n@@ -742,8 +769,10 @@ BookmarksSyncService.prototype = {\\n             ret.version = v;\\n         }\\n         keys = keys.sort();\\n+        LOG(\\\"TMP: \\\" + uneval(tmp));\\n         for (var i = 0; i < keys.length; i++) {\\n           this._applyCommandsToObj(tmp, ret.deltas[keys[i]]);\\n+          LOG(\\\"TMP: \\\" + uneval(tmp));\\n         }\\n         ret.status = 1;\\n         ret.updates = this._detectUpdates(this._snapshot, tmp);\\n@@ -757,12 +786,14 @@ BookmarksSyncService.prototype = {\\n       } else {\\n         LOG(\\\"Server delta can't update from our snapshot version, getting full file\\\");\\n         // generate updates from full local->remote snapshot diff\\n-        asyncRun(bind2(this, this._getServerUpdatesFull), handlers['complete'], localJson);\\n+        asyncRun(bind2(this, this._getServerUpdatesFull),\\n+                 handlers['complete'], localJson);\\n         data = yield;\\n         if (data.status == 2) {\\n           // we have a delta file but no snapshot on the server.  bad.\\n           // fixme?\\n-          LOG(\\\"Error: Delta file on server, but snapshot file missing.  New snapshot uploaded, may be inconsistent with deltas!\\\");\\n+          LOG(\\\"Error: Delta file on server, but snapshot file missing.  \\\" +\\n+              \\\"New snapshot uploaded, may be inconsistent with deltas!\\\");\\n         }\\n \\n         var tmp = eval(uneval(this._snapshot)); // fixme hack hack hack\\n@@ -852,20 +883,39 @@ BookmarksSyncService.prototype = {\\n     return h;\\n   },\\n \\n+  _onLogin: function BSS__onLogin(event) {\\n+    this._os.notifyObservers(null, \\\"bookmarks-sync:login\\\", \\\"\\\");\\n+  },\\n+\\n+  _onLoginError: function BSS__onLoginError(event) {\\n+    this._os.notifyObservers(null, \\\"bookmarks-sync:login-error\\\", \\\"\\\");\\n+  },\\n+\\n   // Interfaces this component implements.\\n   interfaces: [Ci.nsIBookmarksSyncService, Ci.nsISupports],\\n \\n-  // nsISupports\\n-\\n   // XPCOM registration\\n   classDescription: \\\"Bookmarks Sync Service\\\",\\n   contractID: \\\"@mozilla.org/places/sync-service;1\\\",\\n   classID: Components.ID(\\\"{6efd73bf-6a5a-404f-9246-f70a1286a3d6}\\\"),\\n   QueryInterface: XPCOMUtils.generateQI([Ci.nsIBookmarksSyncService, Ci.nsISupports]),\\n \\n+  // nsISupports\\n+\\n   // nsIBookmarksSyncService\\n \\n-  sync: function BSS_sync() { asyncRun(bind2(this, this._doSync)); }\\n+  sync: function BSS_sync() { asyncRun(bind2(this, this._doSync)); },\\n+\\n+  login: function BSS_login() {\\n+    this._dav.login(\\\"USER@mozilla.com\\\", \\\"PASSWORD\\\", // FIXME\\n+                    {load: bind2(this, this._onLogin),\\n+                     error: bind2(this, this._onLoginError)});\\n+  },\\n+\\n+  logout: function BSS_logout() {\\n+    this._dav.logout();\\n+    this._os.notifyObservers(null, \\\"bookmarks-sync:logout\\\", \\\"\\\");\\n+  }\\n };\\n \\n function asyncRun(func, handler, data) {\\n@@ -897,6 +947,23 @@ function DAVCollection(baseUrl) {\\n   this._baseUrl = baseUrl;\\n }\\n DAVCollection.prototype = {\\n+  _loggedIn: false,\\n+\\n+  __base64: {},\\n+  __vase64loaded: false,\\n+  get _base64() {\\n+    if (!this.__base64loaded) {\\n+      let jsLoader = Cc[\\\"@mozilla.org/moz/jssubscript-loader;1\\\"].\\n+        getService(Ci.mozIJSSubScriptLoader);\\n+      jsLoader.loadSubScript(\\\"chrome://sync/content/base64.js\\\", this.__base64);\\n+      this.__base64loaded = true;\\n+    }\\n+    return this.__base64;\\n+  },\\n+\\n+  _authString: null,\\n+  _currentUserPath: \\\"nobody\\\",\\n+\\n   _addHandler: function DC__addHandler(request, handlers, eventName) {\\n     if (handlers[eventName])\\n       request.addEventListener(eventName, new EventListener(handlers[eventName]), false);\\n@@ -921,22 +988,79 @@ DAVCollection.prototype = {\\n \\n     return request;\\n   },\\n+\\n   GET: function DC_GET(path, handlers, headers) {\\n     if (!headers)\\n       headers = {'Content-type': 'text/plain'};\\n+    if (this._authString)\\n+      headers['Authorization'] = this._authString;\\n+\\n     var request = this._makeRequest(\\\"GET\\\", path, handlers, headers);\\n     request.send(null);\\n   },\\n+\\n   PUT: function DC_PUT(path, data, handlers, headers) {\\n     if (!headers)\\n       headers = {'Content-type': 'text/plain'};\\n+    if (this._authString)\\n+      headers['Authorization'] = this._authString;\\n+\\n     var request = this._makeRequest(\\\"PUT\\\", path, handlers, headers);\\n     request.send(data);\\n   },\\n-  _runLockHandler: function DC__runLockHandler(name, event) {\\n-    if (this._lockHandlers && this._lockHandlers[name])\\n-      this._lockHandlers[name](event);\\n+\\n+  // Login / Logout\\n+\\n+  login: function DC_login(username, password, handlers) {\\n+    this._loginHandlers = handlers;\\n+    internalHandlers = {load: bind2(this, this._onLogin),\\n+                        error: bind2(this, this._onLoginError)};\\n+\\n+    this._authString = \\\"Basic \\\" +\\n+      this._base64.Base64.encode(username + \\\":\\\" + password);\\n+    headers = {'Authorization': this._authString};\\n+\\n+    let request = this._makeRequest(\\\"GET\\\", \\\"\\\", internalHandlers, headers);\\n+    request.send(null);\\n+  },\\n+\\n+  logout: function DC_logout() {\\n+    this._authString = null;\\n+  },\\n+\\n+  _onLogin: function DC__onLogin(event) {\\n+    //LOG(\\\"logged in (\\\" + event.target.status + \\\"):\\\\n\\\" +\\n+    //    event.target.responseText + \\\"\\\\n\\\");\\n+\\n+    if (event.target.status != 200) {\\n+      this._onLoginError(event);\\n+      return;\\n+    }\\n+\\n+    let hello = /Hello (.+)@mozilla.com/.exec(event.target.responseText)\\n+    if (hello) {\\n+      this._currentUserPath = hello[1];\\t\\n+      this._baseUrl = \\\"http://dotmoz.mozilla.org/~\\\" +\\n+        this._currentUserPath + \\\"/\\\";\\n+    }\\n+\\n+    this._loggedIn = true;\\n+\\n+    if (this._loginHandlers && this._loginHandlers.load)\\n+      this._loginHandlers.load(event);\\n+  },\\n+  _onLoginError: function DC__onLoginError(event) {\\n+    LOG(\\\"login failed (\\\" + event.target.status + \\\"):\\\\n\\\" +\\n+        event.target.responseText + \\\"\\\\n\\\");\\n+\\n+    this._loggedIn = false;\\n+\\n+    if (this._loginHandlers && this._loginHandlers.error)\\n+      this._loginHandlers.error(event);\\n   },\\n+\\n+  // Locking\\n+\\n   // FIXME: make this function not reentrant\\n   lock: function DC_lock(handlers) {\\n     this._lockHandlers = handlers;\\n@@ -950,15 +1074,7 @@ DAVCollection.prototype = {\\n                  \\\"  <D:lockscope><D:exclusive/></D:lockscope>\\\\n\\\" +\\n                  \\\"</D:lockinfo>\\\");\\n   },\\n-  _onLock: function DC__onLock(event) {\\n-    LOG(\\\"acquired lock (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n-    this._token = \\\"woo\\\";\\n-    this._runLockHandler(\\\"load\\\", event);\\n-  },\\n-  _onLockError: function DC__onLockError(event) {\\n-    LOG(\\\"lock failed (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n-    this._runLockHandler(\\\"error\\\", event);\\n-  },\\n+\\n   // FIXME: make this function not reentrant\\n   unlock: function DC_unlock(handlers) {\\n     this._lockHandlers = handlers;\\n@@ -968,14 +1084,29 @@ DAVCollection.prototype = {\\n     var request = this._makeRequest(\\\"UNLOCK\\\", \\\"\\\", internalHandlers, headers);\\n     request.send(null);\\n   },\\n+\\n+  _onLock: function DC__onLock(event) {\\n+    LOG(\\\"acquired lock (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n+    this._token = \\\"woo\\\";\\n+    if (this._lockHandlers && this._lockHandlers.load)\\n+      this._lockHandlers.load(event);\\n+  },\\n+  _onLockError: function DC__onLockError(event) {\\n+    LOG(\\\"lock failed (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n+    if (this._lockHandlers && this._lockHandlers.error)\\n+      this._lockHandlers.error(event);\\n+  },\\n+\\n   _onUnlock: function DC__onUnlock(event) {\\n     LOG(\\\"removed lock (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n     this._token = null;\\n-    this._runLockHandler(\\\"load\\\", event);\\n+    if (this._lockHandlers && this._lockHandlers.load)\\n+      this._lockHandlers.load(event);\\n   },\\n   _onUnlockError: function DC__onUnlockError(event) {\\n     LOG(\\\"unlock failed (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n-    this._runLockHandler(\\\"error\\\", event);\\n+    if (this._lockHandlers && this._lockHandlers.error)\\n+      this._lockHandlers.error(event);\\n   },\\n };\\n \\ndiff --git a/services/sync/nsIBookmarksSyncService.idl b/services/sync/nsIBookmarksSyncService.idl\\nindex f7ad26c..395ca8c 100644\\n--- a/services/sync/nsIBookmarksSyncService.idl\\n+++ b/services/sync/nsIBookmarksSyncService.idl\\n@@ -38,8 +38,26 @@\\n \\n #include \\\"nsISupports.idl\\\"\\n \\n-[scriptable, uuid(1f00216a-4d2d-40e8-b4c5-afa3338a2d6c)]\\n+[scriptable, uuid(b3e52c09-5c33-4d07-a3e6-7c453d0c4be8)]\\n interface nsIBookmarksSyncService : nsISupports\\n {\\n+  /**\\n+   * The currently logged-in user\\n+   */\\n+  readonly attribute AString currentUser;\\n+\\n+  /**\\n+   * Log into the server.  Pre-requisite for sync().\\n+   */\\n+  void login();\\n+\\n+  /**\\n+   * Log out of the server.\\n+   */\\n+  void logout();\\n+\\n+  /**\\n+   * Initiate a sync operation.\\n+   */\\n   void sync();\\n };\\n\""}