{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas4d15a32\""},"diff":"\"4d15a32 Bug 348748 - Remove cast macros from trace-malloc.  r=bsmedberg on the script, a=NPOTDB+no-functionality-change\\ndiff --git a/tools/trace-malloc/leaksoup.cpp b/tools/trace-malloc/leaksoup.cpp\\nindex 07be42f..4a3ea6d 100644\\n--- a/tools/trace-malloc/leaksoup.cpp\\n+++ b/tools/trace-malloc/leaksoup.cpp\\n@@ -78,15 +78,15 @@ static PLHashNumber hash_pointer(const void *key)\\n \\n static int sort_by_index(const void* e1, const void* e2, void*)\\n {\\n-    const AllocationNode *n1 = *NS_STATIC_CAST(const AllocationNode*const*, e1);\\n-    const AllocationNode *n2 = *NS_STATIC_CAST(const AllocationNode*const*, e2);\\n+    const AllocationNode *n1 = *static_cast<const AllocationNode*const*>(e1);\\n+    const AllocationNode *n2 = *static_cast<const AllocationNode*const*>(e2);\\n     return n1->index - n2->index;\\n }\\n \\n static int sort_by_reverse_index(const void* e1, const void* e2, void*)\\n {\\n-    const AllocationNode *n1 = *NS_STATIC_CAST(const AllocationNode*const*, e1);\\n-    const AllocationNode *n2 = *NS_STATIC_CAST(const AllocationNode*const*, e2);\\n+    const AllocationNode *n1 = *static_cast<const AllocationNode*const*>(e1);\\n+    const AllocationNode *n2 = *static_cast<const AllocationNode*const*>(e2);\\n     return n2->index - n1->index;\\n }\\n \\n@@ -206,7 +206,7 @@ int main(int argc, char **argv)\\n             do {\\n                 PRUint32 pos = stack.Count() - 1;\\n                 AllocationNode *n =\\n-                    NS_STATIC_CAST(AllocationNode*, stack[pos]);\\n+                    static_cast<AllocationNode*>(stack[pos]);\\n                 if (n->reached) {\\n                     n->index = dfs_index++;\\n                     stack.RemoveElementAt(pos);\\n@@ -217,7 +217,7 @@ int main(int argc, char **argv)\\n                     // careful not to put reached nodes into the stack.\\n                     nsVoidArray &pt = n->pointers_to;\\n                     for (PRInt32 i = pt.Count() - 1; i >= 0; --i) {\\n-                        if (!NS_STATIC_CAST(AllocationNode*, pt[i])->reached) {\\n+                        if (!static_cast<AllocationNode*>(pt[i])->reached) {\\n                             stack.AppendElement(pt[i]);\\n                         }\\n                     }\\n@@ -260,7 +260,7 @@ int main(int argc, char **argv)\\n             do {\\n                 PRUint32 pos = stack.Count() - 1;\\n                 AllocationNode *n =\\n-                    NS_STATIC_CAST(AllocationNode*, stack[pos]);\\n+                    static_cast<AllocationNode*>(stack[pos]);\\n                 stack.RemoveElementAt(pos);\\n \\n                 if (!n->reached) {\\n@@ -291,7 +291,7 @@ int main(int argc, char **argv)\\n             // different SCC to stack:\\n             for (int i = n->pointers_to.Count() - 1; i >= 0; --i) {\\n                 AllocationNode *target =\\n-                    NS_STATIC_CAST(AllocationNode*, n->pointers_to[i]);\\n+                    static_cast<AllocationNode*>(n->pointers_to[i]);\\n                 if (n->index != target->index) {\\n                     stack.AppendElement(target);\\n                 }\\n@@ -300,7 +300,7 @@ int main(int argc, char **argv)\\n             while (stack.Count() > 0) {\\n                 PRUint32 pos = stack.Count() - 1;\\n                 AllocationNode *n =\\n-                    NS_STATIC_CAST(AllocationNode*, stack[pos]);\\n+                    static_cast<AllocationNode*>(stack[pos]);\\n                 stack.RemoveElementAt(pos);\\n \\n                 if (n->is_root) {\\n@@ -402,8 +402,8 @@ int main(int argc, char **argv)\\n                     printf(\\\"\\\\nPointers from:\\\\n\\\");\\n                     for (PRUint32 i = 0, i_end = n->pointers_from.Count();\\n                          i != i_end; ++i) {\\n-                        AllocationNode *t = NS_STATIC_CAST(AllocationNode*,\\n-                                                          n->pointers_from[i]);\\n+                        AllocationNode *t = static_cast<AllocationNode*>\\n+                                                       (n->pointers_from[i]);\\n                         const ADLog::Entry *te = t->entry;\\n                         printf(\\\"    <a href=\\\\\\\"#o%d\\\\\\\">%s</a> (Object %d, \\\",\\n                                t - nodes, te->type, t - nodes);\\n\""}