{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basa616bf1\""},"diff":"\"a616bf1 Bug 396336 - header of xul:list is not accessible, r=Evan.Yan, r=enndeakin, sr=neil, a=dsicore\\ndiff --git a/accessible/public/nsIAccessibleProvider.idl b/accessible/public/nsIAccessibleProvider.idl\\nindex 680a205..9e6db44 100644\\n--- a/accessible/public/nsIAccessibleProvider.idl\\n+++ b/accessible/public/nsIAccessibleProvider.idl\\n@@ -72,6 +72,8 @@ interface nsIAccessibleProvider : nsISupports\\n   const long XULLink = 0x0000100A;\\n   const long XULListbox = 0x0000100B;\\n   const long XULListitem = 0x0000100C;\\n+  const long XULListHead = 0x00001024;\\n+  const long XULListHeader = 0x00001025;\\n   const long XULMenubar = 0x0000100D;\\n   const long XULMenuitem = 0x0000100E;\\n   const long XULMenupopup = 0x0000100F;\\n@@ -97,7 +99,7 @@ interface nsIAccessibleProvider : nsISupports\\n   const long XULThumb            = 0x0000101B;\\n   const long XULTree             = 0x0000101C;\\n   const long XULTreeColumns      = 0x0000101D;\\n-  const long XULTreeColumnitem   = 0x0000101E;\\n+  const long XULTreeColumnItem   = 0x0000101E;\\n   const long XULToolbar          = 0x0000101F;\\n   const long XULToolbarSeparator = 0x00001020;\\n   const long XULTooltip          = 0x00001021;\\ndiff --git a/accessible/src/atk/nsMaiInterfaceTable.cpp b/accessible/src/atk/nsMaiInterfaceTable.cpp\\nindex 661eb7d..0371df4 100644\\n--- a/accessible/src/atk/nsMaiInterfaceTable.cpp\\n+++ b/accessible/src/atk/nsMaiInterfaceTable.cpp\\n@@ -287,7 +287,7 @@ getColumnHeaderCB(AtkTable *aTable, gint aColumn)\\n     //\\n     // 1. \\\"getColumnHeaderCB\\\" defined in AtkTableIface should return object\\n     // whose role is \\\"ATK_ROLE_TABLE_COLUMN_HEADER\\\", which is implemented\\n-    // by nsXULTreeColumnitemAccessible.\\n+    // by nsXULTreeColumnItemAccessible.\\n     //\\n     // 2. \\\"GetColumnHeader\\\" defined in nsIAccessibleTable returns\\n     // nsXULTreeColumnsAccessibleWrap, which exports nsIAccessibleTable and is\\ndiff --git a/accessible/src/base/nsAccessibilityService.cpp b/accessible/src/base/nsAccessibilityService.cpp\\nindex 95f22f1..c94fd53 100644\\n--- a/accessible/src/base/nsAccessibilityService.cpp\\n+++ b/accessible/src/base/nsAccessibilityService.cpp\\n@@ -1603,6 +1603,12 @@ nsresult nsAccessibilityService::GetAccessibleByType(nsIDOMNode *aNode,\\n     case nsIAccessibleProvider::XULListbox:\\n       *aAccessible = new nsXULListboxAccessible(aNode, weakShell);\\n       break;\\n+    case nsIAccessibleProvider::XULListHead:\\n+      *aAccessible = new nsXULColumnsAccessible(aNode, weakShell);\\n+      break;\\n+    case nsIAccessibleProvider::XULListHeader:\\n+      *aAccessible = new nsXULColumnItemAccessible(aNode, weakShell);\\n+      break;\\n     case nsIAccessibleProvider::XULListitem:\\n       *aAccessible = new nsXULListitemAccessible(aNode, weakShell);\\n       break;\\n@@ -1673,8 +1679,8 @@ nsresult nsAccessibilityService::GetAccessibleByType(nsIDOMNode *aNode,\\n     case nsIAccessibleProvider::XULTreeColumns:\\n       *aAccessible = new nsXULTreeColumnsAccessibleWrap(aNode, weakShell);\\n       break;\\n-    case nsIAccessibleProvider::XULTreeColumnitem:\\n-      *aAccessible = new nsXULTreeColumnitemAccessible(aNode, weakShell);\\n+    case nsIAccessibleProvider::XULTreeColumnItem:\\n+      *aAccessible = new nsXULColumnItemAccessible(aNode, weakShell);\\n       break;\\n     case nsIAccessibleProvider::XULToolbar:\\n       *aAccessible = new nsXULToolbarAccessible(aNode, weakShell);\\ndiff --git a/accessible/src/xul/nsXULSelectAccessible.cpp b/accessible/src/xul/nsXULSelectAccessible.cpp\\nindex dae6e63..f80f0ae 100644\\n--- a/accessible/src/xul/nsXULSelectAccessible.cpp\\n+++ b/accessible/src/xul/nsXULSelectAccessible.cpp\\n@@ -48,24 +48,102 @@\\n #include \\\"nsIServiceManager.h\\\"\\n #include \\\"nsCaseTreatment.h\\\"\\n \\n-/**\\n-  * Selects, Listboxes and Comboboxes, are made up of a number of different\\n-  *  widgets, some of which are shared between the two. This file contains\\n-  *  all of the widgets for both of the Selects, for XUL only.\\n-  *  (except nsXULRadioGroupAccessible which inherits\\n-  *   nsXULSelectableAccessible so that it supports nsIAccessibleSelectable)\\n-  *\\n-  *  Listbox:\\n-  *     - nsXULListboxAccessible              <richlistbox/>\\n-  *         - nsXULListitemAccessible         <richlistitem/>\\n-  *\\n-  *  Comboboxes:\\n-  *     - nsXULComboboxAccessible             <menulist/>\\n-  *        - nsXULMenuAccessible              <menupopup/>\\n-  *            - nsXULMenuitemAccessible      <menuitem/>\\n-  */\\n+////////////////////////////////////////////////////////////////////////////////\\n+// nsXULColumnsAccessible\\n+\\n+nsXULColumnsAccessible::\\n+  nsXULColumnsAccessible(nsIDOMNode *aDOMNode, nsIWeakReference *aShell) :\\n+  nsAccessibleWrap(aDOMNode, aShell)\\n+{\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXULColumnsAccessible::GetRole(PRUint32 *aRole)\\n+{\\n+  NS_ENSURE_ARG_POINTER(aRole);\\n+\\n+  *aRole = nsIAccessibleRole::ROLE_LIST;\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXULColumnsAccessible::GetState(PRUint32 *aState, PRUint32 *aExtraState)\\n+{\\n+  NS_ENSURE_ARG_POINTER(aState);\\n+\\n+  if (aExtraState)\\n+    *aExtraState = 0;\\n+\\n+  *aState = nsIAccessibleStates::STATE_READONLY;\\n+  return NS_OK;\\n+}\\n+\\n+////////////////////////////////////////////////////////////////////////////////\\n+// nsXULColumnItemAccessible\\n+\\n+nsXULColumnItemAccessible::\\n+  nsXULColumnItemAccessible(nsIDOMNode *aDOMNode, nsIWeakReference *aShell) :\\n+  nsLeafAccessible(aDOMNode, aShell)\\n+{\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXULColumnItemAccessible::GetRole(PRUint32 *aRole)\\n+{\\n+  NS_ENSURE_ARG_POINTER(aRole);\\n+\\n+  *aRole = nsIAccessibleRole::ROLE_COLUMNHEADER;\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXULColumnItemAccessible::GetState(PRUint32 *aState, PRUint32 *aExtraState)\\n+{\\n+  NS_ENSURE_ARG_POINTER(aState);\\n+\\n+  if (aExtraState)\\n+    *aExtraState = 0;\\n+\\n+  *aState = nsIAccessibleStates::STATE_READONLY;\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXULColumnItemAccessible::GetName(nsAString& aName)\\n+{\\n+  return GetXULName(aName);\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXULColumnItemAccessible::GetNumActions(PRUint8 *aNumActions)\\n+{\\n+  NS_ENSURE_ARG_POINTER(aNumActions);\\n+\\n+  *aNumActions = 1;\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXULColumnItemAccessible::GetActionName(PRUint8 aIndex, nsAString& aName)\\n+{\\n+  if (aIndex != eAction_Click)\\n+    return NS_ERROR_INVALID_ARG;\\n+\\n+  aName.AssignLiteral(\\\"click\\\");\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXULColumnItemAccessible::DoAction(PRUint8 aIndex)\\n+{\\n+  if (aIndex != eAction_Click)\\n+    return NS_ERROR_INVALID_ARG;\\n+\\n+  return DoCommand();\\n+}\\n \\n-/** ----- nsXULListboxAccessible ----- */\\n+////////////////////////////////////////////////////////////////////////////////\\n+// nsXULListboxAccessible\\n \\n /** Constructor */\\n nsXULListboxAccessible::nsXULListboxAccessible(nsIDOMNode* aDOMNode, nsIWeakReference* aShell):\\ndiff --git a/accessible/src/xul/nsXULSelectAccessible.h b/accessible/src/xul/nsXULSelectAccessible.h\\nindex 72a23d4..b256ecd 100644\\n--- a/accessible/src/xul/nsXULSelectAccessible.h\\n+++ b/accessible/src/xul/nsXULSelectAccessible.h\\n@@ -40,13 +40,49 @@\\n \\n #include \\\"nsCOMPtr.h\\\"\\n #include \\\"nsXULMenuAccessible.h\\\"\\n+#include \\\"nsBaseWidgetAccessible.h\\\"\\n \\n class nsIWeakReference;\\n \\n /**\\n-  * Selects, Listboxes and Comboboxes, are made up of a number of different\\n-  *  widgets, some of which are shared between the two. This file contains \\n-  *  all of the widgets for both of the Selects, for XUL only.\\n+ * nsXULColumnsAccessible are accessible for list and tree columns elements\\n+ * (xul:treecols and xul:listcols).\\n+ */\\n+class nsXULColumnsAccessible : public nsAccessibleWrap\\n+{\\n+public:\\n+  nsXULColumnsAccessible(nsIDOMNode* aDOMNode, nsIWeakReference* aShell);\\n+\\n+  // nsIAccessible\\n+  NS_IMETHOD GetRole(PRUint32 *aRole);\\n+  NS_IMETHOD GetState(PRUint32 *aState, PRUint32 *aExtraState);\\n+};\\n+\\n+/**\\n+ * nsXULColumnAccessible are accessibles for list and tree column elements\\n+ * (xul:listcol and xul:treecol).\\n+ */\\n+class nsXULColumnItemAccessible : public nsLeafAccessible\\n+{\\n+public:\\n+  nsXULColumnItemAccessible(nsIDOMNode* aDOMNode, nsIWeakReference* aShell);\\n+\\n+  // nsIAccessible\\n+  NS_IMETHOD GetRole(PRUint32 *aRole);\\n+  NS_IMETHOD GetName(nsAString& aName);\\n+  NS_IMETHOD GetState(PRUint32 *aState, PRUint32 *aExtraState);\\n+\\n+  NS_IMETHOD GetNumActions(PRUint8 *aNumActions);\\n+  NS_IMETHOD GetActionName(PRUint8 aIndex, nsAString& aName);\\n+  NS_IMETHOD DoAction(PRUint8 aIndex);\\n+\\n+  enum { eAction_Click = 0 };\\n+};\\n+\\n+/**\\n+  * Listboxes (xul:listbox) and Comboboxes (xul:menulist) are made up of a\\n+  * number of different widgets, some of which are shared between the two.\\n+  * This file contains all of the widgets for both of them, for XUL only.\\n   *\\n   *  Listbox:\\n   *     - nsXULListboxAccessible\\ndiff --git a/accessible/src/xul/nsXULTreeAccessible.cpp b/accessible/src/xul/nsXULTreeAccessible.cpp\\nindex cdb62d2..d5dbfcd 100644\\n--- a/accessible/src/xul/nsXULTreeAccessible.cpp\\n+++ b/accessible/src/xul/nsXULTreeAccessible.cpp\\n@@ -1049,50 +1049,18 @@ NS_IMETHODIMP nsXULTreeitemAccessible::GetAccessibleRelated(PRUint32 aRelationTy\\n #endif\\n }\\n \\n-// ---------- nsXULTreeColumnsAccessible ----------\\n-\\n-nsXULTreeColumnsAccessible::nsXULTreeColumnsAccessible(nsIDOMNode *aDOMNode, nsIWeakReference *aShell):\\n-nsAccessibleWrap(aDOMNode, aShell)\\n+////////////////////////////////////////////////////////////////////////////////\\n+//  nsXULTreeColumnsAccessible\\n+nsXULTreeColumnsAccessible::\\n+  nsXULTreeColumnsAccessible(nsIDOMNode* aDOMNode, nsIWeakReference* aShell):\\n+  nsXULColumnsAccessible(aDOMNode, aShell)\\n {\\n }\\n \\n-NS_IMPL_ISUPPORTS_INHERITED0(nsXULTreeColumnsAccessible, nsAccessible)\\n-\\n NS_IMETHODIMP\\n-nsXULTreeColumnsAccessible::GetState(PRUint32 *aState, PRUint32 *aExtraState)\\n-{\\n-  if (aExtraState)\\n-    *aExtraState = 0;\\n-\\n-  *aState = nsIAccessibleStates::STATE_READONLY;\\n-  return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnsAccessible::GetRole(PRUint32 *_retval)\\n-{\\n-  *_retval = nsIAccessibleRole::ROLE_LIST;\\n-  return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnsAccessible::GetNumActions(PRUint8 *_retval)\\n-{\\n-  *_retval = 1;\\n-  return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnsAccessible::GetActionName(PRUint8 aIndex, nsAString& aName)\\n-{\\n-  if (aIndex == eAction_Click) {\\n-    aName.AssignLiteral(\\\"click\\\");\\n-    return NS_OK;\\n-  }\\n-\\n-  return NS_ERROR_INVALID_ARG;\\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnsAccessible::GetNextSibling(nsIAccessible **aNextSibling) \\n+nsXULTreeColumnsAccessible::GetNextSibling(nsIAccessible **aNextSibling)\\n {\\n-  nsresult ret = nsAccessible::GetNextSibling(aNextSibling);\\n+  nsresult ret = nsXULColumnsAccessible::GetNextSibling(aNextSibling);\\n \\n   if (*aNextSibling == nsnull) { // if there is not other sibling, use the first row as its sibling\\n     nsCOMPtr<nsITreeBoxObject> tree;\\n@@ -1114,73 +1082,6 @@ NS_IMETHODIMP nsXULTreeColumnsAccessible::GetNextSibling(nsIAccessible **aNextSi\\n     }\\n   }\\n \\n-  return ret;  \\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnsAccessible::GetPreviousSibling(nsIAccessible **aPreviousSibling) \\n-{  \\n-  return nsAccessible::GetPreviousSibling(aPreviousSibling);\\n+  return ret;\\n }\\n \\n-NS_IMETHODIMP nsXULTreeColumnsAccessible::DoAction(PRUint8 index)\\n-{\\n-  if (index == eAction_Click)\\n-    return NS_OK;\\n-\\n-  return NS_ERROR_INVALID_ARG;\\n-}\\n-\\n-// ---------- nsXULTreeColumnitemAccessible ----------\\n-\\n-nsXULTreeColumnitemAccessible::nsXULTreeColumnitemAccessible(nsIDOMNode *aDOMNode, nsIWeakReference *aShell):\\n-nsLeafAccessible(aDOMNode, aShell)\\n-{\\n-}\\n-\\n-NS_IMPL_ISUPPORTS_INHERITED0(nsXULTreeColumnitemAccessible, nsLeafAccessible)\\n-\\n-NS_IMETHODIMP\\n-nsXULTreeColumnitemAccessible::GetState(PRUint32 *aState, PRUint32 *aExtraState)\\n-{\\n-  if (aExtraState)\\n-    *aExtraState = 0;\\n-\\n-  *aState = nsIAccessibleStates::STATE_READONLY;\\n-  return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnitemAccessible::GetName(nsAString& _retval)\\n-{\\n-  return GetXULName(_retval);\\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnitemAccessible::GetRole(PRUint32 *_retval)\\n-{\\n-  *_retval = nsIAccessibleRole::ROLE_COLUMNHEADER;\\n-  return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnitemAccessible::GetNumActions(PRUint8 *_retval)\\n-{\\n-  *_retval = 1;\\n-  return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnitemAccessible::GetActionName(PRUint8 aIndex, nsAString& aName)\\n-{\\n-  if (aIndex == eAction_Click) {\\n-    aName.AssignLiteral(\\\"click\\\");\\n-    return NS_OK;\\n-  }\\n-\\n-  return NS_ERROR_INVALID_ARG;\\n-}\\n-\\n-NS_IMETHODIMP nsXULTreeColumnitemAccessible::DoAction(PRUint8 index)\\n-{\\n-  if (index == eAction_Click) {\\n-    return DoCommand();\\n-  }\\n-\\n-  return NS_ERROR_INVALID_ARG;\\n-}\\ndiff --git a/accessible/src/xul/nsXULTreeAccessible.h b/accessible/src/xul/nsXULTreeAccessible.h\\nindex a0e39f8..7710f6d 100644\\n--- a/accessible/src/xul/nsXULTreeAccessible.h\\n+++ b/accessible/src/xul/nsXULTreeAccessible.h\\n@@ -38,7 +38,6 @@\\n #ifndef __nsXULTreeAccessible_h__\\n #define __nsXULTreeAccessible_h__\\n \\n-#include \\\"nsBaseWidgetAccessible.h\\\"\\n #include \\\"nsITreeBoxObject.h\\\"\\n #include \\\"nsITreeView.h\\\"\\n #include \\\"nsITreeColumns.h\\\"\\n@@ -135,46 +134,13 @@ protected:\\n   nsCOMPtr<nsITreeColumn> mColumn;\\n };\\n \\n-class nsXULTreeColumnsAccessible : public nsAccessibleWrap\\n+class nsXULTreeColumnsAccessible : public nsXULColumnsAccessible\\n {\\n public:\\n-  enum { eAction_Click = 0 };\\n-\\n-  NS_DECL_ISUPPORTS_INHERITED\\n-\\n   nsXULTreeColumnsAccessible(nsIDOMNode* aDOMNode, nsIWeakReference* aShell);\\n-  virtual ~nsXULTreeColumnsAccessible() {}\\n-\\n-  /* ----- nsIAccessible ----- */\\n-  NS_IMETHOD GetRole(PRUint32 *_retval);\\n-  NS_IMETHOD GetState(PRUint32 *aState, PRUint32 *aExtraState);\\n-  NS_IMETHOD GetNumActions(PRUint8 *_retval);\\n-  NS_IMETHOD GetActionName(PRUint8 aIndex, nsAString& aName);\\n \\n-  NS_IMETHOD GetNextSibling(nsIAccessible **_retval); \\n-  NS_IMETHOD GetPreviousSibling(nsIAccessible **_retval); \\n-\\n-  NS_IMETHOD DoAction(PRUint8 index);\\n-};\\n-\\n-class nsXULTreeColumnitemAccessible : public nsLeafAccessible\\n-{\\n-public:\\n-  enum { eAction_Click = 0 };\\n-\\n-  NS_DECL_ISUPPORTS_INHERITED\\n-\\n-  nsXULTreeColumnitemAccessible(nsIDOMNode* aDOMNode, nsIWeakReference* aShell);\\n-  virtual ~nsXULTreeColumnitemAccessible() {}\\n-\\n-  /* ----- nsIAccessible ----- */\\n-  NS_IMETHOD GetName(nsAString& _retval);\\n-  NS_IMETHOD GetRole(PRUint32 *_retval);\\n-  NS_IMETHOD GetState(PRUint32 *aState, PRUint32 *aExtraState);\\n-  NS_IMETHOD GetNumActions(PRUint8 *_retval);\\n-  NS_IMETHOD GetActionName(PRUint8 aIndex, nsAString& aName);\\n-\\n-  NS_IMETHOD DoAction(PRUint8 index);\\n+  // nsIAccessible\\n+  NS_IMETHOD GetNextSibling(nsIAccessible **aNextSibling);\\n };\\n \\n #endif\\ndiff --git a/toolkit/content/xul.css b/toolkit/content/xul.css\\nindex a4c4b71..469d3ff 100644\\n--- a/toolkit/content/xul.css\\n+++ b/toolkit/content/xul.css\\n@@ -426,10 +426,6 @@ listbox {\\n   -moz-binding: url(\\\"chrome://global/content/bindings/listbox.xml#listbox\\\");\\n }\\n \\n-listcols, listcol {\\n-  -moz-binding: url(\\\"chrome://global/content/bindings/listbox.xml#listbox-base\\\");\\n-}\\n-\\n listhead {\\n   -moz-binding: url(\\\"chrome://global/content/bindings/listbox.xml#listhead\\\");\\n }\\n\""}