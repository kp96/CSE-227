{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basaf6d8d5\""},"diff":"\"af6d8d5 391100 move nsAutoWindowStateHelper from nsPrompt to nsPromptService r=bz sr=jst a=bz\\ndiff --git a/embedding/components/windowwatcher/src/nsPrompt.cpp b/embedding/components/windowwatcher/src/nsPrompt.cpp\\nindex 1358924..562e84f 100644\\n--- a/embedding/components/windowwatcher/src/nsPrompt.cpp\\n+++ b/embedding/components/windowwatcher/src/nsPrompt.cpp\\n@@ -46,11 +46,6 @@\\n #include \\\"nsIStringBundle.h\\\"\\n #include \\\"nsIChannel.h\\\"\\n #include \\\"nsIURI.h\\\"\\n-#include \\\"nsIDOMDocument.h\\\"\\n-#include \\\"nsIDOMDocumentEvent.h\\\"\\n-#include \\\"nsIDOMEventTarget.h\\\"\\n-#include \\\"nsIDOMEvent.h\\\"\\n-#include \\\"nsIPrivateDOMEvent.h\\\"\\n #include \\\"nsEmbedCID.h\\\"\\n #include \\\"nsNetCID.h\\\"\\n #include \\\"nsPIDOMWindow.h\\\"\\n@@ -176,80 +171,10 @@ nsPrompt::Init()\\n // nsPrompt::nsIPrompt\\n //*****************************************************************************\\n \\n-nsAutoWindowStateHelper::nsAutoWindowStateHelper(nsIDOMWindow *aWindow)\\n-  : mWindow(aWindow),\\n-    mDefaultEnabled(DispatchCustomEvent(\\\"DOMWillOpenModalDialog\\\"))\\n-{\\n-  nsCOMPtr<nsPIDOMWindow> window(do_QueryInterface(aWindow));\\n-\\n-  if (window) {\\n-    window->EnterModalState();\\n-  }\\n-}\\n-\\n-nsAutoWindowStateHelper::~nsAutoWindowStateHelper()\\n-{\\n-  nsCOMPtr<nsPIDOMWindow> window(do_QueryInterface(mWindow));\\n-\\n-  if (window) {\\n-    window->LeaveModalState();\\n-  }\\n-\\n-  if (mDefaultEnabled) {\\n-    DispatchCustomEvent(\\\"DOMModalDialogClosed\\\");\\n-  }\\n-}\\n-\\n-PRBool\\n-nsAutoWindowStateHelper::DispatchCustomEvent(const char *aEventName)\\n-{\\n-  if (!mWindow) {\\n-    return PR_TRUE;\\n-  }\\n-\\n-#ifdef DEBUG\\n-  {\\n-    nsCOMPtr<nsPIDOMWindow> window(do_QueryInterface(mWindow));\\n-  }\\n-#endif\\n-\\n-  nsCOMPtr<nsIDOMDocument> domdoc;\\n-  mWindow->GetDocument(getter_AddRefs(domdoc));\\n-\\n-  nsCOMPtr<nsIDOMDocumentEvent> docevent(do_QueryInterface(domdoc));\\n-  nsCOMPtr<nsIDOMEvent> event;\\n-\\n-  PRBool defaultActionEnabled = PR_TRUE;\\n-\\n-  if (docevent) {\\n-    docevent->CreateEvent(NS_LITERAL_STRING(\\\"Events\\\"), getter_AddRefs(event));\\n-\\n-    nsCOMPtr<nsIPrivateDOMEvent> privateEvent(do_QueryInterface(event));\\n-    if (privateEvent) {\\n-      event->InitEvent(NS_ConvertASCIItoUTF16(aEventName), PR_TRUE, PR_TRUE);\\n-\\n-      privateEvent->SetTrusted(PR_TRUE);\\n-\\n-      nsCOMPtr<nsIDOMEventTarget> target(do_QueryInterface(mWindow));\\n-\\n-      target->DispatchEvent(event, &defaultActionEnabled);\\n-    }\\n-  }\\n-\\n-  return defaultActionEnabled;\\n-}\\n-\\n-\\n NS_IMETHODIMP\\n nsPrompt::Alert(const PRUnichar* dialogTitle, \\n                 const PRUnichar* text)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    return NS_OK;\\n-  }\\n-\\n   return mPromptService->Alert(mParent, dialogTitle, text);\\n }\\n \\n@@ -259,13 +184,6 @@ nsPrompt::AlertCheck(const PRUnichar* dialogTitle,\\n                      const PRUnichar* checkMsg,\\n                      PRBool *checkValue)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // checkValue is an inout parameter, so we don't have to set it\\n-    return NS_OK;\\n-  }\\n-\\n   return mPromptService->AlertCheck(mParent, dialogTitle, text, checkMsg,\\n                                     checkValue);\\n }\\n@@ -275,14 +193,6 @@ nsPrompt::Confirm(const PRUnichar* dialogTitle,\\n                   const PRUnichar* text,\\n                   PRBool *_retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel\\n-    *_retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   return mPromptService->Confirm(mParent, dialogTitle, text, _retval);\\n }\\n \\n@@ -293,14 +203,6 @@ nsPrompt::ConfirmCheck(const PRUnichar* dialogTitle,\\n                        PRBool *checkValue,\\n                        PRBool *_retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel. checkValue is an inout parameter, so we don't have to set it\\n-    *_retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   return mPromptService->ConfirmCheck(mParent, dialogTitle, text, checkMsg,\\n                                       checkValue, _retval);\\n }\\n@@ -316,16 +218,6 @@ nsPrompt::ConfirmEx(const PRUnichar *dialogTitle,\\n                     PRBool *checkValue,\\n                     PRInt32 *buttonPressed)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Return 1 to match what happens when the dialog is closed by the window\\n-    // manager (This is indeed independent of what the default button is).\\n-    // checkValue is an inout parameter, so we don't have to set it.\\n-    *buttonPressed = 1;\\n-    return NS_OK;\\n-  }\\n-\\n   return mPromptService->ConfirmEx(mParent, dialogTitle, text, buttonFlags,\\n                                    button0Title, button1Title, button2Title,\\n                                    checkMsg, checkValue, buttonPressed);\\n@@ -339,15 +231,6 @@ nsPrompt::Prompt(const PRUnichar *dialogTitle,\\n                  PRBool *checkValue,\\n                  PRBool *_retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel. answer and checkValue are inout parameters, so we\\n-    // don't have to set them.\\n-    *_retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   return mPromptService->Prompt(mParent, dialogTitle, text, answer, checkMsg,\\n                                 checkValue, _retval);\\n }\\n@@ -361,15 +244,6 @@ nsPrompt::PromptUsernameAndPassword(const PRUnichar *dialogTitle,\\n                                     PRBool *checkValue,\\n                                     PRBool *_retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel. username, password and checkValue are inout\\n-    // parameters, so we don't have to set them.\\n-    *_retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   return mPromptService->PromptUsernameAndPassword(mParent, dialogTitle, text,\\n                                                    username, password,\\n                                                    checkMsg, checkValue,\\n@@ -384,15 +258,6 @@ nsPrompt::PromptPassword(const PRUnichar *dialogTitle,\\n                          PRBool *checkValue,\\n                          PRBool *_retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel. password and checkValue are inout parameters, so we\\n-    // don't have to touch them.\\n-    *_retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   return mPromptService->PromptPassword(mParent, dialogTitle, text, password,\\n                                         checkMsg, checkValue, _retval);\\n }\\n@@ -405,15 +270,6 @@ nsPrompt::Select(const PRUnichar *dialogTitle,\\n                  PRInt32 *outSelection,\\n                  PRBool *_retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel and item 0\\n-    *outSelection = 0;\\n-    *_retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   return mPromptService->Select(mParent, dialogTitle, inMsg, inCount, inList,\\n                                 outSelection, _retval);\\n }\\n@@ -433,15 +289,6 @@ nsPrompt::Prompt(const PRUnichar* dialogTitle,\\n                  PRUnichar* *result,\\n                  PRBool *_retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel\\n-    *result = nsnull;\\n-    *_retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   // Ignore passwordRealm and savePassword\\n   if (defaultText) {\\n     *result = ToNewUnicode(nsDependentString(defaultText));\\n@@ -464,16 +311,6 @@ nsPrompt::PromptUsernameAndPassword(const PRUnichar* dialogTitle,\\n                                     PRUnichar* *pwd,\\n                                     PRBool *_retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel\\n-    *user = nsnull;\\n-    *pwd = nsnull;\\n-    *_retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   // Ignore passwordRealm and savePassword\\n   return mPromptService->PromptUsernameAndPassword(mParent, dialogTitle, text,\\n                                                    user, pwd, nsnull, nsnull,\\n@@ -488,15 +325,6 @@ nsPrompt::PromptPassword(const PRUnichar* dialogTitle,\\n                          PRUnichar* *pwd,\\n                          PRBool *_retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel\\n-    *pwd = nsnull;\\n-    *_retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   // Ignore passwordRealm and savePassword\\n   return mPromptService->PromptPassword(mParent, dialogTitle, text, pwd,\\n                                         nsnull, nsnull, _retval);\\n@@ -507,14 +335,6 @@ nsPrompt::PromptAuth(nsIChannel* aChannel,\\n                      nsIAuthInformation* aAuthInfo,\\n                      PRBool* retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // Default to cancel\\n-    *retval = PR_FALSE;\\n-    return NS_OK;\\n-  }\\n-\\n   if (mPromptService2) {\\n     return mPromptService2->PromptAuth(mParent, aChannel,\\n                                        aLevel, aAuthInfo,\\n@@ -533,13 +353,6 @@ nsPrompt::AsyncPromptAuth(nsIChannel* aChannel,\\n                           nsIAuthInformation* aAuthInfo,\\n                           nsICancelable** retval)\\n {\\n-  nsAutoWindowStateHelper windowStateHelper(mParent);\\n-\\n-  if (!windowStateHelper.DefaultEnabled()) {\\n-    // XXX what to do?\\n-    return NS_ERROR_NOT_IMPLEMENTED;\\n-  }\\n-\\n   if (mPromptService2) {\\n     return mPromptService2->AsyncPromptAuth(mParent, aChannel,\\n                                             aCallback, aContext,\\ndiff --git a/embedding/components/windowwatcher/src/nsPrompt.h b/embedding/components/windowwatcher/src/nsPrompt.h\\nindex 50eb7c6..fbac461 100644\\n--- a/embedding/components/windowwatcher/src/nsPrompt.h\\n+++ b/embedding/components/windowwatcher/src/nsPrompt.h\\n@@ -79,30 +79,6 @@ protected:\\n   nsCOMPtr<nsIPromptService2>   mPromptService2;\\n };\\n \\n-\\n-/**\\n- * Helper class for dealing with notifications around opening modal\\n- * windows.\\n- */\\n-class nsAutoWindowStateHelper\\n-{\\n-public:\\n-  nsAutoWindowStateHelper(nsIDOMWindow *aWindow);\\n-  ~nsAutoWindowStateHelper();\\n-\\n-  PRBool DefaultEnabled()\\n-  {\\n-    return mDefaultEnabled;\\n-  }\\n-\\n-protected:\\n-  PRBool DispatchCustomEvent(const char *aEventName);\\n-\\n-  nsIDOMWindow *mWindow;\\n-  PRBool mDefaultEnabled;\\n-};\\n-\\n-\\n /**\\n  * A class that wraps an nsIAuthPrompt so that it can be used as an\\n  * nsIAuthPrompt2.\\ndiff --git a/embedding/components/windowwatcher/src/nsPromptService.cpp b/embedding/components/windowwatcher/src/nsPromptService.cpp\\nindex bf19e0b..0084722 100644\\n--- a/embedding/components/windowwatcher/src/nsPromptService.cpp\\n+++ b/embedding/components/windowwatcher/src/nsPromptService.cpp\\n@@ -42,6 +42,11 @@\\n #include \\\"nsIComponentManager.h\\\"\\n #include \\\"nsIDialogParamBlock.h\\\"\\n #include \\\"nsIDOMWindow.h\\\"\\n+#include \\\"nsPIDOMWindow.h\\\"\\n+#include \\\"nsIDOMEventTarget.h\\\"\\n+#include \\\"nsIDOMEvent.h\\\"\\n+#include \\\"nsIPrivateDOMEVent.h\\\"\\n+#include \\\"nsIDOMDocumentEvent.h\\\"\\n #include \\\"nsIServiceManager.h\\\"\\n #include \\\"nsISupportsUtils.h\\\"\\n #include \\\"nsString.h\\\"\\n@@ -58,6 +63,75 @@ static const char kWarningIconClass[] = \\\"message-icon\\\";\\n \\n \\n /****************************************************************\\n+ ****************** nsAutoWindowStateHelper *********************\\n+ ****************************************************************/\\n+\\n+nsAutoWindowStateHelper::nsAutoWindowStateHelper(nsIDOMWindow *aWindow)\\n+  : mWindow(aWindow),\\n+    mDefaultEnabled(DispatchCustomEvent(\\\"DOMWillOpenModalDialog\\\"))\\n+{\\n+  nsCOMPtr<nsPIDOMWindow> window(do_QueryInterface(aWindow));\\n+\\n+  if (window) {\\n+    window->EnterModalState();\\n+  }\\n+}\\n+\\n+nsAutoWindowStateHelper::~nsAutoWindowStateHelper()\\n+{\\n+  nsCOMPtr<nsPIDOMWindow> window(do_QueryInterface(mWindow));\\n+\\n+  if (window) {\\n+    window->LeaveModalState();\\n+  }\\n+\\n+  if (mDefaultEnabled) {\\n+    DispatchCustomEvent(\\\"DOMModalDialogClosed\\\");\\n+  }\\n+}\\n+\\n+PRBool\\n+nsAutoWindowStateHelper::DispatchCustomEvent(const char *aEventName)\\n+{\\n+  if (!mWindow) {\\n+    return PR_TRUE;\\n+  }\\n+\\n+#ifdef DEBUG\\n+  {\\n+    nsCOMPtr<nsPIDOMWindow> window(do_QueryInterface(mWindow));\\n+  }\\n+#endif\\n+\\n+  nsCOMPtr<nsIDOMDocument> domdoc;\\n+  mWindow->GetDocument(getter_AddRefs(domdoc));\\n+\\n+  nsCOMPtr<nsIDOMDocumentEvent> docevent(do_QueryInterface(domdoc));\\n+  nsCOMPtr<nsIDOMEvent> event;\\n+\\n+  PRBool defaultActionEnabled = PR_TRUE;\\n+\\n+  if (docevent) {\\n+    docevent->CreateEvent(NS_LITERAL_STRING(\\\"Events\\\"), getter_AddRefs(event));\\n+\\n+    nsCOMPtr<nsIPrivateDOMEvent> privateEvent(do_QueryInterface(event));\\n+    if (privateEvent) {\\n+      event->InitEvent(NS_ConvertASCIItoUTF16(aEventName), PR_TRUE, PR_TRUE);\\n+\\n+      privateEvent->SetTrusted(PR_TRUE);\\n+\\n+      nsCOMPtr<nsIDOMEventTarget> target(do_QueryInterface(mWindow));\\n+\\n+      target->DispatchEvent(event, &defaultActionEnabled);\\n+    }\\n+  }\\n+\\n+  return defaultActionEnabled;\\n+}\\n+\\n+\\n+\\n+/****************************************************************\\n  ************************* ParamBlock ***************************\\n  ****************************************************************/\\n \\n@@ -105,6 +179,12 @@ NS_IMETHODIMP\\n nsPromptService::Alert(nsIDOMWindow *parent,\\n                    const PRUnichar *dialogTitle, const PRUnichar *text)\\n {\\n+  nsAutoWindowStateHelper windowStateHelper(parent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    return NS_OK;\\n+  }\\n+\\n   nsresult rv;\\n   nsXPIDLString stringOwner;\\n  \\n@@ -141,6 +221,13 @@ nsPromptService::AlertCheck(nsIDOMWindow *parent,\\n                             const PRUnichar *checkMsg, PRBool *checkValue)\\n \\n {\\n+  nsAutoWindowStateHelper windowStateHelper(parent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    // checkValue is an inout parameter, so we don't have to set it\\n+    return NS_OK;\\n+  }\\n+\\n   nsresult rv;\\n   nsXPIDLString stringOwner;\\n  \\n@@ -179,6 +266,14 @@ nsPromptService::Confirm(nsIDOMWindow *parent,\\n                    const PRUnichar *dialogTitle, const PRUnichar *text,\\n                    PRBool *_retval)\\n {\\n+  nsAutoWindowStateHelper windowStateHelper(parent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    // Default to cancel\\n+    *_retval = PR_FALSE;\\n+    return NS_OK;\\n+  }\\n+\\n   nsresult rv;\\n   nsXPIDLString stringOwner;\\n  \\n@@ -219,6 +314,14 @@ nsPromptService::ConfirmCheck(nsIDOMWindow *parent,\\n                    const PRUnichar *checkMsg, PRBool *checkValue,\\n                    PRBool *_retval)\\n {\\n+  nsAutoWindowStateHelper windowStateHelper(parent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    // Default to cancel. checkValue is an inout parameter, so we don't have to set it\\n+    *_retval = PR_FALSE;\\n+    return NS_OK;\\n+  }\\n+\\n   nsresult rv;\\n   nsXPIDLString stringOwner;\\n  \\n@@ -265,6 +368,16 @@ nsPromptService::ConfirmEx(nsIDOMWindow *parent,\\n                     const PRUnichar *checkMsg, PRBool *checkValue,\\n                     PRInt32 *buttonPressed)\\n {\\n+  nsAutoWindowStateHelper windowStateHelper(parent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    // Return 1 to match what happens when the dialog is closed by the window\\n+    // manager (This is indeed independent of what the default button is).\\n+    // checkValue is an inout parameter, so we don't have to set it.\\n+    *buttonPressed = 1;\\n+    return NS_OK;\\n+  }\\n+\\n   nsresult rv;\\n   nsXPIDLString stringOwner;\\n  \\n@@ -368,6 +481,15 @@ nsPromptService::Prompt(nsIDOMWindow *parent,\\n                         PRUnichar **value,\\n                         const PRUnichar *checkMsg, PRBool *checkValue, PRBool *_retval)\\n {\\n+  nsAutoWindowStateHelper windowStateHelper(parent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    // Default to cancel. value and checkValue are inout parameters, so we\\n+    // don't have to set them.\\n+    *_retval = PR_FALSE;\\n+    return NS_OK;\\n+  }\\n+\\n   NS_ENSURE_ARG(value);\\n   NS_ENSURE_ARG(_retval);\\n \\n@@ -434,7 +556,16 @@ nsPromptService::PromptUsernameAndPassword(nsIDOMWindow *parent,\\n   NS_ENSURE_ARG(username);\\n   NS_ENSURE_ARG(password);\\n   NS_ENSURE_ARG(_retval);\\n-  \\n+\\n+  nsAutoWindowStateHelper windowStateHelper(parent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    // Default to cancel\\n+    // username/password are inout, no need to set them\\n+    *_retval = PR_FALSE;\\n+    return NS_OK;\\n+  }\\n+\\n   nsresult rv;\\n   nsXPIDLString stringOwner;\\n  \\n@@ -504,7 +635,16 @@ NS_IMETHODIMP nsPromptService::PromptPassword(nsIDOMWindow *parent,\\n {\\n   NS_ENSURE_ARG(password);\\n   NS_ENSURE_ARG(_retval);\\n-\\t\\n+\\n+  nsAutoWindowStateHelper windowStateHelper(parent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    // Default to cancel. password and checkValue are inout parameters, so we\\n+    // don't have to touch them.\\n+    *_retval = PR_FALSE;\\n+    return NS_OK;\\n+  }\\n+\\n   nsresult rv;\\n   nsXPIDLString stringOwner;\\n  \\n@@ -569,6 +709,13 @@ nsPromptService::PromptAuth(nsIDOMWindow* aParent,\\n                             PRBool* aCheckValue,\\n                             PRBool *retval)\\n {\\n+  nsAutoWindowStateHelper windowStateHelper(aParent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    *retval = PR_FALSE;\\n+    return NS_OK;\\n+  }\\n+ \\n   return nsPrompt::PromptPasswordAdapter(this, aParent, aChannel,\\n                                          aLevel, aAuthInfo,\\n                                          aCheckLabel, aCheckValue,\\n@@ -595,6 +742,15 @@ nsPromptService::Select(nsIDOMWindow *parent, const PRUnichar *dialogTitle,\\n                    const PRUnichar **selectList, PRInt32 *outSelection,\\n                    PRBool *_retval)\\n {\\t\\n+  nsAutoWindowStateHelper windowStateHelper(parent);\\n+\\n+  if (!windowStateHelper.DefaultEnabled()) {\\n+    // Default to cancel and item 0\\n+    *outSelection = 0;\\n+    *_retval = PR_FALSE;\\n+    return NS_OK;\\n+  }\\n+\\n   nsresult rv;\\n   nsXPIDLString stringOwner;\\n  \\ndiff --git a/embedding/components/windowwatcher/src/nsPromptService.h b/embedding/components/windowwatcher/src/nsPromptService.h\\nindex 2e3549f..6975737 100644\\n--- a/embedding/components/windowwatcher/src/nsPromptService.h\\n+++ b/embedding/components/windowwatcher/src/nsPromptService.h\\n@@ -77,5 +77,28 @@ private:\\n   nsCOMPtr<nsIWindowWatcher> mWatcher;\\n };\\n \\n+/**\\n+ * Helper class for dealing with notifications around opening modal\\n+ * windows.\\n+ */\\n+class nsAutoWindowStateHelper\\n+{\\n+public:\\n+  nsAutoWindowStateHelper(nsIDOMWindow *aWindow);\\n+  ~nsAutoWindowStateHelper();\\n+\\n+  PRBool DefaultEnabled()\\n+  {\\n+    return mDefaultEnabled;\\n+  }\\n+\\n+protected:\\n+  PRBool DispatchCustomEvent(const char *aEventName);\\n+\\n+  nsIDOMWindow *mWindow;\\n+  PRBool mDefaultEnabled;\\n+};\\n+\\n+\\n #endif\\n \\ndiff --git a/embedding/components/windowwatcher/src/nsWindowWatcher.cpp b/embedding/components/windowwatcher/src/nsWindowWatcher.cpp\\nindex d298e1b..a08e3af 100644\\n--- a/embedding/components/windowwatcher/src/nsWindowWatcher.cpp\\n+++ b/embedding/components/windowwatcher/src/nsWindowWatcher.cpp\\n@@ -45,6 +45,7 @@\\n #include \\\"nsCRT.h\\\"\\n #include \\\"nsNetUtil.h\\\"\\n #include \\\"nsPrompt.h\\\"\\n+#include \\\"nsPromptservice.h\\\"\\n #include \\\"nsWWJSUtils.h\\\"\\n #include \\\"plstr.h\\\"\\n \\n\""}