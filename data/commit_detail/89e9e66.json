{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas89e9e66\""},"diff":"\"89e9e66 Bug 393117 - Remove native resize API. r=josh r=mconnor sr+a1.9=pav\\ndiff --git a/dom/public/idl/base/nsIDOMChromeWindow.idl b/dom/public/idl/base/nsIDOMChromeWindow.idl\\nindex 014b6bb..4dc957f 100644\\n--- a/dom/public/idl/base/nsIDOMChromeWindow.idl\\n+++ b/dom/public/idl/base/nsIDOMChromeWindow.idl\\n@@ -21,7 +21,6 @@\\n  *\\n  * Contributor(s):\\n  *   Johnny Stenback <jst@netscape.com> (original author)\\n- *   Josh Aas <josh@mozilla.com> (animation API)\\n  *\\n  * Alternatively, the contents of this file may be used under the terms of\\n  * either of the GNU General Public License Version 2 or later (the \\\"GPL\\\"),\\n@@ -41,26 +40,22 @@\\n \\n interface nsIBrowserDOMWindow;\\n \\n-[scriptable, uuid(E3985A99-F9D6-4576-8EF8-9A5DCE42EFFA)]\\n+[scriptable, uuid(847fac33-48a8-4360-bfbc-6bb96245404d)]\\n interface nsIDOMChromeWindow : nsISupports\\n {\\n   const unsigned short STATE_MAXIMIZED = 1;\\n   const unsigned short STATE_MINIMIZED = 2;\\n   const unsigned short STATE_NORMAL = 3;\\n \\n-  const unsigned short RESIZE_ANIMATION_OFF = 0;\\n-  const unsigned short RESIZE_ANIMATION_SLIDE = 1;\\n-\\n-  attribute unsigned short          animatedResize;\\n-  attribute DOMString               title;\\n-  readonly attribute unsigned short windowState;\\n+           attribute DOMString                   title;\\n+  readonly attribute unsigned short              windowState;\\n \\n   /**\\n    * browserDOMWindow provides access to yet another layer of\\n    * utility functions implemented by chrome script. It will be null\\n    * for DOMWindows not corresponding to browsers.\\n    */\\n-  attribute nsIBrowserDOMWindow browserDOMWindow;\\n+           attribute nsIBrowserDOMWindow browserDOMWindow;\\n \\n   void                      getAttention();\\n \\ndiff --git a/dom/src/base/nsGlobalWindow.cpp b/dom/src/base/nsGlobalWindow.cpp\\nindex 9e13c2f..e7f516f 100644\\n--- a/dom/src/base/nsGlobalWindow.cpp\\n+++ b/dom/src/base/nsGlobalWindow.cpp\\n@@ -7927,30 +7927,6 @@ nsGlobalChromeWindow::SetTitle(const nsAString& aTitle)\\n   return nsdoc->SetTitle(aTitle);\\n }\\n \\n-// returns NS_ERROR_NOT_IMPLEMENTED if animation is not implemented on widget\\n-// or platform\\n-NS_IMETHODIMP\\n-nsGlobalChromeWindow::SetAnimatedResize(PRUint16 aAnimation)\\n-{\\n-  nsCOMPtr<nsIWidget> widget = GetMainWidget();\\n-  if (!widget)\\n-    return NS_ERROR_FAILURE;\\n-\\n-  return widget->SetAnimatedResize(aAnimation);\\n-}\\n-\\n-// returns NS_ERROR_NOT_IMPLEMENTED if animation is not implemented on widget\\n-// or platform\\n-NS_IMETHODIMP\\n-nsGlobalChromeWindow::GetAnimatedResize(PRUint16* aAnimation)\\n-{\\n-  nsCOMPtr<nsIWidget> widget = GetMainWidget();\\n-  if (!widget)\\n-    return NS_ERROR_FAILURE;\\n-\\n-  return widget->GetAnimatedResize(aAnimation);\\n-}\\n-\\n NS_IMETHODIMP\\n nsGlobalChromeWindow::GetWindowState(PRUint16* aWindowState)\\n {\\ndiff --git a/toolkit/content/widgets/preferences.xml b/toolkit/content/widgets/preferences.xml\\nindex f5821e2..3d1d5f1 100644\\n--- a/toolkit/content/widgets/preferences.xml\\n+++ b/toolkit/content/widgets/preferences.xml\\n@@ -744,20 +744,8 @@\\n                   // Don't let the new pane content flex to the current window\\n                   // height if we're animating \\n                   aPaneElement.removeAttribute(\\\"flex\\\");\\n-#ifdef XP_MACOSX\\n-                  try {\\n-                    window.animatedResize = window.RESIZE_ANIMATION_SLIDE;\\n-                    // New height is the new pane's size plus the size of the pane selection bar\\n-                    var newHeight = aPaneElement.contentHeight + (window.innerHeight - oldPane.contentHeight);\\n-                    window.innerHeight = newHeight;\\n-                    this._currentHeight = newHeight;\\n-                    window.animatedResize = window.RESIZE_ANIMATION_OFF;\\n-                  }\\n-                  catch (e) { }\\n-#else\\n                   aPaneElement.style.opacity = 0.0;\\n                   this.animate(oldPane, aPaneElement);\\n-#endif\\n                 }\\n               }\\n               break;\\ndiff --git a/widget/public/nsIWidget.h b/widget/public/nsIWidget.h\\nindex ca6b7f5..82b4533 100644\\n--- a/widget/public/nsIWidget.h\\n+++ b/widget/public/nsIWidget.h\\n@@ -95,11 +95,11 @@ typedef nsEventStatus (*PR_CALLBACK EVENT_CALLBACK)(nsGUIEvent *event);\\n #define NS_NATIVE_PLUGIN_PORT_CG    101\\n #endif\\n \\n-// B3F10C8D-4C07-4B1E-A1CD-B38696426205\\n-#define NS_IWIDGET_IID \\\\\\n-{ 0xB3F10C8D, 0x4C07, 0x4B1E, \\\\\\n-  { 0xA1, 0xCD, 0xB3, 0x86, 0x96, 0x42, 0x62, 0x05 } }\\n+// f60fa720-a9bc-4fd3-b863-812496fa85e6\\n \\n+#define NS_IWIDGET_IID \\\\\\n+{ 0xf60fa720, 0xa9bc, 0x4fd3, \\\\\\n+  { 0xb8, 0x63, 0x81, 0x24, 0x96, 0xfa, 0x85, 0xe6 } }\\n \\n // Hide the native window systems real window type so as to avoid\\n // including native window system types and api's. This is necessary\\n@@ -1016,24 +1016,6 @@ class nsIWidget : public nsISupports {\\n      */\\n     virtual gfxASurface *GetThebesSurface() = 0;\\n \\n-    /**\\n-     * Set a flag that makes any window resizes use native window animation.\\n-     * Ignored on any OS that doesn't support native animation.\\n-     *\\n-     * @param aAnimate Whether or not you want resizes to be animated.\\n-     * @return NS_ERROR_NOT_IMPLEMENTED if not implemented on widget or platform\\n-     */\\n-    NS_IMETHOD SetAnimatedResize(PRUint16 aAnimation) = 0;\\n-\\n-    /**\\n-     * Get a flag that controls native window animation.\\n-     * Ignored on any OS that doesn't support native animation.\\n-     *\\n-     * @param aAnimate Whether or not resizes are animated.\\n-     * @return NS_ERROR_NOT_IMPLEMENTED if not implemented on widget or platform\\n-     */\\n-    NS_IMETHOD GetAnimatedResize(PRUint16* aAnimation) = 0;\\n-\\n protected:\\n     // keep the list of children.  We also keep track of our siblings.\\n     // The ownership model is as follows: parent holds a strong ref to\\ndiff --git a/widget/src/cocoa/nsChildView.h b/widget/src/cocoa/nsChildView.h\\nindex 2fdde7a..86d2663 100644\\n--- a/widget/src/cocoa/nsChildView.h\\n+++ b/widget/src/cocoa/nsChildView.h\\n@@ -297,9 +297,6 @@ public:\\n \\n   NS_IMETHOD        GetAttention(PRInt32 aCycleCount);\\n \\n-  NS_IMETHOD        SetAnimatedResize(PRUint16 aAnimation);\\n-  NS_IMETHOD        GetAnimatedResize(PRUint16* aAnimation);\\n-\\n   // nsIPluginWidget\\n   NS_IMETHOD        GetPluginClipRect(nsRect& outClipRect, nsPoint& outOrigin, PRBool& outWidgetVisible);\\n   NS_IMETHOD        StartDrawPlugin();\\ndiff --git a/widget/src/cocoa/nsChildView.mm b/widget/src/cocoa/nsChildView.mm\\nindex 2227281..6a866cf 100644\\n--- a/widget/src/cocoa/nsChildView.mm\\n+++ b/widget/src/cocoa/nsChildView.mm\\n@@ -1560,18 +1560,6 @@ NS_IMETHODIMP nsChildView::GetAttention(PRInt32 aCycleCount)\\n }\\n \\n \\n-NS_IMETHODIMP nsChildView::SetAnimatedResize(PRUint16 aAnimation)\\n-{\\n-  return NS_ERROR_NOT_IMPLEMENTED;\\n-}\\n-\\n-\\n-NS_IMETHODIMP nsChildView::GetAnimatedResize(PRUint16* aAnimation)\\n-{\\n-  return NS_ERROR_NOT_IMPLEMENTED;\\n-}\\n-\\n-\\n #pragma mark -\\n \\n \\ndiff --git a/widget/src/cocoa/nsCocoaWindow.h b/widget/src/cocoa/nsCocoaWindow.h\\nindex b468bae..64c6843 100644\\n--- a/widget/src/cocoa/nsCocoaWindow.h\\n+++ b/widget/src/cocoa/nsCocoaWindow.h\\n@@ -190,8 +190,6 @@ public:\\n     NS_IMETHOD DispatchEvent(nsGUIEvent* event, nsEventStatus & aStatus) ;\\n     NS_IMETHOD CaptureRollupEvents(nsIRollupListener * aListener, PRBool aDoCapture, PRBool aConsumeRollupEvent);\\n     NS_IMETHOD GetAttention(PRInt32 aCycleCount);\\n-    NS_IMETHOD SetAnimatedResize(PRUint16 aAnimation);\\n-    NS_IMETHOD GetAnimatedResize(PRUint16* aAnimation);\\n \\n     virtual gfxASurface* GetThebesSurface();\\n \\n@@ -213,8 +211,7 @@ protected:\\n   WindowDelegate*      mDelegate;       // our delegate for processing window msgs [STRONG]\\n   nsCOMPtr<nsIMenuBar> mMenuBar;\\n   NSWindow*            mSheetWindowParent; // if this is a sheet, this is the NSWindow it's attached to\\n-  nsChildView*         mPopupContentView;  // if this is a popup, this is its content widget\\n-  PRUint16             mAnimation;         // the type of animation we will use when resizing\\n+  nsChildView*         mPopupContentView; // if this is a popup, this is its content widget\\n \\n   PRPackedBool         mIsResizing;     // we originated the resize, prevent infinite recursion\\n   PRPackedBool         mWindowMadeHere; // true if we created the window, false for embedding\\ndiff --git a/widget/src/cocoa/nsCocoaWindow.mm b/widget/src/cocoa/nsCocoaWindow.mm\\nindex 09e481e..2c29c62 100644\\n--- a/widget/src/cocoa/nsCocoaWindow.mm\\n+++ b/widget/src/cocoa/nsCocoaWindow.mm\\n@@ -51,8 +51,6 @@\\n #include \\\"nsIXULWindow.h\\\"\\n #include \\\"nsIPrefService.h\\\"\\n #include \\\"nsIPrefBranch.h\\\"\\n-#include \\\"nsIDOMChromeWindow.h\\\"\\n-#include \\\"unistd.h\\\"\\n \\n // defined in nsMenuBarX.mm\\n extern NSMenu* sApplicationMenu; // Application menu shared by all menubars\\n@@ -92,7 +90,6 @@ nsCocoaWindow::nsCocoaWindow()\\n , mDelegate(nil)\\n , mSheetWindowParent(nil)\\n , mPopupContentView(nil)\\n-, mAnimation(nsIDOMChromeWindow::RESIZE_ANIMATION_OFF)\\n , mIsResizing(PR_FALSE)\\n , mWindowMadeHere(PR_FALSE)\\n , mVisible(PR_FALSE)\\n@@ -772,14 +769,7 @@ NS_IMETHODIMP nsCocoaWindow::Resize(PRInt32 aWidth, PRInt32 aHeight, PRBool aRep\\n     newFrame.size.height = newHeight;\\n \\n     StartResizing();\\n-    if (mAnimation == nsIDOMChromeWindow::RESIZE_ANIMATION_SLIDE) {\\n-      [[mWindow contentView] setHidden:YES];\\n-      [mWindow setFrame:newFrame display:YES animate:YES];\\n-      [[mWindow contentView] setHidden:NO];\\n-    }\\n-    else {\\n-      [mWindow setFrame:newFrame display:NO];\\n-    }\\n+    [mWindow setFrame:newFrame display:NO];\\n     StopResizing();\\n   }\\n \\n@@ -1069,19 +1059,6 @@ NS_IMETHODIMP nsCocoaWindow::GetAttention(PRInt32 aCycleCount)\\n }\\n \\n \\n-NS_IMETHODIMP nsCocoaWindow::SetAnimatedResize(PRUint16 aAnimation)\\n-{\\n-  mAnimation = aAnimation;\\n-  return NS_OK;\\n-}\\n-\\n-\\n-NS_IMETHODIMP nsCocoaWindow::GetAnimatedResize(PRUint16* aAnimation)\\n-{\\n-  *aAnimation = mAnimation;\\n-  return NS_OK;\\n-}\\n-\\n gfxASurface* nsCocoaWindow::GetThebesSurface()\\n {\\n   if (mPopupContentView)\\ndiff --git a/widget/src/xpwidgets/nsBaseWidget.cpp b/widget/src/xpwidgets/nsBaseWidget.cpp\\nindex 77fe430..80daf21 100644\\n--- a/widget/src/xpwidgets/nsBaseWidget.cpp\\n+++ b/widget/src/xpwidgets/nsBaseWidget.cpp\\n@@ -846,18 +846,6 @@ nsBaseWidget::SetIcon(const nsAString&)\\n   return NS_OK;\\n }\\n \\n-NS_IMETHODIMP\\n-nsBaseWidget::SetAnimatedResize(PRUint16 aAnimation)\\n-{\\n-  return NS_ERROR_NOT_IMPLEMENTED;\\n-}\\n-\\n-NS_IMETHODIMP\\n-nsBaseWidget::GetAnimatedResize(PRUint16* aAnimation)\\n-{\\n-  return NS_ERROR_NOT_IMPLEMENTED;\\n-}\\n-\\n /**\\n  * Modifies aFile to point at an icon file with the given name and suffix.  The\\n  * suffix may correspond to a file extension with leading '.' if appropriate.\\ndiff --git a/widget/src/xpwidgets/nsBaseWidget.h b/widget/src/xpwidgets/nsBaseWidget.h\\nindex 16c4afe..799f119 100644\\n--- a/widget/src/xpwidgets/nsBaseWidget.h\\n+++ b/widget/src/xpwidgets/nsBaseWidget.h\\n@@ -131,8 +131,6 @@ public:\\n   NS_IMETHOD              GetAttention(PRInt32 aCycleCount);\\n   NS_IMETHOD              GetLastInputEventTime(PRUint32& aTime);\\n   NS_IMETHOD              SetIcon(const nsAString &anIconSpec);\\n-  NS_IMETHOD              SetAnimatedResize(PRUint16 aAnimation);\\n-  NS_IMETHOD              GetAnimatedResize(PRUint16* aAnimation);\\n   virtual void            ConvertToDeviceCoordinates(nscoord  &aX,nscoord &aY) {}\\n   virtual void            FreeNativeData(void * data, PRUint32 aDataType) {}//~~~\\n \\n\""}