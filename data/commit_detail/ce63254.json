{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basce63254\""},"diff":"\"ce63254 Bug 392061. Live region event attributes not persisting in AT-SPI, r=ginn.chen, a=dsicore\\ndiff --git a/accessible/src/atk/nsAccessibleWrap.cpp b/accessible/src/atk/nsAccessibleWrap.cpp\\nindex de2573a..88b96b3 100644\\n--- a/accessible/src/atk/nsAccessibleWrap.cpp\\n+++ b/accessible/src/atk/nsAccessibleWrap.cpp\\n@@ -124,6 +124,8 @@ static GType GetAtkTypeForMai(MaiInterfaceType type)\\n   return G_TYPE_INVALID;\\n }\\n \\n+static const char* kNonUserInputEvent = \\\":system\\\";\\n+    \\n static const GInterfaceInfo atk_if_infos[] = {\\n     {(GInterfaceInitFunc)componentInterfaceInitCB,\\n      (GInterfaceFinalizeFunc) NULL, NULL}, \\n@@ -791,7 +793,7 @@ GetAttributeSet(nsIAccessible* aAccessible)\\n     \\n     if (attributes) {\\n         // Deal with attributes that we only need to expose in ATK\\n-        PRUint32 state, extraState;\\n+        PRUint32 state;\\n         aAccessible->GetFinalState(&state, nsnull);\\n         if (state & nsIAccessibleStates::STATE_HASPOPUP) {\\n           // There is no ATK state for haspopup, must use object attribute to expose the same info\\n@@ -1285,15 +1287,6 @@ nsAccessibleWrap::FireAccessibleEvent(nsIAccessibleEvent *aEvent)\\n         g_signal_emit_by_name(atkObj, \\\"visible_data_changed\\\");\\n         break;\\n \\n-    case nsIAccessibleEvent::EVENT_HYPERTEXT_LINK_SELECTED:\\n-        MAI_LOG_DEBUG((\\\"\\\\n\\\\nReceived: EVENT_HYPERTEXT_LINK_SELECTED\\\\n\\\"));\\n-        atk_focus_tracker_notify(atkObj);\\n-        g_signal_emit_by_name(atkObj,\\n-                              \\\"link_selected\\\",\\n-                              // Selected link index \\n-                              *(gint *)eventData);\\n-        break;\\n-\\n     case nsIAccessibleEvent::EVENT_DOM_CREATE:\\n     case nsIAccessibleEvent::EVENT_ASYNCH_SHOW:\\n         return FireAtkShowHideEvent(aEvent, atkObj, PR_TRUE);\\n@@ -1437,11 +1430,13 @@ nsAccessibleWrap::FireAtkTextChangedEvent(nsIAccessibleEvent *aEvent,\\n     PRBool isInserted;\\n     event->IsInserted(&isInserted);\\n \\n-    g_signal_emit_by_name (aObject,\\n-                           isInserted ? \\\\\\n-                           \\\"text_changed::insert\\\":\\\"text_changed::delete\\\",\\n-                           start,\\n-                           length);\\n+    PRBool isFromUserInput;\\n+    event->GetIsFromUserInput(&isFromUserInput);\\n+\\n+    char *signal_name = g_strconcat(isInserted ? \\\"text_changed::insert\\\" : \\\"text_changed::delete\\\",\\n+                                    isFromUserInput ? \\\"\\\" : kNonUserInputEvent, NULL);\\n+    g_signal_emit_by_name(aObject, signal_name, start, length);\\n+    g_free (signal_name);\\n \\n     return NS_OK;\\n }\\n@@ -1539,13 +1534,12 @@ nsAccessibleWrap::FireAtkShowHideEvent(nsIAccessibleEvent *aEvent,\\n     AtkObject *parentObject = GetAtkObject(parentAccessible);\\n     NS_ENSURE_STATE(parentObject);\\n \\n-    g_signal_emit_by_name(parentObject,\\n-                          aIsAdded ? \\\\\\n-                          \\\"children_changed::add\\\" : \\\\\\n-                          \\\"children_changed::remove\\\",\\n-                          indexInParent,\\n-                          aObject,\\n-                          NULL);\\n+    PRBool isFromUserInput;\\n+    aEvent->GetIsFromUserInput(&isFromUserInput);\\n+    char *signal_name = g_strconcat(aIsAdded ? \\\"children_changed::add\\\" :  \\\"children_changed::remove\\\",\\n+                                    isFromUserInput ? \\\"\\\" : kNonUserInputEvent, NULL);\\n+    g_signal_emit_by_name(parentObject, signal_name, indexInParent, aObject, NULL);\\n+    g_free(signal_name);\\n \\n     return NS_OK;\\n }\\ndiff --git a/accessible/src/base/nsAccessible.cpp b/accessible/src/base/nsAccessible.cpp\\nindex 34956a5..f7e57ac 100644\\n--- a/accessible/src/base/nsAccessible.cpp\\n+++ b/accessible/src/base/nsAccessible.cpp\\n@@ -2083,6 +2083,28 @@ nsAccessible::GetAttributes(nsIPersistentProperties **aAttributes)\\n         attributes->SetStringProperty(nsDependentCString(ariaProperties[index]), value, oldValueUnused);    \\n       }\\n     }\\n+\\n+    // Get container-foo computed live region properties based on the closest container with\\n+    // the live region attribute\\n+    nsAutoString atomic, live, relevant, channel, busy;\\n+    while (content) {\\n+      if (relevant.IsEmpty() && \\n+          content->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::relevant, relevant))\\n+        attributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-relevant\\\"), relevant, oldValueUnused);\\n+      if (live.IsEmpty() &&\\n+          content->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::live, live))\\n+        attributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-live\\\"), live, oldValueUnused);\\n+      if (channel.IsEmpty() &&\\n+          content->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::channel, channel))\\n+        attributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-channel\\\"), channel, oldValueUnused);\\n+      if (atomic.IsEmpty() &&\\n+          content->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::atomic, atomic))\\n+        attributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-atomic\\\"), atomic, oldValueUnused);\\n+      if (busy.IsEmpty() &&\\n+          content->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::busy, busy))\\n+        attributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-busy\\\"), busy, oldValueUnused);\\n+      content = content->GetParent();\\n+    }\\n   }\\n \\n   if (!nsAccUtils::HasAccGroupAttrs(attributes)) {\\n@@ -2560,6 +2582,26 @@ nsAccessible::FindNeighbourPointingToThis(nsIAtom *aRelationAttr,\\n   return relatedNode;\\n }\\n \\n+nsIDOMNode* nsAccessible::GetAtomicRegion()\\n+{\\n+  nsCOMPtr<nsIContent> content = do_QueryInterface(mDOMNode);\\n+  nsIContent *loopContent = content;\\n+  nsAutoString atomic;\\n+\\n+  while (loopContent) {\\n+    loopContent->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::atomic, atomic);\\n+    if (!atomic.IsEmpty()) {\\n+      break;\\n+    }\\n+    loopContent = loopContent->GetParent();\\n+  }\\n+\\n+  nsCOMPtr<nsIDOMNode> atomicRegion;\\n+  if (atomic.EqualsLiteral(\\\"true\\\")) {\\n+    atomicRegion = do_QueryInterface(loopContent);\\n+  }\\n+  return atomicRegion;\\n+}\\n \\n /* nsIAccessible getAccessibleRelated(); */\\n NS_IMETHODIMP nsAccessible::GetAccessibleRelated(PRUint32 aRelationType, nsIAccessible **aRelated)\\n@@ -2724,7 +2766,7 @@ NS_IMETHODIMP nsAccessible::GetAccessibleRelated(PRUint32 aRelationType, nsIAcce\\n     }\\n   case nsIAccessibleRelation::RELATION_MEMBER_OF:\\n     {\\n-      relatedNode = nsAccEvent::GetLastEventAtomicRegion(mDOMNode);\\n+      relatedNode = GetAtomicRegion();\\n       break;\\n     }\\n   default:\\ndiff --git a/accessible/src/base/nsAccessible.h b/accessible/src/base/nsAccessible.h\\nindex 3f36ba7..1111886 100644\\n--- a/accessible/src/base/nsAccessible.h\\n+++ b/accessible/src/base/nsAccessible.h\\n@@ -278,6 +278,12 @@ protected:\\n   PRBool CheckVisibilityInParentChain(nsIDocument* aDocument, nsIView* aView);\\n \\n   /**\\n+   *  Get the container node for an atomic region, defined by aria:atomic=\\\"true\\\"\\n+   *  @return the container node\\n+   */\\n+  nsIDOMNode* GetAtomicRegion();\\n+\\n+  /**\\n    * Get numeric value of the given attribute.\\n    *\\n    * @param aNameSpaceID - namespace ID of the attribute\\ndiff --git a/accessible/src/base/nsAccessibleEventData.cpp b/accessible/src/base/nsAccessibleEventData.cpp\\nindex 8ce65fb..453a23f 100755\\n--- a/accessible/src/base/nsAccessibleEventData.cpp\\n+++ b/accessible/src/base/nsAccessibleEventData.cpp\\n@@ -75,78 +75,14 @@ nsAccEvent::nsAccEvent(PRUint32 aEventType, nsIDOMNode *aDOMNode,\\n void nsAccEvent::GetLastEventAttributes(nsIDOMNode *aNode,\\n                                         nsIPersistentProperties *aAttributes)\\n {\\n-  if (aNode != gLastEventNodeWeak) {\\n-    return; // Passed-in node doesn't Change the last event's node\\n+  if (aNode == gLastEventNodeWeak) {\\n+    // Only provide event-from-input for last event's node\\n+    nsAutoString oldValueUnused;\\n+    aAttributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"event-from-input\\\"),\\n+                                   gLastEventFromUserInput ? NS_LITERAL_STRING(\\\"true\\\") :\\n+                                                             NS_LITERAL_STRING(\\\"false\\\"),\\n+                                   oldValueUnused);\\n   }\\n-  nsAutoString oldValueUnused;\\n-  aAttributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"event-from-input\\\"),\\n-                                 gLastEventFromUserInput ? NS_LITERAL_STRING(\\\"true\\\") :\\n-                                                           NS_LITERAL_STRING(\\\"false\\\"),\\n-                                 oldValueUnused);\\n-\\n-  nsCOMPtr<nsIContent> lastEventContent = do_QueryInterface(aNode);\\n-  nsIContent *loopContent = lastEventContent;\\n-\\n-  nsAutoString atomic, live, relevant, channel, busy;\\n-\\n-  while (loopContent) {\\n-    if (relevant.IsEmpty()) {\\n-      loopContent->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::relevant, relevant);\\n-    }\\n-    if (live.IsEmpty()) {\\n-      loopContent->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::live, live);\\n-    }\\n-    if (channel.IsEmpty()) {\\n-      loopContent->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::channel, channel);\\n-    }\\n-    if (atomic.IsEmpty()) {\\n-      loopContent->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::atomic, atomic);\\n-    }\\n-    if (busy.IsEmpty()) {\\n-      loopContent->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::busy, busy);\\n-    }\\n-    loopContent = loopContent->GetParent();\\n-  }\\n-\\n-  if (!relevant.IsEmpty()) {\\n-    aAttributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-relevant\\\"), relevant, oldValueUnused);\\n-  }\\n-  if (!live.IsEmpty()) {\\n-    aAttributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-live\\\"), live, oldValueUnused);\\n-  }\\n-  if (!channel.IsEmpty()) {\\n-    aAttributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-channel\\\"), channel, oldValueUnused);\\n-  }\\n-  if (!atomic.IsEmpty()) {\\n-    aAttributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-atomic\\\"), atomic, oldValueUnused);\\n-  }\\n-  if (!busy.IsEmpty()) {\\n-    aAttributes->SetStringProperty(NS_LITERAL_CSTRING(\\\"container-busy\\\"), busy, oldValueUnused);\\n-  }\\n-}\\n-\\n-nsIDOMNode* nsAccEvent::GetLastEventAtomicRegion(nsIDOMNode *aNode)\\n-{\\n-  if (aNode != gLastEventNodeWeak) {\\n-    return nsnull; // Passed-in node doesn't Change the last changed node\\n-  }\\n-  nsCOMPtr<nsIContent> lastEventContent = do_QueryInterface(aNode);\\n-  nsIContent *loopContent = lastEventContent;\\n-  nsAutoString atomic;\\n-\\n-  while (loopContent) {\\n-    loopContent->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::atomic, atomic);\\n-    if (!atomic.IsEmpty()) {\\n-      break;\\n-    }\\n-    loopContent = loopContent->GetParent();\\n-  }\\n-\\n-  nsCOMPtr<nsIDOMNode> atomicRegion;\\n-  if (atomic.EqualsLiteral(\\\"true\\\")) {\\n-    atomicRegion = do_QueryInterface(loopContent);\\n-  }\\n-  return atomicRegion;\\n }\\n \\n void nsAccEvent::CaptureIsFromUserInput(PRBool aIsAsynch)\\ndiff --git a/accessible/src/base/nsAccessibleEventData.h b/accessible/src/base/nsAccessibleEventData.h\\nindex 1dc8a8f..2c7f262 100644\\n--- a/accessible/src/base/nsAccessibleEventData.h\\n+++ b/accessible/src/base/nsAccessibleEventData.h\\n@@ -64,7 +64,6 @@ public:\\n \\n   static void GetLastEventAttributes(nsIDOMNode *aNode,\\n                                       nsIPersistentProperties *aAttributes);\\n-  static nsIDOMNode* GetLastEventAtomicRegion(nsIDOMNode *aNode);\\n \\n protected:\\n   already_AddRefed<nsIAccessible> GetAccessibleByNode();\\n\""}