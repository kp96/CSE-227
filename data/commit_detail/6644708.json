{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas6644708\""},"diff":"\"6644708 Bug 393082 - Warn on unsafe usage of LIKE.  r=sspitzer\\ndiff --git a/storage/src/mozStorageStatement.cpp b/storage/src/mozStorageStatement.cpp\\nindex d5d4d16..8090e4f 100644\\n--- a/storage/src/mozStorageStatement.cpp\\n+++ b/storage/src/mozStorageStatement.cpp\\n@@ -146,6 +146,41 @@ mozStorageStatement::Initialize(mozIStorageConnection *aDBConnection, const nsAC\\n         mColumnNames.AppendCString(nsDependentCString(name));\\n     }\\n \\n+#ifdef DEBUG\\n+    // We want to try and test for LIKE and that consumers are using\\n+    // escapeStringForLIKE instead of just trusting user input.  The idea to\\n+    // check to see if they are binding a parameter after like instead of just\\n+    // using a string.  We only do this in debug builds because it's expensive!\\n+    const nsCaseInsensitiveCStringComparator c;\\n+    nsACString::const_iterator start, end, e;\\n+    aSQLStatement.BeginReading(start);\\n+    aSQLStatement.EndReading(end);\\n+    e = end;\\n+    while (FindInReadable(NS_LITERAL_CSTRING(\\\" LIKE\\\"), start, e, c)) {\\n+        // We have a LIKE in here, so we perform our tests\\n+        // FindInReadable moves the iterator, so we have to get a new one for\\n+        // each test we perform.\\n+        nsACString::const_iterator s1, s2, s3;\\n+        s1 = s2 = s3 = start;\\n+\\n+        if (!(FindInReadable(NS_LITERAL_CSTRING(\\\" LIKE ?\\\"), s1, end, c) ||\\n+              FindInReadable(NS_LITERAL_CSTRING(\\\" LIKE :\\\"), s2, end, c) ||\\n+              FindInReadable(NS_LITERAL_CSTRING(\\\" LIKE @\\\"), s3, end, c))) {\\n+            // At this point, we didn't find a LIKE statement followed by ?, :,\\n+            // or @, all of which are valid characters for binding a parameter.\\n+            // We will warn the consumer that they may not be safely using LIKE.\\n+            NS_WARNING(\\\"Unsafe use of LIKE detected!  Please ensure that you \\\"\\n+                       \\\"are using mozIStorageConnection::escapeStringForLIKE \\\"\\n+                       \\\"and that you are binding that result to the statement \\\"\\n+                       \\\"to prevent SQL injection attacks.\\\");\\n+        }\\n+\\n+        // resetting start and e\\n+        start = e;\\n+        e = end;\\n+    }\\n+#endif\\n+\\n     // doing a sqlite3_prepare sets up the execution engine\\n     // for that statement; doing a create_function after that\\n     // results in badness, because there's a selected statement.\\n\""}