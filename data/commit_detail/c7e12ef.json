{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basc7e12ef\""},"diff":"\"c7e12ef Bug 325202: XDR uses lossless encoding for all string. r=brendan\\ndiff --git a/js/src/jsfun.c b/js/src/jsfun.c\\nindex bfd8a56..5901d41 100644\\n--- a/js/src/jsfun.c\\n+++ b/js/src/jsfun.c\\n@@ -1368,7 +1368,7 @@ fun_xdrObject(JSXDRState *xdr, JSObject **objp)\\n                 propAtom = JSID_TO_ATOM(JSID_UNHIDE_NAME(sprop->id));\\n                 if (!JS_XDRUint32(xdr, &type) ||\\n                     !JS_XDRUint32(xdr, &userid) ||\\n-                    !js_XDRCStringAtom(xdr, &propAtom)) {\\n+                    !js_XDRStringAtom(xdr, &propAtom)) {\\n                     if (mark)\\n                         JS_ARENA_RELEASE(&cx->tempPool, mark);\\n                     goto bad;\\n@@ -1384,7 +1384,7 @@ fun_xdrObject(JSXDRState *xdr, JSObject **objp)\\n \\n                 if (!JS_XDRUint32(xdr, &type) ||\\n                     !JS_XDRUint32(xdr, &userid) ||\\n-                    !js_XDRCStringAtom(xdr, &propAtom)) {\\n+                    !js_XDRStringAtom(xdr, &propAtom)) {\\n                     goto bad;\\n                 }\\n                 JS_ASSERT(type == JSXDR_FUNARG || type == JSXDR_FUNVAR ||\\ndiff --git a/js/src/jsobj.c b/js/src/jsobj.c\\nindex a3e2d66..e29c84a 100644\\n--- a/js/src/jsobj.c\\n+++ b/js/src/jsobj.c\\n@@ -4648,7 +4648,7 @@ js_XDRObject(JSXDRState *xdr, JSObject **objp)\\n      */\\n     if (!JS_XDRUint32(xdr, &classDef))\\n         return JS_FALSE;\\n-    if (classDef == 1 && !js_XDRCStringAtom(xdr, &atom))\\n+    if (classDef == 1 && !js_XDRStringAtom(xdr, &atom))\\n         return JS_FALSE;\\n \\n     if (!JS_XDRUint32(xdr, &classId))\\ndiff --git a/js/src/jsxdrapi.c b/js/src/jsxdrapi.c\\nindex 0eb45eb..2757aea 100644\\n--- a/js/src/jsxdrapi.c\\n+++ b/js/src/jsxdrapi.c\\n@@ -675,56 +675,6 @@ js_XDRStringAtom(JSXDRState *xdr, JSAtom **atomp)\\n     return JS_TRUE;\\n }\\n \\n-/*\\n- * FIXME: This performs lossy conversion and we need to switch to\\n- * js_XDRStringAtom while allowing to read older XDR files. See bug 325202.\\n- */\\n-JSBool\\n-js_XDRCStringAtom(JSXDRState *xdr, JSAtom **atomp)\\n-{\\n-    JSString *str;\\n-    char *bytes;\\n-    JSBool ok;\\n-    uint32 nbytes;\\n-    JSAtom *atom;\\n-    JSContext *cx;\\n-    void *mark;\\n-\\n-    if (xdr->mode == JSXDR_ENCODE) {\\n-        JS_ASSERT(ATOM_IS_STRING(*atomp));\\n-        str = ATOM_TO_STRING(*atomp);\\n-        bytes = js_DeflateString(xdr->cx,\\n-                                 JSSTRING_CHARS(str),\\n-                                 JSSTRING_LENGTH(str));\\n-        if (!bytes)\\n-            return JS_FALSE;\\n-        ok = JS_XDRCString(xdr, &bytes);\\n-        JS_free(xdr->cx, bytes);\\n-        return ok;\\n-    }\\n-\\n-    /*\\n-     * Inline JS_XDRCString when decoding not to malloc temporary buffer\\n-     * just to free it after atomization. See bug 321985.\\n-     */\\n-    if (!JS_XDRUint32(xdr, &nbytes))\\n-        return JS_FALSE;\\n-    atom = NULL;\\n-    cx = xdr->cx;\\n-    mark = JS_ARENA_MARK(&cx->tempPool);\\n-    JS_ARENA_ALLOCATE_CAST(bytes, char *, &cx->tempPool,\\n-                           nbytes * sizeof *bytes);\\n-    if (!bytes)\\n-        JS_ReportOutOfMemory(cx);\\n-    else if (JS_XDRBytes(xdr, bytes, nbytes))\\n-        atom = js_Atomize(cx, bytes, nbytes, 0);\\n-    JS_ARENA_RELEASE(&cx->tempPool, mark);\\n-    if (!atom)\\n-        return JS_FALSE;\\n-    *atomp = atom;\\n-    return JS_TRUE;\\n-}\\n-\\n JS_PUBLIC_API(JSBool)\\n JS_XDRScript(JSXDRState *xdr, JSScript **scriptp)\\n {\\ndiff --git a/js/src/jsxdrapi.h b/js/src/jsxdrapi.h\\nindex 8e58996..c44f245 100644\\n--- a/js/src/jsxdrapi.h\\n+++ b/js/src/jsxdrapi.h\\n@@ -190,7 +190,8 @@ JS_XDRFindClassById(JSXDRState *xdr, uint32 id);\\n #define JSXDR_MAGIC_SCRIPT_4        0xdead0004\\n #define JSXDR_MAGIC_SCRIPT_5        0xdead0005\\n #define JSXDR_MAGIC_SCRIPT_6        0xdead0006\\n-#define JSXDR_MAGIC_SCRIPT_CURRENT  JSXDR_MAGIC_SCRIPT_6\\n+#define JSXDR_MAGIC_SCRIPT_7        0xdead0007\\n+#define JSXDR_MAGIC_SCRIPT_CURRENT  JSXDR_MAGIC_SCRIPT_7\\n \\n /*\\n  * Bytecode version number.  Decrement the second term whenever JS bytecode\\n@@ -212,13 +213,6 @@ js_XDRAtom(JSXDRState *xdr, JSAtom **atomp);\\n extern JSBool\\n js_XDRStringAtom(JSXDRState *xdr, JSAtom **atomp);\\n \\n-/*\\n- * FIXME: This is non-unicode version of js_XDRStringAtom that performs lossy\\n- * conversion. Do not use it in the new code! See bug 325202.\\n- */\\n-extern JSBool\\n-js_XDRCStringAtom(JSXDRState *xdr, JSAtom **atomp);\\n-\\n JS_END_EXTERN_C\\n \\n #endif /* ! jsxdrapi_h___ */\\n\""}