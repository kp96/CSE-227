{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas7a34ccf\""},"diff":"\"7a34ccf Bug 396453 - Convert DownloadManager flag variables into flag functions.  Patch by Edward Lee <edilee@gmail.com>.  r=sdwilsh, a=mconnor\\ndiff --git a/toolkit/components/downloads/src/nsDownloadManager.cpp b/toolkit/components/downloads/src/nsDownloadManager.cpp\\nindex 2b616c5..30ace8a 100644\\n--- a/toolkit/components/downloads/src/nsDownloadManager.cpp\\n+++ b/toolkit/components/downloads/src/nsDownloadManager.cpp\\n@@ -153,7 +153,7 @@ nsDownloadManager::CompleteDownload(nsDownload *aDownload)\\n \\n   // we need do what exthandler would have done for a finished download\\n   if (aDownload->mDownloadState == nsIDownloadManager::DOWNLOAD_FINISHED &&\\n-      aDownload->mWasResumed)\\n+      aDownload->WasResumed())\\n     (void)ExecuteDesiredAction(aDownload);\\n \\n   (void)mCurrentDownloads.RemoveObject(aDownload);\\n@@ -164,7 +164,7 @@ nsDownloadManager::ExecuteDesiredAction(nsDownload *aDownload)\\n {\\n   // If we have a temp file and we have resumed, we have to do what the external\\n   // helper app service would have done.\\n-  if (!aDownload->mTempFile || !aDownload->mWasResumed)\\n+  if (!aDownload->mTempFile || !aDownload->WasResumed())\\n     return NS_OK;\\n \\n   // We need to bail if for some reason the temp file got removed\\n@@ -1143,7 +1143,7 @@ nsDownloadManager::CancelDownload(PRUint32 aID)\\n     return NS_OK;\\n \\n   // if the download is paused, we have to resume it so we can cancel it\\n-  if (dl->mPaused)\\n+  if (dl->IsPaused())\\n     (void)dl->PauseResume(PR_FALSE);\\n \\n   // Cancel using the provided object\\n@@ -1507,8 +1507,6 @@ nsDownload::nsDownload() : mDownloadState(nsIDownloadManager::DOWNLOAD_NOTSTARTE\\n                            mMaxBytes(LL_MAXUINT),\\n                            mStartTime(0),\\n                            mLastUpdate(PR_Now() - (PRUint32)gUpdateInterval),\\n-                           mPaused(PR_FALSE),\\n-                           mWasResumed(PR_FALSE),\\n                            mResumedAt(0),\\n                            mSpeed(0)\\n {\\n@@ -2045,22 +2043,12 @@ nsDownload::GetReferrer(nsIURI **referrer)\\n nsresult\\n nsDownload::PauseResume(PRBool aPause)\\n {\\n-  if (mPaused == aPause || !mRequest)\\n+  if (IsPaused() == aPause || !mRequest)\\n     return NS_OK;\\n \\n-  nsHandlerInfoAction action = nsIMIMEInfo::saveToDisk;\\n   nsresult rv;\\n-  if (mMIMEInfo) {\\n-    rv = mMIMEInfo->GetPreferredAction(&action);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-  }\\n-\\n-  PRBool resumable = PR_FALSE;\\n-  if (action == nsIMIMEInfo::saveToDisk && !mEntityID.IsEmpty())\\n-    resumable = PR_TRUE;\\n-\\n   if (aPause) {\\n-    if (resumable) {\\n+    if (IsResumable()) {\\n       rv = mCancelable->Cancel(NS_BINDING_ABORTED);\\n       NS_ENSURE_SUCCESS(rv, rv);\\n     } else {\\n@@ -2069,13 +2057,10 @@ nsDownload::PauseResume(PRBool aPause)\\n       rv = mRequest->Suspend();\\n       NS_ENSURE_SUCCESS(rv, rv);\\n     }\\n-    mPaused = PR_TRUE;\\n     return SetState(nsIDownloadManager::DOWNLOAD_PAUSED);\\n   }\\n \\n-  if (resumable) {\\n-    mWasResumed = PR_TRUE;\\n-\\n+  if (IsResumable()) {\\n     nsCOMPtr<nsIWebBrowserPersist> wbp =\\n       do_CreateInstance(\\\"@mozilla.org/embedding/browser/nsWebBrowserPersist;1\\\", &rv);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n@@ -2142,11 +2127,39 @@ nsDownload::PauseResume(PRBool aPause)\\n     NS_ENSURE_SUCCESS(rv, rv);\\n   }\\n \\n-  mPaused = PR_FALSE;\\n   return SetState(nsIDownloadManager::DOWNLOAD_DOWNLOADING);\\n }\\n \\n PRBool\\n+nsDownload::IsPaused()\\n+{\\n+  return mDownloadState == nsIDownloadManager::DOWNLOAD_PAUSED;\\n+}\\n+\\n+PRBool\\n+nsDownload::IsResumable()\\n+{\\n+  nsHandlerInfoAction action = nsIMIMEInfo::saveToDisk;\\n+  if (mMIMEInfo)\\n+    (void)mMIMEInfo->GetPreferredAction(&action);\\n+\\n+  // For now we can only resume saveToDisk type actions (not open with)\\n+  return action == nsIMIMEInfo::saveToDisk && !mEntityID.IsEmpty();\\n+}\\n+\\n+PRBool\\n+nsDownload::WasResumed()\\n+{\\n+  return mResumedAt > 0;\\n+}\\n+\\n+PRBool\\n+nsDownload::IsRealPaused()\\n+{\\n+  return IsPaused() && IsResumable();\\n+}\\n+\\n+PRBool\\n nsDownload::IsFinishable()\\n {\\n   return mDownloadState == nsIDownloadManager::DOWNLOAD_NOTSTARTED ||\\ndiff --git a/toolkit/components/downloads/src/nsDownloadManager.h b/toolkit/components/downloads/src/nsDownloadManager.h\\nindex c6a3802..224f82a 100644\\n--- a/toolkit/components/downloads/src/nsDownloadManager.h\\n+++ b/toolkit/components/downloads/src/nsDownloadManager.h\\n@@ -202,6 +202,26 @@ protected:\\n   nsresult PauseResume(PRBool aPause);\\n \\n   /**\\n+   * Download is not transferring?\\n+   */\\n+  PRBool IsPaused();\\n+\\n+  /**\\n+   * Download can continue from the middle of a transfer?\\n+   */\\n+  PRBool IsResumable();\\n+\\n+  /**\\n+   * Download was resumed?\\n+   */\\n+  PRBool WasResumed();\\n+\\n+  /**\\n+   * Download is real-paused? (not fake-paused by stalling the channel)\\n+   */\\n+  PRBool IsRealPaused();\\n+\\n+  /**\\n    * Download is in a state to stop and complete the download?\\n    */\\n   PRBool IsFinishable();\\n@@ -241,8 +261,6 @@ private:\\n \\n   PRTime mStartTime;\\n   PRTime mLastUpdate;\\n-  PRBool mPaused;\\n-  PRBool mWasResumed;\\n   PRUint64 mResumedAt;\\n   double mSpeed;\\n \\n\""}