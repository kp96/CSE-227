{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas1deb13d\""},"diff":"\"1deb13d Bug 389816: Port badCertHandler to xpinstall. r+sr=dveditz, a=bzbarsky\\ndiff --git a/xpinstall/src/Makefile.in b/xpinstall/src/Makefile.in\\nindex 97ec520..a37008c 100644\\n--- a/xpinstall/src/Makefile.in\\n+++ b/xpinstall/src/Makefile.in\\n@@ -88,6 +88,8 @@ REQUIRES\\t= xpcom \\\\\\n \\t\\t  chrome \\\\\\n \\t\\t  extensions \\\\\\n \\t\\t  embed_base \\\\\\n+\\t\\t  pipnss \\\\\\n+\\t\\t  pipboot \\\\\\n \\t\\t  $(ZLIB_REQUIRES) \\\\\\n \\t\\t  $(NULL)\\n \\ndiff --git a/xpinstall/src/nsXPInstallManager.cpp b/xpinstall/src/nsXPInstallManager.cpp\\nindex 8ee6c86..89e8121 100644\\n--- a/xpinstall/src/nsXPInstallManager.cpp\\n+++ b/xpinstall/src/nsXPInstallManager.cpp\\n@@ -21,6 +21,7 @@\\n  *\\n  * Contributor(s):\\n  *   Daniel Veditz <dveditz@netscape.com>\\n+ *   Dave Townsend <dtownsend@oxymoronical.com>\\n  *\\n  * Alternatively, the contents of this file may be used under the terms of\\n  * either of the GNU General Public License Version 2 or later (the \\\"GPL\\\"),\\n@@ -80,6 +81,10 @@\\n #include \\\"nsISupportsPrimitives.h\\\"\\n #include \\\"nsIObserverService.h\\\"\\n \\n+#include \\\"nsISSLStatusProvider.h\\\"\\n+#include \\\"nsISSLStatus.h\\\"\\n+#include \\\"nsIX509Cert.h\\\"\\n+\\n #include \\\"nsIPrefService.h\\\"\\n #include \\\"nsIPrefBranch.h\\\"\\n \\n@@ -110,7 +115,7 @@ inline PRBool nsXPInstallManager::TimeToUpdate(PRTime now)\\n nsXPInstallManager::nsXPInstallManager()\\n   : mTriggers(0), mItem(0), mNextItem(0), mNumJars(0), mChromeType(NOT_CHROME),\\n     mContentLength(0), mDialogOpen(PR_FALSE), mCancelled(PR_FALSE),\\n-    mSelectChrome(PR_FALSE), mNeedsShutdown(PR_FALSE)\\n+    mSelectChrome(PR_FALSE), mNeedsShutdown(PR_FALSE), mFromChrome(PR_FALSE)\\n {\\n     // we need to own ourself because we have a longer\\n     // lifetime than the scriptlet that created us.\\n@@ -132,7 +137,7 @@ nsXPInstallManager::~nsXPInstallManager()\\n }\\n \\n \\n-NS_IMPL_THREADSAFE_ISUPPORTS9( nsXPInstallManager,\\n+NS_IMPL_THREADSAFE_ISUPPORTS11(nsXPInstallManager,\\n                                nsIXPIListener,\\n                                nsIXPIDialogService,\\n                                nsIXPInstallManager,\\n@@ -141,6 +146,8 @@ NS_IMPL_THREADSAFE_ISUPPORTS9( nsXPInstallManager,\\n                                nsIProgressEventSink,\\n                                nsIInterfaceRequestor,\\n                                nsPICertNotification,\\n+                               nsIBadCertListener,\\n+                               nsIChannelEventSink,\\n                                nsISupportsWeakReference)\\n \\n NS_IMETHODIMP\\n@@ -197,6 +204,8 @@ nsXPInstallManager::InitManagerWithHashes(const PRUnichar **aURLs,\\n         return rv;\\n     }\\n \\n+    mFromChrome = PR_TRUE;\\n+    \\n     rv = Observe(aListener, XPI_PROGRESS_TOPIC, NS_LITERAL_STRING(\\\"open\\\").get());\\n     if (NS_FAILED(rv))\\n         Shutdown();\\n@@ -975,7 +984,51 @@ nsXPInstallManager::GetDestinationFile(nsString& url, nsILocalFile* *file)\\n     return rv;\\n }\\n \\n-\\n+nsresult\\n+nsXPInstallManager::CheckCert(nsIChannel* aChannel)\\n+{\\n+    nsCOMPtr<nsIURI> uri;\\n+    nsresult rv = aChannel->GetOriginalURI(getter_AddRefs(uri));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    nsCAutoString scheme;\\n+    rv = uri->GetScheme(scheme);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    if (!scheme.Equals(NS_LITERAL_CSTRING(\\\"https\\\")))\\n+        return NS_OK;\\n+    \\n+    nsCOMPtr<nsISupports> security;\\n+    rv = aChannel->GetSecurityInfo(getter_AddRefs(security));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    nsCOMPtr<nsISSLStatusProvider> statusProvider(do_QueryInterface(security));\\n+    NS_ENSURE_TRUE(statusProvider, NS_ERROR_FAILURE);\\n+    \\n+    rv = statusProvider->GetSSLStatus(getter_AddRefs(security));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    nsCOMPtr<nsISSLStatus> status(do_QueryInterface(security));\\n+    NS_ENSURE_TRUE(status, NS_ERROR_FAILURE);\\n+    nsCOMPtr<nsIX509Cert> cert;\\n+    rv = status->GetServerCert(getter_AddRefs(cert));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    \\n+    nsCOMPtr<nsIX509Cert> issuer;\\n+    rv = cert->GetIssuer(getter_AddRefs(issuer));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    PRBool equal;\\n+    while (issuer && NS_SUCCEEDED(cert->Equals(issuer, &equal)) && !equal) {\\n+        cert = issuer;\\n+        rv = cert->GetIssuer(getter_AddRefs(issuer));\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+    }\\n+    \\n+    if (issuer) {\\n+        nsAutoString tokenName;\\n+        rv = issuer->GetTokenName(tokenName);\\n+        NS_ENSURE_SUCCESS(rv ,rv);\\n+        if (tokenName.Equals(NS_LITERAL_STRING(\\\"Builtin Object Token\\\")))\\n+            return NS_OK;\\n+    }\\n+    return NS_ERROR_FAILURE;\\n+}\\n \\n NS_IMETHODIMP\\n nsXPInstallManager::OnStartRequest(nsIRequest* request, nsISupports *ctxt)\\n@@ -986,6 +1039,11 @@ nsXPInstallManager::OnStartRequest(nsIRequest* request, nsISupports *ctxt)\\n     // download failures.\\n     nsCOMPtr<nsIHttpChannel> httpChan = do_QueryInterface(request);\\n     if (httpChan) {\\n+        // If we were chrome lauched check the certificate on the request\\n+        if (mFromChrome && NS_FAILED(CheckCert(httpChan))) {\\n+            request->Cancel(NS_BINDING_ABORTED);\\n+            return NS_OK;\\n+        }\\n         PRBool succeeded;\\n         if (NS_SUCCEEDED(httpChan->GetRequestSucceeded(&succeeded)) && !succeeded) {\\n             // HTTP response is not a 2xx!\\n@@ -1168,9 +1226,52 @@ nsXPInstallManager::GetInterface(const nsIID & eventSinkIID, void* *_retval)\\n         *_retval = p;\\n         return NS_OK;\\n     }\\n+    else if (eventSinkIID.Equals(NS_GET_IID(nsIBadCertListener))) {\\n+        // If we aren't chrome triggered fall back to the default dialogs\\n+        if (!mFromChrome)\\n+            return NS_ERROR_NO_INTERFACE;\\n+    }\\n     return QueryInterface(eventSinkIID, (void**)_retval);\\n }\\n \\n+// nsIChannelEventSink method\\n+NS_IMETHODIMP\\n+nsXPInstallManager::OnChannelRedirect(nsIChannel *oldChannel, nsIChannel *newChannel, PRUint32 flags)\\n+{\\n+    // Chrome triggered installs need to have their certificates checked\\n+    if (mFromChrome)\\n+        return CheckCert(oldChannel);\\n+    return NS_OK;\\n+}\\n+\\n+// nsIBadCertListener methods\\n+NS_IMETHODIMP\\n+nsXPInstallManager::ConfirmUnknownIssuer(nsIInterfaceRequestor *socketInfo, nsIX509Cert *cert, PRInt16 *certAddType, PRBool *_retval)\\n+{\\n+    *_retval = PR_FALSE;\\n+    return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXPInstallManager::ConfirmMismatchDomain(nsIInterfaceRequestor *socketInfo, const nsACString & targetURL, nsIX509Cert *cert, PRBool *_retval)\\n+{\\n+    *_retval = PR_FALSE;\\n+    return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXPInstallManager::ConfirmCertExpired(nsIInterfaceRequestor *socketInfo, nsIX509Cert *cert, PRBool *_retval)\\n+{\\n+    *_retval = PR_FALSE;\\n+    return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsXPInstallManager::NotifyCrlNextupdate(nsIInterfaceRequestor *socketInfo, const nsACString & targetURL, nsIX509Cert *cert)\\n+{\\n+    return NS_OK;\\n+}\\n+\\n // IXPIListener methods\\n \\n PRInt32 \\ndiff --git a/xpinstall/src/nsXPInstallManager.h b/xpinstall/src/nsXPInstallManager.h\\nindex 6fde82f..dea006e 100644\\n--- a/xpinstall/src/nsXPInstallManager.h\\n+++ b/xpinstall/src/nsXPInstallManager.h\\n@@ -56,6 +56,8 @@\\n #include \\\"nsIChromeRegistry.h\\\"\\n #include \\\"nsIDOMWindowInternal.h\\\"\\n #include \\\"nsIObserver.h\\\"\\n+#include \\\"nsIBadCertListener.h\\\"\\n+#include \\\"nsIChannelEventSink.h\\\"\\n \\n #include \\\"nsISoftwareUpdate.h\\\"\\n \\n@@ -83,6 +85,8 @@ class nsXPInstallManager : public nsIXPIListener,\\n                            public nsIProgressEventSink,\\n                            public nsIInterfaceRequestor,\\n                            public nsPICertNotification,\\n+                           public nsIBadCertListener,\\n+                           public nsIChannelEventSink,\\n                            public nsSupportsWeakReference\\n {\\n     public:\\n@@ -99,6 +103,8 @@ class nsXPInstallManager : public nsIXPIListener,\\n         NS_DECL_NSIREQUESTOBSERVER\\n         NS_DECL_NSIINTERFACEREQUESTOR\\n         NS_DECL_NSPICERTNOTIFICATION\\n+        NS_DECL_NSIBADCERTLISTENER\\n+        NS_DECL_NSICHANNELEVENTSINK\\n \\n         NS_IMETHOD InitManager(nsIScriptGlobalObject* aGlobalObject, nsXPITriggerInfo* aTrigger, PRUint32 aChromeType );\\n \\n@@ -114,6 +120,7 @@ class nsXPInstallManager : public nsIXPIListener,\\n         PRBool      TimeToUpdate(PRTime now);\\n         PRBool      VerifyHash(nsXPITriggerItem* aItem);\\n         PRInt32     GetIndexFromURL(const PRUnichar* aUrl);\\n+        nsresult    CheckCert(nsIChannel* aChannel);\\n \\n         nsXPITriggerInfo*   mTriggers;\\n         nsXPITriggerItem*   mItem;\\n@@ -127,6 +134,7 @@ class nsXPInstallManager : public nsIXPIListener,\\n         PRBool              mCancelled;\\n         PRBool              mSelectChrome;\\n         PRBool              mNeedsShutdown;\\n+        PRBool              mFromChrome;\\n   \\n         nsCOMPtr<nsIXPIProgressDialog>  mDlg;\\n         nsCOMPtr<nsISoftwareUpdate>     mInstallSvc;\\n\""}