{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basa47b5e7\""},"diff":"\"a47b5e7 Remove obsolete files\\ndiff --git a/widget/src/os2/nsPaletteOS2.cpp b/widget/src/os2/nsPaletteOS2.cpp\\ndeleted file mode 100644\\nindex d8b631f..0000000\\n--- a/widget/src/os2/nsPaletteOS2.cpp\\n+++ /dev/null\\n@@ -1,272 +0,0 @@\\n-/*\\n- * The contents of this file are subject to the Mozilla Public License\\n- * Version 1.1 (the \\\"License\\\"); you may not use this file except in\\n- * compliance with the License. You may obtain a copy of the License at\\n- * http://www.mozilla.org/MPL/\\n- *\\n- * Software distributed under the License is distributed on an \\\"AS IS\\\"\\n- * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\\n- * License for the specific language governing rights and limitations\\n- * under the License.\\n- *\\n- * The Original Code is the Mozilla OS/2 libraries.\\n- *\\n- * The Initial Developer of the Original Code is John Fairhurst,\\n- * <john_fairhurst@iname.com>.  Portions created by John Fairhurst are\\n- * Copyright (C) 1999 John Fairhurst. All Rights Reserved.\\n- *\\n- * Contributor(s): \\n- *\\n- * This Original Code has been modified by IBM Corporation. Modifications made by IBM \\n- * described herein are Copyright (c) International Business Machines Corporation, 2000.\\n- * Modifications to Mozilla code or documentation identified per MPL Section 3.3\\n- *\\n- * Date             Modified by     Description of modification\\n- * 05/08/2000       IBM Corp.      Fix for trying to us an already freed mGammaTable.\\n- */\\n-\\n-// ToDo: nothing\\n-#include \\\"nsGfxDefs.h\\\"\\n-#include <stdlib.h>\\n-\\n-#include \\\"nsDeviceContextOS2.h\\\" // sigh...\\n-#include \\\"nsPaletteOS2.h\\\"\\n-#include \\\"il_util.h\\\"\\n-\\n-// os2fe/palette.cpp lives! Sort of.\\n-//\\n-// There's just the one palette, which is shared by all the windows,\\n-// DC's and whatever that get created.\\n-//\\n-// This makes apprunner vaguely usable!\\n-//\\n-// Printing might need some work.\\n-\\n-// Common base\\n-class nsPaletteOS2 : public nsIPaletteOS2\\n-{\\n- protected:\\n-   nsIDeviceContext *mContext; // don't hold a ref to avoid circularity\\n-   PRUint8          *mGammaTable;\\n-\\n- public:\\n-   virtual nsresult Init( nsIDeviceContext *aContext,\\n-                          ULONG * = 0, ULONG = 0)\\n-   {\\n-      mContext = aContext;\\n-      mContext->GetGammaTable( mGammaTable);\\n-      return mContext == nsnull ? NS_ERROR_FAILURE : NS_OK;\\n-   }\\n-\\n-   long GetGPIColor( nsIDeviceContext *aContext, HPS hps, nscolor rgb)\\n-   {\\n-      if (mContext != aContext) {\\n-         mContext = aContext;\\n-         mContext->GetGammaTable( mGammaTable);\\n-      }\\n-      long gcolor = MK_RGB( mGammaTable[NS_GET_R(rgb)],\\n-                            mGammaTable[NS_GET_G(rgb)],\\n-                            mGammaTable[NS_GET_B(rgb)]);\\n-      return GpiQueryColorIndex( hps, 0, gcolor);\\n-   }\\n-\\n-   virtual nsresult GetNSPalette( nsPalette &aPalette) const\\n-   {\\n-      aPalette = 0;\\n-      return NS_OK;\\n-   }\\n-\\n-   NS_DECL_ISUPPORTS\\n-\\n-   nsPaletteOS2()\\n-   {\\n-      NS_INIT_REFCNT();\\n-      mContext = nsnull;\\n-      mGammaTable = 0;\\n-   }\\n-\\n-   virtual ~nsPaletteOS2()\\n-   {}\\n-};\\n-\\n-// this isn't really an xpcom object, so don't allow anyone to get anything\\n-nsresult nsPaletteOS2::QueryInterface( const nsIID&, void**)\\n-{\\n-   return NS_NOINTERFACE;\\n-}\\n-\\n-NS_IMPL_ADDREF(nsPaletteOS2)\\n-NS_IMPL_RELEASE(nsPaletteOS2)\\n-\\n-// Logical colour table, for 8bpp with no palette manager or explicit choice\\n-class nsLCOLPaletteOS2 : public nsPaletteOS2\\n-{\\n-   ULONG *mTable;\\n-   ULONG  mSize;\\n-\\n- public:\\n-   nsresult Init( nsIDeviceContext *aContext,\\n-                  ULONG *pEntries, ULONG cEntries)\\n-   {\\n-      mTable = pEntries;\\n-      mSize = cEntries;\\n-      return nsPaletteOS2::Init( aContext);\\n-   }\\n-\\n-   nsresult Select( HPS hps, nsIDeviceContext *)\\n-   {\\n-      BOOL rc = GpiCreateLogColorTable( hps, LCOL_RESET | LCOL_PURECOLOR,\\n-                                        LCOLF_CONSECRGB, 0,\\n-                                        mSize, (PLONG) mTable);\\n-      if( !rc)\\n-         PMERROR( \\\"GpiCreateLogColorTable\\\");\\n-      return rc ? NS_OK : NS_ERROR_FAILURE;\\n-   }\\n-\\n-   nsresult Deselect( HPS hps)\\n-   {\\n-      BOOL rc = GpiCreateLogColorTable( hps, LCOL_RESET, 0, 0, 0, 0);\\n-      return rc ? NS_OK : NS_ERROR_FAILURE;\\n-   }\\n-\\n-   nsLCOLPaletteOS2()\\n-   {\\n-      mTable = 0;\\n-      mSize = 0;\\n-   }\\n-\\n-  ~nsLCOLPaletteOS2()\\n-   {\\n-      if( mTable) free( mTable);\\n-   }\\n-};\\n-\\n-// Palette manager palette, for 8bpp with palette manager\\n-class nsHPALPaletteOS2 : public nsPaletteOS2\\n-{\\n-   HPAL mHPal;\\n-\\n- public:\\n-   nsresult Init( nsIDeviceContext *aContext,\\n-                  ULONG *pEntries, ULONG cEntries)\\n-   {\\n-      mHPal = GpiCreatePalette( 0/*hab*/, LCOL_PURECOLOR, LCOLF_CONSECRGB,\\n-                                cEntries, pEntries);\\n-      free( pEntries);\\n-\\n-      return nsPaletteOS2::Init( aContext);\\n-   }\\n-\\n-   nsresult GetNSPalette( nsPalette &aPalette) const\\n-   {\\n-      aPalette = (nsPalette) mHPal;\\n-      return NS_OK;\\n-   }\\n-\\n-   nsresult Select( HPS hps, nsIDeviceContext *aContext)\\n-   {\\n-      HPAL rc = GpiSelectPalette( hps, mHPal);\\n-      if( rc == (HPAL) PAL_ERROR)\\n-      {\\n-         PMERROR( \\\"GpiSelectPalette\\\");\\n-         return NS_ERROR_FAILURE;\\n-      }\\n-\\n-      // okay, we could do with a window here.  Unfortunately there's\\n-      // no guarantee that this is going to return anything sensible.\\n-      nsNativeWidget wdg = ((nsDeviceContextOS2 *) aContext)->mWidget;\\n-      if( wdg)\\n-      {\\n-         ULONG ulDummy = 0;\\n-         WinRealizePalette( (HWND)wdg, hps, &ulDummy);\\n-      }\\n-      return NS_OK;\\n-   }\\n-\\n-   nsresult Deselect( HPS hps)\\n-   {\\n-      HPAL rc = GpiSelectPalette( hps, 0);\\n-      return rc == ((HPAL)PAL_ERROR) ? NS_ERROR_FAILURE : NS_OK;\\n-   }\\n-\\n-   nsHPALPaletteOS2()\\n-   {\\n-      mHPal = 0;\\n-   }\\n-\\n-  ~nsHPALPaletteOS2()\\n-   {\\n-      if( mHPal)\\n-         GpiDeletePalette( mHPal);\\n-   }\\n-};\\n-\\n-// RGB colour table, for >8bpp\\n-class nsRGBPaletteOS2 : public nsPaletteOS2\\n-{\\n- public:\\n-   nsresult Select( HPS hps, nsIDeviceContext *)\\n-   {\\n-      BOOL rc = GpiCreateLogColorTable( hps, LCOL_PURECOLOR,\\n-                                        LCOLF_RGB, 0, 0, 0);\\n-      if( !rc)\\n-         PMERROR( \\\"GpiCreateLogColorTable #2\\\");\\n-      return rc ? NS_OK : NS_ERROR_FAILURE;\\n-   }\\n-\\n-   nsresult Deselect( HPS hps)\\n-   {\\n-      BOOL rc = GpiCreateLogColorTable( hps, LCOL_RESET, 0, 0, 0, 0);\\n-      return rc ? NS_OK : NS_ERROR_FAILURE;\\n-   }\\n-\\n-   nsRGBPaletteOS2() {}\\n-  ~nsRGBPaletteOS2() {}\\n-};\\n-\\n-nsresult NS_CreatePalette( nsIDeviceContext *aContext, nsIPaletteOS2 *&aPalette)\\n-{\\n-   nsresult       rc = NS_OK;\\n-   IL_ColorSpace *colorSpace = 0;\\n-\\n-   nsPaletteOS2 *newPalette = 0;\\n-\\n-   rc = aContext->GetILColorSpace( colorSpace);\\n-   if( NS_SUCCEEDED(rc))\\n-   {\\n-      if( NI_PseudoColor == colorSpace->type)\\n-      {\\n-         PULONG pPalette = (PULONG) calloc( COLOR_CUBE_SIZE, sizeof( ULONG));\\n-   \\n-         // Now set the color cube entries.\\n-         for( PRInt32 i = 0; i < COLOR_CUBE_SIZE; i++)\\n-         {\\n-            IL_RGB *map = colorSpace->cmap.map + i;\\n-            pPalette[ i] = MK_RGB( map->red, map->green, map->blue);\\n-         }\\n-   \\n-         // this works, sorta.  Should probably tell users,\\n-         // or activate via a pref, or something.\\n-         if( getenv( \\\"MOZ_USE_LCOL\\\"))\\n-            newPalette = new nsLCOLPaletteOS2;\\n-         else\\n-            newPalette = new nsHPALPaletteOS2;\\n-         rc = newPalette->Init( aContext, pPalette, COLOR_CUBE_SIZE);\\n-      }\\n-      else\\n-      {\\n-         newPalette = new nsRGBPaletteOS2;\\n-         rc = newPalette->Init( aContext);\\n-      }\\n-   \\n-      IL_ReleaseColorSpace( colorSpace);\\n-   }\\n-\\n-   if( NS_SUCCEEDED(rc))\\n-   {\\n-      NS_ADDREF(newPalette);\\n-      aPalette = newPalette;\\n-   }\\n-\\n-   return rc;\\n-}\\ndiff --git a/widget/src/os2/nsPaletteOS2.h b/widget/src/os2/nsPaletteOS2.h\\ndeleted file mode 100644\\nindex bd3b8a7..0000000\\n--- a/widget/src/os2/nsPaletteOS2.h\\n+++ /dev/null\\n@@ -1,59 +0,0 @@\\n-/*\\n- * The contents of this file are subject to the Mozilla Public License\\n- * Version 1.1 (the \\\"License\\\"); you may not use this file except in\\n- * compliance with the License. You may obtain a copy of the License at\\n- * http://www.mozilla.org/MPL/\\n- *\\n- * Software distributed under the License is distributed on an \\\"AS IS\\\"\\n- * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\\n- * License for the specific language governing rights and limitations\\n- * under the License.\\n- *\\n- * The Original Code is the Mozilla OS/2 libraries.\\n- *\\n- * The Initial Developer of the Original Code is John Fairhurst,\\n- * <john_fairhurst@iname.com>.  Portions created by John Fairhurst are\\n- * Copyright (C) 1999 John Fairhurst. All Rights Reserved.\\n- *\\n- * Contributor(s): \\n- *\\n- * This Original Code has been modified by IBM Corporation. Modifications made by IBM \\n- * described herein are Copyright (c) International Business Machines Corporation, 2000.\\n- * Modifications to Mozilla code or documentation identified per MPL Section 3.3\\n- *\\n- * Date             Modified by     Description of modification\\n- * 05/08/2000       IBM Corp.      Fix for trying to us an already freed mGammaTable.\\n- */\\n-\\n-// Manage picking of colours via various GPI methods.\\n-// Created & (hopefully) destroyed by nsDeviceContextOS2; each rendering\\n-// context spun off from that dc holds a ref to it, and uses it to get things\\n-// right.  Gamma correction done here too using the dc's table, so don't\\n-// go through gamma before GetGPIColor()'ing.\\n-//\\n-// !! What to do about A-channel ?\\n-\\n-#ifndef _nspaletteos2_h\\n-#define _nspaletteos2_h\\n-\\n-#include \\\"nsIDeviceContext.h\\\"\\n-#include \\\"nscolor.h\\\"\\n-\\n-class nsIDeviceContext;\\n-\\n-class nsIPaletteOS2 : public nsISupports\\n-{\\n- public:\\n-   virtual long     GetGPIColor( nsIDeviceContext *aContext, HPS hps, nscolor rgb) = 0;\\n-   virtual nsresult Select( HPS hps, nsIDeviceContext *aContext) = 0;\\n-   virtual nsresult Deselect( HPS hps) = 0;\\n-   virtual nsresult GetNSPalette( nsPalette &aPalette) const = 0;\\n-};\\n-\\n-// So yes, this could be an nsDeviceContextOS2 method, but this way is better\\n-// for modularisation.  Oh yes.\\n-// Release when done.\\n-nsresult NS_CreatePalette( nsIDeviceContext *aContext,\\n-                           nsIPaletteOS2 *&aPalette);\\n-\\n-#endif\\n\""}