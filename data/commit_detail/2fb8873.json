{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas2fb8873\""},"diff":"\"2fb8873 Yay, sync works again!\\ndiff --git a/services/sync/nsBookmarksSyncService.js b/services/sync/nsBookmarksSyncService.js\\nindex 026a730..1d6d8d7 100644\\n--- a/services/sync/nsBookmarksSyncService.js\\n+++ b/services/sync/nsBookmarksSyncService.js\\n@@ -85,11 +85,7 @@ BookmarksSyncService.prototype = {\\n   _snapshotVersion: 0,\\n \\n   get currentUser() {\\n-    // FIXME - need to expose that info some other way\\n-    if (this._dav._currentUserPath)\\n-      return this._dav._currentUserPath + \\\"@mozilla.com\\\";\\n-    else\\n-      return null;\\n+    return this._dav.currentUser;\\n   },\\n \\n   _init: function BSS__init() {\\n@@ -138,230 +134,6 @@ BookmarksSyncService.prototype = {\\n     items[guid] = item;\\n   },\\n \\n-  // Takes a vanilla command list (fro sync-engine.js) and combines\\n-  // them so that each create/edit/remove fully creates/edits/removes\\n-  // an item (sync-engine.js will give us one command per object\\n-  // property, i.e., a bunch of commands per item)\\n-  _combineCommands: function BSS__combineCommands(commandList) {\\n-    var newList = [];\\n-\\n-    for (var i = 0; i < commandList.length; i++) {\\n-      LOG(\\\"Combining command: \\\" + uneval(commandList[i]));\\n-\\n-      var action = commandList[i].action;\\n-      var value = commandList[i].value;\\n-      var path = commandList[i].path;\\n-\\n-      // ignore commands about creating the item container itself\\n-      if (path.length <= 1)\\n-        continue;\\n-\\n-      var guid = path.shift();\\n-      var key = path.pop();\\n-\\n-      if (path.length) {\\n-        LOG(\\\"Warning: editing deep property - dropping\\\");\\n-        continue;\\n-      }\\n-\\n-      if (!newList.length ||\\n-          newList[newList.length - 1].guid != guid ||\\n-          newList[newList.length - 1].action != action)\\n-        newList.push({action: action, guid: guid, data: {}});\\n-\\n-      newList[newList.length - 1].data[key] = value;\\n-    }\\n-    return newList;\\n-  },\\n-\\n-  _nodeDepth: function BSS__nodeDepth(guid, depth) {\\n-    let parent = this._snapshot[guid].parentGuid;\\n-    if (parent == null)\\n-      return depth;\\n-    return this._nodeDepth(parent, ++depth);\\n-  },\\n-\\n-  // Takes *combined* commands and sorts them so that parent folders\\n-  // get created first, then children in reverse index order, then\\n-  // removes.\\n-  // Note: this method uses this._snapshot to calculate node depths;\\n-  // so this._snapshot must have server commands applied to it before\\n-  // calling this method.\\n-  _sortCommands: function BSS__sortCommands(commandList) {\\n-    for (let i = 0; i < commandList.length; i++) {\\n-      commandList[i].depth = this._nodeDepth(commandList[i].guid, 0);\\n-    }\\n-    commandList.sort(function compareNodes(a, b) {\\n-      if (a.depth > b.depth)\\n-        return 1;\\n-      if (a.depth < b.depth)\\n-        return -1;\\n-      if (a.index > b.index)\\n-        return -1;\\n-      if (a.index < b.index)\\n-        return 1;\\n-      return 0; // should never happen, but not a big deal if it does\\n-    });\\n-    return commandList;\\n-  },\\n-\\n-  // Takes *combined* and *sorted* commands and applies them to the\\n-  // places db\\n-  _applyCommands: function BSS__applyCommands(commandList) {\\n-    for (var i = 0; i < commandList.length; i++) {\\n-      var command = commandList[i];\\n-      LOG(\\\"Processing command: \\\" + uneval(command));\\n-      switch (command[\\\"action\\\"]) {\\n-      case \\\"create\\\":\\n-        this._createCommand(command);\\n-        break;\\n-      case \\\"remove\\\":\\n-        this._removeCommand(command);\\n-        break;\\n-      case \\\"edit\\\":\\n-        this._editCommand(command);\\n-        break;\\n-      default:\\n-        LOG(\\\"unknown action in command: \\\" + command[\\\"action\\\"]);\\n-        break;\\n-      }\\n-    }\\n-  },\\n-\\n-  _compareItems: function BSS__compareItems(node, data) {\\n-    switch (data.type) {\\n-    case 0:\\n-      if (node &&\\n-          node.type == node.RESULT_TYPE_URI &&\\n-          node.uri == data.uri && node.title == data.title)\\n-        return true;\\n-      return false;\\n-    case 6:\\n-      if (node &&\\n-          node.type == node.RESULT_TYPE_FOLDER &&\\n-          node.title == data.title)\\n-        return true;\\n-      return false;\\n-    case 7:\\n-      if (node && node.type == node.RESULT_TYPE_SEPARATOR)\\n-        return true;\\n-      return false;\\n-    default:\\n-      LOG(\\\"_compareItems: Unknown item type: \\\" + data.type);\\n-      return false;\\n-    }\\n-  },\\n-\\n-  // FIXME: can't skip creations here; they need to get pruned out\\n-  // during reconciliation, sincethere will be \\\"new\\\" items being sent\\n-  // upstream too\\n-  _createCommand: function BSS__createCommand(command) {\\n-    let newId;\\n-\\n-    // check if it's the root\\n-    if (command.data.parentGuid == null) {\\n-      this._bms.setItemGUID(this._bms.bookmarksRoot, command.guid);\\n-      return;\\n-    }\\n-\\n-    let parentId = this._bms.getItemIdForGUID(command.data.parentGuid);\\n-    if (parentId <= 0) {\\n-      LOG(\\\"Warning: creating node with unknown parent -> reparenting to root\\\");\\n-      parentId = this._bms.bookmarksRoot;\\n-    }\\n-    let parent = this._getBookmarks(parentId);\\n-    parent.QueryInterface(Ci.nsINavHistoryQueryResultNode);\\n-    parent.containerOpen = true;\\n-\\n-    let curItem;\\n-    if (parent.childCount > command.data.index)\\n-      curItem = parent.getChild(command.data.index);\\n-\\n-    if (this._compareItems(curItem, command.data)) {\\n-      LOG(\\\" -> FIXME - skipping item (already exists)\\\");\\n-      this._bms.setItemGUID(curItem.itemId, command.guid);\\n-      return;\\n-    }\\n-\\n-    LOG(\\\" -> creating item\\\");\\n-\\n-    switch (command.data.type) {\\n-    case 0:\\n-      newId = this._bms.insertBookmark(parentId,\\n-                                       makeURI(command.data.uri),\\n-                                       command.data.index,\\n-                                       command.data.title);\\n-      break;\\n-    case 6:\\n-      newId = this._bms.createFolder(parentId,\\n-                                     command.data.title,\\n-                                     command.data.index);\\n-      break;\\n-    case 7:\\n-      newId = this._bms.insertSeparator(parentId, command.data.index);\\n-      break;\\n-    default:\\n-      LOG(\\\"_createCommand: Unknown item type: \\\" + command.data.type);\\n-      break;\\n-    }\\n-    if (newId)\\n-      this._bms.setItemGUID(newId, command.guid);\\n-  },\\n-\\n-  _removeCommand: function BSS__removeCommand(command) {\\n-    var itemId = this._bms.getItemIdForGUID(command.guid);\\n-    var type = this._bms.getItemType(itemId);\\n-\\n-    switch (type) {\\n-    case this._bms.TYPE_BOOKMARK:\\n-      // FIXME: check it's an actual bookmark?\\n-      LOG(\\\"  -> removing bookmark \\\" + command.guid);\\n-      this._bms.removeItem(itemId);\\n-      break;\\n-    case this._bms.TYPE_FOLDER:\\n-      LOG(\\\"  -> removing folder \\\" + command.guid);\\n-      this._bms.removeFolder(itemId);\\n-      break;\\n-    case this._bms.TYPE_SEPARATOR:\\n-      LOG(\\\"  -> removing separator \\\" + command.guid);\\n-      this._bms.removeItem(itemId);\\n-      break;\\n-    default:\\n-      LOG(\\\"removeCommand: Unknown item type: \\\" + type);\\n-      break;\\n-    }\\n-  },\\n-\\n-  _editCommand: function BSS__editCommand(command) {\\n-    var itemId = this._bms.getItemIdForGUID(command.guid);\\n-    var type = this._bms.getItemType(itemId);\\n-\\n-    for (let key in command.data) {\\n-      switch (key) {\\n-      case \\\"guid\\\":\\n-        this._bms.setItemGUID(itemId, command.data.guid);\\n-        break;\\n-      case \\\"title\\\":\\n-        this._bms.setItemTitle(itemId, command.data.title);\\n-        break;\\n-      case \\\"uri\\\":\\n-        this._bms.changeBookmarkURI(itemId, makeURI(command.data.uri));\\n-        break;\\n-      case \\\"index\\\": // FIXME: what if we do this one before parentGuid ? that'd be wrong\\n-        this._bms.moveItem(itemId, this._bms.getFolderIdForItem(itemId),\\n-                           command.data.index);\\n-        break;\\n-      case \\\"parentGuid\\\":\\n-        this._bms.moveItem(\\n-          itemId, this._bms.getItemIdForGUID(command.data.parentGuid), -1);\\n-        break;\\n-      default:\\n-        LOG(\\\"Warning: Can't change item property: \\\" + key);\\n-        break;\\n-      }\\n-    }\\n-  },\\n-\\n   _getEdits: function BSS__getEdits(a, b) {\\n     // check the type separately, just in case\\n     if (a.type != b.type)\\n@@ -567,15 +339,139 @@ BookmarksSyncService.prototype = {\\n \\n   _applyCommandsToObj: function BSS__applyCommandsToObj(commands, obj) {\\n     for (let i = 0; i < commands.length; i++) {\\n-      switch (command.action) {\\n+      LOG(\\\"Applying cmd to obj: \\\" + uneval(commands[i]));\\n+      switch (commands[i].action) {\\n       case \\\"create\\\":\\n-        obj[command.guid] = eval(uneval(command.data));\\n+        obj[commands[i].guid] = eval(uneval(commands[i].data));\\n+        break;\\n       case \\\"edit\\\":\\n-        for (let prop in command.data) {\\n-          obj[command.guid][prop] = command.data[prop];\\n+        for (let prop in commands[i].data) {\\n+          obj[commands[i].guid][prop] = commands[i].data[prop];\\n         }\\n+        break;\\n+      case \\\"remove\\\":\\n+        delete obj[commands[i].guid];\\n+        break;\\n+      }\\n+    }\\n+    return obj;\\n+  },\\n+\\n+  // Applies commands to the places db\\n+  _applyCommands: function BSS__applyCommands(commandList) {\\n+    for (var i = 0; i < commandList.length; i++) {\\n+      var command = commandList[i];\\n+      LOG(\\\"Processing command: \\\" + uneval(command));\\n+      switch (command[\\\"action\\\"]) {\\n+      case \\\"create\\\":\\n+        this._createCommand(command);\\n+        break;\\n       case \\\"remove\\\":\\n-        delete obj[command.guid];\\n+        this._removeCommand(command);\\n+        break;\\n+      case \\\"edit\\\":\\n+        this._editCommand(command);\\n+        break;\\n+      default:\\n+        LOG(\\\"unknown action in command: \\\" + command[\\\"action\\\"]);\\n+        break;\\n+      }\\n+    }\\n+  },\\n+\\n+  _createCommand: function BSS__createCommand(command) {\\n+    let newId;\\n+    let parentId = this._bms.getItemIdForGUID(command.data.parentGuid);\\n+\\n+    if (parentId <= 0) {\\n+      LOG(\\\"Warning: creating node with unknown parent -> reparenting to root\\\");\\n+      parentId = this._bms.bookmarksRoot;\\n+    }\\n+\\n+    LOG(\\\" -> creating item\\\");\\n+\\n+    switch (command.data.type) {\\n+    case 0:\\n+      newId = this._bms.insertBookmark(parentId,\\n+                                       makeURI(command.data.uri),\\n+                                       command.data.index,\\n+                                       command.data.title);\\n+      break;\\n+    case 6:\\n+      newId = this._bms.createFolder(parentId,\\n+                                     command.data.title,\\n+                                     command.data.index);\\n+      break;\\n+    case 7:\\n+      newId = this._bms.insertSeparator(parentId, command.data.index);\\n+      break;\\n+    default:\\n+      LOG(\\\"_createCommand: Unknown item type: \\\" + command.data.type);\\n+      break;\\n+    }\\n+    if (newId)\\n+      this._bms.setItemGUID(newId, command.guid);\\n+  },\\n+\\n+  _removeCommand: function BSS__removeCommand(command) {\\n+    var itemId = this._bms.getItemIdForGUID(command.guid);\\n+    var type = this._bms.getItemType(itemId);\\n+\\n+    switch (type) {\\n+    case this._bms.TYPE_BOOKMARK:\\n+      // FIXME: check it's an actual bookmark?\\n+      LOG(\\\"  -> removing bookmark \\\" + command.guid);\\n+      this._bms.removeItem(itemId);\\n+      break;\\n+    case this._bms.TYPE_FOLDER:\\n+      LOG(\\\"  -> removing folder \\\" + command.guid);\\n+      this._bms.removeFolder(itemId);\\n+      break;\\n+    case this._bms.TYPE_SEPARATOR:\\n+      LOG(\\\"  -> removing separator \\\" + command.guid);\\n+      this._bms.removeItem(itemId);\\n+      break;\\n+    default:\\n+      LOG(\\\"removeCommand: Unknown item type: \\\" + type);\\n+      break;\\n+    }\\n+  },\\n+\\n+  _editCommand: function BSS__editCommand(command) {\\n+    var itemId = this._bms.getItemIdForGUID(command.guid);\\n+    if (itemId == -1) {\\n+      LOG(\\\"Warning: item for guid \\\" + command.guid + \\\" not found.  Skipping.\\\");\\n+      return;\\n+    }\\n+\\n+    var type = this._bms.getItemType(itemId);\\n+\\n+    for (let key in command.data) {\\n+      switch (key) {\\n+      case \\\"guid\\\":\\n+        var existing = this._bms.getItemIdForGUID(command.guid);\\n+        if (existing == -1)\\n+          this._bms.setItemGUID(itemId, command.data.guid);\\n+        else\\n+          LOG(\\\"Warning: can't change guid \\\" + command.guid +\\n+              \\\" to \\\" + command.data.guid + \\\": guid already exists.\\\");\\n+        break;\\n+      case \\\"title\\\":\\n+        this._bms.setItemTitle(itemId, command.data.title);\\n+        break;\\n+      case \\\"uri\\\":\\n+        this._bms.changeBookmarkURI(itemId, makeURI(command.data.uri));\\n+        break;\\n+      case \\\"index\\\": // FIXME: what if we do this one before parentGuid ? that'd be wrong\\n+        this._bms.moveItem(itemId, this._bms.getFolderIdForItem(itemId),\\n+                           command.data.index);\\n+        break;\\n+      case \\\"parentGuid\\\":\\n+        this._bms.moveItem(\\n+          itemId, this._bms.getItemIdForGUID(command.data.parentGuid), -1);\\n+        break;\\n+      default:\\n+        LOG(\\\"Warning: Can't change item property: \\\" + key);\\n         break;\\n       }\\n     }\\n@@ -682,14 +578,8 @@ BookmarksSyncService.prototype = {\\n       // 3.1) Apply server changes to local store\\n       if (propagations[0] && propagations[0].length) {\\n         LOG(\\\"Applying changes locally\\\");\\n-        //localBookmarks = this._getBookmarks(); // fixme: wtf\\n         this._snapshot = this._wrapNode(localBookmarks);\\n-        this._applyCommandsToObj(this._snapshot, propagations[0]);\\n-        //var combinedCommands = this._combineCommands(propagations[0]);\\n-        //LOG(\\\"Combined commands: \\\" + uneval(combinedCommands) + \\\"\\\\n\\\");\\n-        //var sortedCommands = this._sortCommands(combinedCommands);\\n-        //LOG(\\\"Sorted commands: \\\" + uneval(sortedCommands) + \\\"\\\\n\\\");\\n-        //this._applyCommands(combinedCommands);\\n+        propagations[0] = this._applyCommandsToObj(this._snapshot, propagations[0]);\\n         this._applyCommands(propagations[0]);\\n         this._snapshot = this._wrapNode(localBookmarks);\\n       }\\n@@ -771,11 +661,11 @@ BookmarksSyncService.prototype = {\\n         keys = keys.sort();\\n         LOG(\\\"TMP: \\\" + uneval(tmp));\\n         for (var i = 0; i < keys.length; i++) {\\n-          this._applyCommandsToObj(tmp, ret.deltas[keys[i]]);\\n+          tmp = this._applyCommandsToObj(ret.deltas[keys[i]], tmp);\\n           LOG(\\\"TMP: \\\" + uneval(tmp));\\n         }\\n         ret.status = 1;\\n-        ret.updates = this._detectUpdates(this._snapshot, tmp);\\n+        ret[\\\"updates\\\"] = this._detectUpdates(this._snapshot, tmp);\\n \\n       } else if (ret.deltas[this._snapshotVersion]) {\\n         LOG(\\\"No changes from server\\\");\\n@@ -797,7 +687,7 @@ BookmarksSyncService.prototype = {\\n         }\\n \\n         var tmp = eval(uneval(this._snapshot)); // fixme hack hack hack\\n-        this._applyCommandsToObj(tmp, data.updates);\\n+        tmp = this._applyCommandsToObj(data.updates, tmp);\\n \\n         // fixme: this is duplicated from above, need to do some refactoring\\n \\n@@ -810,7 +700,7 @@ BookmarksSyncService.prototype = {\\n         }\\n         keys = keys.sort();\\n         for (var i = 0; i < keys.length; i++) {\\n-          this._applyCommandsToObj(tmp, ret.deltas[keys[i]]);\\n+          tmp = this._applyCommandsToObj(ret.deltas[keys[i]], tmp);\\n         }\\n \\n         ret.status = data.status;\\n@@ -907,7 +797,7 @@ BookmarksSyncService.prototype = {\\n   sync: function BSS_sync() { asyncRun(bind2(this, this._doSync)); },\\n \\n   login: function BSS_login() {\\n-    this._dav.login(\\\"USER@mozilla.com\\\", \\\"PASSWORD\\\", // FIXME\\n+    this._dav.login(\\\"nobody@mozilla.com\\\", \\\"password\\\", // FIXME\\n                     {load: bind2(this, this._onLogin),\\n                      error: bind2(this, this._onLoginError)});\\n   },\\n@@ -964,6 +854,11 @@ DAVCollection.prototype = {\\n   _authString: null,\\n   _currentUserPath: \\\"nobody\\\",\\n \\n+  _currentUser: \\\"nobody@mozilla.com\\\",\\n+  get currentUser() {\\n+    return this._currentUser;\\n+  },\\n+\\n   _addHandler: function DC__addHandler(request, handlers, eventName) {\\n     if (handlers[eventName])\\n       request.addEventListener(eventName, new EventListener(handlers[eventName]), false);\\n@@ -1040,6 +935,7 @@ DAVCollection.prototype = {\\n     let hello = /Hello (.+)@mozilla.com/.exec(event.target.responseText)\\n     if (hello) {\\n       this._currentUserPath = hello[1];\\t\\n+      this._currentUser = this._currentUserPath + \\\"@mozilla.com\\\";\\n       this._baseUrl = \\\"http://dotmoz.mozilla.org/~\\\" +\\n         this._currentUserPath + \\\"/\\\";\\n     }\\n\""}