{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas352518a\""},"diff":"\"352518a Remove cruft from nsBidiPresUtils. Bug 393962, r+sr+a=roc\\ndiff --git a/layout/base/nsBidiPresUtils.cpp b/layout/base/nsBidiPresUtils.cpp\\nindex 071c40c..24dbe33 100644\\n--- a/layout/base/nsBidiPresUtils.cpp\\n+++ b/layout/base/nsBidiPresUtils.cpp\\n@@ -112,10 +112,10 @@ IsBidiSplittable(nsIFrame* aFrame) {\\n }\\n \\n static nsresult\\n-SplitInlineAncestors(nsPresContext* aPresContext,\\n-                      nsIFrame*     aFrame)\\n+SplitInlineAncestors(nsIFrame*     aFrame)\\n {\\n-  nsIPresShell *presShell = aPresContext->PresShell();\\n+  nsPresContext *presContext = aFrame->PresContext();\\n+  nsIPresShell *presShell = presContext->PresShell();\\n   nsIFrame* frame = aFrame;\\n   nsIFrame* parent = aFrame->GetParent();\\n   nsIFrame* newFrame = aFrame->GetNextSibling();\\n@@ -126,7 +126,7 @@ SplitInlineAncestors(nsPresContext* aPresContext,\\n     NS_ASSERTION(grandparent, \\\"Couldn't get parent's parent in nsBidiPresUtils::SplitInlineAncestors\\\");\\n     \\n     nsresult rv = presShell->FrameConstructor()->\\n-      CreateContinuingFrame(aPresContext, parent, grandparent, &newParent, PR_FALSE);\\n+      CreateContinuingFrame(presContext, parent, grandparent, &newParent, PR_FALSE);\\n     if (NS_FAILED(rv)) {\\n       return rv;\\n     }\\n@@ -139,7 +139,7 @@ SplitInlineAncestors(nsPresContext* aPresContext,\\n     }\\n \\n     // Reparent views as necessary\\n-    rv = nsHTMLContainerFrame::ReparentFrameViewList(aPresContext, newFrame, parent, newParent);\\n+    rv = nsHTMLContainerFrame::ReparentFrameViewList(presContext, newFrame, parent, newParent);\\n     if (NS_FAILED(rv)) {\\n       return rv;\\n     }\\n@@ -159,8 +159,7 @@ SplitInlineAncestors(nsPresContext* aPresContext,\\n }\\n \\n static nsresult\\n-CreateBidiContinuation(nsPresContext* aPresContext,\\n-                       nsIFrame*       aFrame,\\n+CreateBidiContinuation(nsIFrame*       aFrame,\\n                        nsIFrame**      aNewFrame)\\n {\\n   NS_PRECONDITION(aNewFrame, \\\"null OUT ptr\\\");\\n@@ -168,14 +167,15 @@ CreateBidiContinuation(nsPresContext* aPresContext,\\n \\n   *aNewFrame = nsnull;\\n \\n-  nsIPresShell *presShell = aPresContext->PresShell();\\n+  nsPresContext *presContext = aFrame->PresContext();\\n+  nsIPresShell *presShell = presContext->PresShell();\\n   NS_ASSERTION(presShell, \\\"PresShell must be set on PresContext before calling nsBidiPresUtils::CreateBidiContinuation\\\");\\n \\n   nsIFrame* parent = aFrame->GetParent();\\n   NS_ASSERTION(parent, \\\"Couldn't get frame parent in nsBidiPresUtils::CreateBidiContinuation\\\");\\n   \\n   nsresult rv = presShell->FrameConstructor()->\\n-    CreateContinuingFrame(aPresContext, aFrame, parent, aNewFrame, PR_FALSE);\\n+    CreateContinuingFrame(presContext, aFrame, parent, aNewFrame, PR_FALSE);\\n   if (NS_FAILED(rv)) {\\n     return rv;\\n   }\\n@@ -187,7 +187,7 @@ CreateBidiContinuation(nsPresContext* aPresContext,\\n   }\\n   \\n   // Split inline ancestor frames\\n-  rv = SplitInlineAncestors(aPresContext, aFrame);\\n+  rv = SplitInlineAncestors(aFrame);\\n   if (NS_FAILED(rv)) {\\n     return rv;\\n   }\\n@@ -253,15 +253,15 @@ AdvanceLineIteratorToFrame(nsIFrame* aFrame,\\n  *  EnsureBidiContinuation() in previous reflows into fluid continuations.\\n  */\\n nsresult\\n-nsBidiPresUtils::Resolve(nsPresContext* aPresContext,\\n-                         nsBlockFrame*   aBlockFrame,\\n+nsBidiPresUtils::Resolve(nsBlockFrame*   aBlockFrame,\\n                          nsIFrame*       aFirstChild,\\n                          PRBool          aIsVisualFormControl)\\n {\\n   mLogicalFrames.Clear();\\n   mContentToFrameIndex.Clear();\\n   \\n-  nsIPresShell* shell = aPresContext->PresShell();\\n+  nsPresContext *presContext = aBlockFrame->PresContext();\\n+  nsIPresShell* shell = presContext->PresShell();\\n   nsStyleContext* styleContext = aBlockFrame->GetStyleContext();\\n \\n   // handle bidi-override being set on the block itself before calling\\n@@ -283,7 +283,7 @@ nsBidiPresUtils::Resolve(nsPresContext* aPresContext,\\n       mLogicalFrames.AppendElement(directionalFrame);\\n     }\\n   }\\n-  mSuccess = InitLogicalArray(aPresContext, aFirstChild, nsnull, PR_TRUE);\\n+  InitLogicalArray(aFirstChild);\\n \\n   if (text->mUnicodeBidi == NS_STYLE_UNICODE_BIDI_OVERRIDE) {\\n     nsIFrame* directionalFrame = NS_NewDirectionalFrame(shell, styleContext, kPDF);\\n@@ -291,11 +291,8 @@ nsBidiPresUtils::Resolve(nsPresContext* aPresContext,\\n       mLogicalFrames.AppendElement(directionalFrame);\\n     }\\n   }\\n-  if (NS_FAILED(mSuccess) ) {\\n-    return mSuccess;\\n-  }\\n \\n-  CreateBlockBuffer(aPresContext);\\n+  CreateBlockBuffer();\\n \\n   PRInt32 bufferLength = mBuffer.Length();\\n \\n@@ -319,7 +316,7 @@ nsBidiPresUtils::Resolve(nsPresContext* aPresContext,\\n   if (aIsVisualFormControl) {\\n     isVisual = PR_FALSE;\\n   } else {\\n-    isVisual = aPresContext->IsVisualMode();\\n+    isVisual = presContext->IsVisualMode();\\n   }\\n   mSuccess = mBidiEngine->CountRuns(&runCount);\\n   if (NS_FAILED(mSuccess) ) {\\n@@ -343,7 +340,7 @@ nsBidiPresUtils::Resolve(nsPresContext* aPresContext,\\n   const nsTextFragment*    fragment;\\n   nsIAtom*                 frameType = nsnull;\\n \\n-  nsPropertyTable *propTable = aPresContext->PropertyTable();\\n+  nsPropertyTable *propTable = presContext->PropertyTable();\\n \\n   nsBlockFrame::line_iterator line = aBlockFrame->begin_lines();\\n   nsBlockFrame::line_iterator endLines = aBlockFrame->end_lines();\\n@@ -414,8 +411,7 @@ nsBidiPresUtils::Resolve(nsPresContext* aPresContext,\\n         // IBMBIDI - Egypt - End\\n \\n         if ( (runLength > 0) && (runLength < fragmentLength) ) {\\n-          if (!EnsureBidiContinuation(aPresContext, frame,\\n-                                      &nextBidi, frameIndex) ) {\\n+          if (!EnsureBidiContinuation(frame, &nextBidi, frameIndex) ) {\\n             break;\\n           }\\n           if (lineNeedsUpdate) {\\n@@ -434,8 +430,7 @@ nsBidiPresUtils::Resolve(nsPresContext* aPresContext,\\n           PRInt32 newIndex = 0;\\n           mContentToFrameIndex.Get(content, &newIndex);\\n           if (newIndex > frameIndex) {\\n-            RemoveBidiContinuation(aPresContext, frame,\\n-                                   frameIndex, newIndex, temp);\\n+            RemoveBidiContinuation(frame, frameIndex, newIndex, temp);\\n             if (lineNeedsUpdate) {\\n               if (AdvanceLineIteratorToFrame(frame, aBlockFrame, line,\\n                                              prevFrame, endLines)) {\\n@@ -470,7 +465,7 @@ nsBidiPresUtils::Resolve(nsPresContext* aPresContext,\\n         parent = child->GetParent();\\n       }\\n       if (parent && IsBidiSplittable(parent))\\n-        SplitInlineAncestors(aPresContext, child);\\n+        SplitInlineAncestors(child);\\n     }\\n   } // for\\n   return mSuccess;\\n@@ -483,27 +478,20 @@ PRBool IsBidiLeaf(nsIFrame* aFrame) {\\n     || !aFrame->IsFrameOfType(nsIFrame::eBidiInlineContainer);\\n }\\n \\n-nsresult\\n-nsBidiPresUtils::InitLogicalArray(nsPresContext* aPresContext,\\n-                                  nsIFrame*       aCurrentFrame,\\n-                                  nsIFrame*       aNextInFlow,\\n-                                  PRBool          aAddMarkers)\\n+void\\n+nsBidiPresUtils::InitLogicalArray(nsIFrame*       aCurrentFrame)\\n {\\n-  nsresult              res = NS_OK;\\n-\\n-  nsIPresShell* shell = aPresContext->PresShell();\\n+  nsIPresShell* shell = aCurrentFrame->PresContext()->PresShell();\\n   nsStyleContext* styleContext;\\n \\n-  for (nsIFrame* childFrame = aCurrentFrame;\\n-       childFrame && childFrame != aNextInFlow;\\n+  for (nsIFrame* childFrame = aCurrentFrame; childFrame;\\n        childFrame = childFrame->GetNextSibling()) {\\n \\n     nsIFrame* frame = (nsGkAtoms::placeholderFrame == childFrame->GetType()) ?\\n       nsPlaceholderFrame::GetRealFrameFor(childFrame) : childFrame;\\n \\n     PRUnichar ch = 0;\\n-    if (aAddMarkers &&\\n-        frame->IsFrameOfType(nsIFrame::eBidiInlineContainer)) {\\n+    if (frame->IsFrameOfType(nsIFrame::eBidiInlineContainer)) {\\n       const nsStyleVisibility* vis = frame->GetStyleVisibility();\\n       const nsStyleTextReset* text = frame->GetStyleTextReset();\\n       switch (text->mUnicodeBidi) {\\n@@ -555,7 +543,7 @@ nsBidiPresUtils::InitLogicalArray(nsPresContext* aPresContext,\\n     }\\n     else {\\n       nsIFrame* kid = frame->GetFirstChild(nsnull);\\n-      res = InitLogicalArray(aPresContext, kid, aNextInFlow, aAddMarkers);\\n+      InitLogicalArray(kid);\\n     }\\n \\n     // If the element is attributed by dir, indicate direction pop (add PDF frame)\\n@@ -568,11 +556,10 @@ nsBidiPresUtils::InitLogicalArray(nsPresContext* aPresContext,\\n       }\\n     }\\n   } // for\\n-  return res;       \\n }\\n \\n void\\n-nsBidiPresUtils::CreateBlockBuffer(nsPresContext* aPresContext)\\n+nsBidiPresUtils::CreateBlockBuffer()\\n {\\n   mBuffer.SetLength(0);\\n \\n@@ -616,9 +603,7 @@ nsBidiPresUtils::CreateBlockBuffer(nsPresContext* aPresContext)\\n }\\n \\n void\\n-nsBidiPresUtils::ReorderFrames(nsPresContext*       aPresContext,\\n-                               nsIRenderingContext* aRendContext,\\n-                               nsIFrame*            aFirstFrameOnLine,\\n+nsBidiPresUtils::ReorderFrames(nsIFrame*            aFirstFrameOnLine,\\n                                PRInt32              aNumFramesOnLine)\\n {\\n   // If this line consists of a line frame, reorder the line frame's children.\\n@@ -636,7 +621,7 @@ nsBidiPresUtils::ReorderFrames(nsPresContext*       aPresContext,\\n   PRBool isReordered;\\n   PRBool hasRTLFrames;\\n   Reorder(isReordered, hasRTLFrames);\\n-  RepositionInlineFrames(aPresContext, aRendContext, aFirstFrameOnLine, isReordered);\\n+  RepositionInlineFrames(aFirstFrameOnLine);\\n }\\n \\n nsresult\\n@@ -903,10 +888,7 @@ nsBidiPresUtils::InitContinuationStates(nsIFrame*              aFrame,\\n }\\n \\n void\\n-nsBidiPresUtils::RepositionInlineFrames(nsPresContext*       aPresContext,\\n-                                        nsIRenderingContext* aRendContext,\\n-                                        nsIFrame*            aFirstChild,\\n-                                        PRBool               aReordered) const\\n+nsBidiPresUtils::RepositionInlineFrames(nsIFrame* aFirstChild) const\\n {\\n   nsMargin margin;\\n   const nsStyleVisibility* vis = aFirstChild->GetStyleVisibility();\\n@@ -1026,8 +1008,7 @@ nsBidiPresUtils::GetFrameToLeftOf(const nsIFrame*  aFrame,\\n }\\n \\n PRBool\\n-nsBidiPresUtils::EnsureBidiContinuation(nsPresContext* aPresContext,\\n-                                        nsIFrame*       aFrame,\\n+nsBidiPresUtils::EnsureBidiContinuation(nsIFrame*       aFrame,\\n                                         nsIFrame**      aNewFrame,\\n                                         PRInt32&        aFrameIndex)\\n {\\n@@ -1059,7 +1040,7 @@ nsBidiPresUtils::EnsureBidiContinuation(nsPresContext* aPresContext,\\n   }\\n   \\n   if (!*aNewFrame) {\\n-    mSuccess = CreateBidiContinuation(aPresContext, aFrame, aNewFrame);\\n+    mSuccess = CreateBidiContinuation(aFrame, aNewFrame);\\n     if (NS_FAILED(mSuccess) ) {\\n       return PR_FALSE;\\n     }\\n@@ -1069,8 +1050,7 @@ nsBidiPresUtils::EnsureBidiContinuation(nsPresContext* aPresContext,\\n }\\n \\n void\\n-nsBidiPresUtils::RemoveBidiContinuation(nsPresContext* aPresContext,\\n-                                        nsIFrame*       aFrame,\\n+nsBidiPresUtils::RemoveBidiContinuation(nsIFrame*       aFrame,\\n                                         PRInt32         aFirstIndex,\\n                                         PRInt32         aLastIndex,\\n                                         PRInt32&        aOffset) const\\ndiff --git a/layout/base/nsBidiPresUtils.h b/layout/base/nsBidiPresUtils.h\\nindex 8817ebb..0372594 100644\\n--- a/layout/base/nsBidiPresUtils.h\\n+++ b/layout/base/nsBidiPresUtils.h\\n@@ -117,7 +117,6 @@ public:\\n    * Make Bidi engine calculate the embedding levels of the frames that are\\n    * descendants of a given block frame.\\n    *\\n-   * @param aPresContext         The presContext\\n    * @param aBlockFrame          The block frame\\n    * @param aFirstChild          The first child frame of aBlockFrame\\n    * @param aIsVisualFormControl [IN]  Set if we are in a form control on a\\n@@ -126,8 +125,7 @@ public:\\n    *\\n    *  @lina 06/18/2000\\n    */\\n-  nsresult Resolve(nsPresContext* aPresContext,\\n-                   nsBlockFrame*   aBlockFrame,\\n+  nsresult Resolve(nsBlockFrame*   aBlockFrame,\\n                    nsIFrame*       aFirstChild,\\n                    PRBool          aIsVisualFormControl);\\n \\n@@ -137,9 +135,7 @@ public:\\n    * \\n    * @lina 05/02/2000\\n    */\\n-  void ReorderFrames(nsPresContext*      aPresContext,\\n-                     nsIRenderingContext* aRendContext,\\n-                     nsIFrame*            aFirstFrameOnLine,\\n+  void ReorderFrames(nsIFrame*            aFirstFrameOnLine,\\n                      PRInt32              aNumFramesOnLine);\\n \\n   /**\\n@@ -280,17 +276,14 @@ private:\\n    *\\n    *  @lina 05/02/2000\\n    */\\n-  void CreateBlockBuffer(nsPresContext* aPresContext);\\n+  void CreateBlockBuffer();\\n \\n   /**\\n    * Set up an array of the frames after splitting frames so that each frame has\\n    * consistent directionality. At this point the frames are still in logical\\n    * order\\n    */\\n-  nsresult InitLogicalArray(nsPresContext* aPresContext,\\n-                            nsIFrame*       aCurrentFrame,\\n-                            nsIFrame*       aNextInFlow,\\n-                            PRBool          aAddMarkers = PR_FALSE);\\n+  void InitLogicalArray(nsIFrame* aCurrentFrame);\\n \\n   /**\\n    * Initialize the logically-ordered array of frames\\n@@ -361,21 +354,17 @@ private:\\n   /**\\n    *  Adjust frame positions following their visual order\\n    *\\n-   *  @param  <code>nsPresContext*</code>, the first kid\\n+   *  @param aFirstChild the first kid\\n    *\\n    *  @lina 04/11/2000\\n    */\\n-  void RepositionInlineFrames(nsPresContext*      aPresContext,\\n-                              nsIRenderingContext* aRendContext,\\n-                              nsIFrame*            aFirstChild,\\n-                              PRBool               aReordered) const;\\n+  void RepositionInlineFrames(nsIFrame* aFirstChild) const;\\n   \\n   /**\\n    * Helper method for Resolve()\\n    * Truncate a text frame and possibly create a continuation frame with the\\n    * remainder of its content.\\n    *\\n-   * @param aPresContext the pres context\\n    * @param aFrame       the original frame\\n    * @param aNewFrame    [OUT] the new frame that was created\\n    * @param aFrameIndex  [IN/OUT] index of aFrame in mLogicalFrames\\n@@ -386,8 +375,7 @@ private:\\n    * @see Resolve()\\n    * @see RemoveBidiContinuation()\\n    */\\n-  PRBool EnsureBidiContinuation(nsPresContext* aPresContext,\\n-                                nsIFrame*       aFrame,\\n+  PRBool EnsureBidiContinuation(nsIFrame*       aFrame,\\n                                 nsIFrame**      aNewFrame,\\n                                 PRInt32&        aFrameIndex);\\n \\n@@ -395,7 +383,6 @@ private:\\n    * Helper method for Resolve()\\n    * Convert one or more bidi continuation frames created in a previous reflow by\\n    * EnsureBidiContinuation() into fluid continuations.\\n-   * @param aPresContext the pres context\\n    * @param aFrame       the frame whose continuations are to be removed\\n    * @param aFirstIndex  index of aFrame in mLogicalFrames\\n    * @param aLastIndex   index of the last frame to be removed\\n@@ -408,8 +395,7 @@ private:\\n    * @see Resolve()\\n    * @see EnsureBidiContinuation()\\n    */\\n-  void RemoveBidiContinuation(nsPresContext* aPresContext,\\n-                              nsIFrame*       aFrame,\\n+  void RemoveBidiContinuation(nsIFrame*       aFrame,\\n                               PRInt32         aFirstIndex,\\n                               PRInt32         aLastIndex,\\n                               PRInt32&        aOffset) const;\\ndiff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp\\nindex b18811d..1c5a84c 100644\\n--- a/layout/generic/nsBlockFrame.cpp\\n+++ b/layout/generic/nsBlockFrame.cpp\\n@@ -3945,9 +3945,7 @@ nsBlockFrame::PlaceLine(nsBlockReflowState& aState,\\n       nsBidiPresUtils* bidiUtils = aState.mPresContext->GetBidiUtils();\\n \\n       if (bidiUtils && bidiUtils->IsSuccessful() ) {\\n-        bidiUtils->ReorderFrames(aState.mPresContext,\\n-                                 aState.mReflowState.rendContext,\\n-                                 aLine->mFirstChild, aLine->GetChildCount());\\n+        bidiUtils->ReorderFrames(aLine->mFirstChild, aLine->GetChildCount());\\n       } // bidiUtils\\n     } // not visual mode\\n   } // bidi enabled\\n@@ -6611,8 +6609,7 @@ nsBlockFrame::ResolveBidi()\\n   if (!bidiUtils)\\n     return NS_OK;\\n \\n-  return bidiUtils->Resolve(presContext, this,\\n-                            mLines.front()->mFirstChild,\\n+  return bidiUtils->Resolve(this, mLines.front()->mFirstChild,\\n                             IsVisualFormControl(presContext));\\n }\\n \\n\""}