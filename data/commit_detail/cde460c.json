{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bascde460c\""},"diff":"\"cde460c Bug 392501: Parse distribution.ini at startup. r=bsmedberg, a=mconnor\\ndiff --git a/browser/base/content/aboutDialog.css b/browser/base/content/aboutDialog.css\\nindex 6b1bb05..2b21b16 100644\\n--- a/browser/base/content/aboutDialog.css\\n+++ b/browser/base/content/aboutDialog.css\\n@@ -45,6 +45,20 @@\\n   margin: 1em 0px 10px 17px;\\n }\\n \\n+#distribution {\\n+  font-weight: bold;\\n+  color: #909090;\\n+  display: none;\\n+  margin: 0em 0px 0px 17px;\\n+}\\n+\\n+#distributionId {\\n+  font-weight: bold;\\n+  color: #909090;\\n+  display: none;\\n+  margin: 0em 0px 10px 17px;\\n+}\\n+\\n #copyright {\\n   margin: 0px 0px 3px 16px;\\n }\\ndiff --git a/browser/base/content/aboutDialog.js b/browser/base/content/aboutDialog.js\\nindex 4b0e5a2..216efd0 100644\\n--- a/browser/base/content/aboutDialog.js\\n+++ b/browser/base/content/aboutDialog.js\\n@@ -41,6 +41,25 @@ function init(aEvent)\\n {\\n   if (aEvent.target != document)\\n     return;\\n+\\n+  var prefSvc = Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n+    getService(Ci.nsIPrefService);\\n+  var prefs = prefSvc.getBranch(null);\\n+\\n+  var distroId = prefs.getCharPref(\\\"distribution.id\\\");\\n+  if (distroId) {\\n+    var distroVersion = prefs.getCharPref(\\\"distribution.version\\\");\\n+    var distroAbout = prefs.getComplexValue(\\\"distribution.about\\\", Ci.nsISupportsString);\\n+  \\n+    var distroField = document.getElementById(\\\"distribution\\\");\\n+    distroField.value = distroAbout;\\n+    distroField.style.display = \\\"block\\\";\\n+  \\n+    var distroIdField = document.getElementById(\\\"distributionId\\\");\\n+    distroIdField.value = distroId + \\\" - \\\" + distroVersion;\\n+    distroIdField.style.display = \\\"block\\\";\\n+  }\\n+\\n   var userAgentField = document.getElementById(\\\"userAgent\\\");\\n   userAgentField.value = navigator.userAgent;\\n \\ndiff --git a/browser/base/content/aboutDialog.xul b/browser/base/content/aboutDialog.xul\\nindex 9d01e83..147e59b 100644\\n--- a/browser/base/content/aboutDialog.xul\\n+++ b/browser/base/content/aboutDialog.xul\\n@@ -73,6 +73,8 @@\\n   <deck id=\\\"modes\\\" flex=\\\"1\\\">\\n     <vbox flex=\\\"1\\\" id=\\\"clientBox\\\">\\n #expand <label id=\\\"version\\\" value=\\\"&aboutVersion; __MOZ_APP_VERSION__\\\"/>\\n+      <label id=\\\"distribution\\\"/>\\n+      <label id=\\\"distributionId\\\"/>\\n       <description id=\\\"copyright\\\">&copyrightText;</description>\\n       <textbox id=\\\"userAgent\\\" multiline=\\\"true\\\" readonly=\\\"true\\\"/>\\n     </vbox>\\ndiff --git a/browser/components/Makefile.in b/browser/components/Makefile.in\\nindex 01415e7..feb201d 100644\\n--- a/browser/components/Makefile.in\\n+++ b/browser/components/Makefile.in\\n@@ -55,6 +55,8 @@ EXTRA_PP_COMPONENTS = \\\\\\n \\tnsBrowserGlue.js \\\\\\n \\t$(NULL)\\n \\n+EXTRA_JS_MODULES = distribution.js\\n+\\n DIRS = \\\\\\n \\tdirprovider \\\\\\n \\tmicrosummaries \\\\\\ndiff --git a/browser/components/distribution.js b/browser/components/distribution.js\\nnew file mode 100644\\nindex 0000000..b4d0384\\n--- /dev/null\\n+++ b/browser/components/distribution.js\\n@@ -0,0 +1,331 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is the Firefox Distribution Customizations.\\n+ *\\n+ * The Initial Developer of the Original Code is Mozilla Foundation.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *   Dan Mills <thunder@mozilla.com>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+EXPORTED_SYMBOLS = [ \\\"DistributionCustomizer\\\" ];\\n+\\n+const Ci = Components.interfaces;\\n+const Cc = Components.classes;\\n+const Cr = Components.results;\\n+const Cu = Components.utils;\\n+\\n+function DistributionCustomizer() {\\n+  this._distroDir = this._dirSvc.get(\\\"XCurProcD\\\", Ci.nsIFile);\\n+  this._distroDir.append(\\\"distribution\\\");\\n+\\n+  let iniFile = this._distroDir.clone();\\n+  iniFile.append(\\\"distribution.ini\\\");\\n+  this._iniExists = iniFile.exists();\\n+\\n+  if (!this._iniExists)\\n+    return;\\n+\\n+  this._ini = Cc[\\\"@mozilla.org/xpcom/ini-parser-factory;1\\\"].\\n+    getService(Ci.nsIINIParserFactory).createINIParser(iniFile);\\n+\\n+  this._prefs = this._prefSvc.getBranch(null);\\n+  this._locale = this._prefs.getCharPref(\\\"general.useragent.locale\\\");\\n+\\n+}\\n+DistributionCustomizer.prototype = {\\n+  __bmSvc: null,\\n+  get _bmSvc() {\\n+    if (!this.__bmSvc)\\n+      this.__bmSvc = Cc[\\\"@mozilla.org/browser/nav-bookmarks-service;1\\\"].\\n+                   getService(Ci.nsINavBookmarksService);\\n+    return this.__bmSvc;\\n+  },\\n+\\n+  __annoSvc: null,\\n+  get _annoSvc() {\\n+    if (!this.__annoSvc)\\n+      this.__annoSvc = Cc[\\\"@mozilla.org/browser/annotation-service;1\\\"].\\n+                   getService(Ci.nsIAnnotationService);\\n+    return this.__annoSvc;\\n+  },\\n+\\n+  __dirSvc: null,\\n+  get _dirSvc() {\\n+    if (!this.__dirSvc)\\n+      this.__dirSvc = Cc[\\\"@mozilla.org/file/directory_service;1\\\"].\\n+        getService(Ci.nsIProperties);\\n+    return this.__dirSvc;\\n+  },\\n+\\n+  __prefSvc: null,\\n+  get _prefSvc() {\\n+    if (!this.__prefSvc)\\n+      this.__prefSvc = Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n+        getService(Ci.nsIPrefService);\\n+    return this.__prefSvc;\\n+  },\\n+\\n+  __iosvc: null,\\n+  get _iosvc() {\\n+    if (!this.__iosvc)\\n+      this.__iosvc = Cc[\\\"@mozilla.org/network/io-service;1\\\"].\\n+                   getService(Ci.nsIIOService);\\n+    return this.__iosvc;\\n+  },\\n+\\n+  _locale: \\\"en-US\\\",\\n+  _distroDir: null,\\n+  _iniExists: false,\\n+  _ini: null,\\n+\\n+\\n+  _makeURI: function DIST__makeURI(spec) {\\n+    return this._iosvc.newURI(spec, null, null);\\n+  },\\n+  _parseBookmarksSection: function DIST_parseBookmarksSection(parentId, section) {\\n+    let keys = [];\\n+    for (let i in enumerate(this._ini.getKeys(section)))\\n+      keys.push(i);\\n+    keys.sort();\\n+    let items = {};\\n+    let defaultItemId = -1;\\n+    let maxItemId = -1;\\n+\\n+    for (let i = 0; i < keys.length; i++) {\\n+      let m = /^item\\\\.(\\\\d+)\\\\.(\\\\w+)\\\\.?(\\\\w*)/.exec(keys[i]);\\n+      if (m) {\\n+        let [foo, iid, iprop, ilocale] = m;\\n+\\n+        if (ilocale)\\n+          continue;\\n+\\n+        if (!items[iid])\\n+          items[iid] = {};\\n+        if (keys.indexOf(keys[i] + \\\".\\\" + this._locale) >= 0) {\\n+          items[iid][iprop] = this._ini.getString(section, keys[i] + \\\".\\\" +\\n+                                                  this._locale);\\n+        } else {\\n+          items[iid][iprop] = this._ini.getString(section, keys[i]);\\n+        }\\n+\\n+        if (iprop == \\\"type\\\" && items[iid][\\\"type\\\"] == \\\"default\\\")\\n+          defaultItemId = iid;\\n+\\n+        if (maxItemId < iid)\\n+          maxItemId = iid;\\n+      } else {\\n+        dump(\\\"Key did not match: \\\" + keys[i] + \\\"\\\\n\\\");\\n+      }\\n+    }\\n+\\n+    let prependIndex = 0;\\n+    for (let iid = 0; iid <= maxItemId; iid++) {\\n+      if (!items[iid])\\n+        continue;\\n+\\n+      let index = -1;\\n+      let newId;\\n+\\n+      switch (items[iid][\\\"type\\\"]) {\\n+      case \\\"default\\\":\\n+        break;\\n+\\n+      case \\\"folder\\\":\\n+        if (iid < defaultItemId)\\n+          index = prependIndex++;\\n+\\n+        newId = this._bmSvc.createFolder(parentId, items[iid][\\\"title\\\"], index);\\n+\\n+        this._parseBookmarksSection(newId, \\\"BookmarksFolder-\\\" +\\n+                                    items[iid][\\\"folderId\\\"]);\\n+\\n+        if (items[iid][\\\"description\\\"])\\n+          this._annoSvc.setItemAnnotation(newId, \\\"bookmarkProperties/description\\\",\\n+                                          items[iid][\\\"description\\\"], 0,\\n+                                          this._annoSvc.EXPIRE_NEVER);\\n+\\n+        break;\\n+\\n+      case \\\"separator\\\":\\n+        if (iid < defaultItemId)\\n+          index = prependIndex++;\\n+        this._bmSvc.insertSeparator(parentId, index);\\n+        break;\\n+\\n+      case \\\"bookmark\\\":\\n+      default:\\n+        if (iid < defaultItemId)\\n+          index = prependIndex++;\\n+\\n+        newId = this._bmSvc.insertBookmark(parentId,\\n+                                           this._makeURI(items[iid][\\\"link\\\"]),\\n+                                           index, items[iid][\\\"title\\\"]);\\n+\\n+        if (items[iid][\\\"description\\\"])\\n+          this._annoSvc.setItemAnnotation(newId, \\\"bookmarkProperties/description\\\",\\n+                                          items[iid][\\\"description\\\"], 0,\\n+                                          this._annoSvc.EXPIRE_NEVER);\\n+\\n+        break;\\n+      }\\n+    }\\n+  },\\n+  applyCustomizations: function DIST_applyCustomizations() {\\n+    if (!this._iniExists)\\n+      return;\\n+\\n+    // nsPrefService loads very early.  Reload prefs so we can set\\n+    // distribution defaults during the prefservice:after-app-defaults\\n+    // notification (see applyPrefDefaults below)\\n+    this._prefSvc.QueryInterface(Ci.nsIObserver);\\n+    this._prefSvc.observe(null, \\\"reload-default-prefs\\\", null);\\n+\\n+    let sections = enumToObject(this._ini.getSections());\\n+\\n+    // The global section, and several of its fields, is required\\n+    // (we also check here to be consistent with applyPrefDefaults below)\\n+    if (!sections[\\\"Global\\\"])\\n+      return;\\n+    let globalPrefs = enumToObject(this._ini.getKeys(\\\"Global\\\"));\\n+    if (!(globalPrefs[\\\"id\\\"] && globalPrefs[\\\"version\\\"] && globalPrefs[\\\"about\\\"]))\\n+      return;\\n+\\n+    let bmProcessed = false;\\n+    let bmProcessedPref = \\\"distribution.\\\" +\\n+      this._ini.getString(\\\"Global\\\", \\\"id\\\") + \\\".bookmarksProcessed\\\";\\n+    try {\\n+      bmProcessed = this._prefs.getBoolPref(bmProcessedPref);\\n+    } catch (e) {}\\n+\\n+    if (!bmProcessed) {\\n+      if (sections[\\\"BookmarksMenu\\\"])\\n+        this._parseBookmarksSection(this._bmSvc.bookmarksRoot,\\n+                                    \\\"BookmarksMenu\\\");\\n+      if (sections[\\\"BookmarksToolbar\\\"])\\n+        this._parseBookmarksSection(this._bmSvc.toolbarFolder,\\n+                                    \\\"BookmarksToolbar\\\");\\n+      this._prefs.setBoolPref(bmProcessedPref, true);\\n+    }\\n+  },\\n+  applyPrefDefaults: function DIST_applyPrefDefaults() {\\n+    if (!this._iniExists)\\n+      return;\\n+\\n+    let sections = enumToObject(this._ini.getSections());\\n+\\n+    // The global section, and several of its fields, is required\\n+    if (!sections[\\\"Global\\\"])\\n+      return;\\n+    let globalPrefs = enumToObject(this._ini.getKeys(\\\"Global\\\"));\\n+    if (!(globalPrefs[\\\"id\\\"] && globalPrefs[\\\"version\\\"] && globalPrefs[\\\"about\\\"]))\\n+      return;\\n+\\n+    let defaults = this._prefSvc.getDefaultBranch(null);\\n+\\n+    // Global really contains info we set as prefs.  They're only\\n+    // separate because they are \\\"special\\\" (read: required)\\n+\\n+    defaults.setCharPref(\\\"distribution.id\\\", this._ini.getString(\\\"Global\\\", \\\"id\\\"));\\n+    defaults.setCharPref(\\\"distribution.version\\\",\\n+                         this._ini.getString(\\\"Global\\\", \\\"version\\\"));\\n+\\n+    let partnerAbout = Cc[\\\"@mozilla.org/supports-string;1\\\"].\\n+      createInstance(Ci.nsISupportsString);\\n+    if (globalPrefs[\\\"about.\\\" + this._locale]) {\\n+      partnerAbout.data = this._ini.getString(\\\"Global\\\", \\\"about.\\\" + this._locale);\\n+    } else {\\n+      partnerAbout.data = this._ini.getString(\\\"Global\\\", \\\"about\\\");\\n+    }\\n+    defaults.setComplexValue(\\\"distribution.about\\\",\\n+                             Ci.nsISupportsString, partnerAbout);\\n+\\n+    if (sections[\\\"Preferences\\\"]) {\\n+      for (let key in enumerate(this._ini.getKeys(\\\"Preferences\\\"))) {\\n+        try {\\n+          let value = eval(this._ini.getString(\\\"Preferences\\\", key));\\n+          switch (typeof value) {\\n+          case \\\"bool\\\":\\n+            defaults.setBoolPref(key, value);\\n+            break;\\n+          case \\\"int\\\":\\n+            defaults.setIntPref(key, value);\\n+            break;\\n+          case \\\"string\\\":\\n+            defaults.setCharPref(key, value);\\n+            break;\\n+          case \\\"undefined\\\":\\n+            defaults.setCharPref(key, value);\\n+            break;\\n+          }\\n+        } catch (e) { /* ignore bad prefs and move on */ }\\n+      }\\n+    }\\n+\\n+    // We eval() the localizable prefs as well (even though they'll\\n+    // always get set as a string) to keep the INI format consistent:\\n+    // string prefs always need to be in quotes\\n+\\n+    let localizedStr = Cc[\\\"@mozilla.org/pref-localizedstring;1\\\"].\\n+      createInstance(Ci.nsIPrefLocalizedString);\\n+\\n+    if (sections[\\\"LocalizablePreferences\\\"]) {\\n+      for (let key in enumerate(this._ini.getKeys(\\\"LocalizablePreferences\\\"))) {\\n+        try {\\n+          let value = eval(this._ini.getString(\\\"LocalizablePreferences\\\", key));\\n+          value = value.replace(\\\"%LOCALE%\\\", this._locale, \\\"g\\\");\\n+          localizedStr.data = \\\"data:text/plain,\\\" + key + \\\"=\\\" + value;\\n+          defaults.setComplexValue(key, Ci.nsIPrefLocalizedString, localizedStr);\\n+        } catch (e) { /* ignore bad prefs and move on */ }\\n+      }\\n+    }\\n+\\n+    if (sections[\\\"LocalizablePreferences-\\\" + this._locale]) {\\n+      for (let key in enumerate(this._ini.getKeys(\\\"LocalizablePreferences-\\\" + this._locale))) {\\n+        try {\\n+          let value = eval(this._ini.getString(\\\"LocalizablePreferences-\\\" + this._locale, key));\\n+          localizedStr.data = \\\"data:text/plain,\\\" + key + \\\"=\\\" + value;\\n+          defaults.setComplexValue(key, Ci.nsIPrefLocalizedString, localizedStr);\\n+        } catch (e) { /* ignore bad prefs and move on */ }\\n+      }\\n+    }\\n+  }\\n+};\\n+\\n+function enumerate(UTF8Enumerator) {\\n+  while (UTF8Enumerator.hasMore())\\n+    yield UTF8Enumerator.getNext();\\n+}\\n+\\n+function enumToObject(UTF8Enumerator) {\\n+  let ret = {};\\n+  for (let i in enumerate(UTF8Enumerator))\\n+    ret[i] = 1;\\n+  return ret;\\n+}\\ndiff --git a/browser/components/nsBrowserGlue.js b/browser/components/nsBrowserGlue.js\\nindex 4e7ddfb..c8f8f26 100644\\n--- a/browser/components/nsBrowserGlue.js\\n+++ b/browser/components/nsBrowserGlue.js\\n@@ -38,7 +38,10 @@\\n const Ci = Components.interfaces;\\n const Cc = Components.classes;\\n const Cr = Components.results;\\n-Components.utils.import(\\\"resource://gre/modules/XPCOMUtils.jsm\\\");\\n+const Cu = Components.utils;\\n+\\n+Cu.import(\\\"resource://gre/modules/XPCOMUtils.jsm\\\");\\n+Cu.import(\\\"resource:///modules/distribution.js\\\");\\n \\n // Factory object\\n const BrowserGlueServiceFactory = {\\n@@ -75,6 +78,9 @@ BrowserGlue.prototype = {\\n       case \\\"profile-change-teardown\\\": \\n         this._onProfileShutdown();\\n         break;\\n+      case \\\"prefservice:after-app-defaults\\\":\\n+        this._onAppDefaults();\\n+        break;\\n       case \\\"final-ui-startup\\\":\\n         this._onProfileStartup();\\n         break;\\n@@ -107,6 +113,7 @@ BrowserGlue.prototype = {\\n     osvr.addObserver(this, \\\"profile-before-change\\\", false);\\n     osvr.addObserver(this, \\\"profile-change-teardown\\\", false);\\n     osvr.addObserver(this, \\\"xpcom-shutdown\\\", false);\\n+    osvr.addObserver(this, \\\"prefservice:after-app-defaults\\\", false);\\n     osvr.addObserver(this, \\\"final-ui-startup\\\", false);\\n     osvr.addObserver(this, \\\"browser:purge-session-history\\\", false);\\n     osvr.addObserver(this, \\\"quit-application-requested\\\", false);\\n@@ -122,12 +129,21 @@ BrowserGlue.prototype = {\\n     osvr.removeObserver(this, \\\"profile-before-change\\\");\\n     osvr.removeObserver(this, \\\"profile-change-teardown\\\");\\n     osvr.removeObserver(this, \\\"xpcom-shutdown\\\");\\n+    osvr.removeObserver(this, \\\"prefservice:after-app-defaults\\\");\\n     osvr.removeObserver(this, \\\"final-ui-startup\\\");\\n     osvr.removeObserver(this, \\\"browser:purge-session-history\\\");\\n     osvr.removeObserver(this, \\\"quit-application-requested\\\");\\n     osvr.removeObserver(this, \\\"quit-application-granted\\\");\\n   },\\n \\n+  _onAppDefaults: function()\\n+  {\\n+    // apply distribution customizations (prefs)\\n+    // other customizations are applied in _onProfileStartup()\\n+    var distro = new DistributionCustomizer();\\n+    distro.applyPrefDefaults();\\n+  },\\n+\\n   // profile startup handler (contains profile initialization routines)\\n   _onProfileStartup: function() \\n   {\\n@@ -162,6 +178,11 @@ BrowserGlue.prototype = {\\n     // initialize Places\\n     this._initPlaces();\\n \\n+    // apply distribution customizations\\n+    // prefs are applied in _onAppDefaults()\\n+    var distro = new DistributionCustomizer();\\n+    distro.applyCustomizations();\\n+\\n     // indicate that the profile was initialized\\n     this._profileStarted = true;\\n   },\\n\""}