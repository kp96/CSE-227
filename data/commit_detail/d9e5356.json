{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basd9e5356\""},"diff":"\"d9e5356 Bug 386536 - Add category manager helpers to XPCOMUtils. Patch by Nickolay Ponomarev <asqueella@gmail.com>, r=sayrer/mark.finkle a=jst\\ndiff --git a/browser/fuel/src/fuelApplication.js b/browser/fuel/src/fuelApplication.js\\nindex e7eed53..5ae3629 100644\\n--- a/browser/fuel/src/fuelApplication.js\\n+++ b/browser/fuel/src/fuelApplication.js\\n@@ -1103,12 +1103,26 @@ BookmarkFolder.prototype = {\\n   },\\n \\n   QueryInterface : XPCOMUtils.generateQI([Ci.fuelIBookmarkFolder, Ci.nsINavBookmarkObserver])\\n-}; \\n+};\\n+\\n+//=================================================\\n+// Factory - Treat Application as a singleton\\n+// XXX This is required, because we're registered for the 'JavaScript global\\n+// privileged property' category, whose handler always calls createInstance.\\n+// See bug 386535.\\n+var gSingleton = null;\\n+var ApplicationFactory = {\\n+  createInstance: function af_ci(aOuter, aIID) {\\n+    if (aOuter != null)\\n+      throw Components.results.NS_ERROR_NO_AGGREGATION;\\n \\n+    if (gSingleton == null) {\\n+      gSingleton = new Application();\\n+    }\\n \\n-const CLASS_ID = Components.ID(\\\"fe74cf80-aa2d-11db-abbd-0800200c9a66\\\");\\n-const CLASS_NAME = \\\"Application wrapper\\\";\\n-const CONTRACT_ID = \\\"@mozilla.org/fuel/application;1\\\";\\n+    return gSingleton.QueryInterface(aIID);\\n+  }\\n+};\\n \\n //=================================================\\n // Application constructor\\n@@ -1135,6 +1149,23 @@ function Application() {\\n //=================================================\\n // Application implementation\\n Application.prototype = {\\n+  // for nsIClassInfo + XPCOMUtils\\n+  classDescription: \\\"Application\\\",\\n+  classID:          Components.ID(\\\"fe74cf80-aa2d-11db-abbd-0800200c9a66\\\"),\\n+  contractID:       \\\"@mozilla.org/fuel/application;1\\\",\\n+\\n+  // redefine the default factory for XPCOMUtils\\n+  _xpcom_factory: ApplicationFactory,\\n+\\n+  // get this contractID registered for certain categories via XPCOMUtils\\n+  _xpcom_categories: [\\n+    // make Application a startup observer\\n+    { category: \\\"app-startup\\\", service: true },\\n+\\n+    // add Application as a global property for easy access\\n+    { category: \\\"JavaScript global privileged property\\\" }\\n+  ],\\n+\\n   get id() {\\n     return this._info.ID;\\n   },\\n@@ -1194,9 +1225,6 @@ Application.prototype = {\\n   },\\n \\n   // for nsIClassInfo\\n-  classDescription : \\\"Application\\\",\\n-  classID : CLASS_ID,\\n-  contractID : CONTRACT_ID,\\n   flags : Ci.nsIClassInfo.SINGLETON,\\n   implementationLanguage : Ci.nsIProgrammingLanguage.JAVASCRIPT,\\n \\n@@ -1267,61 +1295,7 @@ Application.prototype = {\\n   }\\n };\\n \\n-//=================================================\\n-// Factory - Treat Application as a singleton\\n-var gSingleton = null;\\n-var ApplicationFactory = {\\n-  createInstance: function af_ci(aOuter, aIID) {\\n-    if (aOuter != null)\\n-      throw Components.results.NS_ERROR_NO_AGGREGATION;\\n-      \\n-    if (gSingleton == null) {\\n-      gSingleton = new Application();\\n-    }\\n-\\n-    return gSingleton.QueryInterface(aIID);\\n-  }\\n-};\\n-\\n-//=================================================\\n-// Module\\n-var ApplicationModule = {\\n-  registerSelf: function am_rs(aCompMgr, aFileSpec, aLocation, aType) {\\n-    aCompMgr = aCompMgr.QueryInterface(Ci.nsIComponentRegistrar);\\n-    aCompMgr.registerFactoryLocation(CLASS_ID, CLASS_NAME, CONTRACT_ID, aFileSpec, aLocation, aType);\\n-    \\n-    var categoryManager = Components.classes[\\\"@mozilla.org/categorymanager;1\\\"]\\n-                                    .getService(Ci.nsICategoryManager);\\n-    // make Application a startup observer\\n-    categoryManager.addCategoryEntry(\\\"app-startup\\\", CLASS_NAME, \\\"service,\\\" + CONTRACT_ID, true, true);\\n-\\n-    // add Application as a global property for easy access\\n-    categoryManager.addCategoryEntry(\\\"JavaScript global privileged property\\\", \\\"Application\\\", CONTRACT_ID, true, true);\\n-  },\\n-\\n-  unregisterSelf: function am_us(aCompMgr, aLocation, aType) {\\n-    aCompMgr = aCompMgr.QueryInterface(Ci.nsIComponentRegistrar);\\n-    aCompMgr.unregisterFactoryLocation(CLASS_ID, aLocation);        \\n-\\n-    // cleanup categories\\n-    var categoryManager = Components.classes[\\\"@mozilla.org/categorymanager;1\\\"]\\n-                                    .getService(Ci.nsICategoryManager);\\n-    categoryManager.deleteCategoryEntry(\\\"app-startup\\\", \\\"service,\\\" + CONTRACT_ID, true);\\n-    categoryManager.deleteCategoryEntry(\\\"JavaScript global property\\\", CONTRACT_ID, true);\\n-  },\\n-  \\n-  getClassObject: function am_gco(aCompMgr, aCID, aIID) {\\n-    if (!aIID.equals(Ci.nsIFactory))\\n-      throw Components.results.NS_ERROR_NOT_IMPLEMENTED;\\n-\\n-    if (aCID.equals(CLASS_ID))\\n-      return ApplicationFactory;\\n-\\n-    throw Components.results.NS_ERROR_NO_INTERFACE;\\n-  },\\n-\\n-  canUnload: function am_cu(aCompMgr) { return true; }\\n-};\\n-\\n //module initialization\\n-function NSGetModule(aCompMgr, aFileSpec) { return ApplicationModule; }\\n+function NSGetModule(aCompMgr, aFileSpec) {\\n+  return XPCOMUtils.generateModule([Application]);\\n+}\\ndiff --git a/js/src/xpconnect/loader/XPCOMUtils.jsm b/js/src/xpconnect/loader/XPCOMUtils.jsm\\nindex ff03a10..54b792c 100644\\n--- a/js/src/xpconnect/loader/XPCOMUtils.jsm\\n+++ b/js/src/xpconnect/loader/XPCOMUtils.jsm\\n@@ -60,7 +60,24 @@\\n  *    // [optional] custom factory (an object implementing nsIFactory). If not\\n  *    // provided, the default factory is used, which returns\\n  *    // |(new MyComponent()).QueryInterface(iid)| in its createInstance().\\n- *    _xpcom_factory: { ... }\\n+ *    _xpcom_factory: { ... },\\n+ *\\n+ *    // [optional] an array of categories to register this component in.\\n+ *    _xpcom_categories: [{\\n+ *      // Each object in the array specifies the parameters to pass to\\n+ *      // nsICategoryManager.addCategoryEntry(). 'true' is passed for\\n+ *      // both aPersist and aReplace params.\\n+ *      category: \\\"some-category\\\",\\n+ *      // optional, defaults to the object's classDescription\\n+ *      entry: \\\"entry name\\\",\\n+ *      // optional, defaults to the object's contractID (unless\\n+ *      // 'service' is specified)\\n+ *      value: \\\"...\\\",\\n+ *      // optional, defaults to false. When set to true, and only if 'value'\\n+ *      // is not specified, the concatenation of the string \\\"service,\\\" and the\\n+ *      // object's contractID is passed as aValue parameter of addCategoryEntry.\\n+ *      service: true\\n+ *    }],\\n  *\\n  *    // QueryInterface implementation, e.g. using the generateQI helper\\n  *    QueryInterface: XPCOMUtils.generateQI(\\n@@ -129,6 +146,7 @@ var XPCOMUtils = {\\n         className:    component.prototype.classDescription,\\n         contractID:   component.prototype.contractID,\\n         factory:      this._getFactory(component),\\n+        categories:   component.prototype._xpcom_categories\\n       });\\n     }\\n \\n@@ -149,6 +167,7 @@ var XPCOMUtils = {\\n         var componentCount = 0;\\n         debug(\\\"*** registering \\\" + fileSpec.leafName + \\\": [ \\\");\\n         compMgr.QueryInterface(Ci.nsIComponentRegistrar);\\n+\\n         for each (let classDesc in classes) {\\n           debug((componentCount++ ? \\\", \\\" : \\\"\\\") + classDesc.className);\\n           compMgr.registerFactoryLocation(classDesc.cid,\\n@@ -157,6 +176,17 @@ var XPCOMUtils = {\\n                                           fileSpec,\\n                                           location,\\n                                           type);\\n+          if (classDesc.categories) {\\n+            let catMan = XPCOMUtils.categoryManager;\\n+            for each (let cat in classDesc.categories) {\\n+              let defaultValue = (cat.service ? \\\"service,\\\" : \\\"\\\") +\\n+                                 classDesc.contractID;\\n+              catMan.addCategoryEntry(cat.category,\\n+                                      cat.entry || classDesc.className,\\n+                                      cat.value || defaultValue,\\n+                                      true, true);\\n+            }\\n+          }\\n         }\\n \\n         if (postRegister)\\n@@ -173,6 +203,13 @@ var XPCOMUtils = {\\n \\n         for each (let classDesc in classes) {\\n           debug((componentCount++ ? \\\", \\\" : \\\"\\\") + classDesc.className);\\n+          if (classDesc.categories) {\\n+            let catMan = XPCOMUtils.categoryManager;\\n+            for each (let cat in classDesc.categories) {\\n+              catMan.deleteCategoryEntry(cat.category,\\n+                                         cat.entry || classDesc.className);\\n+            }\\n+          }\\n           compMgr.unregisterFactoryLocation(classDesc.cid, fileSpec);\\n         }\\n         debug(\\\" ]\\\\n\\\");\\n\""}