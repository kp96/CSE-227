{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bascb57d0d\""},"diff":"\"cb57d0d Bug 394466 - \\\"Call XCloseDisplay before exit and exec\\\" [p=karlt r=roc r=bsmedberg a1.9=bzbarsky]\\ndiff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp\\nindex 9542175..637be8d 100644\\n--- a/toolkit/xre/nsAppRunner.cpp\\n+++ b/toolkit/xre/nsAppRunner.cpp\\n@@ -2680,9 +2680,34 @@ XRE_main(int argc, char* argv[], const nsXREAppData* aAppData)\\n     if (CheckArg(\\\"install\\\"))\\n       gdk_rgb_set_install(TRUE);\\n \\n-    // Initialize GTK here for splash\\n-    gtk_init(&gArgc, &gArgv);\\n+    // Initialize GTK here for splash.\\n \\n+    // Open the display ourselves instead of using gtk_init, so that we can\\n+    // close it without fear that one day gtk might clean up the display it\\n+    // opens.\\n+    if (!gtk_parse_args(&gArgc, &gArgv))\\n+      return 1;\\n+\\n+    GdkDisplay* display = nsnull;\\n+    {\\n+      // display_name is owned by gdk.\\n+      const char *display_name = gdk_get_display_arg_name();\\n+      if (!display_name) {\\n+        display_name = PR_GetEnv(\\\"DISPLAY\\\");\\n+        if (!display_name) {\\n+          PR_fprintf(PR_STDERR, \\\"Error: no display specified\\\\n\\\");\\n+          return 1;\\n+        }\\n+      }\\n+      display = gdk_display_open(display_name);\\n+      if (!display) {\\n+        PR_fprintf(PR_STDERR, \\\"Error: cannot open display: %s\\\\n\\\", display_name);\\n+        return 1;\\n+      }\\n+    }\\n+    gdk_display_manager_set_default_display (gdk_display_manager_get (),\\n+                                             display);\\n+    \\n     // g_set_application_name () is only defined in glib2.2 and higher.\\n     _g_set_application_name_fn _g_set_application_name =\\n       (_g_set_application_name_fn)FindFunction(\\\"g_set_application_name\\\");\\n@@ -3142,6 +3167,8 @@ XRE_main(int argc, char* argv[], const nsXREAppData* aAppData)\\n       }\\n #endif\\n \\n+// XXXkt s/MOZ_TOOLKIT_GTK2/MOZ_WIDGET_GTK2/?\\n+// but the hidden window has been destroyed so toolkit is NULL anyway.\\n #if defined(HAVE_DESKTOP_STARTUP_ID) && defined(MOZ_TOOLKIT_GTK2)\\n       nsGTKToolkit* toolkit = GetGTKToolkit();\\n       if (toolkit) {\\n@@ -3157,6 +3184,10 @@ XRE_main(int argc, char* argv[], const nsXREAppData* aAppData)\\n       }\\n #endif\\n \\n+#ifdef MOZ_WIDGET_GTK2\\n+      gdk_display_close(display);\\n+#endif\\n+\\n       rv = LaunchChild(nativeApp, appInitiatedRestart, upgraded ? -1 : 0);\\n \\n #ifdef MOZ_CRASHREPORTER\\n@@ -3166,6 +3197,12 @@ XRE_main(int argc, char* argv[], const nsXREAppData* aAppData)\\n \\n       return rv == NS_ERROR_LAUNCHED_CHILD_PROCESS ? 0 : 1;\\n     }\\n+\\n+#ifdef MOZ_WIDGET_GTK2\\n+    // gdk_display_close also calls gdk_display_manager_set_default_display\\n+    // appropriately when necessary.\\n+    gdk_display_close(display);\\n+#endif\\n   }\\n \\n #ifdef MOZ_CRASHREPORTER\\n\""}