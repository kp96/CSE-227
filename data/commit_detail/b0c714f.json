{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basb0c714f\""},"diff":"\"b0c714f Bug 364035 - \\\"Permit loading external spellcheck engine from libspellcheck\\\" [p=andris.pavenis@iki.fi (pavenis) r=brettw sr=mscott a1.9=damons]\\ndiff --git a/extensions/spellcheck/src/mozSpellChecker.cpp b/extensions/spellcheck/src/mozSpellChecker.cpp\\nindex fb25a88..8c26704 100644\\n--- a/extensions/spellcheck/src/mozSpellChecker.cpp\\n+++ b/extensions/spellcheck/src/mozSpellChecker.cpp\\n@@ -40,9 +40,13 @@\\n #include \\\"nsIServiceManager.h\\\"\\n #include \\\"mozISpellI18NManager.h\\\"\\n #include \\\"nsIStringEnumerator.h\\\"\\n+#include \\\"nsICategoryManager.h\\\"\\n+#include \\\"nsISupportsPrimitives.h\\\"\\n \\n #define UNREASONABLE_WORD_LENGTH 64\\n \\n+#define DEFAULT_SPELL_CHECKER \\\"@mozilla.org/spellchecker/hunspell;1\\\"\\n+\\n NS_IMPL_ISUPPORTS1(mozSpellChecker, nsISpellChecker)\\n \\n mozSpellChecker::mozSpellChecker()\\n@@ -64,12 +68,11 @@ mozSpellChecker::Init()\\n {\\n   mPersonalDictionary = do_GetService(\\\"@mozilla.org/spellchecker/personaldictionary;1\\\");\\n   \\n-  nsresult rv;\\n-  mSpellCheckingEngine = do_GetService(\\\"@mozilla.org/spellchecker/hunspell;1\\\",&rv);\\n-  if (NS_FAILED(rv)) {\\n-    return rv;\\n-  }\\n-  mSpellCheckingEngine->SetPersonalDictionary(mPersonalDictionary);\\n+  mSpellCheckingEngine = nsnull;\\n+  mCurrentEngineContractId = nsnull;\\n+  mDictionariesMap.Init();\\n+  InitSpellCheckDictionaryMap();\\n+\\n   return NS_OK;\\n } \\n \\n@@ -300,21 +303,35 @@ mozSpellChecker::GetPersonalDictionary(nsStringArray *aWordList)\\n   return NS_OK;\\n }\\n \\n+struct AppendNewStruct\\n+{\\n+  nsStringArray *dictionaryList;\\n+  PRBool failed;\\n+};\\n+\\n+static PLDHashOperator\\n+AppendNewString(const nsAString& aString, nsCString*, void* aClosure)\\n+{\\n+  AppendNewStruct *ans = (AppendNewStruct*) aClosure;\\n+\\n+  if (!ans->dictionaryList->AppendString(aString))\\n+  {\\n+    ans->failed = PR_TRUE;\\n+    return PL_DHASH_STOP;\\n+  }\\n+\\n+  return PL_DHASH_NEXT;\\n+}\\n+\\n NS_IMETHODIMP \\n mozSpellChecker::GetDictionaryList(nsStringArray *aDictionaryList)\\n {\\n-  nsAutoString temp;\\n-  PRUint32 count,i;\\n-  PRUnichar **words;\\n-  \\n-  if(!aDictionaryList || !mSpellCheckingEngine)\\n-    return NS_ERROR_NULL_POINTER;\\n-  mSpellCheckingEngine->GetDictionaryList(&words,&count);\\n-  for(i=0;i<count;i++){\\n-    temp.Assign(words[i]);\\n-    aDictionaryList->AppendString(temp);\\n-  }\\n-  NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(count, words);\\n+  AppendNewStruct ans = {aDictionaryList, PR_FALSE};\\n+\\n+  mDictionariesMap.EnumerateRead(AppendNewString, &ans);\\n+\\n+  if (ans.failed)\\n+    return NS_ERROR_OUT_OF_MEMORY;\\n \\n   return NS_OK;\\n }\\n@@ -323,6 +340,10 @@ NS_IMETHODIMP\\n mozSpellChecker::GetCurrentDictionary(nsAString &aDictionary)\\n {\\n   nsXPIDLString dictname;\\n+\\n+  if (!mSpellCheckingEngine)\\n+    return NS_ERROR_NOT_INITIALIZED;\\n+\\n   mSpellCheckingEngine->GetDictionary(getter_Copies(dictname));\\n   aDictionary = dictname;\\n   return NS_OK;\\n@@ -331,15 +352,31 @@ mozSpellChecker::GetCurrentDictionary(nsAString &aDictionary)\\n NS_IMETHODIMP \\n mozSpellChecker::SetCurrentDictionary(const nsAString &aDictionary)\\n {\\n-  if(!mSpellCheckingEngine)\\n-    return NS_ERROR_NULL_POINTER;\\n- \\n+  nsresult rv;\\n+  nsCString *contractId;\\n+\\n+  if (!mDictionariesMap.Get(aDictionary, &contractId)){\\n+    NS_WARNING(\\\"Dictionary not found\\\");\\n+    return NS_ERROR_NOT_AVAILABLE;\\n+  }\\n+\\n+  if (!mCurrentEngineContractId || !mCurrentEngineContractId->Equals(*contractId)){\\n+    mSpellCheckingEngine = do_GetService(contractId->get(), &rv);\\n+    if (NS_FAILED(rv))\\n+      return rv;\\n+\\n+    mCurrentEngineContractId = contractId;\\n+  }\\n+\\n   nsresult res;\\n   res = mSpellCheckingEngine->SetDictionary(PromiseFlatString(aDictionary).get());\\n   if(NS_FAILED(res)){\\n     NS_WARNING(\\\"Dictionary load failed\\\");\\n     return res;\\n   }\\n+\\n+  mSpellCheckingEngine->SetPersonalDictionary(mPersonalDictionary);\\n+\\n   nsXPIDLString language;\\n   \\n   nsCOMPtr<mozISpellI18NManager> serv(do_GetService(\\\"@mozilla.org/spellchecker/i18nmanager;1\\\", &res));\\n@@ -428,3 +465,86 @@ mozSpellChecker::GetCurrentBlockIndex(nsITextServicesDocument *aDoc, PRInt32 *ou\\n \\n   return result;\\n }\\n+\\n+nsresult\\n+mozSpellChecker::InitSpellCheckDictionaryMap()\\n+{\\n+  nsresult rv;\\n+  PRBool hasMoreEngines;\\n+  PRInt32 i;\\n+  nsCStringArray contractIds;\\n+\\n+  nsCOMPtr<nsICategoryManager> catMgr = do_GetService(NS_CATEGORYMANAGER_CONTRACTID);\\n+  if (!catMgr)\\n+    return NS_ERROR_NULL_POINTER;\\n+\\n+  nsCOMPtr<nsISimpleEnumerator> catEntries;\\n+\\n+  // Get contract IDs of registrated external spell-check engines and\\n+  // append one of HunSpell at the end.\\n+  rv = catMgr->EnumerateCategory(\\\"spell-check-engine\\\", getter_AddRefs(catEntries));\\n+  if (NS_FAILED(rv))\\n+    return rv;\\n+\\n+  while (catEntries->HasMoreElements(&hasMoreEngines), hasMoreEngines){\\n+    nsCOMPtr<nsISupports> elem;\\n+    rv = catEntries->GetNext(getter_AddRefs(elem));\\n+\\n+    nsCOMPtr<nsISupportsCString> entry = do_QueryInterface(elem, &rv);\\n+    if (NS_FAILED(rv))\\n+      return rv;\\n+\\n+    nsCString contractId;\\n+    rv = entry->GetData(contractId);\\n+    if (NS_FAILED(rv))\\n+      return rv;\\n+\\n+    contractIds.AppendCString(contractId);\\n+  }\\n+\\n+  contractIds.AppendCString(NS_LITERAL_CSTRING(DEFAULT_SPELL_CHECKER));\\n+\\n+  // Retrieve dictionaries from all available spellcheckers and\\n+  // fill mDictionariesMap hash (only the first dictionary with the\\n+  // each name is used).\\n+  for (i=0;i<contractIds.Count();i++){\\n+    PRUint32 count,k;\\n+    PRUnichar **words;\\n+\\n+    nsCString *contractId = contractIds[i];\\n+\\n+    // Try to load spellchecker engine. Ignore errors silently\\n+    // except for the last one (HunSpell).\\n+    nsCOMPtr<mozISpellCheckingEngine> engine =\\n+      do_GetService(contractId->get(), &rv);\\n+    if (NS_FAILED(rv)){\\n+      // Fail if not succeeded to load HunSpell. Ignore errors\\n+      // for external spellcheck engines.\\n+      if (i==contractIds.Count()-1){\\n+        return rv;\\n+      }\\n+\\n+      continue;\\n+    }\\n+\\n+    engine->GetDictionaryList(&words,&count);\\n+    for(k=0;k<count;k++){\\n+      nsAutoString dictName;\\n+\\n+      dictName.Assign(words[k]);\\n+\\n+      nsCString dictCName = NS_ConvertUTF16toUTF8(dictName);\\n+\\n+      // Skip duplicate dictionaries. Only take the first one\\n+      // for each name.\\n+      if (mDictionariesMap.Get(dictName, NULL))\\n+        continue;\\n+\\n+      mDictionariesMap.Put(dictName, new nsCString(*contractId));\\n+    }\\n+\\n+    NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(count, words);\\n+  }\\n+\\n+  return NS_OK;\\n+}\\ndiff --git a/extensions/spellcheck/src/mozSpellChecker.h b/extensions/spellcheck/src/mozSpellChecker.h\\nindex 5e5b246..098811f 100644\\n--- a/extensions/spellcheck/src/mozSpellChecker.h\\n+++ b/extensions/spellcheck/src/mozSpellChecker.h\\n@@ -44,6 +44,7 @@\\n #include \\\"nsITextServicesDocument.h\\\"\\n #include \\\"mozIPersonalDictionary.h\\\"\\n #include \\\"mozISpellCheckingEngine.h\\\"\\n+#include \\\"nsClassHashtable.h\\\"\\n #include \\\"nsVoidArray.h\\\"\\n #include \\\"mozISpellI18NUtil.h\\\"\\n \\n@@ -76,7 +77,12 @@ protected:\\n   nsCOMPtr<mozISpellI18NUtil> mConverter;\\n   nsCOMPtr<nsITextServicesDocument> mTsDoc;\\n   nsCOMPtr<mozIPersonalDictionary> mPersonalDictionary;\\n+\\n+  // Hastable maps directory name to the spellchecker contract ID\\n+  nsClassHashtable<nsStringHashKey, nsCString> mDictionariesMap;\\n+\\n   nsString mDictionaryName;\\n+  nsCString *mCurrentEngineContractId;\\n   nsCOMPtr<mozISpellCheckingEngine>  mSpellCheckingEngine;\\n   PRBool mFromStart;\\n   nsStringArray mIgnoreList;\\n@@ -84,5 +90,7 @@ protected:\\n   nsresult SetupDoc(PRUint32 *outBlockOffset);\\n \\n   nsresult GetCurrentBlockIndex(nsITextServicesDocument *aDoc, PRInt32 *outBlockIndex);\\n+\\n+  nsresult InitSpellCheckDictionaryMap();\\n };\\n #endif // mozSpellChecker_h__\\n\""}