{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basa8ab6d3\""},"diff":"\"a8ab6d3 Bug 320622 - removeAttribute doesn't effect some underlying DOM properties. r+sr+a=roc\\ndiff --git a/content/svg/content/src/nsSVGAnimatedString.cpp b/content/svg/content/src/nsSVGAnimatedString.cpp\\nindex e0ea3e1..b2b404f 100644\\n--- a/content/svg/content/src/nsSVGAnimatedString.cpp\\n+++ b/content/svg/content/src/nsSVGAnimatedString.cpp\\n@@ -41,51 +41,9 @@\\n #include \\\"nsSVGAnimatedString.h\\\"\\n #include \\\"nsContentUtils.h\\\"\\n \\n-\\n-////////////////////////////////////////////////////////////////////////\\n-// nsSVGAnimatedString\\n-\\n-class nsSVGAnimatedString : public nsIDOMSVGAnimatedString,\\n-                            public nsSVGValue\\n-{\\n-protected:\\n-  friend nsresult NS_NewSVGAnimatedString(nsIDOMSVGAnimatedString** result);\\n-  nsSVGAnimatedString();\\n-  ~nsSVGAnimatedString();\\n-  void Init();\\n-  \\n-public:\\n-  // nsISupports interface:\\n-  NS_DECL_ISUPPORTS\\n-\\n-  // nsIDOMSVGAnimatedString interface:\\n-  NS_DECL_NSIDOMSVGANIMATEDSTRING\\n-\\n-  // remainder of nsISVGValue interface:\\n-  NS_IMETHOD SetValueString(const nsAString& aValue);\\n-  NS_IMETHOD GetValueString(nsAString& aValue);\\n-\\n-protected:\\n-  nsString mBaseVal;\\n-};\\n-\\n-\\n //----------------------------------------------------------------------\\n // Implementation\\n \\n-nsSVGAnimatedString::nsSVGAnimatedString()\\n-{\\n-}\\n-\\n-nsSVGAnimatedString::~nsSVGAnimatedString()\\n-{\\n-}\\n-\\n-void\\n-nsSVGAnimatedString::Init()\\n-{\\n-}\\n-\\n //----------------------------------------------------------------------\\n // nsISupports methods:\\n \\n@@ -145,6 +103,15 @@ nsSVGAnimatedString::GetAnimVal(nsAString & aAnimVal)\\n   return NS_OK;\\n }\\n \\n+/* [noscript] void Clear(); */\\n+NS_IMETHODIMP\\n+nsSVGAnimatedString::Clear()\\n+{\\n+  mBaseVal.Truncate();\\n+  return NS_OK;\\n+}\\n+\\n+\\n ////////////////////////////////////////////////////////////////////////\\n // Exported creation functions\\n \\n@@ -157,8 +124,6 @@ NS_NewSVGAnimatedString(nsIDOMSVGAnimatedString** aResult)\\n   if(!animatedString) return NS_ERROR_OUT_OF_MEMORY;\\n   NS_ADDREF(animatedString);\\n \\n-  animatedString->Init();\\n-  \\n   *aResult = (nsIDOMSVGAnimatedString*) animatedString;\\n   \\n   return NS_OK;\\ndiff --git a/content/svg/content/src/nsSVGAnimatedString.h b/content/svg/content/src/nsSVGAnimatedString.h\\nindex 6068566..312fe95 100644\\n--- a/content/svg/content/src/nsSVGAnimatedString.h\\n+++ b/content/svg/content/src/nsSVGAnimatedString.h\\n@@ -40,10 +40,32 @@\\n #define __NS_SVGANIMATEDSTRING_H__\\n \\n #include \\\"nsIDOMSVGAnimatedString.h\\\"\\n+#include \\\"nsSVGValue.h\\\"\\n \\n nsresult NS_NewSVGAnimatedString(nsIDOMSVGAnimatedString** result);\\n \\n+////////////////////////////////////////////////////////////////////////\\n+// nsSVGAnimatedString\\n \\n+class nsSVGAnimatedString : public nsIDOMSVGAnimatedString,\\n+                            public nsSVGValue\\n+{\\n+protected:\\n+  friend nsresult NS_NewSVGAnimatedString(nsIDOMSVGAnimatedString** result);\\n \\n+public:\\n+  // nsISupports interface:\\n+  NS_DECL_ISUPPORTS\\n+\\n+  // nsIDOMSVGAnimatedString interface:\\n+  NS_DECL_NSIDOMSVGANIMATEDSTRING\\n+\\n+  // remainder of nsISVGValue interface:\\n+  NS_IMETHOD SetValueString(const nsAString& aValue);\\n+  NS_IMETHOD GetValueString(nsAString& aValue);\\n+\\n+protected:\\n+  nsString mBaseVal;\\n+};\\n \\n #endif //__NS_SVGANIMATEDSTRING_H__\\ndiff --git a/content/svg/content/src/nsSVGClassValue.cpp b/content/svg/content/src/nsSVGClassValue.cpp\\nindex 6e5d26d..d7619da 100644\\n--- a/content/svg/content/src/nsSVGClassValue.cpp\\n+++ b/content/svg/content/src/nsSVGClassValue.cpp\\n@@ -103,3 +103,11 @@ nsSVGClassValue::GetAnimVal(nsAString & aAnimVal)\\n \\n   return NS_OK;\\n }\\n+\\n+/* [noscript] void Clear(); */\\n+NS_IMETHODIMP\\n+nsSVGClassValue::Clear()\\n+{\\n+  mBaseVal.Reset();\\n+  return NS_OK;\\n+}\\ndiff --git a/content/svg/content/src/nsSVGElement.cpp b/content/svg/content/src/nsSVGElement.cpp\\nindex 6d861cf..f64dff9 100644\\n--- a/content/svg/content/src/nsSVGElement.cpp\\n+++ b/content/svg/content/src/nsSVGElement.cpp\\n@@ -69,6 +69,25 @@\\n #include \\\"nsSVGNumber2.h\\\"\\n #include \\\"nsSVGEnum.h\\\"\\n #include \\\"nsIDOMSVGUnitTypes.h\\\"\\n+#include \\\"nsIDOMSVGAngle.h\\\"\\n+#include \\\"nsIDOMSVGAnimatedAngle.h\\\"\\n+#include \\\"nsIDOMSVGAnimatedBoolean.h\\\"\\n+#include \\\"nsIDOMSVGAnimatedInteger.h\\\"\\n+#include \\\"nsIDOMSVGLength.h\\\"\\n+#include \\\"nsIDOMSVGLengthList.h\\\"\\n+#include \\\"nsIDOMSVGAnimatedLengthList.h\\\"\\n+#include \\\"nsIDOMSVGNumberList.h\\\"\\n+#include \\\"nsIDOMSVGAnimatedNumberList.h\\\"\\n+#include \\\"nsIDOMSVGPointList.h\\\"\\n+#include \\\"nsIDOMSVGAnimatedPoints.h\\\"\\n+#include \\\"nsIDOMSVGPresAspectRatio.h\\\"\\n+#include \\\"nsIDOMSVGAnimPresAspRatio.h\\\"\\n+#include \\\"nsIDOMSVGTransformList.h\\\"\\n+#include \\\"nsIDOMSVGAnimTransformList.h\\\"\\n+#include \\\"nsIDOMSVGAnimatedString.h\\\"\\n+#include \\\"nsIDOMSVGAnimatedRect.h\\\"\\n+#include \\\"nsSVGRect.h\\\"\\n+#include \\\"nsSVGAnimatedString.h\\\"\\n #include <stdarg.h>\\n \\n nsSVGEnumMapping nsSVGElement::sSVGUnitTypesMap[] = {\\n@@ -317,6 +336,62 @@ nsSVGElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n           break;\\n         }\\n       }\\n+\\n+      // Now check for one of the old style basetypes going away\\n+      nsCOMPtr<nsISVGValue> svg_value = GetMappedAttribute(aNamespaceID, aName);\\n+\\n+      if (svg_value) {\\n+#ifdef DEBUG_tor\\n+        nsCOMPtr<nsIDOMSVGAnimatedAngle> a = do_QueryInterface(svg_value);\\n+        NS_ASSERTION(!a, \\\"must provide element processing for unset angle\\\");\\n+\\n+        nsCOMPtr<nsIDOMSVGAnimatedBoolean> b = do_QueryInterface(svg_value);\\n+        NS_ASSERTION(!b, \\\"must provide element processing for unset boolean\\\");\\n+\\n+        nsCOMPtr<nsIDOMSVGAnimatedInteger> i = do_QueryInterface(svg_value);\\n+        NS_ASSERTION(!i, \\\"must provide element processing for unset integer\\\");\\n+#endif\\n+\\n+        nsCOMPtr<nsIDOMSVGAnimatedRect> r = do_QueryInterface(svg_value);\\n+        if (r) {\\n+          nsIDOMSVGRect *rect;\\n+          r->GetBaseVal(&rect);\\n+          static_cast<nsSVGRect*>(rect)->Clear();\\n+        }\\n+        nsCOMPtr<nsIDOMSVGAnimatedPreserveAspectRatio> ar = do_QueryInterface(svg_value);\\n+        if (ar) {\\n+          nsIDOMSVGPreserveAspectRatio *par;\\n+          ar->GetBaseVal(&par);\\n+          par->SetAlign(nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMIDYMID);\\n+          par->SetMeetOrSlice(nsIDOMSVGPreserveAspectRatio::SVG_MEETORSLICE_MEET);\\n+        }\\n+        nsCOMPtr<nsIDOMSVGAnimatedString> s = do_QueryInterface(svg_value);\\n+        if (s) {\\n+          s->Clear();\\n+        }\\n+        nsCOMPtr<nsIDOMSVGPointList> pl = do_QueryInterface(svg_value);\\n+        if (pl) {\\n+          pl->Clear();\\n+        }\\n+        nsCOMPtr<nsIDOMSVGAnimatedLengthList> ll = do_QueryInterface(svg_value);\\n+        if (ll) {\\n+          nsIDOMSVGLengthList *lengthlist;\\n+          ll->GetBaseVal(&lengthlist);\\n+          lengthlist->Clear();\\n+        }\\n+        nsCOMPtr<nsIDOMSVGAnimatedNumberList> nl = do_QueryInterface(svg_value);\\n+        if (nl) {\\n+          nsIDOMSVGNumberList *numberlist;\\n+          nl->GetBaseVal(&numberlist);\\n+          numberlist->Clear();\\n+        }\\n+        nsCOMPtr<nsIDOMSVGAnimatedTransformList> tl = do_QueryInterface(svg_value);\\n+        if (tl) {\\n+          nsIDOMSVGTransformList *transform;\\n+          tl->GetBaseVal(&transform);\\n+          transform->Clear();\\n+        }\\n+      }\\n     }\\n   }\\n \\ndiff --git a/content/svg/content/src/nsSVGFilterElement.cpp b/content/svg/content/src/nsSVGFilterElement.cpp\\nindex 25b49a7f..6845bbb 100644\\n--- a/content/svg/content/src/nsSVGFilterElement.cpp\\n+++ b/content/svg/content/src/nsSVGFilterElement.cpp\\n@@ -238,6 +238,20 @@ nsSVGFilterElement::SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n   return rv;\\n }\\n \\n+nsresult\\n+nsSVGFilterElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                              PRBool aNotify)\\n+{\\n+  if (aName == nsGkAtoms::filterRes && aNamespaceID == kNameSpaceID_None) {\\n+    mFilterResX->SetBaseVal(0);\\n+    mFilterResY->SetBaseVal(0);\\n+\\n+    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n+  }\\n+\\n+  return nsSVGFilterElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n+}\\n+\\n NS_IMETHODIMP_(PRBool)\\n nsSVGFilterElement::IsAttributeMapped(const nsIAtom* name) const\\n {\\ndiff --git a/content/svg/content/src/nsSVGFilterElement.h b/content/svg/content/src/nsSVGFilterElement.h\\nindex bb115ff..b4d418b 100644\\n--- a/content/svg/content/src/nsSVGFilterElement.h\\n+++ b/content/svg/content/src/nsSVGFilterElement.h\\n@@ -79,6 +79,8 @@ public:\\n   virtual nsresult SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n                            nsIAtom* aPrefix, const nsAString& aValue,\\n                            PRBool aNotify);\\n+  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                             PRBool aNotify);\\n \\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n   NS_IMETHOD_(PRBool) IsAttributeMapped(const nsIAtom* aAttribute) const;\\ndiff --git a/content/svg/content/src/nsSVGFilters.cpp b/content/svg/content/src/nsSVGFilters.cpp\\nindex 0aa2e39..8072de0 100644\\n--- a/content/svg/content/src/nsSVGFilters.cpp\\n+++ b/content/svg/content/src/nsSVGFilters.cpp\\n@@ -3010,6 +3010,8 @@ public:\\n                                 const nsAString& aValue,\\n                                 nsAttrValue& aResult);\\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n+  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                             PRBool aNotify);\\n \\n protected:\\n   virtual NumberAttributesInfo GetNumberInfo();\\n@@ -3234,6 +3236,18 @@ nsSVGFETurbulenceElement::ParseAttribute(PRInt32 aNameSpaceID, nsIAtom* aName,\\n                                                       aValue, aResult);\\n }\\n \\n+nsresult\\n+nsSVGFETurbulenceElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                                    PRBool aNotify)\\n+{\\n+  if (aNamespaceID == kNameSpaceID_None && aName == nsGkAtoms::numOctaves) {\\n+    mNumOctaves->SetBaseVal(1);\\n+    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n+  }\\n+\\n+  return nsSVGFETurbulenceElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n+}\\n+\\n NS_IMETHODIMP\\n nsSVGFETurbulenceElement::Filter(nsSVGFilterInstance *instance)\\n {\\n@@ -3835,6 +3849,8 @@ public:\\n                                 const nsAString& aValue,\\n                                 nsAttrValue& aResult);\\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n+  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                             PRBool aNotify);\\n \\n protected:\\n   virtual PRBool OperatesOnPremultipledAlpha() {\\n@@ -3951,7 +3967,7 @@ nsSVGFEConvolveMatrixElement::Init()\\n     NS_ENSURE_SUCCESS(rv,rv);\\n   }\\n \\n-  // DOM property: targetY , #IMPLIED attrib: targetY\\n+  // DOM property: preserveAlpha , #IMPLIED attrib: preserveAlpha\\n   {\\n     rv = NS_NewSVGAnimatedBoolean(getter_AddRefs(mPreserveAlpha), PR_FALSE);\\n     NS_ENSURE_SUCCESS(rv,rv);\\n@@ -4119,6 +4135,35 @@ nsSVGFEConvolveMatrixElement::ParseAttribute(PRInt32 aNameSpaceID, nsIAtom* aNam\\n                                                           aValue, aResult);\\n }\\n \\n+nsresult\\n+nsSVGFEConvolveMatrixElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                                    PRBool aNotify)\\n+{\\n+  if (aNamespaceID == kNameSpaceID_None) {\\n+    PRBool processed = PR_FALSE;\\n+    if (aName == nsGkAtoms::order) {\\n+      mOrderX->SetBaseVal(0);\\n+      mOrderY->SetBaseVal(0);\\n+      processed = PR_TRUE;\\n+    } else if (aName == nsGkAtoms::targetX) {\\n+      mTargetX->SetBaseVal(0);\\n+      processed = PR_TRUE;\\n+    } else if (aName == nsGkAtoms::targetY) {\\n+      mTargetY->SetBaseVal(0);\\n+      processed = PR_TRUE;\\n+    } else if (aName == nsGkAtoms::preserveAlpha) {\\n+      mPreserveAlpha->SetBaseVal(PR_FALSE);\\n+      processed = PR_TRUE;\\n+    }\\n+\\n+    if (processed) {\\n+      return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n+    }\\n+  }\\n+\\n+  return nsSVGFEConvolveMatrixElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n+}\\n+\\n #define BOUND(val, min, max) \\\\\\n   PR_MIN(PR_MAX(val, min), max)\\n \\ndiff --git a/content/svg/content/src/nsSVGMarkerElement.cpp b/content/svg/content/src/nsSVGMarkerElement.cpp\\nindex eb71fc3..a509740 100644\\n--- a/content/svg/content/src/nsSVGMarkerElement.cpp\\n+++ b/content/svg/content/src/nsSVGMarkerElement.cpp\\n@@ -306,7 +306,13 @@ nsSVGMarkerElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n       vb->SetHeight(mLengthAttributes[MARKERHEIGHT].GetAnimValue(mCoordCtx));\\n     } else if (aName == nsGkAtoms::orient) {\\n       mOrientType.SetBaseValue(SVG_MARKER_ORIENT_AUTO, this, PR_FALSE);\\n+      nsIDOMSVGAngle *angle;\\n+      mOrient->GetBaseVal(&angle);\\n+      angle->NewValueSpecifiedUnits(nsIDOMSVGAngle::SVG_ANGLETYPE_UNSPECIFIED,\\n+                                    0.0f);\\n     }\\n+\\n+    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n   }\\n \\n   return nsSVGMarkerElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\ndiff --git a/content/svg/content/src/nsSVGPathElement.cpp b/content/svg/content/src/nsSVGPathElement.cpp\\nindex 648ad6b..a79c931 100644\\n--- a/content/svg/content/src/nsSVGPathElement.cpp\\n+++ b/content/svg/content/src/nsSVGPathElement.cpp\\n@@ -442,6 +442,24 @@ nsSVGPathElement::BeforeSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n                                              aValue, aNotify);\\n }\\n \\n+nsresult\\n+nsSVGPathElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                            PRBool aNotify)\\n+{\\n+  if (aNamespaceID == kNameSpaceID_None && aName == nsGkAtoms::d) {\\n+    if (mSegments) {\\n+      NS_REMOVE_SVGVALUE_OBSERVER(mSegments);\\n+      mSegments = nsnull;\\n+    }\\n+\\n+    mPathData.Clear();\\n+\\n+    return nsGenericElement::UnsetAttr(aNamespaceID, aName, aNotify);\\n+  }\\n+\\n+  return nsSVGPathElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n+}\\n+\\n NS_IMETHODIMP\\n nsSVGPathElement::DidModifySVGObservable(nsISVGValue* observable,\\n                                          nsISVGValue::modificationType aModType)\\ndiff --git a/content/svg/content/src/nsSVGPathElement.h b/content/svg/content/src/nsSVGPathElement.h\\nindex 0ca812d..98ec22b 100644\\n--- a/content/svg/content/src/nsSVGPathElement.h\\n+++ b/content/svg/content/src/nsSVGPathElement.h\\n@@ -56,10 +56,9 @@ public:\\n   nsSVGPathList() : mArguments(nsnull), mNumCommands(0), mNumArguments(0) {}\\n   ~nsSVGPathList() { Clear(); }\\n   void Playback(gfxContext *aCtx);\\n-\\n-protected:\\n   void Clear();\\n \\n+protected:\\n   float   *mArguments;\\n   PRUint32 mNumCommands;\\n   PRUint32 mNumArguments;\\n@@ -106,13 +105,17 @@ public:\\n \\n   virtual already_AddRefed<gfxFlattenedPath> GetFlattenedPath(nsIDOMSVGMatrix *aMatrix);\\n \\n+  // nsIContent interface\\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n+  virtual nsresult BeforeSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                                 const nsAString* aValue, PRBool aNotify);\\n+  virtual nsresult UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                             PRBool aNotify);\\n \\n protected:\\n \\n+  // nsSVGElement method\\n   virtual NumberAttributesInfo GetNumberInfo();\\n-  virtual nsresult BeforeSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                                 const nsAString* aValue, PRBool aNotify);\\n \\n   // Helper for lazily creating pathseg list\\n   nsresult CreatePathSegList();\\ndiff --git a/content/svg/content/src/nsSVGRect.cpp b/content/svg/content/src/nsSVGRect.cpp\\nindex 074238b..caf8cd0 100644\\n--- a/content/svg/content/src/nsSVGRect.cpp\\n+++ b/content/svg/content/src/nsSVGRect.cpp\\n@@ -48,30 +48,6 @@\\n #include \\\"nsContentUtils.h\\\"\\n #include \\\"nsDOMError.h\\\"\\n \\n-////////////////////////////////////////////////////////////////////////\\n-// nsSVGRect class\\n-\\n-class nsSVGRect : public nsIDOMSVGRect,\\n-                  public nsSVGValue\\n-{\\n-public:\\n-  nsSVGRect(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f);\\n-  \\n-  // nsISupports interface:\\n-  NS_DECL_ISUPPORTS\\n-\\n-  // nsIDOMSVGRect interface:\\n-  NS_DECL_NSIDOMSVGRECT\\n-\\n-  // nsISVGValue interface:\\n-  NS_IMETHOD SetValueString(const nsAString& aValue);\\n-  NS_IMETHOD GetValueString(nsAString& aValue);\\n-\\n-\\n-protected:\\n-  float mX, mY, mWidth, mHeight;\\n-};\\n-\\n //----------------------------------------------------------------------\\n // implementation:\\n \\n@@ -80,6 +56,12 @@ nsSVGRect::nsSVGRect(float x, float y, float w, float h)\\n {\\n }\\n \\n+void\\n+nsSVGRect::Clear()\\n+{\\n+  mX = mY = mWidth = mHeight = 0.0f;\\n+}\\n+\\n //----------------------------------------------------------------------\\n // nsISupports methods:\\n \\ndiff --git a/content/svg/content/src/nsSVGRect.h b/content/svg/content/src/nsSVGRect.h\\nindex e44510d..883cf9b 100644\\n--- a/content/svg/content/src/nsSVGRect.h\\n+++ b/content/svg/content/src/nsSVGRect.h\\n@@ -41,10 +41,9 @@\\n #define __NS_SVGRECT_H__\\n \\n #include \\\"nsIDOMSVGRect.h\\\"\\n+#include \\\"nsSVGValue.h\\\"\\n #include \\\"gfxRect.h\\\"\\n \\n-class nsIDOMSVGLength;\\n-\\n nsresult\\n NS_NewSVGRect(nsIDOMSVGRect** result,\\n               float x=0.0f, float y=0.0f,\\n@@ -58,4 +57,29 @@ NS_NewSVGReadonlyRect(nsIDOMSVGRect** result,\\n                       float x=0.0f, float y=0.0f,\\n                       float width=0.0f, float height=0.0f);\\n \\n+////////////////////////////////////////////////////////////////////////\\n+// nsSVGRect class\\n+\\n+class nsSVGRect : public nsIDOMSVGRect,\\n+                  public nsSVGValue\\n+{\\n+public:\\n+  nsSVGRect(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f);\\n+\\n+  // nsISupports interface:\\n+  NS_DECL_ISUPPORTS\\n+\\n+  // nsIDOMSVGRect interface:\\n+  NS_DECL_NSIDOMSVGRECT\\n+\\n+  // nsISVGValue interface:\\n+  NS_IMETHOD SetValueString(const nsAString& aValue);\\n+  NS_IMETHOD GetValueString(nsAString& aValue);\\n+\\n+  void Clear();\\n+\\n+protected:\\n+  float mX, mY, mWidth, mHeight;\\n+};\\n+\\n #endif //__NS_SVGRECT_H__\\ndiff --git a/dom/public/idl/svg/nsIDOMSVGAnimatedString.idl b/dom/public/idl/svg/nsIDOMSVGAnimatedString.idl\\nindex 59a60c3..ae2deb7 100644\\n--- a/dom/public/idl/svg/nsIDOMSVGAnimatedString.idl\\n+++ b/dom/public/idl/svg/nsIDOMSVGAnimatedString.idl\\n@@ -38,11 +38,14 @@\\n \\n #include \\\"domstubs.idl\\\"\\n \\n-[scriptable, uuid(36f18f12-61a9-4529-8fa9-30050bd6ac00)]\\n+[scriptable, uuid(4afb42f4-9969-483d-9b90-59ddba047492)]\\n interface nsIDOMSVGAnimatedString\\n   : nsISupports\\n {\\n   attribute DOMString baseVal;\\n               // raises DOMException on setting\\n   readonly attribute DOMString animVal;\\n+\\n+  /* internal method used for resetting strings during attribute removal */\\n+  [noscript] void Clear();\\n };\\n\""}