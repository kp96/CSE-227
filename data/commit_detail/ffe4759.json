{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basffe4759\""},"diff":"\"ffe4759 Bug 393499: Clean up character lookup in nsCSSScanner. r=bzbarsky, sr+a=dbaron\\ndiff --git a/layout/style/nsCSSScanner.cpp b/layout/style/nsCSSScanner.cpp\\nindex d3bcf76..81e2f33 100644\\n--- a/layout/style/nsCSSScanner.cpp\\n+++ b/layout/style/nsCSSScanner.cpp\\n@@ -60,8 +60,6 @@\\n // Don't bother collecting whitespace characters in token's mIdent buffer\\n #undef COLLECT_WHITESPACE\\n \\n-#define BUFFER_SIZE 256\\n-\\n static const PRUnichar CSS_ESCAPE = PRUnichar('\\\\\\\\');\\n const PRUint8 nsCSSScanner::IS_DIGIT = 0x01;\\n const PRUint8 nsCSSScanner::IS_HEX_DIGIT = 0x02;\\n@@ -90,10 +88,8 @@ nsCSSScanner::BuildLexTable()\\n   lt[CSS_ESCAPE] = START_IDENT;\\n   lt['-'] |= IS_IDENT;\\n   lt['_'] |= IS_IDENT | START_IDENT;\\n-  // XXX add in other whitespace chars\\n   lt[' '] |= IS_WHITESPACE;   // space\\n   lt['\\\\t'] |= IS_WHITESPACE;  // horizontal tab\\n-  lt['\\\\v'] |= IS_WHITESPACE;  // vertical tab\\n   lt['\\\\r'] |= IS_WHITESPACE;  // carriage return\\n   lt['\\\\n'] |= IS_WHITESPACE;  // line feed\\n   lt['\\\\f'] |= IS_WHITESPACE;  // form feed\\n@@ -602,53 +598,41 @@ PRBool nsCSSScanner::EatNewline(nsresult& aErrorCode)\\n   return eaten;\\n }\\n \\n-/* static */\\n-PRBool\\n-nsCSSScanner::CheckLexTable(PRInt32 aChar, PRUint8 aBit, PRUint8* aLexTable)\\n-{\\n-  NS_ASSERTION(!(aBit & (START_IDENT | IS_IDENT)),\\n-               \\\"can't use CheckLexTable with identifiers\\\");\\n-  return aChar >= 0 && aChar < 256 && (aLexTable[aChar] & aBit) != 0;\\n-}\\n-\\n PRBool nsCSSScanner::Next(nsresult& aErrorCode, nsCSSToken& aToken)\\n {\\n   PRInt32 ch = Read(aErrorCode);\\n   if (ch < 0) {\\n     return PR_FALSE;\\n   }\\n-  PRUint8* lexTable = gLexTable;\\n \\n   // IDENT\\n-  if (StartsIdent(ch, Peek(aErrorCode), lexTable))\\n+  if (StartsIdent(ch, Peek(aErrorCode)))\\n     return ParseIdent(aErrorCode, ch, aToken);\\n \\n-  // From this point on, 0 <= ch < 256.\\n-     \\n   // AT_KEYWORD\\n   if (ch == '@') {\\n     PRInt32 nextChar = Read(aErrorCode);\\n     PRInt32 followingChar = Peek(aErrorCode);\\n     Pushback(nextChar);\\n-    if (StartsIdent(nextChar, followingChar, lexTable))\\n+    if (StartsIdent(nextChar, followingChar))\\n       return ParseAtKeyword(aErrorCode, ch, aToken);\\n   }\\n \\n   // NUMBER or DIM\\n   if ((ch == '.') || (ch == '+') || (ch == '-')) {\\n     PRInt32 nextChar = Peek(aErrorCode);\\n-    if (CheckLexTable(nextChar, IS_DIGIT, lexTable)) {\\n+    if (IsDigit(nextChar)) {\\n       return ParseNumber(aErrorCode, ch, aToken);\\n     }\\n     else if (('.' == nextChar) && ('.' != ch)) {\\n       nextChar = Read(aErrorCode);\\n       PRInt32 followingChar = Peek(aErrorCode);\\n       Pushback(nextChar);\\n-      if (CheckLexTable(followingChar, IS_DIGIT, lexTable))\\n+      if (IsDigit(followingChar))\\n         return ParseNumber(aErrorCode, ch, aToken);\\n     }\\n   }\\n-  if ((lexTable[ch] & IS_DIGIT) != 0) {\\n+  if (IsDigit(ch)) {\\n     return ParseNumber(aErrorCode, ch, aToken);\\n   }\\n \\n@@ -663,7 +647,7 @@ PRBool nsCSSScanner::Next(nsresult& aErrorCode, nsCSSToken& aToken)\\n   }\\n \\n   // WS\\n-  if ((lexTable[ch] & IS_WHITESPACE) != 0) {\\n+  if (IsWhitespace(ch)) {\\n     aToken.mType = eCSSToken_WhiteSpace;\\n     aToken.mIdent.Assign(PRUnichar(ch));\\n     (void) EatWhiteSpace(aErrorCode);\\n@@ -746,7 +730,6 @@ PRBool nsCSSScanner::NextURL(nsresult& aErrorCode, nsCSSToken& aToken)\\n   if (ch < 0) {\\n     return PR_FALSE;\\n   }\\n-  PRUint8* lexTable = gLexTable;\\n \\n   // STRING\\n   if ((ch == '\\\"') || (ch == '\\\\'')) {\\n@@ -754,7 +737,7 @@ PRBool nsCSSScanner::NextURL(nsresult& aErrorCode, nsCSSToken& aToken)\\n   }\\n \\n   // WS\\n-  if (ch < 256 && (lexTable[ch] & IS_WHITESPACE) != 0) {\\n+  if (IsWhitespace(ch)) {\\n     aToken.mType = eCSSToken_WhiteSpace;\\n     aToken.mIdent.Assign(PRUnichar(ch));\\n     (void) EatWhiteSpace(aErrorCode);\\n@@ -807,7 +790,7 @@ PRBool nsCSSScanner::NextURL(nsresult& aErrorCode, nsCSSToken& aToken)\\n       } else if ((ch == '\\\"') || (ch == '\\\\'') || (ch == '(')) {\\n         // This is an invalid URL spec\\n         ok = PR_FALSE;\\n-      } else if ((256 > ch) && ((gLexTable[ch] & IS_WHITESPACE) != 0)) {\\n+      } else if (IsWhitespace(ch)) {\\n         // Whitespace is allowed at the end of the URL\\n         (void) EatWhiteSpace(aErrorCode);\\n         if (LookAhead(aErrorCode, ')')) {\\n@@ -841,13 +824,12 @@ PRBool nsCSSScanner::NextURL(nsresult& aErrorCode, nsCSSToken& aToken)\\n void\\n nsCSSScanner::ParseAndAppendEscape(nsresult& aErrorCode, nsString& aOutput)\\n {\\n-  PRUint8* lexTable = gLexTable;\\n   PRInt32 ch = Peek(aErrorCode);\\n   if (ch < 0) {\\n     aOutput.Append(CSS_ESCAPE);\\n     return;\\n   }\\n-  if ((ch <= 255) && ((lexTable[ch] & IS_HEX_DIGIT) != 0)) {\\n+  if (IsHexDigit(ch)) {\\n     PRInt32 rv = 0;\\n     int i;\\n     for (i = 0; i < 6; i++) { // up to six digits\\n@@ -856,11 +838,11 @@ nsCSSScanner::ParseAndAppendEscape(nsresult& aErrorCode, nsString& aOutput)\\n         // Whoops: error or premature eof\\n         break;\\n       }\\n-      if (ch >= 256 || (lexTable[ch] & (IS_HEX_DIGIT | IS_WHITESPACE)) == 0) {\\n+      if (!IsHexDigit(ch) && !IsWhitespace(ch)) {\\n         Pushback(ch);\\n         break;\\n-      } else if ((lexTable[ch] & IS_HEX_DIGIT) != 0) {\\n-        if ((lexTable[ch] & IS_DIGIT) != 0) {\\n+      } else if (IsHexDigit(ch)) {\\n+        if (IsDigit(ch)) {\\n           rv = rv * 16 + (ch - '0');\\n         } else {\\n           // Note: c&7 just keeps the low three bits which causes\\n@@ -869,15 +851,14 @@ nsCSSScanner::ParseAndAppendEscape(nsresult& aErrorCode, nsString& aOutput)\\n           rv = rv * 16 + ((ch & 0x7) + 9);\\n         }\\n       } else {\\n-        NS_ASSERTION((lexTable[ch] & IS_WHITESPACE) != 0, \\\"bad control flow\\\");\\n+        NS_ASSERTION(IsWhitespace(ch), \\\"bad control flow\\\");\\n         // single space ends escape\\n         break;\\n       }\\n     }\\n     if (6 == i) { // look for trailing whitespace and eat it\\n       ch = Peek(aErrorCode);\\n-      if ((0 <= ch) && (ch <= 255) && \\n-          ((lexTable[ch] & IS_WHITESPACE) != 0)) {\\n+      if (IsWhitespace(ch)) {\\n         ch = Read(aErrorCode);\\n       }\\n     }\\n@@ -921,7 +902,7 @@ PRBool nsCSSScanner::GatherIdent(nsresult& aErrorCode, PRInt32 aChar,\\n     if (aChar < 0) break;\\n     if (aChar == CSS_ESCAPE) {\\n       ParseAndAppendEscape(aErrorCode, aIdent);\\n-    } else if ((aChar > 255) || ((gLexTable[aChar] & IS_IDENT) != 0)) {\\n+    } else if (IsIdent(aChar)) {\\n       aIdent.Append(PRUnichar(aChar));\\n     } else {\\n       Pushback(aChar);\\n@@ -941,10 +922,10 @@ PRBool nsCSSScanner::ParseRef(nsresult& aErrorCode,\\n   if (ch < 0) {\\n     return PR_FALSE;\\n   }\\n-  if (ch > 255 || (gLexTable[ch] & IS_IDENT) || ch == CSS_ESCAPE) {\\n+  if (IsIdent(ch) || ch == CSS_ESCAPE) {\\n     // First char after the '#' is a valid ident char (or an escape),\\n     // so it makes sense to keep going\\n-    if (StartsIdent(ch, Peek(aErrorCode), gLexTable)) {\\n+    if (StartsIdent(ch, Peek(aErrorCode))) {\\n       aToken.mType = eCSSToken_ID;\\n     }\\n     return GatherIdent(aErrorCode, ch, aToken.mIdent);\\n@@ -994,14 +975,13 @@ PRBool nsCSSScanner::ParseNumber(nsresult& aErrorCode, PRInt32 c,\\n   }\\n \\n   // Gather up characters that make up the number\\n-  PRUint8* lexTable = gLexTable;\\n   for (;;) {\\n     c = Read(aErrorCode);\\n     if (c < 0) break;\\n     if (!gotDot && (c == '.') &&\\n-        CheckLexTable(Peek(aErrorCode), IS_DIGIT, lexTable)) {\\n+        IsDigit(Peek(aErrorCode))) {\\n       gotDot = PR_TRUE;\\n-    } else if ((c > 255) || ((lexTable[c] & IS_DIGIT) == 0)) {\\n+    } else if (!IsDigit(c)) {\\n       break;\\n     }\\n     ident.Append(PRUnichar(c));\\n@@ -1015,7 +995,7 @@ PRBool nsCSSScanner::ParseNumber(nsresult& aErrorCode, PRInt32 c,\\n   // Look at character that terminated the number\\n   aToken.mIntegerValid = PR_FALSE;\\n   if (c >= 0) {\\n-    if ((c <= 255) && ((lexTable[c] & START_IDENT) != 0)) {\\n+    if (StartsIdent(c, Peek(aErrorCode))) {\\n       ident.SetLength(0);\\n       if (!GatherIdent(aErrorCode, c, ident)) {\\n         return PR_FALSE;\\ndiff --git a/layout/style/nsCSSScanner.h b/layout/style/nsCSSScanner.h\\nindex 1c2643d..07cf9c4 100644\\n--- a/layout/style/nsCSSScanner.h\\n+++ b/layout/style/nsCSSScanner.h\\n@@ -179,22 +179,33 @@ class nsCSSScanner {\\n   PRBool NextURL(nsresult& aErrorCode, nsCSSToken& aTokenResult);\\n \\n   static inline PRBool\\n-  IsIdentStart(PRInt32 aChar, const PRUint8* aLexTable)\\n+  IsIdentStart(PRInt32 aChar)\\n   {\\n     return aChar >= 0 &&\\n-      (aChar >= 256 || (aLexTable[aChar] & START_IDENT) != 0);\\n+      (aChar >= 256 || (gLexTable[aChar] & START_IDENT) != 0);\\n   }\\n \\n   static inline PRBool\\n-  StartsIdent(PRInt32 aFirstChar, PRInt32 aSecondChar,\\n-              const PRUint8* aLexTable)\\n+  StartsIdent(PRInt32 aFirstChar, PRInt32 aSecondChar)\\n   {\\n-    return IsIdentStart(aFirstChar, aLexTable) ||\\n-      (aFirstChar == '-' && IsIdentStart(aSecondChar, aLexTable));\\n+    return IsIdentStart(aFirstChar) ||\\n+      (aFirstChar == '-' && IsIdentStart(aSecondChar));\\n   }\\n \\n-  static inline const PRUint8* GetLexTable() {\\n-    return gLexTable;\\n+  static PRBool IsWhitespace(PRInt32 ch) {\\n+    return PRUint32(ch) < 256 && (gLexTable[ch] & IS_WHITESPACE) != 0;\\n+  }\\n+\\n+  static PRBool IsDigit(PRInt32 ch) {\\n+    return PRUint32(ch) < 256 && (gLexTable[ch] & IS_DIGIT) != 0;\\n+  }\\n+\\n+  static PRBool IsHexDigit(PRInt32 ch) {\\n+    return PRUint32(ch) < 256 && (gLexTable[ch] & IS_HEX_DIGIT) != 0;\\n+  }\\n+\\n+  static PRBool IsIdent(PRInt32 ch) {\\n+    return ch >= 0 && (ch >= 256 || (gLexTable[ch] & IS_IDENT) != 0);\\n   }\\n   \\n protected:\\n@@ -250,7 +261,6 @@ protected:\\n \\n   static PRUint8 gLexTable[256];\\n   static void BuildLexTable();\\n-  static PRBool CheckLexTable(PRInt32 aChar, PRUint8 aBit, PRUint8* aLexTable);\\n };\\n \\n #endif /* nsCSSScanner_h___ */\\n\""}