{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basd18facd\""},"diff":"\"d18facd Block scripts in subframes if the parent has script blocked in the scriptloader.  Fixes bug 383331, r+sr+a=sicking\\ndiff --git a/content/base/src/nsScriptLoader.cpp b/content/base/src/nsScriptLoader.cpp\\nindex e7ec96c..1bb6891 100644\\n--- a/content/base/src/nsScriptLoader.cpp\\n+++ b/content/base/src/nsScriptLoader.cpp\\n@@ -171,6 +171,12 @@ nsScriptLoader::~nsScriptLoader()\\n   for (PRInt32 i = 0; i < mPendingRequests.Count(); i++) {\\n     mPendingRequests[i]->FireScriptAvailable(NS_ERROR_ABORT);\\n   }\\n+\\n+  // Unblock the kids, in case any of them moved to a different document\\n+  // subtree in the meantime and therefore aren't actually going away.\\n+  for (PRUint32 j = 0; j < mPendingChildLoaders.Length(); ++j) {\\n+    mPendingChildLoaders[j]->RemoveExecuteBlocker();\\n+  }  \\n }\\n \\n NS_IMPL_ISUPPORTS1(nsScriptLoader, nsIStreamLoaderObserver)\\n@@ -636,7 +642,7 @@ nsScriptLoader::EvaluateScript(nsScriptLoadRequest* aRequest,\\n void\\n nsScriptLoader::ProcessPendingRequestsAsync()\\n {\\n-  if (mPendingRequests.Count()) {\\n+  if (mPendingRequests.Count() || !mPendingChildLoaders.IsEmpty()) {\\n     nsCOMPtr<nsIRunnable> ev = new nsRunnableMethod<nsScriptLoader>(this,\\n       &nsScriptLoader::ProcessPendingRequests);\\n \\n@@ -653,6 +659,33 @@ nsScriptLoader::ProcessPendingRequests()\\n     mPendingRequests.RemoveObjectAt(0);\\n     ProcessRequest(request);\\n   }\\n+\\n+  while (ReadyToExecuteScripts() && !mPendingChildLoaders.IsEmpty()) {\\n+    nsRefPtr<nsScriptLoader> child = mPendingChildLoaders[0];\\n+    mPendingChildLoaders.RemoveElementAt(0);\\n+    child->RemoveExecuteBlocker();\\n+  }\\n+}\\n+\\n+PRBool\\n+nsScriptLoader::ReadyToExecuteScripts()\\n+{\\n+  // Make sure the SelfReadyToExecuteScripts check is first, so that\\n+  // we don't block twice on an ancestor.\\n+  if (!SelfReadyToExecuteScripts()) {\\n+    return PR_FALSE;\\n+  }\\n+  \\n+  for (nsIDocument* doc = mDocument; doc; doc = doc->GetParentDocument()) {\\n+    nsScriptLoader* ancestor = doc->ScriptLoader();\\n+    if (!ancestor->SelfReadyToExecuteScripts() &&\\n+        ancestor->AddPendingChildLoader(this)) {\\n+      AddExecuteBlocker();\\n+      return PR_FALSE;\\n+    }\\n+  }\\n+\\n+  return PR_TRUE;\\n }\\n \\n \\ndiff --git a/content/base/src/nsScriptLoader.h b/content/base/src/nsScriptLoader.h\\nindex 5f3efc7..58d8556 100644\\n--- a/content/base/src/nsScriptLoader.h\\n+++ b/content/base/src/nsScriptLoader.h\\n@@ -47,6 +47,8 @@\\n #include \\\"nsIScriptElement.h\\\"\\n #include \\\"nsIURI.h\\\"\\n #include \\\"nsCOMArray.h\\\"\\n+#include \\\"nsTArray.h\\\"\\n+#include \\\"nsAutoPtr.h\\\"\\n #include \\\"nsIDocument.h\\\"\\n #include \\\"nsIStreamLoader.h\\\"\\n \\n@@ -202,11 +204,26 @@ protected:\\n    */\\n   virtual void ProcessPendingRequestsAsync();\\n \\n-  PRBool ReadyToExecuteScripts()\\n+  /**\\n+   * If true, the loader is ready to execute scripts, and so are all its\\n+   * ancestors.  If the loader itself is ready but some ancestor is not, this\\n+   * function will add an execute blocker and ask the ancestor to remove it\\n+   * once it becomes ready.\\n+   */\\n+  PRBool ReadyToExecuteScripts();\\n+\\n+  /**\\n+   * Return whether just this loader is ready to execute scripts.\\n+   */\\n+  PRBool SelfReadyToExecuteScripts()\\n   {\\n     return mEnabled && !mBlockerCount;\\n   }\\n \\n+  PRBool AddPendingChildLoader(nsScriptLoader* aChild) {\\n+    return mPendingChildLoaders.AppendElement(aChild) != nsnull;\\n+  }\\n+  \\n   nsresult ProcessRequest(nsScriptLoadRequest* aRequest);\\n   void FireScriptAvailable(nsresult aResult,\\n                            nsScriptLoadRequest* aRequest);\\n@@ -225,6 +242,8 @@ protected:\\n   nsCOMArray<nsIScriptLoaderObserver> mObservers;\\n   nsCOMArray<nsScriptLoadRequest> mPendingRequests;\\n   nsCOMPtr<nsIScriptElement> mCurrentScript;\\n+  // XXXbz do we want to cycle-collect these or something?  Not sure.\\n+  nsTArray< nsRefPtr<nsScriptLoader> > mPendingChildLoaders;\\n   PRUint32 mBlockerCount;\\n   PRPackedBool mEnabled;\\n   PRPackedBool mHadPendingScripts;\\n\""}