{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas7177a74\""},"diff":"\"7177a74 Bug 345260 - handle dynamic changes to tab title, tab icon and busy (loading) state in all tabs menu. r=sspitzer/mconnor.\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 1cc0cda..75b1f80 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -2733,33 +2733,62 @@\\n   -->\\n   <binding id=\\\"tabbrowser-alltabs-popup\\\"\\n            extends=\\\"chrome://global/content/bindings/popup.xml#popup\\\">\\n-    <implementation>\\n-      <field name=\\\"_allTabsMenuItemCommandHandler\\\" readonly=\\\"true\\\">\\n-      <![CDATA[({\\n-        mOuter: this,\\n-        handleEvent: function handleEvent(aEvent) {\\n-          if (!aEvent.isTrusted) {\\n-            // Don't let untrusted events mess with tabs.\\n-            return;\\n-          }\\n-\\n+    <implementation implements=\\\"nsIDOMEventListener\\\">\\n+      <method name=\\\"_menuItemOnCommand\\\">\\n+        <parameter name=\\\"aEvent\\\"/>\\n+        <body><![CDATA[\\n           // note, the tab may not be valid (if after we built the popup\\n           // the tab was closed.  but selectedItem setter handles that\\n           // gracefully.\\n-          var tabcontainer = document.getBindingParent(this.mOuter);\\n+          var tabcontainer = document.getBindingParent(this);\\n           tabcontainer.selectedItem = aEvent.target.tab;\\n-        }\\n-      })]]>\\n-      </field>\\n+        ]]></body>\\n+      </method>\\n+\\n+      <method name=\\\"_tabOnAttrModified\\\">\\n+        <parameter name=\\\"aEvent\\\"/>\\n+        <body><![CDATA[\\n+          var menuItem = aEvent.target.mCorrespondingMenuitem;\\n+          if (menuItem) {\\n+            var attrName = aEvent.attrName;\\n+            switch (attrName) {\\n+              case \\\"label\\\":\\n+              case \\\"crop\\\":\\n+              case \\\"busy\\\":\\n+              case \\\"image\\\":\\n+                if (aEvent.attrChange == aEvent.REMOVAL)\\n+                  menuItem.removeAttribute(attrName);\\n+                else\\n+                  menuItem.setAttribute(attrName, aEvent.newValue);\\n+            }\\n+          }\\n+        ]]></body>\\n+      </method>\\n+\\n+      <method name=\\\"handleEvent\\\">\\n+        <parameter name=\\\"aEvent\\\"/>\\n+        <body><![CDATA[\\n+          if (!aEvent.isTrusted)\\n+            return;\\n+\\n+          switch (aEvent.type) {\\n+            case \\\"command\\\":\\n+              this._menuItemOnCommand(aEvent);\\n+              break;\\n+            case \\\"DOMAttrModified\\\":\\n+              this._tabOnAttrModified(aEvent);\\n+          }\\n+        ]]></body>\\n+      </method>\\n \\n       <method name=\\\"_onHidingAllTabsPopup\\\">\\n         <body><![CDATA[\\n           // clear out the menu popup and remove the listeners\\n           while (this.hasChildNodes()) {\\n             var menuItem = this.lastChild;\\n-            menuItem.removeEventListener(\\\"command\\\", \\n-                                         this._allTabsMenuItemCommandHandler, \\n-                                         false);\\n+            menuItem.removeEventListener(\\\"command\\\", this, false);\\n+            menuItem.tab.removeEventListener(\\\"DOMAttrModified\\\", this, false);\\n+            menuItem.tab.mCorrespondingMenuitem = null;\\n             this.removeChild(menuItem);\\n           }\\n         ]]></body>\\n@@ -2781,21 +2810,25 @@\\n               menuItem.setAttribute(\\\"selected\\\", \\\"true\\\");\\n             menuItem.setAttribute(\\\"class\\\", \\\"menuitem-iconic alltabs-item\\\");\\n \\n-            // XXX todo\\n-            // what if uri, image/favicon, title change \\n-            // while this popup is open?\\n-            // mano warns:  \\\"be careful of leaks when addressing this.\\\"\\n             menuItem.setAttribute(\\\"label\\\", curTab.label);\\n+            menuItem.setAttribute(\\\"crop\\\", curTab.getAttribute(\\\"crop\\\"));\\n             menuItem.setAttribute(\\\"image\\\", curTab.getAttribute(\\\"image\\\"));\\n-            var URI = curTab.linkedBrowser.currentURI.spec;\\n+            if (curTab.hasAttribute(\\\"busy\\\"))\\n+              menuItem.setAttribute(\\\"busy\\\", curTab.getAttribute(\\\"busy\\\"));\\n+\\n             // XXX todo\\n             // statustext not working yet, since I don't have a menubar\\n             // reuse the menubar statustext logic\\n+            var URI = curTab.linkedBrowser.currentURI.spec;\\n             menuItem.setAttribute(\\\"statustext\\\", URI);\\n+\\n+            // Keep some attributes of the menuitem in sync with its\\n+            // corresponding tab (e.g. the tab label)\\n+            curTab.mCorrespondingMenuitem = menuItem;\\n+            curTab.addEventListener(\\\"DOMAttrModified\\\", this, false);\\n+\\n             menuItem.tab = curTab;\\n-            menuItem.addEventListener(\\\"command\\\", \\n-                                      this._allTabsMenuItemCommandHandler, \\n-                                      false);\\n+            menuItem.addEventListener(\\\"command\\\", this, false);\\n             this.appendChild(menuItem);\\n           }\\n         ]]></body>\\n@@ -2872,6 +2905,7 @@\\n \\n     <implementation>\\n       <field name=\\\"mOverCloseButton\\\">false</field>\\n+      <field name=\\\"mCorrespondingMenuitem\\\">null</field>\\n     </implementation>\\n \\n     <handlers>\\n\""}