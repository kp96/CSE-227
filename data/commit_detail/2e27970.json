{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas2e27970\""},"diff":"\"2e27970 Tests for bug 381412\\ndiff --git a/intl/uconv/tests/unit/test_bug381412.Big5-HKSCS.js b/intl/uconv/tests/unit/test_bug381412.Big5-HKSCS.js\\nnew file mode 100644\\nindex 0000000..14220d8\\n--- /dev/null\\n+++ b/intl/uconv/tests/unit/test_bug381412.Big5-HKSCS.js\\n@@ -0,0 +1,60 @@\\n+const charset = \\\"Big5-HKSCS\\\";\\r\\n+\\r\\n+function dumpStrings(inString, outString) {\\r\\n+    var dispIn = \\\"\\\";\\r\\n+    var dispOut = \\\"\\\";\\r\\n+    var i;\\r\\n+    for (i = 0; i < inString.length; ++i) {\\r\\n+\\tdispIn += \\\" x\\\" + inString.charCodeAt(i).toString(16);\\r\\n+    }\\r\\n+    if (outString.length == 0) {\\r\\n+\\tdispOut = \\\"<empty>\\\";\\r\\n+    } else {\\r\\n+\\tfor (i = 0; i < outString.length; ++i) {\\r\\n+\\t    dispOut += \\\" x\\\" + outString.charCodeAt(i).toString(16);\\r\\n+\\t}\\r\\n+    }\\r\\n+    dump(\\\"\\\\\\\"\\\" + dispIn + \\\"\\\\\\\" ==> \\\\\\\"\\\" + dispOut + \\\"\\\\\\\"\\\\n\\\");\\r\\n+}\\r\\n+\\r\\n+function error(inString, outString, msg){\\r\\n+    dumpStrings(inString, outString);\\r\\n+    do_throw(\\\"security risk: \\\" + msg);\\r\\n+}\\r\\n+\\r\\n+function run_test() {\\r\\n+    var ScriptableUnicodeConverter =\\r\\n+\\tComponents.Constructor(\\\"@mozilla.org/intl/scriptableunicodeconverter\\\",\\r\\n+\\t\\t\\t       \\\"nsIScriptableUnicodeConverter\\\");\\r\\n+\\r\\n+    var converter = new ScriptableUnicodeConverter();\\r\\n+    converter.charset = charset;\\r\\n+\\r\\n+    var leadByte, trailByte;\\r\\n+    var inString;\\r\\n+    for (leadByte = 1; leadByte < 0x100; ++leadByte) {\\r\\n+\\tfor (trailByte = 1; trailByte < 0x100; ++trailByte) {\\r\\n+\\t    inString = String.fromCharCode(leadByte, trailByte, 65);\\r\\n+\\t    var outString = converter.ConvertToUnicode(inString) + converter.Finish();\\r\\n+\\t    switch (outString.length) {\\r\\n+\\t        case 1:\\r\\n+\\t\\t    error(inString, outString, \\\"2 byte sequence eaten\\\");\\r\\n+\\t\\t    break;\\r\\n+\\t        case 2:\\r\\n+\\t\\t    if (outString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString, \\\"2 byte sequence converted to 1 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t        case 3:\\r\\n+\\t\\t    if (outString != inString &&\\r\\n+\\t\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString,\\r\\n+\\t\\t\\t      \\\"2 byte sequence converted to 2 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t    }\\r\\n+\\t}\\r\\n+    }\\r\\n+}\\r\\ndiff --git a/intl/uconv/tests/unit/test_bug381412.Big5.js b/intl/uconv/tests/unit/test_bug381412.Big5.js\\nnew file mode 100644\\nindex 0000000..d42976d\\n--- /dev/null\\n+++ b/intl/uconv/tests/unit/test_bug381412.Big5.js\\n@@ -0,0 +1,60 @@\\n+const charset = \\\"Big5\\\";\\r\\n+\\r\\n+function dumpStrings(inString, outString) {\\r\\n+    var dispIn = \\\"\\\";\\r\\n+    var dispOut = \\\"\\\";\\r\\n+    var i;\\r\\n+    for (i = 0; i < inString.length; ++i) {\\r\\n+\\tdispIn += \\\" x\\\" + inString.charCodeAt(i).toString(16);\\r\\n+    }\\r\\n+    if (outString.length == 0) {\\r\\n+\\tdispOut = \\\"<empty>\\\";\\r\\n+    } else {\\r\\n+\\tfor (i = 0; i < outString.length; ++i) {\\r\\n+\\t    dispOut += \\\" x\\\" + outString.charCodeAt(i).toString(16);\\r\\n+\\t}\\r\\n+    }\\r\\n+    dump(\\\"\\\\\\\"\\\" + dispIn + \\\"\\\\\\\" ==> \\\\\\\"\\\" + dispOut + \\\"\\\\\\\"\\\\n\\\");\\r\\n+}\\r\\n+\\r\\n+function error(inString, outString, msg){\\r\\n+    dumpStrings(inString, outString);\\r\\n+    do_throw(\\\"security risk: \\\" + msg);\\r\\n+}\\r\\n+\\r\\n+function run_test() {\\r\\n+    var ScriptableUnicodeConverter =\\r\\n+\\tComponents.Constructor(\\\"@mozilla.org/intl/scriptableunicodeconverter\\\",\\r\\n+\\t\\t\\t       \\\"nsIScriptableUnicodeConverter\\\");\\r\\n+\\r\\n+    var converter = new ScriptableUnicodeConverter();\\r\\n+    converter.charset = charset;\\r\\n+\\r\\n+    var leadByte, trailByte;\\r\\n+    var inString;\\r\\n+    for (leadByte = 1; leadByte < 0x100; ++leadByte) {\\r\\n+\\tfor (trailByte = 1; trailByte < 0x100; ++trailByte) {\\r\\n+\\t    inString = String.fromCharCode(leadByte, trailByte, 65);\\r\\n+\\t    var outString = converter.ConvertToUnicode(inString) + converter.Finish();\\r\\n+\\t    switch (outString.length) {\\r\\n+\\t        case 1:\\r\\n+\\t\\t    error(inString, outString, \\\"2 byte sequence eaten\\\");\\r\\n+\\t\\t    break;\\r\\n+\\t        case 2:\\r\\n+\\t\\t    if (outString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString, \\\"2 byte sequence converted to 1 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t        case 3:\\r\\n+\\t\\t    if (outString != inString &&\\r\\n+\\t\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString,\\r\\n+\\t\\t\\t      \\\"2 byte sequence converted to 2 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t    }\\r\\n+\\t}\\r\\n+    }\\r\\n+}\\r\\ndiff --git a/intl/uconv/tests/unit/test_bug381412.cp936.js b/intl/uconv/tests/unit/test_bug381412.cp936.js\\nnew file mode 100644\\nindex 0000000..903fed8\\n--- /dev/null\\n+++ b/intl/uconv/tests/unit/test_bug381412.cp936.js\\n@@ -0,0 +1,56 @@\\n+const charset = \\\"windows-936\\\";\\r\\n+\\r\\n+function error(inString, outString, msg){\\r\\n+    var dispIn = \\\"\\\";\\r\\n+    var dispOut = \\\"\\\";\\r\\n+    var i;\\r\\n+    for (i = 0; i < inString.length; ++i) {\\r\\n+\\tdispIn += \\\" x\\\" + inString.charCodeAt(i).toString(16);\\r\\n+    }\\r\\n+    if (outString.length == 0) {\\r\\n+\\tdispOut = \\\"<empty>\\\";\\r\\n+    } else {\\r\\n+\\tfor (i = 0; i < outString.length; ++i) {\\r\\n+\\t    dispOut += \\\" x\\\" + outString.charCodeAt(i).toString(16);\\r\\n+\\t}\\r\\n+    }\\r\\n+    dump(\\\"\\\\\\\"\\\" + dispIn + \\\"\\\\\\\" ==> \\\\\\\"\\\" + dispOut + \\\"\\\\\\\"\\\\n\\\");\\r\\n+    do_throw(\\\"security risk: \\\" + msg);\\r\\n+}\\r\\n+\\r\\n+function run_test() {\\r\\n+    var ScriptableUnicodeConverter =\\r\\n+\\tComponents.Constructor(\\\"@mozilla.org/intl/scriptableunicodeconverter\\\",\\r\\n+\\t\\t\\t       \\\"nsIScriptableUnicodeConverter\\\");\\r\\n+\\r\\n+    var converter = new ScriptableUnicodeConverter();\\r\\n+    converter.charset = charset;\\r\\n+\\r\\n+    var leadByte, trailByte;\\r\\n+    var inString;\\r\\n+    for (leadByte = 1; leadByte < 0x100; ++leadByte) {\\r\\n+\\tfor (trailByte = 1; trailByte < 0x100; ++trailByte) {\\r\\n+\\t    inString = String.fromCharCode(leadByte, trailByte, 65);\\r\\n+\\t    var outString = converter.ConvertToUnicode(inString) + converter.Finish();\\r\\n+\\t    switch (outString.length) {\\r\\n+\\t        case 1:\\r\\n+\\t\\t    error(inString, outString, \\\"2 byte sequence eaten\\\");\\r\\n+\\t\\t    break;\\r\\n+\\t        case 2:\\r\\n+\\t\\t    if (outString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString, \\\"2 byte sequence converted to 1 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t        case 3:\\r\\n+\\t\\t    if (outString != inString &&\\r\\n+\\t\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString,\\r\\n+\\t\\t\\t      \\\"2 byte sequence converted to 2 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t    }\\r\\n+\\t}\\r\\n+    }\\r\\n+}\\r\\ndiff --git a/intl/uconv/tests/unit/test_bug381412.euc-kr.js b/intl/uconv/tests/unit/test_bug381412.euc-kr.js\\nnew file mode 100644\\nindex 0000000..fa69f87\\n--- /dev/null\\n+++ b/intl/uconv/tests/unit/test_bug381412.euc-kr.js\\n@@ -0,0 +1,60 @@\\n+const charset = \\\"EUC-KR\\\";\\r\\n+\\r\\n+function dumpStrings(inString, outString) {\\r\\n+    var dispIn = \\\"\\\";\\r\\n+    var dispOut = \\\"\\\";\\r\\n+    var i;\\r\\n+    for (i = 0; i < inString.length; ++i) {\\r\\n+\\tdispIn += \\\" x\\\" + inString.charCodeAt(i).toString(16);\\r\\n+    }\\r\\n+    if (outString.length == 0) {\\r\\n+\\tdispOut = \\\"<empty>\\\";\\r\\n+    } else {\\r\\n+\\tfor (i = 0; i < outString.length; ++i) {\\r\\n+\\t    dispOut += \\\" x\\\" + outString.charCodeAt(i).toString(16);\\r\\n+\\t}\\r\\n+    }\\r\\n+    dump(\\\"\\\\\\\"\\\" + dispIn + \\\"\\\\\\\" ==> \\\\\\\"\\\" + dispOut + \\\"\\\\\\\"\\\\n\\\");\\r\\n+}\\r\\n+\\r\\n+function error(inString, outString, msg){\\r\\n+    dumpStrings(inString, outString);\\r\\n+    do_throw(\\\"security risk: \\\" + msg);\\r\\n+}\\r\\n+\\r\\n+function run_test() {\\r\\n+    var ScriptableUnicodeConverter =\\r\\n+\\tComponents.Constructor(\\\"@mozilla.org/intl/scriptableunicodeconverter\\\",\\r\\n+\\t\\t\\t       \\\"nsIScriptableUnicodeConverter\\\");\\r\\n+\\r\\n+    var converter = new ScriptableUnicodeConverter();\\r\\n+    converter.charset = charset;\\r\\n+\\r\\n+    var leadByte, trailByte;\\r\\n+    var inString;\\r\\n+    for (leadByte = 1; leadByte < 0x100; ++leadByte) {\\r\\n+\\tfor (trailByte = 1; trailByte < 0x100; ++trailByte) {\\r\\n+\\t    inString = String.fromCharCode(leadByte, trailByte, 65);\\r\\n+\\t    var outString = converter.ConvertToUnicode(inString) + converter.Finish();\\r\\n+\\t    switch (outString.length) {\\r\\n+\\t        case 1:\\r\\n+\\t\\t    error(inString, outString, \\\"2 byte sequence eaten\\\");\\r\\n+\\t\\t    break;\\r\\n+\\t        case 2:\\r\\n+\\t\\t    if (outString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString, \\\"2 byte sequence converted to 1 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t        case 3:\\r\\n+\\t\\t    if (outString != inString &&\\r\\n+\\t\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString,\\r\\n+\\t\\t\\t      \\\"2 byte sequence converted to 2 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t    }\\r\\n+\\t}\\r\\n+    }\\r\\n+}\\r\\ndiff --git a/intl/uconv/tests/unit/test_bug381412.euc_jp.js b/intl/uconv/tests/unit/test_bug381412.euc_jp.js\\nnew file mode 100644\\nindex 0000000..344a096\\n--- /dev/null\\n+++ b/intl/uconv/tests/unit/test_bug381412.euc_jp.js\\n@@ -0,0 +1,89 @@\\n+const charset = \\\"EUC-JP\\\";\\r\\n+const ScriptableUnicodeConverter =\\r\\n+\\tComponents.Constructor(\\\"@mozilla.org/intl/scriptableunicodeconverter\\\",\\r\\n+\\t\\t\\t       \\\"nsIScriptableUnicodeConverter\\\");\\r\\n+var gConverter;\\r\\n+\\r\\n+function error(inString, outString, msg){\\r\\n+    var dispIn = \\\"\\\";\\r\\n+    var dispOut = \\\"\\\";\\r\\n+    var i;\\r\\n+    for (i = 0; i < inString.length; ++i) {\\r\\n+\\tdispIn += \\\" x\\\" + inString.charCodeAt(i).toString(16);\\r\\n+    }\\r\\n+    if (outString.length == 0) {\\r\\n+\\tdispOut = \\\"<empty>\\\";\\r\\n+    } else {\\r\\n+\\tfor (i = 0; i < outString.length; ++i) {\\r\\n+\\t    dispOut += \\\" x\\\" + outString.charCodeAt(i).toString(16);\\r\\n+\\t}\\r\\n+    }\\r\\n+    dump(\\\"\\\\\\\"\\\" + dispIn + \\\"\\\\\\\" ==> \\\\\\\"\\\" + dispOut + \\\"\\\\\\\"\\\\n\\\");\\r\\n+    do_throw(\\\"security risk: \\\" + msg);\\r\\n+}\\r\\n+\\r\\n+function test(inString) {\\r\\n+    var outString = gConverter.ConvertToUnicode(inString) +\\r\\n+\\t            gConverter.Finish();\\r\\n+\\r\\n+    switch (outString.length) {\\r\\n+        case 0:\\r\\n+        case 1:\\r\\n+        case 2:\\r\\n+\\t    error(inString, outString, \\\"Unexpected error\\\");\\r\\n+\\t    break;\\r\\n+        case 3:\\r\\n+\\t    error(inString, outString, \\\"3 byte sequence eaten\\\");\\r\\n+\\t    break;\\r\\n+        case 4:\\r\\n+\\t    if (outString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(1) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(2) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(3) < 0x80) {\\r\\n+\\t\\terror(inString, outString,\\r\\n+\\t\\t      \\\"3 byte sequence converted to 1 ASCII\\\");\\r\\n+\\t    }\\r\\n+\\t    break;\\r\\n+        case 5:\\r\\n+\\t    if (outString != inString &&\\r\\n+\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(1) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(2) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(3) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(4) < 0x80) {\\r\\n+\\t\\terror(inString, outString,\\r\\n+\\t\\t      \\\"3 byte sequence converted to 2 ASCII\\\");\\r\\n+\\t    }\\r\\n+\\t    break;\\r\\n+        case 6:\\r\\n+\\t    if (outString != inString &&\\r\\n+\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(1) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(2) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(3) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(4) < 0x80 &&\\r\\n+\\t\\toutString.charCodeAt(5) < 0x80) {\\r\\n+\\t\\terror(inString, outString,\\r\\n+\\t\\t      \\\"3 byte sequence converted to 3 ASCII\\\");\\r\\n+\\t    }\\r\\n+\\t    break;\\r\\n+    }\\r\\n+}\\r\\n+\\r\\n+function run_test() {\\r\\n+    gConverter = new ScriptableUnicodeConverter();\\r\\n+    gConverter.charset = charset;\\r\\n+\\r\\n+    var byte1, byte2, byte3;\\r\\n+    for (byte1 = 1; byte1 < 0x100; ++byte1) {\\r\\n+\\tfor (byte2 = 1; byte2 < 0x100; ++byte2) {\\r\\n+\\t    if (byte1 == 0x8f) {\\r\\n+\\t\\tfor (byte3 = 1; byte3 < 0x100; ++byte3) {\\r\\n+\\t\\t    test(String.fromCharCode(byte1, byte2, byte3) + \\\"foo\\\");\\r\\n+\\t\\t}\\r\\n+\\t    } else {\\r\\n+\\t\\ttest(String.fromCharCode(byte1, byte2) + \\\" foo\\\");\\r\\n+\\t    }\\r\\n+\\t}\\r\\n+    }\\r\\n+}\\r\\ndiff --git a/intl/uconv/tests/unit/test_bug381412.gb2312.js b/intl/uconv/tests/unit/test_bug381412.gb2312.js\\nnew file mode 100644\\nindex 0000000..d342bf0\\n--- /dev/null\\n+++ b/intl/uconv/tests/unit/test_bug381412.gb2312.js\\n@@ -0,0 +1,56 @@\\n+const charset = \\\"GB2312\\\";\\r\\n+\\r\\n+function error(inString, outString, msg){\\r\\n+    var dispIn = \\\"\\\";\\r\\n+    var dispOut = \\\"\\\";\\r\\n+    var i;\\r\\n+    for (i = 0; i < inString.length; ++i) {\\r\\n+\\tdispIn += \\\" x\\\" + inString.charCodeAt(i).toString(16);\\r\\n+    }\\r\\n+    if (outString.length == 0) {\\r\\n+\\tdispOut = \\\"<empty>\\\";\\r\\n+    } else {\\r\\n+\\tfor (i = 0; i < outString.length; ++i) {\\r\\n+\\t    dispOut += \\\" x\\\" + outString.charCodeAt(i).toString(16);\\r\\n+\\t}\\r\\n+    }\\r\\n+    dump(\\\"\\\\\\\"\\\" + dispIn + \\\"\\\\\\\" ==> \\\\\\\"\\\" + dispOut + \\\"\\\\\\\"\\\\n\\\");\\r\\n+    do_throw(\\\"security risk: \\\" + msg);\\r\\n+}\\r\\n+\\r\\n+function run_test() {\\r\\n+    var ScriptableUnicodeConverter =\\r\\n+\\tComponents.Constructor(\\\"@mozilla.org/intl/scriptableunicodeconverter\\\",\\r\\n+\\t\\t\\t       \\\"nsIScriptableUnicodeConverter\\\");\\r\\n+\\r\\n+    var converter = new ScriptableUnicodeConverter();\\r\\n+    converter.charset = charset;\\r\\n+\\r\\n+    var leadByte, trailByte;\\r\\n+    var inString;\\r\\n+    for (leadByte = 1; leadByte < 0x100; ++leadByte) {\\r\\n+\\tfor (trailByte = 1; trailByte < 0x100; ++trailByte) {\\r\\n+\\t    inString = String.fromCharCode(leadByte, trailByte, 65);\\r\\n+\\t    var outString = converter.ConvertToUnicode(inString) + converter.Finish();\\r\\n+\\t    switch (outString.length) {\\r\\n+\\t        case 1:\\r\\n+\\t\\t    error(inString, outString, \\\"2 byte sequence eaten\\\");\\r\\n+\\t\\t    break;\\r\\n+\\t        case 2:\\r\\n+\\t\\t    if (outString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString, \\\"2 byte sequence converted to 1 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t        case 3:\\r\\n+\\t\\t    if (outString != inString &&\\r\\n+\\t\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString,\\r\\n+\\t\\t\\t      \\\"2 byte sequence converted to 2 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t    }\\r\\n+\\t}\\r\\n+    }\\r\\n+}\\r\\ndiff --git a/intl/uconv/tests/unit/test_bug381412.hk.gb2312.js b/intl/uconv/tests/unit/test_bug381412.hk.gb2312.js\\nnew file mode 100644\\nindex 0000000..27e58fe\\n--- /dev/null\\n+++ b/intl/uconv/tests/unit/test_bug381412.hk.gb2312.js\\n@@ -0,0 +1,73 @@\\n+const charset = \\\"hz-gb-2312\\\";\\r\\n+\\r\\n+function dumpStrings(inString, outString) {\\r\\n+    var dispIn = \\\"\\\";\\r\\n+    var dispOut = \\\"\\\";\\r\\n+    var i;\\r\\n+    for (i = 0; i < inString.length; ++i) {\\r\\n+\\tdispIn += \\\" x\\\" + inString.charCodeAt(i).toString(16);\\r\\n+    }\\r\\n+    if (outString.length == 0) {\\r\\n+\\tdispOut = \\\"<empty>\\\";\\r\\n+    } else {\\r\\n+\\tfor (i = 0; i < outString.length; ++i) {\\r\\n+\\t    dispOut += \\\" x\\\" + outString.charCodeAt(i).toString(16);\\r\\n+\\t}\\r\\n+    }\\r\\n+    dump(\\\"\\\\\\\"\\\" + dispIn + \\\"\\\\\\\" ==> \\\\\\\"\\\" + dispOut + \\\"\\\\\\\"\\\\n\\\");\\r\\n+}\\r\\n+\\r\\n+function error(inString, outString, msg){\\r\\n+    dumpStrings(inString, outString);\\r\\n+    do_throw(\\\"security risk: \\\" + msg);\\r\\n+}\\r\\n+\\r\\n+function run_test() {\\r\\n+    var ScriptableUnicodeConverter =\\r\\n+\\tComponents.Constructor(\\\"@mozilla.org/intl/scriptableunicodeconverter\\\",\\r\\n+\\t\\t\\t       \\\"nsIScriptableUnicodeConverter\\\");\\r\\n+\\r\\n+    var converter = new ScriptableUnicodeConverter();\\r\\n+    converter.charset = charset;\\r\\n+\\r\\n+    var leadByte, trailByte;\\r\\n+    var inString;\\r\\n+    for (leadByte = 1; leadByte < 0x100; ++leadByte) {\\r\\n+\\tfor (trailByte = 1; trailByte < 0x100; ++trailByte) {\\r\\n+\\t    if (leadByte == 0x7e) {\\r\\n+\\t\\tif (trailByte == 0x7b ||\\r\\n+\\t\\t    trailByte == 0xa  ||\\r\\n+\\t\\t    trailByte == 0x7e) {\\r\\n+\\t\\t    // ignore escape sequences:\\r\\n+\\t\\t    //  ~{ (sets HZ-GB mode)\\r\\n+\\t\\t    //  ~\\\\n ( ==> \\\\n)\\r\\n+\\t\\t    //  ~~ ( ==> ~)\\r\\n+\\t\\t    continue;\\r\\n+\\t\\t}\\r\\n+\\t    }\\r\\n+\\t    inString = String.fromCharCode(leadByte, trailByte, 65);\\r\\n+\\t    var outString = converter.ConvertToUnicode(inString) +\\r\\n+\\t\\t            converter.Finish();\\r\\n+\\t    switch (outString.length) {\\r\\n+                case 1:\\r\\n+\\t\\t    error(inString, outString, \\\"2 byte sequence eaten\\\");\\r\\n+\\t\\t    break;\\r\\n+                case 2:\\r\\n+\\t\\t    if (outString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString,\\r\\n+\\t\\t\\t      \\\"2 byte sequence converted to 1 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+                case 3:\\r\\n+\\t\\t    if (outString != inString &&\\r\\n+\\t\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString,\\r\\n+\\t\\t\\t      \\\"2 byte sequence converted to 2 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t    }\\r\\n+\\t}\\r\\n+    }\\r\\n+}\\r\\ndiff --git a/intl/uconv/tests/unit/test_bug381412.johab.js b/intl/uconv/tests/unit/test_bug381412.johab.js\\nnew file mode 100644\\nindex 0000000..5cf82ed\\n--- /dev/null\\n+++ b/intl/uconv/tests/unit/test_bug381412.johab.js\\n@@ -0,0 +1,60 @@\\n+const charset = \\\"x-johab\\\";\\r\\n+\\r\\n+function dumpStrings(inString, outString) {\\r\\n+    var dispIn = \\\"\\\";\\r\\n+    var dispOut = \\\"\\\";\\r\\n+    var i;\\r\\n+    for (i = 0; i < inString.length; ++i) {\\r\\n+\\tdispIn += \\\" x\\\" + inString.charCodeAt(i).toString(16);\\r\\n+    }\\r\\n+    if (outString.length == 0) {\\r\\n+\\tdispOut = \\\"<empty>\\\";\\r\\n+    } else {\\r\\n+\\tfor (i = 0; i < outString.length; ++i) {\\r\\n+\\t    dispOut += \\\" x\\\" + outString.charCodeAt(i).toString(16);\\r\\n+\\t}\\r\\n+    }\\r\\n+    dump(\\\"\\\\\\\"\\\" + dispIn + \\\"\\\\\\\" ==> \\\\\\\"\\\" + dispOut + \\\"\\\\\\\"\\\\n\\\");\\r\\n+}\\r\\n+\\r\\n+function error(inString, outString, msg){\\r\\n+    dumpStrings(inString, outString);\\r\\n+    do_throw(\\\"security risk: \\\" + msg);\\r\\n+}\\r\\n+\\r\\n+function run_test() {\\r\\n+    var ScriptableUnicodeConverter =\\r\\n+\\tComponents.Constructor(\\\"@mozilla.org/intl/scriptableunicodeconverter\\\",\\r\\n+\\t\\t\\t       \\\"nsIScriptableUnicodeConverter\\\");\\r\\n+\\r\\n+    var converter = new ScriptableUnicodeConverter();\\r\\n+    converter.charset = charset;\\r\\n+\\r\\n+    var leadByte, trailByte;\\r\\n+    var inString;\\r\\n+    for (leadByte = 1; leadByte < 0x100; ++leadByte) {\\r\\n+\\tfor (trailByte = 1; trailByte < 0x100; ++trailByte) {\\r\\n+\\t    inString = String.fromCharCode(leadByte, trailByte, 65);\\r\\n+\\t    var outString = converter.ConvertToUnicode(inString) + converter.Finish();\\r\\n+\\t    switch (outString.length) {\\r\\n+\\t        case 1:\\r\\n+\\t\\t    error(inString, outString, \\\"2 byte sequence eaten\\\");\\r\\n+\\t\\t    break;\\r\\n+\\t        case 2:\\r\\n+\\t\\t    if (outString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString, \\\"2 byte sequence converted to 1 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t        case 3:\\r\\n+\\t\\t    if (outString != inString &&\\r\\n+\\t\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString,\\r\\n+\\t\\t\\t      \\\"2 byte sequence converted to 2 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t    }\\r\\n+\\t}\\r\\n+    }\\r\\n+}\\r\\ndiff --git a/intl/uconv/tests/unit/test_bug381412.js b/intl/uconv/tests/unit/test_bug381412.js\\nnew file mode 100644\\nindex 0000000..622b7bf\\n--- /dev/null\\n+++ b/intl/uconv/tests/unit/test_bug381412.js\\n@@ -0,0 +1,56 @@\\n+const charset = \\\"Shift_JIS\\\";\\r\\n+\\r\\n+function error(inString, outString, msg){\\r\\n+    var dispIn = \\\"\\\";\\r\\n+    var dispOut = \\\"\\\";\\r\\n+    var i;\\r\\n+    for (i = 0; i < inString.length; ++i) {\\r\\n+\\tdispIn += \\\" x\\\" + inString.charCodeAt(i).toString(16);\\r\\n+    }\\r\\n+    if (outString.length == 0) {\\r\\n+\\tdispOut = \\\"<empty>\\\";\\r\\n+    } else {\\r\\n+\\tfor (i = 0; i < outString.length; ++i) {\\r\\n+\\t    dispOut += \\\" x\\\" + outString.charCodeAt(i).toString(16);\\r\\n+\\t}\\r\\n+    }\\r\\n+    dump(\\\"\\\\\\\"\\\" + dispIn + \\\"\\\\\\\" ==> \\\\\\\"\\\" + dispOut + \\\"\\\\\\\"\\\\n\\\");\\r\\n+    do_throw(\\\"security risk: \\\" + msg);\\r\\n+}\\r\\n+\\r\\n+function run_test() {\\r\\n+    var ScriptableUnicodeConverter =\\r\\n+\\tComponents.Constructor(\\\"@mozilla.org/intl/scriptableunicodeconverter\\\",\\r\\n+\\t\\t\\t       \\\"nsIScriptableUnicodeConverter\\\");\\r\\n+\\r\\n+    var converter = new ScriptableUnicodeConverter();\\r\\n+    converter.charset = charset;\\r\\n+\\r\\n+    var leadByte, trailByte;\\r\\n+    var inString;\\r\\n+    for (leadByte = 1; leadByte < 0x100; ++leadByte) {\\r\\n+\\tfor (trailByte = 1; trailByte < 0x100; ++trailByte) {\\r\\n+\\t    inString = String.fromCharCode(leadByte, trailByte, 65);\\r\\n+\\t    var outString = converter.ConvertToUnicode(inString) + converter.Finish();\\r\\n+\\t    switch (outString.length) {\\r\\n+\\t        case 1:\\r\\n+\\t\\t    error(inString, outString, \\\"2 byte sequence eaten\\\");\\r\\n+\\t\\t    break;\\r\\n+\\t        case 2:\\r\\n+\\t\\t    if (outString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString, \\\"2 byte sequence converted to 1 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t        case 3:\\r\\n+\\t\\t    if (outString != inString &&\\r\\n+\\t\\t\\toutString.charCodeAt(0) < 0x80 &&\\r\\n+\\t\\t\\toutString.charCodeAt(1) < 0x80) {\\r\\n+\\t\\t\\terror(inString, outString,\\r\\n+\\t\\t\\t      \\\"2 byte sequence converted to 2 ASCII\\\");\\r\\n+\\t\\t    }\\r\\n+\\t\\t    break;\\r\\n+\\t    }\\r\\n+\\t}\\r\\n+    }\\r\\n+}\\r\\n\""}