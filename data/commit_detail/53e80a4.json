{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas53e80a4\""},"diff":"\"53e80a4 Bug 397492: track state used to update security UI to avoid making unnecessary updates from onSecurityChange, r=mano, a=mconnor\\ndiff --git a/browser/base/content/browser.js b/browser/base/content/browser.js\\nindex 1f58d90..5a70795 100644\\n--- a/browser/base/content/browser.js\\n+++ b/browser/base/content/browser.js\\n@@ -3629,59 +3629,72 @@ nsBrowserStatusHandler.prototype =\\n     return true;\\n   },\\n \\n+  // Properties used to cache security state used to update the UI\\n+  _state: null,\\n+  _host: null,\\n+  _tooltipText: null,\\n+\\n   onSecurityChange : function(aWebProgress, aRequest, aState)\\n   {\\n-    const wpl = Components.interfaces.nsIWebProgressListener;\\n-    this.securityButton.removeAttribute(\\\"label\\\");\\n+    var host = null;\\n+    try {\\n+      host = gBrowser.contentWindow.location.host;\\n+    } catch (ex) {}\\n+\\n+    // Don't need to do anything if the data we use to update the UI hasn't\\n+    // changed\\n+    if (this._state == aState &&\\n+        this._host == host &&\\n+        this._tooltipText == gBrowser.securityUI.tooltipText)\\n+      return;\\n \\n+    this._state = aState;\\n+    this._host = host;\\n+    this._tooltipText = gBrowser.securityUI.tooltipText\\n+\\n+    // aState is defined as a bitmask that may be extended in the future.\\n+    // We filter out any unknown bits before testing for known values.\\n+    const wpl = Components.interfaces.nsIWebProgressListener;\\n     const wpl_security_bits = wpl.STATE_IS_SECURE |\\n                               wpl.STATE_IS_BROKEN |\\n                               wpl.STATE_IS_INSECURE |\\n                               wpl.STATE_SECURE_HIGH |\\n                               wpl.STATE_SECURE_MED |\\n                               wpl.STATE_SECURE_LOW;\\n+    var level = null;\\n+    var setHost = false;\\n \\n-    /* aState is defined as a bitmask that may be extended in the future.\\n-     * We filter out any unknown bits before testing for known values.\\n-     */\\n-    switch (aState & wpl_security_bits) {\\n+    switch (this._state & wpl_security_bits) {\\n       case wpl.STATE_IS_SECURE | wpl.STATE_SECURE_HIGH:\\n-        this.securityButton.setAttribute(\\\"level\\\", \\\"high\\\");\\n-        if (this.urlBar)\\n-          this.urlBar.setAttribute(\\\"level\\\", \\\"high\\\");\\n-        try {\\n-          this.securityButton.setAttribute(\\\"label\\\",\\n-            gBrowser.contentWindow.location.host);\\n-        } catch(exception) {}\\n+        level = \\\"high\\\";\\n+        setHost = true;\\n         break;\\n       case wpl.STATE_IS_SECURE | wpl.STATE_SECURE_MED:\\n       case wpl.STATE_IS_SECURE | wpl.STATE_SECURE_LOW:\\n-        this.securityButton.setAttribute(\\\"level\\\", \\\"low\\\");\\n-        if (this.urlBar)\\n-          this.urlBar.setAttribute(\\\"level\\\", \\\"low\\\");\\n-        try {\\n-          this.securityButton.setAttribute(\\\"label\\\",\\n-            gBrowser.contentWindow.location.host);\\n-        } catch(exception) {}\\n+        level = \\\"low\\\";\\n+        setHost = true;\\n         break;\\n       case wpl.STATE_IS_BROKEN:\\n-        this.securityButton.setAttribute(\\\"level\\\", \\\"broken\\\");\\n-        if (this.urlBar)\\n-          this.urlBar.setAttribute(\\\"level\\\", \\\"broken\\\");\\n-        break;\\n-      case wpl.STATE_IS_INSECURE:\\n-      default:\\n-        this.securityButton.removeAttribute(\\\"level\\\");\\n-        if (this.urlBar)\\n-          this.urlBar.removeAttribute(\\\"level\\\");\\n+        level = \\\"broken\\\";\\n         break;\\n     }\\n \\n-    var securityUI = gBrowser.securityUI;\\n-    this.securityButton.setAttribute(\\\"tooltiptext\\\", securityUI.tooltipText);\\n-    var lockIcon = document.getElementById(\\\"lock-icon\\\");\\n-    if (lockIcon)\\n-      lockIcon.setAttribute(\\\"tooltiptext\\\", securityUI.tooltipText);\\n+    if (level) {\\n+      this.securityButton.setAttribute(\\\"level\\\", level);\\n+      if (this.urlBar)\\n+        this.urlBar.setAttribute(\\\"level\\\", level);    \\n+    } else {\\n+      this.securityButton.removeAttribute(\\\"level\\\");\\n+      if (this.urlBar)\\n+        this.urlBar.removeAttribute(\\\"level\\\");\\n+    }\\n+\\n+    if (setHost && this._host)\\n+      this.securityButton.setAttribute(\\\"label\\\", this._host);\\n+    else\\n+      this.securityButton.removeAttribute(\\\"label\\\");\\n+\\n+    this.securityButton.setAttribute(\\\"tooltiptext\\\", this._tooltipText);\\n   },\\n \\n   // simulate all change notifications after switching tabs\\n\""}