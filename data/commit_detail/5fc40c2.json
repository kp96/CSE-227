{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas5fc40c2\""},"diff":"\"5fc40c2 Get rid of unnecessary docshell usage and member variables. We create a lot of these objects this this should save us a fair amount of memory. b=394282 r=cbarrett sr=bz a=vlad\\ndiff --git a/widget/src/cocoa/nsMenuBarX.h b/widget/src/cocoa/nsMenuBarX.h\\nindex 67e6625..6481c72 100644\\n--- a/widget/src/cocoa/nsMenuBarX.h\\n+++ b/widget/src/cocoa/nsMenuBarX.h\\n@@ -55,6 +55,7 @@\\n class nsIWidget;\\n class nsIDocument;\\n class nsIDOMNode;\\n+class nsIDocShell;\\n \\n extern \\\"C\\\" MenuRef _NSGetCarbonMenu(NSMenu* aMenu);\\n \\ndiff --git a/widget/src/cocoa/nsMenuBarX.mm b/widget/src/cocoa/nsMenuBarX.mm\\nindex fd85536..3f5148d 100644\\n--- a/widget/src/cocoa/nsMenuBarX.mm\\n+++ b/widget/src/cocoa/nsMenuBarX.mm\\n@@ -134,6 +134,7 @@ nsMenuBarX::~nsMenuBarX()\\n   [mRootMenu release];\\n }\\n \\n+\\n nsEventStatus \\n nsMenuBarX::MenuItemSelected(const nsMenuEvent &aMenuEvent)\\n {\\n@@ -238,16 +239,14 @@ nsMenuBarX::RegisterAsDocumentObserver(nsIDocShell* inDocShell)\\n   // also get pointer to doc, just in case docshell goes away\\n   // we can still remove ourself as doc observer directly from doc\\n   mDocument = doc;\\n-} // RegisterAsDocumentObesrver\\n+}\\n \\n \\n-//\\n // AquifyMenuBar\\n //\\n // Do what's necessary to conform to the Aqua guidelines for menus. Initially, this\\n // means removing 'Quit' from the file menu and 'Preferences' from the edit menu, along\\n // with their various separators (if present).\\n-//\\n void\\n nsMenuBarX::AquifyMenuBar()\\n {\\n@@ -278,16 +277,12 @@ nsMenuBarX::AquifyMenuBar()\\n     HideItem(domDoc, NS_LITERAL_STRING(\\\"menu_mac_hide_others\\\"), nsnull);\\n     HideItem(domDoc, NS_LITERAL_STRING(\\\"menu_mac_show_all\\\"), nsnull);\\n   }\\n-} // AquifyMenuBar\\n+}\\n \\n \\n-//\\n-// InstallCommandEventHandler\\n-//\\n // Grab our window and install an event handler to handle command events which are\\n // used to drive the action when the user chooses an item from a menu. We have to install\\n // it on the window because the menubar isn't in the event chain for a menu command event.\\n-//\\n OSStatus\\n nsMenuBarX::InstallCommandEventHandler()\\n {\\n@@ -301,14 +296,10 @@ nsMenuBarX::InstallCommandEventHandler()\\n      NS_ASSERTION(err == noErr, \\\"Uh oh, command handler not installed\\\");\\n    }\\n    return err;\\n-} // InstallCommandEventHandler\\n+}\\n \\n \\n-//\\n-// CommandEventHandler\\n-//\\n // Processes Command carbon events from enabling/selecting of items in the menu.\\n-//\\n pascal OSStatus\\n nsMenuBarX::CommandEventHandler(EventHandlerCallRef inHandlerChain, EventRef inEvent, void* userData)\\n {\\n@@ -384,15 +375,11 @@ nsMenuBarX::CommandEventHandler(EventHandlerCallRef inHandlerChain, EventRef inE\\n   } // switch on commandID\\n   \\n   return handled;\\n-} // CommandEventHandler\\n+}\\n \\n \\n-//\\n-// ExecuteCommand\\n-//\\n // Execute the menu item by sending a command message to the \\n // DOM node specified in |inDispatchTo|.\\n-//\\n nsEventStatus\\n nsMenuBarX::ExecuteCommand(nsIContent* inDispatchTo)\\n {\\n@@ -403,13 +390,9 @@ nsMenuBarX::ExecuteCommand(nsIContent* inDispatchTo)\\n } // ExecuteCommand\\n \\n \\n-//\\n-// HideItem\\n-//\\n // Hide the item in the menu by setting the 'hidden' attribute. Returns it in |outHiddenNode| so\\n // the caller can hang onto it if they so choose. It is acceptable to pass nsull\\n // for |outHiddenNode| if the caller doesn't care about the hidden node.\\n-//\\n void\\n nsMenuBarX::HideItem(nsIDOMDocument* inDoc, const nsAString & inID, nsIContent** outHiddenNode)\\n {\\n@@ -423,7 +406,7 @@ nsMenuBarX::HideItem(nsIDOMDocument* inDoc, const nsAString & inID, nsIContent**\\n       NS_IF_ADDREF(*outHiddenNode);\\n     }\\n   }\\n-} // HideItem\\n+}\\n \\n \\n nsEventStatus\\n@@ -470,7 +453,7 @@ nsMenuBarX::MenuConstruct(const nsMenuEvent & aMenuEvent, nsIWidget* aParentWind\\n         if (pnsMenu) {\\n           pnsMenu->Create(static_cast<nsIMenuBar*>(this), menuName, menuAccessKey, \\n                           static_cast<nsIChangeManager *>(this), \\n-                          reinterpret_cast<nsIDocShell*>(aDocShell), menu);\\n+                          nsnull, menu);\\n           \\n           // Make nsMenu a child of nsMenuBar. nsMenuBar takes ownership.\\n           AddMenu(pnsMenu);\\n@@ -631,11 +614,7 @@ NSMenuItem* nsMenuBarX::CreateNativeAppMenuItem(nsIMenu* inMenu, const nsAString\\n }\\n \\n \\n-//\\n-// CreateApplicationMenu\\n-//\\n-// build the Application menu shared by all menu bars.\\n-//\\n+// build the Application menu shared by all menu bars\\n nsresult\\n nsMenuBarX::CreateApplicationMenu(nsIMenu* inMenu)\\n {\\n@@ -786,14 +765,13 @@ nsMenuBarX::CreateApplicationMenu(nsIMenu* inMenu)\\n }\\n \\n \\n-//-------------------------------------------------------------------------\\n NS_IMETHODIMP nsMenuBarX::GetMenuCount(PRUint32 &aCount)\\n {\\n   aCount = mMenusArray.Count();\\n   return NS_OK;\\n }\\n \\n-//-------------------------------------------------------------------------\\n+\\n NS_IMETHODIMP nsMenuBarX::GetMenuAt(const PRUint32 aCount, nsIMenu *& aMenu)\\n { \\n   aMenu = NULL;\\n@@ -804,13 +782,13 @@ NS_IMETHODIMP nsMenuBarX::GetMenuAt(const PRUint32 aCount, nsIMenu *& aMenu)\\n   return CallQueryInterface(menu, &aMenu); // addref\\n }\\n \\n-//-------------------------------------------------------------------------\\n+\\n NS_IMETHODIMP nsMenuBarX::InsertMenuAt(const PRUint32 aCount, nsIMenu *& aMenu)\\n {\\n   return NS_ERROR_NOT_IMPLEMENTED;\\n }\\n \\n-//-------------------------------------------------------------------------\\n+\\n NS_IMETHODIMP nsMenuBarX::RemoveMenu(const PRUint32 aCount)\\n {\\n   mMenusArray.RemoveObjectAt(aCount);\\n@@ -818,26 +796,26 @@ NS_IMETHODIMP nsMenuBarX::RemoveMenu(const PRUint32 aCount)\\n   return NS_OK;\\n }\\n \\n-//-------------------------------------------------------------------------\\n+\\n NS_IMETHODIMP nsMenuBarX::RemoveAll()\\n {\\n   return NS_ERROR_NOT_IMPLEMENTED;\\n }\\n \\n-//-------------------------------------------------------------------------\\n+\\n NS_IMETHODIMP nsMenuBarX::GetNativeData(void *& aData)\\n {\\n   aData = (void *) mRootMenu;\\n   return NS_OK;\\n }\\n \\n-//-------------------------------------------------------------------------\\n+\\n NS_IMETHODIMP nsMenuBarX::SetNativeData(void* aData)\\n {\\n   return NS_ERROR_NOT_IMPLEMENTED;\\n }\\n \\n-//-------------------------------------------------------------------------\\n+\\n NS_IMETHODIMP nsMenuBarX::Paint()\\n {\\n   // swap in the shared Application menu\\n@@ -877,6 +855,7 @@ nsMenuBarX::CharacterDataChanged(nsIDocument * aDocument,\\n {\\n }\\n \\n+\\n void\\n nsMenuBarX::ContentAppended(nsIDocument * aDocument, nsIContent  * aContainer,\\n                             PRInt32 aNewIndexInContainer)\\n@@ -897,6 +876,7 @@ nsMenuBarX::ContentAppended(nsIDocument * aDocument, nsIContent  * aContainer,\\n   }\\n }\\n \\n+\\n void\\n nsMenuBarX::NodeWillBeDestroyed(const nsINode * aNode)\\n {\\n@@ -916,6 +896,7 @@ nsMenuBarX::AttributeChanged(nsIDocument * aDocument, nsIContent * aContent,\\n     obs->AttributeChanged(aDocument, aNameSpaceID, aContent, aAttribute);\\n }\\n \\n+\\n void\\n nsMenuBarX::ContentRemoved(nsIDocument * aDocument, nsIContent * aContainer,\\n                             nsIContent * aChild, PRInt32 aIndexInContainer)\\n@@ -940,6 +921,7 @@ nsMenuBarX::ContentRemoved(nsIDocument * aDocument, nsIContent * aContainer,\\n   }\\n }\\n \\n+\\n void\\n nsMenuBarX::ContentInserted(nsIDocument * aDocument, nsIContent * aContainer,\\n                              nsIContent * aChild, PRInt32 aIndexInContainer)\\n@@ -960,6 +942,7 @@ nsMenuBarX::ContentInserted(nsIDocument * aDocument, nsIContent * aContainer,\\n   }\\n }\\n \\n+\\n void\\n nsMenuBarX::ParentChainChanged(nsIContent *aContent)\\n {\\n@@ -1009,12 +992,8 @@ nsMenuBarX::Lookup(nsIContent *aContent, nsIChangeObserver **_retval)\\n //\\n \\n \\n-//\\n-// Register\\n-//\\n // Given a menu item, creates a unique 4-character command ID and\\n // maps it to the item. Returns the id for use by the client.\\n-//\\n NS_IMETHODIMP\\n nsMenuBarX::Register(nsIMenuItem* inMenuItem, PRUint32* outCommandID)\\n {\\n@@ -1035,12 +1014,8 @@ nsMenuBarX::Register(nsIMenuItem* inMenuItem, PRUint32* outCommandID)\\n }\\n \\n \\n-// \\n-// Unregister\\n-//\\n // Removes the mapping between the given 4-character command ID\\n // and its associated menu item.\\n-//\\n NS_IMETHODIMP\\n nsMenuBarX::Unregister(PRUint32 inCommandID)\\n {\\n@@ -1055,11 +1030,7 @@ MenuHelpersX::DispatchCommandTo(nsIWeakReference* aDocShellWeakRef,\\n                                 nsIContent* aTargetContent)\\n {\\n   NS_PRECONDITION(aTargetContent, \\\"null ptr\\\");\\n-  \\n-  nsCOMPtr<nsIDocShell> docShell = do_QueryReferent(aDocShellWeakRef);\\n-  if (!docShell)\\n-    return nsEventStatus_eConsumeNoDefault;\\n-  \\n+\\n   nsEventStatus status = nsEventStatus_eConsumeNoDefault;\\n   nsXULCommandEvent event(PR_TRUE, NS_XUL_COMMAND, nsnull);\\n   \\n@@ -1070,6 +1041,7 @@ MenuHelpersX::DispatchCommandTo(nsIWeakReference* aDocShellWeakRef,\\n   return status;\\n }\\n \\n+\\n NSString* MenuHelpersX::CreateTruncatedCocoaLabel(const nsString& itemLabel)\\n {\\n   // ::TruncateThemeText() doesn't take the number of characters to truncate to, it takes a pixel with\\n@@ -1082,6 +1054,7 @@ NSString* MenuHelpersX::CreateTruncatedCocoaLabel(const nsString& itemLabel)\\n   return label; // caller releases\\n }\\n \\n+\\n PRUint8 MenuHelpersX::GeckoModifiersForNodeAttribute(const nsString& modifiersAttribute)\\n {\\n   PRUint8 modifiers = knsMenuItemNoModifier;\\n@@ -1106,6 +1079,7 @@ PRUint8 MenuHelpersX::GeckoModifiersForNodeAttribute(const nsString& modifiersAt\\n   return modifiers;\\n }\\n \\n+\\n unsigned int MenuHelpersX::MacModifiersForGeckoModifiers(PRUint8 geckoModifiers)\\n {\\n   unsigned int macModifiers = 0;\\n@@ -1122,7 +1096,11 @@ unsigned int MenuHelpersX::MacModifiersForGeckoModifiers(PRUint8 geckoModifiers)\\n   return macModifiers;\\n }\\n \\n+\\n+//\\n // Objective-C class used as action target for menu items\\n+//\\n+\\n \\n @implementation NativeMenuItemTarget\\n \\ndiff --git a/widget/src/cocoa/nsMenuItemX.h b/widget/src/cocoa/nsMenuItemX.h\\nindex 7274227..11ece59 100644\\n--- a/widget/src/cocoa/nsMenuItemX.h\\n+++ b/widget/src/cocoa/nsMenuItemX.h\\n@@ -50,6 +50,7 @@\\n #import <Cocoa/Cocoa.h>\\n \\n class nsIMenu;\\n+class nsIDocShell;\\n class nsMenuItemIconX;\\n \\n /**\\n@@ -116,7 +117,6 @@ protected:\\n \\n   nsCOMPtr<nsIMenuListener> mXULCommandListener;\\n   \\n-  nsWeakPtr                 mDocShellWeakRef;     // weak ref to docshell\\n   nsCOMPtr<nsIContent>      mContent;\\n   nsCOMPtr<nsIContent>      mCommandContent;\\n   nsRefPtr<nsMenuItemIconX> mIcon;\\ndiff --git a/widget/src/cocoa/nsMenuItemX.mm b/widget/src/cocoa/nsMenuItemX.mm\\nindex 81e3b9b..cdeded3 100644\\n--- a/widget/src/cocoa/nsMenuItemX.mm\\n+++ b/widget/src/cocoa/nsMenuItemX.mm\\n@@ -37,7 +37,6 @@\\n  * ***** END LICENSE BLOCK ***** */\\n \\n #include \\\"nsCOMPtr.h\\\"\\n-#include \\\"nsIDocumentViewer.h\\\"\\n #include \\\"nsIContent.h\\\"\\n \\n #include \\\"nsMenuBarX.h\\\"  // for MenuHelpers namespace\\n@@ -54,6 +53,7 @@\\n #include \\\"nsIPrivateDOMEvent.h\\\"\\n #include \\\"nsIDOMEventTarget.h\\\"\\n #include \\\"nsIDOMDocumentEvent.h\\\"\\n+#include \\\"nsIDocShell.h\\\"\\n \\n #include \\\"nsMenuItemIconX.h\\\"\\n #include \\\"nsGUIEvent.h\\\"\\n@@ -91,7 +91,6 @@ NS_METHOD nsMenuItemX::Create(nsIMenu* aParent, const nsString & aLabel, PRBool\\n {\\n   mContent = aNode;      // addref\\n   mMenuParent = aParent; // weak\\n-  mDocShellWeakRef = do_GetWeakReference(aShell);\\n   \\n   mMenuType = aItemType;\\n   \\n@@ -321,10 +320,6 @@ NS_METHOD nsMenuItemX::DoCommand()\\n     /* the AttributeChanged code will update all the internal state */\\n   }\\n \\n-  nsCOMPtr<nsIDocShell> docShell = do_QueryReferent(mDocShellWeakRef);\\n-  if (!docShell)\\n-    return nsEventStatus_eConsumeNoDefault;\\n-\\n   nsEventStatus status = nsEventStatus_eIgnore;\\n   nsXULCommandEvent event(PR_TRUE, NS_XUL_COMMAND, nsnull);\\n \\ndiff --git a/widget/src/cocoa/nsMenuX.h b/widget/src/cocoa/nsMenuX.h\\nindex 7407ec0..c79f2c6 100644\\n--- a/widget/src/cocoa/nsMenuX.h\\n+++ b/widget/src/cocoa/nsMenuX.h\\n@@ -53,6 +53,7 @@\\n \\n class nsIMenuBar;\\n class nsIMenuListener;\\n+class nsIDocShell;\\n class nsMenuX;\\n class nsMenuItemIconX;\\n \\n@@ -155,7 +156,6 @@ protected:\\n \\n     nsISupports*                mParent;                // weak, my parent owns me\\n     nsIChangeManager*           mManager;               // weak ref, it will outlive us [menubar]\\n-    nsWeakPtr                   mDocShellWeakRef;       // weak ref to docshell\\n     nsCOMPtr<nsIContent>        mMenuContent;           // the |menu| tag, strong ref\\n     nsCOMPtr<nsIMenuListener>   mListener;              // strong ref\\n     nsRefPtr<nsMenuItemIconX>   mIcon;\\ndiff --git a/widget/src/cocoa/nsMenuX.mm b/widget/src/cocoa/nsMenuX.mm\\nindex de61df8..2879f1b 100644\\n--- a/widget/src/cocoa/nsMenuX.mm\\n+++ b/widget/src/cocoa/nsMenuX.mm\\n@@ -135,7 +135,6 @@ NS_IMETHODIMP\\n nsMenuX::Create(nsISupports * aParent, const nsAString &aLabel, const nsAString &aAccessKey, \\n                 nsIChangeManager* aManager, nsIDocShell* aShell, nsIContent* aNode)\\n {\\n-  mDocShellWeakRef = do_GetWeakReference(aShell);\\n   mMenuContent = aNode;\\n \\n   // register this menu to be notified when changes are made to our content object\\n@@ -503,13 +502,7 @@ nsEventStatus nsMenuX::MenuSelected(const nsMenuEvent & aMenuEvent)\\n       if (mNeedsRebuild)\\n         RemoveAll();\\n \\n-      nsCOMPtr<nsIDocShell> docShell = do_QueryReferent(mDocShellWeakRef);\\n-      if (!docShell) {\\n-        NS_ERROR(\\\"No doc shell\\\");\\n-        return nsEventStatus_eConsumeNoDefault;\\n-      }\\n-\\n-      MenuConstruct(aMenuEvent, nsnull, nsnull, docShell);\\n+      MenuConstruct(aMenuEvent, nsnull, nsnull, nsnull);\\n       mConstructed = true;\\n     }\\n \\n@@ -719,13 +712,9 @@ void nsMenuX::LoadMenuItem(nsIContent* inMenuItemContent)\\n     case 1: itemType = nsIMenuItem::eRadio; break;\\n   }\\n \\n-  nsCOMPtr<nsIDocShell> docShell = do_QueryReferent(mDocShellWeakRef);\\n-  if (!docShell)\\n-    return;\\n-\\n   // Create the item.\\n   pnsMenuItem->Create(this, menuitemName, PR_FALSE, itemType, mManager,\\n-                      docShell, inMenuItemContent);\\n+                      nsnull, inMenuItemContent);\\n \\n   AddMenuItem(pnsMenuItem);\\n \\n@@ -746,11 +735,7 @@ void nsMenuX::LoadSubMenu(nsIContent* inMenuContent)\\n   if (!pnsMenu)\\n     return;\\n \\n-  // Call Create\\n-  nsCOMPtr<nsIDocShell> docShell = do_QueryReferent(mDocShellWeakRef);\\n-  if (!docShell)\\n-    return;\\n-  pnsMenu->Create(reinterpret_cast<nsISupports*>(this), menuName, EmptyString(), mManager, docShell, inMenuContent);\\n+  pnsMenu->Create(reinterpret_cast<nsISupports*>(this), menuName, EmptyString(), mManager, nsnull, inMenuContent);\\n \\n   AddMenu(pnsMenu);\\n \\n@@ -781,12 +766,6 @@ PRBool nsMenuX::OnCreate()\\n   \\n   nsCOMPtr<nsIContent> popupContent;\\n   GetMenuPopupContent(getter_AddRefs(popupContent));\\n-\\n-  nsCOMPtr<nsIDocShell> docShell = do_QueryReferent(mDocShellWeakRef);\\n-  if (!docShell) {\\n-    NS_ERROR(\\\"No doc shell\\\");\\n-    return PR_FALSE;\\n-  }\\n   \\n   nsresult rv = NS_OK;\\n   nsIContent* dispatchTo = popupContent ? popupContent : mMenuContent;\\n@@ -862,12 +841,6 @@ PRBool nsMenuX::OnCreated()\\n   nsCOMPtr<nsIContent> popupContent;\\n   GetMenuPopupContent(getter_AddRefs(popupContent));\\n \\n-  nsCOMPtr<nsIDocShell> docShell = do_QueryReferent(mDocShellWeakRef);\\n-  if (!docShell) {\\n-    NS_ERROR(\\\"No doc shell\\\");\\n-    return PR_FALSE;\\n-  }\\n-\\n   nsresult rv = NS_OK;\\n   nsIContent* dispatchTo = popupContent ? popupContent : mMenuContent;\\n   rv = dispatchTo->DispatchDOMEvent(&event, nsnull, nsnull, &status);\\n@@ -888,12 +861,6 @@ PRBool nsMenuX::OnDestroy()\\n   nsEventStatus status = nsEventStatus_eIgnore;\\n   nsMouseEvent event(PR_TRUE, NS_XUL_POPUP_HIDING, nsnull,\\n                      nsMouseEvent::eReal);\\n-  \\n-  nsCOMPtr<nsIDocShell> docShell = do_QueryReferent(mDocShellWeakRef);\\n-  if (!docShell) {\\n-    NS_WARNING(\\\"No doc shell so can't run the OnDestroy\\\");\\n-    return PR_FALSE;\\n-  }\\n \\n   nsCOMPtr<nsIContent> popupContent;\\n   GetMenuPopupContent(getter_AddRefs(popupContent));\\n@@ -916,12 +883,6 @@ PRBool nsMenuX::OnDestroyed()\\n   nsEventStatus status = nsEventStatus_eIgnore;\\n   nsMouseEvent event(PR_TRUE, NS_XUL_POPUP_HIDDEN, nsnull,\\n                      nsMouseEvent::eReal);\\n-  \\n-  nsCOMPtr<nsIDocShell>  docShell = do_QueryReferent(mDocShellWeakRef);\\n-  if (!docShell) {\\n-    NS_WARNING(\\\"No doc shell so can't run the OnDestroy\\\");\\n-    return PR_FALSE;\\n-  }\\n \\n   nsCOMPtr<nsIContent> popupContent;\\n   GetMenuPopupContent(getter_AddRefs(popupContent));\\n\""}