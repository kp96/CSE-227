{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basbe51636\""},"diff":"\"be51636 Bug 395559 - Fix two typos in httpd.js which prevented the registerFile API from working correctly, and add a dumpn so that errors in handlers can be detected more easily by reading console dumps.  r=sayrer, NPOTB, test-only, etc.\\ndiff --git a/netwerk/test/httpserver/httpd.js b/netwerk/test/httpserver/httpd.js\\nindex 6e702a3..e7466fc 100644\\n--- a/netwerk/test/httpserver/httpd.js\\n+++ b/netwerk/test/httpserver/httpd.js\\n@@ -441,7 +441,7 @@ nsHttpServer.prototype =\\n   //\\n   registerFile: function(path, file)\\n   {\\n-    if (!file.exists() || lf.isDirectory())\\n+    if (!file.exists() || file.isDirectory())\\n       throw Cr.NS_ERROR_INVALID_ARG;\\n \\n     this._handler.registerFile(path, file);\\n@@ -1569,7 +1569,10 @@ ServerHandler.prototype =\\n         response.recycle();\\n \\n         if (!(e instanceof HttpError))\\n+        {\\n+          dumpn(\\\"*** unexpected error: e == \\\" + e);\\n           throw HTTP_500;\\n+        }\\n         if (e.code != 404)\\n           throw e;\\n \\n@@ -1620,6 +1623,7 @@ ServerHandler.prototype =\\n     dumpn(\\\"*** registering '\\\" + path + \\\"' as mapping to \\\" + file.path);\\n     file = file.clone();\\n \\n+    var self = this;\\n     this._overridePaths[path] =\\n       function(metadata, response)\\n       {\\n@@ -1627,7 +1631,7 @@ ServerHandler.prototype =\\n           throw HTTP_404;\\n \\n         response.setStatusLine(metadata.httpVersion, 200, \\\"OK\\\");\\n-        this._writeFileResponse(file, response);\\n+        self._writeFileResponse(file, response);\\n         maybeAddHeaders(file, metadata, response);\\n       };\\n   },\\ndiff --git a/netwerk/test/httpserver/test/test_registerfile.js b/netwerk/test/httpserver/test/test_registerfile.js\\nnew file mode 100644\\nindex 0000000..f5889ff\\n--- /dev/null\\n+++ b/netwerk/test/httpserver/test/test_registerfile.js\\n@@ -0,0 +1,82 @@\\n+/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n+/* vim:set ts=2 sw=2 sts=2 et: */\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is MozJSHTTP code.\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Jeff Walden <jwalden+code@mit.edu>.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+// tests the registerFile API\\n+\\n+const BASE = \\\"http://localhost:4444\\\";\\n+\\n+function isException(e, code)\\n+{\\n+  if (e !== code && e.result !== code)\\n+    do_throw(\\\"unexpected error: \\\" + e);\\n+}\\n+\\n+var file = do_get_file(\\\"netwerk/test/httpserver/test/test_registerfile.js\\\");\\n+\\n+function onStart(ch, cx)\\n+{\\n+  do_check_eq(ch.responseStatus, 200);\\n+}\\n+\\n+function onStop(ch, cx, status, data)\\n+{\\n+  // not sufficient for equality, but not likely to be wrong!\\n+  do_check_eq(data.length, file.fileSize);\\n+}\\n+\\n+var test = new Test(BASE + \\\"/foo\\\", null, onStart, onStop);\\n+\\n+function run_test()\\n+{\\n+  var srv = createServer();\\n+\\n+  try\\n+  {\\n+    srv.registerFile(\\\"/foo\\\", do_get_file(\\\"netwerk/test/httpserver/\\\"));\\n+    throw \\\"registerFile succeeded!\\\";\\n+  }\\n+  catch (e)\\n+  {\\n+    isException(e, Cr.NS_ERROR_INVALID_ARG);\\n+  }\\n+\\n+  srv.registerFile(\\\"/foo\\\", file);\\n+  srv.start(4444);\\n+\\n+  runHttpTests([test], function() { srv.stop(); });\\n+}\\n\""}