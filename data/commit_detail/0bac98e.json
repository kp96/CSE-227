{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0bac98e\""},"diff":"\"0bac98e b=109672, site icon for iframe content is shown as proxy icon, patch from bugzilla.mozilla.org@chsc.dk, r=vladimir,a=asa\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 23b2e19..a04950a 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -280,7 +280,6 @@\\n             mTab: aTab,\\n             mBrowser: aBrowser,\\n             mBlank: aStartsBlank,\\n-            mIcon: null,\\n             mLastURI: null,\\n \\n             onProgressChange : function (aWebProgress, aRequest,\\n@@ -308,9 +307,6 @@\\n               const nsIWebProgressListener = Components.interfaces.nsIWebProgressListener;\\n               const nsIChannel = Components.interfaces.nsIChannel;\\n \\n-              if (aStateFlags & nsIWebProgressListener.STATE_START)\\n-                  this.mBrowser.mFavIconURL = null;\\n-\\n               if (aStateFlags & nsIWebProgressListener.STATE_START &&\\n                   aStateFlags & nsIWebProgressListener.STATE_IS_NETWORK) {\\n                 // It's okay to clear what the user typed when we start\\n@@ -323,9 +319,8 @@\\n \\n                 if (!this.mBlank) {\\n                   this.mTab.setAttribute(\\\"busy\\\", \\\"true\\\");\\n+                  this.mTabBrowser.updateIcon(this.mTab);\\n                   this.mTab.label = this.mTabBrowser.mStringBundle.getString(\\\"tabs.loading\\\");\\n-                  this.mTab.removeAttribute(\\\"image\\\");\\n-                  this.mIcon = null;\\n \\n                   if (this.mTabBrowser.mCurrentTab == this.mTab)\\n                     this.mTabBrowser.mIsBusy = true;\\n@@ -333,15 +328,20 @@\\n               }\\n               else if (aStateFlags & nsIWebProgressListener.STATE_STOP &&\\n                        aStateFlags & nsIWebProgressListener.STATE_IS_NETWORK) {\\n-                // The document is done loading, it's okay to clear\\n-                // the value again.\\n-                if (aWebProgress.DOMWindow == this.mBrowser.contentWindow)\\n+                if (aWebProgress.DOMWindow == this.mBrowser.contentWindow) {\\n+                  // The document is done loading, it's okay to clear\\n+                  // the value again.\\n                   this.mBrowser.userTypedClear = false;\\n \\n+                  if (!this.mBrowser.mIconURL)\\n+                    this.mTabBrowser.useDefaultIcon(this.mTab);\\n+                }\\n+\\n                 if (this.mBlank)\\n                   this.mBlank = false;\\n \\n                 this.mTab.removeAttribute(\\\"busy\\\");\\n+                this.mTabBrowser.updateIcon(this.mTab);\\n \\n                 var location = aRequest.QueryInterface(nsIChannel).URI;\\n \\n@@ -349,13 +349,6 @@\\n                 if (location.scheme == \\\"keyword\\\")\\n                   this.mBrowser.userTypedValue = null;\\n \\n-                if (this.mTabBrowser.shouldLoadFavIcon(location)) {\\n-                    if (this.mIcon)\\n-                      this.mTab.setAttribute(\\\"image\\\", this.mIcon);\\n-                    else\\n-                      this.mTabBrowser.loadFavIcon(location, \\\"image\\\", this.mTab);\\n-                }\\n-\\n                 if (this.mTab.label == this.mTabBrowser.mStringBundle.getString(\\\"tabs.loading\\\"))\\n                   this.mTabBrowser.setTabTitle(this.mTab);\\n \\n@@ -378,6 +371,9 @@\\n               if (this.mBrowser.userTypedClear)\\n                 this.mBrowser.userTypedValue = null;\\n \\n+              if (aWebProgress.DOMWindow == this.mBrowser.contentWindow)\\n+                this.mTabBrowser.setIcon(this.mTab, null);\\n+\\n               if (!this.mBlank && this.mTabBrowser.mCurrentTab == this.mTab) {\\n                 for (var i = 0; i < this.mTabBrowser.mProgressListeners.length; i++) {\\n                   var p = this.mTabBrowser.mProgressListeners[i];\\n@@ -412,13 +408,6 @@\\n               }\\n             },\\n \\n-            setIcon : function(aURI)\\n-            {\\n-              this.mIcon = aURI;\\n-              if (!this.mTab.hasAttribute(\\\"busy\\\"))\\n-                this.mTab.setAttribute(\\\"image\\\", aURI);\\n-            },\\n-\\n             QueryInterface : function(aIID)\\n             {\\n               if (aIID.equals(Components.interfaces.nsIWebProgressListener) ||\\n@@ -432,12 +421,34 @@\\n         </body>\\n       </method>\\n       \\n-      <method name=\\\"buildFavIconString\\\">\\n+      <method name=\\\"setIcon\\\">\\n+        <parameter name=\\\"aTab\\\"/>\\n         <parameter name=\\\"aURI\\\"/>\\n         <body>\\n           <![CDATA[\\n-            var end = (aURI.port == -1) ? \\\"/favicon.ico\\\" : (\\\":\\\" + aURI.port + \\\"/favicon.ico\\\");\\n-            return aURI.scheme + \\\"://\\\" + aURI.host + end;\\n+            var browser = this.getBrowserForTab(aTab);\\n+            browser.mIconURL = aURI;\\n+\\n+            this.updateIcon(aTab);\\n+\\n+            for (var i = 0; i < this.mProgressListeners.length; i++) {\\n+              var p = this.mProgressListeners[i];\\n+              if ('onLinkIconAvailable' in p)\\n+                p.onLinkIconAvailable(browser);\\n+            }\\n+          ]]>\\n+        </body>\\n+      </method>\\n+\\n+      <method name=\\\"updateIcon\\\">\\n+        <parameter name=\\\"aTab\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            var browser = this.getBrowserForTab(aTab);\\n+            if (!aTab.hasAttribute(\\\"busy\\\") && browser.mIconURL)\\n+              aTab.setAttribute(\\\"image\\\", browser.mIconURL);\\n+            else\\n+              aTab.removeAttribute(\\\"image\\\");\\n           ]]>\\n         </body>\\n       </method>\\n@@ -453,19 +464,20 @@\\n         </body>\\n       </method>\\n \\n-      <method name=\\\"loadFavIcon\\\">\\n-        <parameter name=\\\"aURI\\\"/>\\n-        <parameter name=\\\"aAttr\\\"/>\\n-        <parameter name=\\\"aElt\\\"/>\\n+      <method name=\\\"useDefaultIcon\\\">\\n+        <parameter name=\\\"aTab\\\"/>\\n         <body>\\n           <![CDATA[\\n-            var iconURL;\\n-            if (this.contentDocument instanceof ImageDocument)\\n-              iconURL = this.currentURI.spec;\\n-            else\\n-              iconURL = this.buildFavIconString(aURI);\\n-            if (!this.isFavIconKnownMissing(iconURL))\\n-              aElt.setAttribute(aAttr, iconURL);\\n+            var browser = this.getBrowserForTab(aTab);\\n+            if (browser.contentDocument instanceof ImageDocument) {\\n+              if (this.mPrefs.getBoolPref(\\\"browser.chrome.site_icons\\\"))\\n+                this.setIcon(aTab, browser.currentURI.spec);\\n+            }\\n+            else if (this.shouldLoadFavIcon(browser.currentURI)) {\\n+              var url = browser.currentURI.prePath + \\\"/favicon.ico\\\";\\n+              if (!this.isIconKnownMissing(url))\\n+                this.setIcon(aTab, url);\\n+            }\\n           ]]>\\n         </body>\\n       </method>\\n@@ -508,7 +520,7 @@\\n         </body>\\n       </method>\\n \\n-      <method name=\\\"isFavIconKnownMissing\\\">\\n+      <method name=\\\"isIconKnownMissing\\\">\\n         <parameter name=\\\"key\\\"/>\\n         <body>\\n           <![CDATA[\\n@@ -638,13 +650,6 @@\\n                 p.onLocationChange(webProgress, null, loc);\\n                 if (securityUI)\\n                   p.onSecurityChange(webProgress, null, securityUI.state);\\n-                var listener = this.mTabListeners[this.mTabContainer.selectedIndex];\\n-                if (listener.mIcon) {\\n-                  if (this.isFavIconKnownMissing(listener.mIcon))\\n-                    listener.mIcon = null;\\n-                  else if ('onLinkIconAvailable' in p)\\n-                    p.onLinkIconAvailable(newBrowser, listener.mIcon);\\n-                }\\n               }\\n             }\\n             this.mCurrentBrowser.userTypedClear = userTypedClear;\\n@@ -797,27 +802,9 @@\\n             // no browser? no favicon.\\n             if (browserIndex == -1)\\n               return;\\n-\\n-            var listener = tabBrowser.mTabListeners[browserIndex];\\n-            // there's no tab listener for non-tabbed mode browser 0\\n-\\n-            if (tabBrowser.isFavIconKnownMissing(href)) {\\n-              if (listener)\\n-                listener.mIcon = null;\\n-              return;\\n-            }\\n-\\n-            if (listener)\\n-              listener.setIcon(href);\\n-\\n-            if (tabBrowser.mProgressListeners) {\\n-              var targetBrowser = tabBrowser.getBrowserAtIndex(browserIndex);\\n-              for (i = 0; i < tabBrowser.mProgressListeners.length; i++) {\\n-                var p = tabBrowser.mProgressListeners[i];\\n-                if (p && 'onLinkIconAvailable' in p)\\n-                  p.onLinkIconAvailable(targetBrowser, href);\\n-              }\\n-            }\\n+      \\n+            var tab = tabBrowser.mTabContainer.childNodes[browserIndex];\\n+            tabBrowser.setIcon(tab, href);\\n           ]]>\\n         </body>\\n       </method>\\n@@ -923,11 +910,7 @@\\n             this.mCurrentBrowser.addEventListener(\\\"DOMTitleChanged\\\", this.onTitleChanged, false);\\n \\n             this.setTabTitle(this.mCurrentTab);\\n-\\n-            // Hook up our favicon.\\n-            var uri = this.mCurrentBrowser.currentURI;\\n-            if (this.shouldLoadFavIcon(uri))\\n-              this.loadFavIcon(uri, \\\"image\\\", this.mCurrentTab);\\n+            this.setIcon(this.mCurrentTab, this.mCurrentBrowser.mIconURL);\\n \\n             var filter;\\n             if (this.mTabFilters.length > 0) {\\n\""}