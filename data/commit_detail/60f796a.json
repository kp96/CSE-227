{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas60f796a\""},"diff":"\"60f796a Bug 370571 - Ability to install as a standard user on Vista is not available. r=sspitzer a=beltzner (blocking-firefox3)\\ndiff --git a/browser/components/shell/src/nsWindowsShellService.cpp b/browser/components/shell/src/nsWindowsShellService.cpp\\nindex c4b6c95..c7cd9fd 100644\\n--- a/browser/components/shell/src/nsWindowsShellService.cpp\\n+++ b/browser/components/shell/src/nsWindowsShellService.cpp\\n@@ -23,7 +23,7 @@\\n  *  Joe Hewitt     <hewitt@netscape.com>   (Set Background)\\n  *  Blake Ross     <blake@cs.stanford.edu> (Desktop Color, DDE support)\\n  *  Jungshik Shin  <jshin@mailaps.org>     (I18N)\\n- *  Robert Strong  <robert.bugzilla@gmail.com>  (Long paths, DDE)\\n+ *  Robert Strong  <robert.bugzilla@gmail.com>\\n  *  Asaf Romano    <mano@mozilla.com>\\n  *  Ryan Jones     <sciguyryan@gmail.com>\\n  *\\n@@ -60,6 +60,7 @@\\n #include \\\"nsBrowserCompsCID.h\\\"\\n #include \\\"nsDirectoryServiceUtils.h\\\"\\n #include \\\"nsAppDirectoryServiceDefs.h\\\"\\n+#include \\\"nsDirectoryServiceDefs.h\\\"\\n #include \\\"nsIWindowsRegKey.h\\\"\\n #include \\\"nsUnicharUtils.h\\\"\\n \\n@@ -82,63 +83,18 @@\\n NS_IMPL_ISUPPORTS2(nsWindowsShellService, nsIWindowsShellService, nsIShellService)\\n \\n static nsresult\\n-OpenUserKeyForReading(HKEY aStartKey, const nsAString& aKeyName, HKEY* aKey)\\n+OpenKeyForReading(HKEY aKeyRoot, const nsAString& aKeyName, HKEY* aKey)\\n {\\n   const nsString &flatName = PromiseFlatString(aKeyName);\\n \\n-  DWORD res = ::RegOpenKeyExW(aStartKey, flatName.get(), 0, KEY_READ, aKey);\\n+  DWORD res = ::RegOpenKeyExW(aKeyRoot, flatName.get(), 0, KEY_READ, aKey);\\n   switch (res) {\\n   case ERROR_SUCCESS:\\n     break;\\n   case ERROR_ACCESS_DENIED:\\n     return NS_ERROR_FILE_ACCESS_DENIED;\\n   case ERROR_FILE_NOT_FOUND:\\n-    if (aStartKey == HKEY_LOCAL_MACHINE) {\\n-      // prevent infinite recursion on the second pass through here if \\n-      // ::RegOpenKeyEx fails in the all-users case. \\n-      return NS_ERROR_NOT_AVAILABLE;\\n-    }\\n-    return OpenUserKeyForReading(HKEY_LOCAL_MACHINE, aKeyName, aKey);\\n-  }\\n-\\n-  return NS_OK;\\n-}\\n-\\n-// Sets the default browser registry keys for Windows versions prior to Vista.\\n-// Try to open / create the key in HKLM and if that fails try to do the same\\n-// in HKCU. Though this is not strictly the behavior I would expect it is the\\n-// same behavior that IE has when setting the default browser previous to Vista.\\n-static nsresult\\n-OpenKeyForWriting(HKEY aStartKey, const nsAString& aKeyName, HKEY* aKey,\\n-                  PRBool aHKLMOnly)\\n-{\\n-  const nsString &flatName = PromiseFlatString(aKeyName);\\n-\\n-  DWORD dwDisp = 0;\\n-  DWORD res = ::RegCreateKeyExW(aStartKey, flatName.get(), 0, NULL,\\n-                                0, KEY_READ | KEY_WRITE, NULL, aKey,\\n-                                &dwDisp);\\n-  switch (res) {\\n-  case ERROR_SUCCESS:\\n-    break;\\n-  case ERROR_ACCESS_DENIED:\\n-    if (aHKLMOnly || aStartKey == HKEY_CURRENT_USER)\\n-      return NS_ERROR_FILE_ACCESS_DENIED;\\n-    // fallback to HKCU immediately on access denied since we won't be able\\n-    // to create the key.\\n-    return OpenKeyForWriting(HKEY_CURRENT_USER, aKeyName, aKey, aHKLMOnly);\\n-  case ERROR_FILE_NOT_FOUND:\\n-    res = ::RegCreateKeyExW(aStartKey, flatName.get(), 0, NULL,\\n-                            0, KEY_READ | KEY_WRITE, NULL, aKey,\\n-                            NULL);\\n-    if (res != ERROR_SUCCESS) {\\n-      if (aHKLMOnly || aStartKey == HKEY_CURRENT_USER) {\\n-        // prevent infinite recursion on the second pass through here if \\n-        // ::RegCreateKey fails in the current user case.\\n-        return NS_ERROR_FILE_ACCESS_DENIED;\\n-      }\\n-      return OpenKeyForWriting(HKEY_CURRENT_USER, aKeyName, aKey, aHKLMOnly);\\n-    }\\n+    return NS_ERROR_NOT_AVAILABLE;\\n   }\\n \\n   return NS_OK;\\n@@ -147,6 +103,9 @@ OpenKeyForWriting(HKEY aStartKey, const nsAString& aKeyName, HKEY* aKey,\\n ///////////////////////////////////////////////////////////////////////////////\\n // Default Browser Registry Settings\\n //\\n+// The setting of these values are made by an external binary since writing\\n+// these values may require elevation.\\n+//\\n // - File Extension Mappings\\n //   -----------------------\\n //   The following file extensions:\\n@@ -214,9 +173,6 @@ typedef enum {\\n   NO_SUBSTITUTION           = 0x00,\\n   APP_PATH_SUBSTITUTION     = 0x01,\\n   EXE_NAME_SUBSTITUTION     = 0x02,\\n-  UNINST_PATH_SUBSTITUTION  = 0x04,\\n-  HKLM_ONLY                 = 0x08,\\n-  NON_ESSENTIAL             = 0x10\\n } SettingFlags;\\n \\n typedef struct {\\n@@ -228,17 +184,8 @@ typedef struct {\\n } SETTING;\\n \\n #define APP_REG_NAME L\\\"Firefox\\\"\\n-#define SMI \\\"SOFTWARE\\\\\\\\Clients\\\\\\\\StartMenuInternet\\\\\\\\\\\"\\n-#define CLS \\\"SOFTWARE\\\\\\\\Classes\\\\\\\\\\\"\\n #define DI \\\"\\\\\\\\DefaultIcon\\\"\\n-#define II \\\"\\\\\\\\InstallInfo\\\"\\n #define SOP \\\"\\\\\\\\shell\\\\\\\\open\\\\\\\\command\\\"\\n-#define DDE \\\"\\\\\\\\shell\\\\\\\\open\\\\\\\\ddeexec\\\\\\\\\\\"\\n-#define DDE_NAME \\\"Firefox\\\" // This must be kept in sync with ID_DDE_APPLICATION_NAME as defined in splash.rc\\n-#define DDE_COMMAND \\\"\\\\\\\"%1\\\\\\\",,0,0,,,,\\\"\\n-// For the InstallInfo HideIconsCommand, ShowIconsCommand, and ReinstallCommand\\n-// registry keys. This must be kept in sync with the uninstaller.\\n-#define UNINSTALL_EXE \\\"\\\\\\\\uninstall\\\\\\\\helper.exe\\\"\\n \\n #define CLS_HTML \\\"FirefoxHTML\\\"\\n #define CLS_URL \\\"FirefoxURL\\\"\\n@@ -248,93 +195,24 @@ typedef struct {\\n #define MAKE_KEY_NAME1(PREFIX, MID) \\\\\\n   PREFIX MID\\n \\n-#define MAKE_KEY_NAME2(PREFIX, MID, SUFFIX) \\\\\\n-  PREFIX MID SUFFIX\\n-\\n-#define MAKE_KEY_NAME3(PREFIX, MID, MID2, SUFFIX) \\\\\\n-  PREFIX MID MID2 SUFFIX\\n-\\n-// The DefaultIcon registry key value should never be used (e.g. NON_ESSENTIAL)\\n-// when checking if Firefox is the default browser since other applications\\n-// (e.g. MS Office) may modify the DefaultIcon registry key value to add Icon\\n-// Handlers.\\n+// The DefaultIcon registry key value should never be used when checking if\\n+// Firefox is the default browser since other applications (e.g. MS Office) may\\n+// modify the DefaultIcon registry key value to add Icon Handlers.\\n // see http://msdn2.microsoft.com/en-us/library/aa969357.aspx for more info.\\n static SETTING gSettings[] = {\\n-  // File Extension Aliases\\n-  { MAKE_KEY_NAME1(CLS, \\\".htm\\\"),    \\\"\\\", CLS_HTML, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME1(CLS, \\\".html\\\"),   \\\"\\\", CLS_HTML, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME1(CLS, \\\".shtml\\\"),  \\\"\\\", CLS_HTML, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME1(CLS, \\\".xht\\\"),    \\\"\\\", CLS_HTML, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME1(CLS, \\\".xhtml\\\"),  \\\"\\\", CLS_HTML, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-\\n   // File Extension Class - as of 1.8.1.2 the value for VAL_OPEN is also checked\\n   // for CLS_HTML since Firefox should also own opeing local files when set as\\n   // the default browser.\\n-  { MAKE_KEY_NAME2(CLS, CLS_HTML, DI),  \\\"\\\", VAL_FILE_ICON, APP_PATH_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(CLS, CLS_HTML, SOP), \\\"\\\", VAL_OPEN, APP_PATH_SUBSTITUTION },\\n+  { MAKE_KEY_NAME1(CLS_HTML, SOP), \\\"\\\", VAL_OPEN, APP_PATH_SUBSTITUTION },\\n \\n   // Protocol Handler Class - for Vista and above\\n-  { MAKE_KEY_NAME2(CLS, CLS_URL, DI),  \\\"\\\", VAL_FILE_ICON, APP_PATH_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(CLS, CLS_URL, SOP), \\\"\\\", VAL_OPEN, APP_PATH_SUBSTITUTION },\\n+  { MAKE_KEY_NAME1(CLS_URL, SOP), \\\"\\\", VAL_OPEN, APP_PATH_SUBSTITUTION },\\n \\n   // Protocol Handlers\\n-  { MAKE_KEY_NAME2(CLS, \\\"HTTP\\\", DI),    \\\"\\\", VAL_FILE_ICON, APP_PATH_SUBSTITUTION },\\n-  { MAKE_KEY_NAME2(CLS, \\\"HTTP\\\", SOP),   \\\"\\\", VAL_OPEN, APP_PATH_SUBSTITUTION },\\n-  { MAKE_KEY_NAME2(CLS, \\\"HTTPS\\\", DI),   \\\"\\\", VAL_FILE_ICON, APP_PATH_SUBSTITUTION },\\n-  { MAKE_KEY_NAME2(CLS, \\\"HTTPS\\\", SOP),  \\\"\\\", VAL_OPEN, APP_PATH_SUBSTITUTION },\\n-  { MAKE_KEY_NAME2(CLS, \\\"FTP\\\", DI),     \\\"\\\", VAL_FILE_ICON, APP_PATH_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(CLS, \\\"FTP\\\", SOP),    \\\"\\\", VAL_OPEN, APP_PATH_SUBSTITUTION | NON_ESSENTIAL },\\n-\\n-  // DDE settings\\n-  { MAKE_KEY_NAME2(CLS, CLS_HTML, DDE), \\\"\\\", DDE_COMMAND, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, CLS_HTML, DDE, \\\"Application\\\"), \\\"\\\", DDE_NAME, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, CLS_HTML, DDE, \\\"Topic\\\"), \\\"\\\", \\\"WWW_OpenURL\\\", NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(CLS, CLS_URL, DDE), \\\"\\\", DDE_COMMAND, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, CLS_URL, DDE, \\\"Application\\\"), \\\"\\\", DDE_NAME, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, CLS_URL, DDE, \\\"Topic\\\"), \\\"\\\", \\\"WWW_OpenURL\\\", NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(CLS, \\\"HTTP\\\", DDE), \\\"\\\", DDE_COMMAND, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, \\\"HTTP\\\", DDE, \\\"Application\\\"), \\\"\\\", DDE_NAME, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, \\\"HTTP\\\", DDE, \\\"Topic\\\"), \\\"\\\", \\\"WWW_OpenURL\\\", NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(CLS, \\\"HTTPS\\\", DDE), \\\"\\\", DDE_COMMAND, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, \\\"HTTPS\\\", DDE, \\\"Application\\\"), \\\"\\\", DDE_NAME, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, \\\"HTTPS\\\", DDE, \\\"Topic\\\"), \\\"\\\", \\\"WWW_OpenURL\\\", NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(CLS, \\\"FTP\\\", DDE), \\\"\\\", DDE_COMMAND, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, \\\"FTP\\\", DDE, \\\"Application\\\"), \\\"\\\", DDE_NAME, NO_SUBSTITUTION | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME3(CLS, \\\"FTP\\\", DDE, \\\"Topic\\\"), \\\"\\\", \\\"WWW_OpenURL\\\", NO_SUBSTITUTION | NON_ESSENTIAL },\\n-\\n-  // Windows XP Start Menu\\n-  { MAKE_KEY_NAME2(SMI, \\\"%APPEXE%\\\", DI),  \\n-    \\\"\\\", \\n-    \\\"%APPPATH%,0\\\", \\n-    APP_PATH_SUBSTITUTION | EXE_NAME_SUBSTITUTION | HKLM_ONLY | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(SMI, \\\"%APPEXE%\\\", II),\\n-    \\\"HideIconsCommand\\\",\\n-    \\\"\\\\\\\"%UNINSTPATH%\\\\\\\" /HideShortcuts\\\",\\n-    UNINST_PATH_SUBSTITUTION | EXE_NAME_SUBSTITUTION | HKLM_ONLY | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(SMI, \\\"%APPEXE%\\\", II),\\n-    \\\"ReinstallCommand\\\",\\n-    \\\"\\\\\\\"%UNINSTPATH%\\\\\\\" /SetAsDefaultAppGlobal\\\",\\n-    UNINST_PATH_SUBSTITUTION | EXE_NAME_SUBSTITUTION | HKLM_ONLY | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(SMI, \\\"%APPEXE%\\\", II),\\n-    \\\"ShowIconsCommand\\\",\\n-    \\\"\\\\\\\"%UNINSTPATH%\\\\\\\" /ShowShortcuts\\\",\\n-    UNINST_PATH_SUBSTITUTION | EXE_NAME_SUBSTITUTION | HKLM_ONLY | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME2(SMI, \\\"%APPEXE%\\\", SOP), \\n-    \\\"\\\", \\n-    \\\"%APPPATH%\\\",   \\n-    APP_PATH_SUBSTITUTION | EXE_NAME_SUBSTITUTION | HKLM_ONLY | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME1(SMI, \\\"%APPEXE%\\\\\\\\shell\\\\\\\\properties\\\\\\\\command\\\"),\\n-    \\\"\\\", \\n-    \\\"\\\\\\\"%APPPATH%\\\\\\\" -preferences\\\",\\n-    APP_PATH_SUBSTITUTION | EXE_NAME_SUBSTITUTION | HKLM_ONLY | NON_ESSENTIAL },\\n-  { MAKE_KEY_NAME1(SMI, \\\"%APPEXE%\\\\\\\\shell\\\\\\\\safemode\\\\\\\\command\\\"),\\n-    \\\"\\\", \\n-    \\\"\\\\\\\"%APPPATH%\\\\\\\" -safe-mode\\\",\\n-    APP_PATH_SUBSTITUTION | EXE_NAME_SUBSTITUTION | HKLM_ONLY | NON_ESSENTIAL }\\n-\\n-  // These values must be set by hand, since they contain localized strings.\\n-  //     firefox.exe\\\\shell\\\\properties        (default)   REG_SZ  Firefox &Options\\n-  //     firefox.exe\\\\shell\\\\safemode          (default)   REG_SZ  Firefox &Safe Mode\\n+  { MAKE_KEY_NAME1(\\\"HTTP\\\", DI),    \\\"\\\", VAL_FILE_ICON, APP_PATH_SUBSTITUTION },\\n+  { MAKE_KEY_NAME1(\\\"HTTP\\\", SOP),   \\\"\\\", VAL_OPEN, APP_PATH_SUBSTITUTION },\\n+  { MAKE_KEY_NAME1(\\\"HTTPS\\\", DI),   \\\"\\\", VAL_FILE_ICON, APP_PATH_SUBSTITUTION },\\n+  { MAKE_KEY_NAME1(\\\"HTTPS\\\", SOP),  \\\"\\\", VAL_OPEN, APP_PATH_SUBSTITUTION }\\n };\\n \\n \\n@@ -411,39 +289,15 @@ nsWindowsShellService::IsDefaultBrowserVista(PRBool aStartupCheck, PRBool* aIsDe\\n   return PR_FALSE;\\n }\\n \\n-PRBool\\n-nsWindowsShellService::SetDefaultBrowserVista()\\n-{\\n-  IApplicationAssociationRegistration* pAAR;\\n-  \\n-  HRESULT hr = CoCreateInstance(CLSID_ApplicationAssociationReg,\\n-                                NULL,\\n-                                CLSCTX_INPROC,\\n-                                IID_IApplicationAssociationReg,\\n-                                (void**)&pAAR);\\n-  \\n-  if (SUCCEEDED(hr)) {\\n-    hr = pAAR->SetAppAsDefaultAll(APP_REG_NAME);\\n-    \\n-    pAAR->Release();\\n-    return PR_TRUE;\\n-  }\\n-  \\n-  return PR_FALSE;\\n-}\\n-\\n NS_IMETHODIMP\\n nsWindowsShellService::IsDefaultBrowser(PRBool aStartupCheck,\\n                                         PRBool* aIsDefaultBrowser)\\n {\\n-  // To support side by side installs on Vista we also need to check if the\\n-  // FirefoxHTML and FirefoxURL registry keys in HKLM / HKCU point to our\\n-  // install location. If the HKLM keys point to this install location we have\\n-  // to verify that the keys don't exist in HKCU and remove them if the app is\\n-  // then set as default. If the HKLM keys don't point to this install location\\n-  // then we have to add these keys in HKCU to over-ride the HKLM keys.\\n-  if (IsDefaultBrowserVista(aStartupCheck, aIsDefaultBrowser))\\n-    return NS_OK;\\n+  // If this is the first browser window, maintain internal state that we've\\n+  // checked this session (so that subsequent window opens don't show the \\n+  // default browser dialog).\\n+  if (aStartupCheck)\\n+    mCheckedThisSession = PR_TRUE;\\n \\n   SETTING* settings;\\n   SETTING* end = gSettings + sizeof(gSettings)/sizeof(SETTING);\\n@@ -478,9 +332,6 @@ nsWindowsShellService::IsDefaultBrowser(PRBool aStartupCheck,\\n \\n   PRUnichar currValue[MAX_BUF];\\n   for (settings = gSettings; settings < end; ++settings) {\\n-    if (settings->flags & NON_ESSENTIAL)\\n-      continue; // This is not a registry key that determines whether\\n-                // or not we consider Firefox the \\\"Default Browser.\\\"\\n     NS_ConvertUTF8toUTF16 dataLongPath(settings->valueData);\\n     NS_ConvertUTF8toUTF16 dataShortPath(settings->valueData);\\n     NS_ConvertUTF8toUTF16 key(settings->keyName);\\n@@ -502,7 +353,7 @@ nsWindowsShellService::IsDefaultBrowser(PRBool aStartupCheck,\\n \\n     ::ZeroMemory(currValue, sizeof(currValue));\\n     HKEY theKey;\\n-    rv = OpenUserKeyForReading(HKEY_CURRENT_USER, key, &theKey);\\n+    rv = OpenKeyForReading(HKEY_CLASSES_ROOT, key, &theKey);\\n     if (NS_SUCCEEDED(rv)) {\\n       DWORD len = sizeof currValue;\\n       DWORD res = ::RegQueryValueExW(theKey, PromiseFlatString(value).get(),\\n@@ -514,250 +365,60 @@ nsWindowsShellService::IsDefaultBrowser(PRBool aStartupCheck,\\n           !dataShortPath.Equals(currValue, CaseInsensitiveCompare)) {\\n         // Key wasn't set, or was set to something else (something else became the default browser)\\n         *aIsDefaultBrowser = PR_FALSE;\\n-        break;\\n+        return NS_OK;\\n       }\\n     }\\n   }\\n \\n-  // If this is the first browser window, maintain internal state that we've\\n-  // checked this session (so that subsequent window opens don't show the \\n-  // default browser dialog).\\n-  if (aStartupCheck)\\n-    mCheckedThisSession = PR_TRUE;\\n+  // Only check if Firefox is the default browser on Vista if the previous\\n+  // checks show that Firefox is the default browser.\\n+  if (aIsDefaultBrowser)\\n+    IsDefaultBrowserVista(aStartupCheck, aIsDefaultBrowser);\\n \\n   return NS_OK;\\n }\\n \\n-DWORD\\n-nsWindowsShellService::DeleteRegKeyDefaultValue(HKEY baseKey,\\n-                                                const nsString& keyName)\\n-{\\n-  HKEY key;\\n-  DWORD res = ::RegOpenKeyExW(baseKey, keyName.get(),\\n-                              0, KEY_WRITE, &key);\\n-  if (res == ERROR_SUCCESS) {\\n-    res = ::RegDeleteValueW(key, EmptyString().get());\\n-    ::RegCloseKey(key);\\n-  }\\n-\\n-  return res;\\n-}\\n-\\n NS_IMETHODIMP\\n nsWindowsShellService::SetDefaultBrowser(PRBool aClaimAllTypes, PRBool aForAllUsers)\\n {\\n-  // Delete the protocol and file handlers under HKCU if they exist. This way\\n-  // the HKCU registry is cleaned up when HKLM is writeable or if it isn't\\n-  // the values will then be added under HKCU.\\n-  (void)DeleteRegKey(HKEY_CURRENT_USER,\\n-    NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\http\\\\\\\\shell\\\\\\\\open\\\"));\\n-  (void)DeleteRegKey(HKEY_CURRENT_USER,\\n-    NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\http\\\\\\\\DefaultIcon\\\"));\\n-  (void)DeleteRegKey(HKEY_CURRENT_USER,\\n-    NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\https\\\\\\\\shell\\\\\\\\open\\\"));\\n-  (void)DeleteRegKey(HKEY_CURRENT_USER,\\n-     NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\https\\\\\\\\DefaultIcon\\\"));\\n-  (void)DeleteRegKey(HKEY_CURRENT_USER,\\n-   NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\ftp\\\\\\\\shell\\\\\\\\open\\\"));\\n-  (void)DeleteRegKey(HKEY_CURRENT_USER,\\n-     NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\ftp\\\\\\\\DefaultIcon\\\"));\\n-  (void)DeleteRegKey(HKEY_CURRENT_USER,\\n-     NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\FirefoxURL\\\"));\\n-  (void)DeleteRegKey(HKEY_CURRENT_USER,\\n-     NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\FirefoxHTML\\\"));\\n-\\n-  (void)DeleteRegKeyDefaultValue(HKEY_CURRENT_USER,\\n-     NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\.htm\\\"));\\n-  (void)DeleteRegKeyDefaultValue(HKEY_CURRENT_USER,\\n-     NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\.html\\\"));\\n-  (void)DeleteRegKeyDefaultValue(HKEY_CURRENT_USER,\\n-     NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\.shtml\\\"));\\n-  (void)DeleteRegKeyDefaultValue(HKEY_CURRENT_USER,\\n-     NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\.xht\\\"));\\n-  (void)DeleteRegKeyDefaultValue(HKEY_CURRENT_USER,\\n-     NS_LITERAL_STRING(\\\"Software\\\\\\\\Classes\\\\\\\\.xhtml\\\"));\\n-\\n-  if (!aForAllUsers && SetDefaultBrowserVista())\\n-    return NS_OK;\\n-\\n-  SETTING* settings;\\n-  SETTING* end = gSettings + sizeof(gSettings)/sizeof(SETTING);\\n-\\n-  PRUnichar exePath[MAX_BUF];\\n-  if (!::GetModuleFileNameW(0, exePath, MAX_BUF))\\n-    return NS_ERROR_FAILURE;\\n-\\n-  nsAutoString appLongPath(exePath);\\n-\\n-  nsCOMPtr<nsILocalFile> lf;\\n-  nsresult rv = NS_NewLocalFile(nsDependentString(exePath), PR_TRUE,\\n-                                getter_AddRefs(lf));\\n-  if (NS_FAILED(rv))\\n-    return rv;\\n-\\n-  nsAutoString exeName;\\n-  rv = lf->GetLeafName(exeName);\\n-  if (NS_FAILED(rv))\\n-    return rv;\\n-  ToUpperCase(exeName);\\n-\\n-  nsCOMPtr<nsIFile> appDir;\\n-  rv = lf->GetParent(getter_AddRefs(appDir));\\n-  if (NS_FAILED(rv))\\n-    return rv;\\n-\\n-  nsAutoString uninstLongPath;\\n-  appDir->GetPath(uninstLongPath);\\n-  uninstLongPath.AppendLiteral(UNINSTALL_EXE);\\n-\\n-  for (settings = gSettings; settings < end; ++settings) {\\n-    NS_ConvertUTF8toUTF16 dataLongPath(settings->valueData);\\n-    NS_ConvertUTF8toUTF16 key(settings->keyName);\\n-    NS_ConvertUTF8toUTF16 value(settings->valueName);\\n-    if (settings->flags & APP_PATH_SUBSTITUTION) {\\n-      PRInt32 offset = dataLongPath.Find(\\\"%APPPATH%\\\");\\n-      dataLongPath.Replace(offset, 9, appLongPath);\\n-    }\\n-    if (settings->flags & UNINST_PATH_SUBSTITUTION) {\\n-      PRInt32 offset = dataLongPath.Find(\\\"%UNINSTPATH%\\\");\\n-      dataLongPath.Replace(offset, 12, uninstLongPath);\\n-    }\\n-    if (settings->flags & EXE_NAME_SUBSTITUTION) {\\n-      PRInt32 offset = key.Find(\\\"%APPEXE%\\\");\\n-      key.Replace(offset, 8, exeName);\\n-    }\\n-\\n-    SetRegKey(key, value, dataLongPath,\\n-              (settings->flags & HKLM_ONLY));\\n-  }\\n-\\n-  // Select the Default Browser for the Windows XP Start Menu\\n-  SetRegKey(NS_LITERAL_STRING(SMI), EmptyString(), exeName, PR_TRUE);\\n+  nsresult rv;\\n+  nsCOMPtr<nsIProperties> directoryService = \\n+    do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  nsCOMPtr<nsIStringBundleService>\\n-    bundleService(do_GetService(\\\"@mozilla.org/intl/stringbundle;1\\\"));\\n-  if (!bundleService)\\n-    return NS_ERROR_FAILURE;\\n+  nsCOMPtr<nsILocalFile> appHelper;\\n+  rv = directoryService->Get(NS_XPCOM_CURRENT_PROCESS_DIR, NS_GET_IID(nsILocalFile), getter_AddRefs(appHelper));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  nsCOMPtr<nsIStringBundle> bundle, brandBundle;\\n-  rv = bundleService->CreateBundle(SHELLSERVICE_PROPERTIES, getter_AddRefs(bundle));\\n+  rv = appHelper->AppendNative(NS_LITERAL_CSTRING(\\\"uninstall\\\"));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n-  rv = bundleService->CreateBundle(BRAND_PROPERTIES, getter_AddRefs(brandBundle));\\n+\\n+  rv = appHelper->AppendNative(NS_LITERAL_CSTRING(\\\"helper.exe\\\"));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  // Create the Start Menu item if it doesn't exist\\n-  nsString brandFullName;\\n-  brandBundle->GetStringFromName(NS_LITERAL_STRING(\\\"brandFullName\\\").get(),\\n-                                 getter_Copies(brandFullName));\\n-\\n-  nsAutoString key1(NS_LITERAL_STRING(SMI));\\n-  key1.Append(exeName);\\n-  key1.AppendLiteral(\\\"\\\\\\\\\\\");\\n-  SetRegKey(key1, EmptyString(), brandFullName, PR_TRUE);\\n-\\n-  // Set the Options and Safe Mode start menu context menu item labels\\n-  nsAutoString optionsKey(NS_LITERAL_STRING(SMI));\\n-  optionsKey.Append(exeName);\\n-  optionsKey.AppendLiteral(\\\"\\\\\\\\shell\\\\\\\\properties\\\");\\n-\\n-  nsAutoString safeModeKey(NS_LITERAL_STRING(SMI));\\n-  safeModeKey.Append(exeName);\\n-  safeModeKey.AppendLiteral(\\\"\\\\\\\\shell\\\\\\\\safemode\\\");\\n-\\n-  nsString brandShortName;\\n-  brandBundle->GetStringFromName(NS_LITERAL_STRING(\\\"brandShortName\\\").get(),\\n-                                 getter_Copies(brandShortName));\\n-\\n-  const PRUnichar* brandNameStrings[] = { brandShortName.get() };\\n-\\n-  // Set the Options menu item\\n-  nsString optionsTitle;\\n-  bundle->FormatStringFromName(NS_LITERAL_STRING(\\\"optionsLabel\\\").get(),\\n-                               brandNameStrings, 1,\\n-                               getter_Copies(optionsTitle));\\n-  // Set the Safe Mode menu item\\n-  nsString safeModeTitle;\\n-  bundle->FormatStringFromName(NS_LITERAL_STRING(\\\"safeModeLabel\\\").get(),\\n-                               brandNameStrings, 1,\\n-                               getter_Copies(safeModeTitle));\\n-\\n-  // Set the registry keys\\n-  SetRegKey(optionsKey, EmptyString(), optionsTitle, PR_TRUE);\\n-  SetRegKey(safeModeKey, EmptyString(), safeModeTitle, PR_TRUE);\\n-\\n-  // Refresh the Shell\\n-  SHChangeNotify(SHCNE_ASSOCCHANGED, SHCNF_IDLIST, 0, 0);\\n-  return NS_OK;\\n-}\\n+  nsCAutoString appHelperPath;\\n+  rv = appHelper->GetNativePath(appHelperPath);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n-// Utility function to delete a registry subkey.\\n-DWORD\\n-nsWindowsShellService::DeleteRegKey(HKEY baseKey, const nsString& keyName)\\n-{\\n-  // Make sure input subkey isn't null.\\n-  if (keyName.IsEmpty())\\n-    return ERROR_BADKEY;\\n-\\n-  const nsString &flatName = PromiseFlatString(keyName);\\n-\\n-  // Open subkey.\\n-  HKEY key;\\n-  DWORD res = ::RegOpenKeyExW(baseKey, flatName.get(), 0,\\n-                              KEY_ENUMERATE_SUB_KEYS | DELETE, &key);\\n-  // Continue till we get an error or are done.\\n-  while (res == ERROR_SUCCESS) {\\n-    PRUnichar subkeyName[MAX_PATH];\\n-    DWORD len = sizeof subkeyName;\\n-    // Get first subkey name.  Note that we always get the\\n-    // first one, then delete it.  So we need to get\\n-    // the first one next time, also.\\n-    res = ::RegEnumKeyExW(key, 0, subkeyName, &len, NULL, NULL,\\n-                          NULL, NULL);\\n-    if (res == ERROR_NO_MORE_ITEMS) {\\n-      // No more subkeys.  Delete the main one.\\n-      res = ::RegDeleteKeyW(baseKey, flatName.get());\\n-      break;\\n-    }\\n-    // If we find another subkey, delete it, recursively.\\n-    if (res == ERROR_SUCCESS)\\n-      res = DeleteRegKey(key, nsDependentString(subkeyName));\\n+  if (aForAllUsers) {\\n+    appHelperPath.AppendLiteral(\\\" /SetAsDefaultAppGlobal\\\");\\n+  } else {\\n+    appHelperPath.AppendLiteral(\\\" /SetAsDefaultAppUser\\\");\\n   }\\n-  \\n-  // Close the key we opened.\\n-  ::RegCloseKey(key);\\n-  return res;\\n-}\\n \\n-void\\n-nsWindowsShellService::SetRegKey(const nsString& aKeyName,\\n-                                 const nsString& aValueName,\\n-                                 const nsString& aValue, PRBool aHKLMOnly)\\n-{\\n-  PRUnichar buf[MAX_BUF];\\n-  DWORD len = sizeof buf;\\n+  STARTUPINFO si = {sizeof(si), 0};\\n+  PROCESS_INFORMATION pi = {0};\\n \\n-  HKEY theKey;\\n-  nsresult rv = OpenKeyForWriting(HKEY_LOCAL_MACHINE, aKeyName, &theKey,\\n-                                  aHKLMOnly);\\n-  if (NS_FAILED(rv))\\n-    return;\\n-\\n-  // Get the old value\\n-  DWORD res = ::RegQueryValueExW(theKey, PromiseFlatString(aValueName).get(),\\n-                                 NULL, NULL, (LPBYTE)buf, &len);\\n+  BOOL ok = CreateProcess(NULL, (LPSTR)appHelperPath.get(), NULL, NULL,\\n+                          FALSE, 0, NULL, NULL, &si, &pi);\\n \\n-  // Set the new value\\n-  nsAutoString current(buf);\\n-  if (REG_FAILED(res) || !current.Equals(aValue)) {\\n-    const nsString &flatValue = PromiseFlatString(aValue);\\n+  if (!ok)\\n+    return NS_ERROR_FAILURE;\\n \\n-    ::RegSetValueExW(theKey, PromiseFlatString(aValueName).get(),\\n-                     0, REG_SZ, (const BYTE *)flatValue.get(),\\n-                     (flatValue.Length() + 1) * sizeof(PRUnichar));\\n-  }\\n+  CloseHandle(pi.hProcess);\\n+  CloseHandle(pi.hThread);\\n \\n-  // Close the key we opened.\\n-  ::RegCloseKey(theKey);\\n+  return NS_OK;\\n }\\n \\n NS_IMETHODIMP\\n@@ -1007,13 +668,10 @@ nsWindowsShellService::OpenApplication(PRInt32 aApplication)\\n   //             \\\\Client Subkey Name\\\\shell\\\\open\\\\command\\\\ \\n   //             \\\\Client Subkey Name\\\\shell\\\\open\\\\command\\\\(default) = path to exe\\n   //\\n-  nsAutoString clientKey;\\n-  clientKey.AssignLiteral(\\\"SOFTWARE\\\\\\\\Clients\\\\\\\\\\\");\\n-  clientKey.Append(application);\\n \\n   // Find the default application for this class.\\n   HKEY theKey;\\n-  nsresult rv = OpenUserKeyForReading(HKEY_CURRENT_USER, clientKey, &theKey);\\n+  nsresult rv = OpenKeyForReading(HKEY_CLASSES_ROOT, application, &theKey);\\n   if (NS_FAILED(rv))\\n     return rv;\\n \\n@@ -1029,11 +687,11 @@ nsWindowsShellService::OpenApplication(PRInt32 aApplication)\\n   ::RegCloseKey(theKey);\\n \\n   // Find the \\\"open\\\" command\\n-  clientKey.AppendLiteral(\\\"\\\\\\\\\\\");\\n-  clientKey.Append(buf);\\n-  clientKey.AppendLiteral(\\\"\\\\\\\\shell\\\\\\\\open\\\\\\\\command\\\");\\n+  application.AppendLiteral(\\\"\\\\\\\\\\\");\\n+  application.Append(buf);\\n+  application.AppendLiteral(\\\"\\\\\\\\shell\\\\\\\\open\\\\\\\\command\\\");\\n \\n-  rv = OpenUserKeyForReading(HKEY_CURRENT_USER, clientKey, &theKey);\\n+  rv = OpenKeyForReading(HKEY_CLASSES_ROOT, application, &theKey);\\n   if (NS_FAILED(rv))\\n     return rv;\\n \\ndiff --git a/browser/installer/windows/nsis/installer.nsi b/browser/installer/windows/nsis/installer.nsi\\nindex c175bfd..00bcf09 100755\\n--- a/browser/installer/windows/nsis/installer.nsi\\n+++ b/browser/installer/windows/nsis/installer.nsi\\n@@ -35,7 +35,9 @@\\n # ***** END LICENSE BLOCK *****\\n \\n # Required Plugins:\\n-# ShellLink    http://nsis.sourceforge.net/ShellLink_plug-in\\n+# SetVistaDefaultApp http://nsis.sourceforge.net/SetVistaDefaultApp_plug-in\\n+# ShellLink          http://nsis.sourceforge.net/ShellLink_plug-in\\n+# UAC                http://nsis.sourceforge.net/UAC_plug-in\\n \\n ; Set verbosity to 3 (e.g. no script) to lessen the noise in the build logs\\n !verbose 3\\n@@ -54,6 +56,9 @@ CRCCheck on\\n !system 'echo ; > shortcuts.ini'\\n !system 'echo ; > summary.ini'\\n \\n+; USE_UAC_PLUGIN is temporary until Thunderbird has been updated to use the UAC plugin\\n+!define USE_UAC_PLUGIN\\n+\\n Var TmpVal\\n Var StartMenuDir\\n Var InstallType\\n@@ -75,16 +80,17 @@ Var AddDesktopSC\\n ; available.\\n !include /NONFATAL WinVer.nsh\\n !ifdef ___WINVER__NSH___\\n-  RequestExecutionLevel admin\\n+  RequestExecutionLevel user\\n !else\\n   !warning \\\"Installer will be created without Vista compatibility.$\\\\n            \\\\\\n             Upgrade your NSIS installation to at least version 2.22 to resolve.\\\"\\n !endif\\n \\n+!insertmacro GetOptions\\n+!insertmacro GetParameters\\n+!insertmacro GetSize\\n !insertmacro StrFilter\\n-!insertmacro WordFind\\n !insertmacro WordReplace\\n-!insertmacro GetSize\\n \\n ; NSIS provided macros that we have overridden\\n !include overrides.nsh\\n@@ -103,10 +109,13 @@ VIAddVersionKey \\\"FileDescription\\\" \\\"${BrandShortName} Installer\\\"\\n ; Must be inserted before other macros that use logging\\n !insertmacro _LoggingCommon\\n \\n-!insertmacro AddHandlerValues\\n+!insertmacro AddDDEHandlerValues\\n !insertmacro CloseApp\\n !insertmacro CreateRegKey\\n+!insertmacro GetPathFromString\\n+!insertmacro IsHandlerForInstallDir\\n !insertmacro ManualCloseAppPrompt\\n+!insertmacro RegCleanAppHandler\\n !insertmacro RegCleanMain\\n !insertmacro RegCleanUninstall\\n !insertmacro WriteRegStr2\\n@@ -365,29 +374,25 @@ Section \\\"-Application\\\" APP_IDX\\n     StrCpy $AddDesktopSC \\\"1\\\"\\n   ${EndIf}\\n \\n-  ; Remove registry entries for non-existent apps and for apps that point to our\\n-  ; install location in the Software\\\\Mozilla key and uninstall registry entries\\n-  ; that point to our install location for both HKCU and HKLM.\\n+  ${LogHeader} \\\"Adding Registry Entries\\\"\\n   SetShellVarContext current  ; Set SHCTX to HKCU\\n   ${RegCleanMain} \\\"Software\\\\Mozilla\\\"\\n   ${RegCleanUninstall}\\n \\n-  SetShellVarContext all  ; Set SHCTX to HKLM\\n-  ${RegCleanMain} \\\"Software\\\\Mozilla\\\"\\n-  ${RegCleanUninstall}\\n-\\n-  ${LogHeader} \\\"Adding Registry Entries\\\"\\n   ClearErrors\\n   WriteRegStr HKLM \\\"Software\\\\Mozilla\\\\InstallerTest\\\" \\\"InstallerTest\\\" \\\"Test\\\"\\n   ${If} ${Errors}\\n-    SetShellVarContext current  ; Set SHCTX to HKCU\\n     StrCpy $TmpVal \\\"HKCU\\\" ; used primarily for logging\\n   ${Else}\\n     SetShellVarContext all  ; Set SHCTX to HKLM\\n     DeleteRegKey HKLM \\\"Software\\\\Mozilla\\\\InstallerTest\\\"\\n     StrCpy $TmpVal \\\"HKLM\\\" ; used primarily for logging\\n+    ${RegCleanMain} \\\"Software\\\\Mozilla\\\"\\n+    ${RegCleanUninstall}\\n   ${EndIf}\\n \\n+  ${RemoveDeprecatedKeys}\\n+\\n   ; The previous installer adds several regsitry values to both HKLM and HKCU.\\n   ; We now try to add to HKLM and if that fails to HKCU\\n \\n@@ -404,6 +409,18 @@ Section \\\"-Application\\\" APP_IDX\\n   ${WriteRegDWORD2} $TmpVal \\\"$0\\\" \\\"Create Start Menu Shortcut\\\" $AddStartMenuSC 0\\n \\n   ${FixClassKeys}\\n+  ${UpdateProtocolHandlers}\\n+\\n+  ; On install always add the FirefoxHTML and FirefoxURL keys.\\n+  ; An empty string is used for the 5th param because FirefoxHTML is not a\\n+  ; protocol handler.\\n+  ${AddDDEHandlerValues} \\\"FirefoxHTML\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"${AppRegName} Document\\\" \\\"\\\" \\\\\\n+                         \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n+\\n+  ${AddDDEHandlerValues} \\\"FirefoxURL\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"${AppRegName} URL\\\" \\\"true\\\" \\\\\\n+                         \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n+\\n+  ${FixShellIconHandler}\\n \\n   ; The following keys should only be set if we can write to HKLM\\n   ${If} $TmpVal == \\\"HKLM\\\"\\n@@ -415,10 +432,10 @@ Section \\\"-Application\\\" APP_IDX\\n \\n     ; If we are writing to HKLM and create the quick launch and the desktop\\n     ; shortcuts set IconsVisible to 1 otherwise to 0.\\n+    ${StrFilter} \\\"${FileMainEXE}\\\" \\\"+\\\" \\\"\\\" \\\"\\\" $R9\\n+    StrCpy $0 \\\"Software\\\\Clients\\\\StartMenuInternet\\\\$R9\\\\InstallInfo\\\"\\n     ${If} $AddQuickLaunchSC == 1\\n     ${OrIf} $AddDesktopSC == 1\\n-      ${StrFilter} \\\"${FileMainEXE}\\\" \\\"+\\\" \\\"\\\" \\\"\\\" $R9\\n-      StrCpy $0 \\\"Software\\\\Clients\\\\StartMenuInternet\\\\$R9\\\\InstallInfo\\\"\\n       WriteRegDWORD HKLM \\\"$0\\\" \\\"IconsVisible\\\" 1\\n     ${Else}\\n       WriteRegDWORD HKLM \\\"$0\\\" \\\"IconsVisible\\\" 0\\n@@ -595,10 +612,32 @@ Function CopyFile\\n FunctionEnd\\n \\n Function LaunchApp\\n+  ${GetParameters} $0\\n+  ${If} $0 != \\\"\\\"\\n+    ClearErrors\\n+    ${GetOptions} \\\"$0\\\" \\\"/UAC:\\\" $1\\n+    ${Unless} ${Errors}\\n+      GetFunctionAddress $0 LaunchAppFromElevatedProcess\\n+      UAC::ExecCodeSegment $0\\n+      Quit\\n+    ${EndUnless}\\n+  ${EndIf}\\n+\\n   ${ManualCloseAppPrompt} \\\"${WindowClass}\\\" \\\"$(WARN_MANUALLY_CLOSE_APP_LAUNCH)\\\"\\n   Exec \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n FunctionEnd\\n \\n+Function LaunchAppFromElevatedProcess\\n+  ${ManualCloseAppPrompt} \\\"${WindowClass}\\\" \\\"$(WARN_MANUALLY_CLOSE_APP_LAUNCH)\\\"\\n+\\n+  ; Find the installation directory when launching using GetFunctionAddress\\n+  ; from an elevated installer since $INSTDIR will not be set in this installer\\n+  ${StrFilter} \\\"${FileMainEXE}\\\" \\\"+\\\" \\\"\\\" \\\"\\\" $R9\\n+  ReadRegStr $0 HKLM \\\"Software\\\\Clients\\\\StartMenuInternet\\\\$R9\\\\DefaultIcon\\\" \\\"\\\"\\n+  ${GetPathFromString} \\\"$0\\\" $0\\n+  Exec \\\"$0\\\"\\n+FunctionEnd\\n+\\n ################################################################################\\n # Language\\n \\n@@ -746,3 +785,11 @@ Function .onInit\\n     SectionSetText ${DOMI_IDX} \\\"\\\"\\n   ${EndIf}\\n FunctionEnd\\n+\\n+Function .OnInstFailed\\n+  UAC::Unload\\n+FunctionEnd\\n+\\n+Function .OnInstSuccess\\n+  UAC::Unload\\n+FunctionEnd\\ndiff --git a/browser/installer/windows/nsis/shared.nsh b/browser/installer/windows/nsis/shared.nsh\\nindex ef3f689..41d81d8 100755\\n--- a/browser/installer/windows/nsis/shared.nsh\\n+++ b/browser/installer/windows/nsis/shared.nsh\\n@@ -35,26 +35,34 @@\\n # ***** END LICENSE BLOCK *****\\n \\n !macro PostUpdate\\n-  SetShellVarContext all\\n-  ${SetStartMenuInternet}\\n-\\n   ; Remove registry entries for non-existent apps and for apps that point to our\\n   ; install location in the Software\\\\Mozilla key and uninstall registry entries\\n   ; that point to our install location for both HKCU and HKLM.\\n-  SetShellVarContext current  ; Set SHCTX to HKCU\\n+  SetShellVarContext current  ; Set SHCTX to the current user (e.g. HKCU)\\n   ${RegCleanMain} \\\"Software\\\\Mozilla\\\"\\n   ${RegCleanUninstall}\\n \\n-  SetShellVarContext all  ; Set SHCTX to HKLM\\n-  ${RegCleanMain} \\\"Software\\\\Mozilla\\\"\\n-  ${RegCleanUninstall}\\n+  ClearErrors\\n+  WriteRegStr HKLM \\\"Software\\\\Mozilla\\\\InstallerTest\\\" \\\"InstallerTest\\\" \\\"Test\\\"\\n+  ${If} ${Errors}\\n+    StrCpy $TmpVal \\\"HKCU\\\" ; used primarily for logging\\n+  ${Else}\\n+    SetShellVarContext all    ; Set SHCTX to all users (e.g. HKLM)\\n+    DeleteRegKey HKLM \\\"Software\\\\Mozilla\\\\InstallerTest\\\"\\n+    StrCpy $TmpVal \\\"HKLM\\\" ; used primarily for logging\\n+    ${RegCleanMain} \\\"Software\\\\Mozilla\\\"\\n+    ${RegCleanUninstall}\\n+    ${SetStartMenuInternet}\\n+    ${FixShellIconHandler}\\n+    ${SetUninstallKeys}\\n+  ${EndIf}\\n+\\n+  ${RemoveDeprecatedKeys}\\n \\n   ; Add Software\\\\Mozilla\\\\ registry entries\\n   ${SetAppKeys}\\n-\\n-  ${SetUninstallKeys}\\n-\\n   ${FixClassKeys}\\n+  ${UpdateProtocolHandlers}\\n \\n   ; Remove files that may be left behind by the application in the\\n   ; VirtualStore directory.\\n@@ -68,24 +76,74 @@\\n !define PostUpdate \\\"!insertmacro PostUpdate\\\"\\n \\n !macro SetAsDefaultAppUser\\n-  SetShellVarContext current\\n+  ; It is only possible to set this installation of the application as the\\n+  ; StartMenuInternet handler if it was added to the HKLM StartMenuInternet\\n+  ; registry keys.\\n+  ; http://support.microsoft.com/kb/297878\\n+\\n+  ${StrFilter} \\\"${FileMainEXE}\\\" \\\"+\\\" \\\"\\\" \\\"\\\" $R9\\n+  ClearErrors\\n+  ReadRegStr $0 HKLM \\\"Software\\\\Clients\\\\StartMenuInternet\\\\$R9\\\\DefaultIcon\\\" \\\"\\\"\\n+  IfErrors updateclientkeys +1\\n+  ${GetPathFromString} \\\"$0\\\" $0\\n+  ${GetParent} \\\"$0\\\" $0\\n+  IfFileExists \\\"$0\\\" +1 updateclientkeys\\n+  ${GetLongPath} \\\"$0\\\" $0\\n+  StrCmp \\\"$0\\\" \\\"$INSTDIR\\\" setdefaultuser +1\\n+\\n+  updateclientkeys:\\n+  ; Calls after ElevateUAC won't be made if the user can elevate. They\\n+  ; will be made in the new elevated process if the user allows elevation.\\n+  ${ElevateUAC}\\n+\\n+  ${SetStartMenuInternet}\\n+\\n+  setdefaultuser:\\n+  SetShellVarContext all  ; Set SHCTX to all users (e.g. HKLM)\\n+  ${FixShellIconHandler}\\n+  WriteRegStr HKCU \\\"Software\\\\Clients\\\\StartMenuInternet\\\" \\\"\\\" \\\"$R9\\\"\\n+\\n+!ifdef ___WINVER__NSH___\\n+  ${If} ${AtLeastWinVista}\\n+    ClearErrors\\n+    ReadRegStr $0 HKLM \\\"Software\\\\RegisteredApplications\\\" \\\"${AppRegName}\\\"\\n+    ; Only register as the handler on Vista if the app registry name exists\\n+    ; under the RegisteredApplications registry key.\\n+    ${Unless} ${Errors}\\n+      SetVistaDefaultApp::SetAsDefault \\\"${AppRegName}\\\"\\n+    ${EndUnless}\\n+  ${EndIf}\\n+!endif\\n+\\n+  ${RemoveDeprecatedKeys}\\n+\\n+  SetShellVarContext current  ; Set SHCTX to the current user (e.g. HKCU)\\n   ${SetHandlers}\\n !macroend\\n !define SetAsDefaultAppUser \\\"!insertmacro SetAsDefaultAppUser\\\"\\n \\n !macro SetAsDefaultAppGlobal\\n-  SetShellVarContext all\\n+  ${RemoveDeprecatedKeys}\\n+\\n+  SetShellVarContext all      ; Set SHCTX to all users (e.g. HKLM)\\n   ${SetHandlers}\\n   ${SetStartMenuInternet}\\n-  WriteRegStr HKLM \\\"Software\\\\Clients\\\\StartMenuInternet\\\" \\\"\\\" \\\"$R9\\\"\\n+  ${FixShellIconHandler}\\n   ${ShowShortcuts}\\n+  ${StrFilter} \\\"${FileMainEXE}\\\" \\\"+\\\" \\\"\\\" \\\"\\\" $R9\\n+  WriteRegStr HKLM \\\"Software\\\\Clients\\\\StartMenuInternet\\\" \\\"\\\" \\\"$R9\\\"\\n !macroend\\n !define SetAsDefaultAppGlobal \\\"!insertmacro SetAsDefaultAppGlobal\\\"\\n \\n+!macro FixReg\\n+  ${SetAsDefaultAppUser}\\n+!macroend\\n+!define FixReg \\\"!insertmacro FixReg\\\"\\n+\\n !macro HideShortcuts\\n   ${StrFilter} \\\"${FileMainEXE}\\\" \\\"+\\\" \\\"\\\" \\\"\\\" $0\\n   StrCpy $R1 \\\"Software\\\\Clients\\\\StartMenuInternet\\\\$0\\\\InstallInfo\\\"\\n-  WriteRegDWORD HKLM $R1 \\\"IconsVisible\\\" 0\\n+  WriteRegDWORD HKLM \\\"$R1\\\" \\\"IconsVisible\\\" 0\\n   SetShellVarContext all  ; Set $DESKTOP to All Users\\n   ${Unless} ${FileExists} \\\"$DESKTOP\\\\${BrandFullName}.lnk\\\"\\n     SetShellVarContext current  ; Set $DESKTOP to the current user's desktop\\n@@ -122,7 +180,7 @@\\n !macro ShowShortcuts\\n   ${StrFilter} \\\"${FileMainEXE}\\\" \\\"+\\\" \\\"\\\" \\\"\\\" $0\\n   StrCpy $R1 \\\"Software\\\\Clients\\\\StartMenuInternet\\\\$0\\\\InstallInfo\\\"\\n-  WriteRegDWORD HKLM $R1 \\\"IconsVisible\\\" 1\\n+  WriteRegDWORD HKLM \\\"$R1\\\" \\\"IconsVisible\\\" 1\\n   SetShellVarContext all  ; Set $DESKTOP to All Users\\n   ${Unless} ${FileExists} \\\"$DESKTOP\\\\${BrandFullName}.lnk\\\"\\n     CreateShortCut \\\"$DESKTOP\\\\${BrandFullName}.lnk\\\" \\\"$INSTDIR\\\\${FileMainEXE}\\\" \\\"\\\" \\\"$INSTDIR\\\\${FileMainEXE}\\\" 0\\n@@ -143,38 +201,70 @@\\n !define ShowShortcuts \\\"!insertmacro ShowShortcuts\\\"\\n \\n !macro SetHandlers\\n-  GetFullPathName $8 \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n+  ${GetLongPath} \\\"$INSTDIR\\\\${FileMainEXE}\\\" $8\\n \\n   StrCpy $0 \\\"SOFTWARE\\\\Classes\\\"\\n   StrCpy $2 \\\"$\\\\\\\"$8$\\\\\\\" -requestPending -osint -url $\\\\\\\"%1$\\\\\\\"\\\"\\n \\n   ; Associate the file handlers with FirefoxHTML\\n-  WriteRegStr SHCTX \\\"$0\\\\.htm\\\"   \\\"\\\" \\\"FirefoxHTML\\\"\\n-  WriteRegStr SHCTX \\\"$0\\\\.html\\\"  \\\"\\\" \\\"FirefoxHTML\\\"\\n-  WriteRegStr SHCTX \\\"$0\\\\.shtml\\\" \\\"\\\" \\\"FirefoxHTML\\\"\\n-  WriteRegStr SHCTX \\\"$0\\\\.xht\\\"   \\\"\\\" \\\"FirefoxHTML\\\"\\n-  WriteRegStr SHCTX \\\"$0\\\\.xhtml\\\" \\\"\\\" \\\"FirefoxHTML\\\"\\n+  ReadRegStr $6 HKCR \\\".htm\\\" \\\"\\\"\\n+  ${If} \\\"$6\\\" != \\\"FirefoxHTML\\\"\\n+    WriteRegStr SHCTX \\\"$0\\\\.htm\\\"   \\\"\\\" \\\"FirefoxHTML\\\"\\n+  ${EndIf}\\n+\\n+  ReadRegStr $6 HKCR \\\".html\\\" \\\"\\\"\\n+  ${If} \\\"$6\\\" != \\\"FirefoxHTML\\\"\\n+    WriteRegStr SHCTX \\\"$0\\\\.html\\\"  \\\"\\\" \\\"FirefoxHTML\\\"\\n+  ${EndIf}\\n+\\n+  ReadRegStr $6 HKCR \\\".shtml\\\" \\\"\\\"\\n+  ${If} \\\"$6\\\" != \\\"FirefoxHTML\\\"\\n+    WriteRegStr SHCTX \\\"$0\\\\.shtml\\\" \\\"\\\" \\\"FirefoxHTML\\\"\\n+  ${EndIf}\\n+\\n+  ReadRegStr $6 HKCR \\\".hht\\\" \\\"\\\"\\n+  ${If} \\\"$6\\\" != \\\"FirefoxHTML\\\"\\n+    WriteRegStr SHCTX \\\"$0\\\\.xht\\\"   \\\"\\\" \\\"FirefoxHTML\\\"\\n+  ${EndIf}\\n+\\n+  ReadRegStr $6 HKCR \\\".xhtml\\\" \\\"\\\"\\n+  ${If} \\\"$6\\\" != \\\"FirefoxHTML\\\"\\n+    WriteRegStr SHCTX \\\"$0\\\\.xhtml\\\" \\\"\\\" \\\"FirefoxHTML\\\"\\n+  ${EndIf}\\n+\\n+  StrCpy $3 \\\"$\\\\\\\"%1$\\\\\\\",,0,0,,,,\\\"\\n \\n   ; An empty string is used for the 5th param because FirefoxHTML is not a\\n   ; protocol handler\\n-  ${AddHandlerValues} \\\"$0\\\\FirefoxHTML\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"${AppRegName} Document\\\" \\\"\\\" \\\"true\\\"\\n+  ${AddDDEHandlerValues} \\\"FirefoxHTML\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"${AppRegName} Document\\\" \\\"\\\" \\\\\\n+                         \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n \\n-  ${AddHandlerValues} \\\"$0\\\\FirefoxURL\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"${AppRegName} URL\\\" \\\"true\\\" \\\"true\\\"\\n+  ${AddDDEHandlerValues} \\\"FirefoxURL\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"${AppRegName} URL\\\" \\\"true\\\" \\\\\\n+                         \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n \\n   ; An empty string is used for the 4th & 5th params because the following\\n-  ; protocol handlers already have a display name and additional keys required\\n-  ; for a protocol handler.\\n-  ${AddHandlerValues} \\\"$0\\\\ftp\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\"true\\\"\\n-  ${AddHandlerValues} \\\"$0\\\\http\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\"true\\\"\\n-  ${AddHandlerValues} \\\"$0\\\\https\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\"true\\\"\\n+  ; protocol handlers already have a display name and the additional keys\\n+  ; required for a protocol handler.\\n+  ${AddDDEHandlerValues} \\\"ftp\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\\\\n+                         \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n+  ${AddDDEHandlerValues} \\\"http\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\\\\n+                         \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n+  ${AddDDEHandlerValues} \\\"https\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\\\\n+                         \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n !macroend\\n !define SetHandlers \\\"!insertmacro SetHandlers\\\"\\n \\n-; XXXrstrong - there are several values that will be overwritten by and\\n-; overwrite other installs of the same application.\\n+; The values for StartMenuInternet are only valid under HKLM and there can only\\n+; be one installation registerred under StartMenuInternet per application since\\n+; the key name is derived from the main application executable.\\n+; http://support.microsoft.com/kb/297878\\n+;\\n+; Note: we might be able to get away with using the full path to the\\n+; application executable for the key name in order to support multiple\\n+; installations.\\n !macro SetStartMenuInternet\\n-  GetFullPathName $8 \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n-  GetFullPathName $7 \\\"$INSTDIR\\\\uninstall\\\\helper.exe\\\"\\n+  ${GetLongPath} \\\"$INSTDIR\\\\${FileMainEXE}\\\" $8\\n+  ${GetLongPath} \\\"$INSTDIR\\\\uninstall\\\\helper.exe\\\" $7\\n \\n   ${StrFilter} \\\"${FileMainEXE}\\\" \\\"+\\\" \\\"\\\" \\\"\\\" $R9\\n \\n@@ -190,6 +280,18 @@\\n   WriteRegStr HKLM \\\"$0\\\\InstallInfo\\\" \\\"ShowIconsCommand\\\" \\\"$\\\\\\\"$7$\\\\\\\" /ShowShortcuts\\\"\\n   WriteRegStr HKLM \\\"$0\\\\InstallInfo\\\" \\\"ReinstallCommand\\\" \\\"$\\\\\\\"$7$\\\\\\\" /SetAsDefaultAppGlobal\\\"\\n \\n+  ClearErrors\\n+  ReadRegDWORD $1 HKLM \\\"$0\\\\InstallInfo\\\" \\\"IconsVisible\\\"\\n+  ; If the IconsVisible name vale pair doesn't exist add it otherwise the\\n+  ; application won't be displayed in Set Program Access and Defaults.\\n+  ${If} ${Errors}\\n+    ${If} ${FileExists} \\\"$QUICKLAUNCH\\\\${BrandFullName}.lnk\\\"\\n+      WriteRegDWORD HKLM \\\"$0\\\\InstallInfo\\\" \\\"IconsVisible\\\" 1\\n+    ${Else}\\n+      WriteRegDWORD HKLM \\\"$0\\\\InstallInfo\\\" \\\"IconsVisible\\\" 0\\n+    ${EndIf}\\n+  ${EndIf}\\n+\\n   WriteRegStr HKLM \\\"$0\\\\shell\\\\open\\\\command\\\" \\\"\\\" \\\"$8\\\"\\n \\n   WriteRegStr HKLM \\\"$0\\\\shell\\\\properties\\\" \\\"\\\" \\\"$(CONTEXT_OPTIONS)\\\"\\n@@ -215,28 +317,19 @@\\n   WriteRegStr HKLM \\\"$0\\\\Capabilities\\\\URLAssociations\\\" \\\"http\\\"   \\\"FirefoxURL\\\"\\n   WriteRegStr HKLM \\\"$0\\\\Capabilities\\\\URLAssociations\\\" \\\"https\\\"  \\\"FirefoxURL\\\"\\n \\n-  ; Delete gopher from Capabilities\\\\URLAssociations if it is present.\\n-  ClearErrors\\n-  ReadRegStr $2 HKLM \\\"$0\\\\Capabilities\\\\URLAssociations\\\" \\\"gopher\\\"\\n-  ${Unless} ${Errors}\\n-    DeleteRegValue HKLM \\\"$0\\\\Capabilities\\\\URLAssociations\\\" \\\"gopher\\\"\\n-  ${EndUnless}\\n-\\n-  ; Delete gopher from the user's UrlAssociations if it points to FirefoxURL.\\n-  ReadRegStr $2 HKCU \\\"Software\\\\Microsoft\\\\Windows\\\\Shell\\\\Associations\\\\UrlAssociations\\\\gopher\\\\UserChoice\\\" \\\"Progid\\\"\\n-  ${If} $2 == \\\"FirefoxURL\\\"\\n-    DeleteRegKey HKCU \\\"Software\\\\Microsoft\\\\Windows\\\\Shell\\\\Associations\\\\UrlAssociations\\\\gopher\\\"\\n-  ${EndIf}\\n-\\n   ; Vista Registered Application\\n   WriteRegStr HKLM \\\"Software\\\\RegisteredApplications\\\" \\\"${AppRegName}\\\" \\\"$0\\\\Capabilities\\\"\\n+!macroend\\n+!define SetStartMenuInternet \\\"!insertmacro SetStartMenuInternet\\\"\\n \\n+!macro FixShellIconHandler\\n   ; The IconHandler reference for FirefoxHTML can end up in an inconsistent\\n   ; state due to changes not being detected by the IconHandler for side by side\\n   ; installs. The symptoms can be either an incorrect icon or no icon being\\n   ; displayed for files associated with Firefox. By setting it here it will\\n   ; always reference the install referenced in the\\n   ; HKLM\\\\Software\\\\Classes\\\\FirefoxHTML registry key.\\n+  ${GetLongPath} \\\"$INSTDIR\\\\${FileMainEXE}\\\" $8\\n   ClearErrors\\n   ReadRegStr $2 HKLM \\\"Software\\\\Classes\\\\FirefoxHTML\\\\ShellEx\\\\IconHandler\\\" \\\"\\\"\\n   ${Unless} ${Errors}\\n@@ -247,12 +340,13 @@\\n     ${EndUnless}\\n   ${EndUnless}\\n !macroend\\n-!define SetStartMenuInternet \\\"!insertmacro SetStartMenuInternet\\\"\\n+!define FixShellIconHandler \\\"!insertmacro FixShellIconHandler\\\"\\n \\n !macro SetAppKeys\\n+  ${GetLongPath} \\\"$INSTDIR\\\" $8\\n   StrCpy $0 \\\"Software\\\\Mozilla\\\\${BrandFullNameInternal}\\\\${AppVersion} (${AB_CD})\\\\Main\\\"\\n-  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Install Directory\\\" \\\"$INSTDIR\\\" 0\\n-  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"PathToExe\\\" \\\"$INSTDIR\\\\${FileMainEXE}\\\" 0\\n+  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Install Directory\\\" \\\"$8\\\" 0\\n+  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"PathToExe\\\" \\\"$8\\\\${FileMainEXE}\\\" 0\\n   ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Program Folder Path\\\" \\\"$SMPROGRAMS\\\\$StartMenuDir\\\" 0\\n \\n   SetShellVarContext all  ; Set $DESKTOP to All Users\\n@@ -266,8 +360,8 @@\\n     ${If} $1 == \\\"\\\"\\n       ShellLink::GetShortCutTarget \\\"$DESKTOP\\\\${BrandFullName}.lnk\\\"\\n       Pop $1\\n-      ; Needs to handle short paths\\n-      ${If} $1 == \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n+      ${GetLongPath} \\\"$1\\\" $1\\n+      ${If} \\\"$1\\\" == \\\"$8\\\\${FileMainEXE}\\\"\\n         ${WriteRegDWORD2} $TmpVal \\\"$0\\\" \\\"Create Desktop Shortcut\\\" 1 0\\n       ${Else}\\n         ${WriteRegDWORD2} $TmpVal \\\"$0\\\" \\\"Create Desktop Shortcut\\\" 0 0\\n@@ -278,9 +372,9 @@\\n   ; XXXrstrong - need a cleaner way to prevent unsetting SHCTX from HKLM when\\n   ; trying to find the desktop shortcut.\\n   ${If} $TmpVal == \\\"HKCU\\\"\\n-    SetShellVarContext current\\n+    SetShellVarContext current ; Set SHCTX to the current user (e.g. HKCU)\\n   ${Else}\\n-    SetShellVarContext all\\n+    SetShellVarContext all     ; Set SHCTX to all users (e.g. HKLM)\\n   ${EndIf}\\n \\n   ${If} ${FileExists} \\\"$QUICKLAUNCH\\\\${BrandFullName}.lnk\\\"\\n@@ -289,8 +383,8 @@\\n     ${If} $1 == \\\"\\\"\\n       ShellLink::GetShortCutTarget \\\"$QUICKLAUNCH\\\\${BrandFullName}.lnk\\\"\\n       Pop $1\\n-      ; Needs to handle short paths\\n-      ${If} $1 == \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n+      ${GetLongPath} \\\"$1\\\" $1\\n+      ${If} $1 == \\\"$8\\\\${FileMainEXE}\\\"\\n         ${WriteRegDWORD2} $TmpVal \\\"$0\\\" \\\"Create Quick Launch Shortcut\\\" 1 0\\n       ${Else}\\n         ${WriteRegDWORD2} $TmpVal \\\"$0\\\" \\\"Create Quick Launch Shortcut\\\" 0 0\\n@@ -301,18 +395,18 @@\\n   ; set in the installer and should also be set here for software update.\\n \\n   StrCpy $0 \\\"Software\\\\Mozilla\\\\${BrandFullNameInternal}\\\\${AppVersion} (${AB_CD})\\\\Uninstall\\\"\\n-  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Uninstall Log Folder\\\" \\\"$INSTDIR\\\\uninstall\\\" 0\\n+  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Uninstall Log Folder\\\" \\\"$8\\\\uninstall\\\" 0\\n   ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Description\\\" \\\"${BrandFullNameInternal} (${AppVersion})\\\" 0\\n \\n   StrCpy $0 \\\"Software\\\\Mozilla\\\\${BrandFullNameInternal}\\\\${AppVersion} (${AB_CD})\\\"\\n   ${WriteRegStr2} $TmpVal  \\\"$0\\\" \\\"\\\" \\\"${AppVersion} (${AB_CD})\\\" 0\\n \\n   StrCpy $0 \\\"Software\\\\Mozilla\\\\${BrandFullNameInternal} ${AppVersion}\\\\bin\\\"\\n-  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"PathToExe\\\" \\\"$INSTDIR\\\\${FileMainEXE}\\\" 0\\n+  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"PathToExe\\\" \\\"$8\\\\${FileMainEXE}\\\" 0\\n \\n   StrCpy $0 \\\"Software\\\\Mozilla\\\\${BrandFullNameInternal} ${AppVersion}\\\\extensions\\\"\\n-  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Components\\\" \\\"$INSTDIR\\\\components\\\" 0\\n-  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Plugins\\\" \\\"$INSTDIR\\\\plugins\\\" 0\\n+  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Components\\\" \\\"$8\\\\components\\\" 0\\n+  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Plugins\\\" \\\"$8\\\\plugins\\\" 0\\n \\n   StrCpy $0 \\\"Software\\\\Mozilla\\\\${BrandFullNameInternal} ${AppVersion}\\\"\\n   ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"GeckoVer\\\" \\\"${GREVersion}\\\" 0\\n@@ -324,18 +418,17 @@\\n !define SetAppKeys \\\"!insertmacro SetAppKeys\\\"\\n \\n !macro SetUninstallKeys\\n-  ; Write the uninstall registry keys\\n   StrCpy $0 \\\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\${BrandFullNameInternal} (${AppVersion})\\\"\\n-  GetFullPathName $8 \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n-  GetFullPathName $7 \\\"$INSTDIR\\\\uninstall\\\\helper.exe\\\"\\n+  ${GetLongPath} \\\"$INSTDIR\\\" $8\\n \\n+  ; Write the uninstall registry keys\\n   ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Comments\\\" \\\"${BrandFullNameInternal}\\\" 0\\n-  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"DisplayIcon\\\" \\\"$8,0\\\" 0\\n+  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"DisplayIcon\\\" \\\"$8\\\\${FileMainEXE},0\\\" 0\\n   ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"DisplayName\\\" \\\"${BrandFullNameInternal} (${AppVersion})\\\" 0\\n   ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"DisplayVersion\\\" \\\"${AppVersion} (${AB_CD})\\\" 0\\n-  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"InstallLocation\\\" \\\"$INSTDIR\\\" 0\\n+  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"InstallLocation\\\" \\\"$8\\\" 0\\n   ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"Publisher\\\" \\\"Mozilla\\\" 0\\n-  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"UninstallString\\\" \\\"$7\\\" 0\\n+  ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"UninstallString\\\" \\\"$8\\\\uninstall\\\\helper.exe\\\" 0\\n   ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"URLInfoAbout\\\" \\\"${URLInfoAbout}\\\" 0\\n   ${WriteRegStr2} $TmpVal \\\"$0\\\" \\\"URLUpdateInfo\\\" \\\"${URLUpdateInfo}\\\" 0\\n   ${WriteRegDWORD2} $TmpVal \\\"$0\\\" \\\"NoModify\\\" 1 0\\n@@ -344,96 +437,110 @@\\n !define SetUninstallKeys \\\"!insertmacro SetUninstallKeys\\\"\\n \\n !macro FixClassKeys\\n-  StrCpy $0 \\\"SOFTWARE\\\\Classes\\\"\\n+  StrCpy $1 \\\"SOFTWARE\\\\Classes\\\"\\n \\n   ; File handler keys and name value pairs that may need to be created during\\n   ; install or upgrade.\\n-  ReadRegStr $2 SHCTX \\\"$0\\\\.shtml\\\" \\\"Content Type\\\"\\n-  ${If} $2 == \\\"\\\"\\n-    StrCpy $2 \\\"$0\\\\.shtml\\\"\\n-    ${WriteRegStr2} $TmpVal \\\"$0\\\\.shtml\\\" \\\"\\\" \\\"shtmlfile\\\" 0\\n-    ${WriteRegStr2} $TmpVal \\\"$0\\\\.shtml\\\" \\\"Content Type\\\" \\\"text/html\\\" 0\\n-    ${WriteRegStr2} $TmpVal \\\"$0\\\\.shtml\\\" \\\"PerceivedType\\\" \\\"text\\\" 0\\n+  ReadRegStr $0 HKCR \\\".shtml\\\" \\\"Content Type\\\"\\n+  ${If} \\\"$0\\\" == \\\"\\\"\\n+    StrCpy $0 \\\"$1\\\\.shtml\\\"\\n+    ${WriteRegStr2} $TmpVal \\\"$1\\\\.shtml\\\" \\\"\\\" \\\"shtmlfile\\\" 0\\n+    ${WriteRegStr2} $TmpVal \\\"$1\\\\.shtml\\\" \\\"Content Type\\\" \\\"text/html\\\" 0\\n+    ${WriteRegStr2} $TmpVal \\\"$1\\\\.shtml\\\" \\\"PerceivedType\\\" \\\"text\\\" 0\\n   ${EndIf}\\n \\n-  ReadRegStr $2 SHCTX \\\"$0\\\\.xht\\\" \\\"Content Type\\\"\\n-  ${If} $2 == \\\"\\\"\\n-    ${WriteRegStr2} $TmpVal \\\"$0\\\\.xht\\\" \\\"\\\" \\\"xhtfile\\\" 0\\n-    ${WriteRegStr2} $TmpVal \\\"$0\\\\.xht\\\" \\\"Content Type\\\" \\\"application/xhtml+xml\\\" 0\\n+  ReadRegStr $0 HKCR \\\".xht\\\" \\\"Content Type\\\"\\n+  ${If} \\\"$0\\\" == \\\"\\\"\\n+    ${WriteRegStr2} $TmpVal \\\"$1\\\\.xht\\\" \\\"\\\" \\\"xhtfile\\\" 0\\n+    ${WriteRegStr2} $TmpVal \\\"$1\\\\.xht\\\" \\\"Content Type\\\" \\\"application/xhtml+xml\\\" 0\\n   ${EndIf}\\n \\n-  ReadRegStr $2 SHCTX \\\"$0\\\\.xhtml\\\" \\\"Content Type\\\"\\n-  ${If} $2 == \\\"\\\"\\n-    ${WriteRegStr2} $TmpVal \\\"$0\\\\.xhtml\\\" \\\"\\\" \\\"xhtmlfile\\\" 0\\n-    ${WriteRegStr2} $TmpVal \\\"$0\\\\.xhtml\\\" \\\"Content Type\\\" \\\"application/xhtml+xml\\\" 0\\n+  ReadRegStr $0 HKCR \\\".xhtml\\\" \\\"Content Type\\\"\\n+  ${If} \\\"$0\\\" == \\\"\\\"\\n+    ${WriteRegStr2} $TmpVal \\\"$1\\\\.xhtml\\\" \\\"\\\" \\\"xhtmlfile\\\" 0\\n+    ${WriteRegStr2} $TmpVal \\\"$1\\\\.xhtml\\\" \\\"Content Type\\\" \\\"application/xhtml+xml\\\" 0\\n   ${EndIf}\\n+!macroend\\n+!define FixClassKeys \\\"!insertmacro FixClassKeys\\\"\\n \\n-  ; Protocol handler keys and name value pairs that may need to be updated during\\n-  ; install or upgrade.\\n+; Updates protocol handlers if their registry open command value is for this\\n+; install location\\n+!macro UpdateProtocolHandlers\\n+  ; Store the command to open the app with an url in a register for easy access.\\n+  ${GetLongPath} \\\"$INSTDIR\\\\${FileMainEXE}\\\" $8\\n+  StrCpy $2 \\\"$\\\\\\\"$8$\\\\\\\" -requestPending -osint -url $\\\\\\\"%1$\\\\\\\"\\\"\\n+  StrCpy $3 \\\"$\\\\\\\"%1$\\\\\\\",,0,0,,,,\\\"\\n \\n-  ; Bug 301073 Comment #9 makes it so Firefox no longer supports launching\\n-  ; chrome urls from the shell so remove it during install or update if the\\n-  ; DefaultIcon is from firefox.exe.\\n-  ReadRegStr $2 SHCTX \\\"$0\\\\chrome\\\\DefaultIcon\\\" \\\"\\\"\\n+  ; Only set the file and protocol handlers if the existing one under HKCR is\\n+  ; for this install location.\\n \\n-  ClearErrors\\n-  ${WordFind} \\\"$2\\\" \\\"${FileMainEXE}\\\" \\\"E+1{\\\" $R1\\n+  ${IsHandlerForInstallDir} \\\"FirefoxHTML\\\" $R9\\n+  ${If} \\\"$R9\\\" == \\\"true\\\"\\n+    ; An empty string is used for the 5th param because FirefoxHTML is not a\\n+    ; protocol handler.\\n+    ${AddDDEHandlerValues} \\\"FirefoxHTML\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"${AppRegName} Document\\\" \\\"\\\" \\\\\\n+                           \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n+  ${EndIf}\\n \\n-  ${Unless} ${Errors}\\n-    DeleteRegKey SHCTX \\\"$0\\\\chrome\\\"\\n-  ${EndUnless}\\n+  ${IsHandlerForInstallDir} \\\"FirefoxURL\\\" $R9\\n+  ${If} \\\"$R9\\\" == \\\"true\\\"\\n+    ${AddDDEHandlerValues} \\\"FirefoxURL\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"${AppRegName} URL\\\" \\\"true\\\" \\\\\\n+                           \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n+  ${EndIf}\\n \\n-  ; Remove support for launching gopher urls from the shell during install or\\n-  ; update if the DefaultIcon is from firefox.exe.\\n-  ReadRegStr $2 SHCTX \\\"$0\\\\gopher\\\\DefaultIcon\\\" \\\"\\\"\\n-  ClearErrors\\n-  ${WordFind} \\\"$2\\\" \\\"${FileMainEXE}\\\" \\\"E+1{\\\" $R1\\n-  ${Unless} ${Errors}\\n-    DeleteRegKey SHCTX \\\"$0\\\\gopher\\\"\\n-  ${EndUnless}\\n+  ${IsHandlerForInstallDir} \\\"ftp\\\" $R9\\n+  ${If} \\\"$R9\\\" == \\\"true\\\"\\n+    ${AddDDEHandlerValues} \\\"ftp\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\\\\n+                           \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n+  ${EndIf}\\n \\n-  ; Store the command to open the app with an url in a register for easy access.\\n-  GetFullPathName $8 \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n-  StrCpy $1 \\\"$\\\\\\\"$8$\\\\\\\" -requestPending -osint -url $\\\\\\\"%1$\\\\\\\"\\\"\\n+  ${IsHandlerForInstallDir} \\\"http\\\" $R9\\n+  ${If} \\\"$R9\\\" == \\\"true\\\"\\n+    ${AddDDEHandlerValues} \\\"http\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\\\\n+                           \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n+  ${EndIf}\\n \\n-  ; Always set the file and protocol handlers since they may specify a\\n-  ; different path and the path is used by Vista when setting associations.\\n-  ${AddHandlerValues} \\\"$0\\\\FirefoxURL\\\" \\\"$1\\\" \\\"$8,1\\\" \\\"${AppRegName} URL\\\" \\\"true\\\" \\\"true\\\"\\n+  ${IsHandlerForInstallDir} \\\"https\\\" $R9\\n+  ${If} \\\"$R9\\\" == \\\"true\\\"\\n+    ${AddDDEHandlerValues} \\\"https\\\" \\\"$2\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\\\\n+                           \\\"${DDEApplication}\\\" \\\"$3\\\" \\\"WWW_OpenURL\\\"\\n+  ${EndIf}\\n+!macroend\\n+!define UpdateProtocolHandlers \\\"!insertmacro UpdateProtocolHandlers\\\"\\n \\n-  ; An empty string is used for the 5th param because FirefoxHTML is not a\\n-  ; protocol handler\\n-  ${AddHandlerValues} \\\"$0\\\\FirefoxHTML\\\" \\\"$1\\\" \\\"$8,1\\\" \\\"${AppRegName} Document\\\" \\\"\\\" \\\"true\\\"\\n+!macro RemoveDeprecatedKeys\\n+  StrCpy $0 \\\"SOFTWARE\\\\Classes\\\"\\n+  ; Remove support for launching gopher urls from the shell during install or\\n+  ; update if the DefaultIcon is from firefox.exe.\\n+  ${RegCleanAppHandler} \\\"gopher\\\"\\n \\n-  ReadRegStr $2 SHCTX \\\"$0\\\\http\\\\shell\\\\open\\\\command\\\" \\\"\\\"\\n-  ClearErrors\\n-  ${WordFind} \\\"$2\\\" \\\"${FileMainEXE}\\\" \\\"E+1{\\\" $R1\\n-  ${Unless} ${Errors}\\n-    ${AddHandlerValues} \\\"$0\\\\http\\\" \\\"$1\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\"true\\\"\\n-  ${EndUnless}\\n+  ; Remove support for launching chrome urls from the shell during install or\\n+  ; update if the DefaultIcon is from firefox.exe (Bug 301073).\\n+  ${RegCleanAppHandler} \\\"chrome\\\"\\n \\n-  ReadRegStr $2 SHCTX \\\"$0\\\\https\\\\shell\\\\open\\\\command\\\" \\\"\\\"\\n-  ClearErrors\\n-  ${WordFind} \\\"$2\\\" \\\"${FileMainEXE}\\\" \\\"E+1{\\\" $R1\\n-  ${Unless} ${Errors}\\n-    ${AddHandlerValues} \\\"$0\\\\https\\\" \\\"$1\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\"true\\\"\\n-  ${EndUnless}\\n+  ; Remove protocol handler registry keys added by the MS shim\\n+  DeleteRegKey HKLM \\\"Software\\\\Classes\\\\Firefox.URL\\\"\\n+  DeleteRegKey HKCU \\\"Software\\\\Classes\\\\Firefox.URL\\\"\\n \\n-  ReadRegStr $2 SHCTX \\\"$0\\\\ftp\\\\shell\\\\open\\\\command\\\" \\\"\\\"\\n-  ClearErrors\\n-  ${WordFind} \\\"$2\\\" \\\"${FileMainEXE}\\\" \\\"E+1{\\\" $R1\\n-  ${Unless} ${Errors}\\n-    ${AddHandlerValues} \\\"$0\\\\ftp\\\" \\\"$1\\\" \\\"$8,1\\\" \\\"\\\" \\\"\\\" \\\"true\\\"\\n-  ${EndUnless}\\n+  ; Remove the app compatibility registry key\\n+  StrCpy $0 \\\"Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Layers\\\"\\n+  DeleteRegValue HKLM \\\"$0\\\" \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n+  DeleteRegValue HKCU \\\"$0\\\" \\\"$INSTDIR\\\\${FileMainEXE}\\\"\\n \\n-  ; Remove the gopher key if the DefaultIcon is from firefox.exe.\\n-  ReadRegStr $2 SHCTX \\\"$0\\\\gopher\\\\DefaultIcon\\\" \\\"\\\"\\n+  ; Delete gopher from Capabilities\\\\URLAssociations if it is present.\\n+  ${StrFilter} \\\"${FileMainEXE}\\\" \\\"+\\\" \\\"\\\" \\\"\\\" $R9\\n+  StrCpy $0 \\\"Software\\\\Clients\\\\StartMenuInternet\\\\$R9\\\"\\n   ClearErrors\\n-  ${WordFind} \\\"$2\\\" \\\"${FileMainEXE}\\\" \\\"E+1{\\\" $R1\\n+  ReadRegStr $2 HKLM \\\"$0\\\\Capabilities\\\\URLAssociations\\\" \\\"gopher\\\"\\n   ${Unless} ${Errors}\\n-    DeleteRegKey SHCTX \\\"$0\\\\gopher\\\"\\n+    DeleteRegValue HKLM \\\"$0\\\\Capabilities\\\\URLAssociations\\\" \\\"gopher\\\"\\n   ${EndUnless}\\n \\n-  ; Remove protocol handler registry keys added by the MS shim\\n-  DeleteRegKey HKLM \\\"Software\\\\Classes\\\\Firefox.URL\\\"\\n+  ; Delete gopher from the user's UrlAssociations if it points to FirefoxURL.\\n+  StrCpy $0 \\\"Software\\\\Microsoft\\\\Windows\\\\Shell\\\\Associations\\\\UrlAssociations\\\\gopher\\\"\\n+  ReadRegStr $2 HKCU \\\"$0\\\\UserChoice\\\" \\\"Progid\\\"\\n+  ${If} $2 == \\\"FirefoxURL\\\"\\n+    DeleteRegKey HKCU \\\"$0\\\"\\n+  ${EndIf}\\n !macroend\\n-!define FixClassKeys \\\"!insertmacro FixClassKeys\\\"\\n+!define RemoveDeprecatedKeys \\\"!insertmacro RemoveDeprecatedKeys\\\"\\ndiff --git a/browser/installer/windows/nsis/uninstaller.nsi b/browser/installer/windows/nsis/uninstaller.nsi\\nindex e790fda..4f819ac 100755\\n--- a/browser/installer/windows/nsis/uninstaller.nsi\\n+++ b/browser/installer/windows/nsis/uninstaller.nsi\\n@@ -35,7 +35,9 @@\\n # ***** END LICENSE BLOCK *****\\n \\n # Required Plugins:\\n-# ShellLink plugin http://nsis.sourceforge.net/ShellLink_plug-in\\n+# SetVistaDefaultApp http://nsis.sourceforge.net/SetVistaDefaultApp_plug-in\\n+# ShellLink          http://nsis.sourceforge.net/ShellLink_plug-in\\n+# UAC                http://nsis.sourceforge.net/UAC_plug-in\\n \\n ; Set verbosity to 3 (e.g. no script) to lessen the noise in the build logs\\n !verbose 3\\n@@ -48,6 +50,9 @@ CRCCheck on\\n \\n !addplugindir ./\\n \\n+; USE_UAC_PLUGIN is temporary until Thunderbird has been updated to use the UAC plugin\\n+!define USE_UAC_PLUGIN\\n+\\n ; prevents compiling of the reg write logging.\\n !define NO_LOG\\n \\n@@ -67,14 +72,13 @@ Var TmpVal\\n ; available.\\n !include /NONFATAL WinVer.nsh\\n !ifdef ___WINVER__NSH___\\n-  RequestExecutionLevel admin\\n+  RequestExecutionLevel user\\n !else\\n   !warning \\\"Uninstaller will be created without Vista compatibility.$\\\\n            \\\\\\n             Upgrade your NSIS installation to at least version 2.22 to resolve.\\\"\\n !endif\\n \\n !insertmacro StrFilter\\n-!insertmacro WordFind\\n !insertmacro WordReplace\\n \\n !insertmacro un.GetParent\\n@@ -92,9 +96,12 @@ Var TmpVal\\n ; post update cleanup.\\n VIAddVersionKey \\\"FileDescription\\\" \\\"${BrandShortName} Helper\\\"\\n \\n-!insertmacro AddHandlerValues\\n+!insertmacro AddDDEHandlerValues\\n !insertmacro CleanVirtualStore\\n !insertmacro GetLongPath\\n+!insertmacro GetPathFromString\\n+!insertmacro IsHandlerForInstallDir\\n+!insertmacro RegCleanAppHandler\\n !insertmacro RegCleanMain\\n !insertmacro RegCleanUninstall\\n !insertmacro WriteRegDWORD2\\n@@ -105,8 +112,11 @@ VIAddVersionKey \\\"FileDescription\\\" \\\"${BrandShortName} Helper\\\"\\n !insertmacro un.GetSecondInstallPath\\n !insertmacro un.ManualCloseAppPrompt\\n !insertmacro un.ParseUninstallLog\\n+!insertmacro un.RegCleanAppHandler\\n+!insertmacro un.RegCleanFileHandler\\n !insertmacro un.RegCleanMain\\n !insertmacro un.RegCleanUninstall\\n+!insertmacro un.RegCleanProtocolHandler\\n !insertmacro un.RemoveQuotesFromPath\\n \\n !include shared.nsh\\n@@ -152,13 +162,13 @@ ShowUnInstDetails nevershow\\n !insertmacro MUI_UNPAGE_INSTFILES\\n \\n ; Finish Page\\n-!define MUI_PAGE_CUSTOMFUNCTION_PRE un.preFinish\\n-!define MUI_FINISHPAGE_SHOWREADME_NOTCHECKED\\n-!define MUI_FINISHPAGE_SHOWREADME \\\"\\\"\\n \\n-; Setup the survey controls, functions, etc. except when the application has\\n+; Don't setup the survey controls, functions, etc. when the application has\\n ; defined NO_UNINSTALL_SURVEY\\n !ifndef NO_UNINSTALL_SURVEY\\n+!define MUI_PAGE_CUSTOMFUNCTION_PRE un.preFinish\\n+!define MUI_FINISHPAGE_SHOWREADME_NOTCHECKED\\n+!define MUI_FINISHPAGE_SHOWREADME \\\"\\\"\\n !define MUI_FINISHPAGE_SHOWREADME_TEXT $(SURVEY_TEXT)\\n !define MUI_FINISHPAGE_SHOWREADME_FUNCTION un.Survey\\n !endif\\n@@ -191,16 +201,39 @@ Section \\\"Uninstall\\\"\\n     ClearErrors\\n   ${EndIf}\\n \\n-  ; Remove registry entries for non-existent apps and for apps that point to our\\n-  ; install location in the Software\\\\Mozilla key and uninstall registry entries\\n-  ; that point to our install location for both HKCU and HKLM.\\n-  SetShellVarContext current  ; Sets SHCTX to HKCU\\n+  SetShellVarContext current  ; Set SHCTX to HKCU\\n   ${un.RegCleanMain} \\\"Software\\\\Mozilla\\\"\\n   ${un.RegCleanUninstall}\\n \\n-  SetShellVarContext all  ; Sets SHCTX to HKLM\\n-  ${un.RegCleanMain} \\\"Software\\\\Mozilla\\\"\\n-  ${un.RegCleanUninstall}\\n+  ClearErrors\\n+  WriteRegStr HKLM \\\"Software\\\\Mozilla\\\\InstallerTest\\\" \\\"InstallerTest\\\" \\\"Test\\\"\\n+  ${If} ${Errors}\\n+    StrCpy $TmpVal \\\"HKCU\\\" ; used primarily for logging\\n+  ${Else}\\n+    SetShellVarContext all  ; Set SHCTX to HKLM\\n+    DeleteRegKey HKLM \\\"Software\\\\Mozilla\\\\InstallerTest\\\"\\n+    StrCpy $TmpVal \\\"HKLM\\\" ; used primarily for logging\\n+    ${un.RegCleanMain} \\\"Software\\\\Mozilla\\\"\\n+    ${un.RegCleanUninstall}\\n+  ${EndIf}\\n+\\n+  ${un.RegCleanAppHandler} \\\"FirefoxURL\\\"\\n+  ${un.RegCleanAppHandler} \\\"FirefoxHTML\\\"\\n+  ${un.RegCleanProtocolHandler} \\\"ftp\\\"\\n+  ${un.RegCleanProtocolHandler} \\\"http\\\"\\n+  ${un.RegCleanProtocolHandler} \\\"https\\\"\\n+\\n+  ClearErrors\\n+  ReadRegStr $R9 HKCR \\\"FirefoxHTML\\\" \\\"\\\"\\n+  ; Don't clean up the file handlers if the FirefoxHTML key still exists since\\n+  ; there should be a second installation that may be the default file handler\\n+  ${If} ${Errors}\\n+    ${un.RegCleanFileHandler}  \\\".htm\\\"   \\\"FirefoxHTML\\\"\\n+    ${un.RegCleanFileHandler}  \\\".html\\\"  \\\"FirefoxHTML\\\"\\n+    ${un.RegCleanFileHandler}  \\\".shtml\\\" \\\"FirefoxHTML\\\"\\n+    ${un.RegCleanFileHandler}  \\\".xht\\\"   \\\"FirefoxHTML\\\"\\n+    ${un.RegCleanFileHandler}  \\\".xhtml\\\" \\\"FirefoxHTML\\\"\\n+  ${EndIf}\\n \\n   SetShellVarContext all  ; Set SHCTX to HKLM\\n   ${un.GetSecondInstallPath} \\\"Software\\\\Mozilla\\\" $R9\\n@@ -222,9 +255,6 @@ Section \\\"Uninstall\\\"\\n   ; default browser. Now the key is always updated on install but it is only\\n   ; removed if it refers to this install location.\\n   ${If} \\\"$INSTDIR\\\" == \\\"$R1\\\"\\n-    ; XXXrstrong - if there is another installation of the same app ideally we\\n-    ; would just modify these values. The GetSecondInstallPath macro could be\\n-    ; made to provide enough information to do this.\\n     DeleteRegKey HKLM \\\"Software\\\\Clients\\\\StartMenuInternet\\\\${FileMainEXE}\\\"\\n     DeleteRegValue HKLM \\\"Software\\\\RegisteredApplications\\\" \\\"${AppRegName}\\\"\\n   ${EndIf}\\n@@ -236,8 +266,9 @@ Section \\\"Uninstall\\\"\\n     StrCpy $0 \\\"Software\\\\Microsoft\\\\MediaPlayer\\\\ShimInclusionList\\\\${FileMainEXE}\\\"\\n     DeleteRegKey HKLM \\\"$0\\\"\\n     DeleteRegKey HKCU \\\"$0\\\"\\n-    StrCpy $0 \\\"MIME\\\\Database\\\\Content Type\\\\application/x-xpinstall;app=firefox\\\"\\n-    DeleteRegKey HKCR \\\"$0\\\"\\n+    StrCpy $0 \\\"Software\\\\Classes\\\\MIME\\\\Database\\\\Content Type\\\\application/x-xpinstall;app=firefox\\\"\\n+    DeleteRegKey HKLM \\\"$0\\\"\\n+    DeleteRegKey HKCU \\\"$0\\\"\\n   ${Else}\\n     ReadRegStr $R1 HKLM \\\"$0\\\" \\\"\\\"\\n     ${un.RemoveQuotesFromPath} \\\"$R1\\\" $R1\\n@@ -300,7 +331,7 @@ SectionEnd\\n ################################################################################\\n # Helper Functions\\n \\n-; Setup the survey controls, functions, etc. except when the application has\\n+; Don't setup the survey controls, functions, etc. when the application has\\n ; defined NO_UNINSTALL_SURVEY\\n !ifndef NO_UNINSTALL_SURVEY\\n Function un.Survey\\n@@ -340,12 +371,10 @@ Function un.leaveConfirm\\n   ${EndIf}\\n FunctionEnd\\n \\n+!ifndef NO_UNINSTALL_SURVEY\\n Function un.preFinish\\n   ; Do not modify the finish page if there is a reboot pending\\n   ${Unless} ${RebootFlag}\\n-!ifdef NO_UNINSTALL_SURVEY\\n-    !insertmacro MUI_INSTALLOPTIONS_WRITE \\\"ioSpecial.ini\\\" \\\"settings\\\" \\\"NumFields\\\" \\\"3\\\"\\n-!else\\n     ; Setup the survey controls, functions, etc.\\n     StrCpy $TmpVal \\\"SOFTWARE\\\\Microsoft\\\\IE Setup\\\\Setup\\\"\\n     ClearErrors\\n@@ -369,12 +398,13 @@ Function un.preFinish\\n         !insertmacro MUI_INSTALLOPTIONS_WRITE \\\"ioSpecial.ini\\\" \\\"settings\\\" \\\"cancelenabled\\\" \\\"0\\\"\\n       ${EndIf}\\n     ${EndIf}\\n-!endif\\n   ${EndUnless}\\n FunctionEnd\\n+!endif\\n \\n ################################################################################\\n # Initialization Functions\\n+\\n Function .onInit\\n   ${UninstallOnInitCommon}\\n FunctionEnd\\ndiff --git a/other-licenses/7zstub/firefox/7zSD.sfx b/other-licenses/7zstub/firefox/7zSD.sfx\\nindex 8dff92b..65a7ede 100644\\nBinary files a/other-licenses/7zstub/firefox/7zSD.sfx and b/other-licenses/7zstub/firefox/7zSD.sfx differ\\ndiff --git a/toolkit/mozapps/installer/windows/nsis/SetVistaDefaultApp.dll b/toolkit/mozapps/installer/windows/nsis/SetVistaDefaultApp.dll\\nnew file mode 100755\\nindex 0000000..5735e0a\\nBinary files /dev/null and b/toolkit/mozapps/installer/windows/nsis/SetVistaDefaultApp.dll differ\\ndiff --git a/toolkit/mozapps/installer/windows/nsis/UAC.dll b/toolkit/mozapps/installer/windows/nsis/UAC.dll\\nnew file mode 100755\\nindex 0000000..ff93bfb\\nBinary files /dev/null and b/toolkit/mozapps/installer/windows/nsis/UAC.dll differ\\ndiff --git a/toolkit/mozapps/installer/windows/nsis/common.nsh b/toolkit/mozapps/installer/windows/nsis/common.nsh\\nindex 64b004a..8e4a7be 100755\\n--- a/toolkit/mozapps/installer/windows/nsis/common.nsh\\n+++ b/toolkit/mozapps/installer/windows/nsis/common.nsh\\n@@ -1260,6 +1260,7 @@\\n \\n /**\\n  * Writes common registry values for a handler using SHCTX.\\n+ *\\n  * @param   _KEY\\n  *          The subkey in relation to the key root.\\n  * @param   _VALOPEN\\n@@ -1397,6 +1398,162 @@\\n   !endif\\n !macroend\\n \\n+/**\\n+ * Writes common registry values for a handler that uses DDE using SHCTX.\\n+ *\\n+ * @param   _KEY\\n+ *          The key name in relation to the HKCR root. SOFTWARE\\\\Classes is\\n+ *          prefixed to this value when using SHCTX.\\n+ * @param   _VALOPEN\\n+ *          The path and args to launch the application.\\n+ * @param   _VALICON\\n+ *          The path to an exe that contains an icon and the icon resource id.\\n+ * @param   _DISPNAME\\n+ *          The display name for the handler. If emtpy no value will be set.\\n+ * @param   _ISPROTOCOL\\n+ *          Sets protocol handler specific registry values when \\\"true\\\".\\n+ * @param   _DDE_APPNAME\\n+ *          Sets DDE specific registry values when not an empty string.\\n+ *\\n+ * $R0 = storage for SOFTWARE\\\\Classes\\n+ * $R1 = string value of the current registry key path.\\n+ * $R2 = _KEY\\n+ * $R3 = _VALOPEN\\n+ * $R4 = _VALICON\\n+ * $R5 = _DISPNAME\\n+ * $R6 = _ISPROTOCOL\\n+ * $R7 = _DDE_APPNAME\\n+ * $R8 = _DDE_DEFAULT\\n+ * $R9 = _DDE_TOPIC\\n+ */\\n+!macro AddDDEHandlerValues\\n+\\n+  !ifndef ${_MOZFUNC_UN}AddDDEHandlerValues\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !define ${_MOZFUNC_UN}AddDDEHandlerValues \\\"!insertmacro ${_MOZFUNC_UN}AddDDEHandlerValuesCall\\\"\\n+\\n+    Function ${_MOZFUNC_UN}AddDDEHandlerValues\\n+      Exch $R9\\n+      Exch 1\\n+      Exch $R8\\n+      Exch 2\\n+      Exch $R7\\n+      Exch 3\\n+      Exch $R6\\n+      Exch 4\\n+      Exch $R5\\n+      Exch 5\\n+      Exch $R4\\n+      Exch 6\\n+      Exch $R3\\n+      Exch 7\\n+      Exch $R2\\n+      Push $R1\\n+      Push $R0\\n+\\n+      StrCpy $R0 \\\"SOFTWARE\\\\Classes\\\"\\n+      StrCmp \\\"$R5\\\" \\\"\\\" +6 +1\\n+      ReadRegStr $R1 SHCTX \\\"$R2\\\" \\\"FriendlyTypeName\\\"\\n+\\n+      StrCmp \\\"$R1\\\" \\\"\\\" +1 +3\\n+      WriteRegStr SHCTX \\\"$R0\\\\$R2\\\" \\\"\\\" \\\"$R5\\\"\\n+      WriteRegStr SHCTX \\\"$R0\\\\$R2\\\" \\\"FriendlyTypeName\\\" \\\"$R5\\\"\\n+\\n+      StrCmp \\\"$R6\\\" \\\"true\\\" +1 +8\\n+      WriteRegStr SHCTX \\\"$R0\\\\$R2\\\" \\\"URL Protocol\\\" \\\"\\\"\\n+      StrCpy $R1 \\\"\\\"\\n+      ClearErrors\\n+      ReadRegDWord $R1 SHCTX \\\"$R0\\\\$R2\\\" \\\"EditFlags\\\"\\n+      StrCmp $R1 \\\"\\\" +1 +3  ; Only add EditFlags if a value doesn't exist\\n+      DeleteRegValue SHCTX \\\"$R0\\\\$R2\\\" \\\"EditFlags\\\"\\n+      WriteRegDWord SHCTX \\\"$R0\\\\$R2\\\" \\\"EditFlags\\\" 0x00000002\\n+      \\n+      StrCmp \\\"$R4\\\" \\\"\\\" +2 +1\\n+      WriteRegStr SHCTX \\\"$R0\\\\$R2\\\\DefaultIcon\\\" \\\"\\\" \\\"$R4\\\"\\n+\\n+      WriteRegStr SHCTX \\\"$R0\\\\$R2\\\\shell\\\\open\\\\command\\\" \\\"\\\" \\\"$R3\\\"\\n+\\n+      WriteRegStr SHCTX \\\"$R0\\\\$R2\\\\shell\\\\open\\\\ddeexec\\\" \\\"\\\" \\\"$R8\\\"\\n+      WriteRegStr SHCTX \\\"$R0\\\\$R2\\\\shell\\\\open\\\\ddeexec\\\" \\\"NoActivateHandler\\\" \\\"\\\"\\n+      WriteRegStr SHCTX \\\"$R0\\\\$R2\\\\shell\\\\open\\\\ddeexec\\\\Application\\\" \\\"\\\" \\\"$R7\\\"\\n+      WriteRegStr SHCTX \\\"$R0\\\\$R2\\\\shell\\\\open\\\\ddeexec\\\\Topic\\\" \\\"\\\" \\\"$R9\\\"\\n+\\n+      ; The ifexec key may have been added by another application so try to\\n+      ; delete it to prevent it from breaking this app's shell integration.\\n+      ; Also, IE 6 and below doesn't remove this key when it sets itself as the\\n+      ; default handler and if this key exists IE's shell integration breaks.\\n+      DeleteRegKey HKLM \\\"$R0\\\\$R2\\\\shell\\\\open\\\\ddeexec\\\\ifexec\\\"\\n+      DeleteRegKey HKCU \\\"$R0\\\\$R2\\\\shell\\\\open\\\\ddeexec\\\\ifexec\\\"\\n+      ClearErrors\\n+\\n+      Pop $R0\\n+      Pop $R1\\n+      Exch $R2\\n+      Exch 7\\n+      Exch $R3\\n+      Exch 6\\n+      Exch $R4\\n+      Exch 5\\n+      Exch $R5\\n+      Exch 4\\n+      Exch $R6\\n+      Exch 3\\n+      Exch $R7\\n+      Exch 2\\n+      Exch $R8\\n+      Exch 1\\n+      Exch $R9\\n+    FunctionEnd\\n+\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+!macro AddDDEHandlerValuesCall _KEY _VALOPEN _VALICON _DISPNAME _ISPROTOCOL _DDE_APPNAME _DDE_DEFAULT _DDE_TOPIC\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_KEY}\\\"\\n+  Push \\\"${_VALOPEN}\\\"\\n+  Push \\\"${_VALICON}\\\"\\n+  Push \\\"${_DISPNAME}\\\"\\n+  Push \\\"${_ISPROTOCOL}\\\"\\n+  Push \\\"${_DDE_APPNAME}\\\"\\n+  Push \\\"${_DDE_DEFAULT}\\\"\\n+  Push \\\"${_DDE_TOPIC}\\\"\\n+  Call AddDDEHandlerValues\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.AddDDEHandlerValuesCall _KEY _VALOPEN _VALICON _DISPNAME _ISPROTOCOL _DDE_APPNAME _DDE_DEFAULT _DDE_TOPIC\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_KEY}\\\"\\n+  Push \\\"${_VALOPEN}\\\"\\n+  Push \\\"${_VALICON}\\\"\\n+  Push \\\"${_DISPNAME}\\\"\\n+  Push \\\"${_ISPROTOCOL}\\\"\\n+  Push \\\"${_DDE_APPNAME}\\\"\\n+  Push \\\"${_DDE_DEFAULT}\\\"\\n+  Push \\\"${_DDE_TOPIC}\\\"\\n+  Call un.AddDDEHandlerValues\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.AddDDEHandlerValues\\n+  !ifndef un.AddDDEHandlerValues\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN \\\"un.\\\"\\n+\\n+    !insertmacro AddDDEHandlerValues\\n+\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n \\n ################################################################################\\n # Macros for retrieving existing install paths\\n@@ -2447,6 +2604,356 @@\\n !macroend\\n \\n /**\\n+ * Removes an application specific handler registry key under Software\\\\Classes\\n+ * for both HKCU and HKLM when its open command refers to this install\\n+ * location or the install location doesn't exist.\\n+ *\\n+ * @param   _HANDLER_NAME\\n+ *          The registry name for the handler.\\n+ *\\n+ * $R7 = stores the long path to the $INSTDIR\\n+ * $R8 = stores the path to the open command's parent directory\\n+ * $R9 = _HANDLER_NAME\\n+ */\\n+!macro RegCleanAppHandler\\n+\\n+  !ifndef ${_MOZFUNC_UN}RegCleanAppHandler\\n+    !define _MOZFUNC_UN_TMP ${_MOZFUNC_UN}\\n+    !insertmacro ${_MOZFUNC_UN_TMP}GetLongPath\\n+    !insertmacro ${_MOZFUNC_UN_TMP}GetParent\\n+    !insertmacro ${_MOZFUNC_UN_TMP}GetPathFromString\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN ${_MOZFUNC_UN_TMP}\\n+    !undef _MOZFUNC_UN_TMP\\n+\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !define ${_MOZFUNC_UN}RegCleanAppHandler \\\"!insertmacro ${_MOZFUNC_UN}RegCleanAppHandlerCall\\\"\\n+\\n+    Function ${_MOZFUNC_UN}RegCleanAppHandler\\n+      Exch $R9\\n+      Push $R8\\n+      Push $R7\\n+\\n+      ClearErrors\\n+      ReadRegStr $R8 HKCU \\\"Software\\\\Classes\\\\$R9\\\\shell\\\\open\\\\command\\\" \\\"\\\"\\n+      IfErrors next +1\\n+      ${${_MOZFUNC_UN}GetPathFromString} \\\"$R8\\\" $R8\\n+      ${${_MOZFUNC_UN}GetParent} \\\"$R8\\\" $R8\\n+      IfFileExists \\\"$R8\\\" +3 +1\\n+      DeleteRegKey HKCU \\\"Software\\\\Classes\\\\$R9\\\"\\n+      GoTo next\\n+\\n+      ${${_MOZFUNC_UN}GetLongPath} \\\"$R8\\\" $R8\\n+      ${${_MOZFUNC_UN}GetLongPath} \\\"$INSTDIR\\\" $R7\\n+      StrCmp \\\"$R7\\\" \\\"$R8\\\" +1 next\\n+      DeleteRegKey HKCU \\\"Software\\\\Classes\\\\$R9\\\"\\n+\\n+      next:\\n+      ReadRegStr $R8 HKLM \\\"Software\\\\Classes\\\\$R9\\\\shell\\\\open\\\\command\\\" \\\"\\\"\\n+      IfErrors end\\n+      ${${_MOZFUNC_UN}GetPathFromString} \\\"$R8\\\" $R8\\n+      ${${_MOZFUNC_UN}GetParent} \\\"$R8\\\" $R8\\n+      IfFileExists \\\"$R8\\\" +3 +1\\n+      DeleteRegKey HKLM \\\"Software\\\\Classes\\\\$R9\\\"\\n+      GoTo end\\n+\\n+      ${${_MOZFUNC_UN}GetLongPath} \\\"$R8\\\" $R8\\n+      ${${_MOZFUNC_UN}GetLongPath} \\\"$INSTDIR\\\" $R7\\n+      StrCmp \\\"$R7\\\" \\\"$R8\\\" +1 end\\n+      DeleteRegKey HKLM \\\"Software\\\\Classes\\\\$R9\\\"\\n+\\n+      end:\\n+\\n+      Pop $R7\\n+      Pop $R8\\n+      Exch $R9\\n+    FunctionEnd\\n+\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+!macro RegCleanAppHandlerCall _HANDLER_NAME\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_HANDLER_NAME}\\\"\\n+  Call RegCleanAppHandler\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.RegCleanAppHandlerCall _HANDLER_NAME\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_HANDLER_NAME}\\\"\\n+  Call un.RegCleanAppHandler\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.RegCleanAppHandler\\n+  !ifndef un.RegCleanAppHandler\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN \\\"un.\\\"\\n+\\n+    !insertmacro RegCleanAppHandler\\n+\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+/**\\n+ * Cleans up the registry for a protocol handler when its open command\\n+ * refers to this install location. For HKCU the registry key is deleted\\n+ * and for HKLM the values set by the application are deleted.\\n+ *\\n+ * @param   _HANDLER_NAME\\n+ *          The registry name for the handler.\\n+ *\\n+ * $R7 = stores the long path to $INSTDIR\\n+ * $R8 = stores the the long path to the open command's parent directory\\n+ * $R9 = _HANDLER_NAME\\n+ */\\n+!macro un.RegCleanProtocolHandler\\n+\\n+  !ifndef un.RegCleanProtocolHandler\\n+    !insertmacro un.GetLongPath\\n+    !insertmacro un.GetParent\\n+    !insertmacro un.GetPathFromString\\n+\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !define un.RegCleanProtocolHandler \\\"!insertmacro un.RegCleanProtocolHandlerCall\\\"\\n+\\n+    Function un.RegCleanProtocolHandler\\n+      Exch $R9\\n+      Push $R8\\n+      Push $R7\\n+\\n+      ReadRegStr $R8 HKCU \\\"Software\\\\Classes\\\\$R9\\\\shell\\\\open\\\\command\\\" \\\"\\\"\\n+      ${un.GetLongPath} \\\"$INSTDIR\\\" $R7\\n+\\n+      StrCmp \\\"$R8\\\" \\\"\\\" next +1\\n+      ${un.GetPathFromString} \\\"$R8\\\" $R8\\n+      ${un.GetParent} \\\"$R8\\\" $R8\\n+      ${un.GetLongPath} \\\"$R8\\\" $R8\\n+      StrCmp \\\"$R7\\\" \\\"$R8\\\" +1 next\\n+      DeleteRegKey HKCU \\\"Software\\\\Classes\\\\$R9\\\"\\n+\\n+      next:\\n+      ReadRegStr $R8 HKLM \\\"Software\\\\Classes\\\\$R9\\\\shell\\\\open\\\\command\\\" \\\"\\\"\\n+      StrCmp \\\"$R8\\\" \\\"\\\" end +1\\n+      ${un.GetLongPath} \\\"$INSTDIR\\\" $R7\\n+      ${un.GetPathFromString} \\\"$R8\\\" $R8\\n+      ${un.GetParent} \\\"$R8\\\" $R8\\n+      ${un.GetLongPath} \\\"$R8\\\" $R8\\n+      StrCmp \\\"$R7\\\" \\\"$R8\\\" +1 end\\n+      DeleteRegValue HKLM \\\"Software\\\\Classes\\\\$R9\\\\DefaultIcon\\\" \\\"\\\"\\n+      DeleteRegValue HKLM \\\"Software\\\\Classes\\\\$R9\\\\shell\\\\open\\\" \\\"\\\"\\n+      DeleteRegValue HKLM \\\"Software\\\\Classes\\\\$R9\\\\shell\\\\ddeexec\\\" \\\"\\\"\\n+      DeleteRegValue HKLM \\\"Software\\\\Classes\\\\$R9\\\\shell\\\\ddeexec\\\\Application\\\" \\\"\\\"\\n+      DeleteRegValue HKLM \\\"Software\\\\Classes\\\\$R9\\\\shell\\\\ddeexec\\\\Topic\\\" \\\"\\\"\\n+\\n+      end:\\n+\\n+      Pop $R7\\n+      Pop $R8\\n+      Exch $R9\\n+    FunctionEnd\\n+\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+!macro un.RegCleanProtocolHandlerCall _HANDLER_NAME\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_HANDLER_NAME}\\\"\\n+  Call un.RegCleanProtocolHandler\\n+  !verbose pop\\n+!macroend\\n+\\n+/**\\n+ * Cleans up the registry for a file handler when the passed in value equals\\n+ * the default value for the file handler. For HKCU the registry key is deleted\\n+ * and for HKLM the default value is deleted.\\n+ *\\n+ * @param   _HANDLER_NAME\\n+ *          The registry name for the handler.\\n+ * @param   _DEFAULT_VALUE\\n+ *          The value to check for against the handler's default value.\\n+ *\\n+ * $R6 = stores the long path to $INSTDIR\\n+ * $R7 = _DEFAULT_VALUE\\n+ * $R9 = _HANDLER_NAME\\n+ */\\n+!macro RegCleanFileHandler\\n+\\n+  !ifndef ${_MOZFUNC_UN}RegCleanFileHandler\\n+    !define _MOZFUNC_UN_TMP ${_MOZFUNC_UN}\\n+    !insertmacro ${_MOZFUNC_UN_TMP}GetLongPath\\n+    !insertmacro ${_MOZFUNC_UN_TMP}GetParent\\n+    !insertmacro ${_MOZFUNC_UN_TMP}GetPathFromString\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN ${_MOZFUNC_UN_TMP}\\n+    !undef _MOZFUNC_UN_TMP\\n+\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !define ${_MOZFUNC_UN}RegCleanFileHandler \\\"!insertmacro ${_MOZFUNC_UN}RegCleanFileHandlerCall\\\"\\n+\\n+    Function ${_MOZFUNC_UN}RegCleanFileHandler\\n+      Exch $R9\\n+      Exch 1\\n+      Exch $R8\\n+      Push $R7\\n+\\n+      ReadRegStr $R7 HKCU \\\"Software\\\\Classes\\\\$R9\\\" \\\"\\\"\\n+      StrCmp \\\"$R7\\\" \\\"$R8\\\" +1 +2\\n+      DeleteRegKey HKCU \\\"Software\\\\Classes\\\\$R9\\\"\\n+\\n+      ReadRegStr $R7 HKLM \\\"Software\\\\Classes\\\\$R9\\\" \\\"\\\"\\n+      StrCmp \\\"$R7\\\" \\\"$R8\\\" +1 +2\\n+      DeleteRegValue HKLM \\\"Software\\\\Classes\\\\$R9\\\" \\\"\\\"\\n+\\n+      ClearErrors\\n+\\n+      Pop $R7\\n+      Exch $R8\\n+      Exch 1\\n+      Exch $R9\\n+    FunctionEnd\\n+\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+!macro RegCleanFileHandlerCall _HANDLER_NAME _DEFAULT_VALUE\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_DEFAULT_VALUE}\\\"\\n+  Push \\\"${_HANDLER_NAME}\\\"\\n+  Call RegCleanFileHandler\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.RegCleanFileHandlerCall _HANDLER_NAME _DEFAULT_VALUE\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_DEFAULT_VALUE}\\\"\\n+  Push \\\"${_HANDLER_NAME}\\\"\\n+  Call un.RegCleanFileHandler\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.RegCleanFileHandler\\n+  !ifndef un.RegCleanFileHandler\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN \\\"un.\\\"\\n+\\n+    !insertmacro RegCleanFileHandler\\n+\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+/**\\n+ * Checks if a handler's open command points to this installation directory.\\n+ *\\n+ * @param   _HANDLER_NAME\\n+ *          The registry name for the handler.\\n+ * @param   _RESULT\\n+ *          true if it is the handler's open command points to this\\n+ *          installation directory and false if it does not.\\n+ *\\n+ * $R7 = stores the value of the open command and the path macros return values\\n+ * $R8 = stores the handler's registry key name\\n+ * $R9 = _DEFAULT_VALUE and _RESULT\\n+ */\\n+!macro IsHandlerForInstallDir\\n+\\n+  !ifndef ${_MOZFUNC_UN}IsHandlerForInstallDir\\n+    !define _MOZFUNC_UN_TMP ${_MOZFUNC_UN}\\n+    !insertmacro ${_MOZFUNC_UN_TMP}GetLongPath\\n+    !insertmacro ${_MOZFUNC_UN_TMP}GetParent\\n+    !insertmacro ${_MOZFUNC_UN_TMP}GetPathFromString\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN ${_MOZFUNC_UN_TMP}\\n+    !undef _MOZFUNC_UN_TMP\\n+\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !define ${_MOZFUNC_UN}IsHandlerForInstallDir \\\"!insertmacro ${_MOZFUNC_UN}IsHandlerForInstallDirCall\\\"\\n+\\n+    Function ${_MOZFUNC_UN}IsHandlerForInstallDir\\n+      Exch $R9\\n+      Push $R8\\n+      Push $R7\\n+\\n+      StrCpy $R8 \\\"$R9\\\"\\n+      StrCpy $R9 \\\"false\\\"\\n+      ReadRegStr $R7 HKCR \\\"$R8\\\\shell\\\\open\\\\command\\\" \\\"\\\"\\n+      StrCmp \\\"$R7\\\" \\\"\\\" end\\n+\\n+      ${GetPathFromString} \\\"$R7\\\" $R7\\n+      ${GetParent} \\\"$R7\\\" $R7\\n+      ${GetLongPath} \\\"$R7\\\" $R7\\n+      StrCmp \\\"$R7\\\" \\\"$INSTDIR\\\" +1 end\\n+      StrCpy $R9 \\\"true\\\"\\n+\\n+      end:\\n+      ClearErrors\\n+\\n+      Pop $R7\\n+      Pop $R8\\n+      Exch $R9\\n+    FunctionEnd\\n+\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+!macro IsHandlerForInstallDirCall _HANDLER_NAME _RESULT\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_HANDLER_NAME}\\\"\\n+  Call IsHandlerForInstallDir\\n+  Pop \\\"${_RESULT}\\\"\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.IsHandlerForInstallDirCall _HANDLER_NAME _RESULT\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Push \\\"${_HANDLER_NAME}\\\"\\n+  Call un.IsHandlerForInstallDir\\n+  Pop \\\"${_RESULT}\\\"\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.IsHandlerForInstallDir\\n+  !ifndef un.IsHandlerForInstallDir\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN \\\"un.\\\"\\n+\\n+    !insertmacro IsHandlerForInstallDir\\n+\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+/**\\n  * If present removes the VirtualStore directory for this installation. Uses the\\n  * program files directory path and the current install location to determine\\n  * the sub-directory in the VirtualStore directory.\\n@@ -2858,6 +3365,7 @@\\n       Push $R2\\n       Push $R1\\n       Push $R0\\n+      Push $TmpVal\\n \\n       IfFileExists \\\"$INSTDIR\\\\uninstall\\\\uninstall.log\\\" +1 end\\n \\n@@ -2879,6 +3387,7 @@\\n \\n       end:\\n \\n+      Pop $TmpVal\\n       Pop $R0\\n       Pop $R1\\n       Pop $R2\\n@@ -3063,6 +3572,7 @@\\n     !insertmacro GetOptions\\n     !insertmacro GetParameters\\n     !insertmacro GetSize\\n+    !insertmacro ElevateUAC\\n \\n     !verbose push\\n     !verbose ${_MOZFUNC_VERBOSE}\\n@@ -3083,6 +3593,10 @@\\n       !endif\\n \\n       ${GetParameters} $R8\\n+\\n+      ; Require elevation if the user can elevate\\n+      ${ElevateUAC}\\n+\\n       ${If} $R8 != \\\"\\\"\\n         ClearErrors\\n         ${GetOptions} \\\"$R8\\\" \\\"-ms\\\" $R7\\n@@ -3230,6 +3744,7 @@\\n     !insertmacro GetOptions\\n     !insertmacro GetParameters\\n     !insertmacro UpdateUninstallLog\\n+    !insertmacro ElevateUAC\\n \\n     !verbose push\\n     !verbose ${_MOZFUNC_VERBOSE}\\n@@ -3246,42 +3761,60 @@\\n \\n       StrCmp \\\"$R0\\\" \\\"\\\" continue +1\\n \\n-      StrCmp \\\"$R0\\\" \\\"/HideShortcuts\\\" +1 showshortcuts\\n+      ; Require elevation if the user can elevate\\n+      ClearErrors\\n+      ${GetOptions} \\\"$R0\\\" \\\"/HideShortcuts\\\" $R2\\n+      IfErrors showshortcuts +1\\n+      ${ElevateUAC}\\n       ${HideShortcuts}\\n       StrCpy $R1 \\\"true\\\"\\n       StrCmp \\\"$R1\\\" \\\"true\\\" continue\\n \\n+      ; Require elevation if the user can elevate\\n       showshortcuts:\\n-      StrCmp \\\"$R0\\\" \\\"/ShowShortcuts\\\" +1 defaultappuser\\n+      ClearErrors\\n+      ${GetOptions} \\\"$R0\\\" \\\"/ShowShortcuts\\\" $R2\\n+      IfErrors defaultappuser +1\\n+      ${ElevateUAC}\\n       ${ShowShortcuts}\\n       StrCpy $R1 \\\"true\\\"\\n       GoTo continue\\n \\n+      ; Require elevation if the the StartMenuInternet registry keys require\\n+      ; updating and the user can elevate\\n       defaultappuser:\\n-      StrCmp \\\"$R0\\\" \\\"/SetAsDefaultAppUser\\\" +1 defaultappglobal\\n+      ClearErrors\\n+      ${GetOptions} \\\"$R0\\\" \\\"/SetAsDefaultAppUser\\\" $R2\\n+      IfErrors defaultappglobal +1\\n       ${SetAsDefaultAppUser}\\n       StrCpy $R1 \\\"true\\\"\\n       GoTo continue\\n \\n+      ; Require elevation if the user can elevate\\n       defaultappglobal:\\n-      StrCmp \\\"$R0\\\" \\\"/SetAsDefaultAppGlobal\\\" +1 postupdate\\n+      ClearErrors\\n+      ${GetOptions} \\\"$R0\\\" \\\"/SetAsDefaultAppGlobal\\\" $R2\\n+      IfErrors postupdate +1\\n+      ${ElevateUAC}\\n       ${SetAsDefaultAppGlobal}\\n       StrCpy $R1 \\\"true\\\"\\n       GoTo continue\\n \\n+      ; Do not attempt to elevate. The application launching this executable is\\n+      ; responsible for elevation if it is required.\\n       postupdate:\\n       ${WordReplace} \\\"$R0\\\" \\\"$\\\\\\\"\\\" \\\"\\\" \\\"+\\\" $R0\\n       ClearErrors\\n       ${GetOptions} \\\"$R0\\\" \\\"/PostUpdate\\\" $R2\\n+      StrCpy $R1 \\\"true\\\"\\n       IfErrors continue +1\\n+      ; If the uninstall.log does not exist don't perform post update\\n+      ; operations. This prevents updating the registry for zip builds.\\n+      IfFileExists \\\"$EXEDIR\\\\uninstall.log\\\" +1 continue\\n       ${PostUpdate}\\n       ClearErrors\\n       ${GetOptions} \\\"$R0\\\" \\\"/UninstallLog=\\\" $R2\\n-      IfErrors +1 +4\\n-      ${UpdateUninstallLog}\\n-      StrCpy $R1 \\\"true\\\"\\n-      GoTo continue\\n-\\n+      IfErrors updateuninstalllog +1\\n       StrCmp \\\"$R2\\\" \\\"\\\" continue +1\\n       GetFullPathName $R3 \\\"$R2\\\"\\n       IfFileExists \\\"$R3\\\" +1 continue\\n@@ -3291,14 +3824,27 @@\\n       ${GetParent} \\\"$R3\\\" $R4\\n       Delete \\\"$R3\\\"\\n       RmDir \\\"$R4\\\"\\n-      StrCpy $R1 \\\"true\\\"\\n+      GoTo continue\\n \\n+      ; Do not attempt to elevate. The application launching this executable is\\n+      ; responsible for elevation if it is required.\\n+      updateuninstalllog:\\n+      ${UpdateUninstallLog}\\n+      StrCpy $R1 \\\"true\\\"\\n+      \\n       continue:\\n-\\n       StrCmp $R1 \\\"true\\\" +1 +3\\n       System::Call \\\"shell32::SHChangeNotify(i, i, i, i) v (0x08000000, 0, 0, 0)\\\"\\n       Quit\\n \\n+      ; If the uninstall.log does not exist don't perform uninstall\\n+      ; operations. This prevents running the uninstaller for zip builds.\\n+      IfFileExists \\\"$EXEDIR\\\\uninstall.log\\\" +2 +1\\n+      Quit\\n+\\n+      ; Require elevation if the user can elevate\\n+      ${ElevateUAC}\\n+\\n       ; If we made it this far then this installer is being used as an uninstaller.\\n       WriteUninstaller \\\"$EXEDIR\\\\uninstaller.exe\\\"\\n \\n@@ -3506,7 +4052,6 @@\\n \\n       ; Remove the files and directories in the removed-files.log\\n       ${ParseRemovedFilesLog}\\n- \\n     FunctionEnd\\n \\n     !verbose pop\\n@@ -3555,6 +4100,98 @@\\n \\n \\n ################################################################################\\n+# UAC Related Macros\\n+\\n+/**\\n+ * Provides UAC elevation support for Vista and above (requires the UAC plugin).\\n+ *\\n+ * $0 = return values from calls to the UAC plugin (always uses $0)\\n+ * $R9 = return values from GetParameters and GetOptions macros\\n+ */\\n+!macro ElevateUAC\\n+\\n+  !ifndef ${_MOZFUNC_UN}ElevateUAC\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !define ${_MOZFUNC_UN}ElevateUAC \\\"!insertmacro ${_MOZFUNC_UN}ElevateUACCall\\\"\\n+\\n+    Function ${_MOZFUNC_UN}ElevateUAC\\n+      Push $R9\\n+      Push $0\\n+\\n+; USE_UAC_PLUGIN is temporary until Thunderbird has been updated to use the UAC plugin\\n+!ifdef USE_UAC_PLUGIN\\n+      !ifdef ___WINVER__NSH___\\n+        ${If} ${AtLeastWinVista}\\n+          UAC::IsAdmin\\n+          ; If the user is not an admin already\\n+          ${If} \\\"$0\\\" != \\\"1\\\"\\n+            UAC::SupportsUAC\\n+            ; If the system supports UAC\\n+            ${If} \\\"$0\\\" == \\\"1\\\"\\n+              UAC::GetElevationType\\n+              ; If the user account has a split token\\n+              ${If} \\\"$0\\\" == \\\"3\\\"\\n+                UAC::RunElevated \\n+                Quit\\n+              ${EndIf}\\n+            ${EndIf}\\n+          ${Else}\\n+            ${GetParameters} $R9\\n+            ${If} $R9 != \\\"\\\"\\n+              ClearErrors\\n+              ${GetOptions} \\\"$R9\\\" \\\"/UAC:\\\" $0\\n+              ; If the command line contains /UAC then we need to initialize\\n+              ; the UAC plugin to use UAC::ExecCodeSegment to execute code in\\n+              ; the non-elevated context.\\n+              ${Unless} ${Errors}\\n+                UAC::RunElevated \\n+              ${EndUnless}\\n+            ${EndIf}\\n+          ${EndIf}\\n+        ${EndIf}\\n+      !endif\\n+!endif\\n+\\n+      Pop $0\\n+      Pop $R9\\n+    FunctionEnd\\n+\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+!macro ElevateUACCall\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Call ElevateUAC\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.ElevateUACCall\\n+  !verbose push\\n+  !verbose ${_MOZFUNC_VERBOSE}\\n+  Call un.ElevateUAC\\n+  !verbose pop\\n+!macroend\\n+\\n+!macro un.ElevateUAC\\n+  !ifndef un.ElevateUAC\\n+    !verbose push\\n+    !verbose ${_MOZFUNC_VERBOSE}\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN \\\"un.\\\"\\n+\\n+    !insertmacro ElevateUAC\\n+\\n+    !undef _MOZFUNC_UN\\n+    !define _MOZFUNC_UN\\n+    !verbose pop\\n+  !endif\\n+!macroend\\n+\\n+\\n+################################################################################\\n # Macros for logging\\n #\\n # Since these are used by other macros they should be inserted first. All of\\ndiff --git a/toolkit/mozapps/installer/windows/nsis/makensis.mk b/toolkit/mozapps/installer/windows/nsis/makensis.mk\\nindex 53f783a..a94dd0f 100755\\n--- a/toolkit/mozapps/installer/windows/nsis/makensis.mk\\n+++ b/toolkit/mozapps/installer/windows/nsis/makensis.mk\\n@@ -49,7 +49,9 @@ TOOLKIT_NSIS_FILES = \\\\\\n \\tlocales.nsi \\\\\\n \\tnsProcess.dll \\\\\\n \\toverrides.nsh \\\\\\n+\\tSetVistaDefaultApp.dll \\\\\\n \\tShellLink.dll \\\\\\n+\\tUAC.dll \\\\\\n \\tversion.nsh \\\\\\n \\t$(NULL)\\n \\ndiff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp\\nindex 64aa963..622b4a7 100644\\n--- a/toolkit/xre/nsAppRunner.cpp\\n+++ b/toolkit/xre/nsAppRunner.cpp\\n@@ -701,22 +701,6 @@ nsXULAppInfo::LaunchAppHelperWithArgs(int aArgc, char **aArgv)\\n }\\n \\n NS_IMETHODIMP\\n-nsXULAppInfo::FixReg()\\n-{\\n-  int resetRegArgc = 2;\\n-  char **resetRegArgv = (char**) malloc(sizeof(char*) * (resetRegArgc + 1));\\n-  if (!resetRegArgv)\\n-    return NS_ERROR_OUT_OF_MEMORY;\\n-\\n-  resetRegArgv[0] = \\\"argv0ignoredbywinlaunchchild\\\";\\n-  resetRegArgv[1] = \\\"/fixreg\\\";\\n-  resetRegArgv[2] = nsnull;\\n-  nsresult rv = LaunchAppHelperWithArgs(resetRegArgc, resetRegArgv);\\n-  free(resetRegArgv);\\n-  return rv;\\n-}\\n-\\n-NS_IMETHODIMP\\n nsXULAppInfo::PostUpdate(nsILocalFile *aLogFile)\\n {\\n   nsresult rv;\\ndiff --git a/toolkit/xre/nsIWinAppHelper.idl b/toolkit/xre/nsIWinAppHelper.idl\\nindex a1d2c38..5e9b29f 100644\\n--- a/toolkit/xre/nsIWinAppHelper.idl\\n+++ b/toolkit/xre/nsIWinAppHelper.idl\\n@@ -46,10 +46,9 @@\\n \\n interface nsILocalFile;\\n \\n-[scriptable, uuid(b0fb682a-8287-4b0f-b628-65bb206c073f)]\\n+[scriptable, uuid(2bd9ec66-05eb-4f63-8825-a83ccf00fc7f)]\\n interface nsIWinAppHelper : nsISupports\\n {\\n   void postUpdate(in nsILocalFile logFile);\\n-  void fixReg();\\n   readonly attribute boolean userCanElevate;\\n };\\n\""}