{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basd1cef86\""},"diff":"\"d1cef86 Backout bug 392251 again due to Ts regression.\\ndiff --git a/toolkit/xre/nsXREDirProvider.cpp b/toolkit/xre/nsXREDirProvider.cpp\\nindex 32b4a11..3fea87e 100644\\n--- a/toolkit/xre/nsXREDirProvider.cpp\\n+++ b/toolkit/xre/nsXREDirProvider.cpp\\n@@ -45,7 +45,6 @@\\n #include \\\"jsapi.h\\\"\\n \\n #include \\\"nsIJSContextStack.h\\\"\\n-#include \\\"nsIDirectoryEnumerator.h\\\"\\n #include \\\"nsILocalFile.h\\\"\\n #include \\\"nsIObserverService.h\\\"\\n #include \\\"nsIProfileChangeStatus.h\\\"\\n@@ -101,8 +100,7 @@\\n nsXREDirProvider* gDirServiceProvider = nsnull;\\n \\n nsXREDirProvider::nsXREDirProvider() :\\n-  mProfileNotified(PR_FALSE),\\n-  mExtensionsLoaded(PR_FALSE)\\n+  mProfileNotified(PR_FALSE)\\n {\\n   gDirServiceProvider = this;\\n }\\n@@ -393,55 +391,151 @@ nsXREDirProvider::GetFile(const char* aProperty, PRBool* aPersistent,\\n }\\n \\n static void\\n-LoadPlatformDirectory(nsIFile* aBundleDirectory,\\n-                      nsCOMArray<nsIFile> &aDirectories)\\n+LoadDirsIntoArray(nsIFile* aComponentsList, const char* aSection,\\n+                  const char *const* aAppendList,\\n+                  nsCOMArray<nsIFile>& aDirectories)\\n {\\n-  nsCOMPtr<nsIFile> platformDir;\\n-  nsresult rv = aBundleDirectory->Clone(getter_AddRefs(platformDir));\\n+  nsINIParser parser;\\n+  nsCOMPtr<nsILocalFile> lf(do_QueryInterface(aComponentsList));\\n+  nsresult rv =  parser.Init(lf);\\n   if (NS_FAILED(rv))\\n     return;\\n \\n-  platformDir->AppendNative(NS_LITERAL_CSTRING(\\\"platform\\\"));\\n+  NS_NAMED_LITERAL_CSTRING(platform, \\\"platform\\\");\\n+  NS_NAMED_LITERAL_CSTRING(osTarget, OS_TARGET);\\n+#ifdef TARGET_OS_ABI\\n+  NS_NAMED_LITERAL_CSTRING(targetOSABI, TARGET_OS_ABI);\\n+#endif\\n+\\n+  PRInt32 i = 0;\\n+  do {\\n+    nsCAutoString buf(\\\"Extension\\\");\\n+    buf.AppendInt(i++);\\n+\\n+    nsCAutoString path;\\n+    rv = parser.GetString(aSection, buf.get(), path);\\n+    if (NS_FAILED(rv))\\n+      break;\\n+\\n+    nsCOMPtr<nsILocalFile> dir = do_CreateInstance(\\\"@mozilla.org/file/local;1\\\", &rv);\\n+    if (NS_FAILED(rv))\\n+      continue;\\n \\n+    nsCOMPtr<nsIFile> platformDir;\\n #ifdef TARGET_OS_ABI\\n-  nsCOMPtr<nsIFile> platformABIDir;\\n-  rv = platformDir->Clone(getter_AddRefs(platformABIDir));\\n-  if (NS_FAILED(rv))\\n-    return;\\n+    nsCOMPtr<nsIFile> platformABIDir;\\n #endif\\n+    rv = dir->SetPersistentDescriptor(path);\\n+    if (NS_FAILED(rv))\\n+      continue;\\n \\n-  platformDir->AppendNative(NS_LITERAL_CSTRING(OS_TARGET));\\n+    rv = dir->Clone(getter_AddRefs(platformDir));\\n+    if (NS_FAILED(rv))\\n+      continue;\\n \\n-  PRBool exists;\\n-  if (NS_SUCCEEDED(platformDir->Exists(&exists)) && exists)\\n-    aDirectories.AppendObject(platformDir);\\n+    platformDir->AppendNative(platform);\\n+    platformDir->AppendNative(osTarget);\\n \\n #ifdef TARGET_OS_ABI\\n-  platformABIDir->AppendNative(NS_LITERAL_CSTRING(TARGET_OS_ABI));\\n-  if (NS_SUCCEEDED(platformABIDir->Exists(&exists)) && exists)\\n-    aDirectories.AppendObject(platformABIDir);\\n+    rv = dir->Clone(getter_AddRefs(platformABIDir));\\n+    if (NS_FAILED(rv))\\n+      continue;\\n+\\n+    platformABIDir->AppendNative(platform);\\n+    platformABIDir->AppendNative(targetOSABI);\\n+#endif\\n+\\n+    const char* const* a = aAppendList;\\n+    while (*a) {\\n+      nsDependentCString directory(*a);\\n+      dir->AppendNative(directory);\\n+      platformDir->AppendNative(directory);\\n+#ifdef TARGET_OS_ABI\\n+      platformABIDir->AppendNative(directory);\\n #endif\\n+      ++a;\\n+    }\\n+\\n+    PRBool exists;\\n+    rv = dir->Exists(&exists);\\n+    if (NS_SUCCEEDED(rv) && exists)\\n+      aDirectories.AppendObject(dir);\\n+\\n+    rv = platformDir->Exists(&exists);\\n+    if (NS_SUCCEEDED(rv) && exists)\\n+      aDirectories.AppendObject(platformDir);\\n+\\n+#ifdef TARGET_OS_ABI\\n+    rv = platformABIDir->Exists(&exists);\\n+    if (NS_SUCCEEDED(rv) && exists)\\n+      aDirectories.AppendObject(platformABIDir);\\n+#endif\\n+  }\\n+  while (PR_TRUE);\\n }\\n \\n+\\n static void\\n-LoadDirsIntoArray(nsCOMArray<nsIFile>& aSourceDirs,\\n+LoadAppPlatformDirIntoArray(nsIFile* aXULAppDir,\\n                   const char *const* aAppendList,\\n                   nsCOMArray<nsIFile>& aDirectories)\\n {\\n-  nsCOMPtr<nsIFile> appended;\\n-  PRBool exists;\\n+  NS_NAMED_LITERAL_CSTRING(platform, \\\"platform\\\");\\n+  NS_NAMED_LITERAL_CSTRING(osTarget, OS_TARGET);\\n+#ifdef TARGET_OS_ABI\\n+  NS_NAMED_LITERAL_CSTRING(targetOSABI, TARGET_OS_ABI);\\n+#endif\\n \\n-  for (PRInt32 i = 0; i < aSourceDirs.Count(); ++i) {\\n-    aSourceDirs[i]->Clone(getter_AddRefs(appended));\\n-    if (!appended)\\n-      continue;\\n+  nsCOMPtr<nsIFile> dir;\\n+  nsresult rv = aXULAppDir->Clone(getter_AddRefs(dir));\\n+  if (NS_FAILED(rv))\\n+    return;\\n+\\n+  nsCOMPtr<nsIFile> platformDir;\\n+#ifdef TARGET_OS_ABI\\n+  nsCOMPtr<nsIFile> platformABIDir;\\n+#endif\\n+  rv = dir->Clone(getter_AddRefs(platformDir));\\n+  if (NS_FAILED(rv))\\n+    return;\\n \\n-    for (const char *const *a = aAppendList; *a; ++a)\\n-      appended->AppendNative(nsDependentCString(*a));\\n+  platformDir->AppendNative(platform);\\n+  platformDir->AppendNative(osTarget);\\n \\n-    if (NS_SUCCEEDED(appended->Exists(&exists)) && exists)\\n-      aDirectories.AppendObject(appended);\\n+#ifdef TARGET_OS_ABI\\n+  rv = dir->Clone(getter_AddRefs(platformABIDir));\\n+  if (NS_FAILED(rv))\\n+    return;\\n+\\n+  platformABIDir->AppendNative(platform);\\n+  platformABIDir->AppendNative(targetOSABI);\\n+#endif\\n+\\n+  const char* const* a = aAppendList;\\n+  while (*a) {\\n+    nsDependentCString directory(*a);\\n+    dir->AppendNative(directory);\\n+    platformDir->AppendNative(directory);\\n+#ifdef TARGET_OS_ABI\\n+    platformABIDir->AppendNative(directory);\\n+#endif\\n+    ++a;\\n   }\\n+\\n+  PRBool exists;\\n+  rv = dir->Exists(&exists);\\n+  if (NS_SUCCEEDED(rv) && exists)\\n+    aDirectories.AppendObject(dir);\\n+\\n+  rv = platformDir->Exists(&exists);\\n+  if (NS_SUCCEEDED(rv) && exists)\\n+    aDirectories.AppendObject(platformDir);\\n+\\n+#ifdef TARGET_OS_ABI\\n+  rv = platformABIDir->Exists(&exists);\\n+  if (NS_SUCCEEDED(rv) && exists)\\n+    aDirectories.AppendObject(platformABIDir);\\n+#endif\\n }\\n \\n static const char *const kAppendChromeManifests[] =\\n@@ -484,108 +578,6 @@ nsXREDirProvider::GetFiles(const char* aProperty, nsISimpleEnumerator** aResult)\\n   return NS_SUCCESS_AGGREGATE_RESULT;\\n }\\n \\n-static void\\n-LoadExtensionDirectories(nsINIParser &parser,\\n-                         const char *aSection, \\n-                         nsCOMArray<nsIFile> &aDirectories)\\n-{\\n-  nsresult rv;\\n-  PRInt32 i = 0;\\n-  do {\\n-    nsCAutoString buf(\\\"Extension\\\");\\n-    buf.AppendInt(i++);\\n-\\n-    nsCAutoString path;\\n-    rv = parser.GetString(aSection, buf.get(), path);\\n-    if (NS_FAILED(rv))\\n-      return;\\n-\\n-    nsCOMPtr<nsILocalFile> dir = do_CreateInstance(\\\"@mozilla.org/file/local;1\\\", &rv);\\n-    if (NS_FAILED(rv))\\n-      continue;\\n-\\n-    rv = dir->SetPersistentDescriptor(path);\\n-    if (NS_FAILED(rv))\\n-      continue;\\n-\\n-    aDirectories.AppendObject(dir);\\n-    LoadPlatformDirectory(dir, aDirectories);\\n-  }\\n-  while (PR_TRUE);\\n-}\\n-\\n-void\\n-nsXREDirProvider::LoadBundleDirectories()\\n-{\\n-  if (mExtensionsLoaded)\\n-    return;\\n-\\n-  mExtensionsLoaded = PR_TRUE;\\n-\\n-  // first load distribution/bundles\\n-  if (mXULAppDir) {\\n-    mExtensionDirectories.AppendObject(mXULAppDir);\\n-    LoadPlatformDirectory(mXULAppDir, mExtensionDirectories);\\n-    LoadAppBundleDirs();\\n-  }\\n-\\n-  if (mProfileDir && !gSafeMode) {\\n-    nsCOMPtr<nsIFile> extensionsINI;\\n-    mProfileDir->Clone(getter_AddRefs(extensionsINI));\\n-    if (!extensionsINI)\\n-      return;\\n-\\n-    extensionsINI->AppendNative(NS_LITERAL_CSTRING(\\\"extensions.ini\\\"));\\n-\\n-    nsCOMPtr<nsILocalFile> extensionsINILF =\\n-      do_QueryInterface(extensionsINI);\\n-    if (!extensionsINILF)\\n-      return;\\n-\\n-    nsINIParser parser;\\n-    nsresult rv = parser.Init(extensionsINILF);\\n-    if (NS_FAILED(rv))\\n-      return;\\n-\\n-    LoadExtensionDirectories(parser, \\\"ExtensionDirs\\\", mExtensionDirectories);\\n-    LoadExtensionDirectories(parser, \\\"ThemeDirs\\\", mThemeDirectories);\\n-  }\\n-}\\n-\\n-void\\n-nsXREDirProvider::LoadAppBundleDirs()\\n-{\\n-  if (!mXULAppDir)\\n-    return;\\n-\\n-  nsCOMPtr<nsIFile> dir;\\n-  nsresult rv = mXULAppDir->Clone(getter_AddRefs(dir));\\n-  if (NS_FAILED(rv))\\n-    return;\\n-  \\n-  dir->AppendNative(NS_LITERAL_CSTRING(\\\"distribution\\\"));\\n-  dir->AppendNative(NS_LITERAL_CSTRING(\\\"bundles\\\"));\\n-\\n-  PRBool exists;\\n-  if (NS_FAILED(dir->Exists(&exists)) || !exists)\\n-    return;\\n-\\n-  nsCOMPtr<nsISimpleEnumerator> e;\\n-  rv = dir->GetDirectoryEntries(getter_AddRefs(e));\\n-  if (NS_FAILED(rv))\\n-    return;\\n-\\n-  nsCOMPtr<nsIDirectoryEnumerator> files = do_QueryInterface(e);\\n-  if (!files)\\n-    return;\\n-\\n-  nsCOMPtr<nsIFile> subdir;\\n-  while (NS_SUCCEEDED(files->GetNextFile(getter_AddRefs(subdir))) && subdir) {\\n-    mExtensionDirectories.AppendObject(subdir);\\n-    LoadPlatformDirectory(subdir, mExtensionDirectories);\\n-  }\\n-}\\n-\\n nsresult\\n nsXREDirProvider::GetFilesInternal(const char* aProperty,\\n                                    nsISimpleEnumerator** aResult)\\n@@ -593,14 +585,21 @@ nsXREDirProvider::GetFilesInternal(const char* aProperty,\\n   nsresult rv = NS_OK;\\n   *aResult = nsnull;\\n \\n+  nsCOMPtr<nsIFile> profileFile;\\n+  if (mProfileDir) {\\n+    mProfileDir->Clone(getter_AddRefs(profileFile));\\n+    profileFile->AppendNative(NS_LITERAL_CSTRING(\\\"extensions.ini\\\"));\\n+  }\\n+\\n   if (!strcmp(aProperty, XRE_EXTENSIONS_DIR_LIST)) {\\n     nsCOMArray<nsIFile> directories;\\n     \\n-    static const char *const kAppendNothing[] = { nsnull };\\n+    if (mProfileDir && !gSafeMode) {\\n+      static const char *const kAppendNothing[] = { nsnull };\\n \\n-    LoadBundleDirectories();\\n-    LoadDirsIntoArray(mExtensionDirectories,\\n-                      kAppendNothing, directories);\\n+      LoadDirsIntoArray(profileFile, \\\"ExtensionDirs\\\",\\n+                        kAppendNothing, directories);\\n+    }\\n \\n     rv = NS_NewArrayEnumerator(aResult, directories);\\n   }\\n@@ -608,29 +607,51 @@ nsXREDirProvider::GetFilesInternal(const char* aProperty,\\n     static const char *const kAppendCompDir[] = { \\\"components\\\", nsnull };\\n     nsCOMArray<nsIFile> directories;\\n \\n-    LoadBundleDirectories();\\n-    LoadDirsIntoArray(mExtensionDirectories,\\n-                      kAppendCompDir, directories);\\n+    if (mXULAppDir) {\\n+      nsCOMPtr<nsIFile> file;\\n+      mXULAppDir->Clone(getter_AddRefs(file));\\n+      file->AppendNative(NS_LITERAL_CSTRING(\\\"components\\\"));\\n+      PRBool exists;\\n+      if (NS_SUCCEEDED(file->Exists(&exists)) && exists)\\n+        directories.AppendObject(file);\\n+\\n+       LoadAppPlatformDirIntoArray(mXULAppDir, kAppendCompDir, directories);\\n+    }\\n+\\n+    if (mProfileDir && !gSafeMode) {\\n+      LoadDirsIntoArray(profileFile, \\\"ExtensionDirs\\\",\\n+                        kAppendCompDir, directories);\\n+    }\\n \\n     rv = NS_NewArrayEnumerator(aResult, directories);\\n   }\\n   else if (!strcmp(aProperty, NS_APP_PREFS_DEFAULTS_DIR_LIST)) {\\n     static const char *const kAppendPrefDir[] = { \\\"defaults\\\", \\\"preferences\\\", nsnull };\\n     nsCOMArray<nsIFile> directories;\\n+    PRBool exists;\\n \\n-    LoadBundleDirectories();\\n-    LoadDirsIntoArray(mExtensionDirectories,\\n-                      kAppendPrefDir, directories);\\n+    if (mXULAppDir) {\\n+      nsCOMPtr<nsIFile> file;\\n+      mXULAppDir->Clone(getter_AddRefs(file));\\n+      file->AppendNative(NS_LITERAL_CSTRING(\\\"defaults\\\"));\\n+      file->AppendNative(NS_LITERAL_CSTRING(\\\"preferences\\\"));\\n+      if (NS_SUCCEEDED(file->Exists(&exists)) && exists)\\n+        directories.AppendObject(file);\\n \\n+       LoadAppPlatformDirIntoArray(mXULAppDir, kAppendPrefDir, directories);\\n+    }\\n     \\n     if (mProfileDir) {\\n       nsCOMPtr<nsIFile> overrideFile;\\n       mProfileDir->Clone(getter_AddRefs(overrideFile));\\n       overrideFile->AppendNative(NS_LITERAL_CSTRING(PREF_OVERRIDE_DIRNAME));\\n-\\n-      PRBool exists;\\n       if (NS_SUCCEEDED(overrideFile->Exists(&exists)) && exists)\\n         directories.AppendObject(overrideFile);\\n+\\n+      if (!gSafeMode) {\\n+        LoadDirsIntoArray(profileFile, \\\"ExtensionDirs\\\",\\n+                          kAppendPrefDir, directories);\\n+      }\\n     }\\n \\n     rv = NS_NewArrayEnumerator(aResult, directories);\\n@@ -650,21 +671,29 @@ nsXREDirProvider::GetFilesInternal(const char* aProperty,\\n       PRBool exists;\\n       if (NS_SUCCEEDED(file->Exists(&exists)) && exists)\\n         manifests.AppendObject(file);\\n+\\n+      mXULAppDir->Clone(getter_AddRefs(file));\\n+      file->AppendNative(NS_LITERAL_CSTRING(\\\"chrome.manifest\\\"));\\n+      if (NS_SUCCEEDED(file->Exists(&exists)) && exists)\\n+        manifests.AppendObject(file);\\n+\\n+      LoadAppPlatformDirIntoArray(mXULAppDir, kAppendChromeManifests,\\n+                                  manifests);\\n     }\\n \\n-    LoadBundleDirectories();\\n-    LoadDirsIntoArray(mExtensionDirectories,\\n-                      kAppendChromeManifests,\\n-                      manifests);\\n+    if (mProfileDir && !gSafeMode) {\\n+      LoadDirsIntoArray(profileFile, \\\"ExtensionDirs\\\",\\n+                        kAppendChromeManifests, manifests);\\n+    }\\n \\n     rv = NS_NewArrayEnumerator(aResult, manifests);\\n   }  \\n   else if (!strcmp(aProperty, NS_SKIN_MANIFESTS_FILE_LIST)) {\\n     nsCOMArray<nsIFile> manifests;\\n-\\n-    LoadBundleDirectories();\\n-    LoadDirsIntoArray(mThemeDirectories,\\n-                      kAppendChromeManifests, manifests);\\n+    if (mProfileDir && !gSafeMode) {\\n+      LoadDirsIntoArray(profileFile, \\\"ThemeDirs\\\",\\n+                        kAppendChromeManifests, manifests);\\n+    }\\n \\n     rv = NS_NewArrayEnumerator(aResult, manifests);\\n   }\\n@@ -674,10 +703,22 @@ nsXREDirProvider::GetFilesInternal(const char* aProperty,\\n \\n     static const char *const kAppendChromeDir[] = { \\\"chrome\\\", nsnull };\\n     nsCOMArray<nsIFile> directories;\\n-    LoadBundleDirectories();\\n-    LoadDirsIntoArray(mExtensionDirectories,\\n-                      kAppendChromeDir,\\n-                      directories);\\n+\\n+    if (mXULAppDir) {\\n+      nsCOMPtr<nsIFile> file;\\n+      mXULAppDir->Clone(getter_AddRefs(file));\\n+      file->AppendNative(NS_LITERAL_CSTRING(\\\"chrome\\\"));\\n+      PRBool exists;\\n+      if (NS_SUCCEEDED(file->Exists(&exists)) && exists)\\n+        directories.AppendObject(file);\\n+\\n+      LoadAppPlatformDirIntoArray(mXULAppDir, kAppendChromeDir, directories);\\n+    }\\n+\\n+    if (mProfileDir && !gSafeMode) {\\n+      LoadDirsIntoArray(profileFile, \\\"ExtensionDirs\\\",\\n+                        kAppendChromeDir, directories);\\n+    }\\n \\n     rv = NS_NewArrayEnumerator(aResult, directories);\\n   }\\n@@ -687,10 +728,21 @@ nsXREDirProvider::GetFilesInternal(const char* aProperty,\\n \\n     // The root dirserviceprovider does quite a bit for us: we're mainly\\n     // interested in xulapp and extension-provided plugins.\\n-    LoadBundleDirectories();\\n-    LoadDirsIntoArray(mExtensionDirectories,\\n-                      kAppendPlugins,\\n-                      directories);\\n+    if (mXULAppDir) {\\n+      nsCOMPtr<nsIFile> file;\\n+      mXULAppDir->Clone(getter_AddRefs(file));\\n+      file->AppendNative(NS_LITERAL_CSTRING(\\\"plugins\\\"));\\n+      PRBool exists;\\n+      if (NS_SUCCEEDED(file->Exists(&exists)) && exists)\\n+        directories.AppendObject(file);\\n+\\n+      LoadAppPlatformDirIntoArray(mXULAppDir, kAppendPlugins, directories);\\n+    }\\n+\\n+    if (mProfileDir && !gSafeMode) {\\n+      LoadDirsIntoArray(profileFile, \\\"ExtensionDirs\\\",\\n+                        kAppendPlugins, directories);\\n+    }\\n \\n     rv = NS_NewArrayEnumerator(aResult, directories);\\n     NS_ENSURE_SUCCESS(rv, rv);\\ndiff --git a/toolkit/xre/nsXREDirProvider.h b/toolkit/xre/nsXREDirProvider.h\\nindex 1be35d0..47949eb 100644\\n--- a/toolkit/xre/nsXREDirProvider.h\\n+++ b/toolkit/xre/nsXREDirProvider.h\\n@@ -43,9 +43,6 @@\\n #include \\\"nsIProfileMigrator.h\\\"\\n #include \\\"nsILocalFile.h\\\"\\n \\n-#include \\\"nsCOMPtr.h\\\"\\n-#include \\\"nsCOMArray.h\\\"\\n-\\n class nsXREDirProvider : public nsIDirectoryServiceProvider2,\\n                          public nsIProfileStartup\\n {\\n@@ -119,21 +116,12 @@ protected:\\n   static nsresult EnsureDirectoryExists(nsIFile* aDirectory);\\n   void EnsureProfileFileExists(nsIFile* aFile);\\n \\n-  // Calculate all bundle directories, including distribution bundles,\\n-  // extensions, and themes\\n-  void LoadBundleDirectories();\\n-  void LoadAppBundleDirs();\\n-  void Append(nsIFile* aDirectory);\\n-\\n   nsCOMPtr<nsIDirectoryServiceProvider> mAppProvider;\\n   nsCOMPtr<nsILocalFile> mGREDir;\\n   nsCOMPtr<nsIFile>      mXULAppDir;\\n   nsCOMPtr<nsIFile>      mProfileDir;\\n   nsCOMPtr<nsIFile>      mProfileLocalDir;\\n-  PRPackedBool           mProfileNotified;\\n-  PRPackedBool           mExtensionsLoaded;\\n-  nsCOMArray<nsIFile>    mExtensionDirectories;\\n-  nsCOMArray<nsIFile>    mThemeDirectories;\\n+  PRBool                 mProfileNotified;\\n };\\n \\n #endif\\n\""}