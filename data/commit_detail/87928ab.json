{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas87928ab\""},"diff":"\"87928ab Bug 392125, Java plugin doesn't stay disabled on restart when disabled via plugin manager, r+sr=jst, a=blocking1.9\\ndiff --git a/modules/plugin/base/src/nsPluginHostImpl.cpp b/modules/plugin/base/src/nsPluginHostImpl.cpp\\nindex a909d5a..3127690 100644\\n--- a/modules/plugin/base/src/nsPluginHostImpl.cpp\\n+++ b/modules/plugin/base/src/nsPluginHostImpl.cpp\\n@@ -768,6 +768,7 @@ nsPluginTag::nsPluginTag(nsPluginTag* aPluginTag)\\n   mEntryPoint = nsnull;\\n   mFlags = NS_PLUGIN_FLAG_ENABLED;\\n   mXPConnected = PR_FALSE;\\n+  mIsJavaPlugin = aPluginTag->mIsJavaPlugin;\\n   mFileName = new_str(aPluginTag->mFileName);\\n   mFullPath = new_str(aPluginTag->mFullPath);\\n }\\n@@ -785,12 +786,16 @@ nsPluginTag::nsPluginTag(nsPluginInfo* aPluginInfo)\\n   mMimeTypeArray = nsnull;\\n   mMimeDescriptionArray = nsnull;\\n   mExtensionsArray = nsnull;\\n+  mIsJavaPlugin = PR_FALSE;\\n \\n   if(aPluginInfo->fMimeTypeArray != nsnull)\\n   {\\n     mMimeTypeArray = new char*[mVariants];\\n-    for (int i = 0; i < mVariants; i++)\\n+    for (int i = 0; i < mVariants; i++) {\\n       mMimeTypeArray[i] = new_str(aPluginInfo->fMimeTypeArray[i]);\\n+      if (nsPluginHostImpl::IsJavaMIMEType(mMimeTypeArray[i]))\\n+        mIsJavaPlugin = PR_TRUE;\\n+    }\\n   }\\n \\n   if(aPluginInfo->fMimeDescriptionArray != nsnull)\\n@@ -873,6 +878,7 @@ nsPluginTag::nsPluginTag(const char* aName,\\n   mDescription     = new_str(aDescription);\\n   mFileName        = new_str(aFileName);\\n   mFullPath        = new_str(aFullPath);\\n+  mIsJavaPlugin    = PR_FALSE;\\n \\n   if (mVariants) {\\n     mMimeTypeArray        = new char*[mVariants];\\n@@ -883,6 +889,8 @@ nsPluginTag::nsPluginTag(const char* aName,\\n       mMimeTypeArray[i]        = new_str(aMimeTypes[i]);\\n       mMimeDescriptionArray[i] = new_str(aMimeDescriptions[i]);\\n       mExtensionsArray[i]      = new_str(aExtensions[i]);\\n+      if (nsPluginHostImpl::IsJavaMIMEType(mMimeTypeArray[i]))\\n+        mIsJavaPlugin = PR_TRUE;\\n     }\\n   }\\n }\\n@@ -992,6 +1000,19 @@ nsPluginTag::SetDisabled(PRBool aDisabled)\\n   if (HasFlag(NS_PLUGIN_FLAG_ENABLED) == !aDisabled)\\n     return NS_OK;\\n \\n+  if (mIsJavaPlugin) {\\n+    nsresult rv;\\n+    nsCOMPtr<nsIPrefBranch> pref(do_GetService(NS_PREFSERVICE_CONTRACTID, &rv));\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    PRBool javaEnabled;\\n+    rv = pref->GetBoolPref(\\\"security.enable_java\\\", &javaEnabled);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+    if (javaEnabled == aDisabled)\\n+      return pref->SetBoolPref(\\\"security.enable_java\\\", !aDisabled);\\n+  }\\n+\\n   if (aDisabled)\\n     UnMark(NS_PLUGIN_FLAG_ENABLED);\\n   else\\n@@ -3481,7 +3502,7 @@ NS_IMETHODIMP nsPluginHostImpl::InstantiateEmbeddedPlugin(const char *aMimeType,\\n     return NS_ERROR_NOT_AVAILABLE;\\n   }\\n     \\n-  PRBool isJava = pluginTag && IsJavaPluginTag(pluginTag);\\n+  PRBool isJava = pluginTag && pluginTag->mIsJavaPlugin;\\n \\n   // Determine if the scheme of this URL is one we can handle internaly because we should\\n   // only open the initial stream if it's one that we can handle internally. Otherwise\\n@@ -3645,7 +3666,7 @@ NS_IMETHODIMP nsPluginHostImpl::InstantiateFullPagePlugin(const char *aMimeType,\\n     nsIPluginInstance* instance;\\n     aOwner->GetInstance(instance);\\n     nsPluginTag* pluginTag = FindPluginForType(aMimeType, PR_TRUE);\\n-    if(!pluginTag || !IsJavaPluginTag(pluginTag))\\n+    if(!pluginTag || !pluginTag->mIsJavaPlugin)\\n       NewFullPagePluginStream(aStreamListener, instance);\\n     NS_IF_RELEASE(instance);\\n     return NS_OK;\\n@@ -3925,7 +3946,7 @@ NS_IMETHODIMP nsPluginHostImpl::TrySetUpPluginInstance(const char *aMimeType,\\n     mimetype = aMimeType;\\n \\n   NS_ASSERTION(pluginTag, \\\"Must have plugin tag here!\\\");\\n-  PRBool isJavaPlugin = IsJavaPluginTag(pluginTag);\\n+  PRBool isJavaPlugin = pluginTag->mIsJavaPlugin;\\n \\n #if defined(OJI) && ((defined(XP_UNIX) && !defined(XP_MACOSX)) || defined(XP_OS2))\\n   // This is a work-around on Unix for a LiveConnect problem (bug 83698).\\n@@ -4833,23 +4854,12 @@ static PRBool isUnwantedPlugin(nsPluginTag * tag)\\n PRBool nsPluginHostImpl::IsUnwantedJavaPlugin(nsPluginTag * tag)\\n {\\n #ifndef OJI\\n-  return IsJavaPluginTag(tag);\\n+  return tag->mIsJavaPlugin;\\n #else\\n   return PR_FALSE;\\n #endif /* OJI */\\n }\\n \\n-PRBool nsPluginHostImpl::IsJavaPluginTag(nsPluginTag * tag)\\n-{\\n-  for (PRInt32 i = 0; i < tag->mVariants; ++i) {\\n-    if (IsJavaMIMEType(tag->mMimeTypeArray[i])) {\\n-      return PR_TRUE;\\n-    }\\n-  }\\n-\\n-  return PR_FALSE;\\n-}\\n-\\n PRBool nsPluginHostImpl::IsJavaMIMEType(const char* aType)\\n {\\n   return aType &&\\n@@ -5150,7 +5160,7 @@ nsresult nsPluginHostImpl::ScanPluginsDirectory(nsIFile * pluginsDir,\\n       pluginTag->mLibrary = pluginLibrary;\\n       pluginTag->mLastModifiedTime = fileModTime;\\n       if (!(oldFlags & NS_PLUGIN_FLAG_ENABLED) ||\\n-          (IsJavaPluginTag(pluginTag) && !mJavaEnabled))\\n+          (pluginTag->mIsJavaPlugin && !mJavaEnabled))\\n         pluginTag->UnMark(NS_PLUGIN_FLAG_ENABLED);\\n \\n       if (oldFlags & NS_PLUGIN_FLAG_BLOCKLISTED)\\n@@ -5790,7 +5800,7 @@ nsPluginHostImpl::ReadPluginInfo()\\n \\n     // Mark plugin as loaded from cache\\n     tag->Mark(tagflag | NS_PLUGIN_FLAG_FROMCACHE);\\n-    if (IsJavaPluginTag(tag)) {\\n+    if (tag->mIsJavaPlugin) {\\n       if (mJavaEnabled)\\n         tag->Mark(NS_PLUGIN_FLAG_ENABLED);\\n       else\\n@@ -6435,7 +6445,7 @@ NS_IMETHODIMP nsPluginHostImpl::Observe(nsISupports *aSubject,\\n       // disabled so at least FindPluginForType/Extension doesn't return\\n       // anything.\\n       for (nsPluginTag* cur = mPlugins; cur; cur = cur->mNext) {\\n-        if (IsJavaPluginTag(cur))\\n+        if (cur->mIsJavaPlugin)\\n           cur->SetDisabled(!mJavaEnabled);\\n       }            \\n     }\\ndiff --git a/modules/plugin/base/src/nsPluginHostImpl.h b/modules/plugin/base/src/nsPluginHostImpl.h\\nindex 290cef5..73a2aac 100644\\n--- a/modules/plugin/base/src/nsPluginHostImpl.h\\n+++ b/modules/plugin/base/src/nsPluginHostImpl.h\\n@@ -149,6 +149,7 @@ public:\\n   nsIPlugin     *mEntryPoint;\\n   PRPackedBool  mCanUnloadLibrary;\\n   PRPackedBool  mXPConnected;\\n+  PRPackedBool  mIsJavaPlugin;\\n   char          *mFileName;\\n   char          *mFullPath;\\n   PRInt64       mLastModifiedTime;\\n@@ -324,6 +325,10 @@ public:\\n   // if it is now disabled\\n   nsresult UpdatePluginInfo(nsPluginTag* aPluginTag);\\n \\n+  // checks whether aTag is a \\\"java\\\" plugin tag (a tag for a plugin\\n+  // that does Java)\\n+  static PRBool IsJavaMIMEType(const char *aType);\\n+\\n private:\\n   NS_IMETHOD\\n   TrySetUpPluginInstance(const char *aMimeType, nsIURI *aURL, nsIPluginInstanceOwner *aOwner);\\n@@ -403,14 +408,6 @@ private:\\n   // (e.g. no OJI support is compiled in)\\n   PRBool IsUnwantedJavaPlugin(nsPluginTag * aPluginTag);\\n \\n-  // checks whether aTag is a \\\"java\\\" plugin tag (a tag for a plugin\\n-  // that does Java)\\n-  PRBool IsJavaPluginTag(nsPluginTag * aPluginTag);\\n-\\n-  // checks whether aTag is a \\\"java\\\" plugin tag (a tag for a plugin\\n-  // that does Java)\\n-  PRBool IsJavaMIMEType(const char *aType);\\n-\\n   nsresult EnsurePrivateDirServiceProvider();\\n \\n   nsresult GetPrompt(nsIPluginInstanceOwner *aOwner, nsIPrompt **aPrompt);\\n\""}