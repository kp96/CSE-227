{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basd191e54\""},"diff":"\"d191e54 Bug 389242: Kill old gfx and obslete code in nsWindow, p=xfsunoles, r/sr=roc, a=pavlov\\ndiff --git a/widget/src/windows/nsWindow.cpp b/widget/src/windows/nsWindow.cpp\\nindex fa04cb1..e8f8f15 100644\\n--- a/widget/src/windows/nsWindow.cpp\\n+++ b/widget/src/windows/nsWindow.cpp\\n@@ -79,15 +79,13 @@\\n #include <windows.h>\\n #include <process.h>\\n \\n-#ifndef WINCE\\n-// mmsystem.h is needed to build with WIN32_LEAN_AND_MEAN\\n-#include <mmsystem.h>\\n-#endif\\n-\\n #ifdef WINCE\\n #include \\\"aygshell.h\\\"\\n #include \\\"imm.h\\\"\\n #include \\\"tpcshell.h\\\"\\n+#else\\n+// mmsystem.h is needed to build with WIN32_LEAN_AND_MEAN\\n+#include <mmsystem.h>\\n #endif\\n \\n \\n@@ -333,11 +331,6 @@ static PRBool IsCursorTranslucencySupported() {\\n }\\n \\n \\n-static PRBool IsWin2k()\\n-{\\n-  return GetWindowsVersion() == WIN2K_VERSION;\\n-}\\n-\\n PRInt32 GetWindowsVersion()\\n {\\n   static PRInt32 version = 0;\\n@@ -755,14 +748,10 @@ void nsWindow::GlobalMsgWindowProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lP\\n // nsWindow constructor\\n //\\n //-------------------------------------------------------------------------\\n-#ifdef ACCESSIBILITY\\n-nsWindow::nsWindow() : nsBaseWidget()\\n-#else\\n nsWindow::nsWindow() : nsBaseWidget()\\n-#endif\\n {\\n   mWnd                = 0;\\n-  mPaintDC                 = 0;\\n+  mPaintDC            = 0;\\n   mPrevWndProc        = NULL;\\n   mBackground         = ::GetSysColor(COLOR_BTNFACE);\\n   mBrush              = ::CreateSolidBrush(NSRGB_2_COLOREF(mBackground));\\n@@ -1322,10 +1311,6 @@ LRESULT CALLBACK nsWindow::DefaultWindowProc(HWND hWnd, UINT msg, WPARAM wParam,\\n   return ::DefWindowProcW(hWnd, msg, wParam, lParam);\\n }\\n \\n-static BOOL CALLBACK DummyDialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) {\\n-  return FALSE;\\n-}\\n-\\n //WINOLEAPI oleStatus;\\n //-------------------------------------------------------------------------\\n //\\n@@ -7968,13 +7953,6 @@ NS_IMETHODIMP nsWindow::SetWindowTranslucency(PRBool aTranslucent)\\n   return rv;\\n }\\n \\n-NS_IMETHODIMP nsWindow::UpdateTranslucentWindowAlpha(const nsRect& aRect, PRUint8* aAlphas)\\n-{\\n-  GetTopLevelWindow()->UpdateTranslucentWindowAlphaInner(aRect, aAlphas);\\n-\\n-  return NS_OK;\\n-}\\n-\\n nsresult nsWindow::SetWindowTranslucencyInner(PRBool aTranslucent)\\n {\\n   if (aTranslucent == mIsTranslucent)\\n@@ -8049,11 +8027,6 @@ nsresult nsWindow::SetupTranslucentWindowMemoryBitmap(PRBool aTranslucent)\\n   return NS_OK;\\n }\\n \\n-void nsWindow::UpdateTranslucentWindowAlphaInner(const nsRect& aRect, PRUint8* aAlphas)\\n-{\\n-  NS_ERROR(\\\"nsWindow::UpdateTranslucentWindowAlphaInner called, when it shouldn't be!\\\");\\n-}\\n-\\n nsresult nsWindow::UpdateTranslucentWindow()\\n {\\n   if (mBounds.IsEmpty())\\ndiff --git a/widget/src/windows/nsWindow.h b/widget/src/windows/nsWindow.h\\nindex 845ed49..75c3b01 100644\\n--- a/widget/src/windows/nsWindow.h\\n+++ b/widget/src/windows/nsWindow.h\\n@@ -215,15 +215,12 @@ public:\\n #ifdef MOZ_XUL\\n   NS_IMETHOD              SetWindowTranslucency(PRBool aTransparent);\\n   NS_IMETHOD              GetWindowTranslucency(PRBool& aTransparent);\\n-  NS_IMETHOD              UpdateTranslucentWindowAlpha(const nsRect& aRect, PRUint8* aAlphas);\\n private:\\n   nsresult                SetWindowTranslucencyInner(PRBool aTransparent);\\n   PRBool                  GetWindowTranslucencyInner() { return mIsTranslucent; }\\n-  void                    UpdateTranslucentWindowAlphaInner(const nsRect& aRect, PRUint8* aAlphas);\\n   void                    ResizeTranslucentWindow(PRInt32 aNewWidth, PRInt32 aNewHeight, PRBool force = PR_FALSE);\\n   nsresult                UpdateTranslucentWindow();\\n   nsresult                SetupTranslucentWindowMemoryBitmap(PRBool aTranslucent);\\n-  void                    SetWindowRegionToAlphaMask();\\n public:\\n #endif\\n \\n@@ -415,9 +412,8 @@ protected:\\n \\n #ifdef MOZ_XUL\\n   // use layered windows to support full 256 level alpha translucency\\n-#ifdef MOZ_CAIRO_GFX\\n   nsRefPtr<gfxWindowsSurface> mTranslucentSurface;\\n-#endif\\n+\\n   HDC           mMemoryDC;\\n   HBITMAP       mMemoryBitmap;\\n   PRUint8*      mMemoryBits;\\n\""}