{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas30e2598\""},"diff":"\"30e2598 Bug 385987 - initial check in of minotaur tool r=robcee\\ndiff --git a/testing/release/minotaur/checkBookmarks.py b/testing/release/minotaur/checkBookmarks.py\\nnew file mode 100644\\nindex 0000000..0c12a9c\\n--- /dev/null\\n+++ b/testing/release/minotaur/checkBookmarks.py\\n@@ -0,0 +1,178 @@\\n+# ***** BEGIN LICENSE BLOCK *****\\n+# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+#\\n+# The contents of this file are subject to the Mozilla Public License Version\\n+# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+# the License. You may obtain a copy of the License at\\n+# http://www.mozilla.org/MPL/\\n+#\\n+# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+# for the specific language governing rights and limitations under the\\n+# License.\\n+#\\n+# The Original Code is Mozilla Corporation Code.\\n+#\\n+# The Initial Developer of the Original Code is\\n+# Clint Talbert.\\n+# Portions created by the Initial Developer are Copyright (C) 2007\\n+# the Initial Developer. All Rights Reserved.\\n+#\\n+# Contributor(s):\\n+#  Clint Talbert <ctalbert@mozilla.com>\\n+#\\n+# Alternatively, the contents of this file may be used under the terms of\\n+# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+# in which case the provisions of the GPL or the LGPL are applicable instead\\n+# of those above. If you wish to allow use of your version of this file only\\n+# under the terms of either the GPL or the LGPL, and not to allow others to\\n+# use your version of this file under the terms of the MPL, indicate your\\n+# decision by deleting the provisions above and replace them with the notice\\n+# and other provisions required by the GPL or the LGPL. If you do not delete\\n+# the provisions above, a recipient may use your version of this file under\\n+# the terms of any one of the MPL, the GPL or the LGPL.\\n+#\\n+# ***** END LICENSE BLOCK *****\\n+\\n+import sgmllib\\n+import re\\n+\\n+Not_White_Space = re.compile('\\\\S')\\n+\\n+def debug(s):\\n+  if (0):\\n+    print s\\n+\\n+# This class parses the bookmark file, making a listing of each\\n+# anchor's title, address, and containing folder (if any). It does this by\\n+# making use of the fact that the bookmarks.html file has this basic structure\\n+# by default\\n+# <DL>\\n+#    <H3>Folder Title</H3>\\n+#        <A href=\\\"link\\\">Link Title</A>\\n+# <DL>\\n+# <A href=\\\"link\\\">Link Title</A>\\n+# and so on...\\n+# We can depend on the SGML parser to walk sequentially through the file and\\n+# call us back when it encounters a starting tag, ending tag, or enclosed data\\n+class bookmarkParser(sgmllib.SGMLParser):\\n+\\n+  def __init__(self, verbose=0):\\n+\\n+    self.marker, self.IN_H3, self.IN_A = range(3)\\n+\\n+    sgmllib.SGMLParser.__init__(self, verbose)\\n+    self.isToolbar = False\\n+    self.currentFolder = \\\"\\\"\\n+    self.currentAnchor = \\\"\\\"\\n+    self.bookmarkList = []\\n+\\n+  def parseFile(self, fileName):\\n+    bkmkFile = open(fileName, \\\"r\\\")\\n+    htmlContent = bkmkFile.read()\\n+    self.feed(htmlContent)\\n+    self.close()\\n+\\n+  # This is called when we hit an H3 tag\\n+  def start_h3(self, attributes):\\n+    self.marker = self.IN_H3\\n+    self.isToolbar = False\\n+\\n+    for attr in attributes:\\n+      # Check that we are in the personal toolbar folder\\n+      if (attr[0] == 'personal_toolbar_folder' and attr[1] == 'true'):\\n+        self.isToolbar = True\\n+\\n+ # Called when an anchor tag is hit\\n+  def start_a(self, attributes):\\n+    self.marker = self.IN_A\\n+    for attr in attributes:\\n+      if (attr[0] == \\\"href\\\"):\\n+        debug(\\\"Found anchor link: \\\" + attr[1])\\n+        self.currentAnchor = attr[1]\\n+\\n+  # Called when an anchor end tag is hit to reset the current anchor\\n+  def end_a(self):\\n+    debug(\\\"End A reset\\\")\\n+    self.currentAnchor = \\\"\\\"\\n+\\n+  # Called when text data is encountered\\n+  def handle_data(self, data):\\n+    if (Not_White_Space.match(data)):\\n+      debug(\\\"in non-whitespace data\\\")\\n+      # If we are inside an H3 link we are getting the folder name\\n+      if self.marker == self.IN_H3:\\n+        if self.isToolbar:\\n+          debug(\\\"data:h3 is toolbar\\\")\\n+          self.currentFolder = \\\"toolbar\\\"\\n+        else:\\n+          debug(\\\"data:h3:not toolbar\\\")\\n+          self.currentFolder = data\\n+\\n+      elif self.marker == self.IN_A:\\n+        # Then we are inside an anchor tag - we now have the folder,\\n+        # link and data\\n+        debug(\\\"data:isA adding following: \\\" + self.currentFolder + \\\",\\\" +\\n+        self.currentAnchor + \\\",\\\" + data)\\n+        self.bookmarkList.append( (self.currentFolder, self.currentAnchor,\\n+                                   data) )\\n+\\n+  # We have to include a \\\"start\\\" handler or the end handler won't be called\\n+  # we really aren't interested in doing anything here\\n+  def start_dl(self, attributes):\\n+    return 1\\n+\\n+  # Called when we hit an end DL tag to reset the folder selections\\n+  def end_dl(self):\\n+    debug(\\\"End DL reset\\\")\\n+    self.isToolbar = False\\n+    self.currentFolder = \\\"\\\"\\n+    self.currentAnchor = \\\"\\\"\\n+\\n+  def getList(self):\\n+    return self.bookmarkList\\n+\\n+# This just does a linear search, but we have a sorted list because it's easier\\n+# to create a sub list that way (compared to binary search)\\n+# TODO: If it ever becomes a problem, change to binary search\\n+def getFolderList(folderName, sortedList):\\n+  fldrList = []\\n+  fldrSet = False\\n+  for s in sortedList:\\n+    if s[0] == folderName:\\n+      fldrList.append(s)\\n+      fldrSet = True\\n+    else:\\n+      if fldrSet:\\n+        # Then we know that we have completed reading all folders with\\n+        # \\\"folderName\\\" so we can quit\\n+          break\\n+      else:\\n+        # Then we have not yet begun to create our sublist, keep\\n+        # walking sortedList\\n+        continue\\n+  return fldrList\\n+\\n+def checkBookmarks(loc, bkmkFile, verifier, log):\\n+  rtn = True\\n+  parser = bookmarkParser()\\n+  parser.parseFile(bkmkFile)\\n+\\n+  # Verify the bookmarks now\\n+  bkmkList = parser.getList()\\n+  bkmkList.sort(lambda x,y: cmp(x[0], y[0]))\\n+\\n+  verifiedBkmks = verifier.getElementList(\\\"bookmarks\\\")\\n+\\n+  # Now we compare the parsed list with the verified list\\n+  for vElem in verifiedBkmks:\\n+    fldrList = getFolderList(vElem.getAttribute(\\\"folder\\\"), bkmkList)\\n+    for f in fldrList:\\n+      if (vElem.getAttribute(\\\"link\\\") == f[1] and\\n+          vElem.getAttribute(\\\"title\\\") == f[2]):\\n+        log.writeLog(\\\"\\\\n\\\" + vElem.getAttribute(\\\"title\\\") + \\\" bookmark PASSES\\\")\\n+      else:\\n+        log.writeLog(\\\"\\\\n\\\" + vElem.getAttribute(\\\"title\\\") + \\\" bookmark FAILS\\\")\\n+        rtn = False\\n+  return rtn\\ndiff --git a/testing/release/minotaur/checkReleaseChannel.py b/testing/release/minotaur/checkReleaseChannel.py\\nnew file mode 100644\\nindex 0000000..6ee5a84\\n--- /dev/null\\n+++ b/testing/release/minotaur/checkReleaseChannel.py\\n@@ -0,0 +1,76 @@\\n+# http://www.mozilla.org/MPL/\\n+#\\n+# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+# for the specific language governing rights and limitations under the\\n+# License.\\n+#\\n+# The Original Code is Mozilla Corporation Code.\\n+#\\n+# The Initial Developer of the Original Code is\\n+# Clint Talbert.\\n+# Portions created by the Initial Developer are Copyright (C) 2007\\n+# the Initial Developer. All Rights Reserved.\\n+#\\n+# Contributor(s):\\n+#  Clint Talbert <ctalbert@mozilla.com>\\n+#\\n+# Alternatively, the contents of this file may be used under the terms of\\n+# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+# in which case the provisions of the GPL or the LGPL are applicable instead\\n+# of those above. If you wish to allow use of your version of this file only\\n+# under the terms of either the GPL or the LGPL, and not to allow others to\\n+# use your version of this file under the terms of the MPL, indicate your\\n+# decision by deleting the provisions above and replace them with the notice\\n+# and other provisions required by the GPL or the LGPL. If you do not delete\\n+# the provisions above, a recipient may use your version of this file under\\n+# the terms of any one of the MPL, the GPL or the LGPL.\\n+#\\n+# ***** END LICENSE BLOCK *****\\n+\\n+import re\\n+from optparse import OptionParser\\n+from logAppender import LogAppender\\n+\\n+aus2link = re.compile(\\\".*https:\\\\/\\\\/aus2.mozilla.org.*\\\")\\n+\\n+def checkHttpLog(httpLogFile, releaseChannel):\\n+  result = False\\n+  try:\\n+    httpFile = open(httpLogFile, \\\"r\\\")\\n+  except IOError:\\n+    return result, \\\"Http Log File Not Found\\\"\\n+  for line in httpFile:\\n+    if aus2link.match(line):\\n+      # This line should contain our release channel\\n+      if line.find(releaseChannel) > 0:\\n+        result = True, \\\"\\\"\\n+        break\\n+  return result, \\\"Unable to find release chanel in HTTP Debug Log\\\"\\n+\\n+def main(httpFile, releaseFile, log):\\n+  lf = LogAppender(log)\\n+  rf = open(releaseFile, \\\"r\\\")\\n+  # Ensure we don't pick up spurious newlines\\n+  channel = rf.readline().split(\\\"\\\\n\\\")\\n+  result, reason = checkHttpLog(httpFile, channel[0])\\n+\\n+  if not result:\\n+    lf.writeLog(reason)\\n+    raise SystemExit(\\\"Release Update Channel not found. Test Fails\\\")\\n+\\n+if __name__ == \\\"__main__\\\":\\n+  parser = OptionParser()\\n+  parser.add_option(\\\"-d\\\", \\\"--DebugHttpLog\\\", dest=\\\"httpFile\\\",\\n+                   help=\\\"Debug Http Log File\\\", metavar=\\\"HTTP_LOG_FILE\\\")\\n+  parser.add_option(\\\"-r\\\", \\\"--ReleaseChannelFile\\\", dest=\\\"releaseFile\\\",\\n+                    help=\\\"Text File with release channel name on first line\\\",\\n+                    metavar=\\\"RELEASE_FILE\\\")\\n+  parser.add_option(\\\"-l\\\", \\\"--LogFile\\\", dest=\\\"log\\\",\\n+                    help=\\\"The file where the log output should go\\\",\\n+                    metavar=\\\"LOGFILE\\\")\\n+  (options, args) = parser.parse_args()\\n+\\n+  # Call Main\\n+  main(options.httpFile, options.releaseFile, options.log)\\ndiff --git a/testing/release/minotaur/diffBookmarks.py b/testing/release/minotaur/diffBookmarks.py\\nnew file mode 100644\\nindex 0000000..f8fbf44\\n--- /dev/null\\n+++ b/testing/release/minotaur/diffBookmarks.py\\n@@ -0,0 +1,80 @@\\n+# The contents of this file are subject to the Mozilla Public License Version\\n+# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+# the License. You may obtain a copy of the License at\\n+# http://www.mozilla.org/MPL/\\n+#\\n+# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+# for the specific language governing rights and limitations under the\\n+# License.\\n+#\\n+# The Original Code is Mozilla Corporation Code.\\n+#\\n+# The Initial Developer of the Original Code is\\n+# Clint Talbert.\\n+# Portions created by the Initial Developer are Copyright (C) 2007\\n+# the Initial Developer. All Rights Reserved.\\n+#\\n+# Contributor(s):\\n+#  Clint Talbert <ctalbert@mozilla.com>\\n+#\\n+# Alternatively, the contents of this file may be used under the terms of\\n+# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+# in which case the provisions of the GPL or the LGPL are applicable instead\\n+# of those above. If you wish to allow use of your version of this file only\\n+# under the terms of either the GPL or the LGPL, and not to allow others to\\n+# use your version of this file under the terms of the MPL, indicate your\\n+# decision by deleting the provisions above and replace them with the notice\\n+# and other provisions required by the GPL or the LGPL. If you do not delete\\n+# the provisions above, a recipient may use your version of this file under\\n+# the terms of any one of the MPL, the GPL or the LGPL.\\n+#\\n+# ***** END LICENSE BLOCK *****\\n+\\n+from optparse import OptionParser\\n+from checkBookmarks import bookmarkParser\\n+from logAppender import LogAppender\\n+\\n+# The Main function\\n+def main(left, right, log):\\n+  # Instantiate the log writer\\n+  lw = LogAppender(log)\\n+\\n+  # Parse the left hand file\\n+  leftParser = bookmarkParser()\\n+  leftParser.parseFile(left)\\n+\\n+  # Parse the right hand file\\n+  rightParser = bookmarkParser()\\n+  rightParser.parseFile(right)\\n+\\n+  # Now we compare the lists generated from the parsing and they should be\\n+  # identical\\n+  leftList = leftParser.getList()\\n+  rightList = rightParser.getList()\\n+\\n+  if len(leftList) <> len(rightList):\\n+    lw.writeLog(\\\"Bookmarks lists are not the same length!\\\")\\n+    raise SystemExit(\\\"Bookmark lists not same length, test fails\\\")\\n+\\n+  for lentry, rentry in zip(leftList, rightList):\\n+    if lentry <> rentry:\\n+      lw.writeLog(\\\"Error found entries that do not match\\\")\\n+      lw.writeLog(\\\"Left side: \\\" + lentry[0] + lentry[1])\\n+      lw.writeLog(\\\"Right side: \\\" + rentry[0] + rentry[1])\\n+      raise SystemExit(\\\"Bookmark entries do not match, test fails\\\")\\n+\\n+if __name__ == \\\"__main__\\\":\\n+  parser = OptionParser()\\n+  parser.add_option(\\\"-l\\\", \\\"--leftFile\\\", dest=\\\"left\\\",\\n+                   help=\\\"Bookmarks HTML file 1\\\", metavar=\\\"LEFT_FILE\\\")\\n+  parser.add_option(\\\"-r\\\", \\\"--rightFile\\\", dest=\\\"right\\\",\\n+                    help=\\\"Bookmarks HTML file 2\\\", metavar=\\\"RIGHT_FILE\\\")\\n+  parser.add_option(\\\"-f\\\", \\\"--LogFile\\\", dest=\\\"log\\\",\\n+                    help=\\\"The file where the log output should go\\\",\\n+                    metavar=\\\"LOGFILE\\\")\\n+  (options, args) = parser.parse_args()\\n+\\n+  # Call Main\\n+  main(options.left, options.right, options.log)\\ndiff --git a/testing/release/minotaur/getOsInfo.py b/testing/release/minotaur/getOsInfo.py\\nnew file mode 100644\\nindex 0000000..3ad3f2e\\n--- /dev/null\\n+++ b/testing/release/minotaur/getOsInfo.py\\n@@ -0,0 +1,74 @@\\n+# The contents of this file are subject to the Mozilla Public License Version\\n+# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+# the License. You may obtain a copy of the License at\\n+# http://www.mozilla.org/MPL/\\n+#\\n+# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+# for the specific language governing rights and limitations under the\\n+# License.\\n+#\\n+# The Original Code is Mozilla Corporation Code.\\n+#\\n+# The Initial Developer of the Original Code is\\n+# Clint Talbert.\\n+# Portions created by the Initial Developer are Copyright (C) 2007\\n+# the Initial Developer. All Rights Reserved.\\n+#\\n+# Contributor(s):\\n+#  Clint Talbert <ctalbert@mozilla.com>\\n+#\\n+# Alternatively, the contents of this file may be used under the terms of\\n+# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+# in which case the provisions of the GPL or the LGPL are applicable instead\\n+# of those above. If you wish to allow use of your version of this file only\\n+# under the terms of either the GPL or the LGPL, and not to allow others to\\n+# use your version of this file under the terms of the MPL, indicate your\\n+# decision by deleting the provisions above and replace them with the notice\\n+# and other provisions required by the GPL or the LGPL. If you do not delete\\n+# the provisions above, a recipient may use your version of this file under\\n+# the terms of any one of the MPL, the GPL or the LGPL.\\n+#\\n+# ***** END LICENSE BLOCK *****\\n+\\n+from optparse import OptionParser\\n+import platform\\n+\\n+def getPlatform():\\n+  print platform.system()\\n+\\n+def getFxName(os):\\n+  if os == \\\"Darwin\\\":\\n+    print \\\"firefox-bin\\\"\\n+  elif os == \\\"Linux\\\":\\n+    print \\\"firefox\\\"\\n+  elif os == \\\"Windows\\\":\\n+    print \\\"firefox.exe\\\"\\n+\\n+def main(os, fxname):\\n+  # The options given determine the behavior\\n+  # If no options -- return the OS\\n+  # If OS AND fxname, return the firefox executable name on this OS\\n+  # Anything else, fail.\\n+\\n+  retval = \\\"\\\"\\n+\\n+  if not os:\\n+    getPlatform()\\n+  elif os and fxname:\\n+    getFxName(os)\\n+  else:\\n+    raise SystemExit(\\\"Invalid Command use getOsInfo --h for help\\\")\\n+\\n+if __name__ == \\\"__main__\\\":\\n+  parser = OptionParser()\\n+  parser.add_option(\\\"-o\\\", \\\"--os\\\", dest=\\\"os\\\",\\n+                   help=\\\"OS identifer - either Darwin, Linux, or Windows can be\\\\\\n+                        obtained by calling without any params\\\", metavar=\\\"OS\\\")\\n+  parser.add_option(\\\"-f\\\", \\\"--firefoxName\\\", action=\\\"store_true\\\", dest=\\\"fxname\\\", default=False,\\n+                    help=\\\"Firefox executable name on this platform requires OS\\\")\\n+  (options, args) = parser.parse_args()\\n+\\n+  # Call Main\\n+  main(options.os, options.fxname)\\ndiff --git a/testing/release/minotaur/logAppender.py b/testing/release/minotaur/logAppender.py\\nnew file mode 100644\\nindex 0000000..2a514fa\\n--- /dev/null\\n+++ b/testing/release/minotaur/logAppender.py\\n@@ -0,0 +1,46 @@\\n+# ***** BEGIN LICENSE BLOCK *****\\n+# Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+#\\n+# The contents of this file are subject to the Mozilla Public License Version\\n+# 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+# the License. You may obtain a copy of the License at\\n+# http://www.mozilla.org/MPL/\\n+#\\n+# Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+# for the specific language governing rights and limitations under the\\n+# License.\\n+#\\n+# The Original Code is Mozilla Corporation Code.\\n+#\\n+# The Initial Developer of the Original Code is\\n+# Clint Talbert.\\n+# Portions created by the Initial Developer are Copyright (C) 2007\\n+# the Initial Developer. All Rights Reserved.\\n+#\\n+# Contributor(s):\\n+#  Clint Talbert <ctalbert@mozilla.com>\\n+#\\n+# Alternatively, the contents of this file may be used under the terms of\\n+# either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+# the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+# in which case the provisions of the GPL or the LGPL are applicable instead\\n+# of those above. If you wish to allow use of your version of this file only\\n+# under the terms of either the GPL or the LGPL, and not to allow others to\\n+# use your version of this file under the terms of the MPL, indicate your\\n+# decision by deleting the provisions above and replace them with the notice\\n+# and other provisions required by the GPL or the LGPL. If you do not delete\\n+# the provisions above, a recipient may use your version of this file under\\n+# the terms of any one of the MPL, the GPL or the LGPL.\\n+#\\n+# ***** END LICENSE BLOCK *****\\n+\\n+# Class to append data to a text file\\n+class LogAppender:\\n+  def __init__(self, file):\\n+    self.logFile = open(file, \\\"a\\\")\\n+  def writeLog(self, str):\\n+    self.logFile.write(str + \\\"\\\\n\\\")\\n+    return str\\n+  def closeFile(self):\\n+      self.logFile.write(\\\"\\\\n---Normal Close---\\\\n\\\")\\ndiff --git a/testing/release/minotaur/minotaur.sh b/testing/release/minotaur/minotaur.sh\\nnew file mode 100755\\nindex 0000000..9307663\\n--- /dev/null\\n+++ b/testing/release/minotaur/minotaur.sh\\n@@ -0,0 +1,142 @@\\n+#!/bin/bash\\n+\\n+# *!*!*!*!*!*!*!*!*!*!**! NOTICE *!*!*!*!*!*!**!*!*!*!*!*!*!*!**!*!*!*!*!*!*!*!\\n+# If you wish to change the location of the profile directory, then you will\\n+# need to extensively edit this file.  For simplicity, the profile directory\\n+# is hard coded to:\\n+# Darwin/Linux:\\n+# /tmp/profile\\n+# Windows\\n+# C:\\\\tmp\\\\profile\\n+# Note that this value cannot be parameterized in the CreateProfile call, and\\n+# this is why it was opted for a hard-coded path.  If that call can be\\n+# parameterized, then the paths should be returned to a non-hardcoded path\\n+# and getOsInfo can be modified to return a proper path that \\\"CreateProfile\\\"\\n+# can accept (only accepts full, native paths: i.e. /Users/clint/tmp/profile\\n+# not ~/tmp/profile or $Profile.\\n+\\n+# Uncomment following line for debug output\\n+# set -x\\n+\\n+options=\\\"n:f:m:l:o:b:c:\\\"\\n+\\n+function usage()\\n+{\\n+    cat<<EOF\\n+    usage:\\n+    $script -n buildName -f FirefoxDir -m MinotaurDir -l locale -o outputXML -b bookmarks -c release-channel\\n+\\n+variable             description\\n+=============        ================================================\\n+-n buildName         required, a name for Firefox build under test\\n+-m MinotaurDir       required, the path to the directory where Minotaur is\\n+-f firefoxDir        required, path to Firefox installed build\\n+-l locale            required, locale identifier of this build\\n+-o outputXML         optional, the output XML to compare against\\n+-b bookmarks         optional, bookmarks.html to compare against\\n+-c release-channel   optional, release-channel verification file\\n+\\n+Notes\\n+==========\\n+* If you do not include the verification files, the test will run and export\\n+information for you to use on future runs of this build and locale.\\n+* minotaurdir/tests.manifest must also point to the containing directory\\n+of the minotaur tests, with a trailing slash\\n+* Output will be in ./<buildname>-<locale>/ relevant to the directory where\\n+Minotaur was run from.\\n+\\n+EOF\\n+exit 2\\n+}\\n+\\n+while getopts $options optname ;\\n+do\\n+    case $optname in\\n+        n) fxname=$OPTARG;;\\n+        m) minotaurdir=$OPTARG;;\\n+        f) fxdir=$OPTARG;;\\n+        l) locale=$OPTARG;;\\n+        o) outputVerify=$OPTARG;;\\n+        b) bookmarksVerify=$OPTARG;;\\n+        c) releaseVerify=$OPTARG;;\\n+    esac\\n+done\\n+\\n+# If anything is not defined, display the usage string above\\n+if [[ -z \\\"$fxname\\\" || -z \\\"$fxdir\\\" || -z \\\"$locale\\\" || -z \\\"$minotaurdir\\\" ]]\\n+then\\n+    usage\\n+fi\\n+\\n+# Get our OS and Executable name\\n+OS=$(python getOsInfo.py)\\n+FFX_EXE=$(python getOsInfo.py -o $OS -f)\\n+\\n+if [ $OS = \\\"Windows\\\" ]; then\\n+  baseProfile=c:/tmp\\n+else\\n+  baseProfile=/tmp\\n+fi\\n+\\n+rm -rf $baseProfile/test\\n+rm -rf $baseProfile/profile\\n+mkdir $baseProfile\\n+\\n+cp ${minotaurdir}/tests.manifest $fxdir/chrome/.\\n+\\n+#CreateProfile: NOTICE: See above\\n+if [ $OS = \\\"Windows\\\" ]; then\\n+  $fxdir/$FFX_EXE -CreateProfile 'minotaurTestProfile C:\\\\tmp\\\\profile'\\n+else\\n+  $fxdir/$FFX_EXE -CreateProfile 'minotaurTestProfile /tmp/profile'\\n+fi\\n+\\n+mkdir $baseProfile/profile\\n+cp ${minotaurdir}/user.js $baseProfile/profile/.\\n+$fxdir/$FFX_EXE -P minotaurTestProfile -chrome chrome://minotaur/content/quit.xul\\n+sleep 10\\n+cp ${minotaurdir}/user.js $baseProfile/profile/.\\n+\\n+# Turn on http debugging\\n+export NSPR_LOG_MODULES=nsHttp:5,nsSocketTransport:5,nsHostResolver:5\\n+export NSPR_LOG_FILE=$baseProfile/http.log\\n+rm $baseProfile/http.log\\n+\\n+#run the tests\\n+$fxdir/$FFX_EXE -P minotaurTestProfile -chrome chrome://minotaur/content\\n+\\n+# create verification repository\\n+mkdir ${minotaurdir}/$fxname-$locale\\n+cp $baseProfile/profile/test-* ${minotaurdir}/$fxname-$locale/.\\n+cp $baseProfile/http.log ${minotaurdir}/$fxname-$locale/http.log\\n+\\n+# If verification files not given, then skip verification\\n+if [[ -z \\\"$outputVerify\\\" || -z \\\"$bookmarksVerify\\\" || -z \\\"$releaseVerify\\\" ]]; then\\n+  echo ----------- Verification Files Generated --------------\\n+else\\n+  # Do Verification\\n+  #Prepare the log file\\n+  rm $fxname-$locale/results.log\\n+\\n+  #Perform the output.xml diff\\n+  diff ${minotaurdir}/$fxname-$locale/test-output.xml $outputVerify >> ${minotaurdir}/$fxname-$locale/results.log\\n+\\n+  # Check the Bookmarks file\\n+  python diffBookmarks.py -l ${minotaurdir}/$fxname-$locale/test-bookmarks.html -r $bookmarksVerify -f ${minotaurdir}/$fxname-$locale/results.log\\n+\\n+  # Check the Http Debug Log to catch the release channel\\n+  python checkReleaseChannel.py -d ${minotaurdir}/$fxname-$locale/http.log -r $releaseVerify -l ${minotaurdir}/$fxname-$locale/results.log\\n+\\n+  # Check to see if we fail or pass\\n+  if [ -s ${minotaurdir}/$fxname-$locale/results.log ]; then\\n+    echo !!!!!!!!!!!!! TEST FAILS !!!!!!!!!!!!!!\\n+  else\\n+    echo ------------- TEST PASSES -------------\\n+  fi\\n+fi\\n+\\n+#CLEANUP\\n+# Uncomment this line if you want to delete the firefox install directory\\n+# rm -rdf $fxdir\\n+rm -rf $baseProfile/profile\\n+rm -rf $baseProfile/test\\ndiff --git a/testing/release/minotaur/minotaur.xul b/testing/release/minotaur/minotaur.xul\\nnew file mode 100644\\nindex 0000000..25b4b80\\n--- /dev/null\\n+++ b/testing/release/minotaur/minotaur.xul\\n@@ -0,0 +1,17 @@\\n+<?xml version=\\\"1.0\\\"?>\\n+<?xml-stylesheet href=\\\"chrome://global/skin/\\\" type=\\\"text/css\\\"?>\\n+\\n+<window id=\\\"minotaurWindow\\\"\\n+        xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\"\\n+        title=\\\"test searchbar\\\"\\n+        orient=\\\"horizontal\\\"\\n+        height=\\\"400\\\"\\n+        width=\\\"600\\\">\\n+\\n+<!-- Widgets and markup go here -->\\n+\\n+  <script type=\\\"text/javascript\\\" src=\\\"chrome://browser/content/bookmarks/bookmarks.js\\\"/>\\n+  <script type=\\\"text/javascript\\\" src=\\\"quit.js\\\" />\\n+  <script type=\\\"text/javascript\\\" src=\\\"sb.js\\\" />\\n+\\n+</window>\\ndiff --git a/testing/release/minotaur/quit.js b/testing/release/minotaur/quit.js\\nnew file mode 100644\\nindex 0000000..b07d862\\n--- /dev/null\\n+++ b/testing/release/minotaur/quit.js\\n@@ -0,0 +1,141 @@\\n+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; -*- */\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is The Original Code is Mozilla Automated Testing Code\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Mozilla Corporation.\\n+ * Portions created by the Initial Developer are Copyright (C) 2005\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s): Bob Clary <bob@bclary.com>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+/*\\n+  From mozilla/toolkit/content\\n+  These files did not have a license\\n+*/\\n+\\n+function canQuitApplication()\\n+{\\n+  var os = Components.classes[\\\"@mozilla.org/observer-service;1\\\"]\\n+    .getService(Components.interfaces.nsIObserverService);\\n+  if (!os)\\n+  {\\n+    return true;\\n+  }\\n+\\n+  try\\n+  {\\n+    var cancelQuit = Components.classes[\\\"@mozilla.org/supports-PRBool;1\\\"]\\n+      .createInstance(Components.interfaces.nsISupportsPRBool);\\n+    os.notifyObservers(cancelQuit, \\\"quit-application-requested\\\", null);\\n+\\n+    // Something aborted the quit process.\\n+    if (cancelQuit.data)\\n+    {\\n+      return false;\\n+    }\\n+  }\\n+  catch (ex)\\n+  {\\n+  }\\n+  os.notifyObservers(null, \\\"quit-application-granted\\\", null);\\n+  return true;\\n+}\\n+\\n+function goQuitApplication()\\n+{\\n+  const privs = 'UniversalPreferencesRead UniversalPreferencesWrite ' +\\n+    'UniversalXPConnect';\\n+\\n+  try\\n+  {\\n+    netscape.security.PrivilegeManager.enablePrivilege(privs);\\n+  }\\n+  catch(ex)\\n+  {\\n+    throw('goQuitApplication: privilege failure ' + ex);\\n+  }\\n+\\n+  if (!canQuitApplication())\\n+  {\\n+    return false;\\n+  }\\n+\\n+  const kAppStartup = '@mozilla.org/toolkit/app-startup;1';\\n+  const kAppShell   = '@mozilla.org/appshell/appShellService;1';\\n+  var   appService;\\n+  var   forceQuit;\\n+\\n+  if (kAppStartup in Components.classes)\\n+  {\\n+    appService = Components.classes[kAppStartup].\\n+      getService(Components.interfaces.nsIAppStartup);\\n+    forceQuit  = Components.interfaces.nsIAppStartup.eForceQuit;\\n+\\n+  }\\n+  else if (kAppShell in Components.classes)\\n+  {\\n+    appService = Components.classes[kAppShell].\\n+      getService(Components.interfaces.nsIAppShellService);\\n+    forceQuit = Components.interfaces.nsIAppShellService.eForceQuit;\\n+  }\\n+  else\\n+  {\\n+    throw 'goQuitApplication: no AppStartup/appShell';\\n+  }\\n+\\n+  var windowManager = Components.\\n+    classes['@mozilla.org/appshell/window-mediator;1'].getService();\\n+\\n+  var windowManagerInterface = windowManager.\\n+    QueryInterface(Components.interfaces.nsIWindowMediator);\\n+\\n+  var enumerator = windowManagerInterface.getEnumerator(null);\\n+\\n+  while (enumerator.hasMoreElements())\\n+  {\\n+    var domWindow = enumerator.getNext();\\n+    if ((\\\"tryToClose\\\" in domWindow) && !domWindow.tryToClose())\\n+    {\\n+      return false;\\n+    }\\n+    domWindow.close();\\n+  }\\n+\\n+  try\\n+  {\\n+    appService.quit(forceQuit);\\n+  }\\n+  catch(ex)\\n+  {\\n+    throw('goQuitApplication: ' + ex);\\n+  }\\n+\\n+  return true;\\n+}\\ndiff --git a/testing/release/minotaur/quit.xul b/testing/release/minotaur/quit.xul\\nnew file mode 100644\\nindex 0000000..14779ef\\n--- /dev/null\\n+++ b/testing/release/minotaur/quit.xul\\n@@ -0,0 +1,14 @@\\n+<?xml version=\\\"1.0\\\"?>\\n+<?xml-stylesheet href=\\\"chrome://global/skin/\\\" type=\\\"text/css\\\"?>\\n+\\n+<window\\n+    id=\\\"sbtest window\\\"\\n+    title=\\\"test searchbar\\\"\\n+    orient=\\\"horizontal\\\"\\n+    xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\">\\n+<!-- Widgets and markup go here --> \\n+\\n+  <script type=\\\"text/javascript\\\" src=\\\"quit.js\\\" />\\n+  <script type=\\\"text/javascript\\\">goQuitApplication();</script>\\n+\\n+</window>\\ndiff --git a/testing/release/minotaur/sb.js b/testing/release/minotaur/sb.js\\nnew file mode 100644\\nindex 0000000..9fa4cc3\\n--- /dev/null\\n+++ b/testing/release/minotaur/sb.js\\n@@ -0,0 +1,211 @@\\n+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; -*- */\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is The Original Code is Mozilla Automated Testing Code\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Mozilla Corporation.\\n+ * Portions created by the Initial Developer are Copyright (C) 2006\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s): Dave Liebreich <davel@mozilla.com>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+const Cc = Components.classes;\\n+const Ci = Components.interfaces;\\n+ var searchService = Cc[\\\"@mozilla.org/browser/search-service;1\\\"]\\n+                    .getService(Ci.nsIBrowserSearchService);\\n+var engines = searchService.getVisibleEngines({ });\\n+var engineIndex = 0;\\n+\\n+var pb = Cc[\\\"@mozilla.org/preferences-service;1\\\"].getService(Ci.nsIPrefBranch2);\\n+var prefs=pb.getChildList('', {});\\n+prefs.sort();\\n+\\n+var ww = Cc[\\\"@mozilla.org/embedcomp/window-watcher;1\\\"]\\n+        .getService(Ci.nsIWindowWatcher);\\n+var w = ww.openWindow(null,\\\"chrome://browser/content/browser.xul\\\",null,null,null);\\n+\\n+var gOutFile;\\n+\\n+function createOutputFile() {\\n+  var dirServices = Cc[\\\"@mozilla.org/file/directory_service;1\\\"]\\n+                    .createInstance(Ci.nsIProperties);\\n+  var file = dirServices.get(\\\"ProfD\\\", Components.interfaces.nsIFile);\\n+  file.append(\\\"test-output.xml\\\");\\n+  if (file.exists()) {\\n+    file.remove(false);\\n+  }\\n+\\n+  gOutFile = Cc[\\\"@mozilla.org/network/file-output-stream;1\\\"]\\n+             .createInstance(Ci.nsIFileOutputStream);\\n+  const MODE_WRONLY = 0x02;\\n+  const MODE_CREATE = 0x08;\\n+  const MODE_TRUNCATE = 0x20;\\n+  const MODE_APPEND = 0x10;\\n+  gOutFile.init(file, MODE_WRONLY | MODE_CREATE | MODE_APPEND | MODE_TRUNCATE,\\n+                0600, 0);\\n+\\n+  // Seed the file by writing the XML header\\n+  output(\\\"<?xml version=\\\\\\\"1.0\\\\\\\"?>\\\\n<testrun>\\\");\\n+}\\n+\\n+function output(s) {\\n+  s = escape(s);\\n+  gOutFile.write(s, s.length);\\n+  dump(s);\\n+}\\n+\\n+function escape(s) {\\n+  // Only escapes ampersands.\\n+  var str = s.replace(/&/g, \\\"&amp;\\\");\\n+  return str;\\n+}\\n+function closeOutputFile() {\\n+  output(\\\"\\\\n</testrun>\\\\n\\\");\\n+  gOutFile.flush();\\n+  gOutFile.close();\\n+}\\n+\\n+function listEngines() {\\n+  output(\\\"\\\\n<section id=\\\\\\\"searchengine\\\\\\\">\\\\n\\\");\\n+  for each (var engine in engines) {\\n+    engineIndex++;\\n+    var submission = engine.getSubmission(\\\"foo\\\", null);\\n+    var url = submission.uri.spec;\\n+    output(\\\"<l>\\\" + engineIndex + \\\"|\\\" + engine.name + \\\"|\\\" + url + \\\"</l>\\\\n\\\");\\n+  }\\n+  output(\\\"</section>\\\");\\n+}\\n+\\n+function listPrefs() {\\n+  output(\\\"\\\\n<section id=\\\\\\\"preferences\\\\\\\">\\\\n\\\");\\n+  var grab = /(app\\\\.distributor)|(app\\\\.partner)|(app\\\\.update\\\\.channel)|(homepage)|(startup)|(browser\\\\.contentHandlers)/;\\n+  for (var i=0; i < prefs.length; ++i) {\\n+    var pref = prefs[i], pval = [pref, null];\\n+    var ptype = pb.getPrefType(pref);\\n+    try {\\n+      switch (ptype) {\\n+      case pb.PREF_BOOL:\\n+        pval[1] = String(pb.getBoolPref(pref));\\n+        break;\\n+      case pb.PREF_INT:\\n+        if (pref in prefMirror) {\\n+          pval[1] = String(prefMirror[pref]);\\n+        }\\n+        else {\\n+          pval[1] = String(pb.getIntPref(pref));\\n+        }\\n+        break;\\n+      case pb.PREF_STRING:\\n+        pval[1] = pb.getComplexValue(pref, Ci.nsISupportsString).data;\\n+        if (pval[1].match(/.+\\\\.properties$/)) {\\n+          var data = pb.getComplexValue(pref, Ci.nsIPrefLocalizedString).data;\\n+          pval[1] = data;\\n+        }\\n+        break;\\n+      }\\n+    }\\n+    catch (e) {\\n+      Components.utils.reportError(\\\"Preference \\\" +  pref + \\\" triggered \\\" + e);\\n+    }\\n+    if (String(pval[0]).match(grab)) {\\n+      output(\\\"<l>\\\" + String(pval[0]) + \\\"|\\\" + String(pval[1]) + \\\"</l>\\\\n\\\");\\n+    }\\n+  }\\n+  output(\\\"</section>\\\");\\n+}\\n+\\n+function listBookmarks() {\\n+  // Exports bookmarks to a testbookmarks.html file\\n+  // If we're not less than or equal to a 1.8 build, then we're using places\\n+  var dirUtils = Cc[\\\"@mozilla.org/file/directory_service;1\\\"]\\n+                 .createInstance(Ci.nsIProperties);\\n+  var file = dirUtils.get(\\\"ProfD\\\", Components.interfaces.nsIFile);\\n+  file.append(\\\"test-bookmarks.html\\\");\\n+  if (file.exists()) {\\n+    file.remove(false);\\n+  }\\n+\\n+  // TODO: Checking the gecko engine level to determine whether or not\\n+  // to do places style calls.\\n+  // If version <= 1.8 we will use old bookmarks\\n+  // If version >= 1.9 we will use places calls\\n+  var appInfo = Cc[\\\"@mozilla.org/xre/app-info;1\\\"].getService(Ci.nsIXULAppInfo);\\n+  var appInfoAry = appInfo.platformVersion.split(\\\".\\\");\\n+  if ( (appInfoAry[0] == \\\"1\\\") && (parseInt(appInfoAry[1], 10) <= 8) ) {\\n+    var i = 0;\\n+    var bmsvc = Cc[\\\"@mozilla.org/browser/bookmarks-service;1\\\"]\\n+                .getService(Ci.nsIBookmarksService);\\n+    var RDF = Cc[\\\"@mozilla.org/rdf/rdf-service;1\\\"]\\n+               .getService(Ci.nsIRDFService);\\n+    var selection = RDF.GetResource(\\\"NC:BookmarksRoot\\\");\\n+    var fname = file.path;\\n+    var args = [{property: \\\"http://home.netscape.com/NC-rdf#URL\\\", literal:fname}];\\n+    initServices();\\n+    initBMService();\\n+    if (BMSVC) {\\n+      // Declared in bookmarks.js\\n+      BMSVC.readBookmarks();\\n+    }\\n+    BookmarksCommand.doBookmarksCommand(selection,\\n+                    \\\"http://home.netscape.com/NC-rdf#command?cmd=export\\\", args);\\n+  } else {\\n+    file.create(Ci.nsIFile.NORMAL_FILE_TYPE, 0644);\\n+    var placesExporter = Cc[\\\"@mozilla.org/browser/places/import-export-service;1\\\"]\\n+                         .getService(Ci.nsIPlacesImportExportService);\\n+    placesExporter.exportHTMLToFile(file);\\n+  }\\n+}\\n+\\n+function listExtensions() {\\n+  // Gets a list of extensions from the extension manager\\n+  output(\\\"\\\\n<section id=\\\\\\\"extensions\\\\\\\">\\\\n\\\");\\n+  var extmgr = Cc[\\\"@mozilla.org/extensions/manager;1\\\"]\\n+               .getService(Ci.nsIExtensionManager);\\n+  var exts = extmgr.getItemList(Ci.nsIUpdateItem.TYPE_ANY, { });\\n+  for (var i=0; i < exts.length; ++i) {\\n+      var item = exts[i];\\n+      output(\\\"<l>\\\" + i + \\\"|\\\" + item.name + \\\"|\\\" + item.id + \\\"|\\\" + item.version + \\\"|\\\"\\n+           + item.iconURL + \\\"|\\\" + item.xpiURL + \\\"|\\\" + item.type + \\\"</l>\\\\n\\\");\\n+  }\\n+  output(\\\"</section>\\\");\\n+}\\n+\\n+function listUpdates() {\\n+  var prompter = Cc[\\\"@mozilla.org/updates/update-prompt;1\\\"]\\n+                 .createInstance(Ci.nsIUpdatePrompt);\\n+  prompter.checkForUpdates();\\n+}\\n+\\n+createOutputFile();\\n+listEngines();\\n+listPrefs();\\n+listExtensions();\\n+listBookmarks();\\n+listUpdates();\\n+closeOutputFile();\\n+setTimeout(goQuitApplication, 1500);\\ndiff --git a/testing/release/minotaur/tests.manifest b/testing/release/minotaur/tests.manifest\\nnew file mode 100644\\nindex 0000000..9f6a1bb\\n--- /dev/null\\n+++ b/testing/release/minotaur/tests.manifest\\n@@ -0,0 +1 @@\\n+content minotaur file:///Users/clint/code/Minotaur/workspace/\\ndiff --git a/testing/release/minotaur/user.js b/testing/release/minotaur/user.js\\nnew file mode 100644\\nindex 0000000..6e8b246\\n--- /dev/null\\n+++ b/testing/release/minotaur/user.js\\n@@ -0,0 +1,2 @@\\n+user_pref(\\\"browser.dom.window.dump.enabled\\\", true);\\n+user_pref(\\\"browser.shell.checkDefaultBrowser\\\", false);\\n\""}