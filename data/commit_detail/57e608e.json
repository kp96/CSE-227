{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas57e608e\""},"diff":"\"57e608e Bug 346301 - \\\"Session restore restores windows in the wrong taskbar order\\\" [p=tbertels@gmail.com (Thomas Bertels) r=zeniko a1.9=mconnor]\\ndiff --git a/browser/components/sessionstore/src/nsSessionStore.js b/browser/components/sessionstore/src/nsSessionStore.js\\nindex 8ec4f77..8e1fefb 100644\\n--- a/browser/components/sessionstore/src/nsSessionStore.js\\n+++ b/browser/components/sessionstore/src/nsSessionStore.js\\n@@ -78,7 +78,7 @@ const OBSERVING = [\\n \\n /*\\n XUL Window properties to (re)store\\n-Restored in restoreDimensions_proxy()\\n+Restored in restoreDimensions()\\n */\\n const WINDOW_ATTRIBUTES = [\\\"width\\\", \\\"height\\\", \\\"screenX\\\", \\\"screenY\\\", \\\"sizemode\\\"];\\n \\n@@ -452,6 +452,10 @@ SessionStoreService.prototype = {\\n       return;\\n     }\\n     \\n+    if (this.windowToFocus && this.windowToFocus == aWindow) {\\n+      delete this.windowToFocus;\\n+    }\\n+    \\n     var tabbrowser = aWindow.getBrowser();\\n     var tabpanels = tabbrowser.mPanelContainer;\\n \\n@@ -1175,18 +1179,16 @@ SessionStoreService.prototype = {\\n     }\\n     this._updateCookies(total);\\n     \\n-    // make sure that the current window is restored first\\n-    var ix = activeWindow ? windows.indexOf(activeWindow.__SSi || \\\"\\\") : -1;\\n-    if (ix > 0) {\\n-      total.unshift(total.splice(ix, 1)[0]);\\n-    }\\n-\\n     // if no browser window remains open, return the state of the last closed window\\n     if (total.length == 0 && this._lastWindowClosed) {\\n       total.push(this._lastWindowClosed);\\n     }\\n-    \\n-    return { windows: total };\\n+    if (activeWindow) {\\n+      this.activeWindowSSiCache = activeWindow.__SSi || \\\"\\\";\\n+    }\\n+    ix = this.activeWindowSSiCache ? windows.indexOf(this.activeWindowSSiCache) : -1;\\n+\\n+    return { windows: total, selectedWindow: ix + 1 };\\n   },\\n \\n   /**\\n@@ -1226,8 +1228,13 @@ SessionStoreService.prototype = {\\n    *        JS object or its eval'able source\\n    * @param aOverwriteTabs\\n    *        bool overwrite existing tabs w/ new ones\\n+   * @param aFollowUp\\n+   *        bool this isn't the restoration of the first window\\n    */\\n-  restoreWindow: function sss_restoreWindow(aWindow, aState, aOverwriteTabs) {\\n+  restoreWindow: function sss_restoreWindow(aWindow, aState, aOverwriteTabs, aFollowUp) {\\n+    if (!aFollowUp) {\\n+      this.windowToFocus = aWindow;\\n+    }\\n     // initialize window if necessary\\n     if (aWindow && (!aWindow.__SSi || !this._windows[aWindow.__SSi]))\\n       this.onLoad(aWindow);\\n@@ -1244,15 +1251,20 @@ SessionStoreService.prototype = {\\n     }\\n     \\n     var winData;\\n+    if (!aState.selectedWindow) {\\n+      aState.selectedWindow = 0;\\n+    }\\n     // open new windows for all further window entries of a multi-window session\\n     // (unless they don't contain any tab data)\\n     for (var w = 1; w < root.windows.length; w++) {\\n       winData = root.windows[w];\\n       if (winData && winData.tabs && winData.tabs[0]) {\\n-        this._openWindowWithState({ windows: [winData], opener: aWindow });\\n+        var window = this._openWindowWithState({ windows: [winData] });\\n+        if (w == aState.selectedWindow - 1) {\\n+          this.windowToFocus = window;\\n+        }\\n       }\\n     }\\n-    \\n     winData = root.windows[0];\\n     if (!winData.tabs) {\\n       winData.tabs = [];\\n@@ -1276,7 +1288,7 @@ SessionStoreService.prototype = {\\n     }\\n     \\n     if (aOverwriteTabs) {\\n-      this.restoreWindowFeatures(aWindow, winData, root.opener || null);\\n+      this.restoreWindowFeatures(aWindow, winData);\\n     }\\n     if (winData.cookies) {\\n       this.restoreCookies(winData.cookies);\\n@@ -1590,10 +1602,8 @@ SessionStoreService.prototype = {\\n    *        Window reference\\n    * @param aWinData\\n    *        Object containing session data for the window\\n-   * @param aOpener\\n-   *        Opening window, for refocusing\\n    */\\n-  restoreWindowFeatures: function sss_restoreWindowFeatures(aWindow, aWinData, aOpener) {\\n+  restoreWindowFeatures: function sss_restoreWindowFeatures(aWindow, aWinData) {\\n     var hidden = (aWinData.hidden)?aWinData.hidden.split(\\\",\\\"):[];\\n     WINDOW_HIDEABLE_FEATURES.forEach(function(aItem) {\\n       aWindow[aItem].visible = hidden.indexOf(aItem) == -1;\\n@@ -1601,7 +1611,7 @@ SessionStoreService.prototype = {\\n     \\n     var _this = this;\\n     aWindow.setTimeout(function() {\\n-      _this.restoreDimensions_proxy.apply(_this, [aWindow, aOpener, aWinData.width || 0, \\n+      _this.restoreDimensions.apply(_this, [aWindow, aWinData.width || 0, \\n         aWinData.height || 0, \\\"screenX\\\" in aWinData ? aWinData.screenX : NaN,\\n         \\\"screenY\\\" in aWinData ? aWinData.screenY : NaN,\\n         aWinData.sizemode || \\\"\\\", aWinData.sidebar || \\\"\\\"]);\\n@@ -1610,8 +1620,6 @@ SessionStoreService.prototype = {\\n \\n   /**\\n    * Restore a window's dimensions\\n-   * @param aOpener\\n-   *        Opening window, for refocusing\\n    * @param aWidth\\n    *        Window width\\n    * @param aHeight\\n@@ -1625,7 +1633,7 @@ SessionStoreService.prototype = {\\n    * @param aSidebar\\n    *        Sidebar command\\n    */\\n-  restoreDimensions_proxy: function sss_restoreDimensions_proxy(aWindow, aOpener, aWidth, aHeight, aLeft, aTop, aSizeMode, aSidebar) {\\n+  restoreDimensions: function sss_restoreDimensions(aWindow, aWidth, aHeight, aLeft, aTop, aSizeMode, aSidebar) {\\n     var win = aWindow;\\n     var _this = this;\\n     function win_(aName) { return _this._getWindowDimension(win, aName); }\\n@@ -1648,9 +1656,9 @@ SessionStoreService.prototype = {\\n       aWindow.toggleSidebar(aSidebar);\\n     }\\n     // since resizing/moving a window brings it to the foreground,\\n-    // we might want to re-focus the window which created this one\\n-    if (aOpener) {\\n-      aOpener.focus();\\n+    // we might want to re-focus the last focused window\\n+    if (this.windowToFocus) {\\n+      this.windowToFocus.focus();\\n     }\\n   },\\n \\n@@ -1818,6 +1826,8 @@ SessionStoreService.prototype = {\\n       _this.restoreWindow(aEvent.currentTarget, aEvent.currentTarget.__SS_state, true, true);\\n       delete aEvent.currentTarget.__SS_state;\\n     }, true);\\n+    \\n+    return window;\\n   },\\n \\n   /**\\n\""}