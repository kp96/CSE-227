{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas5c3dee1\""},"diff":"\"5c3dee1 Bug 195031, support sticky bookmarks menus, r=mano,sr=bz, blocking bug\\ndiff --git a/browser/base/content/browser-places.js b/browser/base/content/browser-places.js\\nindex 399675f..8bc78c5 100644\\n--- a/browser/base/content/browser-places.js\\n+++ b/browser/base/content/browser-places.js\\n@@ -559,18 +559,6 @@ var BookmarksMenuDropHandler = {\\n  * Toolbar and Bookmarks Menu.\\n  */\\n var PlacesMenuDNDController = {\\n-  \\n-  /**\\n-   * Attach a special context menu hiding listener that ensures that popups \\n-   * are properly closed after a context menu is hidden. See bug 332845 for \\n-   * why we have to do this.\\n-   */\\n-  init: function PMDC_init() {\\n-    var placesContext = document.getElementById(\\\"placesContext\\\");\\n-    var self = this;\\n-    placesContext.addEventListener(\\\"popuphidden\\\", function () { self._closePopups() }, false);\\n-  },\\n-\\n   _springLoadDelay: 350, // milliseconds\\n \\n   /**\\ndiff --git a/browser/base/content/browser.js b/browser/base/content/browser.js\\nindex cd7b637..acbe220 100644\\n--- a/browser/base/content/browser.js\\n+++ b/browser/base/content/browser.js\\n@@ -1012,8 +1012,6 @@ function delayedStartup()\\n   // add bookmark options to context menu for tabs\\n   addBookmarkMenuitems();\\n \\n-  PlacesMenuDNDController.init();\\n-\\n   initBookmarksToolbar();\\n   PlacesUtils.bookmarks.addObserver(gBookmarksObserver, false);\\n   PlacesStarButton.init();\\ndiff --git a/browser/components/places/content/placesOverlay.xul b/browser/components/places/content/placesOverlay.xul\\nindex 915fcc2..7f59f78 100644\\n--- a/browser/components/places/content/placesOverlay.xul\\n+++ b/browser/components/places/content/placesOverlay.xul\\n@@ -148,14 +148,15 @@\\n               command=\\\"placesCmd_new:separator\\\"\\n               label=\\\"&cmd.new_separator.label;\\\"\\n               accesskey=\\\"&cmd.new_separator.accesskey;\\\"\\n+              closemenu=\\\"single\\\"\\n               selection=\\\"mutable\\\"/>\\n     <menuseparator id=\\\"placesContext_newSeparator\\\"/>\\n     <menuitem id=\\\"placesContext_cut\\\"\\n-               command=\\\"cmd_cut\\\"\\n-               label=\\\"&cutCmd.label;\\\"\\n-               accesskey=\\\"&cutCmd.accesskey;\\\" \\n-               selection=\\\"separator|link|folder|mixed\\\"\\n-               forcehideselection=\\\"livemarkChild\\\"/>\\n+              command=\\\"cmd_cut\\\"\\n+              label=\\\"&cutCmd.label;\\\"\\n+              accesskey=\\\"&cutCmd.accesskey;\\\" \\n+              selection=\\\"separator|link|folder|mixed\\\"\\n+              forcehideselection=\\\"livemarkChild\\\"/>\\n     <menuitem id=\\\"placesContext_copy\\\"\\n               command=\\\"cmd_copy\\\"\\n               label=\\\"&copyCmd.label;\\\"\\n@@ -171,6 +172,7 @@\\n               command=\\\"cmd_delete\\\"\\n               label=\\\"&deleteCmd.label;\\\"\\n               accesskey=\\\"&deleteCmd.accesskey;\\\"\\n+              closemenu=\\\"single\\\"\\n               selection=\\\"host|separator|link|folder|day\\\"\\n               forcehideselection=\\\"livemarkChild\\\"/>\\n     <menuseparator id=\\\"placesContext_deleteSeparator\\\"/>\\n@@ -178,16 +180,19 @@\\n               command=\\\"placesCmd_reload\\\"\\n               label=\\\"&cmd.reloadLivebookmark.label;\\\"\\n               accesskey=\\\"&cmd.reloadLivebookmark.accesskey;\\\"\\n+              closemenu=\\\"single\\\"\\n               selection=\\\"livemark/feedURI|allLivemarks\\\"/>\\n     <menuitem id=\\\"placesContext_reloadMicrosummary\\\"\\n               command=\\\"placesCmd_reloadMicrosummary\\\"\\n               label=\\\"&cmd.reloadMicrosummary.label;\\\"\\n               accesskey=\\\"&cmd.reloadMicrosummary.accesskey;\\\"\\n+              closemenu=\\\"single\\\"\\n               selection=\\\"microsummary\\\"/>\\n     <menuitem id=\\\"placesContext_sortBy:name\\\"\\n               command=\\\"placesCmd_sortBy:name\\\"\\n               label=\\\"&cmd.sortby_name.label;\\\"\\n               accesskey=\\\"&cmd.context_sortby_name.accesskey;\\\"\\n+              closemenu=\\\"single\\\"\\n               selection=\\\"mutable\\\"/>\\n     <menuseparator id=\\\"placesContext_sortSeparator\\\"/>\\n     <menuitem id=\\\"placesContext_show:info\\\"\\ndiff --git a/content/base/src/nsGkAtomList.h b/content/base/src/nsGkAtomList.h\\nindex bcf61aa..bd520c8 100755\\n--- a/content/base/src/nsGkAtomList.h\\n+++ b/content/base/src/nsGkAtomList.h\\n@@ -185,6 +185,7 @@ GK_ATOM(clickcount, \\\"clickcount\\\")\\n GK_ATOM(clip, \\\"clip\\\")\\n GK_ATOM(close, \\\"close\\\")\\n GK_ATOM(closed, \\\"closed\\\")\\n+GK_ATOM(closemenu, \\\"closemenu\\\")\\n GK_ATOM(coalesceduplicatearcs, \\\"coalesceduplicatearcs\\\")\\n GK_ATOM(code, \\\"code\\\")\\n GK_ATOM(codebase, \\\"codebase\\\")\\ndiff --git a/layout/xul/base/public/nsXULPopupManager.h b/layout/xul/base/public/nsXULPopupManager.h\\nindex f648617..48b0247 100644\\n--- a/layout/xul/base/public/nsXULPopupManager.h\\n+++ b/layout/xul/base/public/nsXULPopupManager.h\\n@@ -82,6 +82,14 @@ enum nsPopupType {\\n   ePopupTypeTooltip\\n };\\n \\n+// when a menu command is executed, the closemenu attribute may be used\\n+// to define how the menu should be closed up\\n+enum CloseMenuMode {\\n+  CloseMenuMode_Auto, // close up the chain of menus, default value\\n+  CloseMenuMode_None, // don't close up any menus\\n+  CloseMenuMode_Single // close up only the menu the command is inside\\n+};\\n+\\n /**\\n  * nsNavigationDirection: an enum expressing navigation through the menus in\\n  * terms which are independent of the directionality of the chrome. The\\n@@ -274,14 +282,16 @@ public:\\n                         PRBool aControl,\\n                         PRBool aAlt,\\n                         PRBool aMeta,\\n-                        PRBool aUserInput)\\n+                        PRBool aUserInput,\\n+                        CloseMenuMode aCloseMenuMode)\\n     : mMenu(aMenu),\\n       mIsTrusted(aIsTrusted),\\n       mShift(aShift),\\n       mControl(aControl),\\n       mAlt(aAlt),\\n       mMeta(aMeta),\\n-      mUserInput(aUserInput)\\n+      mUserInput(aUserInput),\\n+      mCloseMenuMode(aCloseMenuMode)\\n   {\\n     NS_ASSERTION(aMenu, \\\"null menu supplied to nsXULMenuCommandEvent constructor\\\");\\n   }\\n@@ -296,6 +306,7 @@ private:\\n   PRBool mAlt;\\n   PRBool mMeta;\\n   PRBool mUserInput;\\n+  CloseMenuMode mCloseMenuMode;\\n };\\n \\n class nsXULPopupManager : public nsIDOMKeyListener,\\ndiff --git a/layout/xul/base/src/nsXULPopupManager.cpp b/layout/xul/base/src/nsXULPopupManager.cpp\\nindex 079f100..a0ca114 100644\\n--- a/layout/xul/base/src/nsXULPopupManager.cpp\\n+++ b/layout/xul/base/src/nsXULPopupManager.cpp\\n@@ -730,20 +730,40 @@ nsXULPopupManager::HidePopupsInDocument(nsIDocument* aDocument)\\n void\\n nsXULPopupManager::ExecuteMenu(nsIContent* aMenu, nsEvent* aEvent)\\n {\\n+  CloseMenuMode cmm = CloseMenuMode_Auto;\\n+\\n+  static nsIContent::AttrValuesArray strings[] =\\n+    {&nsGkAtoms::none, &nsGkAtoms::single, nsnull};\\n+\\n+  switch (aMenu->FindAttrValueIn(kNameSpaceID_None, nsGkAtoms::closemenu,\\n+                                 strings, eCaseMatters)) {\\n+    case 0:\\n+      cmm = CloseMenuMode_None;\\n+      break;\\n+    case 1:\\n+      cmm = CloseMenuMode_Single;\\n+      break;\\n+    default:\\n+      break;\\n+  }\\n+\\n   // When a menuitem is selected to be executed, first hide all the open\\n   // popups, but don't remove them yet. This is needed when a menu command\\n   // opens a modal dialog. The views associated with the popups needed to be\\n   // hidden and the accesibility events fired before the command executes, but\\n   // the popuphiding/popuphidden events are fired afterwards.\\n   nsMenuChainItem* item = GetTopVisibleMenu();\\n-  while (item) {\\n-    // if it isn't a <menupopup>, don't close it automatically\\n-    if (!item->IsMenu())\\n-      break;\\n-    nsMenuChainItem* next = item->GetParent();\\n-    item->Frame()->HidePopup(PR_TRUE, ePopupInvisible);\\n-\\n-    item = next;\\n+  if (cmm != CloseMenuMode_None) {\\n+    while (item) {\\n+      // if it isn't a <menupopup>, don't close it automatically\\n+      if (!item->IsMenu())\\n+        break;\\n+      nsMenuChainItem* next = item->GetParent();\\n+      item->Frame()->HidePopup(cmm == CloseMenuMode_Auto, ePopupInvisible);\\n+      if (cmm == CloseMenuMode_Single) // only close one level of menu\\n+        break;\\n+      item = next;\\n+    }\\n   }\\n \\n   SetCaptureState(nsnull);\\n@@ -770,7 +790,8 @@ nsXULPopupManager::ExecuteMenu(nsIContent* aMenu, nsEvent* aEvent)\\n   PRBool userinput = nsEventStateManager::IsHandlingUserInput();\\n \\n   nsCOMPtr<nsIRunnable> event =\\n-    new nsXULMenuCommandEvent(aMenu, isTrusted, shift, control, alt, meta, userinput);\\n+    new nsXULMenuCommandEvent(aMenu, isTrusted, shift, control,\\n+                              alt, meta, userinput, cmm);\\n   NS_DispatchToCurrentThread(event);\\n }\\n \\n@@ -913,7 +934,7 @@ nsXULPopupManager::IsPopupOpen(nsIContent* aPopup)\\n       NS_ASSERTION(item->Frame()->IsOpen() ||\\n                    item->Frame()->PopupState() == ePopupHiding ||\\n                    item->Frame()->PopupState() == ePopupInvisible,\\n-                   \\\"popup is open list not actually open\\\");\\n+                   \\\"popup in open list not actually open\\\");\\n       return PR_TRUE;\\n     }\\n     item = item->GetParent();\\n@@ -925,7 +946,7 @@ nsXULPopupManager::IsPopupOpen(nsIContent* aPopup)\\n       NS_ASSERTION(item->Frame()->IsOpen() ||\\n                    item->Frame()->PopupState() == ePopupHiding ||\\n                    item->Frame()->PopupState() == ePopupInvisible,\\n-                   \\\"popup is open list not actually open\\\");\\n+                   \\\"popup in open list not actually open\\\");\\n       return PR_TRUE;\\n     }\\n     item = item->GetParent();\\n@@ -1829,7 +1850,8 @@ nsXULMenuCommandEvent::Run()\\n     nsCOMPtr<nsIPresShell> shell = presContext->PresShell();\\n \\n     // Deselect ourselves.\\n-    menuFrame->SelectMenu(PR_FALSE);\\n+    if (mCloseMenuMode != CloseMenuMode_None)\\n+      menuFrame->SelectMenu(PR_FALSE);\\n \\n     nsAutoHandlingUserInputStatePusher userInpStatePusher(mUserInput);\\n \\n@@ -1842,8 +1864,8 @@ nsXULMenuCommandEvent::Run()\\n     shell->HandleDOMEventWithTarget(mMenu, &commandEvent, &status);\\n   }\\n \\n-  if (popup)\\n-    pm->HidePopup(popup, PR_TRUE, PR_TRUE, PR_TRUE);\\n+  if (popup && mCloseMenuMode != CloseMenuMode_None)\\n+    pm->HidePopup(popup, mCloseMenuMode == CloseMenuMode_Auto, PR_TRUE, PR_TRUE);\\n \\n   return NS_OK;\\n }\\ndiff --git a/toolkit/content/tests/widgets/Makefile.in b/toolkit/content/tests/widgets/Makefile.in\\nindex 1fc9f02..afac62e 100644\\n--- a/toolkit/content/tests/widgets/Makefile.in\\n+++ b/toolkit/content/tests/widgets/Makefile.in\\n@@ -47,7 +47,9 @@ include $(topsrcdir)/config/rules.mk\\n _TEST_FILES = \\ttest_bug360220.xul \\\\\\n \\t\\ttest_bug359754.xul \\\\\\n \\t\\ttest_bug365773.xul \\\\\\n+\\t\\ttest_closemenu_attribute.xul \\\\\\n \\t\\ttest_colorpicker_popup.xul \\\\\\n+\\t\\ttest_deck.xul \\\\\\n \\t\\ttest_menulist_keynav.xul \\\\\\n \\t\\ttest_popup_coords.xul \\\\\\n \\t\\ttest_popup_recreate.xul \\\\\\n@@ -65,6 +67,9 @@ _TEST_FILES = \\ttest_bug360220.xul \\\\\\n \\t\\twindow_popup_attribute.xul \\\\\\n \\t\\twindow_tooltip.xul \\\\\\n \\t\\ttest_progressmeter.xul \\\\\\n+\\t\\ttest_props.xul \\\\\\n+\\t\\ttest_statusbar.xul \\\\\\n+\\t\\txul_selectcontrol.js \\\\\\n \\t\\ttest_datepicker.xul \\\\\\n \\t\\ttest_timepicker.xul \\\\\\n \\t\\txul_selectcontrol.js \\\\\\ndiff --git a/toolkit/content/tests/widgets/test_closemenu_attribute.xul b/toolkit/content/tests/widgets/test_closemenu_attribute.xul\\nnew file mode 100644\\nindex 0000000..2544de9\\n--- /dev/null\\n+++ b/toolkit/content/tests/widgets/test_closemenu_attribute.xul\\n@@ -0,0 +1,99 @@\\n+<?xml version=\\\"1.0\\\"?>\\n+<?xml-stylesheet href=\\\"chrome://global/skin\\\" type=\\\"text/css\\\"?>\\n+<?xml-stylesheet href=\\\"/tests/SimpleTest/test.css\\\" type=\\\"text/css\\\"?>\\n+\\n+<window title=\\\"Menu closemenu Attribute Tests\\\"\\n+  onload=\\\"setTimeout(nextTest, 0);\\\"\\n+  xmlns:html=\\\"http://www.w3.org/1999/xhtml\\\"\\n+  xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\">\\n+\\n+  <title>Menulist Key Navigation Tests</title>\\n+  <script type=\\\"application/javascript\\\" src=\\\"/MochiKit/packed.js\\\"></script>\\n+  <script type=\\\"application/javascript\\\" src=\\\"/tests/SimpleTest/SimpleTest.js\\\"></script>      \\n+  <script type=\\\"application/javascript\\\" src=\\\"/tests/SimpleTest/EventUtils.js\\\"></script>      \\n+\\n+<button id=\\\"menu\\\" type=\\\"menu\\\" label=\\\"Menu\\\" onpopuphidden=\\\"popupHidden(event)\\\">\\n+  <menupopup id=\\\"p1\\\" onpopupshown=\\\"if (event.target == this) this.firstChild.open = true\\\">\\n+    <menu id=\\\"l1\\\" label=\\\"One\\\">\\n+      <menupopup id=\\\"p2\\\" onpopupshown=\\\"if (event.target == this) this.firstChild.open = true\\\">\\n+        <menu id=\\\"l2\\\" label=\\\"Two\\\">\\n+          <menupopup id=\\\"p3\\\" onpopupshown=\\\"executeMenuItem()\\\">\\n+            <menuitem id=\\\"l3\\\" label=\\\"Three\\\"/>\\n+          </menupopup>\\n+        </menu>\\n+      </menupopup>\\n+    </menu>\\n+  </menupopup>\\n+</button>\\n+\\n+<script class=\\\"testbody\\\" type=\\\"application/javascript\\\">\\n+<![CDATA[\\n+\\n+SimpleTest.waitForExplicitFinish();\\n+\\n+var gExpectedId = \\\"p3\\\";\\n+var gMode = -1;\\n+var gModes = [\\\"\\\", \\\"auto\\\", \\\"single\\\", \\\"none\\\"];\\n+\\n+function nextTest()\\n+{\\n+  gMode++;\\n+  if (gModes[gMode] != \\\"none\\\")\\n+    gExpectedId = \\\"p3\\\";\\n+\\n+  if (gMode != 0)\\n+    $(\\\"l3\\\").setAttribute(\\\"closemenu\\\", gModes[gMode]);\\n+  if (gModes[gMode] == \\\"none\\\")\\n+    $(\\\"l2\\\").open = true;\\n+  else\\n+    $(\\\"menu\\\").open = true;\\n+}\\n+\\n+function executeMenuItem()\\n+{\\n+  synthesizeKey(\\\"VK_DOWN\\\", { });\\n+  synthesizeKey(\\\"VK_ENTER\\\", { });\\n+  // after a couple of seconds, end the test, as the 'none' closemenu value\\n+  // should not hide any popups\\n+  if (gModes[gMode] == \\\"none\\\")\\n+    setTimeout(function() { $(\\\"menu\\\").open = false; }, 2000);\\n+}\\n+\\n+function popupHidden(event)\\n+{\\n+  if (gModes[gMode] == \\\"none\\\") {\\n+    if (event.target.id == \\\"p1\\\")\\n+      SimpleTest.finish()\\n+    return;\\n+  }\\n+\\n+  is(event.target.id, gExpectedId,\\n+     \\\"Expected event \\\" + gModes[gMode] + \\\" \\\" + gExpectedId);\\n+\\n+  gExpectedId = \\\"\\\";\\n+  if (event.target.id == \\\"p3\\\") {\\n+    if (gModes[gMode] == \\\"\\\" || gModes[gMode] == \\\"auto\\\")\\n+      gExpectedId = \\\"p2\\\";\\n+  }\\n+  else if (event.target.id == \\\"p2\\\") {\\n+    if (gModes[gMode] == \\\"\\\" || gModes[gMode] == \\\"auto\\\")\\n+      gExpectedId = \\\"p1\\\";\\n+  }\\n+\\n+  if (!gExpectedId)\\n+    nextTest();\\n+}\\n+\\n+]]>\\n+</script>\\n+\\n+<body xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\\n+<p id=\\\"display\\\">\\n+</p>\\n+<div id=\\\"content\\\" style=\\\"display: none\\\">\\n+</div>\\n+<pre id=\\\"test\\\">\\n+</pre>\\n+</body>\\n+\\n+</window>\\n\""}