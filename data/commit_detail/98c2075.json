{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas98c2075\""},"diff":"\"98c2075 keep a guid when the snapshot is first generated and uplaoded to the server, and propagate it to all clients.  this way we know if the server store gets completely wiped out\\ndiff --git a/services/sync/nsBookmarksSyncService.js b/services/sync/nsBookmarksSyncService.js\\nindex 7a771b9..51206cc 100644\\n--- a/services/sync/nsBookmarksSyncService.js\\n+++ b/services/sync/nsBookmarksSyncService.js\\n@@ -110,10 +110,24 @@ BookmarksSyncService.prototype = {\\n   // DAVCollection object\\n   _dav: null,\\n \\n-  // Last synced tree and version\\n+  // Last synced tree, version, and GUID (to detect if the store has\\n+  // been completely replaced and invalidate the snapshot)\\n   _snapshot: {},\\n   _snapshotVersion: 0,\\n \\n+  __snapshotGuid: null,\\n+  get _snapshotGuid() {\\n+    if (!this.__snapshotGuid) {\\n+      let uuidgen = Cc[\\\"@mozilla.org/uuid-generator;1\\\"].\\n+        getService(Ci.nsIUUIDGenerator);\\n+      this.__snapshotGuid = uuidgen.generateUUID().toString().replace(/[{}]/g, '');\\n+    }\\n+    return this.__snapshotGuid;\\n+  },\\n+  set _snapshotGuid(guid) {\\n+    this.__snapshotGuid = guid;\\n+  },\\n+\\n   get currentUser() {\\n     return this._dav.currentUser;\\n   },\\n@@ -172,7 +186,9 @@ BookmarksSyncService.prototype = {\\n     let flags = MODE_WRONLY | MODE_CREATE | MODE_TRUNCATE;\\n     fos.init(file, flags, PERMS_FILE, 0);\\n \\n-    let out = {version: this._snapshotVersion, snapshot: this._snapshot};\\n+    let out = {version: this._snapshotVersion,\\n+               guid: this._snapshotGuid,\\n+               snapshot: this._snapshot};\\n     out = uneval(out);\\n     fos.write(out, out.length);\\n     fos.close();\\n@@ -202,9 +218,10 @@ BookmarksSyncService.prototype = {\\n     fis.close();\\n     json = eval(json);\\n \\n-    if (json.snapshot && json.version) {\\n+    if (json && json.snapshot && json.version && json.guid) {\\n       this._snapshot = json.snapshot;\\n       this._snapshotVersion = json.version;\\n+      this._snapshotGuid = json.guid;\\n     }\\n   },\\n \\n@@ -699,8 +716,9 @@ BookmarksSyncService.prototype = {\\n \\n       this.notice(\\\"Server status: \\\" + server.status);\\n       this.notice(\\\"Server version: \\\" + server.version);\\n-      this.notice(\\\"Server version type: \\\" + typeof server.version);\\n+      this.notice(\\\"Server guid: \\\" + server.guid);\\n       this.notice(\\\"Local snapshot version: \\\" + this._snapshotVersion);\\n+      this.notice(\\\"Local snapshot guid: \\\" + this._snapshotGuid);\\n \\n       for (version in server.deltas) {\\n         this.notice(\\\"Server delta \\\" + version + \\\":\\\\n\\\" +\\n@@ -717,6 +735,13 @@ BookmarksSyncService.prototype = {\\n         return;\\n       }\\n \\n+      if (this._snapshotGuid != server.guid) {\\n+        this.notice(\\\"Snapshot GUIDs differ, local snapshot is not valid\\\");\\n+        this._snapshot = {};\\n+        this._snapshotVersion = -1;\\n+        this._snapshotGuid = server.guid;\\n+      }\\n+\\n       // 2) Generate local deltas from snapshot -> current client status\\n \\n       let localUpdates = this._detectUpdates(this._snapshot, localJson);\\n@@ -799,7 +824,9 @@ BookmarksSyncService.prototype = {\\n         this._snapshot = this._getBookmarks();\\n         this._snapshotVersion = server['version'] + 1;\\n         server['deltas']['version ' + this._snapshotVersion] = serverChanges;\\n-        this._dav.PUT(\\\"bookmarks.delta\\\", uneval(server['deltas']), handlers);\\n+\\n+        let out = {guid: this._snapshotGuid, deltas: server['deltas']};\\n+        this._dav.PUT(\\\"bookmarks.delta\\\", uneval(out), handlers);\\n         data = yield;\\n \\n         if (data.target.status >= 200 || data.target.status < 300) {\\n@@ -830,6 +857,9 @@ BookmarksSyncService.prototype = {\\n    *      2: ok, initial sync\\n    *   version:\\n    *     the latest version on the server\\n+   *   guid:\\n+   *     the guid that was created when the first snapshot was uploaded\\n+   *     (will only change if the server store is completely wiped)\\n    *   deltas:\\n    *     the individual deltas on the server\\n    *   updates:\\n@@ -840,7 +870,8 @@ BookmarksSyncService.prototype = {\\n     var generator = yield;\\n     var handlers = this._handlersForGenerator(generator);\\n \\n-    var ret = {status: -1, version: -1, deltas: null, updates: null};\\n+    var ret = {status: -1, version: -1,\\n+      guid: null, deltas: null, updates: null};\\n \\n     this.notice(\\\"Getting bookmarks delta from server\\\");\\n     this._dav.GET(\\\"bookmarks.delta\\\", handlers);\\n@@ -850,7 +881,9 @@ BookmarksSyncService.prototype = {\\n     case 200:\\n       this.notice(\\\"Got bookmarks delta from server\\\");\\n \\n-      ret.deltas = eval(data.target.responseText);\\n+      let resp = eval(data.target.responseText);\\n+      ret.guid = resp.guid;\\n+      ret.deltas = resp.deltas;\\n \\n       let next = \\\"version \\\" + (this._snapshotVersion + 1);\\n       let cur = \\\"version \\\" + this._snapshotVersion;\\n@@ -858,7 +891,7 @@ BookmarksSyncService.prototype = {\\n       if (next in ret.deltas) {\\n         // Merge the matching deltas into one, find highest version\\n         let keys = [];\\n-        for (var vstr in ret.deltas) {\\n+        for (let vstr in ret.deltas) {\\n           let v = parseInt(vstr.replace(/^version /, ''));\\n           if (v > this._snapshotVersion)\\n             keys.push(vstr);\\n@@ -898,7 +931,7 @@ BookmarksSyncService.prototype = {\\n \\n         // fixme: this is duplicated from above, need to do some refactoring\\n         let keys = [];\\n-        for (var vstr in ret.deltas) {\\n+        for (let vstr in ret.deltas) {\\n           let v = parseInt(vstr.replace(/^version /, ''));\\n           if (v > this._snapshotVersion)\\n             keys.push(vstr);\\n@@ -916,8 +949,9 @@ BookmarksSyncService.prototype = {\\n         ret.status = data.status;\\n         ret.updates = this._detectUpdates(this._snapshot, tmp);\\n         ret.version = data.version;\\n+        ret.guid = data.guid;\\n \\n-        for (var vstr in ret.deltas) {\\n+        for (let vstr in ret.deltas) {\\n           let v = parseInt(vstr.replace(/^version /, ''));\\n           if (v > ret.version)\\n             ret.version = v;\\n@@ -950,7 +984,7 @@ BookmarksSyncService.prototype = {\\n     let generator = yield;\\n     let handlers = this._handlersForGenerator(generator);\\n \\n-    var ret = {status: -1, version: -1, updates: null};\\n+    var ret = {status: -1, version: -1, guid: null, updates: null};\\n \\n     this._dav.GET(\\\"bookmarks.json\\\", handlers);\\n     data = yield;\\n@@ -962,6 +996,7 @@ BookmarksSyncService.prototype = {\\n       ret.status = 1;\\n       ret.updates = this._detectUpdates(this._snapshot, tmp.snapshot);\\n       ret.version = tmp.version;\\n+      ret.guid = tmp.guid;\\n       if (typeof ret.version != \\\"number\\\")\\n         this.notice(\\\"Error: version is not a number!  Full server response text:\\\\n\\\" +\\n                     data.target.responseText);\\n@@ -971,7 +1006,10 @@ BookmarksSyncService.prototype = {\\n \\n       this._snapshot = localJson;\\n       this._snapshotVersion = 1;\\n-      this._dav.PUT(\\\"bookmarks.json\\\", uneval({version: 1, snapshot: this._snapshot}), handlers);\\n+      this._dav.PUT(\\\"bookmarks.json\\\", uneval({version: 1,\\n+                                              guid: this._snapshotGuid,\\n+                                              snapshot: this._snapshot}),\\n+                    handlers);\\n       data = yield;\\n \\n       if (data.target.status >= 200 || data.target.status < 300) {\\n\""}