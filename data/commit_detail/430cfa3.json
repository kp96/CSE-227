{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas430cfa3\""},"diff":"\"430cfa3 Bug 398982 - Download Manager is not friendly to embedders or extensions.  r=mano\\ndiff --git a/toolkit/components/downloads/public/Makefile.in b/toolkit/components/downloads/public/Makefile.in\\nindex eb65d3b..b62ae4c 100644\\n--- a/toolkit/components/downloads/public/Makefile.in\\n+++ b/toolkit/components/downloads/public/Makefile.in\\n@@ -47,6 +47,7 @@ MODULE    = downloads\\n XPIDLSRCS = nsIDownloadManager.idl \\\\\\n             nsIDownloadProgressListener.idl \\\\\\n             nsIDownload.idl \\\\\\n+            nsIDownloadManagerUI.idl \\\\\\n             $(NULL)\\n \\n include $(topsrcdir)/config/rules.mk\\ndiff --git a/toolkit/components/downloads/public/nsIDownloadManager.idl b/toolkit/components/downloads/public/nsIDownloadManager.idl\\nindex 600c84d..59cdeb6 100644\\n--- a/toolkit/components/downloads/public/nsIDownloadManager.idl\\n+++ b/toolkit/components/downloads/public/nsIDownloadManager.idl\\n@@ -41,7 +41,6 @@\\n \\n #include \\\"nsISupports.idl\\\"\\n \\n-interface nsIDOMWindow;\\n interface nsIURI;\\n interface nsILocalFile;\\n interface nsIDownload;\\n@@ -51,7 +50,7 @@ interface nsIDownloadProgressListener;\\n interface nsISimpleEnumerator;\\n interface mozIStorageConnection;\\n \\n-[scriptable, uuid(b23d291f-2893-48ea-abda-ba9c9fe69c95)]\\n+[scriptable, uuid(05ed1d45-0aff-4ba0-9e2c-a9ef20383048)]\\n interface nsIDownloadManager : nsISupports {\\n   // Download States\\n   const short DOWNLOAD_NOTSTARTED       = -1;\\n@@ -165,17 +164,6 @@ interface nsIDownloadManager : nsISupports {\\n    */\\n   void retryDownload(in unsigned long aID);\\n \\n-  /** \\n-   * Opens the Download Manager front end, selecting the specified download.\\n-   * \\n-   * @param aParent   The parent, or opener, of the front end (optional).\\n-   * @param aID The unique ID of the download to be selected.\\n-   * @see nsIWindowWatcher::openWindow for behavior of null aParent.\\n-   * @throws NS_ERROR_FAILURE if the Download Manager does not know about the\\n-   *         download.\\n-   */\\n-  void open(in nsIDOMWindow aParent, in unsigned long aID);\\n-\\n   /**\\n    * The database connection to the downloads database.\\n    */\\ndiff --git a/toolkit/components/downloads/public/nsIDownloadManagerUI.idl b/toolkit/components/downloads/public/nsIDownloadManagerUI.idl\\nnew file mode 100644\\nindex 0000000..b037e6f\\n--- /dev/null\\n+++ b/toolkit/components/downloads/public/nsIDownloadManagerUI.idl\\n@@ -0,0 +1,65 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is mozilla.org code.\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Shawn Wilsher <me@shawnwilsher.com>.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+#include \\\"nsISupports.idl\\\"\\n+interface nsIInterfaceRequestor;\\n+\\n+[scriptable, uuid(67796ac0-effe-4cb0-91d4-229176956164)]\\n+interface nsIDownloadManagerUI : nsISupports {\\n+ /**\\n+  * Shows the Download Manager's UI to the user.\\n+  *\\n+  * @param aWindowContext\\n+  *        The parent window context to show the UI.\\n+  * @param aID\\n+  *        The id of the download to be preselected upon opening.\\n+  */\\n+  void show([optional] in nsIInterfaceRequestor aWindowContext,\\n+            [optional] in unsigned long aID);\\n+\\n+ /**\\n+  * Indicates if the UI is visible or not.\\n+  */\\n+  readonly attribute boolean visible;\\n+\\n+ /**\\n+  * Brings attention to the UI if it is already visible\\n+  *\\n+  * @throws NS_ERROR_UNEXPECTED if the UI is not visible.\\n+  */\\n+  void getAttention();\\n+};\\n+\\ndiff --git a/toolkit/components/downloads/src/Makefile.in b/toolkit/components/downloads/src/Makefile.in\\nindex 7ec15c4..7270dd4 100644\\n--- a/toolkit/components/downloads/src/Makefile.in\\n+++ b/toolkit/components/downloads/src/Makefile.in\\n@@ -76,6 +76,10 @@ ifeq ($(OS_ARCH),WINNT)\\n CPPSRCS += nsDownloadScanner.cpp\\n endif\\n \\n+EXTRA_COMPONENTS = \\\\\\n+  nsDownloadManagerUI.js \\\\\\n+  $(NULL)\\n+\\n include $(topsrcdir)/config/rules.mk\\n \\n EXTRA_DSO_LDOPTS += $(MOZ_COMPONENT_LIBS)\\ndiff --git a/toolkit/components/downloads/src/nsDownloadManager.cpp b/toolkit/components/downloads/src/nsDownloadManager.cpp\\nindex 6f385ba..5c9bbf8 100644\\n--- a/toolkit/components/downloads/src/nsDownloadManager.cpp\\n+++ b/toolkit/components/downloads/src/nsDownloadManager.cpp\\n@@ -69,6 +69,7 @@\\n #include \\\"nsIAlertsService.h\\\"\\n #include \\\"nsIPropertyBag2.h\\\"\\n #include \\\"nsIHttpChannel.h\\\"\\n+#include \\\"nsIDownloadManagerUI.h\\\"\\n \\n #ifdef XP_WIN\\n #include <shlobj.h>\\n@@ -77,17 +78,12 @@\\n \\n static PRBool gStoppingDownloads = PR_FALSE;\\n \\n-#define DOWNLOAD_MANAGER_FE_URL \\\"chrome://mozapps/content/downloads/downloads.xul\\\"\\n #define DOWNLOAD_MANAGER_BUNDLE \\\"chrome://mozapps/locale/downloads/downloads.properties\\\"\\n #define DOWNLOAD_MANAGER_ALERT_ICON \\\"chrome://mozapps/skin/downloads/downloadIcon.png\\\"\\n #define PREF_BDM_SHOWALERTONCOMPLETE \\\"browser.download.manager.showAlertOnComplete\\\"\\n #define PREF_BDM_SHOWALERTINTERVAL \\\"browser.download.manager.showAlertInterval\\\"\\n #define PREF_BDM_RETENTION \\\"browser.download.manager.retention\\\"\\n-#define PREF_BDM_OPENDELAY \\\"browser.download.manager.openDelay\\\"\\n-#define PREF_BDM_SHOWWHENSTARTING \\\"browser.download.manager.showWhenStarting\\\"\\n-#define PREF_BDM_FOCUSWHENSTARTING \\\"browser.download.manager.focusWhenStarting\\\"\\n #define PREF_BDM_CLOSEWHENDONE \\\"browser.download.manager.closeWhenDone\\\"\\n-#define PREF_BDM_FLASHCOUNT \\\"browser.download.manager.flashCount\\\"\\n #define PREF_BDM_ADDTORECENTDOCS \\\"browser.download.manager.addToRecentDocs\\\"\\n \\n static const PRInt64 gUpdateInterval = 400 * PR_USEC_PER_MSEC;\\n@@ -1179,130 +1175,6 @@ nsDownloadManager::PauseResumeDownload(PRUint32 aID, PRBool aPause)\\n }\\n \\n NS_IMETHODIMP\\n-nsDownloadManager::Open(nsIDOMWindow* aParent, PRUint32 aID)\\n-{\\n-  // try to get an active download\\n-  nsRefPtr<nsDownload> dl = FindDownload(aID);\\n-  if (!dl) {\\n-    // try to get a finished download from the database\\n-    (void)GetDownloadFromDB(aID, getter_AddRefs(dl));\\n-    if (!dl) return NS_ERROR_FAILURE;\\n-  }\\n-\\n-  TimerParams* params = new TimerParams();\\n-  NS_ENSURE_TRUE(params, NS_ERROR_OUT_OF_MEMORY);\\n-\\n-  params->parent = aParent;\\n-  params->download = dl;\\n-\\n-  PRInt32 delay = 0;\\n-  nsCOMPtr<nsIPrefBranch> pref(do_GetService(NS_PREFSERVICE_CONTRACTID));\\n-  if (pref)\\n-    pref->GetIntPref(PREF_BDM_OPENDELAY, &delay);\\n-\\n-  // Look for an existing Download Manager window, if we find one we just \\n-  // tell it that a new download has begun (we don't focus, that's \\n-  // annoying), otherwise we need to open the window. We do this on a timer \\n-  // so that we can see if the download has already completed, if so, don't \\n-  // bother opening the window. \\n-  mDMOpenTimer = do_CreateInstance(\\\"@mozilla.org/timer;1\\\");\\n-  return mDMOpenTimer->InitWithFuncCallback(OpenTimerCallback, \\n-                                       (void*)params, delay, \\n-                                       nsITimer::TYPE_ONE_SHOT);\\n-}\\n-\\n-void\\n-nsDownloadManager::OpenTimerCallback(nsITimer* aTimer, void* aClosure)\\n-{\\n-  TimerParams* params = static_cast<TimerParams*>(aClosure);\\n-  \\n-  PRInt32 complete;\\n-  params->download->GetPercentComplete(&complete);\\n-  \\n-  PRBool closeDM = PR_FALSE;\\n-  nsCOMPtr<nsIPrefBranch> pref(do_GetService(NS_PREFSERVICE_CONTRACTID));\\n-  if (pref)\\n-    pref->GetBoolPref(PREF_BDM_CLOSEWHENDONE, &closeDM);\\n-\\n-  // Check closeWhenDone pref before opening download manager\\n-  if (!closeDM || complete < 100) {\\n-    PRBool focusDM = PR_FALSE;\\n-    PRBool showDM = PR_TRUE;\\n-    PRInt32 flashCount = -1;\\n-\\n-    if (pref) {\\n-      pref->GetBoolPref(PREF_BDM_FOCUSWHENSTARTING, &focusDM);\\n-\\n-      // We only flash the download manager if the user has the download manager show\\n-      pref->GetBoolPref(PREF_BDM_SHOWWHENSTARTING, &showDM);\\n-      if (showDM) \\n-        pref->GetIntPref(PREF_BDM_FLASHCOUNT, &flashCount);\\n-      else\\n-        flashCount = 0;\\n-    }\\n-\\n-    nsDownloadManager::OpenDownloadManager(focusDM, flashCount,\\n-                                           params->download, params->parent);\\n-  }\\n-\\n-  delete params;\\n-}\\n-\\n-nsresult\\n-nsDownloadManager::OpenDownloadManager(PRBool aShouldFocus,\\n-                                       PRInt32 aFlashCount,\\n-                                       nsIDownload *aDownload,\\n-                                       nsIDOMWindow *aParent)\\n-{\\n-  nsresult rv;\\n-  nsCOMPtr<nsIWindowMediator> wm =\\n-    do_GetService(NS_WINDOWMEDIATOR_CONTRACTID, &rv);\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n-\\n-  nsCOMPtr<nsIDOMWindowInternal> recentWindow;\\n-  wm->GetMostRecentWindow(NS_LITERAL_STRING(\\\"Download:Manager\\\").get(),\\n-                          getter_AddRefs(recentWindow));\\n-  if (recentWindow) {\\n-    if (aShouldFocus) {\\n-      recentWindow->Focus();\\n-    } else {\\n-      nsCOMPtr<nsIDOMChromeWindow> chromeWindow(do_QueryInterface(recentWindow));\\n-      chromeWindow->GetAttentionWithCycleCount(aFlashCount);\\n-    }\\n-  } else {\\n-    // If we ever have the capability to display the UI of third party dl\\n-    // managers, we'll open their UI here instead.\\n-    nsCOMPtr<nsIWindowWatcher> ww =\\n-      do_GetService(NS_WINDOWWATCHER_CONTRACTID, &rv);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-\\n-    // pass the datasource to the window\\n-    nsCOMPtr<nsIMutableArray> params =\\n-      do_CreateInstance(NS_ARRAY_CONTRACTID, &rv);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-\\n-    nsCOMPtr<nsIDownloadManager> dlMgr =\\n-      do_GetService(\\\"@mozilla.org/download-manager;1\\\", &rv);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-\\n-    nsCOMPtr<mozIStorageConnection> DBConn;\\n-    (void)dlMgr->GetDBConnection(getter_AddRefs(DBConn));\\n-\\n-    params->AppendElement(DBConn, PR_FALSE);\\n-    params->AppendElement(aDownload, PR_FALSE);\\n-    \\n-    nsCOMPtr<nsIDOMWindow> newWindow;\\n-    rv = ww->OpenWindow(aParent,\\n-                        DOWNLOAD_MANAGER_FE_URL,\\n-                        \\\"_blank\\\",\\n-                        \\\"chrome,dialog=no,resizable\\\",\\n-                        params,\\n-                        getter_AddRefs(newWindow));\\n-  }\\n-  return rv;\\n-}\\n-\\n-NS_IMETHODIMP\\n nsDownloadManager::GetDBConnection(mozIStorageConnection **aDBConn)\\n {\\n   NS_ADDREF(*aDBConn = mDBConn);\\n@@ -1419,15 +1291,10 @@ nsDownloadManager::Observe(nsISupports *aSubject,\\n                            NS_LITERAL_STRING(\\\"offlineCancelDownloadsAlertMsg\\\").get(),\\n                            NS_LITERAL_STRING(\\\"dontGoOfflineButton\\\").get());\\n   } else if (strcmp(aTopic, \\\"alertclickcallback\\\") == 0) {\\n-    // Attempt to locate a browser window to parent the download manager to\\n-    nsCOMPtr<nsIWindowMediator> wm = do_GetService(NS_WINDOWMEDIATOR_CONTRACTID);\\n-    nsCOMPtr<nsIDOMWindowInternal> browserWindow;\\n-    if (wm) {\\n-      wm->GetMostRecentWindow(NS_LITERAL_STRING(\\\"navigator:browser\\\").get(),\\n-                              getter_AddRefs(browserWindow));\\n-    }\\n-\\n-    return OpenDownloadManager(PR_TRUE, -1, nsnull, browserWindow);\\n+    nsCOMPtr<nsIDownloadManagerUI> dmui =\\n+      do_GetService(\\\"@mozilla.org/download-manager-ui;1\\\", &rv);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    return dmui->Show(nsnull, 0);\\n   }\\n \\n   return NS_OK;\\ndiff --git a/toolkit/components/downloads/src/nsDownloadManager.h b/toolkit/components/downloads/src/nsDownloadManager.h\\nindex 4e17472..3456e03 100644\\n--- a/toolkit/components/downloads/src/nsDownloadManager.h\\n+++ b/toolkit/components/downloads/src/nsDownloadManager.h\\n@@ -57,7 +57,6 @@\\n #include \\\"nsIStringBundle.h\\\"\\n #include \\\"nsISupportsPrimitives.h\\\"\\n #include \\\"nsIMIMEInfo.h\\\"\\n-#include \\\"nsITimer.h\\\"\\n #include \\\"mozIStorageConnection.h\\\"\\n #include \\\"mozIStorageStatement.h\\\"\\n #include \\\"nsISupportsArray.h\\\"\\n@@ -95,10 +94,6 @@ private:\\n #endif\\n \\n protected:\\n-  struct TimerParams {\\n-    nsRefPtr<nsDownload> download;\\n-    nsCOMPtr<nsIDOMWindow> parent;\\n-  };\\n   nsresult InitDB(PRBool *aDoImport);\\n   nsresult CreateTable();\\n   nsresult ImportDownloadHistory();\\n@@ -161,11 +156,6 @@ protected:\\n                                   const PRUnichar* aCancelMessageSingle,\\n                                   const PRUnichar* aDontCancelButton);\\n \\n-  static void OpenTimerCallback(nsITimer* aTimer, void* aClosure);\\n-  static nsresult OpenDownloadManager(PRBool aShouldFocus, PRInt32 aFlashCount,\\n-                                      nsIDownload* aDownload,\\n-                                      nsIDOMWindow* aParent);\\n-\\n   PRInt32  GetRetentionBehavior();\\n \\n   static PRBool IsInFinalStage(DownloadState aState)\\n@@ -190,7 +180,6 @@ protected:\\n private:\\n   nsCOMArray<nsIDownloadProgressListener> mListeners;\\n   nsCOMPtr<nsIStringBundle> mBundle;\\n-  nsCOMPtr<nsITimer> mDMOpenTimer;\\n   nsCOMPtr<mozIStorageConnection> mDBConn;\\n   nsCOMArray<nsDownload> mCurrentDownloads;\\n   nsCOMPtr<nsIObserverService> mObserverService;\\ndiff --git a/toolkit/components/downloads/src/nsDownloadManagerUI.js b/toolkit/components/downloads/src/nsDownloadManagerUI.js\\nnew file mode 100644\\nindex 0000000..eab9b11\\n--- /dev/null\\n+++ b/toolkit/components/downloads/src/nsDownloadManagerUI.js\\n@@ -0,0 +1,132 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ *   Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ * \\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is mozilla.org code.\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Shawn Wilsher <me@shawnwilsher.com>.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ * \\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+Components.utils.import(\\\"resource://gre/modules/XPCOMUtils.jsm\\\");\\n+\\n+////////////////////////////////////////////////////////////////////////////////\\n+//// Constants\\n+\\n+const Cc = Components.classes;\\n+const Ci = Components.interfaces;\\n+const Cr = Components.results;\\n+const DOWNLOAD_MANAGER_URL = \\\"chrome://mozapps/content/downloads/downloads.xul\\\";\\n+const PREF_FLASH_COUNT = \\\"browser.download.manager.flashCount\\\";\\n+\\n+////////////////////////////////////////////////////////////////////////////////\\n+//// nsDownloadManagerUI class\\n+\\n+function nsDownloadManagerUI() {}\\n+\\n+nsDownloadManagerUI.prototype = {\\n+  classDescription: \\\"Used to show the Download Manager's UI to the user\\\",\\n+  classID: Components.ID(\\\"7dfdf0d1-aff6-4a34-bad1-d0fe74601642\\\"),\\n+  contractID: \\\"@mozilla.org/download-manager-ui;1\\\",\\n+\\n+  //////////////////////////////////////////////////////////////////////////////\\n+  //// nsIDownloadManagerUI\\n+\\n+  show: function show(aWindowContext, aID)\\n+  {\\n+    // First we see if it is already visible\\n+    if (this.recentWindow) {\\n+      this.recentWindow.focus();\\n+      return;\\n+    }\\n+\\n+    var window = null;\\n+    try {\\n+      if (aWindowContext)\\n+        window = aWindowContext.getInterface(Ci.nsIDOMWindow);\\n+    } catch (e) { /* it's OK to not have a parent window */ }\\n+\\n+    // We pass the download manager and the nsIDownload  we want selected\\n+    var params = Cc[\\\"@mozilla.org/array;1\\\"].createInstance(Ci.nsIMutableArray);\\n+    var dm = Cc[\\\"@mozilla.org/download-manager;1\\\"].\\n+             getService(Ci.nsIDownloadManager);\\n+    params.appendElement(dm, false);\\n+    params.appendElement(dm.getDownload(aID), false);\\n+\\n+    var ww = Cc[\\\"@mozilla.org/embedcomp/window-watcher;1\\\"].\\n+             getService(Ci.nsIWindowWatcher);\\n+    ww.openWindow(window,\\n+                  DOWNLOAD_MANAGER_URL,\\n+                  null,\\n+                  \\\"chrome,dialog=no,resizable\\\",\\n+                  params);\\n+  },\\n+\\n+  get visible() {\\n+    return (null != this.recentWindow);\\n+  },\\n+\\n+  getAttention: function getAttention()\\n+  {\\n+    if (!this.visible)\\n+      throw Cr.NS_ERROR_UNEXPECTED;\\n+\\n+    var prefs = Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n+                getService(Ci.nsIPrefBranch);\\n+    var flashCount = prefs.getIntPref(PREF_FLASH_COUNT);\\n+\\n+    var win = this.recentWindow.QueryInteface(Ci.nsIDOMChromeWindow);\\n+    win.getAttentionWithCycleCount(flashCount);\\n+  },\\n+\\n+  //////////////////////////////////////////////////////////////////////////////\\n+  //// nsDownloadManagerUI\\n+\\n+  get recentWindow() {\\n+    var wm = Cc[\\\"@mozilla.org/appshell/window-mediator;1\\\"].\\n+             getService(Ci.nsIWindowMediator);\\n+    return wm.getMostRecentWindow(\\\"Download:Manager\\\");\\n+  },\\n+\\n+  //////////////////////////////////////////////////////////////////////////////\\n+  //// nsISupports\\n+\\n+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIDownloadManagerUI])\\n+};\\n+\\n+////////////////////////////////////////////////////////////////////////////////\\n+//// Module\\n+\\n+let components = [nsDownloadManagerUI];\\n+\\n+function NSGetModule(compMgr, fileSpec)\\n+{\\n+  return XPCOMUtils.generateModule(components);\\n+}\\n+\\ndiff --git a/toolkit/components/downloads/src/nsDownloadProxy.h b/toolkit/components/downloads/src/nsDownloadProxy.h\\nindex 5cac08e..f8e80bd 100644\\n--- a/toolkit/components/downloads/src/nsDownloadProxy.h\\n+++ b/toolkit/components/downloads/src/nsDownloadProxy.h\\n@@ -44,9 +44,11 @@\\n #include \\\"nsIPrefService.h\\\"\\n #include \\\"nsIMIMEInfo.h\\\"\\n #include \\\"nsIFileURL.h\\\"\\n+#include \\\"nsIDownloadManagerUI.h\\\"\\n \\n #define PREF_BDM_SHOWWHENSTARTING \\\"browser.download.manager.showWhenStarting\\\"\\n #define PREF_BDM_USEWINDOW \\\"browser.download.manager.useWindow\\\"\\n+#define PREF_BDM_FOCUSWHENSTARTING \\\"browser.download.manager.focusWhenStarting\\\"\\n \\n class nsDownloadProxy : public nsITransfer\\n {\\n@@ -89,7 +91,22 @@ public:\\n       PRUint32 id;\\n       mInner->GetId(&id);\\n \\n-      return dm->Open(nsnull, id);\\n+      nsCOMPtr<nsIDownloadManagerUI> dmui =\\n+        do_GetService(\\\"@mozilla.org/download-manager-ui;1\\\", &rv);\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+      PRBool visible;\\n+      rv = dmui->GetVisible(&visible);\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+      PRBool focus = PR_TRUE;\\n+      if (branch)\\n+        (void)branch->GetBoolPref(PREF_BDM_FOCUSWHENSTARTING, &focus);\\n+\\n+      if (visible && !focus)\\n+        return dmui->GetAttention();\\n+\\n+      return dmui->Show(nsnull, id);\\n     }\\n     return rv;\\n   }\\n\""}