{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas6710c22\""},"diff":"\"6710c22 Bug 396049: the last ditch GC gcPoke checks are moved to js_NewGCThing. r=brendan\\ndiff --git a/js/src/jsgc.c b/js/src/jsgc.c\\nindex 56d4751..f8e43d5 100644\\n--- a/js/src/jsgc.c\\n+++ b/js/src/jsgc.c\\n@@ -1054,7 +1054,6 @@ js_DumpGCStats(JSRuntime *rt, FILE *fp)\\n #endif\\n     fprintf(fp, \\\"   maximum GC nesting level: %lu\\\\n\\\", ULSTAT(maxlevel));\\n     fprintf(fp, \\\"potentially useful GC calls: %lu\\\\n\\\", ULSTAT(poke));\\n-    fprintf(fp, \\\"           useless GC calls: %lu\\\\n\\\", ULSTAT(nopoke));\\n     fprintf(fp, \\\"  thing arenas freed so far: %lu\\\\n\\\", ULSTAT(afree));\\n     fprintf(fp, \\\"     stack segments scanned: %lu\\\\n\\\", ULSTAT(stackseg));\\n     fprintf(fp, \\\"stack segment slots scanned: %lu\\\\n\\\", ULSTAT(segslots));\\n@@ -1403,14 +1402,10 @@ js_NewGCThing(JSContext *cx, uintN flags, size_t nbytes)\\n         return NULL;\\n     }\\n \\n-    doGC = (rt->gcMallocBytes >= rt->gcMaxMallocBytes);\\n+    doGC = (rt->gcMallocBytes >= rt->gcMaxMallocBytes && rt->gcPoke);\\n #ifdef JS_GC_ZEAL\\n-    if (rt->gcZeal >= 1) {\\n-        doGC = JS_TRUE;\\n-        if (rt->gcZeal >= 2)\\n-            rt->gcPoke = JS_TRUE;\\n-    }\\n-#endif /* !JS_GC_ZEAL */\\n+    doGC = doGC || rt->gcZeal >= 2 || (rt->gcZeal >= 1 && rt->gcPoke);\\n+#endif\\n \\n     arenaList = &rt->gcArenaList[flindex];\\n     for (;;) {\\n@@ -1477,7 +1472,6 @@ js_NewGCThing(JSContext *cx, uintN flags, size_t nbytes)\\n             if (rt->gcBytes >= rt->gcMaxBytes || !(a = NewGCArena(rt))) {\\n                 if (doGC)\\n                     goto fail;\\n-                rt->gcPoke = JS_TRUE;\\n                 doGC = JS_TRUE;\\n                 continue;\\n             }\\n@@ -2432,11 +2426,9 @@ js_GC(JSContext *cx, JSGCInvocationKind gckind)\\n         /* The last ditch GC preserves all atoms and weak roots. */\\n         keepAtoms = JS_TRUE;\\n     } else {\\n-        JS_CLEAR_WEAK_ROOTS(&cx->weakRoots);\\n-        rt->gcPoke = JS_TRUE;\\n-\\n         /* Keep atoms when a suspended compile is running on another context. */\\n         keepAtoms = (rt->gcKeepAtoms != 0);\\n+        JS_CLEAR_WEAK_ROOTS(&cx->weakRoots);\\n     }\\n \\n     /*\\n@@ -2463,13 +2455,6 @@ js_GC(JSContext *cx, JSGCInvocationKind gckind)\\n     if (gckind != GC_LAST_DITCH)\\n         JS_LOCK_GC(rt);\\n \\n-    /* Do nothing if no mutator has executed since the last GC. */\\n-    if (!rt->gcPoke) {\\n-        METER(rt->gcStats.nopoke++);\\n-        if (gckind != GC_LAST_DITCH)\\n-            JS_UNLOCK_GC(rt);\\n-        return;\\n-    }\\n     METER(rt->gcStats.poke++);\\n     rt->gcPoke = JS_FALSE;\\n \\ndiff --git a/js/src/jsgc.h b/js/src/jsgc.h\\nindex a620cb2..66fdad7 100644\\n--- a/js/src/jsgc.h\\n+++ b/js/src/jsgc.h\\n@@ -262,7 +262,6 @@ typedef struct JSGCStats {\\n #endif\\n     uint32  maxlevel;   /* maximum GC nesting (indirect recursion) level */\\n     uint32  poke;       /* number of potentially useful GC calls */\\n-    uint32  nopoke;     /* useless GC calls where js_PokeGC was not set */\\n     uint32  afree;      /* thing arenas freed so far */\\n     uint32  stackseg;   /* total extraordinary stack segments scanned */\\n     uint32  segslots;   /* total stack segment jsval slots scanned */\\n\""}