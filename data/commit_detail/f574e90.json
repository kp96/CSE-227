{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basf574e90\""},"diff":"\"f574e90 bug 179656 - allow drag and drop reordering of tabs, patch originally based on miniT by dorando, r=vlad, a=shaver\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 3096863..d6f1389 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -22,6 +22,7 @@\\n    -\\n    - Contributor(s):\\n    -   David Hyatt <hyatt@netscape.com> (Original Author of <tabbrowser>)\\n+   -   Mike Connor <mconnor@steelgryphon.com>\\n    -\\n    - Alternatively, the contents of this file may be used under the terms of\\n    - either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n@@ -56,7 +57,14 @@\\n       <xul:stringbundle src=\\\"chrome://global/locale/tabbrowser.properties\\\"/>\\n       <xul:tabbox flex=\\\"1\\\" eventnode=\\\"document\\\" xbl:inherits=\\\"handleCtrlPageUpDown\\\"\\n                   onselect=\\\"if (!('updateCurrentBrowser' in this.parentNode) || event.target.localName != 'tabpanels') return; this.parentNode.updateCurrentBrowser();\\\">\\n-        <xul:hbox class=\\\"tabbrowser-strip chromeclass-toolbar\\\" collapsed=\\\"true\\\" tooltip=\\\"_child\\\" context=\\\"_child\\\">\\n+        <xul:hbox id=\\\"tab-drop-indicator-bar\\\">\\n+          <xul:hbox id=\\\"tab-drop-indicator\\\"/>\\n+        </xul:hbox>          \\n+        <xul:hbox class=\\\"tabbrowser-strip chromeclass-toolbar\\\" collapsed=\\\"true\\\" tooltip=\\\"_child\\\" context=\\\"_child\\\"\\n+                  ondraggesture=\\\"nsDragAndDrop.startDrag(event, this.parentNode.parentNode); event.stopPropagation();\\\"\\n+                  ondragover=\\\"nsDragAndDrop.dragOver(event, this.parentNode.parentNode); event.stopPropagation();\\\"\\n+                  ondragdrop=\\\"nsDragAndDrop.drop(event, this.parentNode.parentNode); event.stopPropagation();\\\"\\n+                  ondragexit=\\\"nsDragAndDrop.dragExit(event, this.parentNode.parentNode); event.stopPropagation();\\\">\\n           <xul:tooltip onpopupshowing=\\\"event.preventBubble(); if (document.tooltipNode.hasAttribute('label')) { this.setAttribute('label', document.tooltipNode.getAttribute('label')); return true; } return false;\\\"/>\\n           <xul:menupopup onpopupshowing=\\\"this.parentNode.parentNode.parentNode.updatePopupMenu(this);\\\">\\n             <xul:menuitem label=\\\"&newTab.label;\\\" accesskey=\\\"&newTab.accesskey;\\\"\\n@@ -124,13 +132,16 @@\\n         document.getAnonymousNodes(this)[1]\\n       </field>\\n       <field name=\\\"mStrip\\\">\\n-        this.mTabBox.firstChild\\n+        this.mTabBox.childNodes[1]\\n       </field>\\n       <field name=\\\"mTabContainer\\\">\\n         this.mStrip.childNodes[2]\\n       </field>\\n       <field name=\\\"mPanelContainer\\\">\\n-        this.mTabBox.childNodes[1]\\n+        this.mTabBox.childNodes[2]\\n+      </field>\\n+      <field name=\\\"mTabs\\\">\\n+        this.mTabContainer.childNodes\\n       </field>\\n       <field name=\\\"mStringBundle\\\">\\n         document.getAnonymousNodes(this)[0]\\n@@ -165,12 +176,19 @@\\n       <field name=\\\"mModalDialogShowing\\\">\\n         false\\n       </field>\\n-      \\n+      <field name=\\\"arrowKeysShouldWrap\\\" readonly=\\\"true\\\">\\n+#ifdef XP_MACOSX\\n+        true\\n+#else\\n+        false\\n+#endif\\n+      </field> \\n+\\n       <method name=\\\"getBrowserAtIndex\\\">\\n         <parameter name=\\\"aIndex\\\"/>\\n         <body>\\n           <![CDATA[\\n-            return this.mPanelContainer.childNodes[aIndex].firstChild.nextSibling;\\n+            return this.mTabContainer.childNodes[aIndex].linkedBrowser;\\n           ]]>\\n         </body>\\n       </method>\\n@@ -545,7 +563,7 @@\\n       <method name=\\\"updateCurrentBrowser\\\">\\n         <body>\\n           <![CDATA[\\n-            var newBrowser = this.getBrowserAtIndex(this.mPanelContainer.selectedIndex);\\n+            var newBrowser = this.getBrowserAtIndex(this.mTabContainer.selectedIndex);\\n             if (this.mCurrentBrowser == newBrowser)\\n               return;\\n \\n@@ -620,7 +638,7 @@\\n                 p.onLocationChange(webProgress, null, loc);\\n                 if (securityUI)\\n                   p.onSecurityChange(webProgress, null, securityUI.state);\\n-                var listener = this.mTabListeners[this.mPanelContainer.selectedIndex];\\n+                var listener = this.mTabListeners[this.mTabContainer.selectedIndex];\\n                 if (listener.mIcon) {\\n                   if (this.isFavIconKnownMissing(listener.mIcon))\\n                     listener.mIcon = null;\\n@@ -819,7 +837,7 @@\\n             \\n             var tabBrowser = this.parentNode.parentNode.parentNode.parentNode;\\n \\n-            var tab = tabBrowser.mTabContainer.childNodes[i];\\n+            var tab = document.getAnonymousElementByAttribute(tabBrowser, \\\"linkedpanel\\\", this.parentNode.id);\\n             tabBrowser.setTabTitle(tab);\\n \\n             if (tab == tabBrowser.mCurrentTab)\\n@@ -1021,6 +1039,14 @@\\n             \\n             b._fastFind = this.fastFind;\\n \\n+            var uniqueId = \\\"panel\\\" + Date.now() + position;\\n+            this.mPanelContainer.lastChild.id = uniqueId;\\n+            t.linkedPanel = uniqueId;\\n+            t.linkedBrowser = b;\\n+            t._tPos = position;\\n+            if (t.previousSibling.selected) \\n+              t.setAttribute(\\\"afterselected\\\", true);\\n+            \\n             if (!blank) {\\n               // pretend the user typed this so it'll be available till\\n               // the document successfully loads\\n@@ -1145,7 +1171,7 @@\\n \\n             var index = -1;\\n             if (this.mCurrentTab == aTab)\\n-              index = this.mPanelContainer.selectedIndex;\\n+              index = this.mTabContainer.selectedIndex;\\n             else {\\n               // Find and locate the tab in our list.\\n               for (var i = 0; i < l; i++)\\n@@ -1168,7 +1194,7 @@\\n             oldBrowser.setAttribute(\\\"type\\\", \\\"content\\\");\\n \\n             // Now select the new tab before nuking the old one.\\n-            var currentIndex = this.mPanelContainer.selectedIndex;\\n+            var currentIndex = this.mTabContainer.selectedIndex;\\n \\n             var newIndex = -1;\\n             if (currentIndex > index)\\n@@ -1198,11 +1224,16 @@\\n             oldBrowser.destroy();\\n             \\n             this.mTabContainer.removeChild(oldTab);\\n-            this.mPanelContainer.removeChild(this.mPanelContainer.childNodes[index]);\\n+            this.mPanelContainer.removeChild(oldBrowser.parentNode);\\n \\n             this.selectedTab = this.mTabContainer.childNodes[newIndex];\\n-            this.mPanelContainer.selectedIndex = newIndex;\\n-            \\n+            var i;\\n+            for (i = oldTab._tPos; i < this.mTabContainer.childNodes.length; i++) { \\n+              this.mTabContainer.childNodes[i]._tPos = i;\\n+            }\\n+            this.mTabBox.selectedPanel = this.getBrowserForTab(this.mCurrentTab).parentNode;\\n+            this.mCurrentTab.selected = true;\\n+\\n             this.updateCurrentBrowser();\\n \\n             // see comment above destroy above\\n@@ -1317,16 +1348,7 @@\\n         <parameter name=\\\"aTab\\\"/>\\n         <body>\\n         <![CDATA[\\n-          if (this.mCurrentTab == aTab)\\n-            return this.mCurrentBrowser;\\n-\\n-          for (var i = 0; i < this.mTabContainer.childNodes.length; i++) {\\n-            if (this.mTabContainer.childNodes[i] == aTab) {\\n-              return this.getBrowserAtIndex(i);\\n-            }\\n-          }\\n-\\n-          return null;\\n+          return aTab.linkedBrowser;\\n         ]]>\\n         </body>\\n       </method>\\n@@ -1355,26 +1377,73 @@\\n                 readonly=\\\"true\\\"/>\\n \\n \\n-      <property name=\\\"browsers\\\"\\n-                onget=\\\"return this.mPanelContainer.getElementsByTagName('browser');\\\"\\n-                readonly=\\\"true\\\"/>\\n+      <property name=\\\"browsers\\\" readonly=\\\"true\\\">\\n+       <getter>\\n+          <![CDATA[\\n+            var browsers = [];\\n+            var i;\\n+            browsers.item = function(i) {return this[i];}\\n+            for (i = 0; i < this.mTabContainer.childNodes.length; i++)\\n+              browsers.push(this.mTabContainer.childNodes[i].linkedBrowser);\\n+            return browsers;\\n+          ]]>\\n+        </getter>\\n+      </property>\\n \\n       <!-- Drag and drop observer API -->\\n-      <!--<method name=\\\"onDragStart\\\">\\n+      <method name=\\\"onDragStart\\\">\\n         <parameter name=\\\"aEvent\\\"/>\\n         <parameter name=\\\"aXferData\\\"/>\\n         <parameter name=\\\"aDragAction\\\"/>\\n-        <body/>\\n-      </method>-->\\n+        <body>\\n+        <![CDATA[\\n+          if (aEvent.target.localName == \\\"tab\\\") {\\n+            aXferData.data = new TransferData();\\n+            aXferData.data.addDataForFlavour(\\\"text/x-moz-tab\\\", aEvent.target._tPos);\\n+            \\n+            var URI = this.getBrowserForTab(aEvent.target).currentURI;\\n+            if (URI) {\\n+              aXferData.data.addDataForFlavour(\\\"text/unicode\\\", URI.spec);\\n+              aXferData.data.addDataForFlavour(\\\"text/x-moz-url\\\", URI.spec + \\\"\\\\n\\\" + aEvent.target.label);\\n+              aXferData.data.addDataForFlavour(\\\"text/html\\\", '<a href=\\\"' + URI.spec + '\\\">' + aEvent.target.label + '</a>');\\n+            }\\n+          }\\n+        ]]>\\n+        </body>\\n+      </method>\\n \\n       <method name=\\\"onDragOver\\\">\\n         <parameter name=\\\"aEvent\\\"/>\\n         <parameter name=\\\"aFlavour\\\"/>\\n         <parameter name=\\\"aDragSession\\\"/>\\n         <body>\\n-        <![CDATA[\\n-          return; // Just having this makes our feedback correct.\\n-        ]]>\\n+          <![CDATA[\\n+            if (aDragSession.canDrop && aDragSession.sourceNode.parentNode == this.mTabContainer) {\\n+              var newIndex = this.getNewIndex(aEvent);\\n+\\n+              var ib = document.getElementById('tab-drop-indicator-bar');\\n+              var ind = document.getElementById('tab-drop-indicator');\\n+              ib.setAttribute('dragging','true');\\n+              \\n+              if (window.getComputedStyle(this.parentNode, null).direction == \\\"ltr\\\") {\\n+                if (newIndex == this.mTabs.length) {\\n+                  ind.style.marginLeft = this.mTabs[newIndex-1].boxObject.x + \\n+                                         this.mTabs[newIndex-1].boxObject.width - this.boxObject.x - 7 + 'px';\\n+                } else {\\n+                  ind.style.marginLeft = this.mTabs[newIndex].boxObject.x - this.boxObject.x - 7 + 'px';\\n+                }\\n+              } else {\\n+                if (newIndex == gBrowser.mTabs.length) {\\n+                  ind.style.marginRight = gBrowser.boxObject.width + gBrowser.boxObject.x -\\n+                                          gBrowser.mTabs[newIndex-1].boxObject.x + 'px';\\n+              } else {\\n+                  ind.style.marginRight = gBrowser.boxObject.width + gBrowser.boxObject.x -\\n+                                          gBrowser.mTabs[newIndex].boxObject.x -\\n+                                          gBrowser.mTabs[newIndex].boxObject.width + 'px';\\n+                }\\n+              }\\n+            }\\n+          ]]>\\n         </body>\\n       </method>\\n \\n@@ -1384,30 +1453,49 @@\\n         <parameter name=\\\"aDragSession\\\"/>\\n         <body>\\n           <![CDATA[\\n-            var url = transferUtils.retrieveURLFromData(aXferData.data, aXferData.flavour.contentType);\\n+            if (aDragSession.sourceNode.parentNode == this.mTabContainer) {\\n+              var newIndex = this.getNewIndex(aEvent);\\n+              if (newIndex > aXferData.data) \\n+                newIndex--;\\n+              if (newIndex != aXferData.data) \\n+                this.moveTabTo(this.mTabs[aXferData.data], newIndex);\\n+            } else {\\n+              var url = transferUtils.retrieveURLFromData(aXferData.data, aXferData.flavour.contentType);\\n \\n-            // valid urls don't contain spaces ' '; if we have a space it isn't a valid url.\\n-            // Also disallow dropping javascript: or data: urls--bail out\\n-            if (!url || !url.length || url.indexOf(\\\" \\\", 0) != -1 ||\\n-                /^\\\\s*(javascript|data):/.test(url))\\n-              return;\\n+              // valid urls don't contain spaces ' '; if we have a space it isn't a valid url.\\n+              // Also disallow dropping javascript: or data: urls--bail out\\n+              if (!url || !url.length || url.indexOf(\\\" \\\", 0) != -1 ||\\n+                  /^\\\\s*(javascript|data):/.test(url))\\n+                return;\\n \\n-            this.dragDropSecurityCheck(aEvent, aDragSession, url);\\n+              this.dragDropSecurityCheck(aEvent, aDragSession, url);\\n \\n-            var bgLoad = this.mPrefs.getBoolPref(\\\"browser.tabs.loadInBackground\\\");\\n+              var bgLoad = this.mPrefs.getBoolPref(\\\"browser.tabs.loadInBackground\\\");\\n \\n-            var tab = null;\\n-            if (aEvent.originalTarget.localName != \\\"tab\\\") {\\n-              // We're adding a new tab.\\n-              tab = this.addTab(getShortcutOrURI(url));\\n-            }\\n-            else {\\n-              // Load in an existing tab.\\n-              tab = aEvent.originalTarget;\\n-              this.getBrowserForTab(tab).loadURI(getShortcutOrURI(url));\\n+              var tab = null;\\n+              if (aEvent.originalTarget.localName != \\\"tab\\\") {\\n+                // We're adding a new tab.\\n+                tab = this.addTab(getShortcutOrURI(url));\\n+              }\\n+              else {\\n+                // Load in an existing tab.\\n+                tab = aEvent.originalTarget;\\n+                this.getBrowserForTab(tab).loadURI(getShortcutOrURI(url));\\n+              }\\n+              if (this.mCurrentTab != tab && !bgLoad)\\n+                this.selectedTab = tab;\\n             }\\n-            if (this.mCurrentTab != tab && !bgLoad)\\n-              this.selectedTab = tab;\\n+          ]]>\\n+        </body>\\n+      </method>\\n+\\n+      <method name=\\\"onDragExit\\\">\\n+        <parameter name=\\\"aEvent\\\"/>\\n+        <parameter name=\\\"aDragSession\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            var ib = document.getElementById('tab-drop-indicator-bar');\\n+            ib.setAttribute('dragging','false');\\n           ]]>\\n         </body>\\n       </method>\\n@@ -1416,6 +1504,7 @@\\n         <body>\\n         <![CDATA[\\n           var flavourSet = new FlavourSet();\\n+          flavourSet.appendFlavour(\\\"text/x-moz-tab\\\"); // this has to be first to support DnD reordering\\n           flavourSet.appendFlavour(\\\"text/x-moz-url\\\");\\n           flavourSet.appendFlavour(\\\"text/unicode\\\");\\n           flavourSet.appendFlavour(\\\"application/x-moz-file\\\", \\\"nsIFile\\\");\\n@@ -1423,7 +1512,116 @@\\n         ]]>\\n         </body>\\n       </method>\\n-                                                               \\n+      \\n+      <method name=\\\"moveTabTo\\\">\\n+        <parameter name=\\\"aTab\\\"/>\\n+        <parameter name=\\\"aIndex\\\"/>\\n+        <body>\\n+        <![CDATA[\\n+          this.mTabFilters.splice(aIndex, 0, this.mTabFilters.splice(aTab._tPos, 1)[0]);\\n+          this.mTabListeners.splice(aIndex, 0, this.mTabListeners.splice(aTab._tPos, 1)[0]);\\n+\\n+          aIndex = aIndex < aTab._tPos ? aIndex: aIndex+1;\\n+          this.mCurrentTab.selected = false;\\n+          this.mTabContainer.insertBefore(aTab, this.mTabContainer.childNodes[aIndex]);\\n+          var i;\\n+          for (i = 0; i < this.mTabContainer.childNodes.length; i++) {\\n+            this.mTabContainer.childNodes[i]._tPos = i;\\n+          }\\n+          this.mCurrentTab.selected = true;\\n+          return aTab;\\n+        ]]>\\n+        </body>\\n+      </method>\\n+\\n+      <method name=\\\"getNewIndex\\\">\\n+        <parameter name=\\\"aEvent\\\"/>\\n+        <body>\\n+          <![CDATA[     \\n+            var i;\\n+            if (window.getComputedStyle(this.parentNode, null).direction == \\\"ltr\\\") {\\n+              for (i = aEvent.target.localName == \\\"tab\\\" ? aEvent.target._tPos : 0; i < this.mTabs.length; i++)\\n+                if (aEvent.clientX < this.mTabs[i].boxObject.x + this.mTabs[i].boxObject.width / 2) \\n+                  return i;\\n+            } else {\\n+               for (i = aEvent.target.localName == \\\"tab\\\" ? aEvent.target._tPos : 0; i < this.mTabs.length; i++)\\n+                if (aEvent.clientX > this.mTabs[i].boxObject.x + this.mTabs[i].boxObject.width / 2) \\n+                  return i;\\n+            }\\n+\\n+            return this.mTabs.length;\\n+          ]]>\\n+        </body>\\n+      </method>\\n+\\n+\\n+      <method name=\\\"moveTabForward\\\">\\n+        <body>\\n+          <![CDATA[\\n+            var tabPos = this.mCurrentTab._tPos;\\n+            if (tabPos < this.browsers.length - 1) {\\n+              this.moveTabTo(this.mCurrentTab, tabPos + 1);\\n+              this.mCurrentTab.focus();\\n+            }\\n+            else if (this.arrowKeysShouldWrap)\\n+              this.moveTabToStart();\\n+          ]]>\\n+        </body>\\n+      </method>\\n+\\n+      <method name=\\\"moveTabBackward\\\">\\n+        <body>\\n+          <![CDATA[\\n+            var tabPos = this.mCurrentTab._tPos;\\n+            if (tabPos > 0) {\\n+              this.moveTabTo(this.mCurrentTab, tabPos - 1);\\n+              this.mCurrentTab.focus();\\n+            }\\n+            else if (this.arrowKeysShouldWrap)\\n+              this.moveTabToEnd();\\n+          ]]>\\n+        </body>\\n+      </method>\\n+\\n+      <method name=\\\"moveTabToStart\\\">\\n+        <body>\\n+          <![CDATA[\\n+            var tabPos = this.mCurrentTab._tPos;\\n+            if (tabPos > 0) {\\n+              this.moveTabTo(this.mCurrentTab, 0);\\n+              this.mCurrentTab.focus();\\n+            }\\n+          ]]>\\n+        </body>\\n+      </method>\\n+      \\n+      <method name=\\\"moveTabToEnd\\\">\\n+        <body>\\n+          <![CDATA[\\n+            var tabPos = this.mCurrentTab._tPos;\\n+            if (tabPos < this.browsers.length - 1) {\\n+              this.moveTabTo(this.mCurrentTab, \\n+                                        this.browsers.length - 1);\\n+              this.mCurrentTab.focus();\\n+            }\\n+          ]]>\\n+        </body>\\n+      </method>\\n+      \\n+      <method name=\\\"moveTabOver\\\">\\n+        <parameter name=\\\"aEvent\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            var direction = window.getComputedStyle(this.parentNode, null).direction;\\n+            if ((direction == \\\"ltr\\\" && aEvent.keyCode == KeyEvent.DOM_VK_RIGHT) ||\\n+                (direction == \\\"rtl\\\" && aEvent.keyCode == KeyEvent.DOM_VK_LEFT))\\n+              this.moveTabForward();\\n+            else\\n+              this.moveTabBackward();\\n+          ]]>\\n+        </body>\\n+      </method>\\n+                                                        \\n       <!-- BEGIN FORWARDED BROWSER PROPERTIES.  IF YOU ADD A PROPERTY TO THE BROWSER ELEMENT\\n            MAKE SURE TO ADD IT HERE AS WELL. -->\\n       <property name=\\\"canGoBack\\\"\\n@@ -1689,15 +1887,44 @@\\n       <![CDATA[({\\n         tabbrowser: this,\\n         handleEvent: function handleEvent(aEvent) {\\n-\\t  if (!aEvent.isTrusted) {\\n-\\t    // Don't let untrusted events mess with tabs.\\n-\\t    return;\\n-\\t  }\\n-\\n-#ifndef XP_MACOSX\\n-          if (aEvent.ctrlKey && aEvent.keyCode == KeyEvent.DOM_VK_F4 && this.tabbrowser.mTabBox.handleCtrlPageUpDown)\\n-            this.tabbrowser.removeCurrentTab();\\n+          if (!aEvent.isTrusted) {\\n+            // Don't let untrusted events mess with tabs.\\n+            return;\\n+          }\\n+  \\n+#ifdef XP_MACOSX\\n+          if ('metaKey' in aEvent && aEvent.metaKey) {\\n+#else\\n+          if ('ctrlKey' in aEvent && aEvent.ctrlKey) {\\n+            if (aEvent.keyCode == KeyEvent.DOM_VK_F4 && \\n+                this.tabbrowser.mTabBox.handleCtrlPageUpDown) {\\n+              this.tabbrowser.removeCurrentTab();\\n+              return;\\n+            }\\n #endif\\n+            if (aEvent.target.localName == \\\"tabbrowser\\\") {\\n+              switch (aEvent.keyCode) {\\n+                case KeyEvent.DOM_VK_UP:\\n+                  this.tabbrowser.moveTabBackward();\\n+                  break;\\n+                case KeyEvent.DOM_VK_DOWN:\\n+                  this.tabbrowser.moveTabForward();\\n+                  break;\\n+                case KeyEvent.DOM_VK_RIGHT:\\n+                case KeyEvent.DOM_VK_LEFT:\\n+                  this.tabbrowser.moveTabOver(aEvent);\\n+                  break;\\n+                case KeyEvent.DOM_VK_HOME:\\n+                  this.tabbrowser.moveTabToStart();\\n+                  break;\\n+                case KeyEvent.DOM_VK_END:\\n+                  this.tabbrowser.moveTabToEnd();\\n+                  break;\\n+                default:\\n+                  break;\\n+              }\\n+            }\\n+          }\\n         }\\n       })]]>\\n       </field>      \\n@@ -1719,10 +1946,16 @@\\n \\n       <constructor>\\n         <![CDATA[\\n-          this.mCurrentBrowser = this.getBrowserAtIndex(0);\\n+          this.mCurrentBrowser = this.mPanelContainer.childNodes[0].firstChild.nextSibling;\\n           this.mCurrentTab = this.mTabContainer.firstChild;\\n           this.mTabBox.handleCtrlTab = !/Mac/.test(navigator.platform);\\n           document.addEventListener(\\\"keypress\\\", this._keyEventHandler, false);\\n+\\n+          var uniqueId = \\\"panel\\\" + Date.now();\\n+          this.mPanelContainer.childNodes[0].id = uniqueId;\\n+          this.mTabContainer.childNodes[0].linkedPanel = uniqueId;\\n+          this.mTabContainer.childNodes[0]._tPos = 0;\\n+          this.mTabContainer.childNodes[0].linkedBrowser = this.mPanelContainer.childNodes[0].firstChild.nextSibling;\\n         ]]>\\n       </constructor>\\n \\ndiff --git a/browser/themes/pinstripe/browser/tabbrowser/tabDragIndicator.png b/browser/themes/pinstripe/browser/tabbrowser/tabDragIndicator.png\\nnew file mode 100755\\nindex 0000000..6a18e78\\nBinary files /dev/null and b/browser/themes/pinstripe/browser/tabbrowser/tabDragIndicator.png differ\\ndiff --git a/browser/themes/winstripe/browser/tabbrowser/tabDragIndicator.png b/browser/themes/winstripe/browser/tabbrowser/tabDragIndicator.png\\nnew file mode 100755\\nindex 0000000..6a18e78\\nBinary files /dev/null and b/browser/themes/winstripe/browser/tabbrowser/tabDragIndicator.png differ\\n\""}