{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas4cb8461\""},"diff":"\"4cb8461 Sprinkle the awesome (we correctly create items in the correct place (index) now)\\ndiff --git a/services/sync/nsBookmarksSyncService.js b/services/sync/nsBookmarksSyncService.js\\nindex a095423..217117b 100644\\n--- a/services/sync/nsBookmarksSyncService.js\\n+++ b/services/sync/nsBookmarksSyncService.js\\n@@ -101,50 +101,30 @@ BookmarksSyncService.prototype = {\\n \\n   _wrapNode: function BSS__wrapNode(node) {\\n     var items = {};\\n-    this._wrapNodeInternal(node, items);\\n-\\n-    // sanity check\\n-    var rootGuid = this._bms.getItemGUID(node.itemId);\\n-    for (var wanted in items) {\\n-      if (rootGuid == wanted)\\n-        continue;\\n-      var found = false;\\n-      for (var parent in items) {\\n-        if (items[parent].children && items[parent].children.indexOf(wanted) >= 0) {\\n-          found = true;\\n-          continue;\\n-        }\\n-      }\\n-      if (!found) {\\n-        LOG(\\\"wrapNode error: node has no parent (\\\" + wanted + \\\")\\\");\\n-      }\\n-    }\\n-\\n+    this._wrapNodeInternal(node, items, null, null);\\n     return items;\\n   },\\n \\n-  _wrapNodeInternal: function BSS__wrapNodeInternal(node, items) {\\n+  _wrapNodeInternal: function BSS__wrapNodeInternal(node, items, parentGuid, index) {\\n     var guid = this._bms.getItemGUID(node.itemId);\\n-    var item = {\\\"type\\\": node.type};\\n+    var item = {type: node.type,\\n+                parentGuid: parentGuid,\\n+                index: index};\\n \\n     if (node.type == node.RESULT_TYPE_FOLDER) {\\n+      item.title = node.title;\\n+\\n       node.QueryInterface(Ci.nsINavHistoryQueryResultNode);\\n-      var openState = node.containerOpen;\\n       node.containerOpen = true;\\n-      var children = [];\\n+\\n       for (var i = 0; i < node.childCount; i++) {\\n-        var child = node.getChild(i);\\n-        this._wrapNodeInternal(child, items);\\n-        children.push(this._bms.getItemGUID(child.itemId));\\n+        this._wrapNodeInternal(node.getChild(i), items, guid, i);\\n       }\\n-      item[\\\"children\\\"] = children;\\n-      item[\\\"title\\\"] = node.title;\\n-      node.containerOpen = openState;\\n     } else if (node.type == node.RESULT_TYPE_SEPARATOR) {\\n     } else if (node.type == node.RESULT_TYPE_URI) {\\n       // FIXME: need to verify that it's a bookmark, it could be a history result!\\n-      item[\\\"title\\\"] = node.title;\\n-      item[\\\"uri\\\"] = node.uri;\\n+      item.title = node.title;\\n+      item.uri = node.uri;\\n     } else {\\n       // what do we do?\\n     }\\n@@ -152,74 +132,38 @@ BookmarksSyncService.prototype = {\\n     items[guid] = item;\\n   },\\n \\n-  // find parent & index\\n-  // note that this._snapshot needs to be up-to-date!\\n-  _findItemParent: function BSS__findItemParent(itemGuid) {\\n-    var parent;\\n-    var index;\\n-    for (var item in this._snapshot) {\\n-      if (this._snapshot[item].children) {\\n-        index = this._snapshot[item].children.indexOf(itemGuid);\\n-        if (index >= 0) {\\n-          parent = item;\\n-          break;\\n-        }\\n-      }\\n-    }\\n-    return [parent, index];\\n-  },\\n-\\n   _combineCommands: function BSS__combineCommands(commandList) {\\n     var newList = [];\\n-    var lastObj;\\n-    if (newList.length)\\n-      lastObj = newList[newList.length - 1];\\n \\n     for (var i = 0; i < commandList.length; i++) {\\n-      LOG(\\\"Command: \\\" + uneval(commandList[i]) + \\\"\\\\n\\\");\\n+      LOG(\\\"Combining command: \\\" + uneval(commandList[i]));\\n+\\n       var action = commandList[i].action;\\n+      var value = commandList[i].value;\\n       var path = commandList[i].path;\\n-      var guid = path.shift();\\n \\n-      // Note: this only works when the commands to be collapsed are\\n-      // contiguous in the array (this is ok right?)\\n-      if ((action == \\\"create\\\" || action == \\\"remove\\\") &&\\n-          (!newList.length ||\\n-           (lastObj && lastObj.guid != guid && lastObj.action != action))) {\\n-        // Avoid the commands that edit the parent's children property\\n-        if (path.length != 1)\\n-          continue;\\n-\\n-        let [parent, index] = this._findItemParent(guid);\\n-        if (!parent) {\\n-          LOG(\\\"Warning: item has no parent!\\\\n\\\");\\n-          continue;\\n-        }\\n+      // ignore commands about creating the item container itself\\n+      if (path.length <= 1)\\n+        continue;\\n \\n-        newList.push({action: action,\\n-                      guid: guid,\\n-                      parentGuid: parent,\\n-                      index: index,\\n-                      data: this._snapshot[guid]});\\n-\\n-      } else if (action == \\\"edit\\\") {\\n-        // FIXME: will we never edit anything deeper?\\n-        if (path.length != 1) {\\n-          LOG(\\\"Warning: editing deep property - dropping\\\");\\n-          continue;\\n-        }\\n+      var guid = path.shift();\\n+      var key = path.pop();\\n \\n-        if (!newList.length ||\\n-            (lastObj && lastObj.guid != guid && lastObj.action != action))\\n-          newList.push({action: action, guid: guid});\\n+      if (path.length) {\\n+        LOG(\\\"Warning: editing deep property - dropping\\\");\\n+        continue;\\n+      }\\n \\n-        var key = path[path.length - 1];\\n-        var value = this._snapshot[guid][key];\\n-        newList[newList.length - 1].data[key] = value;\\n+      if (!newList.length ||\\n+          newList[newList.length - 1].guid != guid ||\\n+          newList[newList.length - 1].action != action) {\\n+        newList.push({action: action, guid: guid, data: {}});\\n       }\\n+\\n+      newList[newList.length - 1].data[key] = value;\\n     }\\n-    LOG(\\\"Combined list:\\\\n\\\");\\n-    LOG(uneval(newList) + \\\"\\\\n\\\");\\n+\\n+    LOG(\\\"Combined list: \\\" + uneval(newList) + \\\"\\\\n\\\");\\n     return newList;\\n   },\\n \\n@@ -246,32 +190,32 @@ BookmarksSyncService.prototype = {\\n \\n   _createCommand: function BSS__createCommand(command) {\\n     var newId;\\n-    var parentId = this._bms.getItemIdForGUID(command.parentGuid);\\n+    var parentId = this._bms.getItemIdForGUID(command.data.parentGuid);\\n     switch (command.data.type) {\\n     case 0:\\n       LOG(\\\"  -> creating a bookmark: '\\\" + command.data.title +\\n           \\\"' -> \\\" + command.data.uri);\\n       newId = this._bms.insertBookmark(parentId,\\n                                        makeURI(command.data.uri),\\n-                                       command.index,\\n+                                       command.data.index,\\n                                        command.data.title);\\n       break;\\n     case 6:\\n       LOG(\\\"  -> creating a folder: '\\\" + command.data.title + \\\"'\\\");\\n       newId = this._bms.createFolder(parentId,\\n                                      command.data.title,\\n-                                     command.index);\\n+                                     command.data.index);\\n       break;\\n     case 7:\\n       LOG(\\\"  -> creating a separator\\\");\\n-      newId = this._bms.insertSeparator(parentId, command.index);\\n+      newId = this._bms.insertSeparator(parentId, command.data.index);\\n       break;\\n     default:\\n       LOG(\\\"createCommand: Unknown item type: \\\" + command.data.type);\\n       break;\\n     }\\n     if (newId)\\n-      this._bms.setItemGUID(newId, command.guid);\\n+      this._bms.setItemGUID(newId, command.data.guid);\\n   },\\n \\n   _removeCommand: function BSS__removeCommand(command) {\\n@@ -405,20 +349,27 @@ BookmarksSyncService.prototype = {\\n         conflicts = ret.conflicts;\\n       }\\n \\n-      LOG(\\\"\\\\n\\\" + uneval(conflicts) + \\\"\\\\n\\\");\\n+      LOG(\\\"Propagations: \\\" + uneval(propagations) + \\\"\\\\n\\\");\\n+      LOG(\\\"Conflicts: \\\" + uneval(conflicts) + \\\"\\\\n\\\");\\n \\t  \\n       this._snapshotVersion = server['version'];\\n \\n-      LOG(uneval(propagations));\\n-      if (!((propagations[0] && propagations[0].length > 0) ||\\n-            (propagations[1] && propagations[1].length > 0))) {\\n+      if (!((propagations[0] && propagations[0].length) ||\\n+            (propagations[1] && propagations[1].length) ||\\n+            (conflicts[0] && conflicts[0].length) ||\\n+            (conflicts[1] && conflicts[1].length))) {\\n         this._snapshot = this._wrapNode(localBookmarks);\\n         LOG(\\\"Sync complete (2): no changes needed on client or server\\\");\\n         return;\\n       }\\n \\n+      if ((conflicts[0] && conflicts[0].length) ||\\n+          (conflicts[1] && conflicts[1].length)) {\\n+        LOG(\\\"\\\\nWARNING: Conflicts found, but we don't resolve conflicts yet!\\\\n\\\");\\n+      }\\n+\\n       // 3.1) Apply server changes to local store\\n-      if (propagations[0] && propagations[0].length > 0) {\\n+      if (propagations[0] && propagations[0].length) {\\n         LOG(\\\"Applying changes locally\\\");\\n         localBookmarks = this._getLocalBookmarks(); // fixme: wtf\\n         this._snapshot = this._wrapNode(localBookmarks);\\n\""}