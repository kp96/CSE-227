{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basce95774\""},"diff":"\"ce95774 Bug 394789 - Add a finalize() method to mozStorageStatement.  r=neil, r=sspitzer, a=bzbarsky\\ndiff --git a/storage/public/mozIStorageStatement.idl b/storage/public/mozIStorageStatement.idl\\nindex 3fc7843..a53f062 100644\\n--- a/storage/public/mozIStorageStatement.idl\\n+++ b/storage/public/mozIStorageStatement.idl\\n@@ -45,7 +45,7 @@ interface nsISimpleEnumerator;\\n \\n [ptr] native sqlite3stmtptr(struct sqlite3_stmt);\\n \\n-[scriptable, uuid(80e5210f-c0da-4f37-b5f9-d9925a75612a)]\\n+[scriptable, uuid(1a95a6ec-e4b0-4d0b-947b-d2f40b04d057)]\\n interface mozIStorageStatement : mozIStorageValueArray {\\n   /**\\n    * Initialize this query with the given SQL statement.\\n@@ -55,6 +55,13 @@ interface mozIStorageStatement : mozIStorageValueArray {\\n                   in AUTF8String aSQLStatement);\\n \\n   /**\\n+   * Finalizes a statement so you can successfully close a database connection.\\n+   * This method does not need to be used from native callers since you can just\\n+   * set the statement to null, but is extremely useful to JS callers.\\n+   */\\n+  void finalize();\\n+\\n+  /**\\n    * Create a clone of this statement, by initializing a new statement\\n    * with the same connection and same SQL statement as this one.  It\\n    * does not preserve statement state; that is, if a statement is\\ndiff --git a/storage/src/mozStorageStatement.cpp b/storage/src/mozStorageStatement.cpp\\nindex 8090e4f..4ab32e8 100644\\n--- a/storage/src/mozStorageStatement.cpp\\n+++ b/storage/src/mozStorageStatement.cpp\\n@@ -192,8 +192,7 @@ mozStorageStatement::Initialize(mozIStorageConnection *aDBConnection, const nsAC\\n \\n mozStorageStatement::~mozStorageStatement()\\n {\\n-    if (mDBStatement)\\n-        sqlite3_finalize (mDBStatement);\\n+    (void)Finalize();\\n }\\n \\n /* mozIStorageStatement clone (); */\\n@@ -211,6 +210,18 @@ mozStorageStatement::Clone(mozIStorageStatement **_retval)\\n     return NS_OK;\\n }\\n \\n+/* void finalize(); */\\n+NS_IMETHODIMP\\n+mozStorageStatement::Finalize()\\n+{\\n+    if (mDBStatement) {\\n+        int srv = sqlite3_finalize(mDBStatement);\\n+        mDBStatement = NULL;\\n+        return ConvertResultCode(srv);\\n+    }\\n+    return NS_OK;\\n+}\\n+\\n /* readonly attribute unsigned long parameterCount; */\\n NS_IMETHODIMP\\n mozStorageStatement::GetParameterCount(PRUint32 *aParameterCount)\\ndiff --git a/storage/test/unit/head_storage.js b/storage/test/unit/head_storage.js\\nindex fe60d31..c2a9f34 100644\\n--- a/storage/test/unit/head_storage.js\\n+++ b/storage/test/unit/head_storage.js\\n@@ -51,10 +51,19 @@ function getTestDB()\\n \\n function cleanup()\\n {\\n+  // close the connection\\n+  print(\\\"*** Storage Tests: Trying to close!\\\");\\n+  getOpenedDatabase().close();\\n+\\n+  // we need to null out the database variable to get a new connection the next\\n+  // time getOpenedDatabase is called\\n+  gDBConn = null;\\n+\\n   // removing test db\\n+  print(\\\"*** Storage Tests: Trying to remove file!\\\");\\n   var dbFile = getTestDB();\\n   if (dbFile.exists())\\n-    try { dbFile.remove(true); } catch(e) { /* stupid windows box */ }\\n+    try { dbFile.remove(false); } catch(e) { /* stupid windows box */ }\\n }\\n \\n function getService()\\n@@ -65,7 +74,10 @@ function getService()\\n var gDBConn = null;\\n function getOpenedDatabase()\\n {\\n-  return gDBConn ? gDBConn : gDBConn = getService().openDatabase(getTestDB());\\n+  if (!gDBConn) {\\n+    gDBConn = getService().openDatabase(getTestDB());\\n+  }\\n+  return gDBConn;\\n }\\n \\n function createStatement(aSQL)\\ndiff --git a/storage/test/unit/test_bug-365166.js b/storage/test/unit/test_bug-365166.js\\nindex 464061c..5a8e5e9 100644\\n--- a/storage/test/unit/test_bug-365166.js\\n+++ b/storage/test/unit/test_bug-365166.js\\n@@ -32,6 +32,7 @@ function run_test() {\\n       wrapper.initialize(statement);\\n     } finally {\\n       statement.reset();\\n+      statement.finalize();\\n     }\\n   }\\n }\\ndiff --git a/storage/test/unit/test_bug-393952.js b/storage/test/unit/test_bug-393952.js\\nindex 3d4159d..166c200 100644\\n--- a/storage/test/unit/test_bug-393952.js\\n+++ b/storage/test/unit/test_bug-393952.js\\n@@ -48,6 +48,7 @@ function setup()\\n   var stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('a')\\\");\\n   stmt.execute();\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_vacuum()\\n@@ -55,6 +56,7 @@ function test_vacuum()\\n   var stmt = createStatement(\\\"VACUUM;\\\");\\n   stmt.executeStep();\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n var tests = [test_vacuum];\\ndiff --git a/storage/test/unit/test_like.js b/storage/test/unit/test_like.js\\nindex 8f69312..aae25f3 100644\\n--- a/storage/test/unit/test_like.js\\n+++ b/storage/test/unit/test_like.js\\n@@ -46,40 +46,51 @@ function setup()\\n \\n   var stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('a')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('ab')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('abc')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('abcd')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('acd')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('abd')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('bc')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('bcd')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('xyz')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('ABC')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('CDE')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('ABC abc xyz')\\\");\\n   stmt.execute();\\n-  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_count()\\n@@ -88,6 +99,7 @@ function test_count()\\n   do_check_true(stmt.executeStep());\\n   do_check_eq(stmt.getInt32(0), 12);\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_like_1()\\n@@ -100,6 +112,7 @@ function test_like_1()\\n   do_check_true(solutions.indexOf(stmt.getString(0)) != -1);\\n   do_check_false(stmt.executeStep());\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_like_2()\\n@@ -112,6 +125,7 @@ function test_like_2()\\n   do_check_true(solutions.indexOf(stmt.getString(0)) != -1);\\n   do_check_false(stmt.executeStep());\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n     \\n function test_like_3()\\n@@ -124,6 +138,7 @@ function test_like_3()\\n   do_check_true(solutions.indexOf(stmt.getString(0)) != -1);\\n   do_check_false(stmt.executeStep());\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n    \\n function test_like_4()\\n@@ -140,6 +155,7 @@ function test_like_4()\\n   do_check_true(solutions.indexOf(stmt.getString(0)) != -1);\\n   do_check_false(stmt.executeStep());\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_like_5()\\n@@ -152,6 +168,7 @@ function test_like_5()\\n   do_check_true(solutions.indexOf(stmt.getString(0)) != -1);\\n   do_check_false(stmt.executeStep());\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_like_6()\\n@@ -164,6 +181,7 @@ function test_like_6()\\n   do_check_true(solutions.indexOf(stmt.getString(0)) != -1);\\n   do_check_false(stmt.executeStep());\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n     \\n function test_like_7()\\n@@ -180,6 +198,7 @@ function test_like_7()\\n   do_check_true(solutions.indexOf(stmt.getString(0)) != -1);\\n   do_check_false(stmt.executeStep());\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_like_8()\\n@@ -192,6 +211,7 @@ function test_like_8()\\n   do_check_true(solutions.indexOf(stmt.getString(0)) != -1);\\n   do_check_false(stmt.executeStep());\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n     \\n var tests = [test_count, test_like_1, test_like_2, test_like_3, test_like_4, \\ndiff --git a/storage/test/unit/test_like_escape.js b/storage/test/unit/test_like_escape.js\\nindex 96e8c22..c1dfa54 100644\\n--- a/storage/test/unit/test_like_escape.js\\n+++ b/storage/test/unit/test_like_escape.js\\n@@ -44,11 +44,13 @@ function setup()\\n \\n   var stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES ('foo/bar_baz%20cheese')\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"INSERT INTO t1 (x) VALUES (?1)\\\");\\n   // insert LATIN_ae, but search on LATIN_AE\\n   stmt.bindStringParameter(0, \\\"foo%20\\\" + LATIN1_ae + \\\"/_bar\\\");\\n   stmt.execute();\\n+  stmt.finalize();\\n }\\n     \\n function test_escape_for_like_ascii()\\n@@ -61,6 +63,7 @@ function test_escape_for_like_ascii()\\n   stmt.bindStringParameter(0, \\\"%\\\" + paramForLike + \\\"%\\\"); \\n   stmt.executeStep();\\n   do_check_eq(\\\"foo/bar_baz%20cheese\\\", stmt.getString(0));\\n+  stmt.finalize();\\n }\\n \\n function test_escape_for_like_non_ascii()\\n@@ -73,6 +76,7 @@ function test_escape_for_like_non_ascii()\\n   stmt.bindStringParameter(0, \\\"%\\\" + paramForLike + \\\"%\\\");\\n   stmt.executeStep();\\n   do_check_eq(\\\"foo%20\\\" + LATIN1_ae + \\\"/_bar\\\", stmt.getString(0));\\n+  stmt.finalize();\\n }\\n \\n var tests = [test_escape_for_like_ascii, test_escape_for_like_non_ascii];\\ndiff --git a/storage/test/unit/test_storage_aggregates.js b/storage/test/unit/test_storage_aggregates.js\\nindex 5ca2515..84993df 100644\\n--- a/storage/test/unit/test_storage_aggregates.js\\n+++ b/storage/test/unit/test_storage_aggregates.js\\n@@ -48,6 +48,7 @@ function setup()\\n     stmt.execute();\\n   }\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n var testSquareAndSumFunction = {\\n@@ -113,6 +114,7 @@ function test_aggregate_call()\\n   while(stmt.executeStep());\\n   do_check_eq(testNums.length, testSquareAndSumFunction.calls);\\n   testSquareAndSumFunction.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_aggregate_result()\\n@@ -125,6 +127,7 @@ function test_aggregate_result()\\n   stmt.executeStep();\\n   do_check_eq(sas, stmt.getInt32(0));\\n   testSquareAndSumFunction.reset();\\n+  stmt.finalize();\\n }\\n \\n var tests = [test_aggregate_registration, test_aggregate_no_double_registration,\\ndiff --git a/storage/test/unit/test_storage_function.js b/storage/test/unit/test_storage_function.js\\nindex 1395205..9634582 100644\\n--- a/storage/test/unit/test_storage_function.js\\n+++ b/storage/test/unit/test_storage_function.js\\n@@ -48,6 +48,7 @@ function setup()\\n     stmt.execute();\\n   }\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n var testSquareFunction = {\\n@@ -96,6 +97,7 @@ function test_function_call()\\n   while(stmt.executeStep());\\n   do_check_eq(testNums.length, testSquareFunction.calls);\\n   testSquareFunction.calls = 0;\\n+  stmt.finalize();\\n }\\n \\n function test_function_result()\\n@@ -104,6 +106,7 @@ function test_function_result()\\n   stmt.executeStep();\\n   do_check_eq(42*42, stmt.getInt32(0));\\n   testSquareFunction.calls = 0;\\n+  stmt.finalize();\\n }\\n \\n var tests = [test_function_registration, test_function_no_double_registration,\\ndiff --git a/storage/test/unit/test_storage_progresshandler.js b/storage/test/unit/test_storage_progresshandler.js\\nindex 93ea3bc..a8ff126 100644\\n--- a/storage/test/unit/test_storage_progresshandler.js\\n+++ b/storage/test/unit/test_storage_progresshandler.js\\n@@ -50,6 +50,7 @@ function setup()\\n   }\\n   stmt.reset();\\n   msc.commitTransaction();\\n+  stmt.finalize();\\n }\\n \\n var testProgressHandler = {\\n@@ -92,6 +93,7 @@ function test_handler_call()\\n     \\\"SELECT SUM(t1.num * t2.num) FROM handler_tests AS t1, handler_tests AS t2\\\");\\n   while(stmt.executeStep());\\n   do_check_true(testProgressHandler.calls > 0);\\n+  stmt.finalize();\\n }\\n \\n function test_handler_abort()\\n@@ -102,13 +104,22 @@ function test_handler_abort()\\n   // Some long-executing request\\n   var stmt = createStatement(\\n     \\\"SELECT SUM(t1.num * t2.num) FROM handler_tests AS t1, handler_tests AS t2\\\");\\n+\\n+  const SQLITE_INTERRUPT = 9;\\n   try {\\n     while(stmt.executeStep());\\n     do_throw(\\\"We shouldn't get here!\\\");\\n   } catch (e) {\\n     do_check_eq(Cr.NS_ERROR_ABORT, e.result);\\n-    // Magic value: SQLITE_INTERRUPT\\n-    do_check_eq(msc.lastError, 9);\\n+    do_check_eq(SQLITE_INTERRUPT, msc.lastError);\\n+  }\\n+  try {\\n+    stmt.finalize();\\n+    do_throw(\\\"We shouldn't get here!\\\");\\n+  } catch (e) {\\n+    // finalize should return the error code since we encountered an error\\n+    do_check_eq(Cr.NS_ERROR_ABORT, e.result);\\n+    do_check_eq(SQLITE_INTERRUPT, msc.lastError);\\n   }\\n }\\n \\ndiff --git a/storage/test/unit/test_storage_statement.js b/storage/test/unit/test_storage_statement.js\\nindex 7a1b46e..651c713 100644\\n--- a/storage/test/unit/test_storage_statement.js\\n+++ b/storage/test/unit/test_storage_statement.js\\n@@ -46,18 +46,24 @@ function test_parameterCount_none()\\n {\\n   var stmt = createStatement(\\\"SELECT * FROM test\\\");\\n   do_check_eq(0, stmt.parameterCount);\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_parameterCount_one()\\n {\\n   var stmt = createStatement(\\\"SELECT * FROM test WHERE id = ?1\\\");\\n   do_check_eq(1, stmt.parameterCount);\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getParameterName()\\n {\\n   var stmt = createStatement(\\\"SELECT * FROM test WHERE id = :id\\\");\\n   do_check_eq(\\\":id\\\", stmt.getParameterName(0));\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getParameterIndex_different()\\n@@ -65,18 +71,24 @@ function test_getParameterIndex_different()\\n   var stmt = createStatement(\\\"SELECT * FROM test WHERE id = :id OR name = :name\\\");\\n   do_check_eq(0, stmt.getParameterIndex(\\\":id\\\"));\\n   do_check_eq(1, stmt.getParameterIndex(\\\":name\\\"));\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getParameterIndex_same()\\n {\\n   var stmt = createStatement(\\\"SELECT * FROM test WHERE id = @test OR name = @test\\\");\\n   do_check_eq(0, stmt.getParameterIndex(\\\"@test\\\"));\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_columnCount()\\n {\\n   var stmt = createStatement(\\\"SELECT * FROM test WHERE id = ?1 OR name = ?2\\\");\\n   do_check_eq(2, stmt.columnCount);\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getColumnName()\\n@@ -84,6 +96,8 @@ function test_getColumnName()\\n   var stmt = createStatement(\\\"SELECT name, id FROM test\\\");\\n   do_check_eq(\\\"id\\\", stmt.getColumnName(1));\\n   do_check_eq(\\\"name\\\", stmt.getColumnName(0));\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getColumnIndex_same_case()\\n@@ -91,6 +105,8 @@ function test_getColumnIndex_same_case()\\n   var stmt = createStatement(\\\"SELECT name, id FROM test\\\");\\n   do_check_eq(0, stmt.getColumnIndex(\\\"name\\\"));\\n   do_check_eq(1, stmt.getColumnIndex(\\\"id\\\"));\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getColumnIndex_different_case()\\n@@ -108,12 +124,16 @@ function test_getColumnIndex_different_case()\\n   } catch (e) {\\n     do_check_eq(Cr.NS_ERROR_INVALID_ARG, e.result);\\n   }\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_state_ready()\\n {\\n   var stmt = createStatement(\\\"SELECT name, id FROM test\\\");\\n   do_check_eq(Ci.mozIStorageStatement.MOZ_STORAGE_STATEMENT_READY, stmt.state);\\n+  stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_state_executing()\\n@@ -121,6 +141,7 @@ function test_state_executing()\\n   var stmt = createStatement(\\\"INSERT INTO test (name) VALUES ('foo')\\\");\\n   stmt.execute();\\n   stmt.execute();\\n+  stmt.finalize();\\n \\n   stmt = createStatement(\\\"SELECT name, id FROM test\\\");\\n   stmt.executeStep();\\n@@ -131,6 +152,15 @@ function test_state_executing()\\n               stmt.state);\\n   stmt.reset();\\n   do_check_eq(Ci.mozIStorageStatement.MOZ_STORAGE_STATEMENT_READY, stmt.state);\\n+  stmt.finalize();\\n+}\\n+\\n+function test_state_after_finalize()\\n+{\\n+  var stmt = createStatement(\\\"SELECT name, id FROM test\\\");\\n+  stmt.executeStep();\\n+  stmt.finalize();\\n+  do_check_eq(Ci.mozIStorageStatement.MOZ_STORAGE_STATEMENT_INVALID, stmt.state);\\n }\\n \\n var tests = [test_parameterCount_none, test_parameterCount_one,\\n@@ -138,7 +168,7 @@ var tests = [test_parameterCount_none, test_parameterCount_one,\\n              test_getParameterIndex_same, test_columnCount,\\n              test_getColumnName, test_getColumnIndex_same_case,\\n              test_getColumnIndex_different_case, test_state_ready,\\n-             test_state_executing];\\n+             test_state_executing, test_state_after_finalize];\\n \\n function run_test()\\n {\\ndiff --git a/storage/test/unit/test_storage_statement_wrapper.js b/storage/test/unit/test_storage_statement_wrapper.js\\nindex 7094149..8649965 100644\\n--- a/storage/test/unit/test_storage_statement_wrapper.js\\n+++ b/storage/test/unit/test_storage_statement_wrapper.js\\n@@ -59,16 +59,19 @@ function test_binding_params()\\n   const name = \\\"foo\\\";\\n   stmt.params.name = name;\\n   stmt.execute();\\n+  stmt.statement.finalize();\\n \\n   stmt = createStatement(\\\"SELECT COUNT(*) AS number FROM test\\\");\\n   do_check_true(stmt.step());\\n   do_check_eq(1, stmt.row.number);\\n   stmt.reset();\\n+  stmt.statement.finalize();\\n \\n   stmt = createStatement(\\\"SELECT name FROM test WHERE id = 1\\\");\\n   do_check_true(stmt.step());\\n   do_check_eq(name, stmt.row.name);\\n   stmt.reset();\\n+  stmt.statement.finalize();\\n }\\n \\n function test_binding_multiple_params()\\n@@ -78,17 +81,20 @@ function test_binding_multiple_params()\\n   const name = \\\"me\\\";\\n   stmt.params.name = name;\\n   stmt.execute();\\n+  stmt.statement.finalize();\\n \\n   stmt = createStatement(\\\"SELECT COUNT(*) AS number FROM test\\\");\\n   do_check_true(stmt.step());\\n   do_check_eq(2, stmt.row.number);\\n   stmt.reset();\\n+  stmt.statement.finalize();\\n \\n   stmt = createStatement(\\\"SELECT name, alt_name FROM test WHERE id = 2\\\");\\n   do_check_true(stmt.step());\\n   do_check_eq(name, stmt.row.name);\\n   do_check_eq(name, stmt.row.alt_name);\\n   stmt.reset();\\n+  stmt.statement.finalize();\\n }\\n \\n var tests = [test_binding_params, test_binding_multiple_params];\\ndiff --git a/storage/test/unit/test_storage_value_array.js b/storage/test/unit/test_storage_value_array.js\\nindex 14c3edf..672e7e2d 100644\\n--- a/storage/test/unit/test_storage_value_array.js\\n+++ b/storage/test/unit/test_storage_value_array.js\\n@@ -55,6 +55,7 @@ function setup()\\n   stmt.execute();\\n \\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getIsNull_for_null()\\n@@ -66,6 +67,7 @@ function test_getIsNull_for_null()\\n   do_check_true(stmt.getIsNull(0)); // null field\\n   do_check_true(stmt.getIsNull(1)); // data is null if size is 0\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getIsNull_for_non_null()\\n@@ -77,6 +79,7 @@ function test_getIsNull_for_non_null()\\n   do_check_false(stmt.getIsNull(0));\\n   do_check_false(stmt.getIsNull(1));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_value_type_null()\\n@@ -88,6 +91,7 @@ function test_value_type_null()\\n   do_check_eq(Ci.mozIStorageValueArray.VALUE_TYPE_NULL,\\n               stmt.getTypeOfIndex(0));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_value_type_integer()\\n@@ -99,6 +103,7 @@ function test_value_type_integer()\\n   do_check_eq(Ci.mozIStorageValueArray.VALUE_TYPE_INTEGER,\\n               stmt.getTypeOfIndex(0));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_value_type_float()\\n@@ -110,6 +115,7 @@ function test_value_type_float()\\n   do_check_eq(Ci.mozIStorageValueArray.VALUE_TYPE_FLOAT,\\n               stmt.getTypeOfIndex(0));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_value_type_text()\\n@@ -121,6 +127,7 @@ function test_value_type_text()\\n   do_check_eq(Ci.mozIStorageValueArray.VALUE_TYPE_TEXT,\\n               stmt.getTypeOfIndex(0));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_value_type_blob()\\n@@ -132,6 +139,7 @@ function test_value_type_blob()\\n   do_check_eq(Ci.mozIStorageValueArray.VALUE_TYPE_BLOB,\\n               stmt.getTypeOfIndex(0));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_numEntries_one()\\n@@ -142,6 +150,7 @@ function test_numEntries_one()\\n \\n   do_check_eq(1, stmt.numEntries);\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_numEntries_all()\\n@@ -152,6 +161,7 @@ function test_numEntries_all()\\n \\n   do_check_eq(5, stmt.numEntries);\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getInt()\\n@@ -163,6 +173,7 @@ function test_getInt()\\n   do_check_eq(2, stmt.getInt32(0));\\n   do_check_eq(2, stmt.getInt64(0));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getDouble()\\n@@ -173,6 +184,7 @@ function test_getDouble()\\n \\n   do_check_eq(1.23, stmt.getDouble(0));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getUTF8String()\\n@@ -183,6 +195,7 @@ function test_getUTF8String()\\n \\n   do_check_eq(\\\"foo\\\", stmt.getUTF8String(0));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getString()\\n@@ -193,6 +206,7 @@ function test_getString()\\n \\n   do_check_eq(\\\"\\\", stmt.getString(0));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_getBlob()\\n@@ -208,6 +222,7 @@ function test_getBlob()\\n   do_check_eq(1, arr.value[0]);\\n   do_check_eq(2, arr.value[1]);\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n var tests = [test_getIsNull_for_null, test_getIsNull_for_non_null,\\ndiff --git a/storage/test/unit/test_unicode.js b/storage/test/unit/test_unicode.js\\nindex 889782c..003e748 100644\\n--- a/storage/test/unit/test_unicode.js\\n+++ b/storage/test/unit/test_unicode.js\\n@@ -57,6 +57,7 @@ function setup()\\n   stmt.bindStringParameter(0, LATIN1_ae);\\n   stmt.bindInt32Parameter(1, 4);\\n   stmt.execute();\\n+  stmt.finalize();\\n }\\n \\n function test_upper_ascii()\\n@@ -66,6 +67,7 @@ function test_upper_ascii()\\n   do_check_eq(\\\"A\\\", stmt.getString(0));\\n   do_check_eq(2, stmt.getInt32(1));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_upper_non_ascii()\\n@@ -76,6 +78,7 @@ function test_upper_non_ascii()\\n   do_check_eq(LATIN1_AE, stmt.getString(0));\\n   do_check_eq(1, stmt.getInt32(1));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_lower_ascii()\\n@@ -85,6 +88,7 @@ function test_lower_ascii()\\n   do_check_eq(\\\"b\\\", stmt.getString(0));\\n   do_check_eq(3, stmt.getInt32(1));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_lower_non_ascii()\\n@@ -95,6 +99,7 @@ function test_lower_non_ascii()\\n   do_check_eq(LATIN1_ae, stmt.getString(0));\\n   do_check_eq(4, stmt.getInt32(1));\\n   stmt.reset();\\n+  stmt.finalize();\\n }\\n \\n function test_like_search_different()\\n@@ -103,6 +108,7 @@ function test_like_search_different()\\n   stmt.bindStringParameter(0, LATIN1_AE);\\n   do_check_true(stmt.executeStep());\\n   do_check_eq(2, stmt.getInt32(0));\\n+  stmt.finalize();\\n }\\n \\n function test_like_search_same()\\n@@ -111,6 +117,7 @@ function test_like_search_same()\\n   stmt.bindStringParameter(0, LATIN1_ae);\\n   do_check_true(stmt.executeStep());\\n   do_check_eq(2, stmt.getInt32(0));\\n+  stmt.finalize();\\n }\\n \\n var tests = [test_upper_ascii, test_upper_non_ascii, test_lower_ascii,\\n\""}