{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basdaab310\""},"diff":"\"daab310 308396 - UE improvements for tabbed browsing in response to usability studies conducted. In particular, add close buttons to tabs, improve the reselection behavior of new tabs opened especially in single window mode, simplify the preferences available for tabs, and improve the visual appearance of keyboard-focused tabs. r=mconnor.\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 70f7861..5c9ed43 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -43,6 +43,8 @@\\n <!DOCTYPE bindings [\\n <!ENTITY % tabBrowserDTD SYSTEM \\\"chrome://global/locale/tabbrowser.dtd\\\" >\\n %tabBrowserDTD;\\n+<!ENTITY % globalDTD SYSTEM \\\"chrome://global/locale/global.dtd\\\">\\n+%globalDTD;\\n ]>\\n \\n <bindings id=\\\"tabBrowserBindings\\\"\\n@@ -67,7 +69,7 @@\\n                   ondragover=\\\"nsDragAndDrop.dragOver(event, this.parentNode.parentNode); event.stopPropagation();\\\"\\n                   ondragdrop=\\\"nsDragAndDrop.drop(event, this.parentNode.parentNode); event.stopPropagation();\\\"\\n                   ondragexit=\\\"nsDragAndDrop.dragExit(event, this.parentNode.parentNode); event.stopPropagation();\\\">\\n-          <xul:tooltip onpopupshowing=\\\"event.preventBubble(); if (document.tooltipNode.hasAttribute('label')) { this.setAttribute('label', document.tooltipNode.getAttribute('label')); return true; } return false;\\\"/>\\n+          <xul:tooltip onpopupshowing=\\\"return this.parentNode.parentNode.parentNode.createTooltip(event);\\\"/>\\n           <xul:menupopup anonid=\\\"tabContextMenu\\\" onpopupshowing=\\\"this.parentNode.parentNode.parentNode.updatePopupMenu(this);\\\">\\n             <xul:menuitem label=\\\"&newTab.label;\\\" accesskey=\\\"&newTab.accesskey;\\\"\\n                           xbl:inherits=\\\"oncommand=onnewtab\\\"/>\\n@@ -90,8 +92,7 @@\\n                                      tabbrowser.removeTab(tabbrowser.mContextTab);\\\"/>\\n           </xul:menupopup>\\n \\n-          <xul:tabs class=\\\"tabbrowser-tabs\\\" closebutton=\\\"true\\\" flex=\\\"1\\\"\\n-                    setfocus=\\\"false\\\"\\n+          <xul:tabs class=\\\"tabbrowser-tabs\\\" flex=\\\"1\\\" setfocus=\\\"false\\\"\\n                     onclick=\\\"this.parentNode.parentNode.parentNode.onTabClick(event);\\\"\\n                     xbl:inherits=\\\"onnewtab\\\"\\n                     ondblclick=\\\"this.parentNode.parentNode.parentNode.onTabBarDblClick(event);\\\"\\n@@ -1010,7 +1011,8 @@\\n         <parameter name=\\\"aLoadInBackground\\\"/>\\n         <body>\\n           <![CDATA[\\n-            var tab = this.addTab(aURI, aReferrerURI, aCharset, aPostData);\\n+            var owner = aLoadInBackground ? null : this.selectedTab;\\n+            var tab = this.addTab(aURI, aReferrerURI, aCharset, aPostData, owner);\\n             var bgLoad = (typeof(aLoadInBackground) != \\\"undefined\\\") ? aLoadInBackground :\\n                          this.mPrefs.getBoolPref(\\\"browser.tabs.loadInBackground\\\");\\n             // Set newly selected tab after quick timeout, otherwise hideous focus problems\\n@@ -1021,16 +1023,55 @@\\n               }\\n               setTimeout(selectNewForegroundTab, 0, getBrowser(), tab);\\n             }\\n+            if (!bgLoad)\\n+              this.selectedTab = tab;\\n             return tab;\\n          ]]>\\n         </body>\\n       </method>\\n+      \\n+      <method name=\\\"loadTabs\\\">\\n+        <parameter name=\\\"aURIs\\\"/>\\n+        <parameter name=\\\"aLoadInBackground\\\"/>\\n+        <parameter name=\\\"aReplace\\\"/>\\n+        <body><![CDATA[\\n+          // The tab selected after this new tab is closed (i.e. the new tab's \\n+          // \\\"owner\\\") is the next adjacent tab (i.e. not the previously viewed tab)\\n+          // when several urls are opened here (i.e. closing the first should select\\n+          // the next of many URLs opened) or if the pref to have UI links opened in\\n+          // the background is set (i.e. the link is not being opened modally)\\n+          //\\n+          // i.e.\\n+          //    Number of URLs    Load UI Links in BG       Focus Last Viewed?\\n+          //    == 1              false                     YES\\n+          //    == 1              true                      NO\\n+          //    > 1               false/true                NO\\n+          var owner = (aURIs.length > 1) || aLoadInBackground ? null : gBrowser.selectedTab;\\n+          var firstTabAdded = null;\\n+          if (aReplace) \\n+            this.loadURI(aURIs[0], null, null);\\n+          else\\n+            firstTabAdded = gBrowser.addTab(aURIs[0], null, null, null, owner);\\n+\\n+          for (var i = 1; i < aURIs.length; ++i)\\n+            gBrowser.addTab(aURIs[i]);\\n+          if (!aLoadInBackground) {\\n+            if (firstTabAdded) {\\n+              // .selectedTab setter focuses the content area\\n+              this.selectedTab = firstTabAdded;\\n+            }\\n+            else \\n+              window.content.focus();\\n+          }\\n+        ]]></body>\\n+      </method>\\n \\n       <method name=\\\"addTab\\\">\\n         <parameter name=\\\"aURI\\\"/>\\n         <parameter name=\\\"aReferrerURI\\\"/>\\n         <parameter name=\\\"aCharset\\\"/>\\n         <parameter name=\\\"aPostData\\\"/>\\n+        <parameter name=\\\"aOwner\\\"/>\\n         <body>\\n           <![CDATA[\\n             if (!this.mTabbedMode)\\n@@ -1053,7 +1094,23 @@\\n             t.setAttribute(\\\"flex\\\", \\\"100\\\");\\n             t.setAttribute(\\\"validate\\\", \\\"never\\\");\\n             t.setAttribute(\\\"onerror\\\", \\\"this.parentNode.parentNode.parentNode.parentNode.addToMissedIconCache(this.getAttribute('image')); this.removeAttribute('image');\\\");\\n+            t.className = \\\"tabbrowser-tab\\\";\\n             this.mTabContainer.appendChild(t);\\n+            // If this new tab is owned by another, assert that relationship\\n+            if (aOwner !== undefined && aOwner !== null) {\\n+              t.owner = aOwner;\\n+              \\n+              var self = this;\\n+              function attrChanged(event) {\\n+                if (event.attrName == \\\"selectedIndex\\\" &&\\n+                    event.prevValue != event.newValue)\\n+                  self.resetOwner(parseInt(event.prevValue));\\n+              }\\n+              if (!this.mTabChangedListenerAdded) {\\n+                this.mTabBox.addEventListener(\\\"DOMAttrModified\\\", attrChanged, false);\\n+                this.mTabChangedListenerAdded = true;\\n+              }\\n+            }\\n \\n             var b = document.createElementNS(\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n                                              \\\"browser\\\");\\n@@ -1190,6 +1247,20 @@\\n           ]]>\\n         </body>\\n       </method>\\n+      \\n+      <method name=\\\"resetOwner\\\">\\n+        <parameter name=\\\"oldIndex\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            // Reset the owner property, since we're leaving the modally opened\\n+            // tab for another.\\n+            if (oldIndex < this.mTabContainer.childNodes.length) { \\n+              var tab = this.mTabContainer.childNodes[oldIndex];\\n+              tab.owner = null;\\n+            }\\n+          ]]>\\n+        </body>\\n+      </method>\\n \\n       <method name=\\\"removeTab\\\">\\n         <parameter name=\\\"aTab\\\"/>\\n@@ -1255,15 +1326,32 @@\\n               newIndex = currentIndex-1;\\n             else if (currentIndex < index)\\n               newIndex = currentIndex;\\n-            else if (index == l - 1)\\n-              newIndex = index-1;\\n-            else\\n-              newIndex = index;\\n+            else {\\n+              if (\\\"owner\\\" in aTab && aTab.owner &&\\n+                  this.mPrefs.getBoolPref(\\\"browser.tabs.selectOwnerOnClose\\\")) {\\n+                for (i = 0; i < this.mTabContainer.childNodes.length; ++i) {\\n+                  var tab = this.mTabContainer.childNodes[i];\\n+                  if (tab == aTab.owner) {\\n+                    newIndex = i;\\n+                    break;\\n+                  }\\n+                }\\n+              }\\n+              if (newIndex == -1)\\n+                newIndex = (index == l - 1) ? index - 1 : index;\\n+            }\\n \\n             var oldTab = aTab;\\n \\n             // clean up the before/afterselected attributes before removing the tab\\n             oldTab.selected = false;\\n+            \\n+            // Remove this tab as the owner of any other tabs, since it's going away.\\n+            for (i = 0; i < this.mTabContainer.childNodes.length; ++i) {\\n+              tab = this.mTabContainer.childNodes[i];\\n+              if (tab.owner == oldTab)\\n+                tab.owner = null;\\n+            }\\n \\n             // Because of the way XBL works (fields just set JS\\n             // properties on the element) and the code we have in place\\n@@ -1339,7 +1427,7 @@\\n           ]]>\\n         </body>\\n       </method>\\n-\\n+      \\n       <method name=\\\"addProgressListener\\\">\\n         <parameter name=\\\"aListener\\\"/>\\n         <parameter name=\\\"aMask\\\"/>\\n@@ -1456,7 +1544,8 @@\\n         <parameter name=\\\"aDragAction\\\"/>\\n         <body>\\n         <![CDATA[\\n-          if (aEvent.target.localName == \\\"tab\\\") {\\n+          if (aEvent.target.localName == \\\"tab\\\" && \\n+              aEvent.originalTarget.localName != \\\"toolbarbutton\\\") {\\n             aXferData.data = new TransferData();\\n             \\n             var URI = this.getBrowserForTab(aEvent.target).currentURI;\\n@@ -1548,7 +1637,7 @@\\n               }\\n               else {\\n                 // Load in an existing tab.\\n-                var tab = aEvent.originalTarget;\\n+                var tab = aEvent.target;\\n                 this.getBrowserForTab(tab).loadURI(getShortcutOrURI(url));\\n \\n                 if (this.mCurrentTab != tab && !bgLoad)\\n@@ -2045,6 +2134,27 @@\\n \\n       <property name=\\\"forceSyncURLBarUpdate\\\"\\n                 onget=\\\"return this.mModalDialogShowing;\\\"/>\\n+                \\n+      <method name=\\\"createTooltip\\\">\\n+        <parameter name=\\\"event\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            event.preventBubble(); \\n+            var tn = document.tooltipNode;\\n+            if (tn.localName != \\\"tab\\\")\\n+              return false; // Not a tab, so cancel the tooltip\\n+            if (\\\"mOverCloseButton\\\" in tn && tn.mOverCloseButton) {\\n+              event.target.setAttribute(\\\"label\\\", tn.getAttribute(\\\"closetabtext\\\"));\\n+              return true;\\n+            }\\n+            if (tn.hasAttribute(\\\"label\\\")) { \\n+              event.target.setAttribute(\\\"label\\\", tn.getAttribute(\\\"label\\\")); \\n+              return true; \\n+            } \\n+            return false;                          \\n+          ]]>\\n+        </body>\\n+      </method>\\n \\n       <constructor>\\n         <![CDATA[\\n@@ -2136,5 +2246,150 @@\\n       </handler>\\n     </handlers>\\n   </binding>\\n+  \\n+  <binding id=\\\"tabbrowser-tabs\\\" \\n+           extends=\\\"chrome://global/content/bindings/tabbox.xml#tabs\\\">\\n+    <content>\\n+      <xul:hbox flex=\\\"1\\\" style=\\\"min-width: 1px;\\\">\\n+        <children includes=\\\"tab\\\"/>\\n+        <xul:spacer class=\\\"tabs-right\\\" flex=\\\"1\\\"/>\\n+      </xul:hbox>\\n+    </content>\\n+    <implementation implements=\\\"nsIObserver\\\">\\n+      <constructor>\\n+        var pb2 = \\n+            Components.classes['@mozilla.org/preferences-service;1'].\\n+            getService(Components.interfaces.nsIPrefBranch2);\\n+        try {\\n+          this.mTabClipWidth = pb2.getIntPref(\\\"browser.tabs.tabClipWidth\\\");\\n+        }\\n+        catch (e) {\\n+        }\\n+        \\n+        this._updateDisableBackgroundClose();\\n+        pb2.addObserver(\\\"browser.tabs.disableBackgroundClose\\\", this, false);\\n+      \\n+        var self = this;\\n+        function onResize() {\\n+          self.adjustCloseButtons(1);\\n+        }\\n+        window.addEventListener(\\\"resize\\\", onResize, false);\\n+      </constructor>\\n+      \\n+      <destructor>\\n+        var pb2 = \\n+            Components.classes[\\\"@mozilla.org/preferences-service;1\\\"].\\n+            getService(Components.interfaces.nsIPrefBranch2);\\n+        pb2.removeObserver(\\\"browser.tabs.disableBackgroundClose\\\", this);\\n+      </destructor>\\n+      \\n+      <method name=\\\"_updateDisableBackgroundClose\\\">\\n+        <body><![CDATA[\\n+          var prefs = \\n+              Components.classes['@mozilla.org/preferences-service;1'].\\n+              getService(Components.interfaces.nsIPrefBranch);\\n+          try {\\n+            if (prefs.getBoolPref(\\\"browser.tabs.disableBackgroundClose\\\"))\\n+              this.setAttribute(\\\"disablebackgroundclose\\\", \\\"true\\\");\\n+            else\\n+              this.removeAttribute(\\\"disablebackgroundclose\\\");\\n+          }\\n+          catch (e) {\\n+            this.setAttribute(\\\"disablebackgroundclose\\\", \\\"true\\\");\\n+          }\\n+        ]]></body>\\n+      </method>\\n+      <method name=\\\"observe\\\">\\n+        <parameter name=\\\"subject\\\"/>\\n+        <parameter name=\\\"topic\\\"/>\\n+        <parameter name=\\\"data\\\"/>\\n+        <body><![CDATA[\\n+          if (topic == \\\"nsPref:changed\\\")\\n+            this._updateDisableBackgroundClose();\\n+        ]]></body>\\n+      </method>\\n+      <field name=\\\"mTabClipWidth\\\">140</field>\\n+      <method name=\\\"adjustCloseButtons\\\">\\n+        <parameter name=\\\"aNumTabs\\\"/>\\n+        <body><![CDATA[\\n+          // aNumTabs is the number of tabs that need to be present to cause \\n+          // the close button on the last visible tab to disappear when the\\n+          // pref for \\\"always show the tab bar, even when only one tab is open\\\"\\n+          // is set. \\n+          // When tabs are being removed from the tab strip, and the number of\\n+          // open tabs approaches 1 (i.e. when the number of open tabs is 2 \\n+          // and one is removed), we need to set an attribute on the tabstrip\\n+          // that will cause the close button on the last item to be hidden. \\n+          // When tabs are being added to the tab strip - the number of open\\n+          // tabs is increasing (i.e. the number of open tabs is 1 and one is\\n+          // added) then we need to remove the attribute on the tab strip which\\n+          // will cause the close button to be shown on all tabs. \\n+          try {\\n+            if (this.childNodes.length == aNumTabs) \\n+              this.setAttribute(\\\"singlechild\\\", \\\"true\\\");\\n+            else\\n+              this.removeAttribute(\\\"singlechild\\\");\\n+            \\n+            var width = this.firstChild.boxObject.width;\\n+            // 0 width is an invalid value and indicates an item without display, \\n+            // so ignore.\\n+            if (width > this.mTabClipWidth || width == 0)\\n+              this.removeAttribute(\\\"tiny\\\");\\n+            else\\n+              this.setAttribute(\\\"tiny\\\", \\\"true\\\");\\n+          }\\n+          catch (e) {\\n+          }\\n+        ]]></body>\\n+      </method>\\n+    </implementation>\\n+    <handlers>\\n+      <handler event=\\\"DOMNodeInserted\\\" action=\\\"this.adjustCloseButtons(1);\\\"/>\\n+      <handler event=\\\"DOMNodeRemoved\\\" action=\\\"this.adjustCloseButtons(2);\\\"/>\\n+    </handlers>\\n+  </binding>  \\n+  \\n+  <binding id=\\\"tabbrowser-tab\\\" display=\\\"xul:box\\\"\\n+           extends=\\\"chrome://global/content/bindings/tabbox.xml#tab\\\">\\n+    <content chromedir=\\\"&locale.dir;\\\" mousethrough=\\\"always\\\" \\n+             closetabtext=\\\"&closeTab.label;\\\">\\n+      <xul:hbox class=\\\"tab-middle box-inherit\\\" xbl:inherits=\\\"align,dir,pack,orient,selected\\\" flex=\\\"1\\\">\\n+        <xul:image class=\\\"tab-icon\\\" xbl:inherits=\\\"validate,src=image\\\"/>\\n+        <xul:label class=\\\"tab-text\\\" xbl:inherits=\\\"value=label,accesskey,crop,disabled\\\" flex=\\\"1\\\"/>\\n+      </xul:hbox>\\n+      <xul:image anonid=\\\"close-button-placeholder\\\" class=\\\"tab-close-button-placeholder\\\"/>\\n+      <xul:toolbarbutton anonid=\\\"close-button\\\" class=\\\"tab-close-button\\\"/>\\n+    </content>\\n+    \\n+    <implementation>\\n+      <field name=\\\"mOverCloseButton\\\">false</field>\\n+    </implementation>\\n+\\n+    <handlers>\\n+      <handler event=\\\"mouseover\\\">\\n+        var anonid = event.originalTarget.getAttribute(\\\"anonid\\\");\\n+        if (anonid == \\\"close-button\\\")\\n+          this.mOverCloseButton = true;\\n+      </handler>\\n+      <handler event=\\\"mouseout\\\">\\n+        var anonid = event.originalTarget.getAttribute(\\\"anonid\\\");\\n+        if (anonid == \\\"close-button\\\")\\n+          this.mOverCloseButton = false;\\n+      </handler>\\n+      <handler event=\\\"command\\\">\\n+      <![CDATA[\\n+        var anonid = event.originalTarget.getAttribute(\\\"anonid\\\");\\n+        if (anonid == \\\"close-button\\\")\\n+          this.parentNode.parentNode.parentNode.parentNode.removeTab(this);\\n+      ]]>\\n+      </handler>\\n+      <handler event=\\\"mousedown\\\" button=\\\"0\\\" phase=\\\"capturing\\\">\\n+      <![CDATA[\\n+        if (this.mOverCloseButton)\\n+          event.stopPropagation();\\n+      ]]>\\n+      </handler>\\n+    </handlers>\\n+  </binding>\\n \\n </bindings>\\ndiff --git a/browser/themes/pinstripe/browser/tabbrowser/tabbrowserBindings.xml b/browser/themes/pinstripe/browser/tabbrowser/tabbrowserBindings.xml\\nindex ce85c5e..343b1ae 100644\\n--- a/browser/themes/pinstripe/browser/tabbrowser/tabbrowserBindings.xml\\n+++ b/browser/themes/pinstripe/browser/tabbrowser/tabbrowserBindings.xml\\n@@ -5,17 +5,18 @@\\n    xmlns:xul=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\"\\n    xmlns:xbl=\\\"http://www.mozilla.org/xbl\\\">\\n \\n-  <binding id=\\\"tab\\\" extends=\\\"chrome://global/content/bindings/tabbox.xml#tab\\\">\\n+  <binding id=\\\"tabbrowser-tab\\\" extends=\\\"chrome://global/content/bindings/tabbrowser.xml#tabbrowser-tab\\\">\\n     <content>\\n       <xul:hbox class=\\\"tab-image-left\\\" xbl:inherits=\\\"selected\\\"/>\\n+      <xul:hbox pack=\\\"center\\\" align=\\\"center\\\">\\n+        <xul:image anonid=\\\"close-button-placeholder\\\" class=\\\"tab-close-button-placeholder\\\"/>\\n+      </xul:hbox>\\n+      <xul:toolbarbutton anonid=\\\"close-button\\\" class=\\\"tab-close-button\\\"/>\\n       <xul:hbox flex=\\\"1\\\" class=\\\"tab-image-middle\\\" align=\\\"center\\\" xbl:inherits=\\\"selected\\\">\\n         <xul:stack class=\\\"tab-icon\\\">\\n-\\n-\\t\\t\\t<xul:image xbl:inherits=\\\"validate,src=image\\\" class=\\\"tab-icon-image\\\"/>\\n-\\n-\\t\\t\\t<xul:image class=\\\"tab-extra-status\\\"/>\\n-\\n-\\t\\t</xul:stack>\\n+          <xul:image xbl:inherits=\\\"validate,src=image\\\" class=\\\"tab-icon-image\\\"/>\\n+          <xul:image class=\\\"tab-extra-status\\\"/>\\n+        </xul:stack>\\n         <xul:label flex=\\\"1\\\" xbl:inherits=\\\"value=label,crop,accesskey\\\" crop=\\\"right\\\" class=\\\"tab-text\\\"/>\\n       </xul:hbox>\\n       <xul:hbox class=\\\"tab-image-right\\\" xbl:inherits=\\\"selected\\\"/>\\n@@ -37,8 +38,8 @@\\n     </content>\\n   </binding>\\n   \\n-   <binding id=\\\"tabs-closebutton\\\" \\n-            extends=\\\"chrome://global/content/bindings/tabbox.xml#tabs\\\">\\n+   <binding id=\\\"tabbrowser-tabs\\\"  \\n+            extends=\\\"chrome://global/content/bindings/tabbrowser.xml#tabbrowser-tabs\\\">\\n     <content>\\n       <xul:stack flex=\\\"1\\\" class=\\\"tabs-stack\\\">\\n         <xul:vbox>\\n@@ -54,12 +55,6 @@\\n               <children/>\\n               <xul:spacer class=\\\"tabs-right\\\" flex=\\\"1\\\"/>\\n             </xul:hbox>\\n-            <xul:stack>\\n-              <xul:spacer class=\\\"tabs-right\\\"/>\\n-              <xul:hbox class=\\\"tabs-closebutton-box\\\" align=\\\"center\\\" pack=\\\"end\\\">\\n-                <xul:toolbarbutton class=\\\"tabs-closebutton close-button\\\" xbl:inherits=\\\"disabled=disableclose,oncommand=onclosetab\\\"/>\\n-              </xul:hbox>\\n-            </xul:stack>\\n           </xul:hbox>\\n           <xul:spacer class=\\\"tabs-bottom-spacer\\\"/>\\n         </xul:vbox>\\n\""}