{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas6903fec\""},"diff":"\"6903fec Bug 386477 - XPCOMUtilify nsSetDefaultBrowser. r=mano\\ndiff --git a/browser/components/shell/src/Makefile.in b/browser/components/shell/src/Makefile.in\\nindex 8ef13a3..56d4764 100644\\n--- a/browser/components/shell/src/Makefile.in\\n+++ b/browser/components/shell/src/Makefile.in\\n@@ -83,17 +83,13 @@ ifdef CPPSRCS\\n LIBRARY_NAME = shellservice_s\\n endif\\n \\n+EXTRA_COMPONENTS = nsSetDefaultBrowser.js\\n+\\n include $(topsrcdir)/config/rules.mk\\n \\n DEFINES += -DMOZ_APP_NAME=\\\\\\\"$(MOZ_APP_NAME)\\\\\\\"\\n \\n-JS_SET_BROWSER_COMPONENT = nsSetDefaultBrowser.js\\n-\\n CXXFLAGS += $(TK_CFLAGS)\\n \\n-libs::\\n-\\t$(INSTALL) $(srcdir)/$(JS_SET_BROWSER_COMPONENT) $(DIST)/bin/components\\n-\\n clobber::\\n \\trm -f $(DIST)/lib/$(LIBRARY_NAME).lib\\n-\\trm -f $(DIST)/bin/components/$(JS_SET_BROWSER_COMPONENT)\\ndiff --git a/browser/components/shell/src/nsSetDefaultBrowser.js b/browser/components/shell/src/nsSetDefaultBrowser.js\\nindex a362731..e8ddfca 100644\\n--- a/browser/components/shell/src/nsSetDefaultBrowser.js\\n+++ b/browser/components/shell/src/nsSetDefaultBrowser.js\\n@@ -35,107 +35,38 @@\\n  *\\n  * ***** END LICENSE BLOCK ***** */\\n \\n-/* This file implements the nsICommandLineHandler interface.\\n- *\\n- * This component handles the startup command line argument of the form:\\n- *   -setDefaultBrowser\\n- * by making the current executable the \\\"default browser.\\\"\\n+/* \\n+ * -setDefaultBrowser commandline handler\\n+ * Makes the current executable the \\\"default browser\\\".\\n  */\\n \\n-function nsSetDefaultBrowser() {\\n-}\\n-\\n-nsSetDefaultBrowser.prototype = {\\n-  /* nsISupports */\\n-  QueryInterface: function nsSetDefault_QI(iid) {\\n-    if (!iid.equals(Components.interfaces.nsICommandLineHandler) &&\\n-        !iid.equals(Components.interfaces.nsISupports))\\n-      throw Components.results.NS_ERROR_NO_INTERFACE;\\n+const Cc = Components.classes;\\n+const Ci = Components.interfaces;\\n+Components.utils.import(\\\"resource://gre/modules/XPCOMUtils.jsm\\\");\\n \\n-    return this;\\n-  },\\n+function nsSetDefaultBrowser() {}\\n \\n-  /* nsICommandLineHandler */\\n-  handle : function nsSetDefault_handle(cmdline) {\\n-    if (cmdline.handleFlag(\\\"setDefaultBrowser\\\", false)) {\\n-      var shell = Components.classes[\\\"@mozilla.org/browser/shell-service;1\\\"]\\n-                            .getService(Components.interfaces.nsIShellService);\\n+nsSetDefaultBrowser.prototype = {\\n+  handle: function nsSetDefault_handle(aCmdline) {\\n+    if (aCmdline.handleFlag(\\\"setDefaultBrowser\\\", false)) {\\n+      var shell = Cc[\\\"@mozilla.org/browser/shell-service;1\\\"].\\n+                  getService(Ci.nsIShellService);\\n       shell.setDefaultBrowser(true, true);\\n     }\\n   },\\n \\n-  helpInfo : \\\"  -setDefaultBrowser   Set this app as the default browser.\\\\n\\\"\\n-}\\n-\\n-// This Component's module and factory implementation.\\n-\\n-const contractID = \\\"@mozilla.org/browser/default-browser-clh;1\\\";\\n-const CID = Components.ID(\\\"{F57899D0-4E2C-4ac6-9E29-50C736103B0C}\\\");\\n-\\n-var ModuleAndFactory = {\\n-  /* nsISupports */\\n-  QueryInterface: function nsSetDefault_QI(iid) {\\n-    if (!iid.equals(Components.interfaces.nsIModule) &&\\n-        !iid.equals(Components.interfaces.nsIFactory) &&\\n-        !iid.equals(Components.interfaces.nsISupports))\\n-      throw Components.results.NS_ERROR_NO_INTERFACE;\\n-\\n-    return this;\\n-  },\\n+  helpInfo: \\\"  -setDefaultBrowser   Set this app as the default browser.\\\\n\\\",\\n \\n-  /* nsIModule */\\n-  getClassObject: function (compMgr, cid, iid) {\\n-    if (!cid.equals(CID))\\n-      throw Components.results.NS_ERROR_NO_INTERFACE;\\n-    \\n-    return this.QueryInterface(iid);\\n-  },\\n-    \\n-  registerSelf: function mod_regself(compMgr, fileSpec, location, type) {\\n-    var compReg =\\n-      compMgr.QueryInterface( Components.interfaces.nsIComponentRegistrar );\\n-\\n-    compReg.registerFactoryLocation( CID,\\n-                                     \\\"Default Browser Cmdline Handler\\\",\\n-                                     contractID,\\n-                                     fileSpec,\\n-                                     location,\\n-                                     type );\\n-\\n-    var catMan = Components.classes[\\\"@mozilla.org/categorymanager;1\\\"]\\n-                           .getService(Components.interfaces.nsICategoryManager);\\n-\\n-    catMan.addCategoryEntry(\\\"command-line-handler\\\",\\n-                            \\\"m-setdefaultbrowser\\\",\\n-                            contractID, true, true);\\n-  },\\n-    \\n-  unregisterSelf : function mod_unregself(compMgr, location, type) {\\n-    var catMan = Components.classes[\\\"@mozilla.org/categorymanager;1\\\"]\\n-                           .getService(Components.interfaces.nsICategoryManager);\\n-\\n-    catMan.deleteCategoryEntry(\\\"command-line-handler\\\",\\n-                               \\\"m-setdefaultbrowser\\\", true);\\n-  },\\n-\\n-  canUnload: function(compMgr) {\\n-    return true;\\n-  },\\n-\\n-  /* nsIFactory */\\n-  createInstance: function mod_CI(outer, iid) {\\n-    if (outer != null)\\n-      throw Components.results.NS_ERROR_NO_AGGREGATION;\\n-  \\n-    return new nsSetDefaultBrowser().QueryInterface(iid);\\n-  },\\n-    \\n-  lockFactory : function mod_lock(lock) {\\n-    /* no-op */\\n-  }\\n+  classDescription: \\\"Default Browser Cmdline Handler\\\",\\n+  contractID: \\\"@mozilla.org/browser/default-browser-clh;1\\\",\\n+  classID: Components.ID(\\\"{F57899D0-4E2C-4ac6-9E29-50C736103B0C}\\\"),\\n+  QueryInterface: XPCOMUtils.generateQI([Ci.nsICommandLineHandler]),\\n+  _xpcom_categories: [{\\n+    category: \\\"command-line-handler\\\",\\n+    entry: \\\"m-setdefaultbrowser\\\"\\n+  }]\\n }\\n \\n-// NSGetModule: Return the nsIModule object.\\n function NSGetModule(compMgr, fileSpec) {\\n-  return ModuleAndFactory;\\n+  return XPCOMUtils.generateModule([nsSetDefaultBrowser]);\\n }\\n\""}