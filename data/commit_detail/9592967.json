{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas9592967\""},"diff":"\"9592967 Part of bug 389070 Port bookmarks to frozen linkage. r=Neil. NPOTFFB\\ndiff --git a/xpfe/components/bookmarks/src/nsBookmarksService.cpp b/xpfe/components/bookmarks/src/nsBookmarksService.cpp\\nindex 1b744ce..e42a641 100644\\n--- a/xpfe/components/bookmarks/src/nsBookmarksService.cpp\\n+++ b/xpfe/components/bookmarks/src/nsBookmarksService.cpp\\n@@ -527,6 +527,7 @@ static const char kNewSearchFolderEquals[]        = \\\"NEW_SEARCH_FOLDER=\\\\\\\"\\\";\\n static const char kPersonalToolbarFolderEquals[]  = \\\"PERSONAL_TOOLBAR_FOLDER=\\\\\\\"\\\";\\n \\n static const char kNameEquals[]            = \\\"NAME=\\\\\\\"\\\";\\n+static const char kNameEqualsLC[]          = \\\"name=\\\\\\\"\\\";\\n static const char kHREFEquals[]            = \\\"HREF=\\\\\\\"\\\";\\n static const char kTargetEquals[]          = \\\"TARGET=\\\\\\\"\\\";\\n static const char kAddDateEquals[]         = \\\"ADD_DATE=\\\\\\\"\\\";\\n@@ -748,7 +749,7 @@ BookmarkParser::DecodeBuffer(nsString &line, char *buf, PRUint32 aLength)\\n     }\\n     else\\n     {\\n-        line.AppendWithConversion(buf, aLength);\\n+        CopyASCIItoUTF16(buf, line);\\n     }\\n     return NS_OK;\\n }\\n@@ -977,8 +978,7 @@ BookmarkParser::ParseMetaTag(const nsString &aLine, nsIUnicodeDecoder **decoder)\\n     start += (sizeof(kHTTPEquivEquals) - 1);\\n     // ...and find the next so we can chop the HTTP-EQUIV attribute\\n     PRInt32 end = aLine.FindChar(PRUnichar('\\\"'), start);\\n-    nsAutoString    httpEquiv;\\n-    aLine.Mid(httpEquiv, start, end - start);\\n+    nsAutoString httpEquiv(Substring(aLine, start, end - start));\\n \\n     // if HTTP-EQUIV isn't \\\"Content-Type\\\", just ignore the META tag\\n     if (!httpEquiv.LowerCaseEqualsLiteral(\\\"content-type\\\"))\\n@@ -992,16 +992,16 @@ BookmarkParser::ParseMetaTag(const nsString &aLine, nsIUnicodeDecoder **decoder)\\n     start += (sizeof(kContentEquals) - 1);\\n     // ...and find the next so we can chop the CONTENT attribute\\n     end = aLine.FindChar(PRUnichar('\\\"'), start);\\n-    nsAutoString    content;\\n-    aLine.Mid(content, start, end - start);\\n+    nsAutoString content(Substring(aLine, start, end - start));\\n \\n     // look for the charset value\\n     start = content.Find(kCharsetEquals, PR_TRUE);\\n     NS_ASSERTION(start >= 0, \\\"no 'charset=' string: how'd we get here?\\\");\\n     if (start < 0)  return NS_ERROR_UNEXPECTED;\\n     start += (sizeof(kCharsetEquals)-1);\\n-    nsCAutoString    charset;\\n-    charset.AssignWithConversion(Substring(content, start, content.Length() - start));\\n+\\n+    NS_LossyConvertUTF16toASCII charset(Substring(content, start,\\n+                                                  content.Length() - start));\\n     if (charset.Length() < 1)   return NS_ERROR_UNEXPECTED;\\n \\n     // found a charset, now try and get a decoder from it to Unicode\\n@@ -1093,19 +1093,18 @@ BookmarkParser::ParseBookmarkInfo(BookmarkField *fields, PRBool isBookmarkFlag,\\n \\n         PRBool  fieldFound = PR_FALSE;\\n \\n-        nsAutoString id;\\n-        id.AssignWithConversion(kIDEquals);\\n+        NS_ConvertASCIItoUTF16 id(kIDEquals);\\n         for (BookmarkField *field = fields; field->mName; ++field)\\n         {\\n-            nsAutoString name;\\n-            name.AssignWithConversion(field->mName);\\n+            NS_ConvertASCIItoUTF16 name(field->mName);\\n             if (mIsImportOperation && name.Equals(id)) \\n                 // For import operations, we don't want to save the unique identifier for folders,\\n                 // because this can cause bugs like 74969 (importing duplicate bookmark folder \\n                 // hierachy causes bookmarks file to grow infinitely).\\n                 continue;\\n   \\n-            if (aLine.Find(field->mName, PR_TRUE, attrStart, 1) == attrStart)\\n+            if (Substring(aLine, attrStart,\\n+                          name.Length()).Equals(name, CaseInsensitiveCompare))\\n             {\\n                 attrStart += strlen(field->mName);\\n \\n@@ -1114,8 +1113,8 @@ BookmarkParser::ParseBookmarkInfo(BookmarkField *fields, PRBool isBookmarkFlag,\\n                 if (termQuote > attrStart)\\n                 {\\n                     // process data\\n-                    nsAutoString    data;\\n-                    aLine.Mid(data, attrStart, termQuote-attrStart);\\n+                    nsAutoString data(Substring(aLine, attrStart,\\n+                                                termQuote - attrStart));\\n \\n                     attrStart = termQuote + 1;\\n                     fieldFound = PR_TRUE;\\n@@ -1227,8 +1226,8 @@ BookmarkParser::ParseBookmarkInfo(BookmarkField *fields, PRBool isBookmarkFlag,\\n \\n             if (nameEnd > attrStart)\\n             {\\n-                nsAutoString    name;\\n-                aLine.Mid(name, attrStart, nameEnd-attrStart);\\n+                nsAutoString name(Substring(aLine, attrStart,\\n+                                            nameEnd - attrStart));\\n                 if (!name.IsEmpty())\\n                 {\\n                     Unescape(name);\\n@@ -1287,10 +1286,7 @@ BookmarkParser::ParseResource(nsIRDFResource *arc, nsString& url, nsIRDFNode** a\\n         static const char kEscape22[] = \\\"%22\\\";\\n         PRInt32 offset;\\n         while ((offset = url.Find(kEscape22)) >= 0)\\n-        {\\n-            url.SetCharAt('\\\\\\\"',offset);\\n-            url.Cut(offset + 1, sizeof(kEscape22) - 2);\\n-        }\\n+            url.Replace(offset, sizeof(kEscape22) - 1, '\\\\\\\"');\\n \\n         // XXX At this point, the URL may be relative. 4.5 called into\\n         // netlib to make an absolute URL, and there was some magic\\n@@ -1300,9 +1296,7 @@ BookmarkParser::ParseResource(nsIRDFResource *arc, nsString& url, nsIRDFNode** a\\n         // hack fix for bug # 21175:\\n         // if we don't have a protocol scheme, add \\\"http://\\\" as a default scheme\\n         if (url.FindChar(PRUnichar(':')) < 0)\\n-        {\\n-            url.Assign(NS_LITERAL_STRING(\\\"http://\\\") + url);\\n-        }\\n+            url.Insert(NS_LITERAL_STRING(\\\"http://\\\"), 0);\\n     }\\n \\n     nsresult                    rv;\\n@@ -1326,9 +1320,9 @@ BookmarkParser::ParseLiteral(nsIRDFResource *arc, nsString& aValue, nsIRDFNode**\\n     {\\n         if (gCharsetAlias)\\n         {\\n-            nsCAutoString charset; charset.AssignWithConversion(aValue);\\n+            NS_LossyConvertUTF16toASCII charset(aValue);\\n             gCharsetAlias->GetPreferred(charset, charset);\\n-            aValue.AssignWithConversion(charset.get());\\n+            CopyASCIItoUTF16(charset, aValue);\\n         }\\n     }\\n     else if (arc == kWEB_LastPingETag)\\n@@ -1359,15 +1353,16 @@ BookmarkParser::ParseDate(nsIRDFResource *arc, nsString& aValue, nsIRDFNode** aR\\n         PRInt32 err;\\n         theDate = aValue.ToInteger(&err); // ignored.\\n     }\\n-    if (theDate == 0)   return NS_RDF_NO_VALUE;\\n+    if (theDate == 0)\\n+      return NS_RDF_NO_VALUE;\\n \\n+    nsresult rv;\\n     // convert from seconds to microseconds (PRTime)\\n     PRInt64     dateVal, temp, million;\\n     LL_I2L(temp, theDate);\\n     LL_I2L(million, PR_USEC_PER_SEC);\\n     LL_MUL(dateVal, temp, million);\\n \\n-    nsresult                rv;\\n     nsCOMPtr<nsIRDFDate>    result;\\n     if (NS_FAILED(rv = gRDF->GetDateLiteral(dateVal, getter_AddRefs(result))))\\n     {\\n@@ -1432,14 +1427,15 @@ BookmarkParser::ParseBookmarkSeparator(const nsString &aLine, const nsCOMPtr<nsI\\n         while(NS_IsAsciiWhitespace(aLine[attrStart]))\\n             ++attrStart;\\n \\n-        if (aLine.Find(kNameEquals, PR_TRUE, attrStart, 1) == attrStart) {\\n-            attrStart += sizeof(kNameEquals) - 1;\\n+        if (Substring(aLine, attrStart, sizeof(kNameEqualsLC) - 1)\\n+              .LowerCaseEqualsLiteral(kNameEqualsLC)) {\\n+            attrStart += sizeof(kNameEqualsLC) - 1;\\n \\n             // skip to terminating quote of string\\n             PRInt32 termQuote = aLine.FindChar(PRUnichar('\\\\\\\"'), attrStart);\\n             if (termQuote > attrStart) {\\n-                nsAutoString name;\\n-                aLine.Mid(name, attrStart, termQuote - attrStart);\\n+                nsAutoString name(Substring(aLine, attrStart,\\n+                                            termQuote - attrStart));\\n                 attrStart = termQuote + 1;\\n                 if (!name.IsEmpty()) {\\n                     nsCOMPtr<nsIRDFLiteral> nameLiteral;\\n@@ -1781,8 +1777,7 @@ nsresult\\n nsBookmarksService::getLocaleString(const char *key, nsString &str)\\n {\\n     PRUnichar   *keyUni = nsnull;\\n-    nsAutoString    keyStr;\\n-    keyStr.AssignWithConversion(key);\\n+    NS_ConvertASCIItoUTF16 keyStr(key);\\n \\n     nsresult    rv = NS_RDF_NO_VALUE;\\n     if (mBundle && (NS_SUCCEEDED(rv = mBundle->GetStringFromName(keyStr.get(), &keyUni)))\\n@@ -1849,16 +1844,14 @@ nsBookmarksService::ExamineBookmarkSchedule(nsIRDFResource *theBookmark, PRBool\\n     PRInt32     slashOffset;\\n     if ((slashOffset = schedule.FindChar(PRUnichar('|'))) >= 0)\\n     {\\n-        nsAutoString    daySection;\\n-        schedule.Left(daySection, slashOffset);\\n+        nsAutoString daySection(StringHead(schedule, slashOffset));\\n         schedule.Cut(0, slashOffset+1);\\n         if (daySection.Find(dayNum) >= 0)\\n         {\\n             // ok, we should be checking today.  Within hour range?\\n             if ((slashOffset = schedule.FindChar(PRUnichar('|'))) >= 0)\\n             {\\n-                nsAutoString    hourRange;\\n-                schedule.Left(hourRange, slashOffset);\\n+                nsAutoString hourRange(StringHead(schedule, slashOffset));\\n                 schedule.Cut(0, slashOffset+1);\\n \\n                 // now have the \\\"hour-range\\\" segment of the string\\n@@ -1866,30 +1859,27 @@ nsBookmarksService::ExamineBookmarkSchedule(nsIRDFResource *theBookmark, PRBool\\n                 PRInt32     dashOffset;\\n                 if ((dashOffset = hourRange.FindChar(PRUnichar('-'))) >= 1)\\n                 {\\n-                    nsAutoString    startStr, endStr;\\n-\\n-                    hourRange.Right(endStr, hourRange.Length() - dashOffset - 1);\\n-                    hourRange.Left(startStr, dashOffset);\\n-\\n-                    PRInt32     errorCode2 = 0;\\n-                    startHour = startStr.ToInteger(&errorCode2);\\n-                    if (errorCode2) startHour = -1;\\n-                    endHour = endStr.ToInteger(&errorCode2);\\n-                    if (errorCode2) endHour = -1;\\n+                    nsAutoString startStr(StringHead(hourRange, dashOffset));\\n+                    nsAutoString endStr(Substring(hourRange, dashOffset + 1));\\n+\\n+                    PRInt32 rv2 = 0;\\n+                    startHour = startStr.ToInteger(&rv2);\\n+                    if (rv2) startHour = -1;\\n+                    endHour = endStr.ToInteger(&rv2);\\n+                    if (rv2) endHour = -1;\\n                     \\n                     if ((startHour >=0) && (endHour >=0))\\n                     {\\n                         if ((slashOffset = schedule.FindChar(PRUnichar('|'))) >= 0)\\n                         {\\n-                            nsAutoString    durationStr;\\n-                            schedule.Left(durationStr, slashOffset);\\n+                            nsAutoString durationStr(StringHead(schedule,\\n+                                                                slashOffset));\\n                             schedule.Cut(0, slashOffset+1);\\n \\n                             // get duration\\n-                            PRInt32     errorCode = 0;\\n-                            duration = durationStr.ToInteger(&errorCode);\\n-                            if (errorCode)  duration = -1;\\n-                            \\n+                            duration = durationStr.ToInteger(&rv2);\\n+                            if (rv2) duration = -1;\\n+\\n                             // what's left is the notification options\\n                             notificationMethod = schedule;\\n                         }\\n@@ -4107,7 +4097,7 @@ nsBookmarksService::ProcessCachedBookmarkIcon(nsIRDFResource* aSource,\\n     // if we have a new icon URL, save it away into our internal graph\\n     if (iconURL)\\n     {\\n-        path.AssignWithConversion(iconURL);\\n+        LossyCopyUTF16toASCII(iconURL, path);\\n \\n         nsCOMPtr<nsIRDFLiteral> iconLiteral;\\n         if (NS_FAILED(rv = gRDF->GetLiteral(iconURL, getter_AddRefs(iconLiteral))))\\n@@ -4137,7 +4127,8 @@ nsBookmarksService::ProcessCachedBookmarkIcon(nsIRDFResource* aSource,\\n         {\\n             const PRUnichar *uni = nsnull;\\n             tempLiteral->GetValueConst(&uni);\\n-            if (uni)    path.AssignWithConversion(uni);\\n+            if (uni)\\n+                LossyCopyUTF16toASCII(uni, path);\\n         }\\n     }\\n \\n@@ -4205,8 +4196,7 @@ nsBookmarksService::ProcessCachedBookmarkIcon(nsIRDFResource* aSource,\\n     }\\n \\n     // ok, have a cached icon entry, so return the URL's associated favicon\\n-    nsAutoString litStr;\\n-    litStr.AssignWithConversion(path.get());\\n+    NS_ConvertASCIItoUTF16 litStr(path);\\n     nsCOMPtr<nsIRDFLiteral> literal;\\n     if (NS_FAILED(rv = gRDF->GetLiteral(litStr.get(), getter_AddRefs(literal))))\\n     {\\n@@ -5532,7 +5522,6 @@ nsBookmarksService::WriteBookmarksContainer(nsIRDFDataSource *ds,\\n                 }\\n \\n                 nsCOMPtr<nsIRDFNode>    nameNode;\\n-                nsAutoString        nameString;\\n                 nsCAutoString       name;\\n                 rv = ds->GetTarget(child, kNC_Name, PR_TRUE, getter_AddRefs(nameNode));\\n                 if (NS_SUCCEEDED(rv) && nameNode)\\n@@ -5543,8 +5532,7 @@ nsBookmarksService::WriteBookmarksContainer(nsIRDFDataSource *ds,\\n                         const PRUnichar *title = nsnull;\\n                         if (NS_SUCCEEDED(rv = nameLiteral->GetValueConst(&title)))\\n                         {\\n-                            nameString = title;\\n-                            AppendUTF16toUTF8(nameString, name);\\n+                            CopyUTF16toUTF8(title, name);\\n                         }\\n                     }\\n                 }\\n@@ -5810,9 +5798,8 @@ nsBookmarksService::GetTextForNode(nsIRDFNode* aNode, nsString& aResult)\\n     {\\n         const char  *p = nsnull;\\n         if (NS_SUCCEEDED(rv = resource->GetValueConst( &p )) && (p))\\n-        {\\n-            aResult.AssignWithConversion(p);\\n-        }\\n+            CopyASCIItoUTF16(nsDependentCString(p), aResult);\\n+\\n         NS_RELEASE(resource);\\n     }\\n     else if (NS_SUCCEEDED(rv = aNode->QueryInterface(NS_GET_IID(nsIRDFDate), (void**) &dateLiteral)))\\n\""}