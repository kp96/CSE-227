{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas9151826\""},"diff":"\"9151826 Bug 386711  Use single queries in nsNavHistoryExpire methods (r=dietrich)\\ndiff --git a/toolkit/components/places/src/nsNavHistoryExpire.cpp b/toolkit/components/places/src/nsNavHistoryExpire.cpp\\nindex 7a154f9..1368cee 100644\\n--- a/toolkit/components/places/src/nsNavHistoryExpire.cpp\\n+++ b/toolkit/components/places/src/nsNavHistoryExpire.cpp\\n@@ -402,18 +402,19 @@ nsresult\\n nsNavHistoryExpire::EraseVisits(mozIStorageConnection* aConnection,\\n     const nsTArray<nsNavHistoryExpireRecord>& aRecords)\\n {\\n-  nsCOMPtr<mozIStorageStatement> deleteStatement;\\n-  nsresult rv = aConnection->CreateStatement(NS_LITERAL_CSTRING(\\n-      \\\"DELETE FROM moz_historyvisits WHERE id = ?1\\\"),\\n-    getter_AddRefs(deleteStatement));\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n-  PRUint32 i;\\n-  for (i = 0; i < aRecords.Length(); i ++) {\\n-    deleteStatement->BindInt64Parameter(0, aRecords[i].visitID);\\n-    rv = deleteStatement->Execute();\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n+  // build a comma separated string of visit ids to delete\\n+  nsCAutoString deletedVisitIds;\\n+  for (PRUint32 i = 0; i < aRecords.Length(); i ++) {\\n+    // Do not add comma separator for the first entry\\n+    if(! deletedVisitIds.IsEmpty())\\n+      deletedVisitIds.AppendLiteral(\\\", \\\");\\n+    deletedVisitIds.AppendInt(aRecords[i].visitID);\\n   }\\n-  return NS_OK;\\n+\\n+  return aConnection->ExecuteSimpleSQL(\\n+    NS_LITERAL_CSTRING(\\\"DELETE FROM moz_historyvisits WHERE id IN (\\\") +\\n+    deletedVisitIds +\\n+    NS_LITERAL_CSTRING(\\\")\\\"));\\n }\\n \\n \\n@@ -429,37 +430,26 @@ nsresult\\n nsNavHistoryExpire::EraseHistory(mozIStorageConnection* aConnection,\\n     nsTArray<nsNavHistoryExpireRecord>& aRecords)\\n {\\n-  nsCOMPtr<mozIStorageStatement> deleteStatement;\\n-  nsresult rv = aConnection->CreateStatement(NS_LITERAL_CSTRING(\\n-      \\\"DELETE FROM moz_places WHERE id = ?1\\\"),\\n-    getter_AddRefs(deleteStatement));\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n-\\n-  nsCOMPtr<mozIStorageStatement> selectStatement;\\n-  rv = aConnection->CreateStatement(NS_LITERAL_CSTRING(\\n-      \\\"SELECT place_id FROM moz_historyvisits WHERE place_id = ?1\\\"),\\n-    getter_AddRefs(selectStatement));\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n-\\n+  // build a comma separated string of place ids to delete\\n+  nsCAutoString deletedPlaceIds;\\n   for (PRUint32 i = 0; i < aRecords.Length(); i ++) {\\n-    if (aRecords[i].bookmarked)\\n-      continue; // don't delete bookmarked entries\\n-    if (StringBeginsWith(aRecords[i].uri, NS_LITERAL_CSTRING(\\\"place:\\\")))\\n-      continue; // don't delete \\\"place\\\" URIs\\n-\\n-    // check that there are no visits\\n-    rv = selectStatement->BindInt64Parameter(0, aRecords[i].placeID);\\n-    NS_ENSURE_SUCCESS(rv, rv);\\n-    PRBool hasVisit = PR_FALSE;\\n-    rv = selectStatement->ExecuteStep(&hasVisit);\\n-    selectStatement->Reset();\\n-    if (hasVisit) continue;\\n-\\n+    // IF bookmarked entries OR \\\"place\\\" URIs do not delete\\n+    if (aRecords[i].bookmarked ||\\n+        StringBeginsWith(aRecords[i].uri, NS_LITERAL_CSTRING(\\\"place:\\\")))\\n+      continue;\\n+    // Do not add comma separator for the first entry\\n+    if(! deletedPlaceIds.IsEmpty() )\\n+      deletedPlaceIds.AppendLiteral(\\\", \\\");\\n+    deletedPlaceIds.AppendInt(aRecords[i].placeID);\\n     aRecords[i].erased = PR_TRUE;\\n-    rv = deleteStatement->BindInt64Parameter(0, aRecords[i].placeID);\\n-    rv = deleteStatement->Execute();\\n   }\\n-  return NS_OK;\\n+\\n+  return aConnection->ExecuteSimpleSQL(\\n+    NS_LITERAL_CSTRING(\\\"DELETE FROM moz_places WHERE id IN (\\\") +\\n+    deletedPlaceIds +\\n+    NS_LITERAL_CSTRING(\\\") AND id IN (SELECT h.id FROM moz_places h \\\"\\n+      \\\"LEFT OUTER JOIN moz_historyvisits v ON h.id = v.place_id \\\"\\n+      \\\"WHERE v.id IS NULL)\\\"));\\n }\\n \\n \\n@@ -469,41 +459,26 @@ nsresult\\n nsNavHistoryExpire::EraseFavicons(mozIStorageConnection* aConnection,\\n     const nsTArray<nsNavHistoryExpireRecord>& aRecords)\\n {\\n-  // see if this favicon still has an entry\\n-  nsCOMPtr<mozIStorageStatement> selectStatement;\\n-  nsresult rv = aConnection->CreateStatement(NS_LITERAL_CSTRING(\\n-      \\\"SELECT id FROM moz_places where favicon_id = ?1\\\"),\\n-    getter_AddRefs(selectStatement));\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n-\\n-  // delete a favicon\\n-  nsCOMPtr<mozIStorageStatement> deleteStatement;\\n-  rv = aConnection->CreateStatement(NS_LITERAL_CSTRING(\\n-      \\\"DELETE FROM moz_favicons WHERE id = ?1\\\"),\\n-    getter_AddRefs(deleteStatement));\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n-\\n+  // build a comma separated string of favicon ids to delete\\n+  nsCAutoString deletedFaviconIds;\\n   for (PRUint32 i = 0; i < aRecords.Length(); i ++) {\\n-    if (! aRecords[i].erased)\\n-      continue; // main entry not expired\\n-    if (aRecords[i].faviconID == 0)\\n-      continue; // no favicon\\n-    selectStatement->BindInt64Parameter(0, aRecords[i].faviconID);\\n-\\n-    // see if there are any history entries and skip if so\\n-    PRBool hasEntry;\\n-    if (NS_SUCCEEDED(selectStatement->ExecuteStep(&hasEntry)) && hasEntry) {\\n-      selectStatement->Reset();\\n-      continue; // favicon still referenced\\n-    }\\n-    selectStatement->Reset();\\n-\\n-    // delete the favicon, ignoring errors. We could have the same favicon\\n-    // referenced twice in our list, and we'd try to delete it twice.\\n-    deleteStatement->BindInt64Parameter(0, aRecords[i].faviconID);\\n-    deleteStatement->Execute();\\n+    // IF main entry not expired OR no favicon DO NOT DELETE\\n+    if (! aRecords[i].erased || aRecords[i].faviconID == 0)\\n+      continue;\\n+    // Do not add comma separator for the first entry\\n+    if(! deletedFaviconIds.IsEmpty() )\\n+      deletedFaviconIds.AppendLiteral(\\\", \\\");\\n+    deletedFaviconIds.AppendInt(aRecords[i].faviconID);\\n   }\\n-  return NS_OK;\\n+\\n+  // delete only if id is not referenced in moz_places\\n+  return aConnection->ExecuteSimpleSQL(\\n+    NS_LITERAL_CSTRING(\\\"DELETE FROM moz_favicons WHERE id IN (\\\") +\\n+    deletedFaviconIds +\\n+    NS_LITERAL_CSTRING(\\\") AND id IN \\\"\\n+      \\\"(SELECT f.id FROM moz_favicons f \\\"\\n+      \\\"LEFT OUTER JOIN moz_places h ON f.id = h.favicon_id \\\"\\n+      \\\"WHERE h.favicon_id IS NULL)\\\"));\\n }\\n \\n \\n\""}