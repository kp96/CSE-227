{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas62647d3\""},"diff":"\"62647d3 Bug 342485 - Replace calls to CheckLoadURI() with calls to CheckLoadURIWithPrincipal(). r=gavin, sayrer (for tests).\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 63e11da..853f3d1 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -856,12 +856,6 @@\\n               return; // Refuse to load if we can't do a security check.\\n             }\\n \\n-            // Verify that the load of this icon is legal.\\n-            // We check first with the security manager\\n-            const secMan =\\n-              Components.classes[\\\"@mozilla.org/scriptsecuritymanager;1\\\"]\\n-                        .getService(Components.interfaces.nsIScriptSecurityManager);\\n-\\n             // Get the IOService so we can make URIs\\n             const ioService =\\n               Components.classes[\\\"@mozilla.org/network/io-service;1\\\"]\\n@@ -870,28 +864,27 @@\\n             const targetDoc = event.target.ownerDocument;\\n             // Make a URI out of our href.\\n             var uri = ioService.newURI(href, targetDoc.characterSet, null);\\n-\\n-            var origURI = ioService.newURI(targetDoc.documentURI, targetDoc.characterSet, null);\\n-\\n-            const nsIScriptSecMan =\\n-              Components.interfaces.nsIScriptSecurityManager;\\n-\\n             try {\\n-              // error pages can load their favicon\\n-              // to be on the safe side, only allow chrome:// favicons\\n+              // Verify that the load of this icon is legal.\\n+              // error pages can load their favicon, to be on the safe side,\\n+              // only allow chrome:// favicons\\n+              const nsIScriptSecMan =\\n+                Components.interfaces.nsIScriptSecurityManager;\\n+              var secMan = Components.classes[\\\"@mozilla.org/scriptsecuritymanager;1\\\"]\\n+                                     .getService(nsIScriptSecMan);\\n               const aboutNeterr = \\\"about:neterror?\\\";\\n-              if (origURI.spec.substr(0, aboutNeterr.length) != aboutNeterr ||\\n+              if (targetDoc.documentURI.substr(0, aboutNeterr.length) != aboutNeterr ||\\n                   !uri.schemeIs(\\\"chrome\\\"))\\n-                secMan.checkLoadURI(origURI, uri,\\n-                                    nsIScriptSecMan.DISALLOW_SCRIPT);\\n+                secMan.checkLoadURIWithPrincipal(targetDoc.nodePrincipal, uri,\\n+                                                 nsIScriptSecMan.DISALLOW_SCRIPT);\\n             } catch(e) {\\n               return;\\n             }\\n \\n             // Security says okay, now ask content policy\\n             if (contentPolicy.shouldLoad(nsIContentPolicy.TYPE_IMAGE,\\n-                                         uri, origURI, event.target,\\n-                                         event.target.type,\\n+                                         uri, targetDoc.documentURIObject,\\n+                                         event.target, event.target.type,\\n                                          null) != nsIContentPolicy.ACCEPT)\\n               return;\\n \\n@@ -2282,6 +2275,10 @@\\n                 onget=\\\"return this.mCurrentBrowser.contentTitle;\\\"\\n                 readonly=\\\"true\\\"/>\\n \\n+      <property name=\\\"contentPrincipal\\\"\\n+                onget=\\\"return this.mCurrentBrowser.contentPrincipal;\\\"\\n+                readonly=\\\"true\\\"/>\\n+\\n       <property name=\\\"securityUI\\\"\\n                 onget=\\\"return this.mCurrentBrowser.securityUI;\\\"\\n                 readonly=\\\"true\\\"/>\\n\""}