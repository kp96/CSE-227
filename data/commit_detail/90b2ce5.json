{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas90b2ce5\""},"diff":"\"90b2ce5 Bug 387617: addLogin() should fail if user cancels master password prompt. r=gavin\\ndiff --git a/toolkit/components/passwordmgr/src/storage-Legacy.js b/toolkit/components/passwordmgr/src/storage-Legacy.js\\nindex e199c2e..c2f6025 100644\\n--- a/toolkit/components/passwordmgr/src/storage-Legacy.js\\n+++ b/toolkit/components/passwordmgr/src/storage-Legacy.js\\n@@ -185,12 +185,27 @@ LoginManagerStorage_legacy.prototype = {\\n         var key = login.hostname;\\n \\n         // If first entry for key, create an Array to hold it's logins.\\n-        if (!this._logins[key])\\n+        var rollback;\\n+        if (!this._logins[key]) {\\n             this._logins[key] = [];\\n+            rollback = null;\\n+        } else {\\n+            rollback = this._logins[key].concat(); // clone array\\n+        }\\n \\n         this._logins[key].push(login);\\n \\n-        this._writeFile();\\n+        var ok = this._writeFile();\\n+\\n+        // If we failed, don't keep the added login in memory.\\n+        if (!ok) {\\n+            if (rollback)\\n+                this._logins[key] = rollback;\\n+            else\\n+                delete this._logins[key];\\n+\\n+            throw \\\"Couldn't write to file, login not added.\\\";\\n+        }\\n     },\\n \\n \\n@@ -205,6 +220,8 @@ LoginManagerStorage_legacy.prototype = {\\n         if (!logins)\\n             throw \\\"No logins found for hostname (\\\" + key + \\\")\\\";\\n \\n+        var rollback = this._logins[key].concat(); // clone array\\n+\\n         // The specified login isn't encrypted, so we need to ensure\\n         // the logins we're comparing with are decrypted. We decrypt one entry\\n         // at a time, lest _decryptLogins return fewer entries and screw up\\n@@ -215,7 +232,7 @@ LoginManagerStorage_legacy.prototype = {\\n                         this._decryptLogins([logins[i]]);\\n \\n             if (userCanceled)\\n-                return;\\n+                throw \\\"User canceled master password entry, login not removed.\\\";\\n \\n             if (!decryptedLogin)\\n                 continue;\\n@@ -228,11 +245,17 @@ LoginManagerStorage_legacy.prototype = {\\n             }\\n         }\\n \\n-        // Did we delete all the logins for this host?\\n+        // Did we delete the last login for this host?\\n         if (logins.length == 0)\\n             delete this._logins[key];\\n \\n-        this._writeFile();\\n+        var ok = this._writeFile();\\n+\\n+        // If we failed, don't actually remove the login.\\n+        if (!ok) {\\n+            this._logins[key] = rollback;\\n+            throw \\\"Couldn't write to file, login not removed.\\\";\\n+        }\\n     },\\n \\n \\n@@ -617,6 +640,9 @@ LoginManagerStorage_legacy.prototype = {\\n     /*\\n      * _writeFile\\n      *\\n+     * Returns true if the operation was successfully completed, or false\\n+     * if there was an error (probably the user refusing to enter a\\n+     * master password if prompted).\\n      */\\n     _writeFile : function () {\\n         function writeLine(data) {\\n@@ -724,7 +750,7 @@ LoginManagerStorage_legacy.prototype = {\\n                 this.log(\\\"User canceled Master Password, aborting write.\\\");\\n                 // .close will cause an abort w/o modifying original file\\n                 outputStream.close();\\n-                return;\\n+                return false;\\n             }\\n \\n             // write end-of-host marker\\n@@ -734,6 +760,7 @@ LoginManagerStorage_legacy.prototype = {\\n         // [if there were no hosts, no end-of-host marker (\\\".\\\") needed]\\n \\n         outputStream.finish();\\n+        return true;\\n     },\\n \\n \\n@@ -825,7 +852,9 @@ LoginManagerStorage_legacy.prototype = {\\n             cipherText = this._decoderRing.encryptString(plainOctet);\\n         } catch (e) {\\n             this.log(\\\"Failed to encrypt string. (\\\" + e.name + \\\")\\\");\\n-            if (e.result == Components.results.NS_ERROR_NOT_AVAILABLE)\\n+            // If the user clicks Cancel, we get NS_ERROR_FAILURE.\\n+            // (unlike decrypting, which gets NS_ERROR_NOT_AVAILABLE).\\n+            if (e.result == Components.results.NS_ERROR_FAILURE)\\n                 userCanceled = true;\\n         }\\n \\n\""}