{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas75538e9\""},"diff":"\"75538e9 Bug 386789: create JSON utilities module and use it for search suggest/sessionstore/Places, patch by Simon BÃ¼nzli <zeniko@gmail.com>, r=sspitzer, sr+a=brendan\\ndiff --git a/browser/components/places/content/utils.js b/browser/components/places/content/utils.js\\nindex b9af0cf..aa47158 100644\\n--- a/browser/components/places/content/utils.js\\n+++ b/browser/components/places/content/utils.js\\n@@ -46,6 +46,8 @@ var Ci = Components.interfaces;\\n var Cc = Components.classes;\\n var Cr = Components.results;\\n \\n+Components.utils.import(\\\"resource://gre/modules/JSON.jsm\\\");\\n+\\n const LOAD_IN_SIDEBAR_ANNO = \\\"bookmarkProperties/loadInSidebar\\\";\\n const DESCRIPTION_ANNO = \\\"bookmarkProperties/description\\\";\\n const POST_DATA_ANNO = \\\"URIProperties/POSTData\\\";\\n@@ -543,7 +545,7 @@ var PlacesUtils = {\\n           } \\n           return node;\\n         }\\n-        return this.toJSONString(gatherDataPlace(convertNode(aNode)));\\n+        return JSON.toString(gatherDataPlace(convertNode(aNode)));\\n \\n       case this.TYPE_X_MOZ_URL:\\n         function gatherDataUrl(bNode) {\\n@@ -756,7 +758,7 @@ var PlacesUtils = {\\n       case this.TYPE_X_MOZ_PLACE:\\n       case this.TYPE_X_MOZ_PLACE_SEPARATOR:\\n       case this.TYPE_X_MOZ_PLACE_CONTAINER:\\n-        nodes = this.parseJSON(\\\"[\\\" + blob + \\\"]\\\");\\n+        nodes = JSON.fromString(\\\"[\\\" + blob + \\\"]\\\");\\n         break;\\n       case this.TYPE_X_MOZ_URL:\\n         var parts = blob.split(\\\"\\\\n\\\");\\n@@ -1516,113 +1518,6 @@ var PlacesUtils = {\\n       }\\n     }\\n     return -1;\\n-  },\\n-\\n-  /**\\n-   * Converts a JavaScript object into a JSON string\\n-   * (see http://www.json.org/ for the full grammar).\\n-   *\\n-   * The inverse operation consists of eval(\\\"(\\\" + JSON_string + \\\")\\\");\\n-   * and should be provably safe.\\n-   *\\n-   * @param aJSObject is the object to be converted\\n-   * @return the object's JSON representation\\n-   */\\n-  toJSONString: function PU_toJSONString(aJSObject) {\\n-    // these characters have a special escape notation\\n-    const charMap = { \\\"\\\\b\\\": \\\"\\\\\\\\b\\\", \\\"\\\\t\\\": \\\"\\\\\\\\t\\\", \\\"\\\\n\\\": \\\"\\\\\\\\n\\\", \\\"\\\\f\\\": \\\"\\\\\\\\f\\\",\\n-                      \\\"\\\\r\\\": \\\"\\\\\\\\r\\\", '\\\"': '\\\\\\\\\\\"', \\\"\\\\\\\\\\\": \\\"\\\\\\\\\\\\\\\\\\\" };\\n-    // we use a single string builder for efficiency reasons\\n-    var parts = [];\\n-    \\n-    // this recursive function walks through all objects and appends their\\n-    // JSON representation to the string builder\\n-    function jsonIfy(aObj) {\\n-      if (typeof aObj == \\\"boolean\\\") {\\n-        parts.push(aObj ? \\\"true\\\" : \\\"false\\\");\\n-      }\\n-      else if (typeof aObj == \\\"number\\\" && isFinite(aObj)) {\\n-        // there is no representation for infinite numbers or for NaN!\\n-        parts.push(aObj.toString());\\n-      }\\n-      else if (typeof aObj == \\\"string\\\") {\\n-        aObj = aObj.replace(/[\\\\\\\\\\\"\\\\x00-\\\\x1F\\\\u0080-\\\\uFFFF]/g, function($0) {\\n-          // use the special escape notation if one exists, otherwise\\n-          // produce a general unicode escape sequence\\n-          return charMap[$0] ||\\n-            \\\"\\\\\\\\u\\\" + (\\\"0000\\\" + $0.charCodeAt(0).toString(16)).slice(-4);\\n-        });\\n-        parts.push('\\\"' + aObj + '\\\"');\\n-      }\\n-      else if (aObj == null) {\\n-        parts.push(\\\"null\\\");\\n-      }\\n-      else if (aObj instanceof Array) {\\n-        parts.push(\\\"[\\\");\\n-        for (var i = 0; i < aObj.length; i++) {\\n-          jsonIfy(aObj[i]);\\n-          parts.push(\\\",\\\");\\n-        }\\n-        if (parts[parts.length - 1] == \\\",\\\")\\n-          parts.pop(); // drop the trailing colon\\n-        parts.push(\\\"]\\\");\\n-      }\\n-      else if (typeof aObj == \\\"object\\\") {\\n-        parts.push(\\\"{\\\");\\n-        for (var key in aObj) {\\n-          jsonIfy(key.toString());\\n-          parts.push(\\\":\\\");\\n-          jsonIfy(aObj[key]);\\n-          parts.push(\\\",\\\");\\n-        }\\n-        if (parts[parts.length - 1] == \\\",\\\")\\n-          parts.pop(); // drop the trailing colon\\n-        parts.push(\\\"}\\\");\\n-      }\\n-      else {\\n-        throw new Error(\\\"No JSON representation for this object!\\\");\\n-      }\\n-    } // end of jsonIfy definition\\n-    jsonIfy(aJSObject);\\n-    \\n-    var newJSONString = parts.join(\\\" \\\");\\n-    // sanity check - so that API consumers can just eval this string\\n-    if (/[^,:{}\\\\[\\\\]0-9.\\\\-+Eaeflnr-u \\\\n\\\\r\\\\t]/.test(\\n-      newJSONString.replace(/\\\"(\\\\\\\\.|[^\\\"\\\\\\\\])*\\\"/g, \\\"\\\")\\n-    ))\\n-      throw new Error(\\\"JSON conversion failed unexpectedly!\\\");\\n-    \\n-    return newJSONString;\\n-  },\\n-  \\n-  /**\\n-   * Converts a JSON string into a JavaScript object\\n-   * (see http://www.json.org/ for the full grammar).\\n-   *\\n-   * @param jsonText is the object to be converted\\n-   * @return a JS Object\\n-   */\\n-  parseJSON: function parseJSON(jsonText) {\\n-    var m = {\\n-        '\\\\b': '\\\\\\\\b',\\n-        '\\\\t': '\\\\\\\\t',\\n-        '\\\\n': '\\\\\\\\n',\\n-        '\\\\f': '\\\\\\\\f',\\n-        '\\\\r': '\\\\\\\\r',\\n-        '\\\"' : '\\\\\\\\\\\"',\\n-        '\\\\\\\\': '\\\\\\\\\\\\\\\\'\\n-    };\\n-    \\n-    var EVAL_SANDBOX = new Components.utils.Sandbox(\\\"about:blank\\\");\\n-    \\n-    if (/^[,:{}\\\\[\\\\]0-9.\\\\-+Eaeflnr-u \\\\n\\\\r\\\\t]*$/.test(jsonText.\\n-                    replace(/\\\\\\\\./g, '@').\\n-                    replace(/\\\"[^\\\"\\\\\\\\\\\\n\\\\r]*\\\"/g, ''))) {\\n-      var j = Components.utils.evalInSandbox(jsonText, EVAL_SANDBOX);\\n-      return j;\\n-    }\\n-    else\\n-      throw new SyntaxError('parseJSON');\\n   }\\n };\\n \\ndiff --git a/browser/components/search/nsSearchSuggestions.js b/browser/components/search/nsSearchSuggestions.js\\nindex 4b3e8d8..8573c4f 100644\\n--- a/browser/components/search/nsSearchSuggestions.js\\n+++ b/browser/components/search/nsSearchSuggestions.js\\n@@ -55,6 +55,7 @@ const HTTP_BAD_GATEWAY           = 502;\\n const HTTP_SERVICE_UNAVAILABLE   = 503;\\n \\n Cu.import(\\\"resource://gre/modules/XPCOMUtils.jsm\\\");\\n+Cu.import(\\\"resource://gre/modules/JSON.jsm\\\");\\n \\n /**\\n  * SuggestAutoCompleteResult contains the results returned by the Suggest\\n@@ -522,21 +523,7 @@ SuggestAutoComplete.prototype = {\\n \\n     this._clearServerErrors();\\n \\n-    // This is a modified version of Crockford's JSON sanitizer, obtained\\n-    // from http://www.json.org/js.html.\\n-    // This should use built-in functions once bug 340987 is fixed.\\n-    const JSON_STRING = /^(\\\"(\\\\\\\\.|[^\\\"\\\\\\\\\\\\n\\\\r])*?\\\"|[,:{}\\\\[\\\\]0-9.\\\\-+Eaeflnr-u \\\\n\\\\r\\\\t])+?$/;\\n-    var sandbox = new Cu.Sandbox(this._suggestURI.prePath);\\n-    function parseJSON(aString) {\\n-      try {\\n-        if (JSON_STRING.test(aString))\\n-          return Cu.evalInSandbox(\\\"(\\\" + aString + \\\")\\\", sandbox);\\n-      } catch (e) {}\\n-\\n-      return [];\\n-    };\\n-\\n-    var serverResults = parseJSON(responseText);\\n+    var serverResults = JSON.fromString(responseText);\\n     var searchString = serverResults[0] || \\\"\\\";\\n     var results = serverResults[1] || [];\\n \\ndiff --git a/browser/components/sessionstore/src/nsSessionStore.js b/browser/components/sessionstore/src/nsSessionStore.js\\nindex c78dad4..4dd109d 100644\\n--- a/browser/components/sessionstore/src/nsSessionStore.js\\n+++ b/browser/components/sessionstore/src/nsSessionStore.js\\n@@ -52,6 +52,7 @@\\n const Cc = Components.classes;\\n const Ci = Components.interfaces;\\n const Cr = Components.results;\\n+const Cu = Components.utils;\\n \\n const CID = Components.ID(\\\"{5280606b-2510-4fe0-97ef-9b5a22eafe6b}\\\");\\n const CONTRACT_ID = \\\"@mozilla.org/browser/sessionstore;1\\\";\\n@@ -100,7 +101,10 @@ const CAPABILITIES = [\\n ];\\n \\n // sandbox to evaluate JavaScript code from non-trustable sources\\n-var EVAL_SANDBOX = new Components.utils.Sandbox(\\\"about:blank\\\");\\n+var EVAL_SANDBOX = new Cu.Sandbox(\\\"about:blank\\\");\\n+\\n+// module for JSON conversion (needed for the nsISessionStore API)\\n+Cu.import(\\\"resource://gre/modules/JSON.jsm\\\");\\n \\n function debug(aMsg) {\\n   aMsg = (\\\"SessionStore: \\\" + aMsg).replace(/\\\\S{80}/g, \\\"$&\\\\n\\\");\\n@@ -1618,7 +1622,7 @@ SessionStoreService.prototype = {\\n       try {\\n         cookieManager.add(cookie.host, cookie.path || \\\"\\\", cookie.name || \\\"\\\", cookie.value, !!cookie.secure, !!cookie.httponly, true, \\\"expiry\\\" in cookie ? cookie.expiry : MAX_EXPIRY);\\n       }\\n-      catch (ex) { Components.utils.reportError(ex); } // don't let a single cookie stop recovering\\n+      catch (ex) { Cu.reportError(ex); } // don't let a single cookie stop recovering\\n     }\\n   },\\n \\n@@ -1909,12 +1913,12 @@ SessionStoreService.prototype = {\\n    * safe eval'ing\\n    */\\n   _safeEval: function sss_safeEval(aStr) {\\n-    return Components.utils.evalInSandbox(aStr, EVAL_SANDBOX);\\n+    return Cu.evalInSandbox(aStr, EVAL_SANDBOX);\\n   },\\n \\n   /**\\n    * Converts a JavaScript object into a JSON string\\n-   * (see http://www.json.org/ for the full grammar).\\n+   * (see http://www.json.org/ for more information).\\n    *\\n    * The inverse operation consists of eval(\\\"(\\\" + JSON_string + \\\")\\\");\\n    * and should be provably safe.\\n@@ -1923,73 +1927,13 @@ SessionStoreService.prototype = {\\n    * @return the object's JSON representation\\n    */\\n   _toJSONString: function sss_toJSONString(aJSObject) {\\n-    // these characters have a special escape notation\\n-    const charMap = { \\\"\\\\b\\\": \\\"\\\\\\\\b\\\", \\\"\\\\t\\\": \\\"\\\\\\\\t\\\", \\\"\\\\n\\\": \\\"\\\\\\\\n\\\", \\\"\\\\f\\\": \\\"\\\\\\\\f\\\",\\n-                      \\\"\\\\r\\\": \\\"\\\\\\\\r\\\", '\\\"': '\\\\\\\\\\\"', \\\"\\\\\\\\\\\": \\\"\\\\\\\\\\\\\\\\\\\" };\\n-    // we use a single string builder for efficiency reasons\\n-    var parts = [];\\n-    \\n-    // this recursive function walks through all objects and appends their\\n-    // JSON representation to the string builder\\n-    function jsonIfy(aObj) {\\n-      if (typeof aObj == \\\"boolean\\\") {\\n-        parts.push(aObj ? \\\"true\\\" : \\\"false\\\");\\n-      }\\n-      else if (typeof aObj == \\\"number\\\" && isFinite(aObj)) {\\n-        // there is no representation for infinite numbers or for NaN!\\n-        parts.push(aObj.toString());\\n-      }\\n-      else if (typeof aObj == \\\"string\\\") {\\n-        aObj = aObj.replace(/[\\\\\\\\\\\"\\\\x00-\\\\x1F\\\\u0080-\\\\uFFFF]/g, function($0) {\\n-          // use the special escape notation if one exists, otherwise\\n-          // produce a general unicode escape sequence\\n-          return charMap[$0] ||\\n-            \\\"\\\\\\\\u\\\" + (\\\"0000\\\" + $0.charCodeAt(0).toString(16)).slice(-4);\\n-        });\\n-        parts.push('\\\"' + aObj + '\\\"')\\n-      }\\n-      else if (aObj == null) {\\n-        parts.push(\\\"null\\\");\\n-      }\\n-      else if (aObj instanceof Array || aObj instanceof EVAL_SANDBOX.Array) {\\n-        parts.push(\\\"[\\\");\\n-        for (var i = 0; i < aObj.length; i++) {\\n-          jsonIfy(aObj[i]);\\n-          parts.push(\\\",\\\");\\n-        }\\n-        if (parts[parts.length - 1] == \\\",\\\")\\n-          parts.pop(); // drop the trailing colon\\n-        parts.push(\\\"]\\\");\\n-      }\\n-      else if (typeof aObj == \\\"object\\\") {\\n-        parts.push(\\\"{\\\");\\n-        for (var key in aObj) {\\n-          if (key == \\\"_tab\\\")\\n-            continue; // XXXzeniko we might even want to drop all private members\\n-          \\n-          jsonIfy(key.toString());\\n-          parts.push(\\\":\\\");\\n-          jsonIfy(aObj[key]);\\n-          parts.push(\\\",\\\");\\n-        }\\n-        if (parts[parts.length - 1] == \\\",\\\")\\n-          parts.pop(); // drop the trailing colon\\n-        parts.push(\\\"}\\\");\\n-      }\\n-      else {\\n-        throw new Error(\\\"No JSON representation for this object!\\\");\\n-      }\\n-    }\\n-    jsonIfy(aJSObject);\\n+    var str = JSON.toString(aJSObject, [\\\"_tab\\\", \\\"_hosts\\\"] /* keys to drop */);\\n     \\n-    var newJSONString = parts.join(\\\" \\\");\\n     // sanity check - so that API consumers can just eval this string\\n-    if (/[^,:{}\\\\[\\\\]0-9.\\\\-+Eaeflnr-u \\\\n\\\\r\\\\t]/.test(\\n-      newJSONString.replace(/\\\"(\\\\\\\\.|[^\\\"\\\\\\\\])*\\\"/g, \\\"\\\")\\n-    ))\\n+    if (!JSON.isMostlyHarmless(str))\\n       throw new Error(\\\"JSON conversion failed unexpectedly!\\\");\\n     \\n-    return newJSONString;\\n+    return str;\\n   },\\n \\n /* ........ Storage API .............. */\\ndiff --git a/js/src/xpconnect/loader/JSON.jsm b/js/src/xpconnect/loader/JSON.jsm\\nnew file mode 100644\\nindex 0000000..13b47a2\\n--- /dev/null\\n+++ b/js/src/xpconnect/loader/JSON.jsm\\n@@ -0,0 +1,174 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is Mozilla code.\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Simon BÃ¼nzli <zeniko@gmail.com>\\n+ * Portions created by the Initial Developer are Copyright (C) 2006-2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+/**\\n+ * Utilities for JavaScript code to handle JSON content.\\n+ * See http://www.json.org/ for comprehensive information about JSON.\\n+ *\\n+ * Import this module through\\n+ *\\n+ * Components.utils.import(\\\"resource://gre/modules/JSON.jsm\\\");\\n+ *\\n+ * Usage:\\n+ *\\n+ * var newJSONString = JSON.toString( GIVEN_JAVASCRIPT_OBJECT );\\n+ * var newJavaScriptObject = JSON.fromString( GIVEN_JSON_STRING );\\n+ *\\n+ * Note: For your own safety, Objects/Arrays returned by\\n+ *       JSON.fromString aren't instanceof Object/Array.\\n+ */\\n+\\n+EXPORTED_SYMBOLS = [\\\"JSON\\\"];\\n+\\n+// The following code is a loose adaption of Douglas Crockford's code\\n+// from http://www.json.org/json.js (public domain'd)\\n+\\n+// Notable differences:\\n+// * Unserializable values such as |undefined| or functions aren't\\n+//   silently dropped but always lead to a TypeError.\\n+// * An optional key blacklist has been added to JSON.toString\\n+\\n+var JSON = {\\n+  /**\\n+   * Converts a JavaScript object into a JSON string.\\n+   *\\n+   * @param aJSObject is the object to be converted\\n+   * @param aKeysToDrop is an optional array of keys which will be\\n+   *                    ignored in all objects during the serialization\\n+   * @return the object's JSON representation\\n+   *\\n+   * Note: aJSObject MUST not contain cyclic references.\\n+   */\\n+  toString: function JSON_toString(aJSObject, aKeysToDrop) {\\n+    // these characters have a special escape notation\\n+    const charMap = { \\\"\\\\b\\\": \\\"\\\\\\\\b\\\", \\\"\\\\t\\\": \\\"\\\\\\\\t\\\", \\\"\\\\n\\\": \\\"\\\\\\\\n\\\", \\\"\\\\f\\\": \\\"\\\\\\\\f\\\",\\n+                      \\\"\\\\r\\\": \\\"\\\\\\\\r\\\", '\\\"': '\\\\\\\\\\\"', \\\"\\\\\\\\\\\": \\\"\\\\\\\\\\\\\\\\\\\" };\\n+    \\n+    // we use a single string builder for efficiency reasons\\n+    var pieces = [];\\n+    \\n+    // this recursive function walks through all objects and appends their\\n+    // JSON representation (in one or several pieces) to the string builder\\n+    function append_piece(aObj) {\\n+      if (typeof aObj == \\\"boolean\\\") {\\n+        pieces.push(aObj ? \\\"true\\\" : \\\"false\\\");\\n+      }\\n+      else if (typeof aObj == \\\"number\\\" && isFinite(aObj)) {\\n+        // there is no representation for infinite numbers or for NaN!\\n+        pieces.push(aObj.toString());\\n+      }\\n+      else if (typeof aObj == \\\"string\\\") {\\n+        aObj = aObj.replace(/[\\\\\\\\\\\"\\\\x00-\\\\x1F\\\\u0080-\\\\uFFFF]/g, function($0) {\\n+          // use the special escape notation if one exists, otherwise\\n+          // produce a general unicode escape sequence\\n+          return charMap[$0] ||\\n+            \\\"\\\\\\\\u\\\" + (\\\"0000\\\" + $0.charCodeAt(0).toString(16)).slice(-4);\\n+        });\\n+        pieces.push('\\\"' + aObj + '\\\"')\\n+      }\\n+      else if (aObj === null) {\\n+        pieces.push(\\\"null\\\");\\n+      }\\n+      // if it looks like an array, treat it as such - this is required\\n+      // for all arrays from either outside this module or a sandbox\\n+      else if (aObj instanceof Array ||\\n+               typeof aObj == \\\"object\\\" && \\\"length\\\" in aObj &&\\n+               (aObj.length === 0 || aObj[aObj.length - 1] !== undefined)) {\\n+        pieces.push(\\\"[\\\");\\n+        for (var i = 0; i < aObj.length; i++) {\\n+          append_piece(aObj[i]);\\n+          pieces.push(\\\",\\\");\\n+        }\\n+        if (pieces[pieces.length - 1] == \\\",\\\")\\n+          pieces.pop(); // drop the trailing colon\\n+        pieces.push(\\\"]\\\");\\n+      }\\n+      else if (typeof aObj == \\\"object\\\") {\\n+        pieces.push(\\\"{\\\");\\n+        for (var key in aObj) {\\n+          // allow callers to pass objects containing private data which\\n+          // they don't want the JSON string to contain (so they don't\\n+          // have to manually pre-process the object)\\n+          if (aKeysToDrop && aKeysToDrop.indexOf(key) != -1)\\n+            continue;\\n+          \\n+          append_piece(key.toString());\\n+          pieces.push(\\\":\\\");\\n+          append_piece(aObj[key]);\\n+          pieces.push(\\\",\\\");\\n+        }\\n+        if (pieces[pieces.length - 1] == \\\",\\\")\\n+          pieces.pop(); // drop the trailing colon\\n+        pieces.push(\\\"}\\\");\\n+      }\\n+      else {\\n+        throw new TypeError(\\\"No JSON representation for this object!\\\");\\n+      }\\n+    }\\n+    append_piece(aJSObject);\\n+    \\n+    return pieces.join(\\\"\\\");\\n+  },\\n+\\n+  /**\\n+   * Converts a JSON string into a JavaScript object.\\n+   *\\n+   * @param aJSONString is the string to be converted\\n+   * @return a JavaScript object for the given JSON representation\\n+   */\\n+  fromString: function JSON_fromString(aJSONString) {\\n+    if (!this.isMostlyHarmless(aJSONString))\\n+      throw new SyntaxError(\\\"No valid JSON string!\\\");\\n+    \\n+    var s = new Components.utils.Sandbox(\\\"about:blank\\\");\\n+    return Components.utils.evalInSandbox(\\\"(\\\" + aJSONString + \\\")\\\", s);\\n+  },\\n+\\n+  /**\\n+   * Checks whether the given string contains potentially harmful\\n+   * content which might be executed during its evaluation\\n+   * (no parser, thus not 100% safe! Best to use a Sandbox for evaluation)\\n+   *\\n+   * @param aString is the string to be tested\\n+   * @return a boolean\\n+   */\\n+  isMostlyHarmless: function JSON_isMostlyHarmless(aString) {\\n+    const maybeHarmful = /[^,:{}\\\\[\\\\]0-9.\\\\-+Eaeflnr-u \\\\n\\\\r\\\\t]/;\\n+    const jsonStrings = /\\\"(\\\\\\\\.|[^\\\"\\\\\\\\\\\\n\\\\r])*\\\"/g;\\n+    \\n+    return !maybeHarmful.test(aString.replace(jsonStrings, \\\"\\\"));\\n+  }\\n+};\\ndiff --git a/js/src/xpconnect/loader/Makefile.in b/js/src/xpconnect/loader/Makefile.in\\nindex 9571a19..8804e7e 100644\\n--- a/js/src/xpconnect/loader/Makefile.in\\n+++ b/js/src/xpconnect/loader/Makefile.in\\n@@ -56,7 +56,7 @@ REQUIRES\\t= xpcom \\\\\\n \\n CPPSRCS\\t\\t= mozJSComponentLoader.cpp mozJSSubScriptLoader.cpp\\n \\n-EXTRA_JS_MODULES = XPCOMUtils.jsm\\n+EXTRA_JS_MODULES = XPCOMUtils.jsm JSON.jsm\\n \\n include $(topsrcdir)/config/rules.mk\\n \\ndiff --git a/js/src/xpconnect/tests/unit/test_json.js b/js/src/xpconnect/tests/unit/test_json.js\\nnew file mode 100644\\nindex 0000000..2a27023\\n--- /dev/null\\n+++ b/js/src/xpconnect/tests/unit/test_json.js\\n@@ -0,0 +1,129 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is mozilla.org code.\\n+ *\\n+ * The Initial Developer of the Original Code is\\n+ * Simon BÃ¼nzli <zeniko@gmail.com>\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+function run_test() {\\n+  // converts an object to a JSON string and tests its integrity\\n+  function toJSONString(a) {\\n+    var res = JSON.toString(a);\\n+    if (!JSON.isMostlyHarmless(res))\\n+      throw new SyntaxError(\\\"Invalid JSON string: \\\" + res);\\n+    return res;\\n+  }\\n+  \\n+  // ensures that an object can't be converted to a JSON string\\n+  function isInvalidType(a) {\\n+    try {\\n+      JSON.toString(a);\\n+      return false;\\n+    } catch (ex) {\\n+      return ex instanceof TypeError;\\n+    }\\n+  }\\n+  // ensures that a string can't be converted back to a JavaScript object\\n+  function isInvalidSyntax(a) {\\n+    try {\\n+      JSON.fromString(a);\\n+      return false;\\n+    } catch (ex) {\\n+      return ex instanceof SyntaxError;\\n+    }\\n+  }\\n+  \\n+  Components.utils.import(\\\"resource://gre/modules/JSON.jsm\\\");\\n+  do_check_eq(typeof(JSON), \\\"object\\\");\\n+  \\n+  // some of the tests are adapted from /testing/mochitest/tests/test_Base.js\\n+  do_check_eq(toJSONString(true), \\\"true\\\");\\n+  do_check_eq(toJSONString(false), \\\"false\\\");\\n+  \\n+  do_check_eq(toJSONString(1), \\\"1\\\");\\n+  do_check_eq(toJSONString(1.23), \\\"1.23\\\");\\n+  do_check_eq(toJSONString(1.23e-45), \\\"1.23e-45\\\");\\n+  \\n+  do_check_true(isInvalidType(Infinity));\\n+  do_check_true(isInvalidType(NaN));\\n+  \\n+  do_check_eq(toJSONString(\\\"Foo-Bar \\\\b\\\\t\\\\n\\\\f\\\\r\\\\\\\"\\\\\\\\ \\\\x01â¬\\\"),\\n+              '\\\"Foo-Bar \\\\\\\\b\\\\\\\\t\\\\\\\\n\\\\\\\\f\\\\\\\\r\\\\\\\\\\\"\\\\\\\\\\\\\\\\ \\\\\\\\u0001\\\\\\\\u20ac\\\"');\\n+  \\n+  do_check_eq(toJSONString(null), \\\"null\\\");\\n+  do_check_true(isInvalidType(undefined));\\n+  \\n+  do_check_eq(toJSONString([1, \\\"2\\\", 3.3]), '[1,\\\"2\\\",3.3]');\\n+  // duck-typed Array (since we'll never really get something instanceof Array)\\n+  do_check_eq(toJSONString({ 0: 0, 1: \\\"1\\\", 2: -2.2, length: 3 }), '[0,\\\"1\\\",-2.2]');\\n+  \\n+  var obj = { a: 1, b: \\\"2\\\", c: [-3e+30] };\\n+  do_check_eq(toJSONString(obj), '{\\\"a\\\":1,\\\"b\\\":\\\"2\\\",\\\"c\\\":[-3e+30]}');\\n+  do_check_eq(JSON.toString(obj, [\\\"b\\\", \\\"c\\\"] /* keys to drop */), '{\\\"a\\\":1}');\\n+  \\n+  do_check_true(isInvalidType(function() { }));\\n+  \\n+  // make sure that toJSONString actually works...\\n+  do_check_eq(toJSONString(obj), JSON.toString(obj));\\n+  \\n+  do_check_eq(JSON.fromString(\\\"true\\\"), true);\\n+  do_check_eq(JSON.fromString(\\\"false\\\"), false);\\n+  do_check_eq(JSON.fromString(\\\"1\\\"), 1);\\n+  do_check_eq(JSON.fromString('\\\"2.2\\\"'), \\\"2.2\\\");\\n+  do_check_eq(JSON.fromString(\\\"1.23e-45\\\"), 1.23e-45);\\n+  do_check_true(isInvalidSyntax(\\\"NaN\\\"));\\n+  do_check_eq(JSON.fromString('\\\"Foo-Bar \\\\\\\\b\\\\\\\\t\\\\\\\\n\\\\\\\\f\\\\\\\\r\\\\\\\\\\\"\\\\\\\\\\\\\\\\ \\\\\\\\u0001\\\\\\\\u20ac\\\"'),\\n+                              \\\"Foo-Bar \\\\b\\\\t\\\\n\\\\f\\\\r\\\\\\\"\\\\\\\\ \\\\x01â¬\\\");\\n+  do_check_true(isInvalidSyntax('\\\"multi\\\\nline\\\"'));\\n+  do_check_eq(JSON.fromString(\\\"null\\\"), null);\\n+  do_check_true(isInvalidSyntax(\\\".\\\"));\\n+  \\n+  var res = JSON.fromString('[1,\\\"2\\\",3.3]');\\n+  do_check_eq(res.length, 3);\\n+  do_check_eq(res[2], 3.3);\\n+  // res is an instance of the sandbox's array\\n+  do_check_false(res instanceof Array);\\n+  \\n+  res = JSON.fromString(toJSONString(obj));\\n+  do_check_eq(res.a, obj.a);\\n+  do_check_eq(res.b, obj.b);\\n+  do_check_eq(res.c.length, obj.c.length);\\n+  do_check_eq(res.c[0], obj.c[0]);\\n+  \\n+  // those would throw on JSON.fromString if there's no object |a|\\n+  do_check_true(JSON.isMostlyHarmless(\\\"a\\\"));\\n+  do_check_true(JSON.isMostlyHarmless(\\\"a[0]\\\"));\\n+  do_check_true(JSON.isMostlyHarmless('a[\\\"alert(\\\\\\\\\\\"P0wn3d!\\\\\\\\\\\");\\\"]'));\\n+  \\n+  do_check_false(JSON.isMostlyHarmless('(function() { alert(\\\"P0wn3d!\\\"); })()'));\\n+  do_check_false(JSON.isMostlyHarmless('{ get a() { return \\\"P0wn3d!\\\"; } }'));\\n+}\\n\""}