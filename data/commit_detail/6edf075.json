{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas6edf075\""},"diff":"\"6edf075 Bug 397728 revesed logic in nsAccessible::IsValid r=aaronleventhal a=dsicore\\ndiff --git a/accessible/src/base/nsAccessible.cpp b/accessible/src/base/nsAccessible.cpp\\nindex a00e854..cd0e38d 100644\\n--- a/accessible/src/base/nsAccessible.cpp\\n+++ b/accessible/src/base/nsAccessible.cpp\\n@@ -3085,7 +3085,7 @@ NS_IMETHODIMP nsAccessible::GetObject(PRInt32 aIndex,\\n NS_IMETHODIMP nsAccessible::IsValid(PRBool *aIsValid)\\n {\\n   PRUint32 state = State(this);\\n-  *aIsValid = (state & nsIAccessibleStates::STATE_INVALID) != 0;\\n+  *aIsValid = (0 == (state & nsIAccessibleStates::STATE_INVALID));\\n   // XXX In order to implement this we would need to follow every link\\n   // Perhaps we can get information about invalid links from the cache\\n   // In the mean time authors can use role=\\\"wairole:link\\\" aaa:invalid=\\\"true\\\"\\n\""}