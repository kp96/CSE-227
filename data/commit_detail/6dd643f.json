{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas6dd643f\""},"diff":"\"6dd643f [OS/2] Bug 396767: fix OS/2 build break in widget following bug 394691, p=wuno, r=me/chris@pearce\\ndiff --git a/widget/src/os2/nsClipboard.cpp b/widget/src/os2/nsClipboard.cpp\\nindex be72497..596fadf 100644\\n--- a/widget/src/os2/nsClipboard.cpp\\n+++ b/widget/src/os2/nsClipboard.cpp\\n@@ -157,7 +157,7 @@ PRBool nsClipboard::GetClipboardDataByID(ULONG ulFormatID, const char *aFlavor)\\n         PRInt32 bufLength;\\n         MultiByteToWideChar(0, static_cast<char*>(pDataMem), NumOfChars,\\n                             buffer, bufLength);\\n-        pDataMem = ToNewUnicode(nsDependentString(buffer.get()));\\n+        pDataMem = ToNewUnicode(nsDependentString(buffer.Elements()));\\n         TempBufAllocated = PR_TRUE;\\n         NumOfBytes = bufLength * sizeof(UniChar);\\n       }\\n@@ -321,7 +321,7 @@ void nsClipboard::SetClipboardData(const char *aFlavor)\\n           PRInt32 bufLength;\\n           WideCharToMultiByte(0, static_cast<PRUnichar*>(pMozData),\\n                               NumOfBytes, buffer, bufLength);\\n-          memcpy(pByteMem, buffer.get(), NumOfBytes);\\n+          memcpy(pByteMem, buffer.Elements(), NumOfBytes);\\n           // With Warp4 copying more than 64K to the clipboard works well, but\\n           // legacy apps cannot always handle it. So output an alarm to alert the\\n           // user that there might be a problem.\\ndiff --git a/widget/src/os2/nsDeviceContextSpecOS2.cpp b/widget/src/os2/nsDeviceContextSpecOS2.cpp\\nindex 3b7ec4c..75ac976 100644\\n--- a/widget/src/os2/nsDeviceContextSpecOS2.cpp\\n+++ b/widget/src/os2/nsDeviceContextSpecOS2.cpp\\n@@ -472,7 +472,7 @@ nsresult GlobalPrinters::InitializeGlobalPrinters ()\\n     PRInt32 printerNameLength;\\n     rv = MultiByteToWideChar(0, printer, strlen(printer),\\n                              printerName, printerNameLength);\\n-    mGlobalPrinterList->AppendString(nsDependentString(printerName.get()));\\n+    mGlobalPrinterList->AppendString(nsDependentString(printerName.Elements()));\\n \\n     // store printer description in prefs for the print dialog\\n     if (!prefFailed) {\\n@@ -509,7 +509,7 @@ void GlobalPrinters::GetDefaultPrinterName(PRUnichar*& aDefaultPrinterName)\\n   PRInt32 printerNameLength;\\n   MultiByteToWideChar(0, printer, strlen(printer), printerName,\\n                       printerNameLength);\\n-  aDefaultPrinterName = ToNewUnicode(nsDependentString(printerName.get()));\\n+  aDefaultPrinterName = ToNewUnicode(nsDependentString(printerName.Elements()));\\n \\n   GlobalPrinters::GetInstance()->FreeGlobalPrinters();\\n }\\ndiff --git a/widget/src/os2/nsDragService.cpp b/widget/src/os2/nsDragService.cpp\\nindex 60e6870..01074de 100644\\n--- a/widget/src/os2/nsDragService.cpp\\n+++ b/widget/src/os2/nsDragService.cpp\\n@@ -1742,7 +1742,7 @@ int UnicodeToCodepage(const nsAString& aString, char **aResult)\\n   PRInt32 bufLength;\\n   WideCharToMultiByte(0, PromiseFlatString(aString).get(), aString.Length(),\\n                       buffer, bufLength);\\n-  *aResult = ToNewCString(nsDependentCString(buffer.get()));\\n+  *aResult = ToNewCString(nsDependentCString(buffer.Elements()));\\n   return bufLength;\\n }\\n \\n@@ -1754,7 +1754,7 @@ int CodepageToUnicode(const nsACString& aString, PRUnichar **aResult)\\n   PRInt32 bufLength;\\n   MultiByteToWideChar(0, PromiseFlatCString(aString).get(),\\n                       aString.Length(), buffer, bufLength);\\n-  *aResult = ToNewUnicode(nsDependentString(buffer.get()));\\n+  *aResult = ToNewUnicode(nsDependentString(buffer.Elements()));\\n   return bufLength;\\n }\\n \\ndiff --git a/widget/src/os2/nsFilePicker.cpp b/widget/src/os2/nsFilePicker.cpp\\nindex 4210363..9a68c0d 100644\\n--- a/widget/src/os2/nsFilePicker.cpp\\n+++ b/widget/src/os2/nsFilePicker.cpp\\n@@ -201,7 +201,7 @@ NS_IMETHODIMP nsFilePicker::Show(PRInt16 *retval)\\n       PRInt32 bufLength;\\n       WideCharToMultiByte(0, typeWide.get(), typeWide.Length(),\\n                           buffer, bufLength);\\n-      apszTypeList[i] = ToNewCString(nsDependentCString(buffer.get()));\\n+      apszTypeList[i] = ToNewCString(nsDependentCString(buffer.Elements()));\\n     }\\n     apszTypeList[i] = 0;\\n     filedlg.papszITypeList = (PAPSZ)apszTypeList;\\ndiff --git a/widget/src/os2/nsWindow.cpp b/widget/src/os2/nsWindow.cpp\\nindex c00905c..580ec3d 100644\\n--- a/widget/src/os2/nsWindow.cpp\\n+++ b/widget/src/os2/nsWindow.cpp\\n@@ -1679,7 +1679,7 @@ NS_METHOD nsWindow::SetFont(const nsFont &aFont)\\n \\n       char *buffer = new char[fontnameLength + 6];\\n       if (buffer) {\\n-        sprintf(buffer, \\\"%d.%s\\\", points, fontname.get());\\n+        sprintf(buffer, \\\"%d.%s\\\", points, fontname.Elements());\\n         ::WinSetPresParam(mWnd, PP_FONTNAMESIZE,\\n                           strlen(buffer) + 1, buffer);\\n         delete [] buffer;\\n@@ -2530,7 +2530,7 @@ PRBool nsWindow::OnKey(MPARAM mp1, MPARAM mp2)\\n     PRInt32 bufLength;\\n     MultiByteToWideChar(0, (const char*)inbuf, 2, outbuf, bufLength);\\n \\n-    pressEvent.charCode = outbuf.get()[0];\\n+    pressEvent.charCode = outbuf[0];\\n \\n     if (pressEvent.isControl && !(fsFlags & (KC_VIRTUALKEY | KC_DEADKEY))) {\\n       if (!pressEvent.isShift && (pressEvent.charCode >= 'A' && pressEvent.charCode <= 'Z')) {\\n@@ -3596,15 +3596,15 @@ NS_METHOD nsWindow::SetTitle(const nsAString& aTitle)\\n       PRInt32 titleLength;\\n       WideCharToMultiByte(0, uchtemp, aTitle.Length(), title, titleLength);\\n       if (titleLength > MAX_TITLEBAR_LENGTH) {\\n-        title.get()[MAX_TITLEBAR_LENGTH] = '\\\\0';\\n+        title[MAX_TITLEBAR_LENGTH] = '\\\\0';\\n       }\\n-      ::WinSetWindowText(GetMainWindow(), title.get());\\n+      ::WinSetWindowText(GetMainWindow(), title.Elements());\\n       if (mChromeHidden) {\\n          /* If the chrome is hidden, set the text of the titlebar directly */\\n          if (mFrameWnd) {\\n             HWND hwndTitleBar = (HWND)::WinQueryProperty(mFrameWnd,\\n                                                          \\\"hwndTitleBar\\\");\\n-            ::WinSetWindowText(hwndTitleBar, title.get());\\n+            ::WinSetWindowText(hwndTitleBar, title.Elements());\\n          }\\n       }\\n       nsMemory::Free(uchtemp);\\n\""}