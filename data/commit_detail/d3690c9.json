{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basd3690c9\""},"diff":"\"d3690c9 fix for bug #390433: [Vista]  Users that are not a member of the administrators group receive update notification. r=rstrong\\ndiff --git a/toolkit/mozapps/update/src/nsUpdateService.js.in b/toolkit/mozapps/update/src/nsUpdateService.js.in\\nindex 03a12c2..2532252 100644\\n--- a/toolkit/mozapps/update/src/nsUpdateService.js.in\\n+++ b/toolkit/mozapps/update/src/nsUpdateService.js.in\\n@@ -1499,22 +1499,70 @@ UpdateService.prototype = {\\n         Components.classes[\\\"@mozilla.org/system-info;1\\\"]\\n                   .getService(Components.interfaces.nsIPropertyBag2);\\n \\n+      // Example windowsVersion:  Windows XP == 5.1\\n+      var windowsVersion = sysInfo.getProperty(\\\"version\\\");\\n+      LOG(\\\"UpdateService\\\", \\\"canUpdate?  windowsVersion = \\\" + windowsVersion);\\n+\\n+      // For Vista, updates can be performed to a location requiring \\n+      // admin privileges by requesting elevation via the UAC prompt when \\n+      // launching updater.exe if the appDir is under the Program Files \\n+      // directory (e.g. C:\\\\Program Files\\\\) and UAC is turned on and \\n+      // we can elevate (e.g. user has a split token)\\n+      //\\n+      // Note: this does note attempt to handle the case where UAC is\\n+      // turned on and the installation directory is in a restricted\\n+      // location that requires admin privileges to update other than \\n+      // Program Files.\\n+\\n+      var userCanElevate = false;\\n+\\n+      if (parseFloat(windowsVersion) >= 6) {\\n+        try {\\n+          var fileLocator = \\n+            Components.classes[\\\"@mozilla.org/file/directory_service;1\\\"]\\n+                      .getService(Components.interfaces.nsIProperties);\\n+          // KEY_UPDROOT will fail and throw an exception if\\n+          // appDir is not under the Program Files, so we rely on that\\n+          var dir = fileLocator.get(KEY_UPDROOT, Components.interfaces.nsIFile);\\n+          // appDir is under Program Files, so check if the user can elevate\\n+          userCanElevate = \\n+            gApp.QueryInterface(Components.interfaces.nsIWinAppHelper)\\n+                .userCanElevate;\\n+          LOG(\\\"UpdateService\\\", \\n+              \\\"canUpdate?  on Vista, userCanElevate = \\\" + userCanElevate);\\n+        }\\n+        catch (ex) {\\n+          // When the installation directory is not under Program Files,\\n+          // fall through to checking if write access to the \\n+          // installation directory is available.\\n+          LOG(\\\"UpdateService\\\", \\n+              \\\"canUpdate?  on Vista, appDir is not under the Program Files\\\");\\n+        }\\n+      }\\n+\\n       // On Windows, we no longer store the update under the app dir\\n       // if the app dir is under C:\\\\Program Files.\\n       //\\n-      // If we are on Windows, but not Vista, we need to check that\\n+      // If we are on Windows (including Vista, if we can't elevate)\\n+      // we need to check that\\n       // we can create and remove files from the actual app directory\\n-      // (like C:\\\\Program Files\\\\Mozilla Firefox).  If we can't,\\n-      // because this user is not an adminstrator, for example\\n-      // canUpdate() should return false (like it used to).\\n+      // (like C:\\\\Program Files\\\\Mozilla Firefox).  If we can't\\n+      // (because this user is not an adminstrator, for example)\\n+      // canUpdate() should return false.\\n       //\\n-      // For Vista, don't perform this check because non-admin users\\n-      // can update firefox (by granting the updater access via the\\n-      // UAC prompt)\\n-      var windowsVersion = sysInfo.getProperty(\\\"version\\\");\\n-      LOG(\\\"UpdateService\\\", \\\"canUpdate?  version = \\\" + windowsVersion);\\n-      // Example windowsVersion:  Windows XP == 5.1\\n-      if (parseFloat(windowsVersion) < 6) {\\n+      // For Vista, we perform this check to enable updating the \\n+      // application when the user has write access to the installation \\n+      // directory under the following scenarios:\\n+      // 1) the installation directory is not under Program Files \\n+      //    (e.g. C:\\\\Program Files)\\n+      // 2) UAC is turned off\\n+      // 3) UAC is turned on and the user is not an admin \\n+      //    (e.g. the user does not have a split token)\\n+      // 4) UAC is turned on and the user is already elevated,\\n+      //    so they can't be elevated again.\\n+      if (!userCanElevate) {\\n+        // if we're unable to create the test file\\n+        // the code below will throw an exception \\n         var actualAppDir = getDir(KEY_APPDIR, []);\\n         var actualAppDirFile = actualAppDir.clone();\\n         actualAppDirFile.append(FILE_PERMS_TEST);\\ndiff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp\\nindex 9542175..6cc0b24 100644\\n--- a/toolkit/xre/nsAppRunner.cpp\\n+++ b/toolkit/xre/nsAppRunner.cpp\\n@@ -755,6 +755,51 @@ nsXULAppInfo::PostUpdate(nsILocalFile *aLogFile)\\n   free(upgradeArgv);\\n   return rv;\\n }\\n+\\n+// Matches the enum in WinNT.h for the Vista SDK but renamed so that we can\\n+// safely build with the Vista SDK and without it.\\n+typedef enum \\n+{\\n+  VistaTokenElevationTypeDefault = 1,\\n+  VistaTokenElevationTypeFull,\\n+  VistaTokenElevationTypeLimited\\n+} VISTA_TOKEN_ELEVATION_TYPE;\\n+\\n+// avoid collision with TokeElevationType enum in WinNT.h\\n+// of the Vista SDK\\n+#define VistaTokenElevationType static_cast< TOKEN_INFORMATION_CLASS >( 18 )\\n+\\n+NS_IMETHODIMP\\n+nsXULAppInfo::GetUserCanElevate(PRBool *aUserCanElevate)\\n+{\\n+  HANDLE hToken;\\n+\\n+  VISTA_TOKEN_ELEVATION_TYPE elevationType;\\n+  DWORD dwSize; \\n+\\n+  if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &hToken) ||\\n+      !GetTokenInformation(hToken, VistaTokenElevationType, &elevationType,\\n+                           sizeof(elevationType), &dwSize)) {\\n+    *aUserCanElevate = PR_FALSE;\\n+  } \\n+  else {\\n+    // The possible values returned for elevationType and their meanings are:\\n+    //   TokenElevationTypeDefault: The token does not have a linked token \\n+    //     (e.g. UAC disabled or a standard user, so they can't be elevated)\\n+    //   TokenElevationTypeFull: The token is linked to an elevated token \\n+    //     (e.g. UAC is enabled and the user is already elevated so they can't\\n+    //      be elevated again)\\n+    //   TokenElevationTypeLimited: The token is linked to a limited token \\n+    //     (e.g. UAC is enabled and the user is not elevated, so they can be\\n+    //\\t    elevated)\\n+    *aUserCanElevate = (elevationType == VistaTokenElevationTypeLimited);\\n+  }\\n+\\n+  if (hToken)\\n+    CloseHandle(hToken);\\n+\\n+  return NS_OK;\\n+}\\n #endif\\n \\n #ifdef MOZ_CRASHREPORTER\\ndiff --git a/toolkit/xre/nsIWinAppHelper.idl b/toolkit/xre/nsIWinAppHelper.idl\\nindex 968a5bf..a1d2c38 100644\\n--- a/toolkit/xre/nsIWinAppHelper.idl\\n+++ b/toolkit/xre/nsIWinAppHelper.idl\\n@@ -46,9 +46,10 @@\\n \\n interface nsILocalFile;\\n \\n-[scriptable, uuid(575249a7-de7a-4602-a997-b7ad2b3b6dab)]\\n+[scriptable, uuid(b0fb682a-8287-4b0f-b628-65bb206c073f)]\\n interface nsIWinAppHelper : nsISupports\\n {\\n   void postUpdate(in nsILocalFile logFile);\\n   void fixReg();\\n+  readonly attribute boolean userCanElevate;\\n };\\n\""}