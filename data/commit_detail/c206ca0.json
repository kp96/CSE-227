{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basc206ca0\""},"diff":"\"c206ca0 Bug 390787 - Many fonts and widgets do not display: assert that cairo_scaled_font_create succeeds but recover if it doesn't p=Karl Tomlinson <mozbugz@karlt.net> r+sr=pavlov a=1.9 blocker\\ndiff --git a/gfx/thebes/src/gfxAtsuiFonts.cpp b/gfx/thebes/src/gfxAtsuiFonts.cpp\\nindex 4160863..075339b 100644\\n--- a/gfx/thebes/src/gfxAtsuiFonts.cpp\\n+++ b/gfx/thebes/src/gfxAtsuiFonts.cpp\\n@@ -99,6 +99,8 @@ gfxAtsuiFont::gfxAtsuiFont(ATSUFontID fontID,\\n     cairo_font_options_t *fontOptions = cairo_font_options_create();\\n     mScaledFont = cairo_scaled_font_create(mFontFace, &sizeMatrix, &ctm, fontOptions);\\n     cairo_font_options_destroy(fontOptions);\\n+    NS_ASSERTION(cairo_scaled_font_status(mScaledFont) == CAIRO_STATUS_SUCCESS,\\n+                 \\\"Failed to create scaled font\\\");\\n }\\n \\n void\\n@@ -227,11 +229,13 @@ PRBool\\n gfxAtsuiFont::SetupCairoFont(cairo_t *aCR)\\n {\\n     cairo_scaled_font_t *scaledFont = CairoScaledFont();\\n-    if (NS_LIKELY(scaledFont)) {\\n-        cairo_set_scaled_font(aCR, scaledFont);\\n-        return PR_TRUE;\\n+    if (cairo_scaled_font_status(scaledFont) != CAIRO_STATUS_SUCCESS) {\\n+        // Don't cairo_set_scaled_font as that would propagate the error to\\n+        // the cairo_t, precluding any further drawing.\\n+        return PR_FALSE;\\n     }\\n-    return PR_FALSE;\\n+    cairo_set_scaled_font(aCR, scaledFont);\\n+    return PR_TRUE;\\n }\\n \\n nsString\\n@@ -712,7 +716,7 @@ SetGlyphsForCharacterGroup(ATSLayoutRecord *aGlyphs, PRUint32 aGlyphCount,\\n             ++regularGlyphCount;\\n             displayGlyph = glyph;\\n         }\\n-        if (i > 0 && aRun->IsRightToLeft() != (offset < aGlyphs[i - 1].originalOffset)) {\\n+        if (i > 0 && aRun->IsRightToLeft() != (offset < aGlyphs[i - 1].originalOffset)) { // XXXkt allow == in RTL\\n             inOrder = PR_FALSE;\\n         }\\n     }\\ndiff --git a/gfx/thebes/src/gfxOS2Fonts.cpp b/gfx/thebes/src/gfxOS2Fonts.cpp\\nindex a4a8c0e..0c8de58 100644\\n--- a/gfx/thebes/src/gfxOS2Fonts.cpp\\n+++ b/gfx/thebes/src/gfxOS2Fonts.cpp\\n@@ -336,7 +336,8 @@ cairo_scaled_font_t *gfxOS2Font::CairoScaledFont()\\n         cairo_font_options_destroy(fontOptions);\\n     }\\n \\n-    NS_ASSERTION(mScaledFont, \\\"Failed to make scaled font\\\");\\n+    NS_ASSERTION(cairo_scaled_font_status(mScaledFont) == CAIRO_STATUS_SUCCESS,\\n+\\t\\t \\\"Failed to make scaled font\\\");\\n     return mScaledFont;\\n }\\n \\n@@ -361,11 +362,13 @@ PRBool gfxOS2Font::SetupCairoFont(cairo_t *aCR)\\n \\n     // this implicitely ensures that mScaledFont is created if NULL\\n     cairo_scaled_font_t *scaledFont = CairoScaledFont();\\n-    if (NS_LIKELY(scaledFont)) {\\n-        cairo_set_scaled_font(aCR, scaledFont);\\n-        return PR_TRUE;\\n+    if (cairo_scaled_font_status(scaledFont) != CAIRO_STATUS_SUCCESS) {\\n+        // Don't cairo_set_scaled_font as that would propagate the error to\\n+        // the cairo_t, precluding any further drawing.\\n+        return PR_FALSE;\\n     }\\n-    return PR_FALSE;\\n+    cairo_set_scaled_font(aCR, scaledFont);\\n+    return PR_TRUE;\\n }\\n \\n /**********************************************************************\\ndiff --git a/gfx/thebes/src/gfxPangoFonts.cpp b/gfx/thebes/src/gfxPangoFonts.cpp\\nindex 194a102..89e886d 100644\\n--- a/gfx/thebes/src/gfxPangoFonts.cpp\\n+++ b/gfx/thebes/src/gfxPangoFonts.cpp\\n@@ -473,8 +473,9 @@ gfxPangoFont::GetCharSize(char aChar, gfxSize& aInkSize, gfxSize& aLogSize,\\n     PangoAnalysis analysis;\\n     // Initialize new fields, gravity and flags in pango 1.16\\n     // (or padding in 1.14).\\n-    // See bug #378700 for why we are using memset instead of { 0 }\\n-    // aggregate initialization.\\n+    // Use memset instead of { 0 } aggregate initialization or placement new\\n+    // default initialization so that padding (which may have meaning in other\\n+    // versions) is initialized.\\n     memset(&analysis, 0, sizeof(analysis));\\n     analysis.font = GetPangoFont();\\n     analysis.language = pango_language_from_string(\\\"en\\\");\\n@@ -924,22 +925,23 @@ gfxPangoFont::SetupCairoFont(cairo_t *aCR)\\n         // Need to validate that its CTM is OK\\n         cairo_matrix_t fontCTM;\\n         cairo_scaled_font_get_ctm(mCairoFont, &fontCTM);\\n-        if (fontCTM.xx == currentCTM.xx && fontCTM.yy == currentCTM.yy &&\\n-            fontCTM.xy == currentCTM.xy && fontCTM.yx == currentCTM.yx) {\\n-            cairo_set_scaled_font(aCR, mCairoFont);\\n-            return PR_TRUE;\\n+        if (fontCTM.xx != currentCTM.xx || fontCTM.yy != currentCTM.yy ||\\n+            fontCTM.xy != currentCTM.xy || fontCTM.yx != currentCTM.yx) {\\n+            // Just recreate it from scratch, simplest way\\n+            cairo_scaled_font_destroy(mCairoFont);\\n+            mCairoFont = nsnull;\\n         }\\n-\\n-        // Just recreate it from scratch, simplest way\\n-        cairo_scaled_font_destroy(mCairoFont);\\n     }\\n-\\n-    mCairoFont = CreateScaledFont(aCR, &currentCTM, GetPangoFont());\\n-    if (NS_LIKELY(mCairoFont)) {\\n-        cairo_set_scaled_font(aCR, mCairoFont);\\n-        return PR_TRUE;\\n+    if (!mCairoFont) {\\n+        mCairoFont = CreateScaledFont(aCR, &currentCTM, GetPangoFont());\\n     }\\n-    return PR_FALSE;\\n+    if (cairo_scaled_font_status(mCairoFont) != CAIRO_STATUS_SUCCESS) {\\n+        // Don't cairo_set_scaled_font as that would propagate the error to\\n+        // the cairo_t, precluding any further drawing.\\n+        return PR_FALSE;\\n+    }\\n+    cairo_set_scaled_font(aCR, mCairoFont);\\n+    return PR_TRUE;\\n }\\n \\n static void\\ndiff --git a/gfx/thebes/src/gfxWindowsFonts.cpp b/gfx/thebes/src/gfxWindowsFonts.cpp\\nindex 6ae5cbe..053aec9 100644\\n--- a/gfx/thebes/src/gfxWindowsFonts.cpp\\n+++ b/gfx/thebes/src/gfxWindowsFonts.cpp\\n@@ -178,7 +178,8 @@ gfxWindowsFont::CairoScaledFont()\\n         cairo_font_options_destroy(fontOptions);\\n     }\\n \\n-    NS_ASSERTION(mScaledFont || mAdjustedSize == 0.0,\\n+    NS_ASSERTION(mAdjustedSize == 0.0 ||\\n+                 cairo_scaled_font_status(mScaledFont) == CAIRO_STATUS_SUCCESS,\\n                  \\\"Failed to make scaled font\\\");\\n \\n     return mScaledFont;\\n@@ -438,11 +439,13 @@ PRBool\\n gfxWindowsFont::SetupCairoFont(cairo_t *aCR)\\n {\\n     cairo_scaled_font_t *scaledFont = CairoScaledFont();\\n-    if (NS_LIKELY(scaledFont)) {\\n-        cairo_set_scaled_font(aCR, scaledFont);\\n-        return PR_TRUE;\\n+    if (cairo_scaled_font_status(scaledFont) != CAIRO_STATUS_SUCCESS) {\\n+        // Don't cairo_set_scaled_font as that would propagate the error to\\n+        // the cairo_t, precluding any further drawing.\\n+        return PR_FALSE;\\n     }\\n-    return PR_FALSE;\\n+    cairo_set_scaled_font(aCR, scaledFont);\\n+    return PR_TRUE;\\n }\\n \\n /**********************************************************************\\n@@ -1130,8 +1133,7 @@ public:\\n         if (mCurrentFont != aFont) {\\n             mCurrentFont = aFont;\\n             cairo_scaled_font_t *scaledFont = mCurrentFont->CairoScaledFont();\\n-            if (scaledFont)\\n-                cairo_win32_scaled_font_done_font(scaledFont);\\n+            cairo_win32_scaled_font_done_font(scaledFont);\\n             mFontSelected = PR_FALSE;\\n         }\\n     }\\n@@ -1149,8 +1151,7 @@ public:\\n         cairo_set_font_face(cr, mCurrentFont->CairoFontFace());\\n         cairo_set_font_size(cr, mCurrentFont->GetAdjustedSize());\\n         cairo_scaled_font_t *scaledFont = mCurrentFont->CairoScaledFont();\\n-        if (scaledFont)\\n-            cairo_win32_scaled_font_select_font(scaledFont, mDC);\\n+        cairo_win32_scaled_font_select_font(scaledFont, mDC);\\n \\n         mFontSelected = PR_TRUE;\\n     }\\n\""}