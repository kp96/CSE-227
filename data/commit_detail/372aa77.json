{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas372aa77\""},"diff":"\"372aa77 bug 395396, move exceptions from compare-locales to app/locales, r=robcee for compare-locales, r=bsmedberg for exceptions, l10n testing only\\ndiff --git a/browser/locales/filter.py b/browser/locales/filter.py\\nnew file mode 100755\\nindex 0000000..f200a08\\n--- /dev/null\\n+++ b/browser/locales/filter.py\\n@@ -0,0 +1,28 @@\\n+def test(mod, path, entity = None):\\n+  import re\\n+  # ignore anyhting but Firefox\\n+  if mod not in (\\\"netwerk\\\", \\\"dom\\\", \\\"toolkit\\\", \\\"security/manager\\\",\\n+                 \\\"browser\\\", \\\"extensions/reporter\\\", \\\"extensions/spellcheck\\\",\\n+                 \\\"other-licenses/branding/firefox\\\"):\\n+    return False\\n+  if mod != \\\"browser\\\" and mod != \\\"extensions/spellcheck\\\":\\n+    # we only have exceptions for browser and extensions/spellcheck\\n+    return True\\n+  if not entity:\\n+    if mod == \\\"extensions/spellcheck\\\":\\n+      return False\\n+    # browser\\n+    return not (re.match(r\\\"searchplugins\\\\/.+\\\\.xml\\\", path) or\\n+                re.match(r\\\"chrome\\\\/help\\\\/images\\\\/[A-Za-z-_]+\\\\.png\\\", path))\\n+  if mod == \\\"extensions/spellcheck\\\":\\n+    # l10n ships en-US dictionary or something, do compare\\n+    return True\\n+  if path == \\\"defines.inc\\\":\\n+    return entity != \\\"MOZ_LANGPACK_CONTRIBUTORS\\\"\\n+\\n+  if path != \\\"chrome/browser-region/region.properties\\\":\\n+    # only region.properties exceptions remain, compare all others\\n+    return True\\n+  \\n+  return not (re.match(r\\\"browser\\\\.search\\\\.order.[1-9]\\\", entity) or\\n+              re.match(r\\\"browser\\\\.contentHandlers\\\\.types.[0-5]\\\", entity))\\ndiff --git a/testing/tests/l10n/lib/Mozilla/CompareLocales.py b/testing/tests/l10n/lib/Mozilla/CompareLocales.py\\nindex cbc5238..0d207f7 100755\\n--- a/testing/tests/l10n/lib/Mozilla/CompareLocales.py\\n+++ b/testing/tests/l10n/lib/Mozilla/CompareLocales.py\\n@@ -38,42 +38,12 @@\\n 'Mozilla l10n compare locales tool'\\n \\n import os\\n+import os.path\\n import re\\n import logging\\n import Parser\\n import Paths\\n \\n-def __regify(tpl):\\n-  return tuple(map(re.compile, tpl))\\n-\\n-exceptions = [\\n-  # ignore langpack contributor section for mail and brownser\\n-  __regify(('mail|browser', 'defines.inc', 'MOZ_LANGPACK_CONTRIBUTORS')),\\n-  # ignore search engine order for browser\\n-  __regify(('browser', 'chrome\\\\\\\\/browser-region\\\\\\\\/region\\\\\\\\.properties',\\n-   'browser\\\\\\\\.search\\\\\\\\.order\\\\.[1-9]')),\\n-  # ignore feed engine order for browser\\n-  __regify(('browser', 'chrome\\\\\\\\/browser-region\\\\\\\\/region\\\\\\\\.properties',\\n-   'browser\\\\\\\\.contentHandlers\\\\\\\\.types\\\\.[0-5]'))]\\n-\\n-def __dont_ignore(tpl):\\n-  for mod, path, key in exceptions:\\n-    if mod.match(tpl[0]) and path.match(tpl[1]) and key.match(tpl[2]):\\n-      return False\\n-  return True\\n-\\n-fl_exceptions = [\\n-  # ignore search plugins\\n-  __regify(('browser', 'searchplugins\\\\\\\\/.+\\\\\\\\.xml')),\\n-  # ignore help images\\n-  __regify(('browser', 'chrome\\\\\\\\/help\\\\\\\\/images\\\\\\\\/[A-Za-z-_]+\\\\\\\\.png'))]\\n-\\n-def do_ignore_fl(tpl):\\n-  for mod, path in fl_exceptions:\\n-    if mod.match(tpl[0]) and path.match(tpl[1]):\\n-      return True\\n-  return False\\n-\\n class FileCollector:\\n   class Iter:\\n     def __init__(self, path):\\n@@ -141,6 +111,32 @@ def collectFiles(aComparer, apps = None, locales = None):\\n   modules = Paths.Modules(apps)\\n   en = FileCollector()\\n   l10n = FileCollector()\\n+  # load filter functions for each app\\n+  fltrs = []\\n+  for app in apps:\\n+    filterpath = 'mozilla/%s/locales/filter.py' % app\\n+    if not os.path.exists(filterpath):\\n+      continue\\n+    l = {}\\n+    execfile(filterpath, {}, l)\\n+    if 'test' not in l or not callable(l['test']):\\n+      logging.debug('%s does not define function \\\"test\\\"' % filterpath)\\n+      continue\\n+    fltrs.append(l['test'])\\n+  \\n+  # define fltr function to be used, calling into the app specific ones\\n+  # if one of our apps wants us to know about a triple, make it so\\n+  def fltr(mod, lpath, entity = None):\\n+    for f in fltrs:\\n+      keep  = True\\n+      try:\\n+        keep = f(mod, lpath, entity)\\n+      except Exception, e:\\n+        logging.error(str(e))\\n+      if not keep:\\n+        return False\\n+    return True\\n+  \\n   for cat in modules.keys():\\n     logging.debug(\\\" testing \\\" + cat+ \\\" on \\\" + str(modules))\\n     aComparer.notifyLocales(cat, locales[cat])\\n@@ -154,11 +150,21 @@ def collectFiles(aComparer, apps = None, locales = None):\\n             aComparer.compareFile(mod, loc, l_fl)\\n             del fls[l_fl]\\n           else:\\n-            # file in locale, but not in en-US, remove?\\n-            aComparer.removeFile(mod, loc, l_fl)\\n+            if fltr(mod, l_fl):\\n+              # file in locale, but not in en-US, remove\\n+              aComparer.removeFile(mod, loc, l_fl)\\n+            else:\\n+              logging.debug(\\\" ignoring %s from %s in %s\\\" %\\n+                            (l_fl, loc, mod))\\n         # all locale files dealt with, remaining fls need to be added?\\n         for lf in fls.keys():\\n-          aComparer.addFile(mod,loc,lf)\\n+          if fltr(mod, lf):\\n+            aComparer.addFile(mod,loc,lf)\\n+          else:\\n+            logging.debug(\\\" ignoring %s from %s in %s\\\" %\\n+                          (lf, loc, mod))\\n+\\n+  return fltr\\n \\n class CompareCollector:\\n   'collects files to be compared, added, removed'\\n@@ -173,9 +179,6 @@ class CompareCollector:\\n       else:\\n         self.modules[loc] = [aModule]\\n   def addFile(self, aModule, aLocale, aLeaf):\\n-    if do_ignore_fl((aModule, aLeaf)):\\n-      logging.debug(\\\" ignoring %s from %s in %s\\\" % (aLeaf, aLocale, aModule))\\n-      return\\n     logging.debug(\\\" add %s for %s in %s\\\" % (aLeaf, aLocale, aModule))\\n     if not self.files.has_key(aLocale):\\n       self.files[aLocale] = {'missingFiles': [(aModule, aLeaf)],\\n@@ -190,9 +193,6 @@ class CompareCollector:\\n       self.cl[(aModule, aLeaf)].append(aLocale)\\n     pass\\n   def removeFile(self, aModule, aLocale, aLeaf):\\n-    if do_ignore_fl((aModule, aLeaf)):\\n-      logging.debug(\\\" ignoring %s from %s in %s\\\" % (aLeaf, aLocale, aModule))\\n-      return\\n     logging.debug(\\\" remove %s from %s in %s\\\" % (aLeaf, aLocale, aModule))\\n     if not self.files.has_key(aLocale):\\n       self.files[aLocale] = {'obsoleteFiles': [(aModule, aLeaf)],\\n@@ -204,7 +204,8 @@ class CompareCollector:\\n def compare(apps=None, testLocales=None):\\n   result = {}\\n   c = CompareCollector()\\n-  collectFiles(c, apps=apps, locales=testLocales)\\n+  fltr = collectFiles(c, apps=apps, locales=testLocales)\\n+  \\n   key = re.compile('[kK]ey')\\n   for fl, locales in c.cl.iteritems():\\n     (mod,path) = fl\\n@@ -222,7 +223,7 @@ def compare(apps=None, testLocales=None):\\n       enTmp = dict(enMap)\\n       parser.read(Paths.get_path(mod, loc, path))\\n       for k,v in parser:\\n-        if not __dont_ignore((mod, path, k)):\\n+        if not fltr(mod, path, k):\\n           if enTmp.has_key(k):\\n             del enTmp[k]\\n           continue\\n@@ -240,7 +241,8 @@ def compare(apps=None, testLocales=None):\\n                          (k, Paths.get_path(mod, loc, path)))\\n           else:\\n             result[loc]['changed'] +=1\\n-      result[loc]['missing'].extend(filter(__dont_ignore, [(mod,path,k) for k in enTmp.keys()]))\\n+      result[loc]['missing'].extend(filter(lambda t: fltr(*t),\\n+                                           [(mod,path,k) for k in enTmp.keys()]))\\n   for loc,dics in c.files.iteritems():\\n     if not result.has_key(loc):\\n       result[loc] = dics\\n\""}