{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas2940b2f\""},"diff":"\"2940b2f bugs 230606 and 209234: add options to restrict file: URI same-origin policies, r+sr=jst, blocking+=pavlov\\ndiff --git a/caps/include/nsScriptSecurityManager.h b/caps/include/nsScriptSecurityManager.h\\nindex 39cbd29..a1883f1 100644\\n--- a/caps/include/nsScriptSecurityManager.h\\n+++ b/caps/include/nsScriptSecurityManager.h\\n@@ -545,6 +545,9 @@ private:\\n      */\\n     PRBool SecurityCompareURIs(nsIURI* aSourceURI, nsIURI* aTargetURI);\\n \\n+    /* encapsulate the file comparison rules */\\n+    PRBool SecurityCompareFileURIs(nsIURI* aSourceURI, nsIURI* aTargetURI);\\n+\\n #ifdef XPC_IDISPATCH_SUPPORT\\n     // While this header is included outside of caps, this class isn't \\n     // referenced so this should be fine.\\n@@ -560,10 +563,11 @@ private:\\n     static jsval sEnabledID;\\n \\n     inline void\\n-    JSEnabledPrefChanged(nsISecurityPref* aSecurityPref);\\n+    ScriptSecurityPrefChanged();\\n \\n     static const char sJSEnabledPrefName[];\\n     static const char sJSMailEnabledPrefName[];\\n+    static const char sFileOriginPolicyPrefName[];\\n \\n     nsObjectHashtable* mOriginToPolicyMap;\\n     DomainPolicy* mDefaultPolicy;\\n@@ -583,6 +587,7 @@ private:\\n     PRPackedBool mXPCDefaultGrantAll;\\n     static const char sXPCDefaultGrantAllName[];\\n #endif\\n+    PRInt32 mFileURIOriginPolicy;\\n \\n     static nsIIOService    *sIOService;\\n     static nsIXPConnect    *sXPConnect;\\n@@ -590,4 +595,16 @@ private:\\n     static JSRuntime       *sRuntime;\\n };\\n \\n+// Levels for file: URI same-origin policy:\\n+//   self:        same-origin only with itself\\n+//   samedir:     same-origin with files having the same path\\n+//   subdir:      same-origin with files having longer paths (asymetric)\\n+//   anyfile:     same-origin with any other file: URI (but not directories)\\n+//   traditional: any local file, any directory\\n+#define FILEURI_SOP_SELF        0\\n+#define FILEURI_SOP_SAMEDIR     1\\n+#define FILEURI_SOP_SUBDIR      2\\n+#define FILEURI_SOP_ANYFILE     3\\n+#define FILEURI_SOP_TRADITIONAL 4\\n+\\n #endif // nsScriptSecurityManager_h__\\ndiff --git a/caps/src/nsScriptSecurityManager.cpp b/caps/src/nsScriptSecurityManager.cpp\\nindex 750a314..7714173 100644\\n--- a/caps/src/nsScriptSecurityManager.cpp\\n+++ b/caps/src/nsScriptSecurityManager.cpp\\n@@ -65,6 +65,7 @@\\n #include \\\"nsIProperties.h\\\"\\n #include \\\"nsDirectoryServiceDefs.h\\\"\\n #include \\\"nsIFile.h\\\"\\n+#include \\\"nsIFileURL.h\\\"\\n #include \\\"nsIZipReader.h\\\"\\n #include \\\"nsIJAR.h\\\"\\n #include \\\"nsIPluginInstance.h\\\"\\n@@ -268,7 +269,6 @@ nsScriptSecurityManager::SecurityCompareURIs(nsIURI* aSourceURI,\\n \\n     // If either URI is a nested URI, get the base URI\\n     nsCOMPtr<nsIURI> sourceBaseURI = NS_GetInnermostURI(aSourceURI);\\n-    \\n     nsCOMPtr<nsIURI> targetBaseURI = NS_GetInnermostURI(aTargetURI);\\n \\n     if (!sourceBaseURI || !targetBaseURI)\\n@@ -276,20 +276,20 @@ nsScriptSecurityManager::SecurityCompareURIs(nsIURI* aSourceURI,\\n \\n     // Compare schemes\\n     nsCAutoString targetScheme;\\n-    nsresult rv = targetBaseURI->GetScheme(targetScheme);\\n-    nsCAutoString sourceScheme;\\n-    if (NS_SUCCEEDED(rv))\\n-        rv = sourceBaseURI->GetScheme(sourceScheme);\\n-    if (NS_FAILED(rv) || !targetScheme.Equals(sourceScheme)) {\\n+    PRBool sameScheme = PR_FALSE;\\n+    if (NS_FAILED( targetBaseURI->GetScheme(targetScheme) ) ||\\n+        NS_FAILED( sourceBaseURI->SchemeIs(targetScheme.get(), &sameScheme) ) ||\\n+        !sameScheme)\\n+    {\\n+        // Not same-origin if schemes differ\\n         return PR_FALSE;\\n     }\\n-    \\n+\\n+    // special handling for file: URIs\\n     if (targetScheme.EqualsLiteral(\\\"file\\\"))\\n-    {\\n-        // All file: urls are considered to have the same origin.\\n-        return  PR_TRUE;\\n-    }\\n+        return SecurityCompareFileURIs( sourceBaseURI, targetBaseURI );\\n \\n+    // Special handling for mailnews schemes\\n     if (targetScheme.EqualsLiteral(\\\"imap\\\") ||\\n         targetScheme.EqualsLiteral(\\\"mailbox\\\") ||\\n         targetScheme.EqualsLiteral(\\\"news\\\"))\\n@@ -297,28 +297,26 @@ nsScriptSecurityManager::SecurityCompareURIs(nsIURI* aSourceURI,\\n         // Each message is a distinct trust domain; use the \\n         // whole spec for comparison\\n         nsCAutoString targetSpec;\\n-        if (NS_FAILED(targetBaseURI->GetSpec(targetSpec)))\\n-            return PR_FALSE;\\n         nsCAutoString sourceSpec;\\n-        if (NS_FAILED(sourceBaseURI->GetSpec(sourceSpec)))\\n-            return PR_FALSE;\\n-        return targetSpec.Equals(sourceSpec);\\n+        return ( NS_SUCCEEDED( targetBaseURI->GetSpec(targetSpec) ) &&\\n+                 NS_SUCCEEDED( sourceBaseURI->GetSpec(sourceSpec) ) &&\\n+                 targetSpec.Equals(sourceSpec) );\\n     }\\n \\n     // Compare hosts\\n     nsCAutoString targetHost;\\n-    rv = targetBaseURI->GetHost(targetHost);\\n     nsCAutoString sourceHost;\\n-    if (NS_SUCCEEDED(rv))\\n-        rv = sourceBaseURI->GetHost(sourceHost);\\n-    if (NS_FAILED(rv) ||\\n-        !targetHost.Equals(sourceHost, nsCaseInsensitiveCStringComparator())) {\\n+    if (NS_FAILED( targetBaseURI->GetHost(targetHost) ) ||\\n+        NS_FAILED( sourceBaseURI->GetHost(sourceHost) ) ||\\n+        !targetHost.Equals(sourceHost, nsCaseInsensitiveCStringComparator()))\\n+    {\\n+        // Not same-origin if hosts differ\\n         return PR_FALSE;\\n     }\\n-    \\n+\\n     // Compare ports\\n     PRInt32 targetPort;\\n-    rv = targetBaseURI->GetPort(&targetPort);\\n+    nsresult rv = targetBaseURI->GetPort(&targetPort);\\n     PRInt32 sourcePort;\\n     if (NS_SUCCEEDED(rv))\\n         rv = sourceBaseURI->GetPort(&sourcePort);\\n@@ -331,18 +329,15 @@ nsScriptSecurityManager::SecurityCompareURIs(nsIURI* aSourceURI,\\n     {\\n         NS_ENSURE_STATE(sIOService);\\n \\n-        NS_ASSERTION(targetScheme.Equals(sourceScheme),\\n-                     \\\"Schemes should be equal here\\\");\\n-                    \\n         PRInt32 defaultPort;\\n         nsCOMPtr<nsIProtocolHandler> protocolHandler;\\n-        rv = sIOService->GetProtocolHandler(sourceScheme.get(),\\n+        rv = sIOService->GetProtocolHandler(targetScheme.get(),\\n                                             getter_AddRefs(protocolHandler));\\n         if (NS_FAILED(rv))\\n         {\\n             return PR_FALSE;\\n         }\\n-                    \\n+\\n         rv = protocolHandler->GetDefaultPort(&defaultPort);\\n         if (NS_FAILED(rv) || defaultPort == -1)\\n             return PR_FALSE; // No default port for this scheme\\n@@ -357,6 +352,83 @@ nsScriptSecurityManager::SecurityCompareURIs(nsIURI* aSourceURI,\\n     return result;\\n }\\n \\n+// helper function for SecurityCompareURIs\\n+PRBool\\n+nsScriptSecurityManager::SecurityCompareFileURIs(nsIURI* aSourceURI,\\n+                                                 nsIURI* aTargetURI)\\n+{\\n+    // in traditional unsafe behavior all files are the same origin\\n+    if (mFileURIOriginPolicy == FILEURI_SOP_TRADITIONAL)\\n+        return PR_TRUE;\\n+\\n+\\n+    // Check simplest and default FILEURI_SOP_SELF case first:\\n+    // If they're equal or if the policy says they must be, we're done\\n+    PRBool filesAreEqual = PR_FALSE;\\n+    if (NS_FAILED( aSourceURI->Equals(aTargetURI, &filesAreEqual) ))\\n+        return PR_FALSE;\\n+    if (filesAreEqual || mFileURIOriginPolicy == FILEURI_SOP_SELF)\\n+        return filesAreEqual;\\n+\\n+\\n+    // disallow access to directory listings (bug 209234)\\n+    PRBool targetIsDir = PR_TRUE;\\n+    nsCOMPtr<nsIFile> targetFile;\\n+    nsCOMPtr<nsIFileURL> targetFileURL( do_QueryInterface(aTargetURI) );\\n+\\n+    if (!targetFileURL ||\\n+        NS_FAILED( targetFileURL->GetFile(getter_AddRefs(targetFile)) ) ||\\n+        NS_FAILED( targetFile->IsDirectory(&targetIsDir) ) ||\\n+        targetIsDir)\\n+    {\\n+        return PR_FALSE;\\n+    }\\n+\\n+\\n+    // For policy ANYFILE we're done\\n+    if (mFileURIOriginPolicy == FILEURI_SOP_ANYFILE)\\n+        return PR_TRUE;\\n+\\n+\\n+    // source parent directory is needed for remaining policies\\n+    nsCOMPtr<nsIFile> sourceFile;\\n+    nsCOMPtr<nsIFile> sourceParent;\\n+    nsCOMPtr<nsIFileURL> sourceFileURL( do_QueryInterface(aSourceURI) );\\n+\\n+    if (!sourceFileURL ||\\n+        NS_FAILED( sourceFileURL->GetFile(getter_AddRefs(sourceFile)) ) ||\\n+        NS_FAILED( sourceFile->GetParent(getter_AddRefs(sourceParent)) ) ||\\n+        !sourceParent)\\n+    {\\n+        // unexpected error\\n+        return PR_FALSE;\\n+    }\\n+\\n+    // check remaining policies\\n+    if (mFileURIOriginPolicy == FILEURI_SOP_SAMEDIR)\\n+    {\\n+        // file: URIs in the same directory have the same origin\\n+        PRBool sameParent = PR_FALSE;\\n+        nsCOMPtr<nsIFile> targetParent;\\n+        if (NS_FAILED( targetFile->GetParent(getter_AddRefs(targetParent)) ) ||\\n+            NS_FAILED( sourceParent->Equals(targetParent, &sameParent) ))\\n+            return PR_FALSE;\\n+        return sameParent;\\n+    }\\n+\\n+    if (mFileURIOriginPolicy == FILEURI_SOP_SUBDIR)\\n+    {\\n+        // file: URIs can access files in the same or lower directories\\n+        PRBool isChild = PR_FALSE;\\n+        if (NS_FAILED( sourceParent->Contains(targetFile, PR_TRUE, &isChild) ))\\n+            return PR_FALSE;\\n+        return isChild;\\n+    }\\n+\\n+    NS_NOTREACHED(\\\"invalid file uri policy setting\\\");\\n+    return PR_FALSE;\\n+}\\n+\\n NS_IMETHODIMP\\n nsScriptSecurityManager::GetChannelPrincipal(nsIChannel* aChannel,\\n                                              nsIPrincipal** aPrincipal)\\n@@ -3071,16 +3143,19 @@ nsScriptSecurityManager::Observe(nsISupports* aObject, const char* aTopic,\\n     const char *message = messageStr.get();\\n \\n     static const char jsPrefix[] = \\\"javascript.\\\";\\n-    if((PL_strncmp(message, jsPrefix, sizeof(jsPrefix)-1) == 0)\\n-#ifdef XPC_IDISPATCH_SUPPORT\\n-        || (PL_strcmp(message, sXPCDefaultGrantAllName) == 0)\\n-#endif\\n-        )\\n-        JSEnabledPrefChanged(mSecurityPref);\\n-    if(PL_strncmp(message, sPolicyPrefix, sizeof(sPolicyPrefix)-1) == 0)\\n-        mPolicyPrefsChanged = PR_TRUE; // This will force re-initialization of the pref table\\n-    else if((PL_strncmp(message, sPrincipalPrefix, sizeof(sPrincipalPrefix)-1) == 0) &&\\n-            !mIsWritingPrefs)\\n+    static const char securityPrefix[] = \\\"security.\\\";\\n+    if ((PL_strncmp(message, jsPrefix, sizeof(jsPrefix)-1) == 0) ||\\n+        (PL_strncmp(message, securityPrefix, sizeof(securityPrefix)-1) == 0) )\\n+    {\\n+        ScriptSecurityPrefChanged();\\n+    }\\n+    else if (PL_strncmp(message, sPolicyPrefix, sizeof(sPolicyPrefix)-1) == 0)\\n+    {\\n+        // This will force re-initialization of the pref table\\n+        mPolicyPrefsChanged = PR_TRUE;\\n+    }\\n+    else if ((PL_strncmp(message, sPrincipalPrefix, sizeof(sPrincipalPrefix)-1) == 0) &&\\n+             !mIsWritingPrefs)\\n     {\\n         static const char id[] = \\\"id\\\";\\n         char* lastDot = PL_strrchr(message, '.');\\n@@ -3105,10 +3180,11 @@ nsScriptSecurityManager::nsScriptSecurityManager(void)\\n       mIsJavaScriptEnabled(PR_FALSE),\\n       mIsMailJavaScriptEnabled(PR_FALSE),\\n       mIsWritingPrefs(PR_FALSE),\\n-      mPolicyPrefsChanged(PR_TRUE)\\n+      mPolicyPrefsChanged(PR_TRUE),\\n #ifdef XPC_IDISPATCH_SUPPORT\\n-      ,mXPCDefaultGrantAll(PR_FALSE)\\n+      mXPCDefaultGrantAll(PR_FALSE),\\n #endif\\n+      mFileURIOriginPolicy(FILEURI_SOP_SELF)\\n {\\n     NS_ASSERTION(sizeof(long) == sizeof(void*), \\\"long and void* have different lengths on this platform. This may cause a security failure.\\\");\\n     mPrincipals.Init(31);\\n@@ -3697,13 +3773,15 @@ const char nsScriptSecurityManager::sJSEnabledPrefName[] =\\n     \\\"javascript.enabled\\\";\\n const char nsScriptSecurityManager::sJSMailEnabledPrefName[] =\\n     \\\"javascript.allow.mailnews\\\";\\n+const char nsScriptSecurityManager::sFileOriginPolicyPrefName[] =\\n+    \\\"security.fileuri.origin_policy\\\";\\n #ifdef XPC_IDISPATCH_SUPPORT\\n const char nsScriptSecurityManager::sXPCDefaultGrantAllName[] =\\n     \\\"security.classID.allowByDefault\\\";\\n #endif\\n \\n inline void\\n-nsScriptSecurityManager::JSEnabledPrefChanged(nsISecurityPref* aSecurityPref)\\n+nsScriptSecurityManager::ScriptSecurityPrefChanged()\\n {\\n     PRBool temp;\\n     nsresult rv = mSecurityPref->SecurityGetBoolPref(sJSEnabledPrefName, &temp);\\n@@ -3711,8 +3789,12 @@ nsScriptSecurityManager::JSEnabledPrefChanged(nsISecurityPref* aSecurityPref)\\n     mIsJavaScriptEnabled = NS_FAILED(rv) || temp;\\n \\n     rv = mSecurityPref->SecurityGetBoolPref(sJSMailEnabledPrefName, &temp);\\n-    // JavaScript in Mail defaults to enabled in failure cases.\\n-    mIsMailJavaScriptEnabled = NS_FAILED(rv) || temp;\\n+    // JavaScript in Mail defaults to disabled in failure cases.\\n+    mIsMailJavaScriptEnabled = NS_SUCCEEDED(rv) && temp;\\n+\\n+    PRInt32 policy;\\n+    rv = mSecurityPref->SecurityGetIntPref(sFileOriginPolicyPrefName, &policy);\\n+    mFileURIOriginPolicy = NS_SUCCEEDED(rv) ? policy : FILEURI_SOP_SELF;\\n \\n #ifdef XPC_IDISPATCH_SUPPORT\\n     rv = mSecurityPref->SecurityGetBoolPref(sXPCDefaultGrantAllName, &temp);\\n@@ -3735,10 +3817,11 @@ nsScriptSecurityManager::InitPrefs()\\n     NS_ENSURE_SUCCESS(rv, rv);\\n \\n     // Set the initial value of the \\\"javascript.enabled\\\" prefs\\n-    JSEnabledPrefChanged(mSecurityPref);\\n+    ScriptSecurityPrefChanged();\\n     // set observer callbacks in case the value of the prefs change\\n     prefBranchInternal->AddObserver(sJSEnabledPrefName, this, PR_FALSE);\\n     prefBranchInternal->AddObserver(sJSMailEnabledPrefName, this, PR_FALSE);\\n+    prefBranchInternal->AddObserver(sFileOriginPolicyPrefName, this, PR_FALSE);\\n #ifdef XPC_IDISPATCH_SUPPORT\\n     prefBranchInternal->AddObserver(sXPCDefaultGrantAllName, this, PR_FALSE);\\n #endif\\ndiff --git a/modules/libpref/src/init/all.js b/modules/libpref/src/init/all.js\\nindex 9f23e33..090e0e0 100644\\n--- a/modules/libpref/src/init/all.js\\n+++ b/modules/libpref/src/init/all.js\\n@@ -496,6 +496,9 @@ pref(\\\"security.enable_java\\\",                true);\\n pref(\\\"advanced.mailftp\\\",                    false);\\n pref(\\\"image.animation_mode\\\",                \\\"normal\\\");\\n \\n+// Same-origin policy for file: URIs: 0=self, 1=samedir, 2=subdir, 3=anyfile\\n+pref(\\\"security.fileuri.origin_policy\\\", 0);\\n+\\n // If there is ever a security firedrill that requires\\n // us to block certian ports global, this is the pref \\n // to use.  Is is a comma delimited list of port numbers\\n\""}