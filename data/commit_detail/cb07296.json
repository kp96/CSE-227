{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bascb07296\""},"diff":"\"cb07296 Bug 357951: Double clicking on the tab overflow scroll buttons should scroll by the width of the tab bar. p=Dao Gottwald <dao@design-noir.de> r=enndeakin\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 249ba87..aa2935d 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -2500,6 +2500,7 @@\\n       <xul:toolbarbutton class=\\\"scrollbutton-up\\\" collapsed=\\\"true\\\"\\n                          xbl:inherits=\\\"orient\\\"\\n                          anonid=\\\"scrollbutton-up\\\"\\n+                         onclick=\\\"_distanceScroll(event);\\\"\\n                          onmousedown=\\\"_startScroll(-1);\\\"\\n                          onmouseover=\\\"_continueScroll(-1);\\\"\\n                          onmouseup=\\\"_stopScroll();\\\"\\n@@ -2516,6 +2517,7 @@\\n         <xul:toolbarbutton class=\\\"scrollbutton-down\\\" collapsed=\\\"true\\\"\\n                            xbl:inherits=\\\"orient\\\"\\n                            anonid=\\\"scrollbutton-down\\\"\\n+                           onclick=\\\"_distanceScroll(event);\\\"\\n                            onmousedown=\\\"_startScroll(1);\\\"\\n                            onmouseover=\\\"_continueScroll(1);\\\"\\n                            onmouseup=\\\"_stopScroll();\\\"\\ndiff --git a/toolkit/content/widgets/scrollbox.xml b/toolkit/content/widgets/scrollbox.xml\\nindex 805626d..feff7af 100644\\n--- a/toolkit/content/widgets/scrollbox.xml\\n+++ b/toolkit/content/widgets/scrollbox.xml\\n@@ -64,7 +64,6 @@\\n       </property>\\n \\n       <field name=\\\"_scrollIncrement\\\">null</field>\\n-\\n       <property name=\\\"scrollIncrement\\\" readonly=\\\"true\\\">\\n         <getter><![CDATA[\\n           if (this._scrollIncrement === null) {\\n@@ -406,6 +405,7 @@\\n       <xul:toolbarbutton class=\\\"scrollbutton-up\\\" collapsed=\\\"true\\\"\\n                          xbl:inherits=\\\"orient\\\"\\n                          anonid=\\\"scrollbutton-up\\\"\\n+                         onclick=\\\"_distanceScroll(event);\\\"\\n                          onmousedown=\\\"_startScroll(-1);\\\"\\n                          onmouseover=\\\"_continueScroll(-1);\\\"\\n                          onmouseup=\\\"_stopScroll();\\\"\\n@@ -417,6 +417,7 @@\\n       <xul:toolbarbutton class=\\\"scrollbutton-down\\\" collapsed=\\\"true\\\"\\n                          xbl:inherits=\\\"orient\\\"\\n                          anonid=\\\"scrollbutton-down\\\"\\n+                         onclick=\\\"_distanceScroll(event);\\\"\\n                          onmousedown=\\\"_startScroll(1);\\\"\\n                          onmouseover=\\\"_continueScroll(1);\\\"\\n                          onmouseup=\\\"_stopScroll();\\\"\\n@@ -524,6 +525,69 @@\\n         ]]></body>\\n       </method>\\n \\n+      <method name=\\\"_distanceScroll\\\">\\n+        <parameter name=\\\"aEvent\\\"/>\\n+        <body><![CDATA[\\n+          if (this.getAttribute(\\\"orient\\\") == \\\"vertical\\\" ||\\n+              aEvent.detail < 2 || aEvent.detail > 3)\\n+            return;\\n+\\n+          var scrollLeft = (aEvent.originalTarget == this._scrollButtonUp);\\n+          if (!this._isLTRScrollbox)\\n+            scrollLeft = !scrollLeft;\\n+          var targetElement;\\n+          var elements = this.hasChildNodes() ?\\n+                         this.childNodes :\\n+                         document.getBindingParent(this).childNodes;\\n+\\n+          if (aEvent.detail == 2) {\\n+            // scroll by the width of the scrollbox; make sure that the next\\n+            // partly-offscreen element will become fully visible.\\n+            var scrollBox = this.scrollBoxObject;\\n+            var edge = scrollBox.screenX;\\n+            if (scrollLeft) {\\n+              for (var i = 0; targetElement = elements[i]; i++) {\\n+                var x = targetElement.boxObject.screenX;\\n+                if (x < edge &&\\n+                    x + targetElement.boxObject.width + 1 >= edge)\\n+                  break;\\n+              }\\n+              if (!targetElement)\\n+                return;\\n+              edge = targetElement.boxObject.screenX +\\n+                     targetElement.boxObject.width - scrollBox.width;\\n+              while ((targetElement = targetElement.previousSibling))\\n+                if (targetElement.boxObject.screenX < edge)\\n+                  break;\\n+              if (targetElement)\\n+                targetElement = targetElement.nextSibling;\\n+            } else {\\n+              edge += scrollBox.width;\\n+              for (var i = 0; targetElement = elements[i]; i++) {\\n+                var x = targetElement.boxObject.screenX;\\n+                if (x <= edge &&\\n+                    x + targetElement.boxObject.width > edge)\\n+                  break;\\n+              }\\n+              if (!targetElement)\\n+                return;\\n+              edge = targetElement.boxObject.screenX + scrollBox.width;\\n+              while ((targetElement = targetElement.nextSibling))\\n+                if (targetElement.boxObject.screenX + targetElement.boxObject.width > edge)\\n+                  break;\\n+              if (targetElement)\\n+                targetElement = targetElement.previousSibling;\\n+            }\\n+          }\\n+\\n+          if (!targetElement)\\n+            // scroll to the first resp. last element\\n+            targetElement = scrollLeft ? elements[0] : elements[elements.length - 1];\\n+\\n+          this.ensureElementIsVisible(targetElement);\\n+        ]]></body>\\n+      </method>\\n+\\n     </implementation>\\n   </binding>\\n </bindings>\\n\""}