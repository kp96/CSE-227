{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Base5c3ae3\""},"diff":"\"e5c3ae3 Aviary branch landing\\ndiff --git a/browser/base/content/tabbrowser.xml b/browser/base/content/tabbrowser.xml\\nindex 1955ee7..e059b3e 100644\\n--- a/browser/base/content/tabbrowser.xml\\n+++ b/browser/base/content/tabbrowser.xml\\n@@ -51,7 +51,7 @@\\n \\n     <content>\\n       <xul:stringbundle src=\\\"chrome://global/locale/tabbrowser.properties\\\"/>\\n-      <xul:tabbox flex=\\\"1\\\" xbl:inherits=\\\"handleCtrlPageUpDown\\\" eventnode=\\\"document\\\"\\n+      <xul:tabbox flex=\\\"1\\\" eventnode=\\\"document\\\" xbl:inherits=\\\"handleCtrlPageUpDown\\\"\\n                   onselect=\\\"if (!('updateCurrentBrowser' in this.parentNode) || event.target.localName != 'tabpanels') return; this.parentNode.updateCurrentBrowser();\\\">\\n         <xul:hbox class=\\\"tabbrowser-strip chromeclass-toolbar\\\" collapsed=\\\"true\\\" tooltip=\\\"_child\\\" context=\\\"_child\\\">\\n           <xul:tooltip onpopupshowing=\\\"event.preventBubble(); if (document.tooltipNode.hasAttribute('label')) { this.setAttribute('label', document.tooltipNode.getAttribute('label')); return true; } return false;\\\"/>\\n@@ -80,6 +80,7 @@\\n           <xul:tabs class=\\\"tabbrowser-tabs\\\" closebutton=\\\"true\\\" flex=\\\"1\\\"\\n                     setfocus=\\\"false\\\"\\n                     onclick=\\\"this.parentNode.parentNode.parentNode.onTabClick(event);\\\"\\n+                    onmousedown=\\\"this.parentNode.parentNode.parentNode.updateContextTab(event);\\\"\\n                     ondragover=\\\"nsDragAndDrop.dragOver(event, this.parentNode.parentNode.parentNode);\\n                                 event.stopPropagation();\\\"\\n                     ondragdrop=\\\"nsDragAndDrop.drop(event, this.parentNode.parentNode.parentNode);\\n@@ -98,7 +99,11 @@\\n           </xul:tabs>\\n         </xul:hbox>\\n         <xul:tabpanels flex=\\\"1\\\" class=\\\"plain\\\">\\n-          <xul:browser type=\\\"content-primary\\\" disablehistory=\\\"true\\\" xbl:inherits=\\\"tooltip=contenttooltip,contextmenu=contentcontextmenu,autocompletepopup\\\"/>\\n+          <xul:vbox flex=\\\"1\\\">\\n+            <xul:browsermessage hidden=\\\"true\\\" type=\\\"top\\\"/>\\n+            <xul:browser flex=\\\"1\\\" type=\\\"content-primary\\\" message=\\\"true\\\" disablehistory=\\\"true\\\" xbl:inherits=\\\"tooltip=contenttooltip,contextmenu=contentcontextmenu,autocompletepopup\\\"/>\\n+            <xul:browsermessage hidden=\\\"true\\\" type=\\\"bottom\\\"/>\\n+          </xul:vbox>\\n         </xul:tabpanels>\\n       </xul:tabbox>\\n       <children/>\\n@@ -154,6 +159,86 @@\\n       <field name=\\\"mModalDialogShowing\\\">\\n         false\\n       </field>\\n+      \\n+      <method name=\\\"getBrowserAtIndex\\\">\\n+        <parameter name=\\\"aIndex\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            return this.mPanelContainer.childNodes[aIndex].firstChild.nextSibling;\\n+          ]]>\\n+        </body>\\n+      </method>\\n+\\n+      <method name=\\\"getBrowserIndexForDocument\\\">\\n+        <parameter name=\\\"aDocument\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            for (var i = 0; i < this.mPanelContainer.childNodes.length; i++) {\\n+              if (this.getBrowserAtIndex(i).contentDocument == aDocument) {\\n+                return i;\\n+              }\\n+            }\\n+            return -1;\\n+          ]]>\\n+        </body>\\n+      </method>\\n+        \\n+      <method name=\\\"getMessageForBrowser\\\">\\n+        <parameter name=\\\"aBrowser\\\"/>\\n+        <parameter name=\\\"aTopBottom\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            return aBrowser[aTopBottom == \\\"top\\\" ? \\\"previousSibling\\\" : \\\"nextSibling\\\"];\\n+          ]]>\\n+        </body>\\n+      </method>\\n+      \\n+      <method name=\\\"showMessage\\\">\\n+        <parameter name=\\\"aBrowser\\\"/>\\n+        <parameter name=\\\"aIconURL\\\"/>\\n+        <parameter name=\\\"aMessage\\\"/>\\n+        <parameter name=\\\"aButtonLabel\\\"/>\\n+        <parameter name=\\\"aDocShell\\\"/>\\n+        <parameter name=\\\"aSource\\\"/>\\n+        <parameter name=\\\"aPopup\\\"/>\\n+        <parameter name=\\\"aTopBottom\\\"/>\\n+        <parameter name=\\\"aShowCloseButton\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            var message = this.getMessageForBrowser(aBrowser, aTopBottom);\\n+            message.image = aIconURL;\\n+            message.text = aMessage;\\n+            message.buttonText = aButtonLabel;\\n+            message.hidden = false;\\n+            if (aSource) {\\n+              message.source = aSource;\\n+              message.popup = null;\\n+            }\\n+            else if (aPopup) {\\n+              message.popup = aPopup;\\n+              message.source = null;\\n+            }\\n+            message.docShell = aDocShell;\\n+            message.closeButton = aShowCloseButton;\\n+            aBrowser.isShowingMessage = true;\\n+          ]]>\\n+        </body>\\n+      </method>\\n+            \\n+      <method name=\\\"hideMessage\\\">\\n+        <parameter name=\\\"aBrowser\\\"/>\\n+        <parameter name=\\\"aTopBottom\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            if (aTopBottom != \\\"both\\\")\\n+              this.getMessageForBrowser(aBrowser, aTopBottom).hidden = true;\\n+            else {\\n+              this.getMessageForBrowser(aBrowser, \\\"top\\\").hidden = true;\\n+              this.getMessageForBrowser(aBrowser, \\\"bottom\\\").hidden = true;\\n+            }\\n+          ]]>\\n+        </body>\\n+      </method>\\n \\n       <!-- A web progress listener object definition for a given tab. -->\\n       <method name=\\\"mTabProgressListener\\\">\\n@@ -167,7 +252,8 @@\\n             mTab: aTab,\\n             mBrowser: aBrowser,\\n             mBlank: aStartsBlank,\\n-            mIcon: \\\"\\\",\\n+            mIcon: null,\\n+            mLastURI: null,\\n \\n             onProgressChange : function (aWebProgress, aRequest,\\n                                          aCurSelfProgress, aMaxSelfProgress,\\n@@ -194,7 +280,10 @@\\n               const nsIWebProgressListener = Components.interfaces.nsIWebProgressListener;\\n               const nsIChannel = Components.interfaces.nsIChannel;\\n \\n-              if (aStateFlags & nsIWebProgressListener.STATE_START &&\\n+              if (aStateFlags & nsIWebProgressListener.STATE_START)\\n+                  this.mBrowser.mFavIconURL = null;\\n+\\n+              if (aStateFlags & nsIWebProgressListener.STATE_START && \\n                   aStateFlags & nsIWebProgressListener.STATE_IS_NETWORK) {\\n                 // It's okay to clear what the user typed when we start\\n                 // loading a document. If the user types, this flag gets\\n@@ -207,8 +296,8 @@\\n                 if (!this.mBlank) {\\n                   this.mTab.setAttribute(\\\"busy\\\", \\\"true\\\");\\n                   this.mTab.label = this.mTabBrowser.mStringBundle.getString(\\\"tabs.loading\\\");\\n-                  this.mTab.removeAttribute(\\\"image\\\");\\n-                  this.mIcon = \\\"\\\";\\n+                  this.mTab.removeAttribute(\\\"image\\\"); \\n+                  this.mIcon = null;\\n \\n                   if (this.mTabBrowser.mCurrentTab == this.mTab)\\n                     this.mTabBrowser.mIsBusy = true;\\n@@ -227,12 +316,17 @@\\n                 this.mTab.removeAttribute(\\\"busy\\\");\\n \\n                 var location = aRequest.QueryInterface(nsIChannel).URI;\\n-                if (this.mIcon) {\\n-                  this.mTab.setAttribute(\\\"image\\\", this.mIcon);\\n-                  this.mIcon = \\\"\\\";\\n+\\n+                // For keyword URIs clear the user typed value since they will be changed into real URIs\\n+                if (location.scheme == \\\"keyword\\\")\\n+                  this.mBrowser.userTypedValue = null;\\n+\\n+                if (this.mTabBrowser.shouldLoadFavIcon(location)) {\\n+                    if (this.mIcon)\\n+                      this.mTab.setAttribute(\\\"image\\\", this.mIcon);\\n+                    else\\n+                      this.mTabBrowser.loadFavIcon(location, \\\"image\\\", this.mTab);\\n                 }\\n-                else if (this.mTabBrowser.shouldLoadFavIcon(location))\\n-                  this.mTabBrowser.loadFavIcon(location, \\\"image\\\", this.mTab);\\n \\n                 if (this.mTab.label == this.mTabBrowser.mStringBundle.getString(\\\"tabs.loading\\\"))\\n                   this.mTabBrowser.setTabTitle(this.mTab);\\n@@ -248,10 +342,10 @@\\n                     p.onStateChange(aWebProgress, aRequest, aStateFlags, aStatus);\\n                 }\\n               }\\n-            },\\n+            }\\n+            ,\\n \\n-            onLocationChange : function(aWebProgress, aRequest, aLocation)\\n-            {\\n+            onLocationChange : function(aWebProgress, aRequest, aLocation) {\\n               // The document loaded correctly, clear the value if we should\\n               if (this.mBrowser.userTypedClear)\\n                 this.mBrowser.userTypedValue = null;\\n@@ -265,8 +359,7 @@\\n               }\\n             },\\n \\n-            onStatusChange : function(aWebProgress, aRequest, aStatus, aMessage)\\n-            {\\n+            onStatusChange : function(aWebProgress, aRequest, aStatus, aMessage) {\\n               if (this.mBlank)\\n                 return;\\n \\n@@ -298,11 +391,12 @@\\n                 return this;\\n               throw Components.results.NS_NOINTERFACE;\\n             }\\n-          });\\n+                  \\n+            });\\n         ]]>\\n         </body>\\n       </method>\\n-\\n+      \\n       <method name=\\\"buildFavIconString\\\">\\n         <parameter name=\\\"aURI\\\"/>\\n         <body>\\n@@ -318,7 +412,7 @@\\n         <body>\\n           <![CDATA[\\n             return (aURI && this.mPrefs.getBoolPref(\\\"browser.chrome.site_icons\\\") &&\\n-                    this.mPrefs.getBoolPref(\\\"browser.chrome.favicons\\\") &&\\n+                    this.mPrefs.getBoolPref(\\\"browser.chrome.favicons\\\") && \\n                     (\\\"schemeIs\\\" in aURI) && (aURI.schemeIs(\\\"http\\\") || aURI.schemeIs(\\\"https\\\")));\\n           ]]>\\n         </body>\\n@@ -331,13 +425,8 @@\\n         <body>\\n           <![CDATA[\\n             var iconURL = this.buildFavIconString(aURI);\\n-            var entry = this.openCacheEntry(iconURL, Components.interfaces.nsICache.ACCESS_READ);\\n-            if (!entry)\\n+            if (!this.isFavIconKnownMissing(iconURL))\\n               aElt.setAttribute(aAttr, iconURL);\\n-            else {\\n-              entry.close();\\n-              entry = null;\\n-            }\\n           ]]>\\n         </body>\\n       </method>\\n@@ -380,6 +469,20 @@\\n         </body>\\n       </method>\\n \\n+      <method name=\\\"isFavIconKnownMissing\\\">\\n+        <parameter name=\\\"key\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            var e = this.openCacheEntry(key, Components.interfaces.nsICache.ACCESS_READ);\\n+            if (e) {\\n+                e.close();\\n+                return true;\\n+            }\\n+            return false;\\n+          ]]>\\n+        </body>\\n+      </method>\\n+\\n       <method name=\\\"updateTitlebar\\\">\\n         <body>\\n           <![CDATA[\\n@@ -387,9 +490,9 @@\\n             var docTitle;\\n             if (this.docShell.contentViewer)\\n               docTitle = this.contentTitle;\\n-\\n-            if (!docTitle)\\n-              docTitle = this.ownerDocument.documentElement.getAttribute(\\\"titledefault\\\");\\n+            \\n+\\t          if (!docTitle)\\n+\\t            docTitle = this.ownerDocument.documentElement.getAttribute(\\\"titledefault\\\");\\n \\n             var modifier = this.ownerDocument.documentElement.getAttribute(\\\"titlemodifier\\\");\\n             if (docTitle) {\\n@@ -400,7 +503,19 @@\\n                 newTitle += sep;\\n             }\\n             newTitle += modifier;\\n-            this.ownerDocument.title = newTitle;\\n+            window.title = newTitle;\\n+          ]]>\\n+        </body>\\n+      </method>\\n+\\n+      <method name=\\\"updateContextTab\\\">\\n+        <parameter name=\\\"aEvent\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            if (aEvent.originalTarget.localName == \\\"tab\\\")\\n+              this.mContextTab = aEvent.originalTarget;\\n+            else\\n+              this.mContextTab = document.popupNode;\\n           ]]>\\n         </body>\\n       </method>\\n@@ -409,7 +524,6 @@\\n         <parameter name=\\\"aPopupMenu\\\"/>\\n         <body>\\n           <![CDATA[\\n-            this.mContextTab = document.popupNode;\\n             var disabled = this.mPanelContainer.childNodes.length == 1;\\n             var menuItems = aPopupMenu.getElementsByAttribute(\\\"tbattr\\\", \\\"tabbrowser-multiple\\\");\\n             for (var i = 0; i < menuItems.length; i++)\\n@@ -421,18 +535,14 @@\\n       <method name=\\\"updateCurrentBrowser\\\">\\n         <body>\\n           <![CDATA[\\n-            var newBrowser = this.mPanelContainer.childNodes[this.mPanelContainer.selectedIndex];\\n+            var newBrowser = this.getBrowserAtIndex(this.mPanelContainer.selectedIndex);\\n             if (this.mCurrentBrowser == newBrowser)\\n               return;\\n \\n             if (this.mCurrentBrowser) {\\n               this.mCurrentBrowser.focusedWindow = document.commandDispatcher.focusedWindow;\\n               this.mCurrentBrowser.focusedElement = document.commandDispatcher.focusedElement;\\n-              if (this.mCurrentBrowser.focusedElement) {\\n-                // Clear focus outline before we draw on top of it\\n-                this.mCurrentBrowser.focusedElement.blur();\\n-              }\\n-              this.mCurrentBrowser.setAttribute(\\\"type\\\", \\\"content\\\");\\n+               this.mCurrentBrowser.setAttribute(\\\"type\\\", \\\"content\\\");\\n             }\\n             \\n             var updatePageReport = false;\\n@@ -443,7 +553,7 @@\\n             newBrowser.setAttribute(\\\"type\\\", \\\"content-primary\\\");\\n             this.mCurrentBrowser = newBrowser;\\n             this.mCurrentTab = this.selectedTab;\\n-\\n+            \\n             if (updatePageReport)\\n               this.mCurrentBrowser.updatePageReport();\\n \\n@@ -467,15 +577,21 @@\\n                 if (securityUI)\\n                   p.onSecurityChange(webProgress, null, securityUI.state);\\n                 var listener = this.mTabListeners[this.mPanelContainer.selectedIndex];\\n-                if (listener.mIcon)\\n-                  p.onLinkIconAvailable(newBrowser, listener.mIcon);\\n+                if (listener.mIcon) {\\n+                  if (this.isFavIconKnownMissing(listener.mIcon))\\n+                    listener.mIcon = null;\\n+                  else\\n+                    p.onLinkIconAvailable(newBrowser, listener.mIcon);\\n+                }\\n               }\\n             }\\n             this.mCurrentBrowser.userTypedClear = userTypedClear;\\n+            \\n+            this._fastFind.setDocShell(this.mCurrentBrowser.docShell);\\n \\n             // Update the window title.\\n             this.updateTitlebar();\\n-\\n+            \\n             // If the new tab is busy, and our current state is not busy, then\\n             // we need to fire a start to all progress listeners.\\n             const nsIWebProgressListener = Components.interfaces.nsIWebProgressListener;\\n@@ -501,35 +617,24 @@\\n               }\\n             }\\n \\n-            if (document.commandDispatcher.focusedElement && \\n-                document.commandDispatcher.focusedElement.parentNode == \\n-                this.mCurrentTab.parentNode) {\\n-              // The focus is on a tab in the same tab panel\\n-              return;  // If focus was on a tab, switching tabs focuses the new tab\\n+            function setFocus(element) {\\n+              Components.lookupMethod(element, \\\"focus\\\").call(element);\\n             }\\n-            \\n-            var whatToFocus = window.content;\\n \\n             // Focus the previously focused element or window\\n+            document.commandDispatcher.suppressFocusScroll = true;\\n             if (newBrowser.focusedElement) {\\n-              if (newBrowser.focusedElement.parentNode != \\n-                  this.mCurrentTab.parentNode) {\\n-                // Focus the remembered element unless it's in the current tab panel\\n-                whatToFocus = newBrowser.focusedElement;\\n+              try {\\n+                setFocus(newBrowser.focusedElement);\\n+              } catch (e) {\\n+                setFocus(newBrowser.focusedWindow);\\n               }\\n             }\\n-            else if (newBrowser.focusedWindow) {\\n-              whatToFocus = newBrowser.focusedWindow;\\n-            }\\n-\\n-            function setFocus(element) {\\n-              document.commandDispatcher.suppressFocusScroll = true;\\n-              Components.lookupMethod(element, \\\"focus\\\").call(element);\\n-              document.commandDispatcher.suppressFocusScroll = false;\\n-            }\\n-\\n-            // Use setTimeout to avoid focus outline ghosting.\\n-            setTimeout(setFocus, 0, whatToFocus);\\n+            else if (newBrowser.focusedWindow)\\n+              setFocus(newBrowser.focusedWindow);\\n+            else // new tab, focus our new content area\\n+              setTimeout(setFocus, 0, window.content);\\n+            document.commandDispatcher.suppressFocusScroll = false;    \\n           ]]>\\n         </body>\\n       </method>\\n@@ -614,31 +719,25 @@\\n                                          null) != nsIContentPolicy.ACCEPT)\\n               return;\\n \\n-            // var browserIndex = tabBrowser.getBrowserIndexForDocument(targetDoc);\\n-            var browserIndex = -1;\\n-            if (tabBrowser.mTabbedMode) {\\n-                for (var i = 0; i < tabBrowser.mPanelContainer.childNodes.length; i++) {\\n-                    if (tabBrowser.mPanelContainer.childNodes[i].contentDocument == targetDoc) {\\n-                        browserIndex = i;\\n-                        break;\\n-                    }\\n-                }\\n-            } else {\\n-                if (tabBrowser.mCurrentBrowser.contentDocument == targetDoc)\\n-                    browserIndex = 0;\\n-            }\\n-\\n+            var browserIndex = tabBrowser.getBrowserIndexForDocument(targetDoc);\\n             // no browser? no favicon.\\n             if (browserIndex == -1)\\n               return;\\n \\n             var listener = tabBrowser.mTabListeners[browserIndex];\\n             // there's no tab listener for non-tabbed mode browser 0\\n+\\n+            if (tabBrowser.isFavIconKnownMissing(href)) {\\n+              if (listener)\\n+                listener.mIcon = null;\\n+              return;\\n+            }\\n+\\n             if (listener)\\n               listener.mIcon = href;\\n \\n             if (tabBrowser.mProgressListeners) {\\n-              var targetBrowser = tabBrowser.mTabbedMode ? tabBrowser.mPanelContainer.childNodes[i] : tabBrowser.mCurrentBrowser;\\n+              var targetBrowser = tabBrowser.getBrowserAtIndex(browserIndex);\\n               for (i = 0; i < tabBrowser.mProgressListeners.length; i++) {\\n                 var p = tabBrowser.mProgressListeners[i];\\n                 if (p)\\n@@ -657,14 +756,14 @@\\n               return;\\n \\n             var i = 0;\\n-            for ( ; i < this.parentNode.childNodes.length; i++) {\\n-              if (this.parentNode.childNodes[i] == this)\\n+            for ( ; i < this.parentNode.parentNode.childNodes.length; i++) {\\n+              if (this.parentNode.parentNode.childNodes[i].firstChild.nextSibling == this)\\n                 break;\\n             }\\n+            \\n+            var tabBrowser = this.parentNode.parentNode.parentNode.parentNode;\\n \\n-            var tabBrowser = this.parentNode.parentNode.parentNode;\\n             var tab = tabBrowser.mTabContainer.childNodes[i];\\n-\\n             tabBrowser.setTabTitle(tab);\\n \\n             if (tab == tabBrowser.mCurrentTab)\\n@@ -760,14 +859,25 @@\\n             }\\n \\n             // Wire up a progress listener to our filter.\\n-            const listener = this.mTabProgressListener(this.mCurrentTab,\\n-                                                       this.mCurrentBrowser,\\n-                                                       false);\\n+            const listener = this.mTabProgressListener(this.mCurrentTab, this.mCurrentBrowser, false);\\n             filter.addProgressListener(listener, Components.interfaces.nsIWebProgress.NOTIFY_ALL);\\n             this.mTabListeners[0] = listener;\\n           ]]>\\n         </body>\\n       </method>\\n+      \\n+      <method name=\\\"_createMessage\\\">\\n+        <parameter name=\\\"aType\\\"/>\\n+        <body>\\n+          <![CDATA[\\n+            var message = document.createElementNS(\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n+                                                   \\\"browsermessage\\\"); \\n+            message.hidden = true;\\n+            message.setAttribute(\\\"type\\\", aType);\\n+            return message;\\n+          ]]>\\n+        </body>\\n+      </method>\\n \\n       <method name=\\\"addTab\\\">\\n         <parameter name=\\\"aURI\\\"/>\\n@@ -776,14 +886,16 @@\\n         <parameter name=\\\"aPostData\\\"/>\\n         <body>\\n           <![CDATA[\\n+            var blank = (aURI == \\\"about:blank\\\");\\n+\\n             if (!this.mTabbedMode)\\n               this.enterTabbedMode();\\n \\n+            var b = document.createElementNS(\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n+                                             \\\"browser\\\"); \\n             var t = document.createElementNS(\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n                                              \\\"tab\\\");\\n \\n-            var blank = (aURI == \\\"about:blank\\\");\\n-\\n             if (blank)\\n               t.setAttribute(\\\"label\\\", this.mStringBundle.getString(\\\"tabs.untitled\\\"));\\n             else\\n@@ -798,14 +910,21 @@\\n             t.setAttribute(\\\"onerror\\\", \\\"this.parentNode.parentNode.parentNode.parentNode.addToMissedIconCache(this.getAttribute('image')); this.removeAttribute('image');\\\");\\n             this.mTabContainer.appendChild(t);\\n \\n-            var b = document.createElementNS(\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n-                                             \\\"browser\\\");\\n             b.setAttribute(\\\"type\\\", \\\"content\\\");\\n+            b.setAttribute(\\\"message\\\", \\\"true\\\");\\n             b.setAttribute(\\\"contextmenu\\\", this.getAttribute(\\\"contentcontextmenu\\\"));\\n             b.setAttribute(\\\"tooltip\\\", this.getAttribute(\\\"contenttooltip\\\"));\\n             b.setAttribute(\\\"autocompletepopup\\\", this.getAttribute(\\\"autocompletepopup\\\"));\\n             \\n-            this.mPanelContainer.appendChild(b);\\n+            // Add the Message and the Browser to the box            \\n+            var vbox = document.createElementNS(\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\",\\n+                                                \\\"vbox\\\"); \\n+            vbox.setAttribute(\\\"flex\\\", \\\"1\\\");\\n+            vbox.appendChild(this._createMessage(\\\"top\\\"));\\n+            vbox.appendChild(b);\\n+            vbox.appendChild(this._createMessage(\\\"bottom\\\"));\\n+            b.setAttribute(\\\"flex\\\", \\\"1\\\");\\n+            this.mPanelContainer.appendChild(vbox);\\n \\n             b.addEventListener(\\\"DOMTitleChanged\\\", this.onTitleChanged, false);\\n \\n@@ -823,6 +942,8 @@\\n             b.webProgress.addProgressListener(filter, Components.interfaces.nsIWebProgress.NOTIFY_ALL);\\n             this.mTabListeners[position] = tabListener;\\n             this.mTabFilters[position] = filter;\\n+            \\n+            b._fastFind = this.fastFind;\\n \\n             if (!blank) {\\n               // pretend the user typed this so it'll be available till\\n@@ -840,19 +961,68 @@\\n         </body>\\n       </method>\\n \\n+      <method name=\\\"warnAboutClosingTabs\\\">\\n+      <parameter name=\\\"aAll\\\"/>\\n+      <body>\\n+        <![CDATA[          \\n+          var numTabs = this.mTabContainer.childNodes.length;\\n+          var reallyClose = true;\\n+          if (numTabs <= 1)\\n+            return reallyClose;\\n+            \\n+          const pref = \\\"browser.tabs.warnOnClose\\\";\\n+          var shouldPrompt = this.mPrefs.getBoolPref(pref);\\n+          var reallyClose = true;            \\n+\\n+          if (shouldPrompt) {\\n+            var promptService = Components.classes[\\\"@mozilla.org/embedcomp/prompt-service;1\\\"]\\n+                                          .getService(Components.interfaces.nsIPromptService);\\n+\\n+            //default to true: if it were false, we wouldn't get this far\\n+            var warnOnClose = { value:true };\\n+            var bundle = this.mStringBundle;\\n+            var tabsToClose = numTabs;  //number of tabs to be removed\\n+            if (!aAll)\\n+              --tabsToClose; \\n+\\n+            var messageKey = (tabsToClose == 1) ? \\\"tabs.closeWarningOne\\\" : \\\"tabs.closeWarningMultiple\\\";\\n+            var closeKey = (tabsToClose == 1) ? \\\"tabs.closeButtonOne\\\" : \\\"tabs.closeButtonMultiple\\\";\\n+            var buttonPressed = promptService.confirmEx(window,\\n+                                                        bundle.getString('tabs.closeWarningTitle'),\\n+                                                        bundle.getFormattedString(messageKey, [tabsToClose]),\\n+                                                        (promptService.BUTTON_TITLE_IS_STRING * promptService.BUTTON_POS_0)\\n+                                                        + (promptService.BUTTON_TITLE_CANCEL * promptService.BUTTON_POS_1),\\n+                                                        bundle.getString(closeKey),\\n+                                                        null, null,\\n+                                                        bundle.getString('tabs.closeWarningPromptMe'),\\n+                                                        warnOnClose);\\n+            reallyClose = (buttonPressed == 0);\\n+            // don't set the pref unless they press OK and it's false\\n+            if (reallyClose && !warnOnClose.value)\\n+              this.mPrefs.setBoolPref(pref, false);\\n+          }\\n+          return reallyClose;\\n+        ]]>\\n+      </body>\\n+      </method>\\n+      \\n       <method name=\\\"removeAllTabsBut\\\">\\n         <parameter name=\\\"aTab\\\"/>\\n         <body>\\n           <![CDATA[\\n-            if (aTab.localName != \\\"tab\\\")\\n-              aTab = this.mCurrentTab;\\n-            else\\n-              this.mTabContainer.selectedItem = aTab;\\n+              if (this.warnAboutClosingTabs(false)) {\\n+                if (aTab.localName != \\\"tab\\\")\\n+                  aTab = this.mCurrentTab;\\n+                else\\n+                  this.mTabContainer.selectedItem = aTab;\\n+\\n+                var childNodes = this.mTabContainer.childNodes;\\n \\n-            var childNodes = this.mTabContainer.childNodes;\\n-            for (var i = childNodes.length - 1; i >= 0; --i) {\\n-              if (childNodes[i] != aTab)\\n-                this.removeTab(childNodes[i]);\\n+                for (var i = childNodes.length - 1; i >= 0; --i) {\\n+                  if (childNodes[i] != aTab)\\n+                    this.removeTab(childNodes[i]);\\n+                }\\n+              }\\n             }\\n           ]]>\\n         </body>\\n@@ -875,6 +1045,11 @@\\n \\n             var l = this.mTabContainer.childNodes.length;\\n             if (l == 1) {\\n+              if (!this.mPrefs.getBoolPref(\\\"browser.tabs.autoHide\\\")) {\\n+                // blank the tab\\n+                this.loadURI(\\\"about:blank\\\");\\n+                return;\\n+              }\\n               // hide the tab bar\\n               this.mPrefs.setBoolPref(\\\"browser.tabs.forceHide\\\", true);\\n               this.setStripVisibilityTo(false);\\n@@ -904,7 +1079,7 @@\\n \\n             // Remove the tab's filter and progress listener.\\n             const filter = this.mTabFilters[index];\\n-            var oldBrowser = this.mPanelContainer.childNodes[index];\\n+            var oldBrowser = this.getBrowserAtIndex(index);\\n             oldBrowser.webProgress.removeProgressListener(filter);\\n             filter.removeProgressListener(this.mTabListeners[index]);\\n             this.mTabFilters.splice(index, 1);\\n@@ -938,7 +1113,7 @@\\n             oldBrowser.destroy();\\n             \\n             this.mTabContainer.removeChild(oldTab);\\n-            this.mPanelContainer.removeChild(oldBrowser);\\n+            this.mPanelContainer.removeChild(this.mPanelContainer.childNodes[index]);\\n \\n             this.selectedTab = this.mTabContainer.childNodes[newIndex];\\n             this.mPanelContainer.selectedIndex = newIndex;\\n@@ -955,7 +1130,7 @@\\n             var l = this.mPanelContainer.childNodes.length;\\n             for (var i = 0; i < l; i++) {\\n               try {\\n-                this.mPanelContainer.childNodes[i].reload();\\n+                this.getBrowserAtIndex(i).reload();\\n               } catch (e) {\\n                 // ignore failure to reload so others will be reloaded\\n               }\\n@@ -1058,7 +1233,7 @@\\n \\n           for (var i = 0; i < this.mTabContainer.childNodes.length; i++) {\\n             if (this.mTabContainer.childNodes[i] == aTab) {\\n-              return this.mPanelContainer.childNodes[i];\\n+              return this.getBrowserAtIndex(i);\\n             }\\n           }\\n \\n@@ -1092,7 +1267,7 @@\\n \\n \\n       <property name=\\\"browsers\\\"\\n-                onget=\\\"return this.mPanelContainer.childNodes;\\\"\\n+                onget=\\\"return this.mPanelContainer.getElementsByTagName('browser');\\\"\\n                 readonly=\\\"true\\\"/>\\n \\n       <!-- Drag and drop observer API -->\\n@@ -1265,9 +1440,8 @@\\n       \\n       <method name=\\\"attachFormFill\\\">\\n         <body><![CDATA[\\n-          var browsers = this.mPanelContainer.childNodes;\\n-          for (var i = 0; i < browsers.length; ++i) {\\n-            var cb = browsers[i];\\n+          for (var i = 0; i < this.mPanelContainer.childNodes.length; ++i) {\\n+            var cb = this.getBrowserAtIndex(i);\\n             cb.attachFormFill();\\n           }\\n         ]]></body>\\n@@ -1275,9 +1449,8 @@\\n \\n       <method name=\\\"detachFormFill\\\">\\n         <body><![CDATA[\\n-          var browsers = this.mPanelContainer.childNodes;\\n-          for (var i = 0; i < browsers.length; ++i) {\\n-            var cb = browsers[i];\\n+          for (var i = 0; i < this.mPanelContainer.childNodes.length; ++i) {\\n+            var cb = this.getBrowserAtIndex(i);\\n             cb.detachFormFill();\\n           }\\n         ]]></body>\\n@@ -1291,6 +1464,25 @@\\n                 onget=\\\"return this.mCurrentBrowser.currentURI;\\\"\\n                 readonly=\\\"true\\\"/>\\n \\n+      <field name=\\\"_fastFind\\\">null</field>\\n+      <property name=\\\"fastFind\\\"\\n+                readonly=\\\"true\\\">\\n+        <getter>\\n+        <![CDATA[\\n+          if (!this._fastFind) {\\n+            this._fastFind = Components.classes[\\\"@mozilla.org/typeaheadfind;1\\\"]\\n+                                       .createInstance(Components.interfaces.nsITypeAheadFind);                                \\n+            this._fastFind.init(this.docShell);\\n+          }\\n+          return this._fastFind;\\n+        ]]>\\n+        </getter>\\n+      </property>\\n+                      \\n+      <property name=\\\"findString\\\"\\n+                onget=\\\"return this.mCurrentBrowser.findString;\\\"\\n+                readonly=\\\"true\\\"/>\\n+                \\n       <property name=\\\"docShell\\\"\\n                 onget=\\\"return this.mCurrentBrowser.docShell\\\"\\n                 readonly=\\\"true\\\"/>\\n@@ -1366,6 +1558,20 @@\\n           ]]>\\n         </body>\\n       </method>\\n+      <field name=\\\"_keyEventHandler\\\" readonly=\\\"true\\\">\\n+      <![CDATA[({\\n+        tabbrowser: this,\\n+        handleEvent: function handleEvent(aEvent) {\\n+\\t  if (!aEvent.isTrusted) {\\n+\\t    // Don't let untrusted events mess with tabs.\\n+\\t    return;\\n+\\t  }\\n+\\n+          if (aEvent.ctrlKey && aEvent.keyCode == KeyEvent.DOM_VK_F4 && this.tabbrowser.mTabBox.handleCtrlPageUpDown)\\n+            this.tabbrowser.removeCurrentTab();\\n+        }\\n+      })]]>\\n+      </field>      \\n \\n       <property name=\\\"canFindAgain\\\"\\n                 onget=\\\"return this.mCurrentBrowser.canFindAgain;\\\"\\n@@ -1384,49 +1590,55 @@\\n \\n       <constructor>\\n         <![CDATA[\\n-          this.mCurrentBrowser = this.mPanelContainer.firstChild;\\n+          this.mCurrentBrowser = this.getBrowserAtIndex(0);\\n           this.mCurrentTab = this.mTabContainer.firstChild;\\n-          this.mTabBox.handleCtrlTab = !/Mac/.test(navigator.platform);\\n+          document.addEventListener(\\\"keypress\\\", this._keyEventHandler, false);\\n         ]]>\\n       </constructor>\\n \\n       <destructor>\\n         <![CDATA[\\n           for (var i = 0; i < this.mTabListeners.length; ++i) {\\n-            this.mPanelContainer.childNodes[i].webProgress.removeProgressListener(this.mTabFilters[i]);\\n+            this.getBrowserAtIndex(i).webProgress.removeProgressListener(this.mTabFilters[i]);\\n             this.mTabFilters[i].removeProgressListener(this.mTabListeners[i]);\\n             this.mTabFilters[i] = null;\\n             this.mTabListeners[i] = null;\\n-            this.mPanelContainer.childNodes[i].removeEventListener(\\\"DOMTitleChanged\\\", this.onTitleChanged, false);\\n+            this.getBrowserAtIndex(i).removeEventListener(\\\"DOMTitleChanged\\\", this.onTitleChanged, false);\\n           }\\n           this.mPanelContainer.removeEventListener(\\\"DOMLinkAdded\\\", this.onLinkAdded, false);\\n+          document.removeEventListener(\\\"keypress\\\", this._keyEventHandler, false);\\n         ]]>\\n       </destructor>\\n     </implementation>\\n \\n     <handlers>\\n-      <handler event=\\\"keypress\\\" modifiers=\\\"control\\\" keycode=\\\"VK_F4\\\">\\n-        <![CDATA[\\n-          if (this.mTabBox.handleCtrlPageUpDown)\\n-            this.removeCurrentTab();\\n-        ]]>\\n-      </handler>\\n-\\n       <handler event=\\\"DOMWindowClose\\\">\\n         <![CDATA[\\n           if (!event.isTrusted)\\n             return;\\n \\n-          const browsers = this.browsers;\\n-          if (browsers.length == 1)\\n+          const browsers = this.mPanelContainer.childNodes;\\n+          if (browsers.length == 1) {\\n+            // There's only one browser left. If a window is being\\n+            // closed and the window is *not* the window in the\\n+            // browser that's still around, prevent the event's default\\n+            // action to prevent closing a window that's being closed\\n+            // already.\\n+            if (this.getBrowserAtIndex(0).contentWindow != event.target)\\n+              event.preventDefault();\\n+\\n             return;\\n+          }\\n+\\n           var i = 0;\\n           for (; i < browsers.length; ++i) {\\n-            if (browsers[i].contentWindow == event.target)\\n+            if (this.getBrowserAtIndex(i).contentWindow == event.target) {\\n+              this.removeTab(this.mTabContainer.childNodes[i]);\\n+              event.preventDefault();\\n+\\n               break;\\n+            }\\n           }\\n-          this.removeTab(this.mTabContainer.childNodes[i]);\\n-          event.preventDefault();\\n         ]]>\\n       </handler>\\n       <handler event=\\\"DOMWillOpenModalDialog\\\">\\n\""}