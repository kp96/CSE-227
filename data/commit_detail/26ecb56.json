{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas26ecb56\""},"diff":"\"26ecb56 Bug 371680 - expose nsIAccessibleText::scrollSubstringTo, r=aaronlev, roc, sr=roc, a=roc\\ndiff --git a/accessible/public/nsIAccessibleText.idl b/accessible/public/nsIAccessibleText.idl\\nindex 879421d..a61e54f 100644\\n--- a/accessible/public/nsIAccessibleText.idl\\n+++ b/accessible/public/nsIAccessibleText.idl\\n@@ -45,7 +45,7 @@ typedef long nsAccessibleTextBoundary;\\n \\n interface nsIAccessible;\\n \\n-[scriptable, uuid(17389a66-5cc5-4550-80e0-49e7b63990a4)]\\n+[scriptable, uuid(948419b2-53f6-4a74-bb69-1345faf3e8e8)]\\n interface nsIAccessibleText : nsISupports\\n {\\n   const nsAccessibleTextBoundary BOUNDARY_CHAR = 0;\\n@@ -167,6 +167,20 @@ interface nsIAccessibleText : nsISupports\\n   void addSelection (in long startOffset, in long endOffset);\\n \\n   void removeSelection (in long selectionNum);\\n+\\n+\\n+  /**\\n+   * Makes a specific part of string visible on screen.\\n+   *\\n+   * @param aStartIndex - 0-based character offset.\\n+   * @param aEndIndex - 0-based character offset - the offset of the\\n+   *                        character just past the last character of the\\n+   *                        string.\\n+   * @param aScrollType - defines how to scroll (see nsIAccessibleScrollType for\\n+   *                      available constants).\\n+   */\\n+  void scrollSubstringTo(in long aStartIndex, in long aEndIndex,\\n+                         in unsigned long aScrollType);\\n };\\n \\n /*\\ndiff --git a/accessible/public/nsIAccessibleTypes.idl b/accessible/public/nsIAccessibleTypes.idl\\nindex be4ac5a..0ea7825 100755\\n--- a/accessible/public/nsIAccessibleTypes.idl\\n+++ b/accessible/public/nsIAccessibleTypes.idl\\n@@ -80,6 +80,12 @@ interface nsIAccessibleScrollType : nsISupports\\n    * window (or as close as possible).\\n    */\\n   const unsigned long SCROLL_TYPE_RIGHT_EDGE = 0x05;\\n+\\n+  /**\\n+   * Scroll an object the minimum amount necessary in order for the entire\\n+   * frame to be visible (if possible).\\n+   */\\n+  const unsigned long SCROLL_TYPE_ANYWHERE = 0x06;\\n };\\n \\n \\n@@ -106,3 +112,4 @@ interface nsIAccessibleCoordinateType : nsISupports\\n    */\\n   const unsigned long COORDTYPE_PARENT_RELATIVE = 0x02;\\n };\\n+\\ndiff --git a/accessible/src/base/nsAccessNode.cpp b/accessible/src/base/nsAccessNode.cpp\\nindex 420a10f..64c571a 100755\\n--- a/accessible/src/base/nsAccessNode.cpp\\n+++ b/accessible/src/base/nsAccessNode.cpp\\n@@ -426,35 +426,8 @@ nsAccessNode::ScrollTo(PRUint32 aScrollType)\\n   nsCOMPtr<nsIContent> content = frame->GetContent();\\n   NS_ENSURE_TRUE(content, NS_ERROR_FAILURE);\\n \\n-  PRInt32 vPercent, hPercent;\\n-  switch (aScrollType)\\n-  {\\n-    case nsIAccessibleScrollType::SCROLL_TYPE_TOP_LEFT:\\n-      vPercent = NS_PRESSHELL_SCROLL_TOP;\\n-      hPercent = NS_PRESSHELL_SCROLL_LEFT;\\n-      break;\\n-    case nsIAccessibleScrollType::SCROLL_TYPE_BOTTOM_RIGHT:\\n-      vPercent = NS_PRESSHELL_SCROLL_BOTTOM;\\n-      hPercent = NS_PRESSHELL_SCROLL_RIGHT;\\n-      break;\\n-    case nsIAccessibleScrollType::SCROLL_TYPE_TOP_EDGE:\\n-      vPercent = NS_PRESSHELL_SCROLL_TOP;\\n-      hPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n-      break;\\n-    case nsIAccessibleScrollType::SCROLL_TYPE_BOTTOM_EDGE:\\n-      vPercent = NS_PRESSHELL_SCROLL_BOTTOM;\\n-      hPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n-      break;\\n-    case nsIAccessibleScrollType::SCROLL_TYPE_LEFT_EDGE:\\n-      vPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n-      hPercent = NS_PRESSHELL_SCROLL_LEFT;\\n-      break;\\n-    case nsIAccessibleScrollType::SCROLL_TYPE_RIGHT_EDGE:\\n-      vPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n-      hPercent = NS_PRESSHELL_SCROLL_RIGHT;\\n-      break;\\n-  }\\n-\\n+  PRInt16 vPercent, hPercent;\\n+  nsAccUtils::ConvertScrollTypeToPercents(aScrollType, &vPercent, &hPercent);\\n   return shell->ScrollContentIntoView(content, vPercent, hPercent);\\n }\\n \\ndiff --git a/accessible/src/base/nsAccessibilityUtils.cpp b/accessible/src/base/nsAccessibilityUtils.cpp\\nindex 2400044..98aae9d 100755\\n--- a/accessible/src/base/nsAccessibilityUtils.cpp\\n+++ b/accessible/src/base/nsAccessibilityUtils.cpp\\n@@ -38,12 +38,21 @@\\n \\n #include \\\"nsAccessibilityUtils.h\\\"\\n \\n+#include \\\"nsIAccessibleTypes.h\\\"\\n #include \\\"nsPIAccessible.h\\\"\\n #include \\\"nsAccessibleEventData.h\\\"\\n \\n+#include \\\"nsIDOMRange.h\\\"\\n #include \\\"nsIDOMXULSelectCntrlEl.h\\\"\\n #include \\\"nsIDOMXULSelectCntrlItemEl.h\\\"\\n #include \\\"nsIEventListenerManager.h\\\"\\n+#include \\\"nsISelection2.h\\\"\\n+#include \\\"nsISelectionController.h\\\"\\n+\\n+#include \\\"nsContentCID.h\\\"\\n+#include \\\"nsComponentManagerUtils.h\\\"\\n+\\n+static NS_DEFINE_IID(kRangeCID, NS_RANGE_CID);\\n \\n void\\n nsAccUtils::GetAccAttr(nsIPersistentProperties *aAttributes, nsIAtom *aAttrName,\\n@@ -223,3 +232,82 @@ nsAccUtils::GetAncestorWithRole(nsIAccessible *aDescendant, PRUint32 aRole)\\n   }\\n   return nsnull;\\n }\\n+\\n+nsresult\\n+nsAccUtils::ScrollSubstringTo(nsIFrame *aFrame,\\n+                              nsIDOMNode *aStartNode, PRInt32 aStartIndex,\\n+                              nsIDOMNode *aEndNode, PRInt32 aEndIndex,\\n+                              PRUint32 aScrollType)\\n+{\\n+  if (!aFrame || !aStartNode || !aEndNode)\\n+    return NS_ERROR_FAILURE;\\n+\\n+  nsPresContext *presContext = aFrame->PresContext();\\n+\\n+  nsCOMPtr<nsIDOMRange> scrollToRange = do_CreateInstance(kRangeCID);\\n+  NS_ENSURE_TRUE(scrollToRange, NS_ERROR_FAILURE);\\n+\\n+  nsCOMPtr<nsISelectionController> selCon;\\n+  aFrame->GetSelectionController(presContext, getter_AddRefs(selCon));\\n+  NS_ENSURE_TRUE(selCon, NS_ERROR_FAILURE);\\n+\\n+  scrollToRange->SetStart(aStartNode, aStartIndex);\\n+  scrollToRange->SetEnd(aEndNode, aEndIndex);\\n+\\n+  nsCOMPtr<nsISelection> selection1;\\n+  selCon->GetSelection(nsISelectionController::SELECTION_ACCESSIBILITY,\\n+                       getter_AddRefs(selection1));\\n+\\n+  nsCOMPtr<nsISelection2> selection(do_QueryInterface(selection1));\\n+  if (selection) {\\n+    selection->RemoveAllRanges();\\n+    selection->AddRange(scrollToRange);\\n+\\n+    PRInt16 vPercent, hPercent;\\n+    ConvertScrollTypeToPercents(aScrollType, &vPercent, &hPercent);\\n+    selection->ScrollIntoView(nsISelectionController::SELECTION_ANCHOR_REGION,\\n+                              PR_TRUE, vPercent, hPercent);\\n+\\n+    selection->CollapseToStart();\\n+  }\\n+\\n+  return NS_OK;\\n+}\\n+\\n+void\\n+nsAccUtils::ConvertScrollTypeToPercents(PRUint32 aScrollType,\\n+                                        PRInt16 *aVPercent,\\n+                                        PRInt16 *aHPercent)\\n+{\\n+  switch (aScrollType)\\n+  {\\n+    case nsIAccessibleScrollType::SCROLL_TYPE_TOP_LEFT:\\n+      *aVPercent = NS_PRESSHELL_SCROLL_TOP;\\n+      *aHPercent = NS_PRESSHELL_SCROLL_LEFT;\\n+      break;\\n+    case nsIAccessibleScrollType::SCROLL_TYPE_BOTTOM_RIGHT:\\n+      *aVPercent = NS_PRESSHELL_SCROLL_BOTTOM;\\n+      *aHPercent = NS_PRESSHELL_SCROLL_RIGHT;\\n+      break;\\n+    case nsIAccessibleScrollType::SCROLL_TYPE_TOP_EDGE:\\n+      *aVPercent = NS_PRESSHELL_SCROLL_TOP;\\n+      *aHPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n+      break;\\n+    case nsIAccessibleScrollType::SCROLL_TYPE_BOTTOM_EDGE:\\n+      *aVPercent = NS_PRESSHELL_SCROLL_BOTTOM;\\n+      *aHPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n+      break;\\n+    case nsIAccessibleScrollType::SCROLL_TYPE_LEFT_EDGE:\\n+      *aVPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n+      *aHPercent = NS_PRESSHELL_SCROLL_LEFT;\\n+      break;\\n+    case nsIAccessibleScrollType::SCROLL_TYPE_RIGHT_EDGE:\\n+      *aVPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n+      *aHPercent = NS_PRESSHELL_SCROLL_RIGHT;\\n+      break;\\n+    default:\\n+      *aVPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n+      *aHPercent = NS_PRESSHELL_SCROLL_ANYWHERE;\\n+  }\\n+}\\n+\\ndiff --git a/accessible/src/base/nsAccessibilityUtils.h b/accessible/src/base/nsAccessibilityUtils.h\\nindex 8f26282..0bc1662 100755\\n--- a/accessible/src/base/nsAccessibilityUtils.h\\n+++ b/accessible/src/base/nsAccessibilityUtils.h\\n@@ -45,6 +45,7 @@\\n #include \\\"nsIDOMNode.h\\\"\\n #include \\\"nsIPersistentProperties2.h\\\"\\n #include \\\"nsIContent.h\\\"\\n+#include \\\"nsIFrame.h\\\"\\n \\n class nsAccUtils\\n {\\n@@ -124,7 +125,7 @@ public:\\n    static PRBool IsAncestorOf(nsIDOMNode *aPossibleAncestorNode,\\n                               nsIDOMNode *aPossibleDescendantNode);\\n \\n-   /**\\n+  /**\\n     * If an ancestor in this document exists with the given role, return it\\n     * @param aDescendant Descendant to start search with\\n     * @param aRole Role to find matching ancestor for\\n@@ -132,6 +133,31 @@ public:\\n     */\\n    static already_AddRefed<nsIAccessible>\\n      GetAncestorWithRole(nsIAccessible *aDescendant, PRUint32 aRole);\\n+\\n+  /**\\n+   * Helper method to scroll range into view, used for implementation of\\n+   * nsIAccessibleText::scrollSubstringTo().\\n+   *\\n+   * @param aFrame        the frame for accessible the range belongs to.\\n+   * @param aStartNode    start node of a range\\n+   * @param aStartOffset  an offset inside the start node\\n+   * @param aEndNode      end node of a range\\n+   * @param aEndOffset    an offset inside the end node\\n+   * @param aScrollType   the place a range should be scrolled to\\n+   */\\n+  static nsresult ScrollSubstringTo(nsIFrame *aFrame,\\n+                                    nsIDOMNode *aStartNode, PRInt32 aStartIndex,\\n+                                    nsIDOMNode *aEndNode, PRInt32 aEndIndex,\\n+                                    PRUint32 aScrollType);\\n+\\n+  /**\\n+   * Converts scroll type constant defined in nsIAccessibleScrollType to\\n+   * vertical and horizontal percents.\\n+   */\\n+  static void ConvertScrollTypeToPercents(PRUint32 aScrollType,\\n+                                          PRInt16 *aVPercent,\\n+                                          PRInt16 *aHPercent);\\n };\\n \\n #endif\\n+\\ndiff --git a/accessible/src/html/nsHyperTextAccessible.cpp b/accessible/src/html/nsHyperTextAccessible.cpp\\nindex 4201153..a5c39aa 100644\\n--- a/accessible/src/html/nsHyperTextAccessible.cpp\\n+++ b/accessible/src/html/nsHyperTextAccessible.cpp\\n@@ -315,7 +315,9 @@ nsIntRect nsHyperTextAccessible::GetBoundsForString(nsIFrame *aFrame, PRUint32 a\\n nsIFrame*\\n nsHyperTextAccessible::GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset,\\n                                      nsAString *aText, nsIFrame **aEndFrame,\\n-                                     nsIntRect *aBoundsRect)\\n+                                     nsIntRect *aBoundsRect,\\n+                                     nsIAccessible **aStartAcc,\\n+                                     nsIAccessible **aEndAcc)\\n {\\n   PRInt32 startOffset = aStartOffset;\\n   PRInt32 endOffset = aEndOffset;\\n@@ -339,6 +341,10 @@ nsHyperTextAccessible::GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset,\\n   if (aBoundsRect) {\\n     aBoundsRect->Empty();\\n   }\\n+  if (aStartAcc)\\n+    *aStartAcc = nsnull;\\n+  if (aEndAcc)\\n+    *aEndAcc = nsnull;\\n \\n   nsIntRect unionRect;\\n   nsCOMPtr<nsIAccessible> accessible;\\n@@ -385,6 +391,8 @@ nsHyperTextAccessible::GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset,\\n                                                &outStartLineUnused, &frame);\\n           if (aEndFrame) {\\n             *aEndFrame = frame; // We ended in the current frame\\n+            if (aEndAcc)\\n+              NS_ADDREF(*aEndAcc = accessible);\\n           }\\n           if (substringEndOffset > endOffset) {\\n             // Need to stop before the end of the available text\\n@@ -405,6 +413,8 @@ nsHyperTextAccessible::GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset,\\n         if (!startFrame) {\\n           startFrame = frame;\\n           aStartOffset = startOffset;\\n+          if (aStartAcc)\\n+            NS_ADDREF(*aStartAcc = accessible);\\n         }\\n         // We already started copying in this accessible's string,\\n         // for the next accessible we'll start at offset 0\\n@@ -438,6 +448,8 @@ nsHyperTextAccessible::GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset,\\n         if (!startFrame) {\\n           startFrame = frame;\\n           aStartOffset = 0;\\n+          if (aStartAcc)\\n+            NS_ADDREF(*aStartAcc = accessible);\\n         }\\n       }\\n       -- endOffset;\\n@@ -449,6 +461,8 @@ nsHyperTextAccessible::GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset,\\n \\n   if (aEndFrame && !*aEndFrame) {\\n     *aEndFrame = startFrame;\\n+    if (aStartAcc && aEndAcc)\\n+      NS_ADDREF(*aEndAcc = *aStartAcc);\\n   }\\n \\n   return startFrame;\\n@@ -1509,6 +1523,58 @@ NS_IMETHODIMP nsHyperTextAccessible::RemoveSelection(PRInt32 aSelectionNum)\\n   return domSel->RemoveRange(range);\\n }\\n \\n+NS_IMETHODIMP\\n+nsHyperTextAccessible::ScrollSubstringTo(PRInt32 aStartIndex, PRInt32 aEndIndex,\\n+                                         PRUint32 aScrollType)\\n+{\\n+  PRInt32 startOffset = aStartIndex, endOffset = aEndIndex;\\n+  nsIFrame *startFrame = nsnull, *endFrame = nsnull;\\n+  nsCOMPtr<nsIAccessible> startAcc, endAcc;\\n+\\n+  startFrame = GetPosAndText(startOffset, endOffset,\\n+                             nsnull, &endFrame, nsnull,\\n+                             getter_AddRefs(startAcc), getter_AddRefs(endAcc));\\n+  if (!startFrame || !endFrame)\\n+    return NS_ERROR_FAILURE;\\n+\\n+  nsCOMPtr<nsIDOMNode> startNode;\\n+  nsCOMPtr<nsIContent> startContent(startFrame->GetContent());\\n+\\n+  PRBool isStartAccText = IsText(startAcc);\\n+  if (isStartAccText) {\\n+    nsresult rv = RenderedToContentOffset(startFrame, startOffset,\\n+                                          &startOffset);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    startNode = do_QueryInterface(startContent);\\n+  } else {\\n+    nsCOMPtr<nsIContent> startParent(startContent->GetParent());\\n+    NS_ENSURE_STATE(startParent);\\n+    startOffset = startParent->IndexOf(startContent);\\n+    startNode = do_QueryInterface(startParent);\\n+  }\\n+  NS_ENSURE_STATE(startNode);\\n+\\n+  nsCOMPtr<nsIDOMNode> endNode;\\n+  nsCOMPtr<nsIContent> endContent(endFrame->GetContent());\\n+\\n+  PRBool isEndAccText = IsText(endAcc);\\n+  if (isEndAccText) {\\n+    nsresult rv = RenderedToContentOffset(endFrame, endOffset,\\n+                                          &endOffset);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+    endNode = do_QueryInterface(endContent);\\n+  } else {\\n+    nsCOMPtr<nsIContent> endParent(endContent->GetParent());\\n+    NS_ENSURE_STATE(endParent);\\n+    endOffset = endParent->IndexOf(endContent);\\n+    endNode = do_QueryInterface(endParent);\\n+  }\\n+  NS_ENSURE_STATE(endNode);\\n+\\n+  return nsAccUtils::ScrollSubstringTo(GetFrame(), startNode, startOffset,\\n+                                       endNode, endOffset, aScrollType);\\n+}\\n+\\n nsresult nsHyperTextAccessible::ContentToRenderedOffset(nsIFrame *aFrame, PRInt32 aContentOffset,\\n                                                         PRUint32 *aRenderedOffset)\\n {\\ndiff --git a/accessible/src/html/nsHyperTextAccessible.h b/accessible/src/html/nsHyperTextAccessible.h\\nindex c8f9032..d025c05 100644\\n--- a/accessible/src/html/nsHyperTextAccessible.h\\n+++ b/accessible/src/html/nsHyperTextAccessible.h\\n@@ -139,20 +139,38 @@ protected:\\n     */\\n   PRInt32 GetRelativeOffset(nsIPresShell *aPresShell, nsIFrame *aFromFrame, PRInt32 aFromOffset,\\n                             nsSelectionAmount aAmount, nsDirection aDirection, PRBool aNeedsStart);\\n+\\n   /**\\n-    * Given a start offset and end offset, get substring information. Different info is returned depending\\n-    * on what optional paramters are provided.\\n-    * @param aStartOffset, the start offset into the hyper text. This is also an out parameter used to return\\n-    *                      the offset into the start frame's rendered text content (start frame is the @return)\\n-    * @param aEndHyperOffset, the endoffset into the hyper text. This is also an out parameter used to return\\n-    *                    the offset into the end frame's rendered text content\\n-    * @param aText (optional), return the substring's text\\n-    * @param aEndFrame (optional), return the end frame for this substring\\n-    * @param aBoundsRect (optional), return the bounds rectangle for this substring\\n-    * @return the start frame for this substring\\n+    * Provides information for substring that is defined by the given start\\n+    * and end offsets for this hyper text.\\n+    *\\n+    * @param  aStartOffset  [inout] the start offset into the hyper text. This\\n+    *                       is also an out parameter used to return the offset\\n+    *                       into the start frame's rendered text content\\n+    *                       (start frame is the @return)\\n+    *\\n+    * @param  aEndOffset    [inout] the end offset into the hyper text. This is\\n+    *                       also an out parameter used to return\\n+    *                       the offset into the end frame's rendered\\n+    *                       text content.\\n+    *\\n+    * @param  aText         [out, optional] return the substring's text\\n+    * @param  aEndFrame     [out, optional] return the end frame for this\\n+    *                       substring\\n+    * @param  aBoundsRect   [out, optional] return the bounds rectangle for this\\n+    *                       substring\\n+    * @param  aStartAcc     [out, optional] return the start accessible for this\\n+    *                       substring\\n+    * @param  aEndAcc       [out, optional] return the end accessible for this\\n+    *                       substring\\n+    * @return               the start frame for this substring\\n     */\\n-  nsIFrame* GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset, nsAString *aText = nsnull,\\n-                          nsIFrame **aEndFrame = nsnull, nsIntRect *aBoundsRect = nsnull);\\n+  nsIFrame* GetPosAndText(PRInt32& aStartOffset, PRInt32& aEndOffset,\\n+                          nsAString *aText = nsnull,\\n+                          nsIFrame **aEndFrame = nsnull,\\n+                          nsIntRect *aBoundsRect = nsnull,\\n+                          nsIAccessible **aStartAcc = nsnull,\\n+                          nsIAccessible **aEndAcc = nsnull);\\n \\n   nsIntRect GetBoundsForString(nsIFrame *aFrame, PRUint32 aStartRenderedOffset, PRUint32 aEndRenderedOffset);\\n \\ndiff --git a/accessible/src/msaa/CAccessibleText.cpp b/accessible/src/msaa/CAccessibleText.cpp\\nindex 92acbc4..007231f 100755\\n--- a/accessible/src/msaa/CAccessibleText.cpp\\n+++ b/accessible/src/msaa/CAccessibleText.cpp\\n@@ -360,29 +360,8 @@ CAccessibleText::scrollSubstringTo(long aStartIndex, long aEndIndex,\\n {\\n   GET_NSIACCESSIBLETEXT\\n \\n-  nsCOMPtr<nsIAccessible> accessible;\\n-  PRInt32 startOffset = 0, endOffset = 0;\\n-\\n-  // XXX: aEndIndex isn't used.\\n-  textAcc->GetAttributeRange(aStartIndex, &startOffset, &endOffset,\\n-                             getter_AddRefs(accessible));\\n-  if (!accessible)\\n-    return E_FAIL;\\n-\\n-  nsCOMPtr<nsIWinAccessNode> winAccessNode(do_QueryInterface(accessible));\\n-  if (!winAccessNode)\\n-    return E_FAIL;\\n-\\n-  void **instancePtr = 0;\\n-  winAccessNode->QueryNativeInterface(IID_IAccessible2, instancePtr);\\n-  if (!instancePtr)\\n-    return E_FAIL;\\n-\\n-  IAccessible2 *pAccessible2 = static_cast<IAccessible2*>(*instancePtr);\\n-  HRESULT hr = pAccessible2->scrollTo(aScrollType);\\n-  pAccessible2->Release();\\n-\\n-  return hr;\\n+  nsresult rv = textAcc->ScrollSubstringTo(aStartIndex, aEndIndex, aScrollType);\\n+  return NS_FAILED(rv) ? E_FAIL : S_OK;\\n }\\n \\n STDMETHODIMP\\ndiff --git a/accessible/src/msaa/nsTextAccessibleWrap.cpp b/accessible/src/msaa/nsTextAccessibleWrap.cpp\\nindex 3988a32..1042bfd 100755\\n--- a/accessible/src/msaa/nsTextAccessibleWrap.cpp\\n+++ b/accessible/src/msaa/nsTextAccessibleWrap.cpp\\n@@ -39,21 +39,15 @@\\n // NOTE: alphabetically ordered\\n #include \\\"nsTextAccessibleWrap.h\\\"\\n #include \\\"ISimpleDOMText_i.c\\\"\\n-#include \\\"nsContentCID.h\\\"\\n #include \\\"nsIAccessibleDocument.h\\\"\\n-#include \\\"nsIDOMRange.h\\\"\\n #include \\\"nsIFontMetrics.h\\\"\\n #include \\\"nsIFrame.h\\\"\\n #include \\\"nsPresContext.h\\\"\\n #include \\\"nsIPresShell.h\\\"\\n #include \\\"nsIRenderingContext.h\\\"\\n-#include \\\"nsISelection.h\\\"\\n-#include \\\"nsISelectionController.h\\\"\\n #include \\\"nsIWidget.h\\\"\\n #include \\\"nsIComponentManager.h\\\"\\n \\n-static NS_DEFINE_IID(kRangeCID, NS_RANGE_CID);\\n-\\n // --------------------------------------------------------\\n // nsTextAccessibleWrap Accessible\\n // --------------------------------------------------------\\n@@ -158,41 +152,14 @@ STDMETHODIMP nsTextAccessibleWrap::get_unclippedSubstringBounds(\\n }\\n \\n \\n-STDMETHODIMP nsTextAccessibleWrap::scrollToSubstring( \\n+STDMETHODIMP nsTextAccessibleWrap::scrollToSubstring(\\n     /* [in] */ unsigned int aStartIndex,\\n     /* [in] */ unsigned int aEndIndex)\\n {\\n-  nsCOMPtr<nsIPresShell> presShell(GetPresShell());\\n-  nsIFrame *frame = GetFrame();\\n-\\n-  if (!frame || !presShell) {\\n-    return E_FAIL;  // This accessible has been shut down\\n-  }\\n-\\n-  nsPresContext *presContext = presShell->GetPresContext();\\n-  nsCOMPtr<nsIDOMRange> scrollToRange = do_CreateInstance(kRangeCID);\\n-  nsCOMPtr<nsISelectionController> selCon;\\n-  frame->GetSelectionController(presContext, getter_AddRefs(selCon));\\n-  if (!presContext || !scrollToRange || !selCon) {\\n-    return E_FAIL;\\n-  }\\n-\\n-  scrollToRange->SetStart(mDOMNode, aStartIndex);\\n-  scrollToRange->SetEnd(mDOMNode, aEndIndex);\\n-  nsCOMPtr<nsISelection> domSel;\\n-  selCon->GetSelection(nsISelectionController::SELECTION_ACCESSIBILITY, \\n-                       getter_AddRefs(domSel));\\n-  if (domSel) {\\n-    domSel->RemoveAllRanges();\\n-    domSel->AddRange(scrollToRange);\\n-\\n-    selCon->ScrollSelectionIntoView(nsISelectionController::SELECTION_ACCESSIBILITY, \\n-      nsISelectionController::SELECTION_ANCHOR_REGION, PR_TRUE);\\n-\\n-    domSel->CollapseToStart();\\n-  }\\n-\\n-  return S_OK;\\n+  nsresult rv = nsAccUtils::ScrollSubstringTo(GetFrame(), mDOMNode, aStartIndex,\\n+                                              mDOMNode, aEndIndex,\\n+                                              nsIAccessibleScrollType::SCROLL_TYPE_ANYWHERE);\\n+  return NS_FAILED(rv) ? E_FAIL : S_OK;\\n }\\n \\n nsIFrame* nsTextAccessibleWrap::GetPointFromOffset(nsIFrame *aContainingFrame, \\ndiff --git a/content/base/public/nsISelection2.idl b/content/base/public/nsISelection2.idl\\nindex 3a089ed..390c6ea 100644\\n--- a/content/base/public/nsISelection2.idl\\n+++ b/content/base/public/nsISelection2.idl\\n@@ -47,7 +47,7 @@ interface nsIDOMRange;\\n \\n [ptr] native RangeArray(nsCOMArray<nsIDOMRange>);\\n \\n-[scriptable, uuid(eab4ae76-efdc-4e09-828c-bd921e9a662f)]\\n+[scriptable, uuid(b515878d-3b06-433b-bc9e-5c53d2fa3eff)]\\n interface nsISelection2 : nsISelection\\n {\\n   void GetRangesForInterval(\\n@@ -62,4 +62,40 @@ interface nsISelection2 : nsISelection\\n       in nsIDOMNode endNode, in PRInt32 endOffset,\\n       in PRBool allowAdjacent,\\n       in RangeArray results);\\n+\\n+  /**\\n+   * Scrolls a region of the selection, so that it is visible in\\n+   * the scrolled view.\\n+   *\\n+   * @param aRegion - the region inside the selection to scroll into view\\n+   *                  (see selection region constants defined in\\n+   *                   nsISelectionController).\\n+   * @param aIsSynchronous - when true, scrolls the selection into view\\n+   *                         before returning. If false, posts a request which\\n+   *                         is processed at some point after the method returns.\\n+   * @param aVPercent - how to align the frame vertically. A value of 0\\n+   *                   means the frame's upper edge is aligned with the top edge\\n+   *                   of the visible area. A value of 100 means the frame's\\n+   *                   bottom edge is aligned with the bottom edge of\\n+   *                   the visible area. For values in between, the point\\n+   *                   \\\"aVPercent\\\" down the frame is placed at the point\\n+   *                   \\\"aVPercent\\\" down the visible area. A value of 50 centers\\n+   *                   the frame vertically. A value of -1 means move\\n+   *                   the frame the minimum amount necessary in order for\\n+   *                   the entire frame to be visible vertically (if possible).\\n+   * @param aHPercent - how to align the frame horizontally. A value of 0\\n+   *                    means the frame's left edge is aligned with the left\\n+   *                    edge of the visible area. A value of 100 means the\\n+   *                    frame's right edge is aligned with the right edge of\\n+   *                    the visible area. For values in between, the point\\n+   *                    \\\"aHPercent\\\" across the frame is placed at the point\\n+   *                    \\\"aHPercent\\\" across the visible area. A value of 50\\n+   *                    centers the frame horizontally . A value of -1 means\\n+   *                    move the frame the minimum amount necessary in order\\n+   *                    for the entire frame to be visible horizontally\\n+   *                    (if possible).\\n+   */\\n+  void scrollIntoView(in short aRegion, in boolean aIsSynchronous,\\n+                      in short aVPercent, in short aHPercent);\\n };\\n+\\ndiff --git a/layout/generic/nsSelection.cpp b/layout/generic/nsSelection.cpp\\nindex 675a40a..ba7f08a 100644\\n--- a/layout/generic/nsSelection.cpp\\n+++ b/layout/generic/nsSelection.cpp\\n@@ -215,7 +215,9 @@ public:\\n   // aDoFlush only matters if aIsSynchronous is true.  If not, we'll just flush\\n   // when the scroll event fires so we make sure to scroll to the right place.\\n   nsresult      ScrollIntoView(SelectionRegion aRegion, PRBool aIsSynchronous,\\n-                               PRBool aDoFlush);\\n+                               PRBool aDoFlush,\\n+                               PRInt16 aVPercent = NS_PRESSHELL_SCROLL_ANYWHERE,\\n+                               PRInt16 aHPercent = NS_PRESSHELL_SCROLL_ANYWHERE);\\n   nsresult      AddItem(nsIDOMRange *aRange);\\n   nsresult      RemoveItem(nsIDOMRange *aRange);\\n   nsresult      Clear(nsPresContext* aPresContext);\\n@@ -7298,9 +7300,18 @@ nsTypedSelection::PostScrollSelectionIntoViewEvent(SelectionRegion aRegion)\\n   return NS_OK;\\n }\\n \\n+NS_IMETHODIMP\\n+nsTypedSelection::ScrollIntoView(SelectionRegion aRegion, PRBool aIsSynchronous,\\n+                                 PRInt16 aVPercent, PRInt16 aHPercent)\\n+{\\n+  return ScrollIntoView(aRegion, aIsSynchronous, PR_FALSE,\\n+                        aVPercent, aHPercent);\\n+}\\n+\\n nsresult\\n nsTypedSelection::ScrollIntoView(SelectionRegion aRegion,\\n-                                 PRBool aIsSynchronous, PRBool aDoFlush)\\n+                                 PRBool aIsSynchronous, PRBool aDoFlush,\\n+                                 PRInt16 aVPercent, PRInt16 aHPercent)\\n {\\n   nsresult result;\\n   if (!mFrameSelection)\\n@@ -7358,7 +7369,8 @@ nsTypedSelection::ScrollIntoView(SelectionRegion aRegion,\\n     if (!scrollableView)\\n       return NS_OK;\\n \\n-    result = ScrollRectIntoView(scrollableView, rect, NS_PRESSHELL_SCROLL_ANYWHERE, NS_PRESSHELL_SCROLL_ANYWHERE, PR_TRUE);\\n+    result = ScrollRectIntoView(scrollableView, rect, aVPercent, aHPercent,\\n+                                PR_TRUE);\\n   }\\n   return result;\\n }\\n\""}