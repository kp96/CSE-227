{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas12a3228\""},"diff":"\"12a3228 Fix content leak due to double-init of oveflow placeholders.  Bug 397011, r+sr+a=roc\\ndiff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp\\nindex df995b9..b57cb95 100644\\n--- a/layout/base/nsCSSFrameConstructor.cpp\\n+++ b/layout/base/nsCSSFrameConstructor.cpp\\n@@ -1402,12 +1402,11 @@ nsFrameConstructorState::AddChild(nsIFrame* aNewFrame,\\n     nsIFrame* placeholderFrame;\\n     nsresult rv =\\n       nsCSSFrameConstructor::CreatePlaceholderFrameFor(mPresShell,\\n-                                                       mPresContext,\\n-                                                       mFrameManager,\\n                                                        aContent,\\n                                                        aNewFrame,\\n                                                        aStyleContext,\\n                                                        aParentFrame,\\n+                                                       nsnull,\\n                                                        &placeholderFrame);\\n     if (NS_FAILED(rv)) {\\n       // Note that aNewFrame could be the top frame for a scrollframe setup,\\n@@ -4692,12 +4691,11 @@ nsCSSFrameConstructor::ConstructPageFrame(nsIPresShell*   aPresShell,\\n /* static */\\n nsresult\\n nsCSSFrameConstructor::CreatePlaceholderFrameFor(nsIPresShell*    aPresShell, \\n-                                                 nsPresContext*  aPresContext,\\n-                                                 nsFrameManager*  aFrameManager,\\n                                                  nsIContent*      aContent,\\n                                                  nsIFrame*        aFrame,\\n                                                  nsStyleContext*  aStyleContext,\\n                                                  nsIFrame*        aParentFrame,\\n+                                                 nsIFrame*        aPrevInFlow,\\n                                                  nsIFrame**       aPlaceholderFrame)\\n {\\n   nsRefPtr<nsStyleContext> placeholderStyle = aPresShell->StyleSet()->\\n@@ -4708,7 +4706,7 @@ nsCSSFrameConstructor::CreatePlaceholderFrameFor(nsIPresShell*    aPresShell,\\n     (nsPlaceholderFrame*)NS_NewPlaceholderFrame(aPresShell, placeholderStyle);\\n \\n   if (placeholderFrame) {\\n-    placeholderFrame->Init(aContent, aParentFrame, nsnull);\\n+    placeholderFrame->Init(aContent, aParentFrame, aPrevInFlow);\\n   \\n     // The placeholder frame has a pointer back to the out-of-flow frame\\n     placeholderFrame->SetOutOfFlowFrame(aFrame);\\n@@ -4716,7 +4714,7 @@ nsCSSFrameConstructor::CreatePlaceholderFrameFor(nsIPresShell*    aPresShell,\\n     aFrame->AddStateBits(NS_FRAME_OUT_OF_FLOW);\\n \\n     // Add mapping from absolutely positioned frame to its placeholder frame\\n-    aFrameManager->RegisterPlaceholderFrame(placeholderFrame);\\n+    aPresShell->FrameManager()->RegisterPlaceholderFrame(placeholderFrame);\\n \\n     *aPlaceholderFrame = static_cast<nsIFrame*>(placeholderFrame);\\n     \\n@@ -10489,15 +10487,13 @@ nsCSSFrameConstructor::CreateContinuingFrame(nsPresContext* aPresContext,\\n       return rv;\\n     }\\n     // create a continuing placeholder frame\\n-    rv = CreatePlaceholderFrameFor(shell, aPresContext, shell->FrameManager(),\\n-                                   content, oofContFrame, styleContext,\\n-                                   aParentFrame, &newFrame);\\n+    rv = CreatePlaceholderFrameFor(shell, content, oofContFrame, styleContext,\\n+                                   aParentFrame, aFrame, &newFrame);\\n     if (NS_FAILED(rv)) {\\n       oofContFrame->Destroy();\\n       *aContinuingFrame = nsnull;\\n       return rv;\\n     }\\n-    newFrame->Init(content, aParentFrame, aFrame);\\n   } else if (nsGkAtoms::fieldSetFrame == frameType) {\\n     newFrame = NS_NewFieldSetFrame(shell, styleContext);\\n \\ndiff --git a/layout/base/nsCSSFrameConstructor.h b/layout/base/nsCSSFrameConstructor.h\\nindex f88db7b..29f0fc8 100644\\n--- a/layout/base/nsCSSFrameConstructor.h\\n+++ b/layout/base/nsCSSFrameConstructor.h\\n@@ -484,12 +484,11 @@ private:\\n \\n protected:\\n   static nsresult CreatePlaceholderFrameFor(nsIPresShell*    aPresShell, \\n-                                            nsPresContext*  aPresContext,\\n-                                            nsFrameManager*  aFrameManager,\\n                                             nsIContent*      aContent,\\n                                             nsIFrame*        aFrame,\\n                                             nsStyleContext*  aStyleContext,\\n                                             nsIFrame*        aParentFrame,\\n+                                            nsIFrame*        aPrevInFlow,\\n                                             nsIFrame**       aPlaceholderFrame);\\n \\n private:\\ndiff --git a/layout/generic/nsFrame.cpp b/layout/generic/nsFrame.cpp\\nindex fe7394e..7025762 100644\\n--- a/layout/generic/nsFrame.cpp\\n+++ b/layout/generic/nsFrame.cpp\\n@@ -395,6 +395,7 @@ nsFrame::Init(nsIContent*      aContent,\\n               nsIFrame*        aParent,\\n               nsIFrame*        aPrevInFlow)\\n {\\n+  NS_PRECONDITION(!mContent, \\\"Double-initing a frame?\\\");\\n   NS_ASSERTION(IsFrameOfType(eDEBUGAllFrames) &&\\n                !IsFrameOfType(eDEBUGNoFrames),\\n                \\\"IsFrameOfType implementation that doesn't call base class\\\");\\n\""}