{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basa54c72d\""},"diff":"\"a54c72d Fix newlines, again\\ndiff --git a/toolkit/components/downloads/src/nsDownloadManager.cpp b/toolkit/components/downloads/src/nsDownloadManager.cpp\\nindex b5954f0..f852a97 100644\\n--- a/toolkit/components/downloads/src/nsDownloadManager.cpp\\n+++ b/toolkit/components/downloads/src/nsDownloadManager.cpp\\n@@ -67,7 +67,7 @@\\n #include \\\"mozStorageHelper.h\\\"\\n #include \\\"nsIMutableArray.h\\\"\\n #include \\\"nsIAlertsService.h\\\"\\n-#include \\\"nsIPropertyBag2.h\\\"\\r\\n+#include \\\"nsIPropertyBag2.h\\\"\\n #include \\\"nsIHttpChannel.h\\\"\\n \\n #ifdef XP_WIN\\n@@ -711,71 +711,71 @@ nsDownloadManager::GetActiveDownloads(nsISimpleEnumerator **aResult)\\n NS_IMETHODIMP\\n nsDownloadManager::GetDefaultDownloadsDirectory(nsILocalFile **aResult)\\n {\\n-  nsCOMPtr<nsILocalFile> downloadDir;\\r\\n-\\r\\n-  nsresult rv;\\r\\n-  nsCOMPtr<nsIProperties> dirService =\\r\\n-     do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv);\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-\\r\\n-  // OSX:\\r\\n-  // Safari download folder or Desktop/Downloads\\r\\n-  // Vista:\\r\\n-  // Downloads\\r\\n-  // XP/2K:\\r\\n-  // Desktop/Downloads\\r\\n-  // Linux:\\r\\n-  // Home/Downloads\\r\\n+  nsCOMPtr<nsILocalFile> downloadDir;\\n+\\n+  nsresult rv;\\n+  nsCOMPtr<nsIProperties> dirService =\\n+     do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  // OSX:\\n+  // Safari download folder or Desktop/Downloads\\n+  // Vista:\\n+  // Downloads\\n+  // XP/2K:\\n+  // Desktop/Downloads\\n+  // Linux:\\n+  // Home/Downloads\\n \\n   nsXPIDLString folderName;\\n   mBundle->GetStringFromName(NS_LITERAL_STRING(\\\"downloadsFolder\\\").get(),\\n                              getter_Copies(folderName));\\n \\n-#if defined (XP_MACOSX)\\r\\n-  nsCOMPtr<nsILocalFile> desktopDir;\\r\\n-  rv = dirService->Get(NS_OSX_DEFAULT_DOWNLOAD_DIR,\\r\\n-                       NS_GET_IID(nsILocalFile),\\r\\n-                       getter_AddRefs(downloadDir));\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-  rv = dirService->Get(NS_OSX_USER_DESKTOP_DIR,\\r\\n-                       NS_GET_IID(nsILocalFile),\\r\\n-                       getter_AddRefs(desktopDir));\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-\\r\\n-  // Check to see if we have the desktop or the Safari downloads folder\\r\\n-  PRBool equals;\\r\\n-  rv = downloadDir->Equals(desktopDir, &equals);\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-  if (equals) {\\r\\n-    rv = downloadDir->Append(folderName);\\r\\n-    NS_ENSURE_SUCCESS(rv, rv);\\r\\n-  }\\r\\n-#elif defined (XP_WIN)\\r\\n-  rv = dirService->Get(NS_WIN_DEFAULT_DOWNLOAD_DIR,\\r\\n-                       NS_GET_IID(nsILocalFile),\\r\\n-                       getter_AddRefs(downloadDir));\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-\\r\\n-  // Check the os version\\r\\n-  #define NS_SYSTEMINFO_CONTRACTID \\\"@mozilla.org/system-info;1\\\"\\r\\n-  nsCOMPtr<nsIPropertyBag2> infoService =\\r\\n-     do_GetService(NS_SYSTEMINFO_CONTRACTID, &rv);\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-\\r\\n-  PRInt32 version;\\r\\n-  NS_NAMED_LITERAL_STRING(osVersion, \\\"version\\\");\\r\\n-  rv = infoService->GetPropertyAsInt32(osVersion, &version);\\r\\n-  if (version < 6) { // XP/2K\\r\\n-    rv = downloadDir->Append(folderName);\\r\\n-    NS_ENSURE_SUCCESS(rv, rv);\\r\\n-  }\\r\\n-#else\\r\\n-  rv = dirService->Get(NS_OS_HOME_DIR,\\r\\n-                       NS_GET_IID(nsILocalFile),\\r\\n-                       getter_AddRefs(downloadDir));\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-  rv = downloadDir->Append(folderName);\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n+#if defined (XP_MACOSX)\\n+  nsCOMPtr<nsILocalFile> desktopDir;\\n+  rv = dirService->Get(NS_OSX_DEFAULT_DOWNLOAD_DIR,\\n+                       NS_GET_IID(nsILocalFile),\\n+                       getter_AddRefs(downloadDir));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+  rv = dirService->Get(NS_OSX_USER_DESKTOP_DIR,\\n+                       NS_GET_IID(nsILocalFile),\\n+                       getter_AddRefs(desktopDir));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  // Check to see if we have the desktop or the Safari downloads folder\\n+  PRBool equals;\\n+  rv = downloadDir->Equals(desktopDir, &equals);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+  if (equals) {\\n+    rv = downloadDir->Append(folderName);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+  }\\n+#elif defined (XP_WIN)\\n+  rv = dirService->Get(NS_WIN_DEFAULT_DOWNLOAD_DIR,\\n+                       NS_GET_IID(nsILocalFile),\\n+                       getter_AddRefs(downloadDir));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  // Check the os version\\n+  #define NS_SYSTEMINFO_CONTRACTID \\\"@mozilla.org/system-info;1\\\"\\n+  nsCOMPtr<nsIPropertyBag2> infoService =\\n+     do_GetService(NS_SYSTEMINFO_CONTRACTID, &rv);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  PRInt32 version;\\n+  NS_NAMED_LITERAL_STRING(osVersion, \\\"version\\\");\\n+  rv = infoService->GetPropertyAsInt32(osVersion, &version);\\n+  if (version < 6) { // XP/2K\\n+    rv = downloadDir->Append(folderName);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+  }\\n+#else\\n+  rv = dirService->Get(NS_OS_HOME_DIR,\\n+                       NS_GET_IID(nsILocalFile),\\n+                       getter_AddRefs(downloadDir));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+  rv = downloadDir->Append(folderName);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n #endif\\n \\n   NS_ADDREF(*aResult = downloadDir);\\n@@ -783,102 +783,102 @@ nsDownloadManager::GetDefaultDownloadsDirectory(nsILocalFile **aResult)\\n   return NS_OK;\\n }\\n \\n-#define NS_BRANCH_DOWNLOAD     \\\"browser.download.\\\"\\r\\n-#define NS_PREF_FOLDERLIST     \\\"folderList\\\"\\r\\n-#define NS_PREF_DIR            \\\"dir\\\"\\r\\n+#define NS_BRANCH_DOWNLOAD     \\\"browser.download.\\\"\\n+#define NS_PREF_FOLDERLIST     \\\"folderList\\\"\\n+#define NS_PREF_DIR            \\\"dir\\\"\\n \\n NS_IMETHODIMP\\n nsDownloadManager::GetUserDownloadsDirectory(nsILocalFile **aResult)\\n {\\n-  nsresult rv;\\r\\n-  nsCOMPtr<nsIProperties> dirService =\\r\\n-     do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv);\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-\\r\\n-  nsCOMPtr<nsIPrefService> prefService =\\r\\n-     do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-\\r\\n-  nsCOMPtr<nsIPrefBranch> prefBranch;\\r\\n-  rv = prefService->GetBranch(NS_BRANCH_DOWNLOAD, \\r\\n-                              getter_AddRefs(prefBranch));\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-\\r\\n-  PRInt32 val;\\r\\n-  rv = prefBranch->GetIntPref(NS_PREF_FOLDERLIST,\\r\\n-                              &val);\\r\\n-  NS_ENSURE_SUCCESS(rv, rv);\\r\\n-\\r\\n-  PRBool bRes = PR_FALSE;\\r\\n-\\r\\n-  switch(val) {\\r\\n-    case 0: // Desktop\\r\\n-      {\\r\\n-        nsCOMPtr<nsILocalFile> downloadDir;\\r\\n-        nsCOMPtr<nsIProperties> dirService =\\r\\n-           do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv);\\r\\n-        NS_ENSURE_SUCCESS(rv, rv);\\r\\n-        rv = dirService->Get(NS_OS_DESKTOP_DIR,\\r\\n-                             NS_GET_IID(nsILocalFile),\\r\\n-                             getter_AddRefs(downloadDir));\\r\\n-        NS_ENSURE_SUCCESS(rv, rv);\\r\\n-        NS_ADDREF(*aResult = downloadDir);\\r\\n-        return NS_OK;\\r\\n-      }\\r\\n-      break;\\r\\n-    case 1: // Downloads\\r\\n-      {\\r\\n-        rv = GetDefaultDownloadsDirectory(aResult); // refup\\r\\n-        NS_ENSURE_SUCCESS(rv, rv);\\r\\n-        (*aResult)->Exists(&bRes);\\r\\n-        if (!bRes) {\\r\\n-          rv = (*aResult)->Create(nsIFile::DIRECTORY_TYPE, 755);\\r\\n-          NS_ENSURE_SUCCESS(rv, rv);\\r\\n-        }\\r\\n+  nsresult rv;\\n+  nsCOMPtr<nsIProperties> dirService =\\n+     do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  nsCOMPtr<nsIPrefService> prefService =\\n+     do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  nsCOMPtr<nsIPrefBranch> prefBranch;\\n+  rv = prefService->GetBranch(NS_BRANCH_DOWNLOAD, \\n+                              getter_AddRefs(prefBranch));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  PRInt32 val;\\n+  rv = prefBranch->GetIntPref(NS_PREF_FOLDERLIST,\\n+                              &val);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  PRBool bRes = PR_FALSE;\\n+\\n+  switch(val) {\\n+    case 0: // Desktop\\n+      {\\n+        nsCOMPtr<nsILocalFile> downloadDir;\\n+        nsCOMPtr<nsIProperties> dirService =\\n+           do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv);\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+        rv = dirService->Get(NS_OS_DESKTOP_DIR,\\n+                             NS_GET_IID(nsILocalFile),\\n+                             getter_AddRefs(downloadDir));\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+        NS_ADDREF(*aResult = downloadDir);\\n+        return NS_OK;\\n+      }\\n+      break;\\n+    case 1: // Downloads\\n+      {\\n+        rv = GetDefaultDownloadsDirectory(aResult); // refup\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+        (*aResult)->Exists(&bRes);\\n+        if (!bRes) {\\n+          rv = (*aResult)->Create(nsIFile::DIRECTORY_TYPE, 755);\\n+          NS_ENSURE_SUCCESS(rv, rv);\\n+        }\\n         return NS_OK;\\n       }\\n-      break;\\r\\n-    case 2: // Custom\\r\\n-      {\\r\\n-        nsCOMPtr<nsISupportsString> customDirectory;\\r\\n-        prefBranch->GetComplexValue(NS_PREF_DIR, \\r\\n-                                    NS_GET_IID(nsISupportsString),\\r\\n-                                    getter_AddRefs(customDirectory));\\r\\n-        if (customDirectory) {\\r\\n-          nsCOMPtr<nsILocalFile> aFile = \\r\\n-            do_CreateInstance(\\\"@mozilla.org/file/local;1\\\", &rv);\\r\\n-          NS_ENSURE_SUCCESS(rv, rv);\\r\\n-          nsAutoString dir;\\r\\n-          customDirectory->GetData(dir);\\r\\n-          rv = aFile->InitWithNativePath(NS_ConvertUTF16toUTF8(dir));\\r\\n-          NS_ENSURE_SUCCESS(rv, rv);\\r\\n-          aFile->Exists(&bRes);\\r\\n-          if (bRes) {\\r\\n+      break;\\n+    case 2: // Custom\\n+      {\\n+        nsCOMPtr<nsISupportsString> customDirectory;\\n+        prefBranch->GetComplexValue(NS_PREF_DIR, \\n+                                    NS_GET_IID(nsISupportsString),\\n+                                    getter_AddRefs(customDirectory));\\n+        if (customDirectory) {\\n+          nsCOMPtr<nsILocalFile> aFile = \\n+            do_CreateInstance(\\\"@mozilla.org/file/local;1\\\", &rv);\\n+          NS_ENSURE_SUCCESS(rv, rv);\\n+          nsAutoString dir;\\n+          customDirectory->GetData(dir);\\n+          rv = aFile->InitWithNativePath(NS_ConvertUTF16toUTF8(dir));\\n+          NS_ENSURE_SUCCESS(rv, rv);\\n+          aFile->Exists(&bRes);\\n+          if (bRes) {\\n             NS_ADDREF(*aResult = aFile);\\n             return NS_OK;\\n-          }\\r\\n-          rv = aFile->Create(nsIFile::DIRECTORY_TYPE, 755);\\r\\n-          NS_ENSURE_SUCCESS(rv, rv);\\r\\n-          if (bRes) {\\r\\n+          }\\n+          rv = aFile->Create(nsIFile::DIRECTORY_TYPE, 755);\\n+          NS_ENSURE_SUCCESS(rv, rv);\\n+          if (bRes) {\\n             NS_ADDREF(*aResult = aFile);\\n             return NS_OK;\\n-          }\\r\\n-        }\\r\\n-        rv = GetDefaultDownloadsDirectory(aResult); // refup\\r\\n-        NS_ENSURE_SUCCESS(rv, rv);\\r\\n-        (*aResult)->Exists(&bRes);\\r\\n-        if (!bRes) {\\r\\n-          rv = (*aResult)->Create(nsIFile::DIRECTORY_TYPE, 755);\\r\\n-          NS_ENSURE_SUCCESS(rv, rv);\\r\\n-          // Update dir pref\\r\\n-          prefBranch->SetComplexValue(NS_PREF_DIR,\\r\\n-                                      NS_GET_IID(nsILocalFile),\\r\\n-                                      *aResult);\\r\\n-        }\\r\\n+          }\\n+        }\\n+        rv = GetDefaultDownloadsDirectory(aResult); // refup\\n+        NS_ENSURE_SUCCESS(rv, rv);\\n+        (*aResult)->Exists(&bRes);\\n+        if (!bRes) {\\n+          rv = (*aResult)->Create(nsIFile::DIRECTORY_TYPE, 755);\\n+          NS_ENSURE_SUCCESS(rv, rv);\\n+          // Update dir pref\\n+          prefBranch->SetComplexValue(NS_PREF_DIR,\\n+                                      NS_GET_IID(nsILocalFile),\\n+                                      *aResult);\\n+        }\\n         return NS_OK;\\n-      }\\r\\n-      break;\\r\\n-  }\\r\\n+      }\\n+      break;\\n+  }\\n   return NS_ERROR_INVALID_ARG;\\n }\\n \\n\""}