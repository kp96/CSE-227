{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas02c7dd2\""},"diff":"\"02c7dd2 Bug 395223 - positional description incorrect for headings, r=aaronlev, a=dsicore\\ndiff --git a/accessible/src/base/nsAccessibilityUtils.cpp b/accessible/src/base/nsAccessibilityUtils.cpp\\nindex 23d9380..328ca96 100755\\n--- a/accessible/src/base/nsAccessibilityUtils.cpp\\n+++ b/accessible/src/base/nsAccessibilityUtils.cpp\\n@@ -67,6 +67,8 @@ void\\n nsAccUtils::GetAccAttr(nsIPersistentProperties *aAttributes, nsIAtom *aAttrName,\\n                        nsAString& aAttrValue)\\n {\\n+  aAttrValue.Truncate();\\n+\\n   nsCAutoString attrName;\\n   aAttrName->ToUTF8String(attrName);\\n   aAttributes->GetStringProperty(attrName, aAttrValue);\\ndiff --git a/accessible/src/base/nsAccessible.cpp b/accessible/src/base/nsAccessible.cpp\\nindex a152694..4916908 100644\\n--- a/accessible/src/base/nsAccessible.cpp\\n+++ b/accessible/src/base/nsAccessible.cpp\\n@@ -2230,7 +2230,7 @@ nsAccessible::GroupPosition(PRInt32 *aGroupLevel,\\n   // If 'level' attribute doesn't make sense element then it isn't represented\\n   // via IAccessible::attributes and groupLevel of groupPosition method is 0.\\n   // Elements that expose 'level' attribute only (like html headings elements)\\n-  // don't support this method and all arguements are equealed 0.\\n+  // don't support this method and all arguements are equalled 0.\\n \\n   NS_ENSURE_ARG_POINTER(aGroupLevel);\\n   NS_ENSURE_ARG_POINTER(aSimilarItemsInGroup);\\ndiff --git a/accessible/src/msaa/nsAccessibleWrap.cpp b/accessible/src/msaa/nsAccessibleWrap.cpp\\nindex d4aa306..d108e31 100644\\n--- a/accessible/src/msaa/nsAccessibleWrap.cpp\\n+++ b/accessible/src/msaa/nsAccessibleWrap.cpp\\n@@ -333,68 +333,78 @@ nsAccessibleWrap::get_accDescription(VARIANT varChild,\\n \\n   nsAutoString description;\\n \\n-  // Try nsIAccessible::groupPosition to make a positional description string.\\n-  PRInt32 groupLevel;\\n-  PRInt32 similarItemsInGroup;\\n-  PRInt32 positionInGroup;\\n+  // Try to get group attributes to make a positional description string. We\\n+  // can't use nsIAccessible::groupPosition because the method isn't supposed\\n+  // to work with elements exposing 'level' attribute only (like HTML headings).\\n+  nsCOMPtr<nsIPersistentProperties> attributes;\\n+  nsresult rv = xpAccessible->GetAttributes(getter_AddRefs(attributes));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+  if (!attributes)\\n+    return NS_ERROR_FAILURE;\\n \\n-  nsresult rv = xpAccessible->GroupPosition(&groupLevel, &similarItemsInGroup,\\n-                                            &positionInGroup);\\n-  if (NS_SUCCEEDED(rv)) {\\n-    if (positionInGroup > 0) {\\n-      if (groupLevel > 0) {\\n-        // XXX: How do we calculate the number of children? Now we append\\n-        // \\\" with [numChildren]c\\\" for tree item. In the future we may need to\\n-        // use the ARIA owns property to calculate that if it's present.\\n-        PRInt32 numChildren = 0;\\n-\\n-        PRUint32 currentRole = 0;\\n-        rv = xpAccessible->GetFinalRole(&currentRole);\\n-        if (NS_SUCCEEDED(rv) &&\\n-            currentRole == nsIAccessibleRole::ROLE_OUTLINEITEM) {\\n-          nsCOMPtr<nsIAccessible> child;\\n-          xpAccessible->GetFirstChild(getter_AddRefs(child));\\n-          while (child) {\\n-            child->GetFinalRole(&currentRole);\\n-            if (currentRole == nsIAccessibleRole::ROLE_GROUPING) {\\n-              nsCOMPtr<nsIAccessible> groupChild;\\n-              child->GetFirstChild(getter_AddRefs(groupChild));\\n-              while (groupChild) {\\n-                groupChild->GetFinalRole(&currentRole);\\n-                numChildren +=\\n-                  (currentRole == nsIAccessibleRole::ROLE_OUTLINEITEM);\\n-                nsCOMPtr<nsIAccessible> nextGroupChild;\\n-                groupChild->GetNextSibling(getter_AddRefs(nextGroupChild));\\n-                groupChild.swap(nextGroupChild);\\n-              }\\n-              break;\\n+  PRInt32 groupLevel = 0;\\n+  PRInt32 itemsInGroup = 0;\\n+  PRInt32 positionInGroup = 0;\\n+  nsAccUtils::GetAccGroupAttrs(attributes, &groupLevel, &positionInGroup,\\n+                               &itemsInGroup);\\n+\\n+  if (positionInGroup > 0) {\\n+    if (groupLevel > 0) {\\n+      // XXX: How do we calculate the number of children? Now we append\\n+      // \\\" with [numChildren]c\\\" for tree item. In the future we may need to\\n+      // use the ARIA owns property to calculate that if it's present.\\n+      PRInt32 numChildren = 0;\\n+\\n+      PRUint32 currentRole = 0;\\n+      rv = xpAccessible->GetFinalRole(&currentRole);\\n+      if (NS_SUCCEEDED(rv) &&\\n+          currentRole == nsIAccessibleRole::ROLE_OUTLINEITEM) {\\n+        nsCOMPtr<nsIAccessible> child;\\n+        xpAccessible->GetFirstChild(getter_AddRefs(child));\\n+        while (child) {\\n+          child->GetFinalRole(&currentRole);\\n+          if (currentRole == nsIAccessibleRole::ROLE_GROUPING) {\\n+            nsCOMPtr<nsIAccessible> groupChild;\\n+            child->GetFirstChild(getter_AddRefs(groupChild));\\n+            while (groupChild) {\\n+              groupChild->GetFinalRole(&currentRole);\\n+              numChildren +=\\n+                (currentRole == nsIAccessibleRole::ROLE_OUTLINEITEM);\\n+              nsCOMPtr<nsIAccessible> nextGroupChild;\\n+              groupChild->GetNextSibling(getter_AddRefs(nextGroupChild));\\n+              groupChild.swap(nextGroupChild);\\n             }\\n-            nsCOMPtr<nsIAccessible> nextChild;\\n-            child->GetNextSibling(getter_AddRefs(nextChild));\\n-            child.swap(nextChild);\\n+            break;\\n           }\\n+          nsCOMPtr<nsIAccessible> nextChild;\\n+          child->GetNextSibling(getter_AddRefs(nextChild));\\n+          child.swap(nextChild);\\n         }\\n+      }\\n \\n-        if (numChildren) {\\n-          nsTextFormatter::ssprintf(description,\\n-                                    NS_LITERAL_STRING(\\\"L%d, %d of %d with %d\\\").get(),\\n-                                    groupLevel, positionInGroup,\\n-                                    similarItemsInGroup + 1, numChildren);\\n-        } else {\\n-          nsTextFormatter::ssprintf(description,\\n-                                    NS_LITERAL_STRING(\\\"L%d, %d of %d\\\").get(),\\n-                                    groupLevel, positionInGroup,\\n-                                    similarItemsInGroup + 1);\\n-        }\\n-      } else { // Position has no level\\n+      if (numChildren) {\\n         nsTextFormatter::ssprintf(description,\\n-                                  NS_LITERAL_STRING(\\\"%d of %d\\\").get(),\\n-                                  positionInGroup, similarItemsInGroup + 1);\\n+                                  NS_LITERAL_STRING(\\\"L%d, %d of %d with %d\\\").get(),\\n+                                  groupLevel, positionInGroup, itemsInGroup,\\n+                                  numChildren);\\n+      } else {\\n+        nsTextFormatter::ssprintf(description,\\n+                                  NS_LITERAL_STRING(\\\"L%d, %d of %d\\\").get(),\\n+                                  groupLevel, positionInGroup, itemsInGroup);\\n       }\\n-\\n-      *pszDescription = ::SysAllocString(description.get());\\n-      return S_OK;\\n+    } else { // Position has no level\\n+      nsTextFormatter::ssprintf(description,\\n+                                NS_LITERAL_STRING(\\\"%d of %d\\\").get(),\\n+                                positionInGroup, itemsInGroup);\\n     }\\n+  } else if (groupLevel > 0) {\\n+    nsTextFormatter::ssprintf(description, NS_LITERAL_STRING(\\\"L%d\\\").get(),\\n+                              groupLevel);\\n+  }\\n+\\n+  if (!description.IsEmpty()) {\\n+    *pszDescription = ::SysAllocString(description.get());\\n+    return S_OK;\\n   }\\n \\n   xpAccessible->GetDescription(description);\\n\""}