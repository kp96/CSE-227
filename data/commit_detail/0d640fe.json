{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas0d640fe\""},"diff":"\"0d640fe remove unused widget interfaces and the dead remains of their implementations. b=396657 r=cbarrett sr=roc\\ndiff --git a/widget/public/Makefile.in b/widget/public/Makefile.in\\nindex d367c3b..fdf7936 100644\\n--- a/widget/public/Makefile.in\\n+++ b/widget/public/Makefile.in\\n@@ -48,9 +48,6 @@ GRE_MODULE\\t= 1\\n \\n EXPORTS\\t\\t= \\\\\\n \\t\\twidgetCore.h \\\\\\n-\\t\\tnsIMenuBar.h \\\\\\n-\\t\\tnsIMenu.h \\\\\\n-\\t\\tnsIMenuItem.h \\\\\\n \\t\\tnsStringUtil.h \\\\\\n \\t\\tnsIWidget.h \\\\\\n \\t\\tnsIKBStateControl.h \\\\\\n@@ -66,10 +63,11 @@ EXPORTS\\t\\t= \\\\\\n \\t\\tnsIDeviceContextSpec.h \\\\\\n \\t\\t$(NULL)\\n \\n-ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))\\n+ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)\\n EXPORTS\\t\\t+= \\\\\\n-\\t\\tnsIDragSessionMac.h \\\\\\n-\\t\\tnsIPrintingContext.h\\n+\\t\\tnsIMenuBar.h \\\\\\n+\\t\\tnsIMenu.h \\\\\\n+\\t\\tnsIMenuItem.h\\n endif\\n \\n ifeq ($(MOZ_WIDGET_TOOLKIT),os2)\\n@@ -116,7 +114,7 @@ ifeq ($(MOZ_WIDGET_TOOLKIT),windows)\\n XPIDLSRCS\\t+= nsIPrintSettingsWin.idl\\n endif\\n \\n-ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))\\n+ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)\\n XPIDLSRCS\\t+= nsIEventSink.idl \\\\\\n \\t\\tnsIPrintSettingsX.idl \\\\\\n \\t\\tnsIPrintSessionX.idl\\ndiff --git a/widget/public/nsIDragSessionMac.h b/widget/public/nsIDragSessionMac.h\\ndeleted file mode 100644\\nindex 655b1c6..0000000\\n--- a/widget/public/nsIDragSessionMac.h\\n+++ /dev/null\\n@@ -1,68 +0,0 @@\\n-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n-/* ***** BEGIN LICENSE BLOCK *****\\n- * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n- *\\n- * The contents of this file are subject to the Mozilla Public License Version\\n- * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n- * the License. You may obtain a copy of the License at\\n- * http://www.mozilla.org/MPL/\\n- *\\n- * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n- * for the specific language governing rights and limitations under the\\n- * License.\\n- *\\n- * The Original Code is mozilla.org code.\\n- *\\n- * The Initial Developer of the Original Code is\\n- * Netscape Communications Corporation.\\n- * Portions created by the Initial Developer are Copyright (C) 1998\\n- * the Initial Developer. All Rights Reserved.\\n- *\\n- * Contributor(s):\\n- *\\n- * Alternatively, the contents of this file may be used under the terms of\\n- * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n- * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n- * in which case the provisions of the GPL or the LGPL are applicable instead\\n- * of those above. If you wish to allow use of your version of this file only\\n- * under the terms of either the GPL or the LGPL, and not to allow others to\\n- * use your version of this file under the terms of the MPL, indicate your\\n- * decision by deleting the provisions above and replace them with the notice\\n- * and other provisions required by the GPL or the LGPL. If you do not delete\\n- * the provisions above, a recipient may use your version of this file under\\n- * the terms of any one of the MPL, the GPL or the LGPL.\\n- *\\n- * ***** END LICENSE BLOCK ***** */\\n-\\n-#ifndef nsIDragSessionMac_h__\\n-#define nsIDragSessionMac_h__\\n-\\n-#include \\\"nsISupports.h\\\"\\n-#include <Drag.h>\\n-\\n-\\n-#define NS_IDRAGSESSIONMAC_IID      \\\\\\n-{ 0x36c4c380, 0x09e2, 0x11d3, { 0xb0, 0x33, 0xa4, 0x20, 0xf4, 0x2c, 0xfd, 0x7c } };\\n-\\n-\\n-class nsIDragSessionMac : public nsISupports {\\n-\\n-  public:\\n-    NS_DECLARE_STATIC_IID_ACCESSOR(NS_IDRAGSESSIONMAC_IID)\\n-\\n-  /**\\n-    * Since the drag may originate in an external application, we need some way of\\n-    * communicating the DragManager's DragRef to the session so it can use it\\n-    * when filling in data requests.\\n-    *\\n-    * @param  aDragRef the MacOS DragManager's ref number for the current drag\\n-    */\\n-\\n-   NS_IMETHOD SetDragReference ( DragReference aDragRef ) = 0; \\n-\\n-};\\n-\\n-NS_DEFINE_STATIC_IID_ACCESSOR(nsIDragSessionMac, NS_IDRAGSESSIONMAC_IID)\\n-\\n-#endif\\ndiff --git a/widget/public/nsIPrintingContext.h b/widget/public/nsIPrintingContext.h\\ndeleted file mode 100644\\nindex bb8764d..0000000\\n--- a/widget/public/nsIPrintingContext.h\\n+++ /dev/null\\n@@ -1,94 +0,0 @@\\n-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n-/* ***** BEGIN LICENSE BLOCK *****\\n- * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n- *\\n- * The contents of this file are subject to the Mozilla Public License Version\\n- * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n- * the License. You may obtain a copy of the License at\\n- * http://www.mozilla.org/MPL/\\n- *\\n- * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n- * for the specific language governing rights and limitations under the\\n- * License.\\n- *\\n- * The Original Code is mozilla.org code.\\n- *\\n- * The Initial Developer of the Original Code is\\n- * Netscape Communications Corporation.\\n- * Portions created by the Initial Developer are Copyright (C) 1998\\n- * the Initial Developer. All Rights Reserved.\\n- *\\n- * Contributor(s):\\n- *   Patrick C. Beard <beard@netscape.com>\\n- *\\n- * Alternatively, the contents of this file may be used under the terms of\\n- * either of the GNU General Public License Version 2 or later (the \\\"GPL\\\"),\\n- * or the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n- * in which case the provisions of the GPL or the LGPL are applicable instead\\n- * of those above. If you wish to allow use of your version of this file only\\n- * under the terms of either the GPL or the LGPL, and not to allow others to\\n- * use your version of this file under the terms of the MPL, indicate your\\n- * decision by deleting the provisions above and replace them with the notice\\n- * and other provisions required by the GPL or the LGPL. If you do not delete\\n- * the provisions above, a recipient may use your version of this file under\\n- * the terms of any one of the MPL, the GPL or the LGPL.\\n- *\\n- * ***** END LICENSE BLOCK ***** */\\n-\\n-#ifndef nsIPrintingContextMac_h___\\n-#define nsIPrintingContextMac_h___\\n-\\n-#include \\\"nsISupports.h\\\"\\n-\\n-class nsIPrintSettings;\\n-\\n-// 3d5917da-1dd2-11b2-bc7b-aa83823362e0\\n-#define NS_IPRINTING_CONTEXT_IID    \\\\\\n-{ 0xD9853908, 0xA34D, 0x4D8B,       \\\\\\n-{ 0xB4, 0xD6, 0x5D, 0xC3, 0x6E, 0x21, 0x1B, 0xDD } }\\n-\\n-class nsIPrintingContext : public nsISupports {\\n-public:\\n-    NS_DECLARE_STATIC_IID_ACCESSOR(NS_IPRINTING_CONTEXT_IID)\\n-    /**\\n-     * Initialize the printing context for use.\\n-     * @param aIsPrintPreview   TRUE if doing print preview, FALSE if normal printing.\\n-     * @return error status\\n-    */\\n-    NS_IMETHOD Init(nsIPrintSettings* aPS, PRBool aIsPrintPreview) = 0;\\n-\\n-    /**\\n-     * This will tell if the printmanager is currently open\\n-     * @update   dc 12/03/98\\n-     * @param aIsOpen True or False depending if the printmanager is open\\n-     * @return error status\\n-     */\\n-    NS_IMETHOD PrintManagerOpen(PRBool* aIsOpen) = 0;\\n-\\n-    /**\\n-     * Closes the printmanager if it is open.\\n-     * @update   dc 12/03/98\\n-     * @return error status\\n-     */\\n-    NS_IMETHOD ClosePrintManager() = 0;\\n-    \\n-    NS_IMETHOD BeginDocument(PRUnichar*  aTitle, \\n-                             PRUnichar*  aPrintToFileName,\\n-                             PRInt32     aStartPage, \\n-                             PRInt32     aEndPage) = 0;\\n-    \\n-    NS_IMETHOD EndDocument() = 0;\\n-    \\n-    NS_IMETHOD BeginPage() = 0;\\n-    \\n-    NS_IMETHOD EndPage() = 0;\\n-    \\n-    NS_IMETHOD GetPrinterResolution(double* aResolution) = 0;\\n-    \\n-    NS_IMETHOD GetPageRect(double* aTop, double* aLeft, double* aBottom, double* aRight) = 0;\\n-};\\n-\\n-NS_DEFINE_STATIC_IID_ACCESSOR(nsIPrintingContext, NS_IPRINTING_CONTEXT_IID)\\n-\\n-#endif /* nsIPrintingContextMac_h___ */\\ndiff --git a/widget/src/cocoa/nsDeviceContextSpecX.h b/widget/src/cocoa/nsDeviceContextSpecX.h\\nindex 9a46aaa..5e406f4 100644\\n--- a/widget/src/cocoa/nsDeviceContextSpecX.h\\n+++ b/widget/src/cocoa/nsDeviceContextSpecX.h\\n@@ -40,7 +40,6 @@\\n #define nsDeviceContextSpecX_h_\\n \\n #include \\\"nsIDeviceContextSpec.h\\\"\\n-#include \\\"nsIPrintingContext.h\\\"\\n \\n #include <PMApplication.h>\\n \\n@@ -70,31 +69,11 @@ public:\\n      * @param aPS               Settings for this print job\\n      * @param aIsPrintPreview   TRUE if doing print preview, FALSE if normal printing.\\n      * @return error status\\n-     *\\n-     * The three-argument form of this function is defined by\\n-     * nsIDeviceContextSpec. The two-argument form is from nsIPrintingContext.\\n      */\\n     NS_IMETHOD Init(nsIWidget *aWidget, nsIPrintSettings* aPS, PRBool aIsPrintPreview);\\n-    NS_IMETHOD Init(nsIPrintSettings* aPS, PRBool aIsPrintPreview);\\n-\\n-    /**\\n-     * This will tell if the printmanager is currently open\\n-     * @update   dc 12/03/98\\n-     * @param aIsOpen True or False depending if the printmanager is open\\n-     * @return error status\\n-     */\\n-    NS_IMETHOD PrintManagerOpen(PRBool* aIsOpen);\\n-\\n-    /**\\n-     * Closes the printmanager if it is open.\\n-     * @update   dc 12/03/98\\n-     * @return error status\\n-     */\\n-    NS_IMETHOD ClosePrintManager();\\n-\\n-    NS_IMETHOD GetPrinterResolution(double* aResolution);\\n     \\n-    NS_IMETHOD GetPageRect(double* aTop, double* aLeft, double* aBottom, double* aRight);\\n+    void GetPageRect(double* aTop, double* aLeft, double* aBottom, double* aRight);\\n+\\n protected:\\n /**\\n  * Destructor for nsDeviceContextSpecX, this will release the printrecord\\n@@ -107,7 +86,6 @@ protected:\\n     PMPrintSession    mPrintSession;              // printing context.\\n     PMPageFormat      mPageFormat;                // page format.\\n     PMPrintSettings   mPrintSettings;             // print settings.\\n-    PRBool            mBeganPrinting;\\n };\\n \\n #endif //nsDeviceContextSpecX_h_\\ndiff --git a/widget/src/cocoa/nsDeviceContextSpecX.mm b/widget/src/cocoa/nsDeviceContextSpecX.mm\\nindex 834e3cc..a053e39 100644\\n--- a/widget/src/cocoa/nsDeviceContextSpecX.mm\\n+++ b/widget/src/cocoa/nsDeviceContextSpecX.mm\\n@@ -49,8 +49,6 @@\\n #include \\\"nsIPrintOptions.h\\\"\\n #include \\\"nsIPrintSettingsX.h\\\"\\n \\n-#include \\\"nsToolkit.h\\\"\\n-\\n #include \\\"gfxQuartzSurface.h\\\"\\n #include \\\"gfxImageSurface.h\\\"\\n \\n@@ -63,7 +61,6 @@ nsDeviceContextSpecX::nsDeviceContextSpecX()\\n : mPrintSession(NULL)\\n , mPageFormat(kPMNoPageFormat)\\n , mPrintSettings(kPMNoPrintSettings)\\n-, mBeganPrinting(PR_FALSE)\\n {\\n }\\n \\n@@ -75,7 +72,6 @@ nsDeviceContextSpecX::~nsDeviceContextSpecX()\\n {\\n   if (mPrintSession)\\n     ::PMRelease(mPrintSession);\\n-  ClosePrintManager();\\n }\\n \\n NS_IMPL_ISUPPORTS1(nsDeviceContextSpecX, nsIDeviceContextSpec)\\n@@ -88,46 +84,27 @@ NS_IMETHODIMP nsDeviceContextSpecX::Init(nsIWidget *aWidget,\\n                                          nsIPrintSettings* aPS,\\n                                          PRBool aIsPrintPreview)\\n {\\n-  return Init(aPS, aIsPrintPreview);\\n-}\\n+  nsresult rv;\\n \\n-NS_IMETHODIMP nsDeviceContextSpecX::Init(nsIPrintSettings* aPS, PRBool aIsPrintPreview)\\n-{\\n-    nsresult rv;\\n-    \\n-    nsCOMPtr<nsIPrintSettingsX> printSettingsX(do_QueryInterface(aPS));\\n-    if (!printSettingsX)\\n-        return NS_ERROR_NO_INTERFACE;\\n-  \\n-    rv = printSettingsX->GetNativePrintSession(&mPrintSession);\\n-    if (NS_FAILED(rv))\\n-        return rv;  \\n-    ::PMRetain(mPrintSession);\\n-\\n-    rv = printSettingsX->GetPMPageFormat(&mPageFormat);\\n-    if (NS_FAILED(rv))\\n-        return rv;\\n-    rv = printSettingsX->GetPMPrintSettings(&mPrintSettings);\\n-    if (NS_FAILED(rv))\\n-        return rv;\\n+  nsCOMPtr<nsIPrintSettingsX> printSettingsX(do_QueryInterface(aPS));\\n+  if (!printSettingsX)\\n+    return NS_ERROR_NO_INTERFACE;\\n \\n-    return NS_OK;\\n-}\\n+  rv = printSettingsX->GetNativePrintSession(&mPrintSession);\\n+  if (NS_FAILED(rv))\\n+    return rv;  \\n+  ::PMRetain(mPrintSession);\\n \\n-NS_IMETHODIMP nsDeviceContextSpecX::PrintManagerOpen(PRBool* aIsOpen)\\n-{\\n-    *aIsOpen = mBeganPrinting;\\n-    return NS_OK;\\n-}\\n+  rv = printSettingsX->GetPMPageFormat(&mPageFormat);\\n+  if (NS_FAILED(rv))\\n+    return rv;\\n \\n-/** -------------------------------------------------------\\n- * Closes the printmanager if it is open.\\n- * @update   dc 12/03/98\\n- */\\n-NS_IMETHODIMP nsDeviceContextSpecX::ClosePrintManager()\\n-{\\n-    return NS_OK;\\n-}  \\n+  rv = printSettingsX->GetPMPrintSettings(&mPrintSettings);\\n+  if (NS_FAILED(rv))\\n+    return rv;\\n+\\n+  return NS_OK;\\n+}\\n \\n NS_IMETHODIMP nsDeviceContextSpecX::BeginDocument(PRUnichar*  aTitle, \\n                                                   PRUnichar*  aPrintToFileName,\\n@@ -183,29 +160,12 @@ NS_IMETHODIMP nsDeviceContextSpecX::EndPage()\\n     return NS_OK;\\n }\\n \\n-NS_IMETHODIMP nsDeviceContextSpecX::GetPrinterResolution(double* aResolution)\\n-{\\n-    PMPrinter printer;\\n-    OSStatus status = ::PMSessionGetCurrentPrinter(mPrintSession, &printer);\\n-    if (status != noErr)\\n-        return NS_ERROR_FAILURE;\\n-      \\n-    PMResolution defaultResolution;\\n-    status = ::PMPrinterGetPrinterResolution(printer, kPMDefaultResolution, &defaultResolution);\\n-    if (status != noErr)\\n-        return NS_ERROR_FAILURE;\\n-    \\n-    *aResolution = defaultResolution.hRes;\\n-    return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP nsDeviceContextSpecX::GetPageRect(double* aTop, double* aLeft, double* aBottom, double* aRight)\\n+void nsDeviceContextSpecX::GetPageRect(double* aTop, double* aLeft, double* aBottom, double* aRight)\\n {\\n     PMRect pageRect;\\n     ::PMGetAdjustedPageRect(mPageFormat, &pageRect);\\n     *aTop = pageRect.top, *aLeft = pageRect.left;\\n     *aBottom = pageRect.bottom, *aRight = pageRect.right;\\n-    return NS_OK;\\n }\\n \\n NS_IMETHODIMP nsDeviceContextSpecX::GetSurfaceForPrinter(gfxASurface **surface)\\n\""}