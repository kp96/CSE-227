{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basba9c0ad\""},"diff":"\"ba9c0ad Bug 394222: Optimize calls to Bidi resolution. r=dbaron, sr+a=roc\\ndiff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp\\nindex 1c5a84c..3688ffe 100644\\n--- a/layout/generic/nsBlockFrame.cpp\\n+++ b/layout/generic/nsBlockFrame.cpp\\n@@ -611,6 +611,7 @@ nsBlockFrame::MarkIntrinsicWidthsDirty()\\n   nsBlockFrame* dirtyBlock = NS_STATIC_CAST(nsBlockFrame*, GetFirstContinuation());\\n   dirtyBlock->mMinWidth = NS_INTRINSIC_WIDTH_UNKNOWN;\\n   dirtyBlock->mPrefWidth = NS_INTRINSIC_WIDTH_UNKNOWN;\\n+  dirtyBlock->AddStateBits(NS_BLOCK_NEEDS_BIDI_RESOLUTION);\\n \\n   nsBlockFrameSuper::MarkIntrinsicWidthsDirty();\\n }\\n@@ -635,10 +636,10 @@ nsBlockFrame::GetMinWidth(nsIRenderingContext *aRenderingContext)\\n   AutoNoisyIndenter indent(gNoisyIntrinsic);\\n #endif\\n \\n+  ResolveBidi();\\n   InlineMinWidthData data;\\n   for (nsBlockFrame* curFrame = this; curFrame;\\n        curFrame = NS_STATIC_CAST(nsBlockFrame*, curFrame->GetNextContinuation())) {\\n-    curFrame->ResolveBidi();\\n     for (line_iterator line = curFrame->begin_lines(), line_end = curFrame->end_lines();\\n       line != line_end; ++line)\\n     {\\n@@ -706,10 +707,10 @@ nsBlockFrame::GetPrefWidth(nsIRenderingContext *aRenderingContext)\\n   AutoNoisyIndenter indent(gNoisyIntrinsic);\\n #endif\\n \\n+  ResolveBidi();\\n   InlinePrefWidthData data;\\n   for (nsBlockFrame* curFrame = this; curFrame;\\n        curFrame = NS_STATIC_CAST(nsBlockFrame*, curFrame->GetNextContinuation())) {\\n-    curFrame->ResolveBidi();\\n     for (line_iterator line = curFrame->begin_lines(), line_end = curFrame->end_lines();\\n          line != line_end; ++line)\\n     {\\n@@ -6175,6 +6176,9 @@ nsBlockFrame::Init(nsIContent*      aContent,\\n \\n   nsresult rv = nsBlockFrameSuper::Init(aContent, aParent, aPrevInFlow);\\n \\n+  if (!aPrevInFlow)\\n+    AddStateBits(NS_BLOCK_NEEDS_BIDI_RESOLUTION);\\n+\\n   return rv;\\n }\\n \\n@@ -6590,27 +6594,40 @@ nsBlockFrame::BlockNeedsSpaceManager(nsIFrame* aBlock)\\n     (parent && !parent->IsFloatContainingBlock());\\n }\\n \\n-// XXX keep the text-run data in the first-in-flow of the block\\n-\\n #ifdef IBMBIDI\\n nsresult\\n nsBlockFrame::ResolveBidi()\\n {\\n-  nsPresContext* presContext = PresContext();\\n-  if (!presContext->BidiEnabled()) {\\n+  NS_ASSERTION(!GetPrevInFlow(),\\n+               \\\"ResolveBidi called on non-first continuation\\\");\\n+\\n+  if (!(GetStateBits() & NS_BLOCK_NEEDS_BIDI_RESOLUTION))\\n     return NS_OK;\\n-  }\\n+ \\n+  RemoveStateBits(NS_BLOCK_NEEDS_BIDI_RESOLUTION);\\n \\n-  if (mLines.empty()) {\\n+  nsPresContext* presContext = PresContext();\\n+  if (!presContext->BidiEnabled()) {\\n     return NS_OK;\\n   }\\n \\n   nsBidiPresUtils* bidiUtils = presContext->GetBidiUtils();\\n   if (!bidiUtils)\\n-    return NS_OK;\\n+    return NS_ERROR_NULL_POINTER;\\n+\\n+  for (nsBlockFrame* curFrame = this;\\n+       curFrame; curFrame = NS_STATIC_CAST(nsBlockFrame*,\\n+                                           curFrame->GetNextContinuation())) {\\n+    if (!curFrame->mLines.empty()) {\\n+      nsresult rv = bidiUtils->Resolve(curFrame,\\n+                                       curFrame->mLines.front()->mFirstChild,\\n+                                       IsVisualFormControl(presContext));\\n+      if (NS_FAILED(rv))\\n+        return rv;\\n+    }\\n+  }\\n \\n-  return bidiUtils->Resolve(this, mLines.front()->mFirstChild,\\n-                            IsVisualFormControl(presContext));\\n+  return NS_OK;\\n }\\n \\n PRBool\\ndiff --git a/layout/generic/nsBlockFrame.h b/layout/generic/nsBlockFrame.h\\nindex 5f063cc..972430e 100644\\n--- a/layout/generic/nsBlockFrame.h\\n+++ b/layout/generic/nsBlockFrame.h\\n@@ -109,6 +109,7 @@ class nsIntervalSet;\\n  */\\n \\n // see nsHTMLParts.h for the public block state bits\\n+#define NS_BLOCK_NEEDS_BIDI_RESOLUTION      0x00100000\\n #define NS_BLOCK_HAS_LINE_CURSOR            0x01000000\\n #define NS_BLOCK_HAS_OVERFLOW_LINES         0x02000000\\n #define NS_BLOCK_HAS_OVERFLOW_OUT_OF_FLOWS  0x04000000\\ndiff --git a/layout/generic/nsHTMLParts.h b/layout/generic/nsHTMLParts.h\\nindex 48f63b3..4ea52e9 100644\\n--- a/layout/generic/nsHTMLParts.h\\n+++ b/layout/generic/nsHTMLParts.h\\n@@ -68,7 +68,7 @@ class nsIChannel;\\n #define NS_BLOCK_FRAME_HAS_OUTSIDE_BULLET   0x40000000\\n // These are the bits that get inherited from a block frame to its\\n // next-in-flows and are not private to blocks\\n-#define NS_BLOCK_FLAGS_MASK                 0xF0F00000\\n+#define NS_BLOCK_FLAGS_MASK                 0xF0E00000\\n \\n // Factory methods for creating html layout objects\\n \\n\""}