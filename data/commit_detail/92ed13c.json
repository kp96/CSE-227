{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas92ed13c\""},"diff":"\"92ed13c Bug 396684: fixing regression from bug 394551 in js_Invoke. r=brendan\\ndiff --git a/js/src/jsinterp.c b/js/src/jsinterp.c\\nindex e9765a3..c124859 100644\\n--- a/js/src/jsinterp.c\\n+++ b/js/src/jsinterp.c\\n@@ -1083,7 +1083,7 @@ js_Invoke(JSContext *cx, uintN argc, jsval *vp, uintN flags)\\n     JSNative native;\\n     JSFunction *fun;\\n     JSScript *script;\\n-    uintN nslots, nvars, i;\\n+    uintN nslots, nvars, i, skip;\\n     uint32 rootedArgsFlag;\\n     JSInterpreterHook hook;\\n     void *hookData;\\n@@ -1246,10 +1246,16 @@ have_fun:\\n         /* Set by JS_SetCallReturnValue2, used to return reference types. */\\n         cx->rval2set = JS_FALSE;\\n #endif\\n-        /* Root the extra slots that are not covered by [vp..vp+2+argc). */\\n-        i = rootedArgsFlag ? 2 + argc : 0;\\n-        JS_PUSH_TEMP_ROOT(cx, 2 + argc + nslots - i, argv - 2 + i, &tvr);\\n+        /* Root the slots that are not covered by [vp..vp+2+argc). */\\n+        skip = rootedArgsFlag ? 2 + argc : 0;\\n+        JS_PUSH_TEMP_ROOT(cx, 2 + argc + nslots - skip, argv - 2 + skip, &tvr);\\n         ok = ((JSFastNative) native)(cx, argc, argv - 2);\\n+\\n+        /*\\n+         * To avoid extra checks we always copy the result to *vp even if we\\n+         * have not copied argv and vp == argv - 2.\\n+         */\\n+        *vp = argv[-2];\\n         JS_POP_TEMP_ROOT(cx, &tvr);\\n \\n         JS_RUNTIME_METER(cx->runtime, nativeCalls);\\n@@ -1336,12 +1342,11 @@ have_fun:\\n #endif\\n \\n         /* If native, use caller varobj and scopeChain for eval. */\\n-        if (cx->fp) {\\n-            frame.varobj = cx->fp->varobj;\\n-            frame.scopeChain = cx->fp->scopeChain;\\n-        } else {\\n-            frame.varobj = NULL;\\n-            frame.scopeChain = NULL;\\n+        JS_ASSERT(!frame.varobj);\\n+        JS_ASSERT(!frame.scopeChain);\\n+        if (frame.down) {\\n+            frame.varobj = frame.down->varobj;\\n+            frame.scopeChain = frame.down->scopeChain;\\n         }\\n \\n         /* But ensure that we have a scope chain. */\\n\""}