{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas7bbc927\""},"diff":"\"7bbc927 Backing out patch by Mook from bug 390328 due to compile errors.\\ndiff --git a/js/src/xpconnect/idl/nsIXPConnect.idl b/js/src/xpconnect/idl/nsIXPConnect.idl\\nindex e54bbf4..a523c7c 100644\\n--- a/js/src/xpconnect/idl/nsIXPConnect.idl\\n+++ b/js/src/xpconnect/idl/nsIXPConnect.idl\\n@@ -65,7 +65,6 @@\\n       native JSID(jsid);\\n [ptr] native voidPtrPtr(void*);\\n [ptr] native JSTracerPtr(JSTracer);\\n-      native fd(int);\\n \\n /***************************************************************************/\\n \\n@@ -584,8 +583,7 @@ interface nsIXPConnect : nsISupports\\n \\n     void debugDump(in short depth);\\n     void debugDumpObject(in nsISupports aCOMObj, in short depth);\\n-    void debugDumpJSStack(in fd filedesc,\\n-                          in PRBool showArgs,\\n+    void debugDumpJSStack(in PRBool showArgs,\\n                           in PRBool showLocals,\\n                           in PRBool showThisProps);\\n     void debugDumpEvalInJSStackFrame(in PRUint32 aFrameNumber,\\ndiff --git a/js/src/xpconnect/src/nsXPConnect.cpp b/js/src/xpconnect/src/nsXPConnect.cpp\\nindex b80aa5c..91e9f94 100644\\n--- a/js/src/xpconnect/src/nsXPConnect.cpp\\n+++ b/js/src/xpconnect/src/nsXPConnect.cpp\\n@@ -42,7 +42,6 @@\\n \\n /* High level class and public functions implementation. */\\n \\n-#include <io.h>\\n #include \\\"xpcprivate.h\\\"\\n #include \\\"XPCNativeWrapper.h\\\"\\n #include \\\"nsBaseHashtable.h\\\"\\n@@ -1965,29 +1964,25 @@ nsXPConnect::DebugDumpObject(nsISupports *p, PRInt16 depth)\\n     return NS_OK;\\n }\\n \\n-/* void debugDumpJSStack (in fd filedesc, in PRBool showArgs, in PRBool showLocals, in PRBool showThisProps); */\\n+/* void debugDumpJSStack (in PRBool showArgs, in PRBool showLocals, in PRBool showThisProps); */\\n NS_IMETHODIMP\\n-nsXPConnect::DebugDumpJSStack(int filedesc,\\n-                              PRBool showArgs,\\n+nsXPConnect::DebugDumpJSStack(PRBool showArgs,\\n                               PRBool showLocals,\\n                               PRBool showThisProps)\\n {\\n #ifdef DEBUG\\n-    static const char kGetServiceFailed[] = \\\"failed to get nsIThreadJSContextStack service!\\\\n\\\";\\n-    static const char kPeekFailed[] = \\\"failed to peek into nsIThreadJSContextStack service!\\\\n\\\";\\n-    static const char kNoContext[] = \\\"there is no JSContext on the nsIThreadJSContextStack!\\\\n\\\";\\n     JSContext* cx;\\n     nsresult rv;\\n     nsCOMPtr<nsIThreadJSContextStack> stack = \\n              do_GetService(XPC_CONTEXT_STACK_CONTRACTID, &rv);\\n     if(NS_FAILED(rv) || !stack)\\n-        _write(filedesc, kGetServiceFailed, sizeof(kGetServiceFailed) - 1);\\n+        printf(\\\"failed to get nsIThreadJSContextStack service!\\\\n\\\");\\n     else if(NS_FAILED(stack->Peek(&cx)))\\n-        _write(filedesc, kPeekFailed, sizeof(kPeekFailed) - 1);\\n+        printf(\\\"failed to peek into nsIThreadJSContextStack service!\\\\n\\\");\\n     else if(!cx)\\n-        _write(filedesc, kNoContext, sizeof(kNoContext) - 1);\\n+        printf(\\\"there is no JSContext on the nsIThreadJSContextStack!\\\\n\\\");\\n     else\\n-        xpc_DumpJSStack(filedesc, cx, showArgs, showLocals, showThisProps);\\n+        xpc_DumpJSStack(cx, showArgs, showLocals, showThisProps);\\n #endif\\n     return NS_OK;\\n }\\n@@ -2110,7 +2105,7 @@ void DumpJSStack()\\n     nsresult rv;\\n     nsCOMPtr<nsIXPConnect> xpc(do_GetService(nsIXPConnect::GetCID(), &rv));\\n     if(NS_SUCCEEDED(rv) && xpc)\\n-        xpc->DebugDumpJSStack(1/*stdout*/, PR_TRUE, PR_TRUE, PR_FALSE);\\n+        xpc->DebugDumpJSStack(PR_TRUE, PR_TRUE, PR_FALSE);\\n     else\\n         printf(\\\"failed to get XPConnect service!\\\\n\\\");\\n }\\ndiff --git a/js/src/xpconnect/src/xpcdebug.cpp b/js/src/xpconnect/src/xpcdebug.cpp\\nindex 5054de0..be20285 100644\\n--- a/js/src/xpconnect/src/xpcdebug.cpp\\n+++ b/js/src/xpconnect/src/xpcdebug.cpp\\n@@ -38,8 +38,6 @@\\n  *\\n  * ***** END LICENSE BLOCK ***** */\\n \\n-#include <io.h>\\n-\\n #include \\\"xpcprivate.h\\\"\\n #if defined(DEBUG_xpc_hacker) || defined(DEBUG)\\n \\n@@ -291,21 +289,18 @@ static char* FormatJSStackDump(JSContext* cx, char* buf,\\n }\\n \\n JSBool\\n-xpc_DumpJSStack(int filedesc, JSContext* cx, JSBool showArgs, JSBool showLocals, JSBool showThisProps)\\n+xpc_DumpJSStack(JSContext* cx, JSBool showArgs, JSBool showLocals, JSBool showThisProps)\\n {\\n     char* buf;\\n \\n     buf = FormatJSStackDump(cx, nsnull, showArgs, showLocals, showThisProps);\\n     if(buf)\\n     {\\n-        _write(filedesc, buf, strlen(buf));\\n+        fputs(buf, stdout);\\n         JS_smprintf_free(buf);\\n     }\\n     else\\n-    {\\n-        const char kDumpFailed[] = \\\"Failed to format JavaScript stack for dump\\\";\\n-        _write(filedesc, kDumpFailed, sizeof(kDumpFailed) - 1);\\n-    }\\n+        puts(\\\"Failed to format JavaScript stack for dump\\\");\\n     return JS_TRUE;\\n }\\n \\n@@ -377,7 +372,7 @@ xpc_DebuggerKeywordHandler(JSContext *cx, JSScript *script, jsbytecode *pc,\\n     \\\"------------------------------------------------------------------------\\\";\\n     puts(line);\\n     puts(\\\"Hit JavaScript \\\\\\\"debugger\\\\\\\" keyword. JS call stack...\\\");\\n-    xpc_DumpJSStack(1/*stdout*/, cx, JS_TRUE, JS_TRUE, JS_FALSE);\\n+    xpc_DumpJSStack(cx, JS_TRUE, JS_TRUE, JS_FALSE);\\n     puts(line);\\n     return JSTRAP_CONTINUE;\\n }\\ndiff --git a/js/src/xpconnect/src/xpcprivate.h b/js/src/xpconnect/src/xpcprivate.h\\nindex 2e38d12..767db75 100644\\n--- a/js/src/xpconnect/src/xpcprivate.h\\n+++ b/js/src/xpconnect/src/xpcprivate.h\\n@@ -3232,7 +3232,7 @@ xpc_JSObjectIsID(JSContext *cx, JSObject* obj);\\n // in xpcdebug.cpp\\n \\n extern JSBool\\n-xpc_DumpJSStack(int filedesc, JSContext* cx, JSBool showArgs, JSBool showLocals,\\n+xpc_DumpJSStack(JSContext* cx, JSBool showArgs, JSBool showLocals,\\n                 JSBool showThisProps);\\n \\n extern JSBool\\ndiff --git a/js/src/xpconnect/src/xpcwrappednative.cpp b/js/src/xpconnect/src/xpcwrappednative.cpp\\nindex 4cacddf..2b1d3e8 100644\\n--- a/js/src/xpconnect/src/xpcwrappednative.cpp\\n+++ b/js/src/xpconnect/src/xpcwrappednative.cpp\\n@@ -3253,7 +3253,7 @@ void DEBUG_ReportWrapperThreadSafetyError(XPCCallContext& ccx,\\n         printf(\\\"  %s\\\\n  wrapper @ 0x%p\\\\n\\\", msg, (void *)wrapper);\\n \\n     printf(\\\"  JS call stack...\\\\n\\\");\\n-    xpc_DumpJSStack(1/*stdout*/, ccx, JS_TRUE, JS_TRUE, JS_TRUE);\\n+    xpc_DumpJSStack(ccx, JS_TRUE, JS_TRUE, JS_TRUE);\\n     printf(\\\"---------------------------------------------------------------\\\\n\\\");\\n     \\n     tls->ClearWrappedNativeThreadsafetyReportDepth();\\n\""}