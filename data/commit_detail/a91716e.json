{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basa91716e\""},"diff":"\"a91716e extra measure of security for password textfields on Mac OS X. b=394107 r=smorgan sr=roc\\ndiff --git a/layout/forms/nsTextControlFrame.cpp b/layout/forms/nsTextControlFrame.cpp\\nindex bcc798f..94669bf 100644\\n--- a/layout/forms/nsTextControlFrame.cpp\\n+++ b/layout/forms/nsTextControlFrame.cpp\\n@@ -359,7 +359,12 @@ nsTextInputListener::Focus(nsIDOMEvent* aEvent)\\n     editor->AddEditorObserver(this);\\n   }\\n \\n-  return mFrame->InitFocusedValue();\\n+  nsresult rv = mFrame->InitFocusedValue();\\n+\\n+  if (NS_SUCCEEDED(rv))\\n+    rv = mFrame->MaybeBeginSecureKeyboardInput();\\n+\\n+  return rv;\\n }\\n \\n NS_IMETHODIMP\\n@@ -374,6 +379,8 @@ nsTextInputListener::Blur(nsIDOMEvent* aEvent)\\n     editor->RemoveEditorObserver(this);\\n   }\\n \\n+  mFrame->MaybeEndSecureKeyboardInput();\\n+\\n   return NS_OK;\\n }\\n \\n@@ -1040,6 +1047,7 @@ nsTextControlFrame::nsTextControlFrame(nsIPresShell* aShell, nsStyleContext* aCo\\n   , mNotifyOnInput(PR_TRUE)\\n   , mDidPreDestroy(PR_FALSE)\\n   , mFireChangeEventState(PR_FALSE)\\n+  , mInSecureKeyboardInputMode(PR_FALSE)\\n   , mTextListener(nsnull)\\n #ifdef DEBUG\\n   , mCreateFrameForCalled(PR_FALSE)\\n@@ -1172,6 +1180,9 @@ nsTextControlFrame::PreDestroy()\\n void\\n nsTextControlFrame::Destroy()\\n {\\n+  if (mInSecureKeyboardInputMode) {\\n+    MaybeEndSecureKeyboardInput();\\n+  }\\n   if (!mDidPreDestroy) {\\n     PreDestroy();\\n   }\\n@@ -1220,6 +1231,29 @@ PRBool nsTextControlFrame::IsPlainTextControl() const\\n   return PR_TRUE;\\n }\\n \\n+nsresult nsTextControlFrame::MaybeBeginSecureKeyboardInput()\\n+{\\n+  nsresult rv = NS_OK;\\n+  if (IsPasswordTextControl() && !mInSecureKeyboardInputMode) {\\n+    nsIWidget* window = GetWindow();\\n+    NS_ENSURE_TRUE(window, NS_ERROR_FAILURE);\\n+    rv = window->BeginSecureKeyboardInput();\\n+    mInSecureKeyboardInputMode = NS_SUCCEEDED(rv);\\n+  }\\n+  return rv;\\n+}\\n+\\n+void nsTextControlFrame::MaybeEndSecureKeyboardInput()\\n+{\\n+  if (mInSecureKeyboardInputMode) {\\n+    nsIWidget* window = GetWindow();\\n+    if (!window)\\n+      return;\\n+    window->EndSecureKeyboardInput();\\n+    mInSecureKeyboardInputMode = PR_FALSE;\\n+  }\\n+}\\n+\\n PRBool nsTextControlFrame::IsPasswordTextControl() const\\n {\\n   nsCOMPtr<nsIFormControl> formControl = do_QueryInterface(mContent);\\ndiff --git a/layout/forms/nsTextControlFrame.h b/layout/forms/nsTextControlFrame.h\\nindex 11cbf11..32a0234 100644\\n--- a/layout/forms/nsTextControlFrame.h\\n+++ b/layout/forms/nsTextControlFrame.h\\n@@ -213,7 +213,11 @@ public: //for methods who access nsTextControlFrame directly\\n \\n   /* called to free up native keybinding services */\\n   static NS_HIDDEN_(void) ShutDown();\\n-  \\n+\\n+  // called by the focus listener\\n+  nsresult MaybeBeginSecureKeyboardInput();\\n+  void MaybeEndSecureKeyboardInput();\\n+\\n protected:\\n   /**\\n    * Find out whether this control is scrollable (i.e. if it is not a single\\n@@ -296,6 +300,7 @@ private:\\n   // Calls to SetValue will be treated as user values (i.e. trigger onChange\\n   // eventually) when mFireChangeEventState==true, this is used by nsFileControlFrame.\\n   PRPackedBool mFireChangeEventState;\\n+  PRPackedBool mInSecureKeyboardInputMode;\\n \\n   nsCOMPtr<nsISelectionController> mSelCon;\\n   nsCOMPtr<nsFrameSelection> mFrameSel;\\ndiff --git a/widget/public/nsIWidget.h b/widget/public/nsIWidget.h\\nindex d43ffa9..b300dcb 100644\\n--- a/widget/public/nsIWidget.h\\n+++ b/widget/public/nsIWidget.h\\n@@ -95,11 +95,11 @@ typedef nsEventStatus (*PR_CALLBACK EVENT_CALLBACK)(nsGUIEvent *event);\\n #define NS_NATIVE_PLUGIN_PORT_CG    101\\n #endif\\n \\n-// f60fa720-a9bc-4fd3-b863-812496fa85e6\\n+// 15800FBD-650A-4F67-81FB-186E73F45BE1\\n \\n #define NS_IWIDGET_IID \\\\\\n-{ 0xf60fa720, 0xa9bc, 0x4fd3, \\\\\\n-  { 0xb8, 0x63, 0x81, 0x24, 0x96, 0xfa, 0x85, 0xe6 } }\\n+{ 0x15800FBD, 0x650A, 0x4F67, \\\\\\n+  { 0x81, 0xFB, 0x18, 0x6E, 0x73, 0xF4, 0x5B, 0xE1 } }\\n \\n // Hide the native window systems real window type so as to avoid\\n // including native window system types and api's. This is necessary\\n@@ -1013,6 +1013,24 @@ class nsIWidget : public nsISupports {\\n     NS_IMETHOD GetLastInputEventTime(PRUint32& aTime) = 0;\\n \\n     /**\\n+     * Called when when we need to begin secure keyboard input, such as when a password field\\n+     * gets focus.\\n+     *\\n+     * NOTE: Calls to this method may not be nested and you can only enable secure keyboard input\\n+     * for one widget at a time.\\n+     */\\n+    NS_IMETHOD BeginSecureKeyboardInput() = 0;\\n+\\n+    /**\\n+     * Called when when we need to end secure keyboard input, such as when a password field\\n+     * loses focus.\\n+     *\\n+     * NOTE: Calls to this method may not be nested and you can only enable secure keyboard input\\n+     * for one widget at a time.\\n+     */\\n+    NS_IMETHOD EndSecureKeyboardInput() = 0;\\n+\\n+    /**\\n      * Get the Thebes surface associated with this widget.\\n      */\\n     virtual gfxASurface *GetThebesSurface() = 0;\\ndiff --git a/widget/src/cocoa/nsChildView.h b/widget/src/cocoa/nsChildView.h\\nindex 4f9c75a..22ac35f 100644\\n--- a/widget/src/cocoa/nsChildView.h\\n+++ b/widget/src/cocoa/nsChildView.h\\n@@ -312,6 +312,9 @@ public:\\n \\n   virtual gfxASurface* GetThebesSurface();\\n \\n+  NS_IMETHOD BeginSecureKeyboardInput();\\n+  NS_IMETHOD EndSecureKeyboardInput();\\n+\\n protected:\\n \\n   PRBool            ReportDestroyEvent();\\ndiff --git a/widget/src/cocoa/nsChildView.mm b/widget/src/cocoa/nsChildView.mm\\nindex 023bd3f..dbbc31d 100644\\n--- a/widget/src/cocoa/nsChildView.mm\\n+++ b/widget/src/cocoa/nsChildView.mm\\n@@ -1744,6 +1744,26 @@ nsChildView::GetThebesSurface()\\n }\\n \\n \\n+NS_IMETHODIMP\\n+nsChildView::BeginSecureKeyboardInput()\\n+{\\n+  nsresult rv = nsBaseWidget::BeginSecureKeyboardInput();\\n+  if (NS_SUCCEEDED(rv))\\n+    ::EnableSecureEventInput();\\n+  return rv;\\n+}\\n+\\n+\\n+NS_IMETHODIMP\\n+nsChildView::EndSecureKeyboardInput()\\n+{\\n+  nsresult rv = nsBaseWidget::EndSecureKeyboardInput();\\n+  if (NS_SUCCEEDED(rv))\\n+    ::DisableSecureEventInput();\\n+  return rv;\\n+}\\n+\\n+\\n #ifdef ACCESSIBILITY\\n void\\n nsChildView::GetDocumentAccessible(nsIAccessible** aAccessible)\\ndiff --git a/widget/src/cocoa/nsCocoaWindow.h b/widget/src/cocoa/nsCocoaWindow.h\\nindex fb15ec7..b5168d6 100644\\n--- a/widget/src/cocoa/nsCocoaWindow.h\\n+++ b/widget/src/cocoa/nsCocoaWindow.h\\n@@ -203,6 +203,9 @@ public:\\n     // nsIKBStateControl interface\\n     NS_IMETHOD ResetInputState();\\n \\n+    NS_IMETHOD BeginSecureKeyboardInput();\\n+    NS_IMETHOD EndSecureKeyboardInput();\\n+\\n protected:\\n   \\n   nsIWidget*           mParent;         // if we're a popup, this is our parent [WEAK]\\ndiff --git a/widget/src/cocoa/nsCocoaWindow.mm b/widget/src/cocoa/nsCocoaWindow.mm\\nindex 5514b47..1721eee 100644\\n--- a/widget/src/cocoa/nsCocoaWindow.mm\\n+++ b/widget/src/cocoa/nsCocoaWindow.mm\\n@@ -1057,6 +1057,24 @@ gfxASurface* nsCocoaWindow::GetThebesSurface()\\n }\\n \\n \\n+NS_IMETHODIMP nsCocoaWindow::BeginSecureKeyboardInput()\\n+{\\n+  nsresult rv = nsBaseWidget::BeginSecureKeyboardInput();\\n+  if (NS_SUCCEEDED(rv))\\n+    ::EnableSecureEventInput();\\n+  return rv;\\n+}\\n+\\n+\\n+NS_IMETHODIMP nsCocoaWindow::EndSecureKeyboardInput()\\n+{\\n+  nsresult rv = nsBaseWidget::EndSecureKeyboardInput();\\n+  if (NS_SUCCEEDED(rv))\\n+    ::DisableSecureEventInput();\\n+  return rv;\\n+}\\n+\\n+\\n @implementation WindowDelegate\\n \\n \\ndiff --git a/widget/src/xpwidgets/nsBaseWidget.cpp b/widget/src/xpwidgets/nsBaseWidget.cpp\\nindex 1f1d50e..9375df0 100644\\n--- a/widget/src/xpwidgets/nsBaseWidget.cpp\\n+++ b/widget/src/xpwidgets/nsBaseWidget.cpp\\n@@ -56,6 +56,7 @@\\n \\n static void debug_RegisterPrefCallbacks();\\n \\n+static PRBool debug_InSecureKeyboardInputMode = PR_FALSE;\\n #endif\\n \\n #ifdef NOISY_WIDGET_LEAKS\\n@@ -837,6 +838,26 @@ nsBaseWidget::SetIcon(const nsAString&)\\n   return NS_OK;\\n }\\n \\n+NS_IMETHODIMP\\n+nsBaseWidget::BeginSecureKeyboardInput()\\n+{\\n+#ifdef DEBUG\\n+  NS_ASSERTION(!debug_InSecureKeyboardInputMode, \\\"Attempting to nest call to BeginSecureKeyboardInput!\\\");\\n+  debug_InSecureKeyboardInputMode = PR_TRUE;\\n+#endif\\n+  return NS_OK;\\n+}\\n+\\n+NS_IMETHODIMP\\n+nsBaseWidget::EndSecureKeyboardInput()\\n+{\\n+#ifdef DEBUG\\n+  NS_ASSERTION(debug_InSecureKeyboardInputMode, \\\"Calling EndSecureKeyboardInput when it hasn't been enabled!\\\");\\n+  debug_InSecureKeyboardInputMode = PR_FALSE;\\n+#endif\\n+  return NS_OK;\\n+}\\n+\\n /**\\n  * Modifies aFile to point at an icon file with the given name and suffix.  The\\n  * suffix may correspond to a file extension with leading '.' if appropriate.\\ndiff --git a/widget/src/xpwidgets/nsBaseWidget.h b/widget/src/xpwidgets/nsBaseWidget.h\\nindex 799f119..dfe2fa0 100644\\n--- a/widget/src/xpwidgets/nsBaseWidget.h\\n+++ b/widget/src/xpwidgets/nsBaseWidget.h\\n@@ -131,8 +131,10 @@ public:\\n   NS_IMETHOD              GetAttention(PRInt32 aCycleCount);\\n   NS_IMETHOD              GetLastInputEventTime(PRUint32& aTime);\\n   NS_IMETHOD              SetIcon(const nsAString &anIconSpec);\\n+  NS_IMETHOD              BeginSecureKeyboardInput();\\n+  NS_IMETHOD              EndSecureKeyboardInput();\\n   virtual void            ConvertToDeviceCoordinates(nscoord  &aX,nscoord &aY) {}\\n-  virtual void            FreeNativeData(void * data, PRUint32 aDataType) {}//~~~\\n+  virtual void            FreeNativeData(void * data, PRUint32 aDataType) {}\\n \\n protected:\\n \\n\""}