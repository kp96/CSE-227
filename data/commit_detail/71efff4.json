{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas71efff4\""},"diff":"\"71efff4 Bug 394896. Implement ARIA autocomplete. r=david.bolter, a=dsicore\\ndiff --git a/accessible/src/base/nsARIAMap.cpp b/accessible/src/base/nsARIAMap.cpp\\nindex 8745ade..c92f254 100644\\n--- a/accessible/src/base/nsARIAMap.cpp\\n+++ b/accessible/src/base/nsARIAMap.cpp\\n@@ -78,7 +78,9 @@ nsRoleMapEntry nsARIAMap::gWAIRoleMap[] =\\n             {\\\"selected\\\", kBoolState, nsIAccessibleStates::STATE_SELECTED | nsIAccessibleStates::STATE_SELECTABLE},\\n             {\\\"selected\\\", \\\"false\\\", nsIAccessibleStates::STATE_SELECTABLE},\\n             {\\\"readonly\\\", kBoolState, nsIAccessibleStates::STATE_READONLY}, kEndEntry},\\n-  {\\\"combobox\\\", nsIAccessibleRole::ROLE_COMBOBOX, eNameLabelOrTitle, eHasValueMinMax, nsIAccessibleStates::STATE_COLLAPSED,\\n+  {\\\"combobox\\\", nsIAccessibleRole::ROLE_COMBOBOX, eNameLabelOrTitle, eHasValueMinMax,\\n+               nsIAccessibleStates::STATE_COLLAPSED | nsIAccessibleStates::STATE_HASPOPUP,\\n+            // Manually map EXT_STATE_SUPPORTS_AUTOCOMPLETION aaa:autocomplete\\n             {\\\"disabled\\\", kBoolState, nsIAccessibleStates::STATE_UNAVAILABLE},\\n             {\\\"readonly\\\", kBoolState, nsIAccessibleStates::STATE_READONLY},\\n             {\\\"expanded\\\", kBoolState, nsIAccessibleStates::STATE_EXPANDED}, kEndEntry},\\n@@ -172,6 +174,9 @@ nsRoleMapEntry nsARIAMap::gWAIRoleMap[] =\\n   {\\\"tabpanel\\\", nsIAccessibleRole::ROLE_PROPERTYPAGE, eNameLabelOrTitle, eNoValue, kNoReqStates, kEndEntry},\\n   {\\\"textbox\\\", nsIAccessibleRole::ROLE_ENTRY, eNameLabelOrTitle, eNoValue, kNoReqStates,\\n             // Manually map EXT_STATE_SINGLE_LINE and EXT_STATE_MULTI_LINE FROM aaa:multiline\\n+            // Manually map EXT_STATE_SUPPORTS_AUTOCOMPLETION aaa:autocomplete\\n+            {\\\"autocomplete\\\", \\\"list\\\", nsIAccessibleStates::STATE_HASPOPUP},\\n+            {\\\"autocomplete\\\", \\\"both\\\", nsIAccessibleStates::STATE_HASPOPUP},\\n             {\\\"secret\\\", kBoolState, nsIAccessibleStates::STATE_PROTECTED},\\n             {\\\"disabled\\\", kBoolState, nsIAccessibleStates::STATE_UNAVAILABLE},\\n             {\\\"readonly\\\", kBoolState, nsIAccessibleStates::STATE_READONLY}, kEndEntry},\\ndiff --git a/accessible/src/base/nsAccessible.cpp b/accessible/src/base/nsAccessible.cpp\\nindex ebceb3c..57a1c65 100644\\n--- a/accessible/src/base/nsAccessible.cpp\\n+++ b/accessible/src/base/nsAccessible.cpp\\n@@ -2337,17 +2337,29 @@ nsAccessible::GetFinalState(PRUint32 *aState, PRUint32 *aExtraState)\\n       }\\n     }\\n \\n-    // XXX We can remove this hack once we support RDF-based role & state maps\\n-    if (mRoleMapEntry && (mRoleMapEntry->role == nsIAccessibleRole::ROLE_ENTRY ||\\n-        mRoleMapEntry->role == nsIAccessibleRole::ROLE_PASSWORD_TEXT)) {\\n-      nsCOMPtr<nsIContent> content = do_QueryInterface(mDOMNode);\\n+    PRUint32 role;\\n+    GetFinalRole(&role);\\n+    if (role == nsIAccessibleRole::ROLE_ENTRY ||\\n+        role == nsIAccessibleRole::ROLE_PASSWORD_TEXT ||\\n+        role == nsIAccessibleRole::ROLE_COMBOBOX) {\\n+      nsIContent *content = frame->GetContent();\\n       NS_ENSURE_TRUE(content, NS_ERROR_FAILURE);\\n-      if (content->AttrValueIs(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::multiline,\\n-                               nsAccessibilityAtoms::_true, eCaseMatters)) {\\n-        *aExtraState |= nsIAccessibleStates::EXT_STATE_MULTI_LINE;\\n+      nsAutoString autocomplete;\\n+      if (content->GetAttr(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::autocomplete, autocomplete) &&\\n+          (autocomplete.EqualsIgnoreCase(\\\"inline\\\") ||\\n+           autocomplete.EqualsIgnoreCase(\\\"list\\\") ||\\n+           autocomplete.EqualsIgnoreCase(\\\"both\\\"))) {\\n+        *aExtraState |= nsIAccessibleStates::EXT_STATE_SUPPORTS_AUTOCOMPLETION;\\n       }\\n-      else {\\n-        *aExtraState |= nsIAccessibleStates::EXT_STATE_SINGLE_LINE;\\n+      // XXX We can remove this hack once we support RDF-based role & state maps\\n+      if (mRoleMapEntry && mRoleMapEntry->role == nsIAccessibleRole::ROLE_ENTRY) {\\n+        if (content->AttrValueIs(kNameSpaceID_WAIProperties, nsAccessibilityAtoms::multiline,\\n+                                 nsAccessibilityAtoms::_true, eCaseMatters)) {\\n+          *aExtraState |= nsIAccessibleStates::EXT_STATE_MULTI_LINE;\\n+        }\\n+        else {\\n+          *aExtraState |= nsIAccessibleStates::EXT_STATE_SINGLE_LINE;\\n+        }\\n       }\\n     }\\n   }\\n\""}