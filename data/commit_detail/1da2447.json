{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas1da2447\""},"diff":"\"1da2447 Followup for Bug 226735: replace modal pre-submit save password dialog with post-submit bar. r=gavin\\ndiff --git a/toolkit/components/passwordmgr/public/nsILoginManagerPrompter.idl b/toolkit/components/passwordmgr/public/nsILoginManagerPrompter.idl\\nindex 2087d33..31f15bd 100644\\n--- a/toolkit/components/passwordmgr/public/nsILoginManagerPrompter.idl\\n+++ b/toolkit/components/passwordmgr/public/nsILoginManagerPrompter.idl\\n@@ -43,15 +43,59 @@ interface nsIDOMWindow;\\n [scriptable, uuid(68b3cb59-51b8-4c57-bd7f-b2ce955a593d)]\\n \\n interface nsILoginManagerPrompter : nsISupports {\\n+    /**\\n+     * Initialize the prompter. Must be called before using other interfaces.\\n+     *\\n+     * @param aWindow\\n+     *        The in which the user is doing some login-related action that's\\n+     *        resulting in a need to prompt them for something. The prompt\\n+     *        will be associated with this window (or, if a notification bar\\n+     *        is being used, topmost opener in some cases).\\n+     */\\n     void init(in nsIDOMWindow aWindow);\\n \\n+    /**\\n+     * Ask the user if they want to save a login (Yes, Never, Not Now)\\n+     *\\n+     * @param aLogin\\n+     *        The login to be saved.\\n+     */\\n     void promptToSavePassword(in nsILoginInfo aLogin);\\n \\n-    void promptToChangePassword(in AString aUsername);\\n+    /**\\n+     * Ask the user if they want to change a login's password. If the\\n+     * user consents, modifyLogin() will be called.\\n+     *\\n+     * @param aOldLogin\\n+     *        The existing login (with the old password).\\n+     * @param aNewLogin\\n+     *        The new login.\\n+     */\\n+    void promptToChangePassword(in nsILoginInfo aOldLogin,\\n+                                in nsILoginInfo aNewLogin);\\n \\n+    /**\\n+     * Ask the user if they want to change the password for one of\\n+     * multiple logins, when the caller can't determine exactly which\\n+     * login should be changed. If the user consents, modifyLogin() will\\n+     * be called.\\n+     *\\n+     * @param logins\\n+     *        An array of existing logins.\\n+     * @param count\\n+     *        (length of the array)\\n+     * @param aNewLogin\\n+     *        The new login. \\n+     *\\n+     * Note: Because the caller does not know the username of the login\\n+     *       to be changed, aNewLogin.username and aNewLogin.usernameField\\n+     *       will be set (using the user's selection) before modifyLogin()\\n+     *       is called.\\n+     */\\n     void promptToChangePasswordWithUsernames(\\n+            [array, size_is(count)] in nsILoginInfo logins,\\n             in PRUint32 count,\\n-            [array, size_is(count)] in wstring usernames);\\n+            in nsILoginInfo aNewLogin);\\n };\\n %{C++\\n \\ndiff --git a/toolkit/components/passwordmgr/src/nsLoginManager.js b/toolkit/components/passwordmgr/src/nsLoginManager.js\\nindex 17f4c2e..0181a0e 100644\\n--- a/toolkit/components/passwordmgr/src/nsLoginManager.js\\n+++ b/toolkit/components/passwordmgr/src/nsLoginManager.js\\n@@ -781,7 +781,6 @@ LoginManager.prototype = {\\n         // logins to update the password for.\\n         if (!usernameField && oldPasswordField) {\\n \\n-            var ok, username;\\n             var logins = this.findLogins({}, hostname, formSubmitURL, null);\\n \\n             // XXX we could be smarter here: look for a login matching the\\n@@ -802,32 +801,16 @@ LoginManager.prototype = {\\n             var prompter = getPrompter(win);\\n \\n             if (logins.length == 1) {\\n-                username = logins[0].username;\\n-                ok = prompter.promptToChangePassword(username);\\n+                var oldLogin = logins[0];\\n+                formLogin.username      = oldLogin.username;\\n+                formLogin.usernameField = oldLogin.usernameField;\\n+\\n+                prompter.promptToChangePassword(oldLogin, formLogin);\\n             } else {\\n-                var usernames = logins.map(function (l) l.username);\\n-                [ok, username] = prompter.promptToChangePasswordWithUsernames(\\n-                                                                usernames);\\n+                prompter.promptToChangePasswordWithUsernames(\\n+                                    logins, logins.length, formLogin);\\n             }\\n \\n-            if (!ok)\\n-                return;\\n-\\n-            // Now that we know the desired username, find that login and\\n-            // update the info in our formLogin representation.\\n-            this.log(\\\"Updating password for username \\\" + username);\\n-\\n-            var existingLogin;\\n-            logins.some(function(l) {\\n-                                    existingLogin = l;\\n-                                    return (l.username == username);\\n-                                });\\n-\\n-            formLogin.username      = username;\\n-            formLogin.usernameField = existingLogin.usernameField;\\n-\\n-            this.modifyLogin(existingLogin, formLogin);\\n-            \\n             return;\\n         }\\n \\ndiff --git a/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js b/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js\\nindex 23bc2fb..bb8ba09 100644\\n--- a/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js\\n+++ b/toolkit/components/passwordmgr/src/nsLoginManagerPrompter.js\\n@@ -458,24 +458,25 @@ LoginManagerPrompter.prototype = {\\n      * login, when the form being submitted contains multiple password\\n      * fields.\\n      *\\n-     * Return values:\\n-     *   true  - Update the stored password\\n-     *   false - Do not update the stored password\\n      */\\n-    promptToChangePassword : function (aUsername) {\\n+    promptToChangePassword : function (aOldLogin, aNewLogin) {\\n         const buttonFlags = Ci.nsIPrompt.STD_YES_NO_BUTTONS;\\n \\n         var dialogText  = this._getLocalizedString(\\n-                                    \\\"passwordChangeText\\\", [aUsername]);\\n+                                    \\\"passwordChangeText\\\",\\n+                                    [aOldLogin.username]);\\n         var dialogTitle = this._getLocalizedString(\\n                                     \\\"passwordChangeTitle\\\");\\n \\n         // returns 0 for yes, 1 for no.\\n-        var result = this._promptService.confirmEx(this._window,\\n+        var ok = !this._promptService.confirmEx(this._window,\\n                                 dialogTitle, dialogText, buttonFlags,\\n                                 null, null, null,\\n                                 null, {});\\n-        return !result;\\n+        if (ok) {\\n+            this.log(\\\"Updating password for user \\\" + aOldLogin.username);\\n+            this._pwmgr.modifyLogin(aOldLogin, aNewLogin);\\n+        }\\n     },\\n \\n \\n@@ -486,20 +487,19 @@ LoginManagerPrompter.prototype = {\\n      * don't know which existing login (username) it's for. Asks the user\\n      * to select a username and confirm the password change.\\n      *\\n-     * Returns multiple parameters:\\n-     * [0] - User's response to the dialog\\n-     *   true  = Update the stored password\\n-     *   false = Do not update the stored password\\n-     * [1] - The username selected\\n-     *   (null if [0] is false)\\n-     *  \\n+     * Note: The caller doesn't know the username for aNewLogin, so this\\n+     *       function fills in .username and .usernameField with the values\\n+     *       from the login selected by the user.\\n+     * \\n+     * Note; XPCOM stupidity: |count| is just |logins.length|.\\n      */\\n-    promptToChangePasswordWithUsernames : function (usernames) {\\n+    promptToChangePasswordWithUsernames : function (logins, count, aNewLogin) {\\n         const buttonFlags = Ci.nsIPrompt.STD_YES_NO_BUTTONS;\\n \\n+        var usernames = logins.map(function (l) l.username);\\n         var dialogText  = this._getLocalizedString(\\\"userSelectText\\\");\\n         var dialogTitle = this._getLocalizedString(\\\"passwordChangeTitle\\\");\\n-        var selectedUser = null, selectedIndex = { value: null };\\n+        var selectedIndex = { value: null };\\n \\n         // If user selects ok, outparam.value is set to the index\\n         // of the selected username.\\n@@ -507,10 +507,19 @@ LoginManagerPrompter.prototype = {\\n                                 dialogTitle, dialogText,\\n                                 usernames.length, usernames,\\n                                 selectedIndex);\\n-        if (ok)\\n-            selectedUser = usernames[selectedIndex.value];\\n+        if (ok) {\\n+            // Now that we know which login to change the password for,\\n+            // update the missing username info in the aNewLogin.\\n+\\n+            var selectedLogin = logins[selectedIndex.value];\\n+\\n+            this.log(\\\"Updating password for user \\\" + selectedLogin.username);\\n \\n-        return [ok, selectedUser];\\n+            aNewLogin.username      = selectedLogin.username;\\n+            aNewLogin.usernameField = selectedLogin.usernameField;\\n+\\n+            this._pwmgr.modifyLogin(selectedLogin, aNewLogin);\\n+        }\\n     },\\n \\n \\n\""}