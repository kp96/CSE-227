{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basbc82284\""},"diff":"\"bc82284 Bug 392928 - new style nsSVGEnum.  r=longsonr, sr=roc, a=roc\\ndiff --git a/content/svg/content/src/Makefile.in b/content/svg/content/src/Makefile.in\\nindex a5990df..1420ac0 100644\\n--- a/content/svg/content/src/Makefile.in\\n+++ b/content/svg/content/src/Makefile.in\\n@@ -73,7 +73,6 @@ CPPSRCS\\t\\t= \\\\\\n \\t\\tnsSVGAngle.cpp \\\\\\n \\t\\tnsSVGAnimatedAngle.cpp \\\\\\n \\t\\tnsSVGAnimatedBoolean.cpp \\\\\\n-\\t\\tnsSVGAnimatedEnumeration.cpp \\\\\\n \\t\\tnsSVGAnimatedInteger.cpp \\\\\\n \\t\\tnsSVGAnimatedLengthList.cpp \\\\\\n \\t\\tnsSVGAnimatedNumberList.cpp \\\\\\n@@ -163,7 +162,6 @@ EXPORTS =  \\t\\t\\t\\\\\\n \\tnsSVGRect.h                \\\\\\n \\tnsSVGPoint.h               \\\\\\n \\tnsSVGMatrix.h              \\\\\\n-\\tnsISVGEnum.h               \\\\\\n \\t$(NULL)\\n \\n \\ndiff --git a/content/svg/content/src/nsISVGEnum.h b/content/svg/content/src/nsISVGEnum.h\\ndeleted file mode 100644\\nindex e458bd9..0000000\\n--- a/content/svg/content/src/nsISVGEnum.h\\n+++ /dev/null\\n@@ -1,63 +0,0 @@\\n-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n-/* ***** BEGIN LICENSE BLOCK *****\\n- * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n- *\\n- * The contents of this file are subject to the Mozilla Public License Version\\n- * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n- * the License. You may obtain a copy of the License at\\n- * http://www.mozilla.org/MPL/\\n- *\\n- * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n- * for the specific language governing rights and limitations under the\\n- * License.\\n- *\\n- * The Original Code is the Mozilla SVG project.\\n- *\\n- * The Initial Developer of the Original Code is\\n- * IBM Corporation\\n- * Portions created by the Initial Developer are Copyright (C) 2004\\n- * the Initial Developer. All Rights Reserved.\\n- *\\n- * Contributor(s):\\n- *   Tim Rowley <tor@cs.brown.edu> (original author)\\n- *\\n- * Alternatively, the contents of this file may be used under the terms of\\n- * either of the GNU General Public License Version 2 or later (the \\\"GPL\\\"),\\n- * or the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n- * in which case the provisions of the GPL or the LGPL are applicable instead\\n- * of those above. If you wish to allow use of your version of this file only\\n- * under the terms of either the GPL or the LGPL, and not to allow others to\\n- * use your version of this file under the terms of the MPL, indicate your\\n- * decision by deleting the provisions above and replace them with the notice\\n- * and other provisions required by the GPL or the LGPL. If you do not delete\\n- * the provisions above, a recipient may use your version of this file under\\n- * the terms of any one of the MPL, the GPL or the LGPL.\\n- *\\n- * ***** END LICENSE BLOCK ***** */\\n-\\n-#ifndef __NS_ISVGENUM_H__\\n-#define __NS_ISVGENUM_H__\\n-\\n-#include \\\"nsISupports.h\\\"\\n-\\n-////////////////////////////////////////////////////////////////////////\\n-// nsISVGEnum: private interface for svg lengths\\n-\\n-// {6bb710c5-a18c-45fc-a412-f042bae4da2d}\\n-#define NS_ISVGENUM_IID \\\\\\n-{ 0x6bb710c5, 0xa18c, 0x45fc, { 0xa4, 0x12, 0xf0, 0x42, 0xba, 0xe4, 0xda, 0x2d } }\\n-\\n-class nsISVGEnum : public nsISupports\\n-{\\n-public:\\n-  NS_DECLARE_STATIC_IID_ACCESSOR(NS_ISVGENUM_IID)\\n-\\n-  NS_IMETHOD GetIntegerValue(PRUint16 &value)=0;\\n-  NS_IMETHOD SetIntegerValue(PRUint16 value)=0;\\n-};\\n-\\n-NS_DEFINE_STATIC_IID_ACCESSOR(nsISVGEnum, NS_ISVGENUM_IID)\\n-\\n-#endif // __NS_ISVGENUM_H__\\n-\\ndiff --git a/content/svg/content/src/nsSVGAnimatedEnumeration.cpp b/content/svg/content/src/nsSVGAnimatedEnumeration.cpp\\ndeleted file mode 100644\\nindex 3652c7b..0000000\\n--- a/content/svg/content/src/nsSVGAnimatedEnumeration.cpp\\n+++ /dev/null\\n@@ -1,209 +0,0 @@\\n-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n-/* ***** BEGIN LICENSE BLOCK *****\\n- * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n- *\\n- * The contents of this file are subject to the Mozilla Public License Version\\n- * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n- * the License. You may obtain a copy of the License at\\n- * http://www.mozilla.org/MPL/\\n- *\\n- * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n- * for the specific language governing rights and limitations under the\\n- * License.\\n- *\\n- * The Original Code is the Mozilla SVG project.\\n- *\\n- * The Initial Developer of the Original Code is\\n- * IBM Corporation\\n- * Portions created by the Initial Developer are Copyright (C) 2004\\n- * the Initial Developer. All Rights Reserved.\\n- *\\n- * Contributor(s):\\n- *   Tim Rowley <tor@acm.org> (original author)\\n- *\\n- * Alternatively, the contents of this file may be used under the terms of\\n- * either of the GNU General Public License Version 2 or later (the \\\"GPL\\\"),\\n- * or the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n- * in which case the provisions of the GPL or the LGPL are applicable instead\\n- * of those above. If you wish to allow use of your version of this file only\\n- * under the terms of either the GPL or the LGPL, and not to allow others to\\n- * use your version of this file under the terms of the MPL, indicate your\\n- * decision by deleting the provisions above and replace them with the notice\\n- * and other provisions required by the GPL or the LGPL. If you do not delete\\n- * the provisions above, a recipient may use your version of this file under\\n- * the terms of any one of the MPL, the GPL or the LGPL.\\n- *\\n- * ***** END LICENSE BLOCK ***** */\\n-\\n-#include \\\"nsSVGValue.h\\\"\\n-#include \\\"nsWeakReference.h\\\"\\n-#include \\\"nsSVGAnimatedEnumeration.h\\\"\\n-#include \\\"nsISVGEnum.h\\\"\\n-#include \\\"nsContentUtils.h\\\"\\n-\\n-////////////////////////////////////////////////////////////////////////\\n-// nsSVGAnimatedEnumeration\\n-\\n-class nsSVGAnimatedEnumeration : public nsIDOMSVGAnimatedEnumeration,\\n-                                 public nsSVGValue,\\n-                                 public nsISVGValueObserver\\n-{\\n-protected:\\n-  friend nsresult NS_NewSVGAnimatedEnumeration(nsIDOMSVGAnimatedEnumeration** result,\\n-                                               nsISVGEnum* aBaseVal);\\n-  nsSVGAnimatedEnumeration();\\n-  ~nsSVGAnimatedEnumeration();\\n-  nsresult Init(nsISVGEnum* aBaseVal);\\n-  \\n-public:\\n-  // nsISupports interface:\\n-  NS_DECL_ISUPPORTS\\n-\\n-  // nsIDOMSVGAnimatedEnumeration interface:\\n-  NS_DECL_NSIDOMSVGANIMATEDENUMERATION\\n-\\n-  // remainder of nsISVGValue interface:\\n-  NS_IMETHOD SetValueString(const nsAString& aValue);\\n-  NS_IMETHOD GetValueString(nsAString& aValue);\\n-\\n-  // nsISVGValueObserver\\n-  NS_IMETHOD WillModifySVGObservable(nsISVGValue* observable,\\n-                                     modificationType aModType);\\n-  NS_IMETHOD DidModifySVGObservable (nsISVGValue* observable,\\n-                                     modificationType aModType);\\n-  \\n-  // nsISupportsWeakReference\\n-  // implementation inherited from nsSupportsWeakReference\\n-  \\n-protected:\\n-  nsCOMPtr<nsISVGEnum> mBaseVal;\\n-};\\n-\\n-\\n-\\n-//----------------------------------------------------------------------\\n-// Implementation\\n-\\n-nsSVGAnimatedEnumeration::nsSVGAnimatedEnumeration()\\n-{\\n-}\\n-\\n-nsSVGAnimatedEnumeration::~nsSVGAnimatedEnumeration()\\n-{\\n-  nsCOMPtr<nsISVGValue> val = do_QueryInterface(mBaseVal);\\n-  if (val) val->RemoveObserver(this);\\n-}\\n-\\n-nsresult\\n-nsSVGAnimatedEnumeration::Init(nsISVGEnum* aBaseVal)\\n-{\\n-  mBaseVal = aBaseVal;\\n-  if (!mBaseVal) return NS_ERROR_FAILURE;\\n-  nsCOMPtr<nsISVGValue> val = do_QueryInterface(mBaseVal);\\n-  NS_ASSERTION(val, \\\"baseval needs to implement nsISVGValue interface\\\");\\n-  if (!val) return NS_ERROR_FAILURE;\\n-  val->AddObserver(this);\\n-  return NS_OK;\\n-}\\n-\\n-//----------------------------------------------------------------------\\n-// nsISupports methods:\\n-\\n-NS_IMPL_ADDREF(nsSVGAnimatedEnumeration)\\n-NS_IMPL_RELEASE(nsSVGAnimatedEnumeration)\\n-\\n-\\n-NS_INTERFACE_MAP_BEGIN(nsSVGAnimatedEnumeration)\\n-  NS_INTERFACE_MAP_ENTRY(nsISVGValue)\\n-  NS_INTERFACE_MAP_ENTRY(nsIDOMSVGAnimatedEnumeration)\\n-  NS_INTERFACE_MAP_ENTRY(nsISupportsWeakReference)\\n-  NS_INTERFACE_MAP_ENTRY(nsISVGValueObserver)\\n-  NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO(SVGAnimatedEnumeration)\\n-  NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsISVGValue)\\n-NS_INTERFACE_MAP_END\\n-  \\n-//----------------------------------------------------------------------\\n-// nsISVGValue methods:\\n-\\n-NS_IMETHODIMP\\n-nsSVGAnimatedEnumeration::SetValueString(const nsAString& aValue)\\n-{\\n-  nsCOMPtr<nsISVGValue> value = do_QueryInterface(mBaseVal);\\n-  NS_ASSERTION(value, \\\"svg animated enumeration base value has wrong interface!\\\");\\n-  return value->SetValueString(aValue);\\n-}\\n-\\n-NS_IMETHODIMP\\n-nsSVGAnimatedEnumeration::GetValueString(nsAString& aValue)\\n-{\\n-  nsCOMPtr<nsISVGValue> value = do_QueryInterface(mBaseVal);\\n-  NS_ASSERTION(value, \\\"svg animated enumeration base value has wrong interface!\\\");\\n-  return value->GetValueString(aValue);\\n-}\\n-\\n-//----------------------------------------------------------------------\\n-// nsIDOMSVGAnimatedEnumeration methods:\\n-\\n-/* attribute unsigned short baseVal; */\\n-NS_IMETHODIMP\\n-nsSVGAnimatedEnumeration::GetBaseVal(PRUint16 *aBaseVal)\\n-{\\n-  mBaseVal->GetIntegerValue(*aBaseVal);\\n-  return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP\\n-nsSVGAnimatedEnumeration::SetBaseVal(PRUint16 aBaseVal)\\n-{\\n-  return mBaseVal->SetIntegerValue(aBaseVal);\\n-}\\n-\\n-/* readonly attribute unsigned short animVal; */\\n-NS_IMETHODIMP\\n-nsSVGAnimatedEnumeration::GetAnimVal(PRUint16 *aAnimVal)\\n-{\\n-  mBaseVal->GetIntegerValue(*aAnimVal);\\n-  return NS_OK;\\n-}\\n-\\n-//----------------------------------------------------------------------\\n-// nsISVGValueObserver methods\\n-\\n-NS_IMETHODIMP\\n-nsSVGAnimatedEnumeration::WillModifySVGObservable(nsISVGValue* observable,\\n-                                                  modificationType aModType)\\n-{\\n-  WillModify(aModType);\\n-  return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP\\n-nsSVGAnimatedEnumeration::DidModifySVGObservable (nsISVGValue* observable,\\n-                                                  modificationType aModType)\\n-{\\n-  DidModify(aModType);\\n-  return NS_OK;\\n-}\\n-\\n-////////////////////////////////////////////////////////////////////////\\n-// Exported creation functions\\n-\\n-nsresult\\n-NS_NewSVGAnimatedEnumeration(nsIDOMSVGAnimatedEnumeration** aResult,\\n-                             nsISVGEnum* aBaseVal)\\n-{\\n-  *aResult = nsnull;\\n-  \\n-  nsSVGAnimatedEnumeration* animatedEnum = new nsSVGAnimatedEnumeration();\\n-  if (!animatedEnum) return NS_ERROR_OUT_OF_MEMORY;\\n-  NS_ADDREF(animatedEnum);\\n-\\n-  nsresult rv = animatedEnum->Init(aBaseVal);\\n-  \\n-  *aResult = (nsIDOMSVGAnimatedEnumeration*) animatedEnum;\\n-  \\n-  return rv;\\n-}\\n-\\n-\\ndiff --git a/content/svg/content/src/nsSVGClipPathElement.cpp b/content/svg/content/src/nsSVGClipPathElement.cpp\\nindex 6c3166d..cc4c097 100644\\n--- a/content/svg/content/src/nsSVGClipPathElement.cpp\\n+++ b/content/svg/content/src/nsSVGClipPathElement.cpp\\n@@ -36,7 +36,14 @@\\n \\n #include \\\"nsSVGClipPathElement.h\\\"\\n #include \\\"nsGkAtoms.h\\\"\\n-#include \\\"nsSVGEnum.h\\\"\\n+\\n+nsSVGElement::EnumInfo nsSVGClipPathElement::sEnumInfo[1] =\\n+{\\n+  { &nsGkAtoms::clipPathUnits,\\n+    sSVGUnitTypesMap,\\n+    nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE\\n+  }\\n+};\\n \\n NS_IMPL_NS_NEW_SVG_ELEMENT(ClipPath)\\n \\n@@ -51,6 +58,7 @@ NS_INTERFACE_MAP_BEGIN(nsSVGClipPathElement)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMElement)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMSVGElement)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMSVGClipPathElement)\\n+  NS_INTERFACE_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n   NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO(SVGClipPathElement)\\n NS_INTERFACE_MAP_END_INHERITING(nsSVGClipPathElementBase)\\n \\n@@ -62,44 +70,18 @@ nsSVGClipPathElement::nsSVGClipPathElement(nsINodeInfo *aNodeInfo)\\n {\\n }\\n \\n-\\n-nsresult\\n-nsSVGClipPathElement::Init()\\n-{\\n-  nsresult rv = nsSVGClipPathElementBase::Init();\\n-  NS_ENSURE_SUCCESS(rv,rv);\\n-\\n-  // Define enumeration mappings\\n-  static struct nsSVGEnumMapping gUnitMap[] = {\\n-    {&nsGkAtoms::objectBoundingBox, nsIDOMSVGClipPathElement::SVG_CPUNITS_OBJECTBOUNDINGBOX},\\n-    {&nsGkAtoms::userSpaceOnUse, nsIDOMSVGClipPathElement::SVG_CPUNITS_USERSPACEONUSE},\\n-    {nsnull, 0}\\n-  };\\n-\\n-  // DOM property: clipPathUnits ,  #IMPLIED attrib: clipPathUnits\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units),\\n-                       nsIDOMSVGClipPathElement::SVG_CPUNITS_USERSPACEONUSE,\\n-                       gUnitMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mClipPathUnits), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::clipPathUnits, mClipPathUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  return NS_OK;\\n-}\\n-\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration clipPathUnits; */\\n NS_IMETHODIMP nsSVGClipPathElement::GetClipPathUnits(nsIDOMSVGAnimatedEnumeration * *aClipPathUnits)\\n {\\n-  *aClipPathUnits = mClipPathUnits;\\n-  NS_IF_ADDREF(*aClipPathUnits);\\n-  return NS_OK;\\n+  return mEnumAttributes[CLIPPATHUNITS].ToDOMAnimatedEnum(aClipPathUnits, this);\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGClipPathElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n \\n //----------------------------------------------------------------------\\n // nsIDOMNode methods\\ndiff --git a/content/svg/content/src/nsSVGClipPathElement.h b/content/svg/content/src/nsSVGClipPathElement.h\\nindex 176d84e..38dd305 100755\\n--- a/content/svg/content/src/nsSVGClipPathElement.h\\n+++ b/content/svg/content/src/nsSVGClipPathElement.h\\n@@ -39,12 +39,14 @@\\n \\n #include \\\"nsSVGGraphicElement.h\\\"\\n #include \\\"nsIDOMSVGClipPathElement.h\\\"\\n-#include \\\"nsSVGAnimatedEnumeration.h\\\"\\n+#include \\\"nsIDOMSVGUnitTypes.h\\\"\\n+#include \\\"nsSVGEnum.h\\\"\\n \\n typedef nsSVGGraphicElement nsSVGClipPathElementBase;\\n \\n class nsSVGClipPathElement : public nsSVGClipPathElementBase,\\n-                             public nsIDOMSVGClipPathElement\\n+                             public nsIDOMSVGClipPathElement,\\n+                             public nsIDOMSVGUnitTypes\\n {\\n   friend class nsSVGClipPathFrame;\\n \\n@@ -52,7 +54,6 @@ protected:\\n   friend nsresult NS_NewSVGClipPathElement(nsIContent **aResult,\\n                                            nsINodeInfo *aNodeInfo);\\n   nsSVGClipPathElement(nsINodeInfo *aNodeInfo);\\n-  nsresult Init();\\n \\n public:\\n   // interfaces:\\n@@ -70,8 +71,11 @@ public:\\n protected:\\n \\n   // nsIDOMSVGClipPathElement values\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mClipPathUnits;\\n+  enum { CLIPPATHUNITS };\\n+  nsSVGEnum mEnumAttributes[1];\\n+  static EnumInfo sEnumInfo[1];\\n \\n+  virtual EnumAttributesInfo GetEnumInfo();\\n };\\n \\n #endif\\ndiff --git a/content/svg/content/src/nsSVGElement.cpp b/content/svg/content/src/nsSVGElement.cpp\\nindex 87fd2fa..6d861cf 100644\\n--- a/content/svg/content/src/nsSVGElement.cpp\\n+++ b/content/svg/content/src/nsSVGElement.cpp\\n@@ -67,8 +67,16 @@\\n #include \\\"nsSVGUtils.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n #include \\\"nsSVGNumber2.h\\\"\\n+#include \\\"nsSVGEnum.h\\\"\\n+#include \\\"nsIDOMSVGUnitTypes.h\\\"\\n #include <stdarg.h>\\n \\n+nsSVGEnumMapping nsSVGElement::sSVGUnitTypesMap[] = {\\n+  {&nsGkAtoms::userSpaceOnUse, nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE},\\n+  {&nsGkAtoms::objectBoundingBox, nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX},\\n+  {nsnull, 0}\\n+};\\n+\\n nsSVGElement::nsSVGElement(nsINodeInfo *aNodeInfo)\\n   : nsSVGElementBase(aNodeInfo), mSuppressNotification(PR_FALSE)\\n {\\n@@ -96,6 +104,12 @@ nsSVGElement::Init()\\n     numberInfo.mNumbers[i].Init(i, numberInfo.mNumberInfo[i].mDefaultValue);\\n   }\\n \\n+  EnumAttributesInfo enumInfo = GetEnumInfo();\\n+\\n+  for (i = 0; i < enumInfo.mEnumCount; i++) {\\n+    enumInfo.mEnums[i].Init(i, enumInfo.mEnumInfo[i].mDefaultValue);\\n+  }\\n+\\n   return NS_OK;\\n }\\n \\n@@ -207,36 +221,44 @@ nsSVGElement::ParseAttribute(PRInt32 aNamespaceID,\\n   }\\n \\n   if (aNamespaceID == kNameSpaceID_None) {\\n+    nsresult rv;\\n+    PRBool foundMatch = PR_FALSE;\\n+\\n     // Check for nsSVGLength2 attribute\\n     LengthAttributesInfo lengthInfo = GetLengthInfo();\\n-    PRUint32 i;\\n-    for (i = 0; i < lengthInfo.mLengthCount; i++) {\\n+    for (PRUint32 i = 0; i < lengthInfo.mLengthCount && !foundMatch; i++) {\\n       if (aAttribute == *lengthInfo.mLengthInfo[i].mName) {\\n-        nsresult rv = lengthInfo.mLengths[i].SetBaseValueString(aValue, this,\\n-                                                                PR_FALSE);\\n-        if (NS_FAILED(rv)) {\\n-          ReportAttributeParseFailure(GetOwnerDoc(), aAttribute, aValue);\\n-          return PR_FALSE;\\n-        }\\n-        aResult.SetTo(aValue);\\n-        return PR_TRUE;\\n+        rv = lengthInfo.mLengths[i].SetBaseValueString(aValue, this, PR_FALSE);\\n+        foundMatch = PR_TRUE;\\n       }\\n     }\\n \\n     // Check for nsSVGNumber2 attribute\\n     NumberAttributesInfo numberInfo = GetNumberInfo();\\n-    for (i = 0; i < numberInfo.mNumberCount; i++) {\\n+    for (PRUint32 i = 0; i < numberInfo.mNumberCount && !foundMatch; i++) {\\n       if (aAttribute == *numberInfo.mNumberInfo[i].mName) {\\n-        nsresult rv = numberInfo.mNumbers[i].SetBaseValueString(aValue, this,\\n-                                                                PR_FALSE);\\n-        if (NS_FAILED(rv)) {\\n-          ReportAttributeParseFailure(GetOwnerDoc(), aAttribute, aValue);\\n-          return PR_FALSE;\\n-        }\\n-        aResult.SetTo(aValue);\\n-        return PR_TRUE;\\n+        rv = numberInfo.mNumbers[i].SetBaseValueString(aValue, this, PR_FALSE);\\n+        foundMatch = PR_TRUE;\\n       }\\n     }\\n+\\n+    // Check for nsSVGEnum attribute\\n+    EnumAttributesInfo enumInfo = GetEnumInfo();\\n+    for (PRUint32 i = 0; i < enumInfo.mEnumCount && !foundMatch; i++) {\\n+      if (aAttribute == *enumInfo.mEnumInfo[i].mName) {\\n+        rv = enumInfo.mEnums[i].SetBaseValueString(aValue, this, PR_FALSE);\\n+        foundMatch = PR_TRUE;\\n+      }\\n+    }\\n+\\n+    if (foundMatch) {\\n+      if (NS_FAILED(rv)) {\\n+        ReportAttributeParseFailure(GetOwnerDoc(), aAttribute, aValue);\\n+        return PR_FALSE;\\n+      }\\n+      aResult.SetTo(aValue);\\n+      return PR_TRUE;\\n+    }\\n   }\\n \\n   return nsSVGElementBase::ParseAttribute(aNamespaceID, aAttribute, aValue,\\n@@ -284,6 +306,17 @@ nsSVGElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n           break;\\n         }\\n       }\\n+\\n+      // Check if this is a number attribute going away\\n+      EnumAttributesInfo enumInfo = GetEnumInfo();\\n+\\n+      for (i = 0; i < enumInfo.mEnumCount; i++) {\\n+        if (aName == *enumInfo.mEnumInfo[i].mName) {\\n+          enumInfo.mEnums[i].Init(i, enumInfo.mEnumInfo[i].mDefaultValue);\\n+          DidChangeEnum(i, PR_FALSE);\\n+          break;\\n+        }\\n+      }\\n     }\\n   }\\n \\n@@ -865,6 +898,32 @@ nsSVGElement::GetAnimatedNumberValues(float *aFirst, ...)\\n   va_end(args);\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(nsnull, nsnull, 0);\\n+}\\n+\\n+void\\n+nsSVGElement::DidChangeEnum(PRUint8 aAttrEnum, PRBool aDoSetAttr)\\n+{\\n+  if (!aDoSetAttr)\\n+    return;\\n+\\n+  EnumAttributesInfo info = GetEnumInfo();\\n+\\n+  NS_ASSERTION(info.mEnumCount > 0,\\n+               \\\"DidChangeNumber on element with no number attribs\\\");\\n+\\n+  NS_ASSERTION(aAttrEnum < info.mEnumCount, \\\"aAttrEnum out of range\\\");\\n+\\n+  nsAutoString newStr;\\n+  info.mEnums[aAttrEnum].GetBaseValueString(newStr, this);\\n+\\n+  SetAttr(kNameSpaceID_None, *info.mEnumInfo[aAttrEnum].mName,\\n+          newStr, PR_TRUE);\\n+}\\n+\\n nsresult\\n nsSVGElement::ReportAttributeParseFailure(nsIDocument* aDocument,\\n                                           nsIAtom* aAttribute,\\ndiff --git a/content/svg/content/src/nsSVGElement.h b/content/svg/content/src/nsSVGElement.h\\nindex 681e71e..0fc2680 100644\\n--- a/content/svg/content/src/nsSVGElement.h\\n+++ b/content/svg/content/src/nsSVGElement.h\\n@@ -57,6 +57,8 @@\\n class nsSVGSVGElement;\\n class nsSVGLength2;\\n class nsSVGNumber2;\\n+class nsSVGEnum;\\n+struct nsSVGEnumMapping;\\n \\n typedef nsStyledElement nsSVGElementBase;\\n \\n@@ -116,6 +118,7 @@ public:\\n \\n   virtual void DidChangeLength(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n   virtual void DidChangeNumber(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n+  virtual void DidChangeEnum(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n \\n   void GetAnimatedLengthValues(float *aFirst, ...);\\n   void GetAnimatedNumberValues(float *aFirst, ...);\\n@@ -179,6 +182,26 @@ public:\\n       {}\\n   };\\n \\n+  struct EnumInfo {\\n+    nsIAtom**         mName;\\n+    nsSVGEnumMapping* mMapping;\\n+    PRUint16          mDefaultValue;\\n+  };\\n+\\n+  struct EnumAttributesInfo {\\n+    nsSVGEnum* mEnums;\\n+    EnumInfo*  mEnumInfo;\\n+    PRUint32   mEnumCount;\\n+\\n+    EnumAttributesInfo(nsSVGEnum *aEnums,\\n+                       EnumInfo *aEnumInfo,\\n+                       PRUint32 aEnumCount) :\\n+      mEnums(aEnums), mEnumInfo(aEnumInfo), mEnumCount(aEnumCount)\\n+      {}\\n+  };\\n+\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n+\\n protected:\\n   virtual LengthAttributesInfo GetLengthInfo();\\n   virtual NumberAttributesInfo GetNumberInfo();\\n@@ -186,6 +209,9 @@ protected:\\n   static nsresult ReportAttributeParseFailure(nsIDocument* aDocument,\\n                                               nsIAtom* aAttribute,\\n                                               const nsAString& aValue);\\n+\\n+  static nsSVGEnumMapping sSVGUnitTypesMap[];\\n+\\n   nsCOMPtr<nsICSSStyleRule> mContentStyleRule;\\n   nsAttrAndChildArray mMappedAttributes;\\n \\ndiff --git a/content/svg/content/src/nsSVGEnum.cpp b/content/svg/content/src/nsSVGEnum.cpp\\nindex af7e443..1ea3494 100644\\n--- a/content/svg/content/src/nsSVGEnum.cpp\\n+++ b/content/svg/content/src/nsSVGEnum.cpp\\n@@ -14,13 +14,11 @@\\n  *\\n  * The Original Code is the Mozilla SVG project.\\n  *\\n- * The Initial Developer of the Original Code is\\n- * IBM Corporation\\n- * Portions created by the Initial Developer are Copyright (C) 2004\\n+ * The Initial Developer of the Original Code is IBM Corporation\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n  * the Initial Developer. All Rights Reserved.\\n  *\\n  * Contributor(s):\\n- *   Tim Rowley <tor@cs.brown.edu> (original author)\\n  *\\n  * Alternatively, the contents of this file may be used under the terms of\\n  * either of the GNU General Public License Version 2 or later (the \\\"GPL\\\"),\\n@@ -37,137 +35,41 @@\\n  * ***** END LICENSE BLOCK ***** */\\n \\n #include \\\"nsSVGEnum.h\\\"\\n-#include \\\"nsSVGValue.h\\\"\\n-#include \\\"nsISVGValueUtils.h\\\"\\n-#include \\\"nsWeakReference.h\\\"\\n #include \\\"nsIAtom.h\\\"\\n+#include \\\"nsSVGElement.h\\\"\\n \\n-////////////////////////////////////////////////////////////////////////\\n-// nsSVGEnum class\\n+NS_IMPL_ADDREF(nsSVGEnum::DOMAnimatedEnum)\\n+NS_IMPL_RELEASE(nsSVGEnum::DOMAnimatedEnum)\\n \\n-class nsSVGEnum : public nsISVGEnum,\\n-                  public nsSVGValue\\n-{\\n-protected:\\n-  friend nsresult NS_NewSVGEnum(nsISVGEnum** result,\\n-                                PRUint16 value,\\n-                                nsSVGEnumMapping *mapping);\\n-    \\n-  friend nsresult NS_NewSVGEnum(nsISVGEnum** result,\\n-                                const nsAString &value,\\n-                                nsSVGEnumMapping *mapping);\\n-  \\n-  nsSVGEnum(PRUint16 value, nsSVGEnumMapping *mapping);\\n-  nsSVGEnum(nsSVGEnumMapping *mapping);\\n-  virtual ~nsSVGEnum();\\n-\\n-public:\\n-  // nsISupports interface:\\n-  NS_DECL_ISUPPORTS\\n-\\n-  // nsISVGEnum interface:\\n-  NS_IMETHOD GetIntegerValue(PRUint16 &value);\\n-  NS_IMETHOD SetIntegerValue(PRUint16 value);\\n-  \\n-  // nsISVGValue interface:\\n-  NS_IMETHOD SetValueString(const nsAString& aValue);\\n-  NS_IMETHOD GetValueString(nsAString& aValue);\\n-  \\n-#ifdef DEBUG_scooter\\n-  void Print_mapping();\\n-#endif\\n-  \\n-protected:\\n-  PRUint16 mValue;\\n-  nsSVGEnumMapping *mMapping;\\n-};\\n-\\n-\\n-//----------------------------------------------------------------------\\n-// Implementation\\n-\\n-#ifdef DEBUG_scooter\\n-void nsSVGEnum::Print_mapping()\\n-{\\n-  nsSVGEnumMapping *tmp = mMapping;\\n-  nsAutoString aStr;\\n-  printf(\\\"Print_mapping: mMapping = 0x%x\\\\n\\\", tmp);\\n-  while (tmp->key) {\\n-    (*tmp->key)->ToString(aStr);\\n-    printf (\\\"Print_mapping: %s (%d)\\\\n\\\", NS_ConvertUTF16toUTF8(aStr).get(), tmp->val);\\n-    tmp++;\\n-  }\\n-}\\n-#endif\\n-\\n-nsresult\\n-NS_NewSVGEnum(nsISVGEnum** result,\\n-              PRUint16 value,\\n-              nsSVGEnumMapping *mapping)\\n-{\\n-  NS_ASSERTION(mapping, \\\"no mapping\\\");\\n-  nsSVGEnum *pe = new nsSVGEnum(value, mapping);\\n-  if (!pe) return NS_ERROR_OUT_OF_MEMORY;\\n-  NS_ADDREF(pe);\\n-  *result = pe;\\n-  return NS_OK;\\n-}\\n+NS_INTERFACE_MAP_BEGIN(nsSVGEnum::DOMAnimatedEnum)\\n+  NS_INTERFACE_MAP_ENTRY(nsIDOMSVGAnimatedEnumeration)\\n+  NS_INTERFACE_MAP_ENTRY(nsISupports)\\n+  NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO(SVGAnimatedEnumeration)\\n+NS_INTERFACE_MAP_END\\n \\n-nsresult\\n-NS_NewSVGEnum(nsISVGEnum** result,\\n-              const nsAString &value,\\n-              nsSVGEnumMapping *mapping)\\n+nsSVGEnumMapping *\\n+nsSVGEnum::GetMapping(nsSVGElement *aSVGElement)\\n {\\n-  NS_ASSERTION(mapping, \\\"no mapping\\\");\\n-  *result = nsnull;\\n-  nsSVGEnum *pe = new nsSVGEnum(0, mapping);\\n-  if (!pe) return NS_ERROR_OUT_OF_MEMORY;\\n-  NS_ADDREF(pe);\\n-  if (NS_FAILED(pe->SetValueString(value))) {\\n-    NS_RELEASE(pe);\\n-    return NS_ERROR_FAILURE;\\n-  }\\n-  *result = pe;\\n-  return NS_OK;\\n-}  \\n+  nsSVGElement::EnumAttributesInfo info = aSVGElement->GetEnumInfo();\\n \\n+  NS_ASSERTION(info.mEnumCount > 0 && mAttrEnum < info.mEnumCount,\\n+               \\\"mapping request for a non-attrib enum\\\");\\n \\n-nsSVGEnum::nsSVGEnum(PRUint16 value,\\n-                     nsSVGEnumMapping *mapping)\\n-    : mValue(value), mMapping(mapping)\\n-{\\n-}\\n-\\n-nsSVGEnum::~nsSVGEnum()\\n-{\\n+  return info.mEnumInfo[mAttrEnum].mMapping;\\n }\\n \\n-//----------------------------------------------------------------------\\n-// nsISupports methods:\\n-\\n-NS_IMPL_ADDREF(nsSVGEnum)\\n-NS_IMPL_RELEASE(nsSVGEnum)\\n-\\n-NS_INTERFACE_MAP_BEGIN(nsSVGEnum)\\n-  NS_INTERFACE_MAP_ENTRY(nsISVGValue)\\n-  NS_INTERFACE_MAP_ENTRY(nsISVGEnum)\\n-  NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsISVGValue)\\n-NS_INTERFACE_MAP_END\\n-\\n-//----------------------------------------------------------------------\\n-// nsISVGValue methods:\\n-NS_IMETHODIMP\\n-nsSVGEnum::SetValueString(const nsAString& aValue)\\n+nsresult\\n+nsSVGEnum::SetBaseValueString(const nsAString& aValue,\\n+                              nsSVGElement *aSVGElement,\\n+                              PRBool aDoSetAttr)\\n {\\n   nsCOMPtr<nsIAtom> valAtom = do_GetAtom(aValue);\\n \\n-  nsSVGEnumMapping *tmp = mMapping;\\n+  nsSVGEnumMapping *tmp = GetMapping(aSVGElement);\\n \\n-  while (tmp->key) {\\n-    if (valAtom == *(tmp->key)) {\\n-      WillModify();\\n-      mValue = tmp->val;\\n-      DidModify();\\n+  while (tmp && tmp->mKey) {\\n+    if (valAtom == *(tmp->mKey)) {\\n+      mBaseVal = mAnimVal = tmp->mVal;\\n       return NS_OK;\\n     }\\n     tmp++;\\n@@ -178,39 +80,38 @@ nsSVGEnum::SetValueString(const nsAString& aValue)\\n   return NS_ERROR_FAILURE;\\n }\\n \\n-NS_IMETHODIMP\\n-nsSVGEnum::GetValueString(nsAString& aValue)\\n+void\\n+nsSVGEnum::GetBaseValueString(nsAString& aValue, nsSVGElement *aSVGElement)\\n {\\n-  nsSVGEnumMapping *tmp = mMapping;\\n+  nsSVGEnumMapping *tmp = GetMapping(aSVGElement);\\n \\n-  while (tmp->key) {\\n-    if (mValue == tmp->val) {\\n-      (*tmp->key)->ToString(aValue);\\n-      return NS_OK;\\n+  while (tmp && tmp->mKey) {\\n+    if (mBaseVal == tmp->mVal) {\\n+      (*tmp->mKey)->ToString(aValue);\\n+      return;\\n     }\\n     tmp++;\\n   }\\n   NS_ERROR(\\\"unknown enumeration value\\\");\\n-  return NS_ERROR_FAILURE;\\n }\\n \\n-//----------------------------------------------------------------------\\n-// nsISVGEnum methods:\\n-\\n-NS_IMETHODIMP\\n-nsSVGEnum::GetIntegerValue(PRUint16& aValue)\\n+void\\n+nsSVGEnum::SetBaseValue(PRUint16 aValue,\\n+                        nsSVGElement *aSVGElement,\\n+                        PRBool aDoSetAttr)\\n {\\n-  aValue = mValue;\\n-  return NS_OK;\\n+  mAnimVal = mBaseVal = static_cast<PRUint8>(aValue);\\n+  aSVGElement->DidChangeEnum(mAttrEnum, aDoSetAttr);\\n }\\n \\n-NS_IMETHODIMP\\n-nsSVGEnum::SetIntegerValue(PRUint16 aValue)\\n+nsresult\\n+nsSVGEnum::ToDOMAnimatedEnum(nsIDOMSVGAnimatedEnumeration **aResult,\\n+                             nsSVGElement *aSVGElement)\\n {\\n-  WillModify();\\n-  mValue = aValue;\\n-  DidModify();\\n+  *aResult = new DOMAnimatedEnum(this, aSVGElement);\\n+  if (!*aResult)\\n+    return NS_ERROR_OUT_OF_MEMORY;\\n+\\n+  NS_ADDREF(*aResult);\\n   return NS_OK;\\n }\\n-\\n-\\ndiff --git a/content/svg/content/src/nsSVGEnum.h b/content/svg/content/src/nsSVGEnum.h\\nindex ae09883..40bb785 100644\\n--- a/content/svg/content/src/nsSVGEnum.h\\n+++ b/content/svg/content/src/nsSVGEnum.h\\n@@ -14,17 +14,15 @@\\n  *\\n  * The Original Code is the Mozilla SVG project.\\n  *\\n- * The Initial Developer of the Original Code is\\n- * IBM Corporation\\n- * Portions created by the Initial Developer are Copyright (C) 2004\\n+ * The Initial Developer of the Original Code is IBM Corporation.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n  * the Initial Developer. All Rights Reserved.\\n  *\\n  * Contributor(s):\\n- *   Tim Rowley <tor@cs.brown.edu> (original author)\\n  *\\n  * Alternatively, the contents of this file may be used under the terms of\\n- * either of the GNU General Public License Version 2 or later (the \\\"GPL\\\"),\\n- * or the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n  * in which case the provisions of the GPL or the LGPL are applicable instead\\n  * of those above. If you wish to allow use of your version of this file only\\n  * under the terms of either the GPL or the LGPL, and not to allow others to\\n@@ -39,25 +37,67 @@\\n #ifndef __NS_SVGENUM_H__\\n #define __NS_SVGENUM_H__\\n \\n-#include \\\"nsISVGEnum.h\\\"\\n-#include \\\"nsAString.h\\\"\\n-#include \\\"nsIAtom.h\\\"\\n+#include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n+#include \\\"nsSVGElement.h\\\"\\n+#include \\\"nsDOMError.h\\\"\\n+\\n+typedef PRUint8 nsSVGEnumValue;\\n \\n struct nsSVGEnumMapping {\\n-    nsIAtom **key;\\n-    PRUint16 val;\\n+  nsIAtom **mKey;\\n+  nsSVGEnumValue mVal;\\n };\\n \\n-nsresult\\n-NS_NewSVGEnum(nsISVGEnum** result,\\n-              PRUint16 value,\\n-              struct nsSVGEnumMapping *mapping);\\n+class nsSVGEnum\\n+{\\n+public:\\n+  void Init(PRUint8 aAttrEnum, PRUint16 aValue) {\\n+    mAnimVal = mBaseVal = static_cast<PRUint8>(aValue);\\n+    mAttrEnum = aAttrEnum;\\n+  }\\n+\\n+  nsresult SetBaseValueString(const nsAString& aValue,\\n+                              nsSVGElement *aSVGElement,\\n+                              PRBool aDoSetAttr);\\n+  void GetBaseValueString(nsAString& aValue,\\n+                          nsSVGElement *aSVGElement);\\n+\\n+  void SetBaseValue(PRUint16 aValue,\\n+                    nsSVGElement *aSVGElement,\\n+                    PRBool aDoSetAttr);\\n+\\n+  PRUint16 GetBaseValue()\\n+    { return mBaseVal; }\\n+  PRUint16 GetAnimValue()\\n+    { return mAnimVal; }\\n+\\n+  nsresult ToDOMAnimatedEnum(nsIDOMSVGAnimatedEnumeration **aResult,\\n+                             nsSVGElement* aSVGElement);\\n \\n-nsresult\\n-NS_NewSVGEnum(nsISVGEnum** result,\\n-              const nsAString &value,\\n-              struct nsSVGEnumMapping *mapping);\\n+private:\\n+  nsSVGEnumValue mAnimVal;\\n+  nsSVGEnumValue mBaseVal;\\n+  PRUint8 mAttrEnum; // element specified tracking for attribute\\n \\n-#endif //__NS_SVGENUM_H__\\n+  nsSVGEnumMapping *GetMapping(nsSVGElement *aSVGElement);\\n \\n+  struct DOMAnimatedEnum : public nsIDOMSVGAnimatedEnumeration\\n+  {\\n+    NS_DECL_ISUPPORTS\\n+\\n+    DOMAnimatedEnum(nsSVGEnum* aVal, nsSVGElement *aSVGElement)\\n+      : mVal(aVal), mSVGElement(aSVGElement) {}\\n+\\n+    nsSVGEnum *mVal; // kept alive because it belongs to content\\n+    nsRefPtr<nsSVGElement> mSVGElement;\\n+\\n+    NS_IMETHOD GetBaseVal(PRUint16* aResult)\\n+      { *aResult = mVal->GetBaseValue(); return NS_OK; }\\n+    NS_IMETHOD SetBaseVal(PRUint16 aValue)\\n+      { mVal->SetBaseValue(aValue, mSVGElement, PR_TRUE); return NS_OK; }\\n+    NS_IMETHOD GetAnimVal(PRUint16* aResult)\\n+      { *aResult = mVal->GetAnimValue(); return NS_OK; }\\n+  };\\n+};\\n \\n+#endif //__NS_SVGENUM2_H__\\ndiff --git a/content/svg/content/src/nsSVGFilterElement.cpp b/content/svg/content/src/nsSVGFilterElement.cpp\\nindex 0b7c345..25b49a7f 100644\\n--- a/content/svg/content/src/nsSVGFilterElement.cpp\\n+++ b/content/svg/content/src/nsSVGFilterElement.cpp\\n@@ -37,10 +37,8 @@\\n #include \\\"nsGkAtoms.h\\\"\\n #include \\\"nsSVGLength.h\\\"\\n #include \\\"nsCOMPtr.h\\\"\\n-#include \\\"nsSVGAnimatedEnumeration.h\\\"\\n #include \\\"nsSVGAnimatedInteger.h\\\"\\n #include \\\"nsSVGAnimatedString.h\\\"\\n-#include \\\"nsSVGEnum.h\\\"\\n #include \\\"nsSVGFilterElement.h\\\"\\n \\n nsSVGElement::LengthInfo nsSVGFilterElement::sLengthInfo[4] =\\n@@ -51,6 +49,18 @@ nsSVGElement::LengthInfo nsSVGFilterElement::sLengthInfo[4] =\\n   { &nsGkAtoms::height, 120, nsIDOMSVGLength::SVG_LENGTHTYPE_PERCENTAGE, nsSVGUtils::Y },\\n };\\n \\n+nsSVGElement::EnumInfo nsSVGFilterElement::sEnumInfo[2] =\\n+{\\n+  { &nsGkAtoms::filterUnits,\\n+    sSVGUnitTypesMap,\\n+    nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX\\n+  },\\n+  { &nsGkAtoms::primitiveUnits,\\n+    sSVGUnitTypesMap,\\n+    nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(Filter)\\n \\n //----------------------------------------------------------------------\\n@@ -82,39 +92,8 @@ nsSVGFilterElement::Init()\\n   nsresult rv = nsSVGFilterElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  // Define enumeration mappings\\n-  static struct nsSVGEnumMapping gUnitMap[] = {\\n-        {&nsGkAtoms::objectBoundingBox, nsIDOMSVGFilterElement::SVG_FUNITS_OBJECTBOUNDINGBOX},\\n-        {&nsGkAtoms::userSpaceOnUse, nsIDOMSVGFilterElement::SVG_FUNITS_USERSPACEONUSE},\\n-        {nsnull, 0}\\n-  };\\n-\\n   // Create mapped properties:\\n \\n-  // DOM property: filterUnits ,  #IMPLIED attrib: filterUnits\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units),\\n-                       nsIDOMSVGFilterElement::SVG_FUNITS_OBJECTBOUNDINGBOX, gUnitMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mFilterUnits), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::filterUnits, mFilterUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  // DOM property: primitiveUnits ,  #IMPLIED attrib: primitiveUnits\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units),\\n-                       nsIDOMSVGFilterElement::SVG_FUNITS_USERSPACEONUSE, gUnitMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mPrimitiveUnits), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::primitiveUnits, mPrimitiveUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n   // DOM property: filterResX , #IMPLIED attrib: filterRes\\n   {\\n     rv = NS_NewSVGAnimatedInteger(getter_AddRefs(mFilterResX), 0);\\n@@ -178,17 +157,13 @@ NS_IMETHODIMP nsSVGFilterElement::GetHeight(nsIDOMSVGAnimatedLength * *aHeight)\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration filterUnits; */\\n NS_IMETHODIMP nsSVGFilterElement::GetFilterUnits(nsIDOMSVGAnimatedEnumeration * *aUnits)\\n {\\n-  *aUnits = mFilterUnits;\\n-  NS_IF_ADDREF(*aUnits);\\n-  return NS_OK;\\n+  return mEnumAttributes[FILTERUNITS].ToDOMAnimatedEnum(aUnits, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedEnumeration primitiveUnits; */\\n NS_IMETHODIMP nsSVGFilterElement::GetPrimitiveUnits(nsIDOMSVGAnimatedEnumeration * *aUnits)\\n {\\n-  *aUnits = mPrimitiveUnits;\\n-  NS_IF_ADDREF(*aUnits);\\n-  return NS_OK;\\n+  return mEnumAttributes[PRIMITIVEUNITS].ToDOMAnimatedEnum(aUnits, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedEnumeration filterResY; */\\n@@ -289,3 +264,10 @@ nsSVGFilterElement::GetLengthInfo()\\n   return LengthAttributesInfo(mLengthAttributes, sLengthInfo,\\n                               NS_ARRAY_LENGTH(sLengthInfo));\\n }\\n+\\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGFilterElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\ndiff --git a/content/svg/content/src/nsSVGFilterElement.h b/content/svg/content/src/nsSVGFilterElement.h\\nindex ef908b6..bb115ff 100644\\n--- a/content/svg/content/src/nsSVGFilterElement.h\\n+++ b/content/svg/content/src/nsSVGFilterElement.h\\n@@ -40,13 +40,16 @@\\n #include \\\"nsSVGGraphicElement.h\\\"\\n #include \\\"nsIDOMSVGFilterElement.h\\\"\\n #include \\\"nsIDOMSVGURIReference.h\\\"\\n+#include \\\"nsIDOMSVGUnitTypes.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n+#include \\\"nsSVGEnum.h\\\"\\n \\n typedef nsSVGGraphicElement nsSVGFilterElementBase;\\n \\n class nsSVGFilterElement : public nsSVGFilterElementBase,\\n                            public nsIDOMSVGFilterElement,\\n-                           public nsIDOMSVGURIReference\\n+                           public nsIDOMSVGURIReference,\\n+                           public nsIDOMSVGUnitTypes\\n {\\n   friend class nsSVGFilterFrame;\\n \\n@@ -83,13 +86,16 @@ public:\\n protected:\\n \\n   virtual LengthAttributesInfo GetLengthInfo();\\n-  \\n+  virtual EnumAttributesInfo GetEnumInfo();\\n+\\n   enum { X, Y, WIDTH, HEIGHT };\\n   nsSVGLength2 mLengthAttributes[4];\\n   static LengthInfo sLengthInfo[4];\\n \\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mFilterUnits;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mPrimitiveUnits;\\n+  enum { FILTERUNITS, PRIMITIVEUNITS };\\n+  nsSVGEnum mEnumAttributes[2];\\n+  static EnumInfo sEnumInfo[2];\\n+\\n   nsCOMPtr<nsIDOMSVGAnimatedInteger> mFilterResX;\\n   nsCOMPtr<nsIDOMSVGAnimatedInteger> mFilterResY;\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mHref;\\ndiff --git a/content/svg/content/src/nsSVGFilters.cpp b/content/svg/content/src/nsSVGFilters.cpp\\nindex fb4662d..4815bf7 100644\\n--- a/content/svg/content/src/nsSVGFilters.cpp\\n+++ b/content/svg/content/src/nsSVGFilters.cpp\\n@@ -48,7 +48,6 @@\\n #include \\\"nsWeakReference.h\\\"\\n #include \\\"nsIDOMSVGFilterElement.h\\\"\\n #include \\\"nsSVGEnum.h\\\"\\n-#include \\\"nsSVGAnimatedEnumeration.h\\\"\\n #include \\\"nsSVGNumberList.h\\\"\\n #include \\\"nsSVGAnimatedNumberList.h\\\"\\n #include \\\"nsISVGValueUtils.h\\\"\\n@@ -931,9 +930,32 @@ public:\\n \\n protected:\\n \\n+  virtual EnumAttributesInfo GetEnumInfo();\\n+\\n+  enum { MODE };\\n+  nsSVGEnum mEnumAttributes[1];\\n+  static nsSVGEnumMapping sModeMap[];\\n+  static EnumInfo sEnumInfo[1];\\n+\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mIn1;\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mIn2;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mMode;\\n+};\\n+\\n+nsSVGEnumMapping nsSVGFEBlendElement::sModeMap[] = {\\n+  {&nsGkAtoms::normal, nsSVGFEBlendElement::SVG_MODE_NORMAL},\\n+  {&nsGkAtoms::multiply, nsSVGFEBlendElement::SVG_MODE_MULTIPLY},\\n+  {&nsGkAtoms::screen, nsSVGFEBlendElement::SVG_MODE_SCREEN},\\n+  {&nsGkAtoms::darken, nsSVGFEBlendElement::SVG_MODE_DARKEN},\\n+  {&nsGkAtoms::lighten, nsSVGFEBlendElement::SVG_MODE_LIGHTEN},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGFEBlendElement::sEnumInfo[1] =\\n+{\\n+  { &nsGkAtoms::mode,\\n+    sModeMap,\\n+    nsSVGFEBlendElement::SVG_MODE_NORMAL\\n+  }\\n };\\n \\n NS_IMPL_NS_NEW_SVG_ELEMENT(FEBlend)\\n@@ -968,28 +990,7 @@ nsSVGFEBlendElement::Init()\\n   nsresult rv = nsSVGFEBlendElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  static struct nsSVGEnumMapping gModeTypes[] = {\\n-    {&nsGkAtoms::normal, nsSVGFEBlendElement::SVG_MODE_NORMAL},\\n-    {&nsGkAtoms::multiply, nsSVGFEBlendElement::SVG_MODE_MULTIPLY},\\n-    {&nsGkAtoms::screen, nsSVGFEBlendElement::SVG_MODE_SCREEN},\\n-    {&nsGkAtoms::darken, nsSVGFEBlendElement::SVG_MODE_DARKEN},\\n-    {&nsGkAtoms::lighten, nsSVGFEBlendElement::SVG_MODE_LIGHTEN},\\n-    {nsnull, 0}\\n-  };\\n-\\n   // Create mapped properties:\\n-  // DOM property: mode, #IMPLIED attrib: mode\\n-  {\\n-    nsCOMPtr<nsISVGEnum> modes;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(modes),\\n-                       nsSVGFEBlendElement::SVG_MODE_NORMAL,\\n-                       gModeTypes);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mMode), modes);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::mode, mMode);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n \\n   // DOM property: in1 , #IMPLIED attrib: in\\n   {\\n@@ -1038,9 +1039,7 @@ NS_IMETHODIMP nsSVGFEBlendElement::GetIn2(nsIDOMSVGAnimatedString * *aIn)\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration mode; */\\n NS_IMETHODIMP nsSVGFEBlendElement::GetMode(nsIDOMSVGAnimatedEnumeration * *aMode)\\n {\\n-  *aMode = mMode;\\n-  NS_IF_ADDREF(*aMode);\\n-  return NS_OK;\\n+  return mEnumAttributes[MODE].ToDOMAnimatedEnum(aMode, this);\\n }\\n \\n NS_IMETHODIMP\\n@@ -1070,8 +1069,7 @@ nsSVGFEBlendElement::Filter(nsSVGFilterInstance *instance)\\n   NS_ENSURE_SUCCESS(rv, rv);\\n   rect = fr.GetFilterSubregion();\\n \\n-  PRUint16 mode;\\n-  mMode->GetAnimVal(&mode);\\n+  PRUint16 mode = mEnumAttributes[MODE].GetAnimValue();\\n \\n   for (PRInt32 x = rect.x; x < rect.XMost(); x++) {\\n     for (PRInt32 y = rect.y; y < rect.YMost(); y++) {\\n@@ -1122,6 +1120,13 @@ nsSVGFEBlendElement::GetRequirements(PRUint32 *aRequirements)\\n   return NS_OK;\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGFEBlendElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //---------------------Color Matrix------------------------\\n \\n typedef nsSVGFE nsSVGFEColorMatrixElementBase;\\n@@ -1158,13 +1163,33 @@ public:\\n   virtual nsresult Clone(nsINodeInfo *aNodeInfo, nsINode **aResult) const;\\n \\n protected:\\n-  //virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n+\\n+  enum { TYPE };\\n+  nsSVGEnum mEnumAttributes[1];\\n+  static nsSVGEnumMapping sTypeMap[];\\n+  static EnumInfo sEnumInfo[1];\\n \\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mType;\\n   nsCOMPtr<nsIDOMSVGAnimatedNumberList>  mValues;\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mIn1;\\n };\\n \\n+nsSVGEnumMapping nsSVGFEColorMatrixElement::sTypeMap[] = {\\n+  {&nsGkAtoms::matrix, nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_MATRIX},\\n+  {&nsGkAtoms::saturate, nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_SATURATE},\\n+  {&nsGkAtoms::hueRotate, nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_HUE_ROTATE},\\n+  {&nsGkAtoms::luminanceToAlpha, nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_LUMINANCE_TO_ALPHA},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGFEColorMatrixElement::sEnumInfo[1] =\\n+{\\n+  { &nsGkAtoms::type,\\n+    sTypeMap,\\n+    nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_MATRIX\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(FEColorMatrix)\\n \\n //----------------------------------------------------------------------\\n@@ -1197,27 +1222,7 @@ nsSVGFEColorMatrixElement::Init()\\n   nsresult rv = nsSVGFEColorMatrixElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  static struct nsSVGEnumMapping gTypes[] = {\\n-    {&nsGkAtoms::matrix, nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_MATRIX},\\n-    {&nsGkAtoms::saturate, nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_SATURATE},\\n-    {&nsGkAtoms::hueRotate, nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_HUE_ROTATE},\\n-    {&nsGkAtoms::luminanceToAlpha, nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_LUMINANCE_TO_ALPHA},\\n-    {nsnull, 0}\\n-  };\\n-\\n   // Create mapped properties:\\n-  // DOM property: type, #IMPLIED attrib: type\\n-  {\\n-    nsCOMPtr<nsISVGEnum> types;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(types),\\n-                       nsSVGFEColorMatrixElement::SVG_FECOLORMATRIX_TYPE_MATRIX,\\n-                       gTypes);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mType), types);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::type, mType);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n \\n   // DOM property: values, #IMPLIED attrib: values\\n   {\\n@@ -1262,9 +1267,7 @@ NS_IMETHODIMP nsSVGFEColorMatrixElement::GetIn1(nsIDOMSVGAnimatedString * *aIn)\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration type; */\\n NS_IMETHODIMP nsSVGFEColorMatrixElement::GetType(nsIDOMSVGAnimatedEnumeration * *aType)\\n {\\n-  *aType = mType;\\n-  NS_IF_ADDREF(*aType);\\n-  return NS_OK;\\n+  return mEnumAttributes[TYPE].ToDOMAnimatedEnum(aType, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedNumberList values; */\\n@@ -1282,6 +1285,13 @@ nsSVGFEColorMatrixElement::GetRequirements(PRUint32 *aRequirements)\\n   return NS_OK;\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGFEColorMatrixElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //----------------------------------------------------------------------\\n // nsSVGElement methods\\n \\n@@ -1298,8 +1308,7 @@ nsSVGFEColorMatrixElement::Filter(nsSVGFilterInstance *instance)\\n   rv = fr.AcquireTargetImage(mResult, &targetData);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  PRUint16 type;\\n-  mType->GetAnimVal(&type);\\n+  PRUint16 type = mEnumAttributes[TYPE].GetAnimValue();\\n \\n   nsCOMPtr<nsIDOMSVGNumberList> list;\\n   mValues->GetAnimVal(getter_AddRefs(list));\\n@@ -1482,14 +1491,19 @@ public:\\n \\n protected:\\n   virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n \\n   enum { K1, K2, K3, K4 };\\n   nsSVGNumber2 mNumberAttributes[4];\\n   static NumberInfo sNumberInfo[4];\\n \\n+  enum { OPERATOR };\\n+  nsSVGEnum mEnumAttributes[1];\\n+  static nsSVGEnumMapping sOperatorMap[];\\n+  static EnumInfo sEnumInfo[1];\\n+\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mIn1;\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mIn2;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mOperator;\\n };\\n \\n nsSVGElement::NumberInfo nsSVGFECompositeElement::sNumberInfo[4] =\\n@@ -1500,6 +1514,24 @@ nsSVGElement::NumberInfo nsSVGFECompositeElement::sNumberInfo[4] =\\n   { &nsGkAtoms::k4, 0 }\\n };\\n \\n+nsSVGEnumMapping nsSVGFECompositeElement::sOperatorMap[] = {\\n+  {&nsGkAtoms::over, nsSVGFECompositeElement::SVG_OPERATOR_OVER},\\n+  {&nsGkAtoms::in, nsSVGFECompositeElement::SVG_OPERATOR_IN},\\n+  {&nsGkAtoms::out, nsSVGFECompositeElement::SVG_OPERATOR_OUT},\\n+  {&nsGkAtoms::atop, nsSVGFECompositeElement::SVG_OPERATOR_ATOP},\\n+  {&nsGkAtoms::xor_, nsSVGFECompositeElement::SVG_OPERATOR_XOR},\\n+  {&nsGkAtoms::arithmetic, nsSVGFECompositeElement::SVG_OPERATOR_ARITHMETIC},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGFECompositeElement::sEnumInfo[1] =\\n+{\\n+  { &nsGkAtoms::_operator,\\n+    sOperatorMap,\\n+    nsIDOMSVGFECompositeElement::SVG_OPERATOR_OVER\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(FEComposite)\\n \\n //----------------------------------------------------------------------\\n@@ -1532,30 +1564,8 @@ nsSVGFECompositeElement::Init()\\n   nsresult rv = nsSVGFECompositeElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  static struct nsSVGEnumMapping gOperatorTypes[] = {\\n-    {&nsGkAtoms::over, nsSVGFECompositeElement::SVG_OPERATOR_OVER},\\n-    {&nsGkAtoms::in, nsSVGFECompositeElement::SVG_OPERATOR_IN},\\n-    {&nsGkAtoms::out, nsSVGFECompositeElement::SVG_OPERATOR_OUT},\\n-    {&nsGkAtoms::atop, nsSVGFECompositeElement::SVG_OPERATOR_ATOP},\\n-    {&nsGkAtoms::xor_, nsSVGFECompositeElement::SVG_OPERATOR_XOR},\\n-    {&nsGkAtoms::arithmetic, nsSVGFECompositeElement::SVG_OPERATOR_ARITHMETIC},\\n-    {nsnull, 0}\\n-  };\\n-  \\n   // Create mapped properties:\\n-  // DOM property: operator, #IMPLIED attrib: operator\\n-  {\\n-    nsCOMPtr<nsISVGEnum> operators;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(operators),\\n-                       nsIDOMSVGFECompositeElement::SVG_OPERATOR_OVER,\\n-                       gOperatorTypes);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mOperator), operators);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::_operator, mOperator);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-    \\n+\\n   // DOM property: in1 , #IMPLIED attrib: in\\n   {\\n     rv = NS_NewSVGAnimatedString(getter_AddRefs(mIn1));\\n@@ -1603,9 +1613,7 @@ NS_IMETHODIMP nsSVGFECompositeElement::GetIn2(nsIDOMSVGAnimatedString * *aIn)\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration operator; */\\n NS_IMETHODIMP nsSVGFECompositeElement::GetOperator(nsIDOMSVGAnimatedEnumeration * *aOperator)\\n {\\n-  *aOperator = mOperator;\\n-  NS_IF_ADDREF(*aOperator);\\n-  return NS_OK;\\n+  return mEnumAttributes[OPERATOR].ToDOMAnimatedEnum(aOperator, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedNumber K1; */\\n@@ -1658,8 +1666,7 @@ nsSVGFECompositeElement::Filter(nsSVGFilterInstance *instance)\\n                              getter_AddRefs(targetSurface));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n-  PRUint16 op;\\n-  mOperator->GetAnimVal(&op);\\n+  PRUint16 op = mEnumAttributes[OPERATOR].GetAnimValue();\\n \\n   // Cairo does not support arithmetic operator\\n   if (op == nsSVGFECompositeElement::SVG_OPERATOR_ARITHMETIC) {\\n@@ -1738,6 +1745,13 @@ nsSVGFECompositeElement::GetRequirements(PRUint32 *aRequirements)\\n   return NS_OK;\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGFECompositeElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //----------------------------------------------------------------------\\n // nsSVGElement methods\\n \\n@@ -1931,15 +1945,19 @@ public:\\n \\n protected:\\n   virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n \\n   // nsIDOMSVGComponentTransferFunctionElement properties:\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mType;\\n   nsCOMPtr<nsIDOMSVGAnimatedNumberList>  mTableValues;\\n \\n   enum { SLOPE, INTERCEPT, AMPLITUDE, EXPONENT, OFFSET };\\n   nsSVGNumber2 mNumberAttributes[5];\\n   static NumberInfo sNumberInfo[5];\\n \\n+  enum { TYPE };\\n+  nsSVGEnum mEnumAttributes[1];\\n+  static nsSVGEnumMapping sTypeMap[];\\n+  static EnumInfo sEnumInfo[1];\\n };\\n \\n nsSVGElement::NumberInfo nsSVGComponentTransferFunctionElement::sNumberInfo[5] =\\n@@ -1951,6 +1969,28 @@ nsSVGElement::NumberInfo nsSVGComponentTransferFunctionElement::sNumberInfo[5] =\\n   { &nsGkAtoms::offset,    0 }\\n };\\n \\n+nsSVGEnumMapping nsSVGComponentTransferFunctionElement::sTypeMap[] = {\\n+  {&nsGkAtoms::identity,\\n+   nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY},\\n+  {&nsGkAtoms::table,\\n+   nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_TABLE},\\n+  {&nsGkAtoms::discrete,\\n+   nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE},\\n+  {&nsGkAtoms::linear,\\n+   nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_LINEAR},\\n+  {&nsGkAtoms::gamma,\\n+   nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_GAMMA},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGComponentTransferFunctionElement::sEnumInfo[1] =\\n+{\\n+  { &nsGkAtoms::type,\\n+    sTypeMap,\\n+    nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY\\n+  }\\n+};\\n+\\n //----------------------------------------------------------------------\\n // nsISupports methods\\n \\n@@ -1974,36 +2014,8 @@ nsSVGComponentTransferFunctionElement::Init()\\n   nsresult rv = nsSVGComponentTransferFunctionElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  // enumeration mappings\\n-  static struct nsSVGEnumMapping gComponentTransferTypes[] = {\\n-    {&nsGkAtoms::identity,\\n-     nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY},\\n-    {&nsGkAtoms::table,\\n-     nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_TABLE},\\n-    {&nsGkAtoms::discrete,\\n-     nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE},\\n-    {&nsGkAtoms::linear,\\n-     nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_LINEAR},\\n-    {&nsGkAtoms::gamma,\\n-     nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_GAMMA},\\n-    {nsnull, 0}\\n-  };\\n-\\n   // Create mapped properties:\\n \\n-  // DOM property: type, #IMPLIED attrib: type\\n-  {\\n-    nsCOMPtr<nsISVGEnum> types;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(types),\\n-                       nsIDOMSVGComponentTransferFunctionElement::SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY,\\n-                       gComponentTransferTypes);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mType), types);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::type, mType);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n   // DOM property: tableValues, #IMPLIED attrib: tableValues\\n   {\\n     nsCOMPtr<nsIDOMSVGNumberList> values;\\n@@ -2018,15 +2030,20 @@ nsSVGComponentTransferFunctionElement::Init()\\n   return NS_OK;\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGComponentTransferFunctionElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //----------------------------------------------------------------------\\n // nsIDOMSVGComponentTransferFunctionElement methods\\n \\n /* readonly attribute nsIDOMSVGAnimatedEnumeration type; */\\n NS_IMETHODIMP nsSVGComponentTransferFunctionElement::GetType(nsIDOMSVGAnimatedEnumeration * *aType)\\n {\\n-  *aType = mType;\\n-  NS_IF_ADDREF(*aType);\\n-  return NS_OK;\\n+  return mEnumAttributes[TYPE].ToDOMAnimatedEnum(aType, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedNumberList tableValues; */\\n@@ -2070,8 +2087,7 @@ NS_IMETHODIMP nsSVGComponentTransferFunctionElement::GetOffset(nsIDOMSVGAnimated\\n NS_IMETHODIMP\\n nsSVGComponentTransferFunctionElement::GenerateLookupTable(PRUint8 *aTable)\\n {\\n-  PRUint16 type;\\n-  mType->GetAnimVal(&type);\\n+  PRUint16 type = mEnumAttributes[TYPE].GetAnimValue();\\n \\n   float slope, intercept, amplitude, exponent, offset;\\n   GetAnimatedNumberValues(&slope, &intercept, &amplitude, \\n@@ -3080,14 +3096,19 @@ public:\\n \\n protected:\\n   virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n \\n   enum { BASE_FREQ_X, BASE_FREQ_Y, SEED}; // floating point seed?!\\n   nsSVGNumber2 mNumberAttributes[3];\\n   static NumberInfo sNumberInfo[3];\\n \\n+  enum { STITCHTILES, TYPE };\\n+  nsSVGEnum mEnumAttributes[2];\\n+  static nsSVGEnumMapping sStitchTilesMap[];\\n+  static nsSVGEnumMapping sTypeMap[];\\n+  static EnumInfo sEnumInfo[2];\\n+\\n   nsCOMPtr<nsIDOMSVGAnimatedInteger> mNumOctaves;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mStitchTiles;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mType;\\n \\n private:\\n \\n@@ -3158,6 +3179,34 @@ nsSVGElement::NumberInfo nsSVGFETurbulenceElement::sNumberInfo[3] =\\n   { &nsGkAtoms::seed, 0 }\\n };\\n \\n+nsSVGEnumMapping nsSVGFETurbulenceElement::sTypeMap[] = {\\n+  {&nsGkAtoms::fractalNoise,\\n+   nsIDOMSVGFETurbulenceElement::SVG_TURBULENCE_TYPE_FRACTALNOISE},\\n+  {&nsGkAtoms::turbulence,\\n+   nsIDOMSVGFETurbulenceElement::SVG_TURBULENCE_TYPE_TURBULENCE},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGEnumMapping nsSVGFETurbulenceElement::sStitchTilesMap[] = {\\n+  {&nsGkAtoms::stitch,\\n+   nsIDOMSVGFETurbulenceElement::SVG_STITCHTYPE_STITCH},\\n+  {&nsGkAtoms::noStitch,\\n+   nsIDOMSVGFETurbulenceElement::SVG_STITCHTYPE_NOSTITCH},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGFETurbulenceElement::sEnumInfo[2] =\\n+{\\n+  { &nsGkAtoms::type,\\n+    sTypeMap,\\n+    nsIDOMSVGFETurbulenceElement::SVG_TURBULENCE_TYPE_TURBULENCE\\n+  },\\n+  { &nsGkAtoms::stitchTiles,\\n+    sStitchTilesMap,\\n+    nsIDOMSVGFETurbulenceElement::SVG_STITCHTYPE_NOSTITCH\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(FETurbulence)\\n \\n //----------------------------------------------------------------------\\n@@ -3190,51 +3239,8 @@ nsSVGFETurbulenceElement::Init()\\n   nsresult rv = nsSVGFETurbulenceElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  // enumeration mappings\\n-  static struct nsSVGEnumMapping gTurbulenceTypes[] = {\\n-    {&nsGkAtoms::fractalNoise,\\n-     nsIDOMSVGFETurbulenceElement::SVG_TURBULENCE_TYPE_FRACTALNOISE},\\n-    {&nsGkAtoms::turbulence,\\n-     nsIDOMSVGFETurbulenceElement::SVG_TURBULENCE_TYPE_TURBULENCE},\\n-    {nsnull, 0}\\n-  };\\n-\\n-  static struct nsSVGEnumMapping gStitchTypes[] = {\\n-    {&nsGkAtoms::stitch,\\n-     nsIDOMSVGFETurbulenceElement::SVG_STITCHTYPE_STITCH},\\n-    {&nsGkAtoms::noStitch,\\n-     nsIDOMSVGFETurbulenceElement::SVG_STITCHTYPE_NOSTITCH},\\n-    {nsnull, 0}\\n-  };\\n-\\n   // Create mapped properties:\\n \\n-  // DOM property: stitchTiles, #IMPLIED attrib: stitchTiles\\n-  {\\n-    nsCOMPtr<nsISVGEnum> stitch;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(stitch),\\n-                       nsIDOMSVGFETurbulenceElement::SVG_STITCHTYPE_NOSTITCH,\\n-                       gStitchTypes);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mStitchTiles), stitch);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::stitchTiles, mStitchTiles);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  // DOM property: type, #IMPLIED attrib: type\\n-  {\\n-    nsCOMPtr<nsISVGEnum> types;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(types),\\n-                       nsIDOMSVGFETurbulenceElement::SVG_TURBULENCE_TYPE_TURBULENCE,\\n-                       gTurbulenceTypes);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mType), types);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::type, mType);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n   // DOM property: numOctaves ,  #IMPLIED attrib: numOctaves\\n   {\\n     rv = NS_NewSVGAnimatedInteger(getter_AddRefs(mNumOctaves), 1);\\n@@ -3246,6 +3252,13 @@ nsSVGFETurbulenceElement::Init()\\n   return rv;\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGFETurbulenceElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //----------------------------------------------------------------------\\n // nsIDOMNode methods\\n \\n@@ -3283,17 +3296,13 @@ NS_IMETHODIMP nsSVGFETurbulenceElement::GetSeed(nsIDOMSVGAnimatedNumber * *aSeed\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration stitchTiles; */\\n NS_IMETHODIMP nsSVGFETurbulenceElement::GetStitchTiles(nsIDOMSVGAnimatedEnumeration * *aStitch)\\n {\\n-  *aStitch = mStitchTiles;\\n-  NS_IF_ADDREF(*aStitch);\\n-  return NS_OK;\\n+  return mEnumAttributes[STITCHTILES].ToDOMAnimatedEnum(aStitch, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedEnumeration type; */\\n NS_IMETHODIMP nsSVGFETurbulenceElement::GetType(nsIDOMSVGAnimatedEnumeration * *aType)\\n {\\n-  *aType = mType;\\n-  NS_IF_ADDREF(*aType);\\n-  return NS_OK;\\n+  return mEnumAttributes[TYPE].ToDOMAnimatedEnum(aType, this);\\n }\\n \\n PRBool\\n@@ -3338,12 +3347,11 @@ nsSVGFETurbulenceElement::Filter(nsSVGFilterInstance *instance)\\n \\n   float fX, fY, seed;\\n   PRInt32 octaves;\\n-  PRUint16 type, stitch;\\n+  PRUint16 type = mEnumAttributes[TYPE].GetAnimValue();\\n+  PRUint16 stitch = mEnumAttributes[STITCHTILES].GetAnimValue();\\n \\n   GetAnimatedNumberValues(&fX, &fY, &seed, nsnull);\\n   mNumOctaves->GetAnimVal(&octaves);\\n-  mStitchTiles->GetAnimVal(&stitch);\\n-  mType->GetAnimVal(&type);\\n \\n   Init((PRInt32)seed);\\n \\n@@ -3621,13 +3629,18 @@ public:\\n \\n protected:\\n   virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n \\n   enum { RADIUS_X, RADIUS_Y };\\n   nsSVGNumber2 mNumberAttributes[2];\\n   static NumberInfo sNumberInfo[2];\\n \\n+  enum { OPERATOR };\\n+  nsSVGEnum mEnumAttributes[1];\\n+  static nsSVGEnumMapping sOperatorMap[];\\n+  static EnumInfo sEnumInfo[1];\\n+\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mIn1;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mOperator;\\n };\\n \\n nsSVGElement::NumberInfo nsSVGFEMorphologyElement::sNumberInfo[2] =\\n@@ -3636,6 +3649,20 @@ nsSVGElement::NumberInfo nsSVGFEMorphologyElement::sNumberInfo[2] =\\n   { &nsGkAtoms::radius, 0 }\\n };\\n \\n+nsSVGEnumMapping nsSVGFEMorphologyElement::sOperatorMap[] = {\\n+  {&nsGkAtoms::erode, nsSVGFEMorphologyElement::SVG_OPERATOR_ERODE},\\n+  {&nsGkAtoms::dilate, nsSVGFEMorphologyElement::SVG_OPERATOR_DILATE},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGFEMorphologyElement::sEnumInfo[1] =\\n+{\\n+  { &nsGkAtoms::_operator,\\n+    sOperatorMap,\\n+    nsSVGFEMorphologyElement::SVG_OPERATOR_ERODE\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(FEMorphology)\\n \\n //----------------------------------------------------------------------\\n@@ -3668,25 +3695,7 @@ nsSVGFEMorphologyElement::Init()\\n   nsresult rv = nsSVGFEMorphologyElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  static struct nsSVGEnumMapping gOperatorTypes[] = {\\n-    {&nsGkAtoms::erode, nsSVGFEMorphologyElement::SVG_OPERATOR_ERODE},\\n-    {&nsGkAtoms::dilate, nsSVGFEMorphologyElement::SVG_OPERATOR_DILATE},\\n-    {nsnull, 0}\\n-  };\\n-\\n   // Create mapped properties:\\n-  // DOM property: operator, #IMPLIED attrib: operator\\n-  {\\n-    nsCOMPtr<nsISVGEnum> operators;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(operators),\\n-                       nsSVGFEMorphologyElement::SVG_OPERATOR_ERODE,\\n-                       gOperatorTypes);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mOperator), operators);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::_operator, mOperator);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n \\n   // DOM property: in1 , #IMPLIED attrib: in\\n   {\\n@@ -3720,9 +3729,7 @@ NS_IMETHODIMP nsSVGFEMorphologyElement::GetIn1(nsIDOMSVGAnimatedString * *aIn)\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration operator; */\\n NS_IMETHODIMP nsSVGFEMorphologyElement::GetOperator(nsIDOMSVGAnimatedEnumeration * *aOperator)\\n {\\n-  *aOperator = mOperator;\\n-  NS_IF_ADDREF(*aOperator);\\n-  return NS_OK;\\n+  return mEnumAttributes[OPERATOR].ToDOMAnimatedEnum(aOperator, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedNumber radiusX; */\\n@@ -3779,6 +3786,13 @@ nsSVGFEMorphologyElement::GetNumberInfo()\\n                               NS_ARRAY_LENGTH(sNumberInfo));\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGFEMorphologyElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n NS_IMETHODIMP\\n nsSVGFEMorphologyElement::Filter(nsSVGFilterInstance *instance)\\n {\\n@@ -3810,8 +3824,7 @@ nsSVGFEMorphologyElement::Filter(nsSVGFilterInstance *instance)\\n   PRInt32 stride = fr.GetDataStride();\\n   PRUint32 xExt[4], yExt[4];  // X, Y indices of RGBA extrema\\n   PRUint8 extrema[4];         // RGBA magnitude of extrema\\n-  PRUint16 op;\\n-  mOperator->GetAnimVal(&op);\\n+  PRUint16 op = mEnumAttributes[OPERATOR].GetAnimValue();\\n \\n   if (rx == 0 && ry == 0) {\\n     fr.CopySourceImage();\\n@@ -3918,17 +3931,22 @@ public:\\n \\n protected:\\n   virtual NumberAttributesInfo GetNumberInfo();\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n \\n   enum { DIVISOR, BIAS, KERNEL_UNIT_LENGTH_X, KERNEL_UNIT_LENGTH_Y };\\n   nsSVGNumber2 mNumberAttributes[4];\\n   static NumberInfo sNumberInfo[4];\\n \\n+  enum { EDGEMODE };\\n+  nsSVGEnum mEnumAttributes[1];\\n+  static nsSVGEnumMapping sEdgeModeMap[];\\n+  static EnumInfo sEnumInfo[1];\\n+\\n   nsCOMPtr<nsIDOMSVGAnimatedInteger> mOrderX;\\n   nsCOMPtr<nsIDOMSVGAnimatedInteger> mOrderY;\\n   nsCOMPtr<nsIDOMSVGAnimatedInteger> mTargetX;\\n   nsCOMPtr<nsIDOMSVGAnimatedInteger> mTargetY;\\n   nsCOMPtr<nsIDOMSVGAnimatedNumberList>  mKernelMatrix;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mEdgeMode;\\n   nsCOMPtr<nsIDOMSVGAnimatedBoolean> mPreserveAlpha;\\n \\n   nsCOMPtr<nsIDOMSVGAnimatedString> mIn1;\\n@@ -3942,6 +3960,21 @@ nsSVGElement::NumberInfo nsSVGFEConvolveMatrixElement::sNumberInfo[4] =\\n   { &nsGkAtoms::kernelUnitLength, 0 }\\n };\\n \\n+nsSVGEnumMapping nsSVGFEConvolveMatrixElement::sEdgeModeMap[] = {\\n+  {&nsGkAtoms::duplicate, nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_DUPLICATE},\\n+  {&nsGkAtoms::wrap, nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_WRAP},\\n+  {&nsGkAtoms::none, nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_NONE},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGFEConvolveMatrixElement::sEnumInfo[1] =\\n+{\\n+  { &nsGkAtoms::edgeMode,\\n+    sEdgeModeMap,\\n+    nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_DUPLICATE\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(FEConvolveMatrix)\\n \\n //----------------------------------------------------------------------\\n@@ -3974,26 +4007,7 @@ nsSVGFEConvolveMatrixElement::Init()\\n   nsresult rv = nsSVGFEConvolveMatrixElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  static struct nsSVGEnumMapping gEdgeModes[] = {\\n-    {&nsGkAtoms::duplicate, nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_DUPLICATE},\\n-    {&nsGkAtoms::wrap, nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_WRAP},\\n-    {&nsGkAtoms::none, nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_NONE},\\n-    {nsnull, 0}\\n-  };\\n-\\n   // Create mapped properties:\\n-  // DOM property: edgeMode, #IMPLIED attrib: edgeMode\\n-  {\\n-    nsCOMPtr<nsISVGEnum> edgeMode;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(edgeMode),\\n-                       nsSVGFEConvolveMatrixElement::SVG_EDGEMODE_DUPLICATE,\\n-                       gEdgeModes);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mEdgeMode), edgeMode);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::edgeMode, mEdgeMode);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n \\n   // DOM property: kernelMarix, #IMPLIED attrib: kernelMatrix\\n   {\\n@@ -4100,9 +4114,7 @@ NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetTargetY(nsIDOMSVGAnimatedInteger\\n \\n NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetEdgeMode(nsIDOMSVGAnimatedEnumeration * *aEdgeMode)\\n {\\n-  *aEdgeMode = mEdgeMode;\\n-  NS_IF_ADDREF(*aEdgeMode);\\n-  return NS_OK;\\n+  return mEnumAttributes[EDGEMODE].ToDOMAnimatedEnum(aEdgeMode, this);\\n }\\n \\n NS_IMETHODIMP nsSVGFEConvolveMatrixElement::GetPreserveAlpha(nsIDOMSVGAnimatedBoolean * *aPreserveAlpha)\\n@@ -4353,8 +4365,7 @@ nsSVGFEConvolveMatrixElement::Filter(nsSVGFilterInstance *instance)\\n   }\\n #endif\\n \\n-  PRUint16 edgeMode;\\n-  mEdgeMode->GetAnimVal(&edgeMode);\\n+  PRUint16 edgeMode = mEnumAttributes[EDGEMODE].GetAnimValue();\\n \\n   float bias = 0;\\n   if (HasAttr(kNameSpaceID_None, nsGkAtoms::bias)) {\\n@@ -4395,6 +4406,13 @@ nsSVGFEConvolveMatrixElement::GetNumberInfo()\\n                               NS_ARRAY_LENGTH(sNumberInfo));\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGFEConvolveMatrixElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //---------------------DistantLight------------------------\\n \\n typedef nsSVGElement nsSVGFEDistantLightElementBase;\\ndiff --git a/content/svg/content/src/nsSVGGradientElement.cpp b/content/svg/content/src/nsSVGGradientElement.cpp\\nindex 1d63da3..4a99ab6 100644\\n--- a/content/svg/content/src/nsSVGGradientElement.cpp\\n+++ b/content/svg/content/src/nsSVGGradientElement.cpp\\n@@ -38,8 +38,6 @@\\n \\n #include \\\"nsSVGTransformList.h\\\"\\n #include \\\"nsSVGAnimatedTransformList.h\\\"\\n-#include \\\"nsSVGEnum.h\\\"\\n-#include \\\"nsSVGAnimatedEnumeration.h\\\"\\n #include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n #include \\\"nsIDOMSVGURIReference.h\\\"\\n #include \\\"nsIDOMSVGGradientElement.h\\\"\\n@@ -51,6 +49,25 @@\\n \\n //--------------------- Gradients------------------------\\n \\n+nsSVGEnumMapping nsSVGGradientElement::sSpreadMethodMap[] = {\\n+  {&nsGkAtoms::pad, nsIDOMSVGGradientElement::SVG_SPREADMETHOD_PAD},\\n+  {&nsGkAtoms::reflect, nsIDOMSVGGradientElement::SVG_SPREADMETHOD_REFLECT},\\n+  {&nsGkAtoms::repeat, nsIDOMSVGGradientElement::SVG_SPREADMETHOD_REPEAT},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGGradientElement::sEnumInfo[2] =\\n+{\\n+  { &nsGkAtoms::gradientUnits,\\n+    sSVGUnitTypesMap,\\n+    nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX\\n+  },\\n+  { &nsGkAtoms::spreadMethod,\\n+    sSpreadMethodMap,\\n+    nsIDOMSVGGradientElement::SVG_SPREADMETHOD_PAD\\n+  }\\n+};\\n+\\n //----------------------------------------------------------------------\\n // nsISupports methods\\n \\n@@ -59,6 +76,7 @@ NS_IMPL_RELEASE_INHERITED(nsSVGGradientElement,nsSVGGradientElementBase)\\n \\n NS_INTERFACE_MAP_BEGIN(nsSVGGradientElement)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMSVGURIReference)\\n+  NS_INTERFACE_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n NS_INTERFACE_MAP_END_INHERITING(nsSVGGradientElementBase)\\n \\n //----------------------------------------------------------------------\\n@@ -75,34 +93,8 @@ nsSVGGradientElement::Init()\\n   nsresult rv = nsSVGGradientElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  // Define enumeration mappings\\n-  static struct nsSVGEnumMapping gUnitMap[] = {\\n-        {&nsGkAtoms::objectBoundingBox, nsIDOMSVGGradientElement::SVG_GRUNITS_OBJECTBOUNDINGBOX},\\n-        {&nsGkAtoms::userSpaceOnUse, nsIDOMSVGGradientElement::SVG_GRUNITS_USERSPACEONUSE},\\n-        {nsnull, 0}\\n-  };\\n-\\n-  static struct nsSVGEnumMapping gSpreadMap[] = {\\n-        {&nsGkAtoms::pad, nsIDOMSVGGradientElement::SVG_SPREADMETHOD_PAD},\\n-        {&nsGkAtoms::reflect, nsIDOMSVGGradientElement::SVG_SPREADMETHOD_REFLECT},\\n-        {&nsGkAtoms::repeat, nsIDOMSVGGradientElement::SVG_SPREADMETHOD_REPEAT},\\n-        {nsnull, 0}\\n-  };\\n-\\n   // Create mapped attributes\\n \\n-  // DOM property: gradientUnits ,  #IMPLIED attrib: gradientUnits\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units),\\n-                       nsIDOMSVGGradientElement::SVG_GRUNITS_OBJECTBOUNDINGBOX, gUnitMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mGradientUnits), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::gradientUnits, mGradientUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n   // DOM property: gradientTransform ,  #IMPLIED attrib: gradientTransform\\n   {\\n     nsCOMPtr<nsIDOMSVGTransformList> transformList;\\n@@ -115,18 +107,6 @@ nsSVGGradientElement::Init()\\n     NS_ENSURE_SUCCESS(rv,rv);\\n   }\\n \\n-  // DOM property: spreadMethod ,  #IMPLIED  attrib: spreadMethod\\n-  {\\n-    nsCOMPtr<nsISVGEnum> spread;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(spread), \\n-                       nsIDOMSVGGradientElement::SVG_SPREADMETHOD_PAD, gSpreadMap );\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mSpreadMethod), spread);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::spreadMethod, mSpreadMethod);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n   // nsIDOMSVGURIReference properties\\n \\n   // DOM property: href , #IMPLIED attrib: xlink:href\\n@@ -140,15 +120,20 @@ nsSVGGradientElement::Init()\\n   return NS_OK;\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGGradientElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //----------------------------------------------------------------------\\n // nsIDOMSVGGradientElement methods\\n \\n /* readonly attribute nsIDOMSVGAnimatedEnumeration gradientUnits; */\\n NS_IMETHODIMP nsSVGGradientElement::GetGradientUnits(nsIDOMSVGAnimatedEnumeration * *aGradientUnits)\\n {\\n-  *aGradientUnits = mGradientUnits;\\n-  NS_IF_ADDREF(*aGradientUnits);\\n-  return NS_OK;\\n+  return mEnumAttributes[GRADIENTUNITS].ToDOMAnimatedEnum(aGradientUnits, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedTransformList gradientTransform; */\\n@@ -162,9 +147,7 @@ NS_IMETHODIMP nsSVGGradientElement::GetGradientTransform(nsIDOMSVGAnimatedTransf\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration spreadMethod; */\\n NS_IMETHODIMP nsSVGGradientElement::GetSpreadMethod(nsIDOMSVGAnimatedEnumeration * *aSpreadMethod)\\n {\\n-  *aSpreadMethod = mSpreadMethod;\\n-  NS_IF_ADDREF(*aSpreadMethod);\\n-  return NS_OK;\\n+  return mEnumAttributes[SPREADMETHOD].ToDOMAnimatedEnum(aSpreadMethod, this);\\n }\\n \\n //----------------------------------------------------------------------\\ndiff --git a/content/svg/content/src/nsSVGGradientElement.h b/content/svg/content/src/nsSVGGradientElement.h\\nindex 9590b4c..b901c3c 100644\\n--- a/content/svg/content/src/nsSVGGradientElement.h\\n+++ b/content/svg/content/src/nsSVGGradientElement.h\\n@@ -39,18 +39,20 @@\\n #ifndef __NS_SVGGRADIENTELEMENT_H__\\n #define __NS_SVGGRADIENTELEMENT_H__\\n \\n-#include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n #include \\\"nsIDOMSVGURIReference.h\\\"\\n #include \\\"nsIDOMSVGGradientElement.h\\\"\\n+#include \\\"nsIDOMSVGUnitTypes.h\\\"\\n #include \\\"nsSVGStylableElement.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n+#include \\\"nsSVGEnum.h\\\"\\n \\n //--------------------- Gradients------------------------\\n \\n typedef nsSVGStylableElement nsSVGGradientElementBase;\\n \\n class nsSVGGradientElement : public nsSVGGradientElementBase,\\n-                             public nsIDOMSVGURIReference\\n+                             public nsIDOMSVGURIReference,\\n+                             public nsIDOMSVGUnitTypes\\n {\\n   friend class nsSVGGradientFrame;\\n \\n@@ -72,11 +74,16 @@ public:\\n   NS_IMETHOD_(PRBool) IsAttributeMapped(const nsIAtom* aAttribute) const;\\n \\n protected:\\n-  \\n+\\n   // nsIDOMSVGGradientElement values\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mGradientUnits;\\n   nsCOMPtr<nsIDOMSVGAnimatedTransformList> mGradientTransform;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mSpreadMethod;\\n+\\n+  enum { GRADIENTUNITS, SPREADMETHOD };\\n+  nsSVGEnum mEnumAttributes[2];\\n+  static nsSVGEnumMapping sSpreadMethodMap[];\\n+  static EnumInfo sEnumInfo[2];\\n+\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n \\n   // nsIDOMSVGURIReference properties\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mHref;\\ndiff --git a/content/svg/content/src/nsSVGMarkerElement.cpp b/content/svg/content/src/nsSVGMarkerElement.cpp\\nindex 084dd3c..80390d4 100644\\n--- a/content/svg/content/src/nsSVGMarkerElement.cpp\\n+++ b/content/svg/content/src/nsSVGMarkerElement.cpp\\n@@ -38,10 +38,8 @@\\n #include \\\"nsSVGAnimatedAngle.h\\\"\\n #include \\\"nsSVGAnimatedRect.h\\\"\\n #include \\\"nsSVGLength.h\\\"\\n-#include \\\"nsSVGEnum.h\\\"\\n #include \\\"nsSVGAngle.h\\\"\\n #include \\\"nsSVGRect.h\\\"\\n-#include \\\"nsSVGAnimatedEnumeration.h\\\"\\n #include \\\"nsCOMPtr.h\\\"\\n #include \\\"nsISVGValueUtils.h\\\"\\n #include \\\"nsSVGAnimatedPreserveAspectRatio.h\\\"\\n@@ -59,6 +57,20 @@ nsSVGElement::LengthInfo nsSVGMarkerElement::sLengthInfo[4] =\\n   { &nsGkAtoms::markerHeight, 3, nsIDOMSVGLength::SVG_LENGTHTYPE_NUMBER, nsSVGUtils::Y },\\n };\\n \\n+nsSVGEnumMapping nsSVGMarkerElement::sUnitsMap[] = {\\n+  {&nsGkAtoms::objectBoundingBox, nsIDOMSVGMarkerElement::SVG_MARKERUNITS_STROKEWIDTH},\\n+  {&nsGkAtoms::userSpaceOnUse, nsIDOMSVGMarkerElement::SVG_MARKERUNITS_USERSPACEONUSE},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGMarkerElement::sEnumInfo[1] =\\n+{\\n+  { &nsGkAtoms::markerUnits,\\n+    sUnitsMap,\\n+    nsIDOMSVGMarkerElement::SVG_MARKERUNITS_STROKEWIDTH\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(Marker)\\n \\n //----------------------------------------------------------------------\\n@@ -90,25 +102,10 @@ nsSVGMarkerElement::Init()\\n   nsresult rv = nsSVGMarkerElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  // enumeration mappings\\n-  static struct nsSVGEnumMapping gMarkerUnits[] = {\\n-    {&nsGkAtoms::strokeWidth, SVG_MARKERUNITS_STROKEWIDTH},\\n-    {&nsGkAtoms::userSpaceOnUse, SVG_MARKERUNITS_USERSPACEONUSE},\\n-    {nsnull, 0}\\n-  };\\n-  \\n-  // Create mapped properties:\\n+  // non-attrib enum - pass in invalid enum (will never get used by nsSVGEnum)\\n+  mOrientType.Init(0xff, SVG_MARKER_ORIENT_AUTO);\\n \\n-  // DOM property: markerUnits\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units), SVG_MARKERUNITS_STROKEWIDTH, gMarkerUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mMarkerUnits), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::markerUnits, mMarkerUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n+  // Create mapped properties:\\n \\n   // DOM property: orient\\n   {\\n@@ -192,9 +189,7 @@ NS_IMETHODIMP nsSVGMarkerElement::GetRefY(nsIDOMSVGAnimatedLength * *aRefY)\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration markerUnits; */\\n NS_IMETHODIMP nsSVGMarkerElement::GetMarkerUnits(nsIDOMSVGAnimatedEnumeration * *aMarkerUnits)\\n {\\n-  *aMarkerUnits = mMarkerUnits;\\n-  NS_IF_ADDREF(*aMarkerUnits);\\n-  return NS_OK;\\n+  return mEnumAttributes[MARKERUNITS].ToDOMAnimatedEnum(aMarkerUnits, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedLength markerWidth; */\\n@@ -212,32 +207,7 @@ NS_IMETHODIMP nsSVGMarkerElement::GetMarkerHeight(nsIDOMSVGAnimatedLength * *aMa\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration orientType; */\\n NS_IMETHODIMP nsSVGMarkerElement::GetOrientType(nsIDOMSVGAnimatedEnumeration * *aOrientType)\\n {\\n-  static struct nsSVGEnumMapping gOrientType[] = {\\n-    {&nsGkAtoms::_auto, SVG_MARKER_ORIENT_AUTO},\\n-    {nsnull, 0}\\n-  };\\n-\\n-  nsresult rv;\\n-  nsCOMPtr<nsISVGEnum> orient;\\n-  rv = NS_NewSVGEnum(getter_AddRefs(orient), SVG_MARKER_ORIENT_ANGLE, gOrientType);\\n-  NS_ENSURE_SUCCESS(rv,rv);\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> orientType;\\n-  rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(orientType), orient);\\n-  NS_ENSURE_SUCCESS(rv,rv);\\n-\\n-  nsIDOMSVGAngle *a;\\n-  mOrient->GetBaseVal(&a);\\n-  nsAutoString value;\\n-  a->GetValueAsString(value);\\n-  if (value.EqualsLiteral(\\\"auto\\\")) {\\n-    orientType->SetBaseVal(SVG_MARKER_ORIENT_AUTO);\\n-  } else {\\n-    orientType->SetBaseVal(SVG_MARKER_ORIENT_ANGLE);\\n-  }\\n-\\n-  *aOrientType = orientType;\\n-  NS_IF_ADDREF(*aOrientType);\\n-  return NS_OK;\\n+  return mOrientType.ToDOMAnimatedEnum(aOrientType, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedLength orientAngle; */\\n@@ -307,17 +277,36 @@ nsSVGMarkerElement::IsAttributeMapped(const nsIAtom* name) const\\n // nsSVGElement methods\\n \\n nsresult\\n+nsSVGMarkerElement::AfterSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                                 const nsAString* aValue, PRBool aNotify)\\n+{\\n+  if (aNamespaceID == kNameSpaceID_None && aName == nsGkAtoms::orient) {\\n+    if (aValue->EqualsLiteral(\\\"auto\\\")) {\\n+      mOrientType.SetBaseValue(SVG_MARKER_ORIENT_AUTO, this, PR_FALSE);\\n+    } else {\\n+      mOrientType.SetBaseValue(SVG_MARKER_ORIENT_ANGLE, this, PR_FALSE);\\n+    }\\n+  }\\n+\\n+  return nsSVGMarkerElementBase::AfterSetAttr(aNamespaceID, aName,\\n+                                              aValue, aNotify);\\n+}\\n+\\n+nsresult\\n nsSVGMarkerElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n                               PRBool aNotify)\\n {\\n-  if (aNamespaceID == kNameSpaceID_None &&\\n-      aName == nsGkAtoms::viewBox && mCoordCtx) {\\n-    nsCOMPtr<nsIDOMSVGRect> vb;\\n-    mViewBox->GetAnimVal(getter_AddRefs(vb));\\n-    vb->SetX(0);\\n-    vb->SetY(0);\\n-    vb->SetWidth(mLengthAttributes[MARKERWIDTH].GetAnimValue(mCoordCtx));\\n-    vb->SetHeight(mLengthAttributes[MARKERHEIGHT].GetAnimValue(mCoordCtx));\\n+  if (aNamespaceID == kNameSpaceID_None) {\\n+    if (aName == nsGkAtoms::viewBox && mCoordCtx) {\\n+      nsCOMPtr<nsIDOMSVGRect> vb;\\n+      mViewBox->GetAnimVal(getter_AddRefs(vb));\\n+      vb->SetX(0);\\n+      vb->SetY(0);\\n+      vb->SetWidth(mLengthAttributes[MARKERWIDTH].GetAnimValue(mCoordCtx));\\n+      vb->SetHeight(mLengthAttributes[MARKERHEIGHT].GetAnimValue(mCoordCtx));\\n+    } else if (aName == nsGkAtoms::orient) {\\n+      mOrientType.SetBaseValue(SVG_MARKER_ORIENT_AUTO, this, PR_FALSE);\\n+    }\\n   }\\n \\n   return nsSVGMarkerElementBase::UnsetAttr(aNamespaceID, aName, aNotify);\\n@@ -363,6 +352,13 @@ nsSVGMarkerElement::GetLengthInfo()\\n                               NS_ARRAY_LENGTH(sLengthInfo));\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGMarkerElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //----------------------------------------------------------------------\\n // public helpers\\n \\n@@ -372,9 +368,8 @@ nsSVGMarkerElement::GetMarkerTransform(float aStrokeWidth,\\n                                        nsIDOMSVGMatrix **_retval)\\n {\\n   float scale = 1.0;\\n-  PRUint16 val;\\n-  mMarkerUnits->GetAnimVal(&val);\\n-  if (val == SVG_MARKERUNITS_STROKEWIDTH)\\n+  if (mEnumAttributes[MARKERUNITS].GetAnimValue() ==\\n+      SVG_MARKERUNITS_STROKEWIDTH)\\n     scale = aStrokeWidth;\\n \\n   nsCOMPtr<nsIDOMSVGAngle> a;\\ndiff --git a/content/svg/content/src/nsSVGMarkerElement.h b/content/svg/content/src/nsSVGMarkerElement.h\\nindex a979a79..79696e6 100644\\n--- a/content/svg/content/src/nsSVGMarkerElement.h\\n+++ b/content/svg/content/src/nsSVGMarkerElement.h\\n@@ -41,6 +41,7 @@\\n #include \\\"nsIDOMSVGMarkerElement.h\\\"\\n #include \\\"nsIDOMSVGFitToViewBox.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n+#include \\\"nsSVGEnum.h\\\"\\n \\n typedef nsSVGGraphicElement nsSVGMarkerElementBase;\\n \\n@@ -75,6 +76,8 @@ public:\\n   // nsIContent interface\\n   NS_IMETHODIMP_(PRBool) IsAttributeMapped(const nsIAtom* name) const;\\n \\n+  virtual nsresult AfterSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n+                                const nsAString* aValue, PRBool aNotify);\\n   virtual nsresult UnsetAttr(PRInt32 aNameSpaceID, nsIAtom* aAttribute,\\n                              PRBool aNotify);\\n \\n@@ -94,13 +97,21 @@ protected:\\n   void SetParentCoordCtxProvider(nsSVGSVGElement *aContext);\\n \\n   virtual LengthAttributesInfo GetLengthInfo();\\n- \\n+  virtual EnumAttributesInfo GetEnumInfo();\\n+\\n   enum { REFX, REFY, MARKERWIDTH, MARKERHEIGHT };\\n   nsSVGLength2 mLengthAttributes[4];\\n   static LengthInfo sLengthInfo[4];\\n \\n+  enum { MARKERUNITS };\\n+  nsSVGEnum mEnumAttributes[1];\\n+  static nsSVGEnumMapping sUnitsMap[];\\n+  static EnumInfo sEnumInfo[1];\\n+\\n+  // this needs to be handled seperately because its a derived enum\\n+  nsSVGEnum mOrientType;\\n+\\n   nsSVGSVGElement                       *mCoordCtx;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mMarkerUnits;\\n   nsCOMPtr<nsIDOMSVGAnimatedAngle>       mOrient;\\n \\n   nsCOMPtr<nsIDOMSVGAnimatedRect>        mViewBox;\\ndiff --git a/content/svg/content/src/nsSVGMaskElement.cpp b/content/svg/content/src/nsSVGMaskElement.cpp\\nindex 68ec235..addad20 100644\\n--- a/content/svg/content/src/nsSVGMaskElement.cpp\\n+++ b/content/svg/content/src/nsSVGMaskElement.cpp\\n@@ -34,9 +34,6 @@\\n  *\\n  * ***** END LICENSE BLOCK ***** */\\n \\n-#include \\\"nsSVGEnum.h\\\"\\n-#include \\\"nsSVGAnimatedEnumeration.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n #include \\\"nsCOMPtr.h\\\"\\n #include \\\"nsGkAtoms.h\\\"\\n #include \\\"nsSVGMaskElement.h\\\"\\n@@ -51,6 +48,18 @@ nsSVGElement::LengthInfo nsSVGMaskElement::sLengthInfo[4] =\\n   { &nsGkAtoms::height, 120, nsIDOMSVGLength::SVG_LENGTHTYPE_PERCENTAGE, nsSVGUtils::Y },\\n };\\n \\n+nsSVGElement::EnumInfo nsSVGMaskElement::sEnumInfo[2] =\\n+{\\n+  { &nsGkAtoms::maskUnits,\\n+    sSVGUnitTypesMap,\\n+    nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX\\n+  },\\n+  { &nsGkAtoms::maskContentUnits,\\n+    sSVGUnitTypesMap,\\n+    nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(Mask)\\n \\n //----------------------------------------------------------------------\\n@@ -64,6 +73,7 @@ NS_INTERFACE_MAP_BEGIN(nsSVGMaskElement)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMElement)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMSVGElement)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMSVGMaskElement)\\n+  NS_INTERFACE_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n   NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO(SVGMaskElement)\\n NS_INTERFACE_MAP_END_INHERITING(nsSVGMaskElementBase)\\n \\n@@ -75,48 +85,6 @@ nsSVGMaskElement::nsSVGMaskElement(nsINodeInfo* aNodeInfo)\\n {\\n }\\n \\n-nsresult\\n-nsSVGMaskElement::Init()\\n-{\\n-  nsresult rv = nsSVGMaskElementBase::Init();\\n-  NS_ENSURE_SUCCESS(rv,rv);\\n-\\n-  // Define enumeration mappings\\n-  static struct nsSVGEnumMapping pUnitMap[] = {\\n-        {&nsGkAtoms::objectBoundingBox, nsIDOMSVGMaskElement::SVG_MUNITS_OBJECTBOUNDINGBOX},\\n-        {&nsGkAtoms::userSpaceOnUse, nsIDOMSVGMaskElement::SVG_MUNITS_USERSPACEONUSE},\\n-        {nsnull, 0}\\n-  };\\n-\\n-  // Create mapped attributes\\n-\\n-  // DOM property: maskUnits ,  #IMPLIED attrib: maskUnits\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units),\\n-                       nsIDOMSVGMaskElement::SVG_MUNITS_OBJECTBOUNDINGBOX, pUnitMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mMaskUnits), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::maskUnits, mMaskUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  // DOM property: maskContentUnits ,  #IMPLIED attrib: maskContentUnits\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units),\\n-                       nsIDOMSVGMaskElement::SVG_MUNITS_USERSPACEONUSE, pUnitMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mMaskContentUnits), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::maskContentUnits, mMaskContentUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  return NS_OK;\\n-}\\n-\\n //----------------------------------------------------------------------\\n // nsIDOMNode method\\n \\n@@ -128,17 +96,13 @@ NS_IMPL_ELEMENT_CLONE_WITH_INIT(nsSVGMaskElement)\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration maskUnits; */\\n NS_IMETHODIMP nsSVGMaskElement::GetMaskUnits(nsIDOMSVGAnimatedEnumeration * *aMaskUnits)\\n {\\n-  *aMaskUnits = mMaskUnits;\\n-  NS_IF_ADDREF(*aMaskUnits);\\n-  return NS_OK;\\n+  return mEnumAttributes[MASKUNITS].ToDOMAnimatedEnum(aMaskUnits, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedEnumeration maskContentUnits; */\\n NS_IMETHODIMP nsSVGMaskElement::GetMaskContentUnits(nsIDOMSVGAnimatedEnumeration * *aMaskUnits)\\n {\\n-  *aMaskUnits = mMaskContentUnits;\\n-  NS_IF_ADDREF(*aMaskUnits);\\n-  return NS_OK;\\n+  return mEnumAttributes[MASKCONTENTUNITS].ToDOMAnimatedEnum(aMaskUnits, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedLength x; */\\n@@ -175,6 +139,13 @@ nsSVGMaskElement::GetLengthInfo()\\n                               NS_ARRAY_LENGTH(sLengthInfo));\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGMaskElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //----------------------------------------------------------------------\\n // nsIContent methods\\n \\ndiff --git a/content/svg/content/src/nsSVGMaskElement.h b/content/svg/content/src/nsSVGMaskElement.h\\nindex c34dcdd..994110f 100644\\n--- a/content/svg/content/src/nsSVGMaskElement.h\\n+++ b/content/svg/content/src/nsSVGMaskElement.h\\n@@ -39,14 +39,17 @@\\n \\n #include \\\"nsSVGStylableElement.h\\\"\\n #include \\\"nsIDOMSVGMaskElement.h\\\"\\n+#include \\\"nsIDOMSVGUnitTypes.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n+#include \\\"nsSVGEnum.h\\\"\\n \\n //--------------------- Masks ------------------------\\n \\n typedef nsSVGStylableElement nsSVGMaskElementBase;\\n \\n class nsSVGMaskElement : public nsSVGMaskElementBase,\\n-                         public nsIDOMSVGMaskElement\\n+                         public nsIDOMSVGMaskElement,\\n+                         public nsIDOMSVGUnitTypes\\n {\\n   friend class nsSVGMaskFrame;\\n \\n@@ -54,7 +57,6 @@ protected:\\n   friend nsresult NS_NewSVGMaskElement(nsIContent **aResult,\\n                                          nsINodeInfo *aNodeInfo);\\n   nsSVGMaskElement(nsINodeInfo* aNodeInfo);\\n-  nsresult Init();\\n \\n public:\\n   // interfaces:\\n@@ -74,14 +76,16 @@ public:\\n protected:\\n \\n   virtual LengthAttributesInfo GetLengthInfo();\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n \\n   // nsIDOMSVGMaskElement values\\n   enum { X, Y, WIDTH, HEIGHT };\\n   nsSVGLength2 mLengthAttributes[4];\\n   static LengthInfo sLengthInfo[4];\\n \\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mMaskUnits;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mMaskContentUnits;\\n+  enum { MASKUNITS, MASKCONTENTUNITS };\\n+  nsSVGEnum mEnumAttributes[2];\\n+  static EnumInfo sEnumInfo[2];\\n };\\n \\n #endif\\ndiff --git a/content/svg/content/src/nsSVGPatternElement.cpp b/content/svg/content/src/nsSVGPatternElement.cpp\\nindex c1469af..e6dbbd4 100644\\n--- a/content/svg/content/src/nsSVGPatternElement.cpp\\n+++ b/content/svg/content/src/nsSVGPatternElement.cpp\\n@@ -38,8 +38,6 @@\\n \\n #include \\\"nsSVGTransformList.h\\\"\\n #include \\\"nsSVGAnimatedTransformList.h\\\"\\n-#include \\\"nsSVGEnum.h\\\"\\n-#include \\\"nsSVGAnimatedEnumeration.h\\\"\\n #include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n #include \\\"nsSVGAnimatedString.h\\\"\\n #include \\\"nsCOMPtr.h\\\"\\n@@ -62,6 +60,18 @@ nsSVGElement::LengthInfo nsSVGPatternElement::sLengthInfo[4] =\\n   { &nsGkAtoms::height, 100, nsIDOMSVGLength::SVG_LENGTHTYPE_PERCENTAGE, nsSVGUtils::Y },\\n };\\n \\n+nsSVGElement::EnumInfo nsSVGPatternElement::sEnumInfo[2] =\\n+{\\n+  { &nsGkAtoms::patternUnits,\\n+    sSVGUnitTypesMap,\\n+    nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX\\n+  },\\n+  { &nsGkAtoms::patternContentUnits,\\n+    sSVGUnitTypesMap,\\n+    nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(Pattern)\\n \\n //----------------------------------------------------------------------\\n@@ -77,6 +87,7 @@ NS_INTERFACE_MAP_BEGIN(nsSVGPatternElement)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMSVGFitToViewBox)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMSVGURIReference)\\n   NS_INTERFACE_MAP_ENTRY(nsIDOMSVGPatternElement)\\n+  NS_INTERFACE_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n   NS_INTERFACE_MAP_ENTRY(nsIMutationObserver)\\n   NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO(SVGPatternElement)\\n NS_INTERFACE_MAP_END_INHERITING(nsSVGPatternElementBase)\\n@@ -96,39 +107,8 @@ nsSVGPatternElement::Init()\\n   nsresult rv = nsSVGPatternElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  // Define enumeration mappings\\n-  static struct nsSVGEnumMapping pUnitMap[] = {\\n-        {&nsGkAtoms::objectBoundingBox, nsIDOMSVGPatternElement::SVG_PUNITS_OBJECTBOUNDINGBOX},\\n-        {&nsGkAtoms::userSpaceOnUse, nsIDOMSVGPatternElement::SVG_PUNITS_USERSPACEONUSE},\\n-        {nsnull, 0}\\n-  };\\n-\\n   // Create mapped attributes\\n \\n-  // DOM property: patternUnits ,  #IMPLIED attrib: patternUnits\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units),\\n-                       nsIDOMSVGPatternElement::SVG_PUNITS_OBJECTBOUNDINGBOX, pUnitMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mPatternUnits), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::patternUnits, mPatternUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  // DOM property: patternContentUnits ,  #IMPLIED attrib: patternContentUnits\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units),\\n-                       nsIDOMSVGPatternElement::SVG_PUNITS_USERSPACEONUSE, pUnitMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mPatternContentUnits), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::patternContentUnits, mPatternContentUnits);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n   // DOM property: patternTransform ,  #IMPLIED attrib: patternTransform\\n   {\\n     nsCOMPtr<nsIDOMSVGTransformList> transformList;\\n@@ -213,17 +193,13 @@ nsSVGPatternElement::GetPreserveAspectRatio(nsIDOMSVGAnimatedPreserveAspectRatio\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration patternUnits; */\\n NS_IMETHODIMP nsSVGPatternElement::GetPatternUnits(nsIDOMSVGAnimatedEnumeration * *aPatternUnits)\\n {\\n-  *aPatternUnits = mPatternUnits;\\n-  NS_IF_ADDREF(*aPatternUnits);\\n-  return NS_OK;\\n+  return mEnumAttributes[PATTERNUNITS].ToDOMAnimatedEnum(aPatternUnits, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedEnumeration patternContentUnits; */\\n NS_IMETHODIMP nsSVGPatternElement::GetPatternContentUnits(nsIDOMSVGAnimatedEnumeration * *aPatternUnits)\\n {\\n-  *aPatternUnits = mPatternContentUnits;\\n-  NS_IF_ADDREF(*aPatternUnits);\\n-  return NS_OK;\\n+  return mEnumAttributes[PATTERNCONTENTUNITS].ToDOMAnimatedEnum(aPatternUnits, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedTransformList patternTransform; */\\n@@ -302,6 +278,13 @@ nsSVGPatternElement::GetLengthInfo()\\n                               NS_ARRAY_LENGTH(sLengthInfo));\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGPatternElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //----------------------------------------------------------------------\\n // nsIMutationObserver methods\\n \\ndiff --git a/content/svg/content/src/nsSVGPatternElement.h b/content/svg/content/src/nsSVGPatternElement.h\\nindex 96e12d4..30f40ff 100644\\n--- a/content/svg/content/src/nsSVGPatternElement.h\\n+++ b/content/svg/content/src/nsSVGPatternElement.h\\n@@ -43,8 +43,10 @@\\n #include \\\"nsIDOMSVGURIReference.h\\\"\\n #include \\\"nsIDOMSVGFitToViewBox.h\\\"\\n #include \\\"nsIDOMSVGPatternElement.h\\\"\\n+#include \\\"nsIDOMSVGUnitTypes.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n #include \\\"nsStubMutationObserver.h\\\"\\n+#include \\\"nsSVGEnum.h\\\"\\n \\n //--------------------- Patterns ------------------------\\n \\n@@ -54,6 +56,7 @@ class nsSVGPatternElement : public nsSVGPatternElementBase,\\n                             public nsIDOMSVGURIReference,\\n                             public nsIDOMSVGFitToViewBox,\\n                             public nsIDOMSVGPatternElement,\\n+                            public nsIDOMSVGUnitTypes,\\n                             public nsStubMutationObserver\\n {\\n   friend class nsSVGPatternFrame;\\n@@ -98,14 +101,17 @@ protected:\\n   void PushUpdate();\\n \\n   virtual LengthAttributesInfo GetLengthInfo();\\n-  \\n+  virtual EnumAttributesInfo GetEnumInfo();\\n+\\n   // nsIDOMSVGPatternElement values\\n   enum { X, Y, WIDTH, HEIGHT };\\n   nsSVGLength2 mLengthAttributes[4];\\n   static LengthInfo sLengthInfo[4];\\n \\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mPatternUnits;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mPatternContentUnits;\\n+  enum { PATTERNUNITS, PATTERNCONTENTUNITS };\\n+  nsSVGEnum mEnumAttributes[2];\\n+  static EnumInfo sEnumInfo[2];\\n+\\n   nsCOMPtr<nsIDOMSVGAnimatedTransformList> mPatternTransform;\\n \\n   // nsIDOMSVGURIReference properties\\ndiff --git a/content/svg/content/src/nsSVGSVGElement.cpp b/content/svg/content/src/nsSVGSVGElement.cpp\\nindex 11ab5c1..8ff9402 100644\\n--- a/content/svg/content/src/nsSVGSVGElement.cpp\\n+++ b/content/svg/content/src/nsSVGSVGElement.cpp\\n@@ -59,7 +59,6 @@\\n #include \\\"nsSVGPreserveAspectRatio.h\\\"\\n #include \\\"nsISVGValueUtils.h\\\"\\n #include \\\"nsDOMError.h\\\"\\n-#include \\\"nsSVGEnum.h\\\"\\n #include \\\"nsISVGChildFrame.h\\\"\\n #include \\\"nsGUIEvent.h\\\"\\n #include \\\"nsSVGUtils.h\\\"\\n@@ -73,6 +72,20 @@ nsSVGElement::LengthInfo nsSVGSVGElement::sLengthInfo[4] =\\n   { &nsGkAtoms::height, 100, nsIDOMSVGLength::SVG_LENGTHTYPE_PERCENTAGE, nsSVGUtils::Y },\\n };\\n \\n+nsSVGEnumMapping nsSVGSVGElement::sZoomAndPanMap[] = {\\n+  {&nsGkAtoms::disable, nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_DISABLE},\\n+  {&nsGkAtoms::magnify, nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGSVGElement::sEnumInfo[1] =\\n+{\\n+  { &nsGkAtoms::zoomAndPan,\\n+    sZoomAndPanMap,\\n+    nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(SVG)\\n \\n //----------------------------------------------------------------------\\n@@ -152,24 +165,6 @@ nsSVGSVGElement::Init()\\n                            mPreserveAspectRatio);\\n     NS_ENSURE_SUCCESS(rv,rv);\\n   }\\n-  \\n-  // nsIDOMSVGZoomAndPan attribute ------:\\n-\\n-  // Define enumeration mappings\\n-  static struct nsSVGEnumMapping zoomMap[] = {\\n-        {&nsGkAtoms::disable, nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_DISABLE},\\n-        {&nsGkAtoms::magnify, nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY},\\n-        {nsnull, 0}\\n-  };\\n-\\n-  // DOM property: zoomAndPan ,  #IMPLIED attrib: zoomAndPan\\n-  {\\n-    rv = NS_NewSVGEnum(getter_AddRefs(mZoomAndPan),\\n-                       nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY, zoomMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::zoomAndPan, mZoomAndPan);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n \\n   // DOM property: currentScale\\n   {\\n@@ -959,15 +954,18 @@ nsSVGSVGElement::GetTransformToElement(nsIDOMSVGElement *element,\\n NS_IMETHODIMP\\n nsSVGSVGElement::GetZoomAndPan(PRUint16 *aZoomAndPan)\\n {\\n-  return mZoomAndPan->GetIntegerValue(*aZoomAndPan);\\n+  *aZoomAndPan = mEnumAttributes[ZOOMANDPAN].GetAnimValue();\\n+  return NS_OK;\\n }\\n \\n NS_IMETHODIMP\\n nsSVGSVGElement::SetZoomAndPan(PRUint16 aZoomAndPan)\\n {\\n   if (aZoomAndPan == nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_DISABLE ||\\n-      aZoomAndPan == nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY)\\n-    return mZoomAndPan->SetIntegerValue(aZoomAndPan);\\n+      aZoomAndPan == nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY) {\\n+    mEnumAttributes[ZOOMANDPAN].SetBaseValue(aZoomAndPan, this, PR_TRUE);\\n+    return NS_OK;\\n+  }\\n \\n   return NS_ERROR_DOM_SVG_INVALID_VALUE_ERR;\\n }\\n@@ -984,14 +982,6 @@ nsSVGSVGElement::GetCurrentScaleNumber(nsIDOMSVGNumber **aResult)\\n }\\n \\n NS_IMETHODIMP\\n-nsSVGSVGElement::GetZoomAndPanEnum(nsISVGEnum **aResult)\\n-{\\n-  *aResult = mZoomAndPan;\\n-  NS_ADDREF(*aResult);\\n-  return NS_OK;\\n-}\\n-\\n-NS_IMETHODIMP\\n nsSVGSVGElement::SetCurrentScaleTranslate(float s, float x, float y)\\n {\\n   RecordCurrentScaleTranslate();\\n@@ -1445,3 +1435,18 @@ nsSVGSVGElement::GetLengthInfo()\\n   return LengthAttributesInfo(mLengthAttributes, sLengthInfo,\\n                               NS_ARRAY_LENGTH(sLengthInfo));\\n }\\n+\\n+void\\n+nsSVGSVGElement::DidChangeEnum(PRUint8 aAttrEnum, PRBool aDoSetAttr)\\n+{\\n+  nsSVGSVGElementBase::DidChangeEnum(aAttrEnum, aDoSetAttr);\\n+\\n+  InvalidateTransformNotifyFrame();\\n+}\\n+\\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGSVGElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\ndiff --git a/content/svg/content/src/nsSVGSVGElement.h b/content/svg/content/src/nsSVGSVGElement.h\\nindex 0024960..0033184 100644\\n--- a/content/svg/content/src/nsSVGSVGElement.h\\n+++ b/content/svg/content/src/nsSVGSVGElement.h\\n@@ -47,8 +47,7 @@\\n #include \\\"nsIDOMSVGZoomAndPan.h\\\"\\n #include \\\"nsIDOMSVGMatrix.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n-\\n-class nsISVGEnum;\\n+#include \\\"nsSVGEnum.h\\\"\\n \\n #define QI_AND_CAST_TO_NSSVGSVGELEMENT(base)                                  \\\\\\n   (nsCOMPtr<nsIDOMSVGSVGElement>(do_QueryInterface(base)) ?                   \\\\\\n@@ -91,7 +90,6 @@ public:\\n \\n   // helper methods for implementing SVGZoomEvent:\\n   NS_IMETHOD GetCurrentScaleNumber(nsIDOMSVGNumber **aResult);\\n-  NS_IMETHOD GetZoomAndPanEnum(nsISVGEnum **aResult);\\n \\n   /**\\n    * For use by zoom controls to allow currentScale, currentTranslate.x and\\n@@ -137,6 +135,7 @@ public:\\n \\n   // nsSVGElement specializations:\\n   virtual void DidChangeLength(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n+  virtual void DidChangeEnum(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n \\n   // nsSVGSVGElement methods:\\n   float GetLength(PRUint8 mCtxType);\\n@@ -164,6 +163,13 @@ protected:\\n   nsSVGLength2 mLengthAttributes[4];\\n   static LengthInfo sLengthInfo[4];\\n \\n+  virtual EnumAttributesInfo GetEnumInfo();\\n+\\n+  enum { ZOOMANDPAN };\\n+  nsSVGEnum mEnumAttributes[1];\\n+  static nsSVGEnumMapping sZoomAndPanMap[];\\n+  static EnumInfo sEnumInfo[1];\\n+\\n   nsSVGSVGElement                  *mCoordCtx;\\n   nsCOMPtr<nsIDOMSVGAnimatedRect>   mViewBox;\\n   nsCOMPtr<nsIDOMSVGAnimatedPreserveAspectRatio> mPreserveAspectRatio;\\n@@ -174,7 +180,6 @@ protected:\\n   // zoom and pan\\n   // IMPORTANT: only RecordCurrentScaleTranslate should change the \\\"mPreviousX\\\"\\n   // members below - see the comment in RecordCurrentScaleTranslate\\n-  nsCOMPtr<nsISVGEnum>              mZoomAndPan;\\n   nsCOMPtr<nsIDOMSVGPoint>          mCurrentTranslate;\\n   nsCOMPtr<nsIDOMSVGNumber>         mCurrentScale;\\n   float                             mPreviousTranslate_x;\\ndiff --git a/content/svg/content/src/nsSVGTextPathElement.cpp b/content/svg/content/src/nsSVGTextPathElement.cpp\\nindex 2082742..82fa530 100644\\n--- a/content/svg/content/src/nsSVGTextPathElement.cpp\\n+++ b/content/svg/content/src/nsSVGTextPathElement.cpp\\n@@ -42,7 +42,6 @@\\n #include \\\"nsISVGTextContentMetrics.h\\\"\\n #include \\\"nsIFrame.h\\\"\\n #include \\\"nsSVGAnimatedString.h\\\"\\n-#include \\\"nsSVGAnimatedEnumeration.h\\\"\\n #include \\\"nsSVGEnum.h\\\"\\n #include \\\"nsDOMError.h\\\"\\n #include \\\"nsSVGLength2.h\\\"\\n@@ -81,6 +80,7 @@ public:\\n protected:\\n \\n   virtual LengthAttributesInfo GetLengthInfo();\\n+  virtual EnumAttributesInfo GetEnumInfo();\\n \\n   virtual PRBool IsEventName(nsIAtom* aName);\\n \\n@@ -90,8 +90,12 @@ protected:\\n   nsSVGLength2 mLengthAttributes[1];\\n   static LengthInfo sLengthInfo[1];\\n \\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mMethod;\\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> mSpacing;\\n+  enum { METHOD, SPACING };\\n+  nsSVGEnum mEnumAttributes[2];\\n+  static nsSVGEnumMapping sMethodMap[];\\n+  static nsSVGEnumMapping sSpacingMap[];\\n+  static EnumInfo sEnumInfo[2];\\n+\\n   nsCOMPtr<nsIDOMSVGAnimatedString> mHref;\\n };\\n \\n@@ -100,6 +104,30 @@ nsSVGElement::LengthInfo nsSVGTextPathElement::sLengthInfo[1] =\\n   { &nsGkAtoms::startOffset, 0, nsIDOMSVGLength::SVG_LENGTHTYPE_NUMBER, nsSVGUtils::X },\\n };\\n \\n+nsSVGEnumMapping nsSVGTextPathElement::sMethodMap[] = {\\n+  {&nsGkAtoms::align, nsIDOMSVGTextPathElement::TEXTPATH_METHODTYPE_ALIGN},\\n+  {&nsGkAtoms::stretch, nsIDOMSVGTextPathElement::TEXTPATH_METHODTYPE_STRETCH},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGEnumMapping nsSVGTextPathElement::sSpacingMap[] = {\\n+  {&nsGkAtoms::_auto, nsIDOMSVGTextPathElement::TEXTPATH_SPACINGTYPE_AUTO},\\n+  {&nsGkAtoms::exact, nsIDOMSVGTextPathElement::TEXTPATH_SPACINGTYPE_EXACT},\\n+  {nsnull, 0}\\n+};\\n+\\n+nsSVGElement::EnumInfo nsSVGTextPathElement::sEnumInfo[2] =\\n+{\\n+  { &nsGkAtoms::method,\\n+    sMethodMap,\\n+    nsIDOMSVGTextPathElement::TEXTPATH_METHODTYPE_ALIGN\\n+  },\\n+  { &nsGkAtoms::spacing,\\n+    sSpacingMap,\\n+    nsIDOMSVGTextPathElement::TEXTPATH_SPACINGTYPE_EXACT\\n+  }\\n+};\\n+\\n NS_IMPL_NS_NEW_SVG_ELEMENT(TextPath)\\n \\n //----------------------------------------------------------------------\\n@@ -132,45 +160,8 @@ nsSVGTextPathElement::Init()\\n   nsresult rv = nsSVGTextPathElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  // enumeration mappings\\n-  static struct nsSVGEnumMapping methodMap[] = {\\n-    {&nsGkAtoms::align, TEXTPATH_METHODTYPE_ALIGN},\\n-    {&nsGkAtoms::stretch, TEXTPATH_METHODTYPE_STRETCH},\\n-    {nsnull, 0}\\n-  };\\n-  \\n-  static struct nsSVGEnumMapping spacingMap[] = {\\n-    {&nsGkAtoms::_auto, TEXTPATH_SPACINGTYPE_AUTO},\\n-    {&nsGkAtoms::exact, TEXTPATH_SPACINGTYPE_EXACT},\\n-    {nsnull, 0}\\n-  };\\n-\\n   // Create mapped properties:\\n \\n-  // DOM property: method, #IMPLIED attrib: method\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units), TEXTPATH_METHODTYPE_ALIGN,\\n-                       methodMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mMethod), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::method, mMethod);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n-  // DOM property: spacing, #IMPLIED attrib: spacing\\n-  {\\n-    nsCOMPtr<nsISVGEnum> units;\\n-    rv = NS_NewSVGEnum(getter_AddRefs(units), TEXTPATH_SPACINGTYPE_EXACT,\\n-                       spacingMap);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedEnumeration(getter_AddRefs(mSpacing), units);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::spacing, mSpacing);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-  }\\n-\\n   // nsIDOMSVGURIReference properties\\n \\n   // DOM property: href , #REQUIRED attrib: xlink:href\\n@@ -212,17 +203,13 @@ NS_IMETHODIMP nsSVGTextPathElement::GetStartOffset(nsIDOMSVGAnimatedLength * *aS\\n /* readonly attribute nsIDOMSVGAnimatedEnumeration method; */\\n NS_IMETHODIMP nsSVGTextPathElement::GetMethod(nsIDOMSVGAnimatedEnumeration * *aMethod)\\n {\\n-  *aMethod = mMethod;\\n-  NS_IF_ADDREF(*aMethod);\\n-  return NS_OK;\\n+  return mEnumAttributes[METHOD].ToDOMAnimatedEnum(aMethod, this);\\n }\\n \\n /* readonly attribute nsIDOMSVGAnimatedEnumeration spacing; */\\n NS_IMETHODIMP nsSVGTextPathElement::GetSpacing(nsIDOMSVGAnimatedEnumeration * *aSpacing)\\n {\\n-  *aSpacing = mSpacing;\\n-  NS_IF_ADDREF(*aSpacing);\\n-  return NS_OK;\\n+  return mEnumAttributes[SPACING].ToDOMAnimatedEnum(aSpacing, this);\\n }\\n \\n //----------------------------------------------------------------------\\n@@ -381,6 +368,13 @@ nsSVGTextPathElement::GetLengthInfo()\\n                               NS_ARRAY_LENGTH(sLengthInfo));\\n }\\n \\n+nsSVGElement::EnumAttributesInfo\\n+nsSVGTextPathElement::GetEnumInfo()\\n+{\\n+  return EnumAttributesInfo(mEnumAttributes, sEnumInfo,\\n+                            NS_ARRAY_LENGTH(sEnumInfo));\\n+}\\n+\\n //----------------------------------------------------------------------\\n // implementation helpers:\\n \\ndiff --git a/dom/public/idl/svg/Makefile.in b/dom/public/idl/svg/Makefile.in\\nindex 7473b97..8307051 100644\\n--- a/dom/public/idl/svg/Makefile.in\\n+++ b/dom/public/idl/svg/Makefile.in\\n@@ -120,6 +120,7 @@ XPIDLSRCS\\t= \\\\\\n \\t\\tnsIDOMSVGTransformable.idl \\\\\\n \\t\\tnsIDOMSVGTSpanElement.idl \\\\\\n \\t\\tnsIDOMSVGURIReference.idl \\\\\\n+\\t\\tnsIDOMSVGUnitTypes.idl \\\\\\n \\t\\tnsIDOMSVGUseElement.idl \\\\\\n \\t\\tnsIDOMSVGViewSpec.idl \\\\\\n \\t\\tnsIDOMSVGZoomAndPan.idl \\\\\\ndiff --git a/dom/public/idl/svg/nsIDOMSVGClipPathElement.idl b/dom/public/idl/svg/nsIDOMSVGClipPathElement.idl\\nindex 1d9bf76..0728200 100644\\n--- a/dom/public/idl/svg/nsIDOMSVGClipPathElement.idl\\n+++ b/dom/public/idl/svg/nsIDOMSVGClipPathElement.idl\\n@@ -65,11 +65,5 @@ interface nsIDOMSVGClipPathElement\\n     nsIDOMSVGTransformable,\\n */\\n {\\n-  // Extended to provide enumerations for clipPathUnits\\n-  // These constants are taken from SVGUnitTypes\\n-  const unsigned short SVG_CPUNITS_UNKNOWN = 0;\\n-  const unsigned short SVG_CPUNITS_OBJECTBOUNDINGBOX = 1;\\n-  const unsigned short SVG_CPUNITS_USERSPACEONUSE = 2;\\n-\\n   readonly attribute nsIDOMSVGAnimatedEnumeration clipPathUnits;\\n };\\ndiff --git a/dom/public/idl/svg/nsIDOMSVGFilterElement.idl b/dom/public/idl/svg/nsIDOMSVGFilterElement.idl\\nindex 63e3696..7b40c94 100644\\n--- a/dom/public/idl/svg/nsIDOMSVGFilterElement.idl\\n+++ b/dom/public/idl/svg/nsIDOMSVGFilterElement.idl\\n@@ -58,11 +58,6 @@ interface nsIDOMSVGFilterElement\\n     nsIDOMSVGStylable,\\n */\\n { \\n-    // These constants are taken from SVGUnitTypes\\n-    const unsigned short SVG_FUNITS_UNKNOWN           = 0;\\n-    const unsigned short SVG_FUNITS_OBJECTBOUNDINGBOX = 1;\\n-    const unsigned short SVG_FUNITS_USERSPACEONUSE    = 2;\\n-\\n     readonly attribute nsIDOMSVGAnimatedEnumeration filterUnits;\\n     readonly attribute nsIDOMSVGAnimatedEnumeration primitiveUnits;\\n     readonly attribute nsIDOMSVGAnimatedLength      x;\\ndiff --git a/dom/public/idl/svg/nsIDOMSVGGradientElement.idl b/dom/public/idl/svg/nsIDOMSVGGradientElement.idl\\nindex 40ce432..0bd5e03 100644\\n--- a/dom/public/idl/svg/nsIDOMSVGGradientElement.idl\\n+++ b/dom/public/idl/svg/nsIDOMSVGGradientElement.idl\\n@@ -69,12 +69,6 @@ interface nsIDOMSVGGradientElement\\n   const unsigned short SVG_SPREADMETHOD_PAD     = 1;\\n   const unsigned short SVG_SPREADMETHOD_REFLECT = 2;\\n   const unsigned short SVG_SPREADMETHOD_REPEAT  = 3;\\n-  // Extended to provide enumerations for gradientUnits\\n-  // These constants are taken from SVGUnitTypes\\n-  const unsigned short SVG_GRUNITS_UNKNOWN = 0;\\n-  const unsigned short SVG_GRUNITS_OBJECTBOUNDINGBOX = 1;\\n-  const unsigned short SVG_GRUNITS_USERSPACEONUSE = 2;\\n-\\n \\n   readonly attribute nsIDOMSVGAnimatedEnumeration gradientUnits;\\n   readonly attribute nsIDOMSVGAnimatedTransformList gradientTransform;\\ndiff --git a/dom/public/idl/svg/nsIDOMSVGMaskElement.idl b/dom/public/idl/svg/nsIDOMSVGMaskElement.idl\\nindex daa684f..49f1c6c 100644\\n--- a/dom/public/idl/svg/nsIDOMSVGMaskElement.idl\\n+++ b/dom/public/idl/svg/nsIDOMSVGMaskElement.idl\\n@@ -59,11 +59,6 @@ interface nsIDOMSVGMaskElement\\n        \\n */\\n { \\n-    // These constants are taken from SVGUnitTypes\\n-    const unsigned short SVG_MUNITS_UNKNOWN           = 0;\\n-    const unsigned short SVG_MUNITS_OBJECTBOUNDINGBOX = 1;\\n-    const unsigned short SVG_MUNITS_USERSPACEONUSE    = 2;\\n-\\n     readonly attribute nsIDOMSVGAnimatedEnumeration maskUnits;\\n     readonly attribute nsIDOMSVGAnimatedEnumeration maskContentUnits;\\n     readonly attribute nsIDOMSVGAnimatedLength      x;\\ndiff --git a/dom/public/idl/svg/nsIDOMSVGPatternElement.idl b/dom/public/idl/svg/nsIDOMSVGPatternElement.idl\\nindex 348d15f..c5f3dda 100644\\n--- a/dom/public/idl/svg/nsIDOMSVGPatternElement.idl\\n+++ b/dom/public/idl/svg/nsIDOMSVGPatternElement.idl\\n@@ -71,10 +71,6 @@ interface nsIDOMSVGPatternElement\\n                 SVGUnitTypes \\n */\\n { \\n-  const unsigned short SVG_PUNITS_UNKNOWN = 0;\\n-  const unsigned short SVG_PUNITS_OBJECTBOUNDINGBOX = 1;\\n-  const unsigned short SVG_PUNITS_USERSPACEONUSE = 2;\\n-\\n   readonly attribute nsIDOMSVGAnimatedEnumeration   patternUnits;\\n   readonly attribute nsIDOMSVGAnimatedEnumeration   patternContentUnits;\\n   readonly attribute nsIDOMSVGAnimatedTransformList patternTransform;\\ndiff --git a/content/svg/content/src/nsSVGAnimatedEnumeration.h b/dom/public/idl/svg/nsIDOMSVGUnitTypes.idl\\nsimilarity index 52%\\nrename from content/svg/content/src/nsSVGAnimatedEnumeration.h\\nrename to dom/public/idl/svg/nsIDOMSVGUnitTypes.idl\\nindex 2391217..2ee64e7 100644\\n--- a/content/svg/content/src/nsSVGAnimatedEnumeration.h\\n+++ b/dom/public/idl/svg/nsIDOMSVGUnitTypes.idl\\n@@ -1,10 +1,10 @@\\n-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n-/* ***** BEGIN LICENSE BLOCK *****\\n+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\\n+/* ----- BEGIN LICENSE BLOCK -----\\n  * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n  *\\n- * The contents of this file are subject to the Mozilla Public License Version\\n- * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n- * the License. You may obtain a copy of the License at\\n+ * The contents of this file are subject to the Mozilla Public License\\n+ * Version 1.1 (the \\\"License\\\"); you may not use this file except in\\n+ * compliance with the License. You may obtain a copy of the License at\\n  * http://www.mozilla.org/MPL/\\n  *\\n  * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n@@ -14,39 +14,41 @@\\n  *\\n  * The Original Code is the Mozilla SVG project.\\n  *\\n- * The Initial Developer of the Original Code is\\n- * IBM Corporation\\n- * Portions created by the Initial Developer are Copyright (C) 2004\\n+ * The Initial Developer of the Original Code is IBM Corporation.\\n+ * Portions created by the Initial Developer are Copyright (C) 2007\\n  * the Initial Developer. All Rights Reserved.\\n  *\\n  * Contributor(s):\\n- *   Tim Rowley <tor@acm.org> (original author)\\n  *\\n  * Alternatively, the contents of this file may be used under the terms of\\n- * either of the GNU General Public License Version 2 or later (the \\\"GPL\\\"),\\n- * or the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or \\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n  * in which case the provisions of the GPL or the LGPL are applicable instead\\n  * of those above. If you wish to allow use of your version of this file only\\n  * under the terms of either the GPL or the LGPL, and not to allow others to\\n- * use your version of this file under the terms of the MPL, indicate your\\n+ * use your version of this file under the terms of the NPL, indicate your\\n  * decision by deleting the provisions above and replace them with the notice\\n  * and other provisions required by the GPL or the LGPL. If you do not delete\\n  * the provisions above, a recipient may use your version of this file under\\n  * the terms of any one of the MPL, the GPL or the LGPL.\\n  *\\n- * ***** END LICENSE BLOCK ***** */\\n+ * ----- END LICENSE BLOCK ----- */\\n \\n-#include \\\"nsSVGValue.h\\\"\\n-\\n-#ifndef __NS_SVGANIMATEDENUMERATION_H__\\n-#define __NS_SVGANIMATEDENUMERATION_H__\\n-\\n-#include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n-#include \\\"nsISVGEnum.h\\\"\\n-\\n-nsresult NS_NewSVGAnimatedEnumeration(nsIDOMSVGAnimatedEnumeration** result,\\n-\\t\\t\\t\\t      nsISVGEnum* baseVal);\\n-\\n-#endif //__NS_SVGANIMATEDENUMERATION_H__\\n+#include \\\"domstubs.idl\\\"\\n \\n+/**\\n+ * The nsIDOMSVGUnitTypes interface is the interface to SVG unit types.\\n+ *\\n+ * For more information on this interface please see\\n+ * http://www.w3.org/TR/SVG11/types.html\\n+ *\\n+ */\\n \\n+[scriptable, uuid(154b572f-3d0b-49c0-8b5d-8864d05bd3d1)]\\n+interface nsIDOMSVGUnitTypes : nsISupports\\n+{\\n+  // Unit Types\\n+  const unsigned short SVG_UNIT_TYPE_UNKNOWN           = 0;\\n+  const unsigned short SVG_UNIT_TYPE_USERSPACEONUSE    = 1;\\n+  const unsigned short SVG_UNIT_TYPE_OBJECTBOUNDINGBOX = 2;\\n+};\\ndiff --git a/dom/public/nsDOMClassInfoID.h b/dom/public/nsDOMClassInfoID.h\\nindex f4aa997..b1ab3aa 100644\\n--- a/dom/public/nsDOMClassInfoID.h\\n+++ b/dom/public/nsDOMClassInfoID.h\\n@@ -342,6 +342,7 @@ enum nsDOMClassInfoID {\\n   eDOMClassInfo_SVGRect_id,\\n   eDOMClassInfo_SVGTransform_id,\\n   eDOMClassInfo_SVGTransformList_id,\\n+  eDOMClassInfo_SVGUnitTypes_id,\\n   eDOMClassInfo_SVGZoomEvent_id,\\n #endif // MOZ_SVG\\n \\ndiff --git a/dom/src/base/nsDOMClassInfo.cpp b/dom/src/base/nsDOMClassInfo.cpp\\nindex db7d310..f636fa1 100644\\n--- a/dom/src/base/nsDOMClassInfo.cpp\\n+++ b/dom/src/base/nsDOMClassInfo.cpp\\n@@ -414,6 +414,7 @@\\n #include \\\"nsIDOMSVGTSpanElement.h\\\"\\n #include \\\"nsIDOMSVGURIReference.h\\\"\\n #include \\\"nsIDOMSVGUseElement.h\\\"\\n+#include \\\"nsIDOMSVGUnitTypes.h\\\"\\n #include \\\"nsIDOMSVGZoomAndPan.h\\\"\\n #include \\\"nsIDOMSVGZoomEvent.h\\\"\\n #endif // MOZ_SVG\\n@@ -1103,6 +1104,8 @@ static nsDOMClassInfoData sClassInfoData[] = {\\n                            DOM_DEFAULT_SCRIPTABLE_FLAGS)\\n   NS_DEFINE_CLASSINFO_DATA(SVGTransformList, nsDOMGenericSH,\\n                            DOM_DEFAULT_SCRIPTABLE_FLAGS)\\n+  NS_DEFINE_CLASSINFO_DATA(SVGUnitTypes, nsDOMGenericSH,\\n+                           DOM_DEFAULT_SCRIPTABLE_FLAGS)\\n   NS_DEFINE_CLASSINFO_DATA(SVGZoomEvent, nsDOMGenericSH,\\n                            DOM_DEFAULT_SCRIPTABLE_FLAGS)\\n #endif // MOZ_SVG\\n@@ -2618,6 +2621,7 @@ nsDOMClassInfo::Init()\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLocatable)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTransformable)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)\\n+    DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES\\n   DOM_CLASSINFO_MAP_END\\n \\n@@ -2785,6 +2789,7 @@ nsDOMClassInfo::Init()\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterElement)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)\\n+    DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES\\n   DOM_CLASSINFO_MAP_END\\n \\n@@ -2804,6 +2809,7 @@ nsDOMClassInfo::Init()\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLinearGradientElement)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)\\n+    DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES\\n   DOM_CLASSINFO_MAP_END\\n \\n@@ -2822,6 +2828,7 @@ nsDOMClassInfo::Init()\\n   DOM_CLASSINFO_MAP_BEGIN(SVGMaskElement, nsIDOMSVGMaskElement)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGMaskElement)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)\\n+    DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES\\n   DOM_CLASSINFO_MAP_END\\n \\n@@ -2841,6 +2848,7 @@ nsDOMClassInfo::Init()\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)\\n+    DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES\\n   DOM_CLASSINFO_MAP_END\\n \\n@@ -2861,6 +2869,7 @@ nsDOMClassInfo::Init()\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGRadialGradientElement)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)\\n+    DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES\\n   DOM_CLASSINFO_MAP_END\\n \\n@@ -3151,6 +3160,10 @@ nsDOMClassInfo::Init()\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTransformList)\\n   DOM_CLASSINFO_MAP_END\\n \\n+  DOM_CLASSINFO_MAP_BEGIN(SVGUnitTypes, nsIDOMSVGUnitTypes)\\n+    DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)\\n+  DOM_CLASSINFO_MAP_END\\n+\\n   DOM_CLASSINFO_MAP_BEGIN(SVGZoomEvent, nsIDOMSVGZoomEvent)\\n     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGZoomEvent)\\n     DOM_CLASSINFO_EVENT_MAP_ENTRIES\\ndiff --git a/layout/svg/base/src/nsSVGClipPathFrame.cpp b/layout/svg/base/src/nsSVGClipPathFrame.cpp\\nindex 90c954f..f3b864a 100644\\n--- a/layout/svg/base/src/nsSVGClipPathFrame.cpp\\n+++ b/layout/svg/base/src/nsSVGClipPathFrame.cpp\\n@@ -38,7 +38,6 @@\\n #include \\\"nsIDocument.h\\\"\\n #include \\\"nsIDOMSVGClipPathElement.h\\\"\\n #include \\\"nsSVGClipPathFrame.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n #include \\\"nsGkAtoms.h\\\"\\n #include \\\"nsSVGUtils.h\\\"\\n #include \\\"nsSVGClipPathElement.h\\\"\\n@@ -211,11 +210,11 @@ nsSVGClipPathFrame::GetCanvasTM()\\n     canvasTM = mClipParentMatrix;\\n \\n   /* object bounding box? */\\n-  PRUint16 units;\\n-  clipPath->mClipPathUnits->GetAnimVal(&units);\\n-  \\n+  PRUint16 units =\\n+    clipPath->mEnumAttributes[nsSVGClipPathElement::CLIPPATHUNITS].GetAnimValue();\\n+\\n   if (mClipParent &&\\n-      units == nsIDOMSVGClipPathElement::SVG_CPUNITS_OBJECTBOUNDINGBOX) {\\n+      units == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n     nsCOMPtr<nsIDOMSVGRect> rect;\\n     nsresult rv = mClipParent->GetBBox(getter_AddRefs(rect));\\n \\ndiff --git a/layout/svg/base/src/nsSVGFilterFrame.cpp b/layout/svg/base/src/nsSVGFilterFrame.cpp\\nindex a7e333d..b65c211 100644\\n--- a/layout/svg/base/src/nsSVGFilterFrame.cpp\\n+++ b/layout/svg/base/src/nsSVGFilterFrame.cpp\\n@@ -42,7 +42,6 @@\\n #include \\\"nsISVGFilter.h\\\"\\n #include \\\"nsGkAtoms.h\\\"\\n #include \\\"nsIDOMSVGAnimatedInteger.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n #include \\\"nsSVGUtils.h\\\"\\n #include \\\"nsSVGFilterElement.h\\\"\\n #include \\\"nsSVGFilterInstance.h\\\"\\n@@ -153,10 +152,10 @@ nsSVGFilterFrame::FilterPaint(nsSVGRenderState *aContext,\\n   tmpWidth = &filter->mLengthAttributes[nsSVGFilterElement::WIDTH];\\n   tmpHeight = &filter->mLengthAttributes[nsSVGFilterElement::HEIGHT];\\n \\n-  PRUint16 units;\\n-  filter->mFilterUnits->GetAnimVal(&units);\\n+  PRUint16 units =\\n+    filter->mEnumAttributes[nsSVGFilterElement::FILTERUNITS].GetAnimValue();\\n \\n-  if (units == nsIDOMSVGFilterElement::SVG_FUNITS_OBJECTBOUNDINGBOX) {\\n+  if (units == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n     if (!bbox)\\n       return NS_OK;\\n \\n@@ -241,8 +240,9 @@ nsSVGFilterFrame::FilterPaint(nsSVGRenderState *aContext,\\n \\n   aTarget->PaintSVG(&tmpState, nsnull);\\n \\n-  PRUint16 primitiveUnits;\\n-  filter->mPrimitiveUnits->GetAnimVal(&primitiveUnits);\\n+  PRUint16 primitiveUnits =\\n+    filter->mEnumAttributes[nsSVGFilterElement::PRIMITIVEUNITS].GetAnimValue();\\n+\\n   nsSVGFilterInstance instance(target, bbox,\\n                                x, y, width, height,\\n                                filterRes.width, filterRes.height,\\n@@ -336,10 +336,8 @@ nsSVGFilterFrame::GetInvalidationRegion(nsIFrame *aTarget)\\n \\n   nsSVGFilterElement *filter = static_cast<nsSVGFilterElement*>(mContent);\\n \\n-  nsCOMPtr<nsIDOMSVGAnimatedEnumeration> units;\\n-  filter->GetFilterUnits(getter_AddRefs(units));\\n-  PRUint16 type;\\n-  units->GetAnimVal(&type);\\n+  PRUint16 type =\\n+    filter->mEnumAttributes[nsSVGFilterElement::FILTERUNITS].GetAnimValue();\\n \\n   float x, y, width, height;\\n   nsCOMPtr<nsIDOMSVGRect> bbox;\\n@@ -358,7 +356,7 @@ nsSVGFilterFrame::GetInvalidationRegion(nsIFrame *aTarget)\\n   tmpWidth = &filter->mLengthAttributes[nsSVGFilterElement::WIDTH];\\n   tmpHeight = &filter->mLengthAttributes[nsSVGFilterElement::HEIGHT];\\n \\n-  if (type == nsIDOMSVGFilterElement::SVG_FUNITS_OBJECTBOUNDINGBOX) {\\n+  if (type == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n     if (!bbox)\\n       return nsRect();\\n \\n@@ -425,7 +423,7 @@ float\\n nsSVGFilterInstance::GetPrimitiveLength(nsSVGLength2 *aLength)\\n {\\n   float value;\\n-  if (mPrimitiveUnits == nsIDOMSVGFilterElement::SVG_FUNITS_OBJECTBOUNDINGBOX)\\n+  if (mPrimitiveUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX)\\n     value = nsSVGUtils::ObjectSpace(mTargetBBox, aLength);\\n   else\\n     value = nsSVGUtils::UserSpace(mTarget, aLength);\\n@@ -459,8 +457,7 @@ nsSVGFilterInstance::GetFilterSubregion(\\n \\n   float x, y, width, height;\\n \\n-  if (mPrimitiveUnits == \\n-      nsIDOMSVGFilterElement::SVG_FUNITS_OBJECTBOUNDINGBOX) {\\n+  if (mPrimitiveUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n     x      = nsSVGUtils::ObjectSpace(mTargetBBox, tmpX);\\n     y      = nsSVGUtils::ObjectSpace(mTargetBBox, tmpY);\\n     width  = nsSVGUtils::ObjectSpace(mTargetBBox, tmpWidth);\\ndiff --git a/layout/svg/base/src/nsSVGGradientFrame.cpp b/layout/svg/base/src/nsSVGGradientFrame.cpp\\nindex 6261d70..d06f0e8 100644\\n--- a/layout/svg/base/src/nsSVGGradientFrame.cpp\\n+++ b/layout/svg/base/src/nsSVGGradientFrame.cpp\\n@@ -244,7 +244,7 @@ nsSVGGradientFrame::GetGradientTransform(nsSVGGeometryFrame *aSource)\\n \\n   PRUint16 gradientUnits = GetGradientUnits();\\n   nsIAtom *callerType = aSource->GetType();\\n-  if (gradientUnits == nsIDOMSVGGradientElement::SVG_GRUNITS_USERSPACEONUSE) {\\n+  if (gradientUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE) {\\n     // If this gradient is applied to text, our caller\\n     // will be the glyph, which is not a container, so we\\n     // need to get the parent\\n@@ -256,7 +256,7 @@ nsSVGGradientFrame::GetGradientTransform(nsSVGGeometryFrame *aSource)\\n     NS_ASSERTION(mSourceContent, \\\"Can't get content for gradient\\\");\\n   }\\n   else {\\n-    NS_ASSERTION(gradientUnits == nsIDOMSVGGradientElement::SVG_GRUNITS_OBJECTBOUNDINGBOX,\\n+    NS_ASSERTION(gradientUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX,\\n                  \\\"Unknown gradientUnits type\\\");\\n     // objectBoundingBox is the default anyway\\n \\n@@ -312,9 +312,7 @@ nsSVGGradientFrame::GetSpreadMethod()\\n   nsSVGGradientElement *gradElement = static_cast<nsSVGGradientElement*>\\n                                                  (gradient);\\n \\n-  PRUint16 val;\\n-  gradElement->mSpreadMethod->GetAnimVal(&val);\\n-  return val;\\n+  return gradElement->mEnumAttributes[nsSVGGradientElement::SPREADMETHOD].GetAnimValue();\\n }\\n \\n //----------------------------------------------------------------------\\n@@ -534,9 +532,7 @@ nsSVGGradientFrame::GetGradientUnits()\\n   nsSVGGradientElement *gradElement = static_cast<nsSVGGradientElement*>\\n                                                  (gradient);\\n \\n-  PRUint16 units;\\n-  gradElement->mGradientUnits->GetAnimVal(&units);\\n-  return units;\\n+  return gradElement->mEnumAttributes[nsSVGGradientElement::GRADIENTUNITS].GetAnimValue();\\n }\\n \\n // -------------------------------------------------------------------------\\n@@ -582,16 +578,16 @@ nsSVGLinearGradientFrame::GradientLookupAttribute(nsIAtom *aAtomName,\\n     static_cast<nsSVGLinearGradientElement*>(gradient);\\n \\n   // Object bounding box units are handled by setting the appropriate\\n-  // transform in GetGradientTransfrom, but we need to handle user\\n+  // transform in GetGradientTransform, but we need to handle user\\n   // space units as part of the individual Get* routines.  Fixes 323669.\\n \\n   PRUint16 gradientUnits = GetGradientUnits();\\n-  if (gradientUnits == nsIDOMSVGGradientElement::SVG_GRUNITS_USERSPACEONUSE) {\\n+  if (gradientUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE) {\\n     return nsSVGUtils::UserSpace(mSourceContent,\\n                                  &element->mLengthAttributes[aEnumName]);\\n   }\\n \\n-  NS_ASSERTION(gradientUnits == nsIDOMSVGGradientElement::SVG_GRUNITS_OBJECTBOUNDINGBOX,\\n+  NS_ASSERTION(gradientUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX,\\n                \\\"Unknown gradientUnits type\\\");\\n \\n   return element->mLengthAttributes[aEnumName].\\n@@ -664,16 +660,16 @@ nsSVGRadialGradientFrame::GradientLookupAttribute(nsIAtom *aAtomName,\\n     static_cast<nsSVGRadialGradientElement*>(gradient);\\n \\n   // Object bounding box units are handled by setting the appropriate\\n-  // transform in GetGradientTransfrom, but we need to handle user\\n+  // transform in GetGradientTransform, but we need to handle user\\n   // space units as part of the individual Get* routines.  Fixes 323669.\\n \\n   PRUint16 gradientUnits = GetGradientUnits();\\n-  if (gradientUnits == nsIDOMSVGGradientElement::SVG_GRUNITS_USERSPACEONUSE) {\\n+  if (gradientUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_USERSPACEONUSE) {\\n     return nsSVGUtils::UserSpace(mSourceContent,\\n                                  &element->mLengthAttributes[aEnumName]);\\n   }\\n \\n-  NS_ASSERTION(gradientUnits == nsIDOMSVGGradientElement::SVG_GRUNITS_OBJECTBOUNDINGBOX,\\n+  NS_ASSERTION(gradientUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX,\\n                \\\"Unknown gradientUnits type\\\");\\n \\n   return element->mLengthAttributes[aEnumName].\\ndiff --git a/layout/svg/base/src/nsSVGMaskFrame.cpp b/layout/svg/base/src/nsSVGMaskFrame.cpp\\nindex 9f30d14..3dde6908 100644\\n--- a/layout/svg/base/src/nsSVGMaskFrame.cpp\\n+++ b/layout/svg/base/src/nsSVGMaskFrame.cpp\\n@@ -36,7 +36,6 @@\\n \\n #include \\\"nsIDocument.h\\\"\\n #include \\\"nsSVGMaskFrame.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n #include \\\"nsSVGContainerFrame.h\\\"\\n #include \\\"nsSVGMaskElement.h\\\"\\n #include \\\"nsIDOMSVGMatrix.h\\\"\\n@@ -117,10 +116,10 @@ nsSVGMaskFrame::ComputeMaskAlpha(nsSVGRenderState *aContext,\\n     tmpWidth = &mask->mLengthAttributes[nsSVGMaskElement::WIDTH];\\n     tmpHeight = &mask->mLengthAttributes[nsSVGMaskElement::HEIGHT];\\n \\n-    PRUint16 units;\\n-    mask->mMaskUnits->GetAnimVal(&units);\\n+    PRUint16 units =\\n+      mask->mEnumAttributes[nsSVGMaskElement::MASKUNITS].GetAnimValue();\\n \\n-    if (units == nsIDOMSVGMaskElement::SVG_MUNITS_OBJECTBOUNDINGBOX) {\\n+    if (units == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n \\n       aParent->SetMatrixPropagation(PR_FALSE);\\n       aParent->NotifyCanvasTMChanged(PR_TRUE);\\n@@ -257,11 +256,11 @@ nsSVGMaskFrame::GetCanvasTM()\\n   /* object bounding box? */\\n   nsSVGMaskElement *mask = static_cast<nsSVGMaskElement*>(mContent);\\n \\n-  PRUint16 contentUnits;\\n-  mask->mMaskContentUnits->GetAnimVal(&contentUnits);\\n+  PRUint16 contentUnits =\\n+    mask->mEnumAttributes[nsSVGMaskElement::MASKCONTENTUNITS].GetAnimValue();\\n \\n   if (mMaskParent &&\\n-      contentUnits == nsIDOMSVGMaskElement::SVG_MUNITS_OBJECTBOUNDINGBOX) {\\n+      contentUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n     nsCOMPtr<nsIDOMSVGRect> rect;\\n     nsresult rv = mMaskParent->GetBBox(getter_AddRefs(rect));\\n \\ndiff --git a/layout/svg/base/src/nsSVGOuterSVGFrame.cpp b/layout/svg/base/src/nsSVGOuterSVGFrame.cpp\\nindex 1d4c236..3ef7934 100644\\n--- a/layout/svg/base/src/nsSVGOuterSVGFrame.cpp\\n+++ b/layout/svg/base/src/nsSVGOuterSVGFrame.cpp\\n@@ -160,7 +160,6 @@ nsSVGOuterSVGFrame::InitSVG()\\n     // we only care about our content's zoom and pan values if it's the root element\\n     if (doc->GetRootContent() == mContent) {\\n       nsSVGSVGElement *SVGElement = static_cast<nsSVGSVGElement*>(mContent);\\n-      SVGElement->GetZoomAndPanEnum(getter_AddRefs(mZoomAndPan));\\n       SVGElement->GetCurrentTranslate(getter_AddRefs(mCurrentTranslate));\\n       SVGElement->GetCurrentScaleNumber(getter_AddRefs(mCurrentScale));\\n     }\\n@@ -568,24 +567,21 @@ nsSVGOuterSVGFrame::GetCanvasTM()\\n     nsSVGSVGElement *svgElement = static_cast<nsSVGSVGElement*>(mContent);\\n     svgElement->GetViewboxToViewportTransform(getter_AddRefs(mCanvasTM));\\n \\n-    if (mZoomAndPan) {\\n-      // our content is the document element so we must premultiply the values\\n-      // of it's currentScale and currentTranslate properties\\n-      PRUint16 val;\\n-      mZoomAndPan->GetIntegerValue(val);\\n-      if (val == nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY) {\\n-        nsCOMPtr<nsIDOMSVGMatrix> zoomPanMatrix;\\n-        nsCOMPtr<nsIDOMSVGMatrix> temp;\\n-        float scale, x, y;\\n-        mCurrentScale->GetValue(&scale);\\n-        mCurrentTranslate->GetX(&x);\\n-        mCurrentTranslate->GetY(&y);\\n-        svgElement->CreateSVGMatrix(getter_AddRefs(zoomPanMatrix));\\n-        zoomPanMatrix->Translate(x, y, getter_AddRefs(temp));\\n-        temp->Scale(scale, getter_AddRefs(zoomPanMatrix));\\n-        zoomPanMatrix->Multiply(mCanvasTM, getter_AddRefs(temp));\\n-        temp.swap(mCanvasTM);\\n-      }\\n+    // our content is the document element so we must premultiply the values\\n+    // of its currentScale and currentTranslate properties\\n+    if (svgElement->mEnumAttributes[nsSVGSVGElement::ZOOMANDPAN].GetAnimValue()\\n+        == nsIDOMSVGZoomAndPan::SVG_ZOOMANDPAN_MAGNIFY) {\\n+      nsCOMPtr<nsIDOMSVGMatrix> zoomPanMatrix;\\n+      nsCOMPtr<nsIDOMSVGMatrix> temp;\\n+      float scale, x, y;\\n+      mCurrentScale->GetValue(&scale);\\n+      mCurrentTranslate->GetX(&x);\\n+      mCurrentTranslate->GetY(&y);\\n+      svgElement->CreateSVGMatrix(getter_AddRefs(zoomPanMatrix));\\n+      zoomPanMatrix->Translate(x, y, getter_AddRefs(temp));\\n+      temp->Scale(scale, getter_AddRefs(zoomPanMatrix));\\n+      zoomPanMatrix->Multiply(mCanvasTM, getter_AddRefs(temp));\\n+      temp.swap(mCanvasTM);\\n     }\\n   }\\n   nsIDOMSVGMatrix* retval = mCanvasTM.get();\\ndiff --git a/layout/svg/base/src/nsSVGOuterSVGFrame.h b/layout/svg/base/src/nsSVGOuterSVGFrame.h\\nindex a30a0e6..58bf7a2 100644\\n--- a/layout/svg/base/src/nsSVGOuterSVGFrame.h\\n+++ b/layout/svg/base/src/nsSVGOuterSVGFrame.h\\n@@ -41,7 +41,6 @@\\n \\n #include \\\"nsSVGContainerFrame.h\\\"\\n #include \\\"nsISVGSVGFrame.h\\\"\\n-#include \\\"nsISVGEnum.h\\\"\\n #include \\\"nsIDOMSVGPoint.h\\\"\\n #include \\\"nsIDOMSVGNumber.h\\\"\\n \\n@@ -134,7 +133,6 @@ protected:\\n   nsCOMPtr<nsIDOMSVGMatrix> mCanvasTM;\\n \\n   // zoom and pan\\n-  nsCOMPtr<nsISVGEnum>      mZoomAndPan;\\n   nsCOMPtr<nsIDOMSVGPoint>  mCurrentTranslate;\\n   nsCOMPtr<nsIDOMSVGNumber> mCurrentScale;\\n \\ndiff --git a/layout/svg/base/src/nsSVGPatternFrame.cpp b/layout/svg/base/src/nsSVGPatternFrame.cpp\\nindex 4cb3445..2849d9a 100644\\n--- a/layout/svg/base/src/nsSVGPatternFrame.cpp\\n+++ b/layout/svg/base/src/nsSVGPatternFrame.cpp\\n@@ -37,7 +37,6 @@\\n  * ***** END LICENSE BLOCK ***** */\\n \\n #include \\\"nsGkAtoms.h\\\"\\n-#include \\\"nsIDOMSVGAnimatedEnum.h\\\"\\n #include \\\"nsIDOMSVGAnimatedRect.h\\\"\\n #include \\\"nsIDOMSVGAnimTransformList.h\\\"\\n #include \\\"nsSVGTransformList.h\\\"\\n@@ -388,7 +387,7 @@ nsSVGPatternFrame::GetPatternUnits()\\n     // No, return the values\\n     nsSVGPatternElement *patternElement = static_cast<nsSVGPatternElement*>\\n                                                      (mContent);\\n-    patternElement->mPatternUnits->GetAnimVal(&rv);\\n+    rv = patternElement->mEnumAttributes[nsSVGPatternElement::PATTERNUNITS].GetAnimValue();\\n   } else {\\n     // Yes, get it from the target\\n     rv = mNextPattern->GetPatternUnits();\\n@@ -407,7 +406,7 @@ nsSVGPatternFrame::GetPatternContentUnits()\\n     // No, return the values\\n     nsSVGPatternElement *patternElement = static_cast<nsSVGPatternElement*>\\n                                                      (mContent);\\n-    patternElement->mPatternContentUnits->GetAnimVal(&rv);\\n+    rv = patternElement->mEnumAttributes[nsSVGPatternElement::PATTERNCONTENTUNITS].GetAnimValue();\\n   } else {\\n     // Yes, get it from the target\\n     rv = mNextPattern->GetPatternContentUnits();\\n@@ -637,7 +636,7 @@ nsSVGPatternFrame::GetPatternRect(nsIDOMSVGRect **patternRect,\\n   tmpHeight = GetHeight();\\n   tmpWidth = GetWidth();\\n \\n-  if (type == nsIDOMSVGPatternElement::SVG_PUNITS_OBJECTBOUNDINGBOX) {\\n+  if (type == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n     x = nsSVGUtils::ObjectSpace(bbox, tmpX);\\n     y = nsSVGUtils::ObjectSpace(bbox, tmpY);\\n     width = nsSVGUtils::ObjectSpace(bbox, tmpWidth);\\n@@ -668,7 +667,7 @@ nsSVGPatternFrame::ConstructCTM(nsIDOMSVGMatrix **aCTM,\\n   // this must be handled in the CTM\\n   PRUint16 type = GetPatternContentUnits();\\n \\n-  if (type == nsIDOMSVGPatternElement::SVG_PUNITS_OBJECTBOUNDINGBOX) {\\n+  if (type == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n     // Use the bounding box\\n     float width, height;\\n     callerBBox->GetWidth(&width);\\n@@ -727,7 +726,7 @@ nsSVGPatternFrame::GetPatternMatrix(nsIDOMSVGRect *bbox,\\n   bbox->GetY(&miny);\\n \\n   PRUint16 type = GetPatternContentUnits();\\n-  if (type == nsIDOMSVGPatternElement::SVG_PUNITS_OBJECTBOUNDINGBOX) {\\n+  if (type == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n     float x, y;\\n     callerBBox->GetX(&x);\\n     callerBBox->GetY(&y);\\n@@ -776,7 +775,7 @@ nsSVGPatternFrame::GetCallerGeometry(nsIDOMSVGMatrix **aCTM,\\n   callerSVGFrame->GetBBox(aBBox);\\n   // Sanity check\\n   PRUint16 type = GetPatternUnits();\\n-  if (type == nsIDOMSVGPatternElement::SVG_PUNITS_OBJECTBOUNDINGBOX) {\\n+  if (type == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {\\n     float width, height;\\n     (*aBBox)->GetWidth(&width);\\n     (*aBBox)->GetHeight(&height);\\n\""}