{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas9842dc1\""},"diff":"\"9842dc1 Bug 390615: Add scriptable interface to verify digital signatures. r=kaie, a=blocking-1.9\\ndiff --git a/security/manager/ssl/public/Makefile.in b/security/manager/ssl/public/Makefile.in\\nindex fcd4503..e22b745 100644\\n--- a/security/manager/ssl/public/Makefile.in\\n+++ b/security/manager/ssl/public/Makefile.in\\n@@ -94,6 +94,7 @@ XPIDLSRCS = \\\\\\n     nsICipherInfo.idl \\\\\\n     nsIStreamCipher.idl \\\\\\n     nsIKeyModule.idl \\\\\\n+    nsIDataSignatureVerifier.idl \\\\\\n     $(NULL)\\n \\n ifdef MOZ_XUL\\ndiff --git a/security/manager/ssl/public/nsIDataSignatureVerifier.idl b/security/manager/ssl/public/nsIDataSignatureVerifier.idl\\nnew file mode 100644\\nindex 0000000..27f8087\\n--- /dev/null\\n+++ b/security/manager/ssl/public/nsIDataSignatureVerifier.idl\\n@@ -0,0 +1,58 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is the mozilla.org code.\\n+ *\\n+ * The Initial Developer of the Original Code is Ben Goodger.\\n+ * Portions created by the Initial Developer are Copyright (C) 2004\\n+ * the Initial Developer. All Rights Reserved.\\n+ *\\n+ * Contributor(s):\\n+ *  Dave Townsend <dtownsend@oxymoronical.com>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+\\n+#include \\\"nsISupports.idl\\\"\\n+\\n+/**\\n+ * An interface for verifying that a given string of data was signed by the\\n+ * private key matching the given public key.\\n+ */\\n+[scriptable, uuid(0a84b3d5-6ba9-432d-89da-4fbd0b0f2aec)]\\n+interface nsIDataSignatureVerifier : nsISupports\\n+{\\n+  /**\\n+   * Verifies that the data matches the data that was used to generate the\\n+   * signature.\\n+   *\\n+   * @param aData      The data to be tested.\\n+   * @param aSignature The signature of the data, base64 encoded.\\n+   * @param aPublicKey The public part of the key used for signing, DER encoded\\n+   *                   then base64 encoded.\\n+   * @returns true if the signature matches the data, false if not.\\n+   */\\n+  boolean verifyData(in ACString aData, in ACString aSignature, in ACString aPublicKey);\\n+};\\ndiff --git a/security/manager/ssl/src/Makefile.in b/security/manager/ssl/src/Makefile.in\\nindex 9fc4691..fd15429 100644\\n--- a/security/manager/ssl/src/Makefile.in\\n+++ b/security/manager/ssl/src/Makefile.in\\n@@ -96,7 +96,8 @@ CPPSRCS = \\t\\t\\t\\t\\\\\\n   nsStreamCipher.cpp \\\\\\n   nsKeyModule.cpp \\\\\\n   nsIdentityChecking.cpp \\\\\\n-\\t$(NULL)\\n+  nsDataSignatureVerifier.cpp \\\\\\n+  $(NULL)\\n \\n ifdef MOZ_XUL\\n CPPSRCS += nsCertTree.cpp\\ndiff --git a/security/manager/ssl/src/nsDataSignatureVerifier.cpp b/security/manager/ssl/src/nsDataSignatureVerifier.cpp\\nnew file mode 100644\\nindex 0000000..e8188b9\\n--- /dev/null\\n+++ b/security/manager/ssl/src/nsDataSignatureVerifier.cpp\\n@@ -0,0 +1,134 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is mozilla.org code.\\n+ *\\n+ * Contributor(s):\\n+ *  Dave Townsend <dtownsend@oxymoronical.com>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+#include \\\"nsDataSignatureVerifier.h\\\"\\n+#include \\\"nsCOMPtr.h\\\"\\n+#include \\\"nsString.h\\\"\\n+\\n+#include \\\"seccomon.h\\\"\\n+#include \\\"nssb64.h\\\"\\n+#include \\\"certt.h\\\"\\n+#include \\\"keyhi.h\\\"\\n+#include \\\"cryptohi.h\\\"\\n+\\n+SEC_ASN1_MKSUB(SECOID_AlgorithmIDTemplate)\\n+\\n+NS_IMPL_ISUPPORTS1(nsDataSignatureVerifier, nsIDataSignatureVerifier)\\n+\\n+const SEC_ASN1Template CERT_SignatureDataTemplate[] =\\n+{\\n+    { SEC_ASN1_SEQUENCE,\\n+        0, NULL, sizeof(CERTSignedData) },\\n+    { SEC_ASN1_INLINE | SEC_ASN1_XTRN,\\n+        offsetof(CERTSignedData,signatureAlgorithm),\\n+        SEC_ASN1_SUB(SECOID_AlgorithmIDTemplate), },\\n+    { SEC_ASN1_BIT_STRING,\\n+        offsetof(CERTSignedData,signature), },\\n+    { 0, }\\n+};\\n+\\n+NS_IMETHODIMP\\n+nsDataSignatureVerifier::VerifyData(const nsACString & aData,\\n+                                    const nsACString & aSignature,\\n+                                    const nsACString & aPublicKey,\\n+                                    PRBool *_retval)\\n+{\\n+    // Allocate an arena to handle the majority of the allocations\\n+    PRArenaPool *arena;\\n+    arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);\\n+    if (!arena)\\n+        return NS_ERROR_OUT_OF_MEMORY;\\n+\\n+    // Base 64 decode the key\\n+    SECItem keyItem;\\n+    PORT_Memset(&keyItem, 0, sizeof(SECItem));\\n+    if (!NSSBase64_DecodeBuffer(arena, &keyItem,\\n+                                nsPromiseFlatCString(aPublicKey).get(),\\n+                                aPublicKey.Length())) {\\n+        PORT_FreeArena(arena, PR_FALSE);\\n+        return NS_ERROR_FAILURE;\\n+    }\\n+    \\n+    // Extract the public key from the data\\n+    CERTSubjectPublicKeyInfo *pki = SECKEY_DecodeDERSubjectPublicKeyInfo(&keyItem);\\n+    if (!pki) {\\n+        PORT_FreeArena(arena, PR_FALSE);\\n+        return NS_ERROR_FAILURE;\\n+    }\\n+    SECKEYPublicKey *publicKey = SECKEY_ExtractPublicKey(pki);\\n+    SECKEY_DestroySubjectPublicKeyInfo(pki);\\n+    pki = nsnull;\\n+    \\n+    if (!publicKey) {\\n+        PORT_FreeArena(arena, PR_FALSE);\\n+        return NS_ERROR_FAILURE;\\n+    }\\n+    \\n+    // Base 64 decode the signature\\n+    SECItem signatureItem;\\n+    PORT_Memset(&signatureItem, 0, sizeof(SECItem));\\n+    if (!NSSBase64_DecodeBuffer(arena, &signatureItem,\\n+                                nsPromiseFlatCString(aSignature).get(),\\n+                                aSignature.Length())) {\\n+        SECKEY_DestroyPublicKey(publicKey);\\n+        PORT_FreeArena(arena, PR_FALSE);\\n+        return NS_ERROR_FAILURE;\\n+    }\\n+    \\n+    // Decode the signature and algorithm\\n+    CERTSignedData sigData;\\n+    PORT_Memset(&sigData, 0, sizeof(CERTSignedData));\\n+    SECStatus ss = SEC_QuickDERDecodeItem(arena, &sigData, \\n+                                          CERT_SignatureDataTemplate,\\n+                                          &signatureItem);\\n+    if (ss != SECSuccess) {\\n+        SECKEY_DestroyPublicKey(publicKey);\\n+        PORT_FreeArena(arena, PR_FALSE);\\n+        return NS_ERROR_FAILURE;\\n+    }\\n+    \\n+    // Perform the final verification\\n+    DER_ConvertBitString(&(sigData.signature));\\n+    ss = VFY_VerifyDataWithAlgorithmID((const unsigned char*)nsPromiseFlatCString(aData).get(),\\n+                                       aData.Length(), publicKey,\\n+                                       &(sigData.signature),\\n+                                       &(sigData.signatureAlgorithm),\\n+                                       NULL, NULL);\\n+    \\n+    // Clean up remaining objects\\n+    SECKEY_DestroyPublicKey(publicKey);\\n+    PORT_FreeArena(arena, PR_FALSE);\\n+    \\n+    *_retval = (ss == SECSuccess);\\n+\\n+    return NS_OK;\\n+}\\ndiff --git a/security/manager/ssl/src/nsDataSignatureVerifier.h b/security/manager/ssl/src/nsDataSignatureVerifier.h\\nnew file mode 100644\\nindex 0000000..f9fa4f0\\n--- /dev/null\\n+++ b/security/manager/ssl/src/nsDataSignatureVerifier.h\\n@@ -0,0 +1,63 @@\\n+/* ***** BEGIN LICENSE BLOCK *****\\n+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1\\n+ *\\n+ * The contents of this file are subject to the Mozilla Public License Version\\n+ * 1.1 (the \\\"License\\\"); you may not use this file except in compliance with\\n+ * the License. You may obtain a copy of the License at\\n+ * http://www.mozilla.org/MPL/\\n+ *\\n+ * Software distributed under the License is distributed on an \\\"AS IS\\\" basis,\\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\\n+ * for the specific language governing rights and limitations under the\\n+ * License.\\n+ *\\n+ * The Original Code is mozilla.org code.\\n+ *\\n+ * Contributor(s):\\n+ *  Dave Townsend <dtownsend@oxymoronical.com>\\n+ *\\n+ * Alternatively, the contents of this file may be used under the terms of\\n+ * either the GNU General Public License Version 2 or later (the \\\"GPL\\\"), or\\n+ * the GNU Lesser General Public License Version 2.1 or later (the \\\"LGPL\\\"),\\n+ * in which case the provisions of the GPL or the LGPL are applicable instead\\n+ * of those above. If you wish to allow use of your version of this file only\\n+ * under the terms of either the GPL or the LGPL, and not to allow others to\\n+ * use your version of this file under the terms of the MPL, indicate your\\n+ * decision by deleting the provisions above and replace them with the notice\\n+ * and other provisions required by the GPL or the LGPL. If you do not delete\\n+ * the provisions above, a recipient may use your version of this file under\\n+ * the terms of any one of the MPL, the GPL or the LGPL.\\n+ *\\n+ * ***** END LICENSE BLOCK ***** */\\n+\\n+#ifndef _NS_DATASIGNATUREVERIFIER_H_\\n+#define _NS_DATASIGNATUREVERIFIER_H_\\n+\\n+#include \\\"nsIDataSignatureVerifier.h\\\"\\n+\\n+#include \\\"keythi.h\\\"\\n+\\n+// 296d76aa-275b-4f3c-af8a-30a4026c18fc\\n+#define NS_DATASIGNATUREVERIFIER_CID \\\\\\n+    { 0x296d76aa, 0x275b, 0x4f3c, \\\\\\n+    { 0xaf, 0x8a, 0x30, 0xa4, 0x02, 0x6c, 0x18, 0xfc } }\\n+#define NS_DATASIGNATUREVERIFIER_CONTRACTID \\\\\\n+    \\\"@mozilla.org/security/datasignatureverifier;1\\\"\\n+\\n+class nsDataSignatureVerifier : public nsIDataSignatureVerifier\\n+{\\n+public:\\n+  NS_DECL_ISUPPORTS\\n+  NS_DECL_NSIDATASIGNATUREVERIFIER\\n+\\n+  nsDataSignatureVerifier()\\n+  {\\n+  }\\n+\\n+private:\\n+  ~nsDataSignatureVerifier()\\n+  {\\n+  }\\n+};\\n+\\n+#endif // _NS_DATASIGNATUREVERIFIER_H_\\ndiff --git a/security/manager/ssl/src/nsNSSModule.cpp b/security/manager/ssl/src/nsNSSModule.cpp\\nindex fcf4434..5cd50ee 100644\\n--- a/security/manager/ssl/src/nsNSSModule.cpp\\n+++ b/security/manager/ssl/src/nsNSSModule.cpp\\n@@ -71,6 +71,7 @@\\n #include \\\"nsNTLMAuthModule.h\\\"\\n #include \\\"nsStreamCipher.h\\\"\\n #include \\\"nsKeyModule.h\\\"\\n+#include \\\"nsDataSignatureVerifier.h\\\"\\n \\n // We must ensure that the nsNSSComponent has been loaded before\\n // creating any other components.\\n@@ -190,6 +191,7 @@ NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCryptoHash)\\n NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsStreamCipher)\\n NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsKeyObject)\\n NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsKeyObjectFactory)\\n+NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsDataSignatureVerifier)\\n \\n static NS_METHOD RegisterPSMContentListeners(\\n                       nsIComponentManager *aCompMgr,\\n@@ -445,6 +447,13 @@ static const nsModuleComponentInfo components[] =\\n     NS_KEYMODULEOBJECTFACTORY_CID,\\n     NS_KEYMODULEOBJECTFACTORY_CONTRACTID,\\n     nsKeyObjectFactoryConstructor\\n+  },\\n+\\n+  {\\n+    \\\"Signature Verifier\\\",\\n+    NS_DATASIGNATUREVERIFIER_CID,\\n+    NS_DATASIGNATUREVERIFIER_CONTRACTID,\\n+    nsDataSignatureVerifierConstructor\\n   }\\n };\\n \\ndiff --git a/security/manager/ssl/tests/test_datasignatureverifier.js b/security/manager/ssl/tests/test_datasignatureverifier.js\\nnew file mode 100644\\nindex 0000000..ff3d547\\n--- /dev/null\\n+++ b/security/manager/ssl/tests/test_datasignatureverifier.js\\n@@ -0,0 +1,195 @@\\n+const Cc = Components.classes;\\n+const Ci = Components.interfaces;\\n+const DSV = Ci.nsIDataSignatureVerifier;\\n+\\n+var keys = [\\n+// RSA key\\n+\\\"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDK426erD/H3XtsjvaB5+PJqbhj\\\" +\\n+\\\"Zc9EDI5OCJS8R3FIObJ9ZHJK1TXeaE7JWqt9WUmBWTEFvwS+FI9vWu8058N9CHhD\\\" +\\n+\\\"NyeP6i4LuUYjTURnn7Yw/IgzyIJ2oKsYa32RuxAyteqAWqPT/J63wBixIeCxmysf\\\" +\\n+\\\"awB/zH4KaPiY3vnrzQIDAQAB\\\",\\n+\\n+// RSA key\\n+\\\"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHe69VsjNCwnGF9YGZLgnobp3D\\\" +\\n+\\\"c1KgWzpbT+f12vVKkV3YBpA9KMVMy6wpxlDjvLJjfp/0HvaH7aaz/7kgxZw70Y60\\\" +\\n+\\\"LaJtkAcl1ZVAxS2lQKRTAzZ0RhoTSI1xVqGTjiQakgVdUeghtnqqwp5o1inZv3Qh\\\" +\\n+\\\"nUOMNPyAV8zGt+ZQHQIDAQAB\\\",\\n+\\n+// Invalid key data (\\\"foobar\\\" base 64 encoded)\\n+\\\"Zm9vYmFy\\\"\\n+];\\n+\\n+var data = [\\n+\\\"Test data for data signature verifier\\\",\\n+\\\"The quick brown fox jumps over the lazy dog...\\\"\\n+];\\n+\\n+var signatures = [\\n+// Key 0, Data 0, MD2 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBAgUAA4GBALe3hO76UCpI8b1/oJUCIPmC6AbnMAMlAqo7\\\" +\\n+\\\"pc3TaWmU9wISWmXSrwNmr/QQNjWDn4nzQn8/K/Ac+tszaXib6fVLKA1a6e+/E0qE\\\" +\\n+\\\"OIKFwUiDWCkGDgxM8aYiTgoSZub/5rokgse+ivuCRSVTv9mSxRzKwj+Cvp1EjKCT\\\" +\\n+\\\"iIl3nnTh\\\",\\n+\\n+// Key 0, Data 0, MD5 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBBAUAA4GBAGGb2QkA8LcA+QZj1SoVFmMpVTd9P5Ac0Rjb\\\" +\\n+\\\"ldouMmngztMV/dxymVKCpknqelhsxTQ/zaqGZ4KKzcIffJa9jXi5XUD8XzDIKcFE\\\" +\\n+\\\"dQvti8oUNDPb6l1ybETI8LKh2ywyBCSZ/Q5BwUeS9nfx+4cAnu9YZf29SGljit+Y\\\" +\\n+\\\"XLPKZ+of\\\",\\n+\\n+// Key 0, Data 0, SHA1 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBBQUAA4GBAHcl6tqR5yjTDUJ5NiLOdIB4I6/C/rS2WW5a\\\" +\\n+\\\"7MVhYYhBgaZyGaem4LLT/REloOOLwPNMcmSEpwexqMSATbl9AAoJPq/wO3l4cZpO\\\" +\\n+\\\"tDkLlafsiwnqK156YvHp50zUq5Os28d6Bq/Nl2qjH1yizwlIEo0o9qo8Cq6QK3j2\\\" +\\n+\\\"MdFCopgk\\\",\\n+\\n+// Key 0, Data 0, SHA256 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBCwUAA4GBAAOtDvzWwbYK7zLUz0F3e3wmkL1YWXuD/GzQ\\\" +\\n+\\\"LgwOg6VWtn9v54M9nfv/+iX+m4udzIwHZU7utYM31vtwqRC36l0QKo2VMbiLySX+\\\" +\\n+\\\"uHnSK40Kk4SfBvMF1wuz6BQ8ia8uTjPPfC764dB1N7gQdgdRevLTrh2EU6+DLmSS\\\" +\\n+\\\"Sm1QJm9/\\\",\\n+\\n+// Key 0, Data 0, SHA384 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBDAUAA4GBAMWB3DskcGuGXpi3TO2Pm0g915EIvm5aOeXQ\\\" +\\n+\\\"sbs0ZGOwPyzYN1kKOmEpGHMeRhcIIBcF80ZC5N6dsTxeMGkFGOqhvB/HNl7gXMqF\\\" +\\n+\\\"OA8mG9vAcwfMeJlY4H5WbYD8bUn72UbIuS+sURLvWVhuIFBYPHHU7KVUaGAWl0rp\\\" +\\n+\\\"hCa4Dk37\\\",\\n+\\n+// Key 0, Data 0, SHA512 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBDQUAA4GBAFkm61zH8Y0J5PA4GtOvoZA6w/SzHg5jFP11\\\" +\\n+\\\"gmXki81VgKwLF7Gyj4wRBX7Q9c8cNrNeoGZb12NUUxlR+u6J6VxcosVPKrCz7Xfj\\\" +\\n+\\\"LPi6+A1dNV5eH2B6tZR6wIiEatAWNIXxQZEJbj9BWefRFq6NnKhR5A/MEPnrZyoR\\\" +\\n+\\\"Da3YsDV3\\\",\\n+\\n+// Key 0, Data 1, MD2 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBAgUAA4GBAJjwosJK6jV9Bt6HhrFn7+48LRhamjWjzs7a\\\" +\\n+\\\"cf5D/GTuul6aQQvQJ4Lt26KTyh3VglaQJFToH0Ik/fR1lOJS3tCPr1RRH06cKZgK\\\" +\\n+\\\"haoUaGR8rmtn678wX067q7ACmKPeqmgj71pHm7O5YgN3z45iAazbUHP4erdbFUf9\\\" +\\n+\\\"4rOr3L2f\\\",\\n+\\n+// Key 0, Data 1, MD5 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBBAUAA4GBAC0EAoHWTb4CC+gw7fs5zMaZw7PWoDH1rXMD\\\" +\\n+\\\"dKoMBDmAW1EXZTfUGUTv0ga3VzuPJKuHHZOFVyFDnt4qFrefzzWs17LiPpN+yVgo\\\" +\\n+\\\"6vBnpXLeIp7D9n94bz56gv9NZZmy02XQVKDaRc3E4JBC7Ze7RAHuKtWuZRTUKF86\\\" +\\n+\\\"VXakwW3a\\\",\\n+\\n+// Key 0, Data 1, SHA1 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBBQUAA4GBABkClr0Ot3aXBKYIiARdwpX8etDQO/Eqjxe8\\\" +\\n+\\\"pJyaqwj/P+x8j9/CbtJKJJTxvYmV9AhdgLPgoWjcTkfvqKdb1vpKKbV30QC/TEnu\\\" +\\n+\\\"ON+66MJgkwrZw6NCDyBRgMTjf4FWR75Ot1DLuu3+7uCswKCJe8la0HMm/AcqUzu1\\\" +\\n+\\\"SKOPMseI\\\",\\n+\\n+// Key 0, Data 1, SHA256 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBCwUAA4GBAE2cIr6Uzo7RISkGgCA5m4K8s9+0iHwzr2u/\\\" +\\n+\\\"3ICUrTPe4RY2g9RLd6qkwaHD101LW5TQw71fhePIxfWHEhWtTCLS5DnGiucxfGKW\\\" +\\n+\\\"47gOBJIYf0DG7o5N4lA99j2Zuj+V+yjAcLfq7Su5FwASbD30KqCue1/F03qdXUxj\\\" +\\n+\\\"ciJeGo2b\\\",\\n+\\n+// Key 0, Data 1, SHA384 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBDAUAA4GBAK+JfKJNBjw2d2iXT/pe9xMXPkLSkf+gjG2i\\\" +\\n+\\\"F7B0kBvMGyOVxuvQ4TCx+NFhAUevQugDHgBMkmAieg8mApcWWFWQ+8rbdUFv/hD7\\\" +\\n+\\\"fHW+QukMgcfLMquh0GtDuoM8ZKFBBvwnPGLLUh+ZMy8fEOjjH+s6bQQSpf072SSJ\\\" +\\n+\\\"K+Uo8DG2\\\",\\n+\\n+// Key 0, Data 1, SHA512 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBDQUAA4GBAEEvDpyBssG0qFfRamNwkwSjhqYRVFdIa6+E\\\" +\\n+\\\"xfxdRqW/nxN5HuzFA8aajgSMXX0YFWPXV7OuVjCCJfZWhq7kQpTy96AmI/04rVdr\\\" +\\n+\\\"9gc5mc2tdLl3Yk/Qd+Xq8WYcQIZ5Ewyo7sr8eKtVhtEM8OtPR54FO2s1pkZwJdVf\\\" +\\n+\\\"ymMzHBoE\\\",\\n+\\n+// Key 1, Data 0, MD5 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBBAUAA4GBAAIzLho2i5jfJ5SPPV/u2gUuefzhjEAsUhlL\\\" +\\n+\\\"Nir4FKhNzB2DZNbME9DtgNvdmZd00IjydYlaJ0dnLiMigXIaRJsyncYazULZdY6i\\\" +\\n+\\\"i7oP6llbXbszSTbHGolr5kQ+6cZPBBATOkJ+wekDdlvh5cZ+B0Lux4LevUDlGWAy\\\" +\\n+\\\"uR7bqrc5\\\",\\n+\\n+// Key 1, Data 0, SHA512 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBDQUAA4GBABsjF8K/SIaY3KTeIGpPEwl1+ZXLKBaHxlRT\\\" +\\n+\\\"b37PhorSfqW1KFjquCEASUUeFwCQ14uUIBaRQV2haRGA0dRpuWr4zrWZMcDKOsmX\\\" +\\n+\\\"r5XRvcti9/lNqoIID/Mq0tKtS6aVFZpoHIrwbXpV4hV+BRGhaPxV3RBzEIzM7bWJ\\\" +\\n+\\\"tN3JY9+1\\\",\\n+\\n+// Key 1, Data 1, MD5 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBBAUAA4GBAIAxRPXDAT2LBcOo7yTNr5uIZbPW9rkSX0Ba\\\" +\\n+\\\"h4sq6YRcxlnohaE2VO0CLGXFNwaBihhkkp+2dA76EvbMo/+O9XTWwroqtWWwvmxs\\\" +\\n+\\\"tWK6HvwYKnGFKOOZMOjNjmXjk446UVvxYCbU+NPM1LZTewT1/UpPWWRowF/lwX7m\\\" +\\n+\\\"SnT8d2ds\\\",\\n+\\n+// Key 1, Data 1, SHA512 hash algorithm\\n+\\\"MIGTMA0GCSqGSIb3DQEBDQUAA4GBAF0+XYD/r0Annz1GJ24GTkAlWY/OixCSV6Ix\\\" +\\n+\\\"OMM7P2d/jgOP+ICKIpxqaSE0CbkLiegUiidIOWvFqDxQJWlAAukDUWISGFfJMFxX\\\" +\\n+\\\"3jzJ0bBfeNY/1Qo8jMQopcNco/NlNgoSKAUOBtk31aFgNoVC3kWUk6pO97KEiJ+e\\\" +\\n+\\\"bQp9Z2/M\\\",\\n+\\n+// Invalid signature data (\\\"foobar\\\" base 64 encoded)\\n+\\\"Zm9vYmFy\\\"\\n+];\\n+\\n+var tests = [\\n+// Data   Signature  Key   Expected   Throws\\n+// Pass cases\\n+  [0,     0,         0,    true,      false], //0\\n+  [0,     1,         0,    true,      false], //1\\n+  [0,     2,         0,    true,      false], //2\\n+  [0,     3,         0,    true,      false], //3\\n+  [0,     4,         0,    true,      false], //4\\n+  [0,     5,         0,    true,      false], //5\\n+  [1,     6,         0,    true,      false], //6\\n+  [1,     7,         0,    true,      false], //7\\n+  [1,     8,         0,    true,      false], //8\\n+  [1,     9,         0,    true,      false], //9\\n+  [1,     10,        0,    true,      false], //10\\n+  [1,     11,        0,    true,      false], //11\\n+  [0,     12,        1,    true,      false], //12\\n+  [0,     13,        1,    true,      false], //13\\n+  [1,     14,        1,    true,      false], //14\\n+  [1,     15,        1,    true,      false], //15\\n+// Incorrect data cases\\n+  [1,     0,         0,    false,     false], //16\\n+  [1,     1,         0,    false,     false], //17\\n+  [1,     2,         0,    false,     false], //18\\n+  [1,     3,         0,    false,     false], //19\\n+  [1,     4,         0,    false,     false], //20\\n+  [1,     5,         0,    false,     false], //21\\n+  [0,     6,         0,    false,     false], //22\\n+  [0,     7,         0,    false,     false], //23\\n+  [0,     8,         0,    false,     false], //24\\n+  [0,     9,         0,    false,     false], //25\\n+  [0,     10,        0,    false,     false], //26\\n+  [0,     11,        0,    false,     false], //27\\n+// Incorrect key cases\\n+  [0,     1,         1,    false,     false], //28\\n+  [0,     5,         1,    false,     false], //29\\n+  [1,     7,         1,    false,     false], //30\\n+  [1,     11,        1,    false,     false], //31\\n+  [0,     12,        0,    false,     false], //32\\n+  [0,     13,        0,    false,     false], //33\\n+  [1,     14,        0,    false,     false], //34\\n+  [1,     15,        0,    false,     false], //35\\n+// Invalid data cases\\n+  [0,     0,         2,    false,     true],  //36\\n+  [0,     1,         2,    false,     true],  //37\\n+  [0,     16,        0,    false,     true],  //38\\n+  [1,     16,        0,    false,     true],  //39\\n+];\\n+\\n+function run_test() {\\n+  var verifier = Cc[\\\"@mozilla.org/security/datasignatureverifier;1\\\"].\\n+                 createInstance(Ci.nsIDataSignatureVerifier);\\n+  \\n+  for (var t = 0; t < tests.length; t++) {\\n+    try {\\n+      var result = verifier.verifyData(data[tests[t][0]],\\n+                                       signatures[tests[t][1]],\\n+                                       keys[tests[t][2]]);\\n+      if (tests[t][4])\\n+        do_throw(\\\"Test \\\" + t + \\\" didn't throw\\\");\\n+      if (result != tests[t][3])\\n+        do_throw(\\\"Test \\\" + t + \\\" was \\\" + result + \\\" but should have been \\\" + tests[t][3]);\\n+    }\\n+    catch (e) {\\n+      if (!tests[t][4])\\n+        do_throw(\\\"Test \\\" + t + \\\" threw \\\" + e);\\n+    }\\n+  }\\n+}\\n\""}