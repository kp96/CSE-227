{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas32d2200\""},"diff":"\"32d2200 Bug 382527, r=neil, sr=peterv, a=1.9+\\ndiff --git a/editor/libeditor/base/nsEditor.cpp b/editor/libeditor/base/nsEditor.cpp\\nindex 9e87379..bfe8a85 100644\\n--- a/editor/libeditor/base/nsEditor.cpp\\n+++ b/editor/libeditor/base/nsEditor.cpp\\n@@ -4789,10 +4789,6 @@ nsEditor::CreateTxnForDeleteSelection(nsIEditor::EDirection aAction,\\n     return NS_ERROR_NULL_POINTER;\\n   *aTxn = nsnull;\\n \\n-#ifdef DEBUG_akkana\\n-  NS_ASSERTION(aAction != eNextWord && aAction != ePreviousWord && aAction != eToEndOfLine, \\\"CreateTxnForDeleteSelection: unsupported action!\\\");\\n-#endif\\n-\\n   nsCOMPtr<nsISelectionController> selCon = do_QueryReferent(mSelConWeak);\\n   if (!selCon) return NS_ERROR_NOT_INITIALIZED;\\n   nsCOMPtr<nsISelection> selection;\\n@@ -4827,18 +4823,23 @@ nsEditor::CreateTxnForDeleteSelection(nsIEditor::EDirection aAction,\\n           range->GetCollapsed(&isCollapsed);\\n           if (!isCollapsed)\\n           {\\n-            DeleteRangeTxn *txn;\\n-            result = TransactionFactory::GetNewTransaction(DeleteRangeTxn::GetCID(), (EditTxn **)&txn);\\n+            nsRefPtr<EditTxn> editTxn;\\n+            result =\\n+              TransactionFactory::GetNewTransaction(DeleteRangeTxn::GetCID(),\\n+                                                    getter_AddRefs(editTxn));\\n+            nsRefPtr<DeleteRangeTxn> txn =\\n+              static_cast<DeleteRangeTxn*>(editTxn.get());\\n             if (NS_SUCCEEDED(result) && txn)\\n             {\\n               txn->Init(this, range, &mRangeUpdater);\\n               (*aTxn)->AppendChild(txn);\\n-              NS_RELEASE(txn);\\n             }\\n             else\\n               result = NS_ERROR_OUT_OF_MEMORY;\\n           }\\n-          else\\n+          // Same with range as with selection; if it is collapsed and action\\n+          // is eNone, do nothing.\\n+          else if (aAction != eNone)\\n           { // we have an insertion point.  delete the thing in front of it or behind it, depending on aAction\\n             result = CreateTxnForDeleteInsertionPoint(range, aAction, *aTxn, aNode, aOffset, aLength);\\n           }\\n@@ -5022,14 +5023,14 @@ nsEditor::CreateTxnForDeleteInsertionPoint(nsIDOMRange          *aRange,\\n   {\\n     if (nodeAsText)\\n     { // we have text, so delete a char at the proper offset\\n-      DeleteTextTxn *txn;\\n-      result = CreateTxnForDeleteCharacter(nodeAsText, offset, aAction, &txn);\\n+      nsRefPtr<DeleteTextTxn> txn;\\n+      result = CreateTxnForDeleteCharacter(nodeAsText, offset, aAction,\\n+                                           getter_AddRefs(txn));\\n       if (NS_SUCCEEDED(result)) {\\n         aTxn->AppendChild(txn);\\n         NS_ADDREF(*aNode = node);\\n         *aOffset = txn->GetOffset();\\n         *aLength = txn->GetNumCharsToDelete();\\n-        NS_RELEASE(txn);\\n       }\\n     }\\n     else\\n@@ -5055,25 +5056,25 @@ nsEditor::CreateTxnForDeleteInsertionPoint(nsIDOMRange          *aRange,\\n           {\\n             selectedNodeAsText->GetLength(&position);\\n           }\\n-          DeleteTextTxn *delTextTxn;\\n+          nsRefPtr<DeleteTextTxn> delTextTxn;\\n           result = CreateTxnForDeleteCharacter(selectedNodeAsText, position,\\n-                                               aAction, &delTextTxn);\\n+                                               aAction,\\n+                                               getter_AddRefs(delTextTxn));\\n           if (NS_FAILED(result))  { return result; }\\n           if (!delTextTxn) { return NS_ERROR_NULL_POINTER; }\\n           aTxn->AppendChild(delTextTxn);\\n           NS_ADDREF(*aNode = selectedNode);\\n           *aOffset = delTextTxn->GetOffset();\\n           *aLength = delTextTxn->GetNumCharsToDelete();\\n-          NS_RELEASE(delTextTxn);\\n         }\\n         else\\n         {\\n-          DeleteElementTxn *delElementTxn;\\n-          result = CreateTxnForDeleteElement(selectedNode, &delElementTxn);\\n+          nsRefPtr<DeleteElementTxn> delElementTxn;\\n+          result = CreateTxnForDeleteElement(selectedNode,\\n+                                             getter_AddRefs(delElementTxn));\\n           if (NS_FAILED(result))  { return result; }\\n           if (!delElementTxn) { return NS_ERROR_NULL_POINTER; }\\n           aTxn->AppendChild(delElementTxn);\\n-          NS_RELEASE(delElementTxn);\\n           NS_ADDREF(*aNode = selectedNode);\\n         }\\n       }\\n\""}