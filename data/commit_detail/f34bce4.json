{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basf34bce4\""},"diff":"\"f34bce4 Bug 395616 - rework orientType/orientAngle mapping of orient attribute. r=longsonr, sr+a=roc\\ndiff --git a/content/svg/content/src/nsSVGAngle.cpp b/content/svg/content/src/nsSVGAngle.cpp\\nindex 612596e..631ba9a 100644\\n--- a/content/svg/content/src/nsSVGAngle.cpp\\n+++ b/content/svg/content/src/nsSVGAngle.cpp\\n@@ -65,7 +65,6 @@ protected:\\n   \\n   nsSVGAngle(float value, PRUint16 unit);\\n   nsSVGAngle();\\n-  virtual ~nsSVGAngle();\\n \\n public:\\n   // nsISupports interface:\\n@@ -95,7 +94,6 @@ protected:\\n \\n   float mValueInSpecifiedUnits;\\n   PRUint8 mSpecifiedUnitType;\\n-  PRPackedBool mIsAuto;\\n };\\n \\n \\n@@ -133,8 +131,7 @@ NS_NewSVGAngle(nsIDOMSVGAngle** result,\\n \\n nsSVGAngle::nsSVGAngle(float value,\\n                        PRUint16 unit)\\n-  : mValueInSpecifiedUnits(value),\\n-    mIsAuto(PR_FALSE)\\n+  : mValueInSpecifiedUnits(value)\\n {\\n   NS_ASSERTION(unit == SVG_ANGLETYPE_UNKNOWN || IsValidUnitType(unit), \\\"unknown unit\\\");\\n   mSpecifiedUnitType = unit;\\n@@ -144,10 +141,6 @@ nsSVGAngle::nsSVGAngle()\\n {\\n }\\n \\n-nsSVGAngle::~nsSVGAngle()\\n-{\\n-}\\n-\\n //----------------------------------------------------------------------\\n // nsISupports methods:\\n \\n@@ -267,7 +260,6 @@ NS_IMETHODIMP\\n nsSVGAngle::SetValueInSpecifiedUnits(float aValueInSpecifiedUnits)\\n {\\n   WillModify();\\n-  mIsAuto                = PR_FALSE;\\n   mValueInSpecifiedUnits = aValueInSpecifiedUnits;\\n   DidModify();\\n   return NS_OK;\\n@@ -277,10 +269,6 @@ nsSVGAngle::SetValueInSpecifiedUnits(float aValueInSpecifiedUnits)\\n NS_IMETHODIMP\\n nsSVGAngle::GetValueAsString(nsAString & aValueAsString)\\n {\\n-  if (mIsAuto) {\\n-    aValueAsString.AssignLiteral(\\\"auto\\\");\\n-    return NS_OK;\\n-  }\\n   PRUnichar buf[24];\\n   nsTextFormatter::snprintf(buf, sizeof(buf)/sizeof(PRUnichar),\\n                             NS_LITERAL_STRING(\\\"%g\\\").get(),\\n@@ -297,12 +285,6 @@ nsSVGAngle::GetValueAsString(nsAString & aValueAsString)\\n NS_IMETHODIMP\\n nsSVGAngle::SetValueAsString(const nsAString & aValueAsString)\\n {\\n-  if (aValueAsString.EqualsLiteral(\\\"auto\\\")) {\\n-    WillModify();\\n-    mIsAuto = PR_TRUE;\\n-    DidModify();\\n-    return NS_OK;\\n-  }\\n   nsresult rv = NS_OK;\\n   \\n   char *str = ToNewCString(aValueAsString);\\n@@ -336,7 +318,6 @@ nsSVGAngle::NewValueSpecifiedUnits(PRUint16 unitType, float valueInSpecifiedUnit\\n   if (!IsValidUnitType(unitType)) return NS_ERROR_FAILURE;\\n \\n   WillModify();\\n-  mIsAuto                = PR_FALSE;\\n   mValueInSpecifiedUnits = valueInSpecifiedUnits;\\n   mSpecifiedUnitType     = unitType;\\n   DidModify();\\ndiff --git a/content/svg/content/src/nsSVGEnum.h b/content/svg/content/src/nsSVGEnum.h\\nindex 40bb785..185656c 100644\\n--- a/content/svg/content/src/nsSVGEnum.h\\n+++ b/content/svg/content/src/nsSVGEnum.h\\n@@ -66,9 +66,9 @@ public:\\n                     nsSVGElement *aSVGElement,\\n                     PRBool aDoSetAttr);\\n \\n-  PRUint16 GetBaseValue()\\n+  PRUint16 GetBaseValue() const\\n     { return mBaseVal; }\\n-  PRUint16 GetAnimValue()\\n+  PRUint16 GetAnimValue() const\\n     { return mAnimVal; }\\n \\n   nsresult ToDOMAnimatedEnum(nsIDOMSVGAnimatedEnumeration **aResult,\\ndiff --git a/content/svg/content/src/nsSVGMarkerElement.cpp b/content/svg/content/src/nsSVGMarkerElement.cpp\\nindex a509740..5e9dc26 100644\\n--- a/content/svg/content/src/nsSVGMarkerElement.cpp\\n+++ b/content/svg/content/src/nsSVGMarkerElement.cpp\\n@@ -102,22 +102,22 @@ nsSVGMarkerElement::Init()\\n   nsresult rv = nsSVGMarkerElementBase::Init();\\n   NS_ENSURE_SUCCESS(rv,rv);\\n \\n-  // non-attrib enum - pass in invalid enum (will never get used by nsSVGEnum)\\n-  mOrientType.Init(0xff, SVG_MARKER_ORIENT_AUTO);\\n+  // derived (non-attrib) DOM properties\\n \\n-  // Create mapped properties:\\n+  // DOM property: orientType\\n+  mOrientType.Init(ORIENTTYPE, SVG_MARKER_ORIENT_ANGLE);\\n \\n-  // DOM property: orient\\n+  // DOM property: orientAngle\\n   {\\n     nsCOMPtr<nsIDOMSVGAngle> angle;\\n     rv = NS_NewSVGAngle(getter_AddRefs(angle), 0.0f);\\n     NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = NS_NewSVGAnimatedAngle(getter_AddRefs(mOrient), angle);\\n-    NS_ENSURE_SUCCESS(rv,rv);\\n-    rv = AddMappedSVGValue(nsGkAtoms::orient, mOrient);\\n+    rv = NS_NewSVGAnimatedAngle(getter_AddRefs(mOrientAngle), angle);\\n     NS_ENSURE_SUCCESS(rv,rv);\\n   }\\n \\n+  // Create mapped properties:\\n+\\n   // DOM property: viewBox\\n   {\\n     nsCOMPtr<nsIDOMSVGRect> viewbox;\\n@@ -213,7 +213,7 @@ NS_IMETHODIMP nsSVGMarkerElement::GetOrientType(nsIDOMSVGAnimatedEnumeration * *\\n /* readonly attribute nsIDOMSVGAnimatedLength orientAngle; */\\n NS_IMETHODIMP nsSVGMarkerElement::GetOrientAngle(nsIDOMSVGAnimatedAngle * *aOrientAngle)\\n {\\n-  *aOrientAngle = mOrient;\\n+  *aOrientAngle = mOrientAngle;\\n   NS_IF_ADDREF(*aOrientAngle);\\n   return NS_OK;\\n }\\n@@ -221,9 +221,7 @@ NS_IMETHODIMP nsSVGMarkerElement::GetOrientAngle(nsIDOMSVGAnimatedAngle * *aOrie\\n /* void setOrientToAuto (); */\\n NS_IMETHODIMP nsSVGMarkerElement::SetOrientToAuto()\\n {\\n-  nsIDOMSVGAngle *a;\\n-  mOrient->GetBaseVal(&a);\\n-  a->SetValueAsString(NS_LITERAL_STRING(\\\"auto\\\"));\\n+  mOrientType.SetBaseValue(SVG_MARKER_ORIENT_AUTO, this, PR_TRUE);\\n   return NS_OK;\\n }\\n \\n@@ -234,10 +232,13 @@ NS_IMETHODIMP nsSVGMarkerElement::SetOrientToAngle(nsIDOMSVGAngle *angle)\\n     return NS_ERROR_DOM_SVG_WRONG_TYPE_ERR;\\n \\n   nsIDOMSVGAngle *a;\\n-  mOrient->GetBaseVal(&a);\\n+  mOrientAngle->GetBaseVal(&a);\\n   float f;\\n   angle->GetValue(&f);\\n   a->SetValue(f);\\n+\\n+  mOrientType.SetBaseValue(SVG_MARKER_ORIENT_ANGLE, this, PR_TRUE);\\n+\\n   return NS_OK;\\n }\\n \\n@@ -276,20 +277,43 @@ nsSVGMarkerElement::IsAttributeMapped(const nsIAtom* name) const\\n //----------------------------------------------------------------------\\n // nsSVGElement methods\\n \\n+PRBool\\n+nsSVGMarkerElement::GetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n+                            nsAString &aResult) const\\n+{\\n+  if (aNameSpaceID == kNameSpaceID_None && aName == nsGkAtoms::orient) {\\n+    if (mOrientType.GetBaseValue() == SVG_MARKER_ORIENT_AUTO) {\\n+      aResult.AssignLiteral(\\\"auto\\\");\\n+    } else {\\n+      nsCOMPtr<nsIDOMSVGAngle> a;\\n+      mOrientAngle->GetBaseVal(getter_AddRefs(a));\\n+      nsCOMPtr<nsISVGValue> value = do_QueryInterface(a);\\n+      value->GetValueString(aResult);\\n+    }\\n+    return PR_TRUE;\\n+  }\\n+  return nsSVGMarkerElementBase::GetAttr(aNameSpaceID, aName, aResult);\\n+}\\n+\\n nsresult\\n-nsSVGMarkerElement::AfterSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                                 const nsAString* aValue, PRBool aNotify)\\n+nsSVGMarkerElement::SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n+                            nsIAtom* aPrefix, const nsAString& aValue,\\n+                            PRBool aNotify)\\n {\\n-  if (aNamespaceID == kNameSpaceID_None && aName == nsGkAtoms::orient) {\\n-    if (aValue->EqualsLiteral(\\\"auto\\\")) {\\n+  if (aNameSpaceID == kNameSpaceID_None && aName == nsGkAtoms::orient) {\\n+    if (aValue.EqualsLiteral(\\\"auto\\\")) {\\n       mOrientType.SetBaseValue(SVG_MARKER_ORIENT_AUTO, this, PR_FALSE);\\n     } else {\\n       mOrientType.SetBaseValue(SVG_MARKER_ORIENT_ANGLE, this, PR_FALSE);\\n+      nsCOMPtr<nsIDOMSVGAngle> a;\\n+      mOrientAngle->GetBaseVal(getter_AddRefs(a));\\n+      nsCOMPtr<nsISVGValue> value = do_QueryInterface(a);\\n+      value->SetValueString(aValue);\\n     }\\n   }\\n \\n-  return nsSVGMarkerElementBase::AfterSetAttr(aNamespaceID, aName,\\n-                                              aValue, aNotify);\\n+  return nsSVGMarkerElementBase::SetAttr(aNameSpaceID, aName,\\n+                                         aPrefix, aValue, aNotify);\\n }\\n \\n nsresult\\n@@ -305,9 +329,9 @@ nsSVGMarkerElement::UnsetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n       vb->SetWidth(mLengthAttributes[MARKERWIDTH].GetAnimValue(mCoordCtx));\\n       vb->SetHeight(mLengthAttributes[MARKERHEIGHT].GetAnimValue(mCoordCtx));\\n     } else if (aName == nsGkAtoms::orient) {\\n-      mOrientType.SetBaseValue(SVG_MARKER_ORIENT_AUTO, this, PR_FALSE);\\n+      mOrientType.SetBaseValue(SVG_MARKER_ORIENT_ANGLE, this, PR_FALSE);\\n       nsIDOMSVGAngle *angle;\\n-      mOrient->GetBaseVal(&angle);\\n+      mOrientAngle->GetBaseVal(&angle);\\n       angle->NewValueSpecifiedUnits(nsIDOMSVGAngle::SVG_ANGLETYPE_UNSPECIFIED,\\n                                     0.0f);\\n     }\\n@@ -337,6 +361,31 @@ nsSVGMarkerElement::DidChangeLength(PRUint8 aAttrEnum, PRBool aDoSetAttr)\\n   }\\n }\\n \\n+void\\n+nsSVGMarkerElement::DidChangeEnum(PRUint8 aAttrEnum, PRBool aDoSetAttr)\\n+{\\n+  if (!aDoSetAttr)\\n+    return;\\n+\\n+  if (aAttrEnum == ORIENTTYPE) {\\n+    if (mOrientType.GetBaseValue() == SVG_MARKER_ORIENT_AUTO) {\\n+      nsSVGMarkerElementBase::SetAttr(kNameSpaceID_None, nsGkAtoms::orient,\\n+                                      NS_LITERAL_STRING(\\\"auto\\\"), PR_TRUE);\\n+    } else {\\n+      nsAutoString value;\\n+      GetAttr(kNameSpaceID_None, nsGkAtoms::orient, value);\\n+      if (value.EqualsLiteral(\\\"auto\\\")) {\\n+        // type is being set to non-auto - remove an \\\"auto\\\" valued\\n+        // attribute if it's set, otherwise leave the angle specified.\\n+        UnsetAttr(kNameSpaceID_None, nsGkAtoms::orient, PR_TRUE);\\n+      }\\n+    }\\n+    return;\\n+  }\\n+\\n+  nsSVGMarkerElementBase::DidChangeEnum(aAttrEnum, aDoSetAttr);\\n+}\\n+\\n void \\n nsSVGMarkerElement::SetParentCoordCtxProvider(nsSVGSVGElement *aContext)\\n {\\n@@ -378,12 +427,11 @@ nsSVGMarkerElement::GetMarkerTransform(float aStrokeWidth,\\n       SVG_MARKERUNITS_STROKEWIDTH)\\n     scale = aStrokeWidth;\\n \\n-  nsCOMPtr<nsIDOMSVGAngle> a;\\n-  mOrient->GetAnimVal(getter_AddRefs(a));\\n-  nsAutoString value;\\n-  a->GetValueAsString(value);\\n-  if (!value.EqualsLiteral(\\\"auto\\\"))\\n-     a->GetValue(&aAngle);\\n+  if (mOrientType.GetBaseValue() != SVG_MARKER_ORIENT_AUTO) {\\n+    nsCOMPtr<nsIDOMSVGAngle> a;\\n+    mOrientAngle->GetAnimVal(getter_AddRefs(a));\\n+    a->GetValue(&aAngle);\\n+  }\\n \\n   nsCOMPtr<nsIDOMSVGMatrix> matrix;\\n   NS_NewSVGMatrix(getter_AddRefs(matrix),\\ndiff --git a/content/svg/content/src/nsSVGMarkerElement.h b/content/svg/content/src/nsSVGMarkerElement.h\\nindex 79696e6..2b0b7a2 100644\\n--- a/content/svg/content/src/nsSVGMarkerElement.h\\n+++ b/content/svg/content/src/nsSVGMarkerElement.h\\n@@ -76,13 +76,17 @@ public:\\n   // nsIContent interface\\n   NS_IMETHODIMP_(PRBool) IsAttributeMapped(const nsIAtom* name) const;\\n \\n-  virtual nsresult AfterSetAttr(PRInt32 aNamespaceID, nsIAtom* aName,\\n-                                const nsAString* aValue, PRBool aNotify);\\n+  virtual PRBool GetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n+                         nsAString& aResult) const;\\n+  virtual nsresult SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,\\n+                           nsIAtom* aPrefix, const nsAString& aValue,\\n+                           PRBool aNotify);\\n   virtual nsresult UnsetAttr(PRInt32 aNameSpaceID, nsIAtom* aAttribute,\\n                              PRBool aNotify);\\n \\n   // nsSVGElement specializations:\\n   virtual void DidChangeLength(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n+  virtual void DidChangeEnum(PRUint8 aAttrEnum, PRBool aDoSetAttr);\\n \\n   // public helpers\\n   nsresult GetMarkerTransform(float aStrokeWidth,\\n@@ -103,17 +107,16 @@ protected:\\n   nsSVGLength2 mLengthAttributes[4];\\n   static LengthInfo sLengthInfo[4];\\n \\n-  enum { MARKERUNITS };\\n+  enum { MARKERUNITS, ORIENTTYPE = 0xFF };\\n   nsSVGEnum mEnumAttributes[1];\\n   static nsSVGEnumMapping sUnitsMap[];\\n   static EnumInfo sEnumInfo[1];\\n \\n-  // this needs to be handled seperately because its a derived enum\\n-  nsSVGEnum mOrientType;\\n+  // derived properties (from 'orient') handled separately\\n+  nsSVGEnum                              mOrientType;\\n+  nsCOMPtr<nsIDOMSVGAnimatedAngle>       mOrientAngle;\\n \\n   nsSVGSVGElement                       *mCoordCtx;\\n-  nsCOMPtr<nsIDOMSVGAnimatedAngle>       mOrient;\\n-\\n   nsCOMPtr<nsIDOMSVGAnimatedRect>        mViewBox;\\n   nsCOMPtr<nsIDOMSVGAnimatedPreserveAspectRatio> mPreserveAspectRatio;\\n   nsCOMPtr<nsIDOMSVGMatrix>         mViewBoxToViewportTransform;\\n\""}