{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas53ae8e8\""},"diff":"\"53ae8e8 unify logging routines, log via the component.  Log to a file.  Add a couple of crappy attempts at nicer logging output\\ndiff --git a/services/sync/nsBookmarksSyncService.js b/services/sync/nsBookmarksSyncService.js\\nindex e6095dd..736f250 100644\\n--- a/services/sync/nsBookmarksSyncService.js\\n+++ b/services/sync/nsBookmarksSyncService.js\\n@@ -11,7 +11,7 @@\\n  * for the specific language governing rights and limitations under the\\n  * License.\\n  *\\n- * The Original Code is Places.\\n+ * The Original Code is Bookmarks Sync.\\n  *\\n  * The Initial Developer of the Original Code is Mozilla.\\n  * Portions created by the Initial Developer are Copyright (C) 2007\\n@@ -85,6 +85,25 @@ BookmarksSyncService.prototype = {\\n     return this.__os;\\n   },\\n \\n+  __console: null,\\n+  get _console() {\\n+    if (!this.__console)\\n+      this.__console = Cc[\\\"@mozilla.org/consoleservice;1\\\"]\\n+        .getService(Ci.nsIConsoleService);\\n+    return this.__console;\\n+  },\\n+\\n+  __dirSvc: null,\\n+  get _dirSvc() {\\n+    if (!this.__dirSvc)\\n+      this.__dirSvc = Cc[\\\"@mozilla.org/file/directory_service;1\\\"].\\n+        getService(Ci.nsIProperties);\\n+    return this.__dirSvc;\\n+  },\\n+\\n+  // File output stream to a log file\\n+  _log: null,\\n+\\n   // Timer object for yielding to the main loop\\n   _timer: null,\\n \\n@@ -101,6 +120,7 @@ BookmarksSyncService.prototype = {\\n   },\\n \\n   _init: function BSS__init() {\\n+    this._initLog();\\n     let serverURL = 'https://dotmoz.mozilla.org/';\\n     try {\\n       let branch = Cc[\\\"@mozilla.org/preferences-service;1\\\"].\\n@@ -108,11 +128,33 @@ BookmarksSyncService.prototype = {\\n       serverURL = branch.getCharPref(\\\"browser.places.sync.serverURL\\\");\\n     }\\n     catch (ex) { /* use defaults */ }\\n-    LOG(\\\"Bookmarks login server: \\\" + serverURL);\\n+    this.notice(\\\"Bookmarks login server: \\\" + serverURL);\\n     this._dav = new DAVCollection(serverURL);\\n     this._readSnapshot();\\n   },\\n \\n+  _initLog: function BSS__initLog() {\\n+    let dirSvc = Cc[\\\"@mozilla.org/file/directory_service;1\\\"].\\n+    getService(Ci.nsIProperties);\\n+\\n+    let file = dirSvc.get(\\\"ProfD\\\", Ci.nsIFile);\\n+    file.append(\\\"bm-sync.log\\\");\\n+    file.QueryInterface(Ci.nsILocalFile);\\n+\\n+    if (file.exists())\\n+      file.remove(false);\\n+    file.create(file.NORMAL_FILE_TYPE, PERMS_FILE);\\n+\\n+    this._log = Cc[\\\"@mozilla.org/network/file-output-stream;1\\\"]\\n+      .createInstance(Ci.nsIFileOutputStream);\\n+    let flags = MODE_WRONLY | MODE_CREATE | MODE_APPEND;\\n+    this._log.init(file, flags, PERMS_FILE, 0);\\n+\\n+    let str = \\\"Bookmarks Sync Log\\\\n------------------\\\\n\\\\n\\\";\\n+    this._log.write(str, str.length);\\n+    this._log.flush();\\n+  },\\n+\\n   _saveSnapshot: function BSS__saveSnapshot() {\\n     let dirSvc = Cc[\\\"@mozilla.org/file/directory_service;1\\\"].\\n       getService(Ci.nsIProperties);\\n@@ -132,7 +174,6 @@ BookmarksSyncService.prototype = {\\n     let out = {version: this._snapshotVersion, snapshot: this._snapshot};\\n     out = uneval(out);\\n     fos.write(out, out.length);\\n-    fos.flush();\\n     fos.close();\\n   },\\n \\n@@ -221,7 +262,7 @@ BookmarksSyncService.prototype = {\\n   },\\n \\n   _nodeParentsInt: function BSS__nodeParentsInt(guid, tree, parents) {\\n-    if (!tree[guid] || tree[guid].parentGuid == null)\\n+    if (tree[guid] && tree[guid].parentGuid == null)\\n       return parents;\\n     parents.push(tree[guid].parentGuid);\\n     return this._nodeParentsInt(tree[guid].parentGuid, tree, parents);\\n@@ -313,7 +354,7 @@ BookmarksSyncService.prototype = {\\n         return true;\\n       return false;\\n     default:\\n-      LOG(\\\"_commandLike: Unknown item type: \\\" + uneval(a));\\n+      this.notice(\\\"_commandLike: Unknown item type: \\\" + uneval(a));\\n       return false;\\n     }\\n   },\\n@@ -438,12 +479,12 @@ BookmarksSyncService.prototype = {\\n     // shutdown protocol\\n     let cookie = yield;\\n     if (cookie != \\\"generator shutdown\\\")\\n-      LOG(\\\"_reconcile: Error: generator not properly shut down.\\\")\\n+      this.notice(\\\"_reconcile: Error: generator not properly shut down.\\\")\\n   },\\n \\n   _applyCommandsToObj: function BSS__applyCommandsToObj(commands, obj) {\\n     for (let i = 0; i < commands.length; i++) {\\n-      LOG(\\\"Applying cmd to obj: \\\" + uneval(commands[i]));\\n+      this.notice(\\\"Applying cmd to obj: \\\" + uneval(commands[i]));\\n       switch (commands[i].action) {\\n       case \\\"create\\\":\\n         obj[commands[i].guid] = eval(uneval(commands[i].data));\\n@@ -465,7 +506,7 @@ BookmarksSyncService.prototype = {\\n   _applyCommands: function BSS__applyCommands(commandList) {\\n     for (var i = 0; i < commandList.length; i++) {\\n       var command = commandList[i];\\n-      LOG(\\\"Processing command: \\\" + uneval(command));\\n+      this.notice(\\\"Processing command: \\\" + uneval(command));\\n       switch (command[\\\"action\\\"]) {\\n       case \\\"create\\\":\\n         this._createCommand(command);\\n@@ -477,7 +518,7 @@ BookmarksSyncService.prototype = {\\n         this._editCommand(command);\\n         break;\\n       default:\\n-        LOG(\\\"unknown action in command: \\\" + command[\\\"action\\\"]);\\n+        this.notice(\\\"unknown action in command: \\\" + command[\\\"action\\\"]);\\n         break;\\n       }\\n     }\\n@@ -488,11 +529,11 @@ BookmarksSyncService.prototype = {\\n     let parentId = this._bms.getItemIdForGUID(command.data.parentGuid);\\n \\n     if (parentId <= 0) {\\n-      LOG(\\\"Warning: creating node with unknown parent -> reparenting to root\\\");\\n+      this.notice(\\\"Warning: creating node with unknown parent -> reparenting to root\\\");\\n       parentId = this._bms.bookmarksRoot;\\n     }\\n \\n-    LOG(\\\" -> creating item\\\");\\n+    this.notice(\\\" -> creating item\\\");\\n \\n     switch (command.data.type) {\\n     case 0:\\n@@ -510,7 +551,7 @@ BookmarksSyncService.prototype = {\\n       newId = this._bms.insertSeparator(parentId, command.data.index);\\n       break;\\n     default:\\n-      LOG(\\\"_createCommand: Unknown item type: \\\" + command.data.type);\\n+      this.notice(\\\"_createCommand: Unknown item type: \\\" + command.data.type);\\n       break;\\n     }\\n     if (newId)\\n@@ -524,19 +565,19 @@ BookmarksSyncService.prototype = {\\n     switch (type) {\\n     case this._bms.TYPE_BOOKMARK:\\n       // FIXME: check it's an actual bookmark?\\n-      LOG(\\\"  -> removing bookmark \\\" + command.guid);\\n+      this.notice(\\\"  -> removing bookmark \\\" + command.guid);\\n       this._bms.removeItem(itemId);\\n       break;\\n     case this._bms.TYPE_FOLDER:\\n-      LOG(\\\"  -> removing folder \\\" + command.guid);\\n+      this.notice(\\\"  -> removing folder \\\" + command.guid);\\n       this._bms.removeFolder(itemId);\\n       break;\\n     case this._bms.TYPE_SEPARATOR:\\n-      LOG(\\\"  -> removing separator \\\" + command.guid);\\n+      this.notice(\\\"  -> removing separator \\\" + command.guid);\\n       this._bms.removeItem(itemId);\\n       break;\\n     default:\\n-      LOG(\\\"removeCommand: Unknown item type: \\\" + type);\\n+      this.notice(\\\"removeCommand: Unknown item type: \\\" + type);\\n       break;\\n     }\\n   },\\n@@ -544,7 +585,7 @@ BookmarksSyncService.prototype = {\\n   _editCommand: function BSS__editCommand(command) {\\n     var itemId = this._bms.getItemIdForGUID(command.guid);\\n     if (itemId == -1) {\\n-      LOG(\\\"Warning: item for guid \\\" + command.guid + \\\" not found.  Skipping.\\\");\\n+      this.notice(\\\"Warning: item for guid \\\" + command.guid + \\\" not found.  Skipping.\\\");\\n       return;\\n     }\\n \\n@@ -557,7 +598,7 @@ BookmarksSyncService.prototype = {\\n         if (existing == -1)\\n           this._bms.setItemGUID(itemId, command.data.guid);\\n         else\\n-          LOG(\\\"Warning: can't change guid \\\" + command.guid +\\n+          this.notice(\\\"Warning: can't change guid \\\" + command.guid +\\n               \\\" to \\\" + command.data.guid + \\\": guid already exists.\\\");\\n         break;\\n       case \\\"title\\\":\\n@@ -575,7 +616,7 @@ BookmarksSyncService.prototype = {\\n           itemId, this._bms.getItemIdForGUID(command.data.parentGuid), -1);\\n         break;\\n       default:\\n-        LOG(\\\"Warning: Can't change item property: \\\" + key);\\n+        this.notice(\\\"Warning: Can't change item property: \\\" + key);\\n         break;\\n       }\\n     }\\n@@ -589,6 +630,57 @@ BookmarksSyncService.prototype = {\\n     return this._hsvc.executeQuery(query, this._hsvc.getNewQueryOptions()).root;\\n   },\\n \\n+  // FIXME: these print functions need some love...\\n+  _mungeJSON: function BSS__mungeJSON(json) {\\n+    json.replace(\\\":{type\\\", \\\":\\\\n\\\\t{type\\\");\\n+    json.replace(\\\", \\\", \\\",\\\\n\\\\t\\\");\\n+    return json;\\n+  },\\n+\\n+  _printNodes: function BSS__printNodes(nodes) {\\n+    let nodeList = [];\\n+    for (let guid in nodes) {\\n+      switch (nodes[guid].type) {\\n+      case 0:\\n+        nodeList.push(nodes[guid].parentGuid + \\\" b \\\" + guid + \\\"\\\\n\\\\t\\\" +\\n+                      nodes[guid].title + nodes[guid].uri);\\n+        break;\\n+      case 6:\\n+        nodeList.push(nodes[guid].parentGuid + \\\" f \\\" + guid + \\\"\\\\n\\\\t\\\" +\\n+                      nodes[guid].title);\\n+        break;\\n+      case 7:\\n+        nodeList.push(nodes[guid].parentGuid + \\\" s \\\" + guid);\\n+        break;\\n+      default:\\n+        nodeList.push(\\\"error: unknown item type!\\\\n\\\" + uneval(nodes[guid]));\\n+        break;\\n+      }\\n+    }\\n+    nodeList.sort();\\n+    return nodeList.join(\\\"\\\\n\\\");\\n+  },\\n+\\n+  _printCommands: function BSS__printCommands(commands) {\\n+    let ret = [];\\n+    for (let i = 0; i < commands.length; i++) {\\n+      switch (commands[i].action) {\\n+      case \\\"create\\\":\\n+        ret.push(\\\"create\\\");\\n+        break;\\n+      case \\\"edit\\\":\\n+        ret.push();\\n+        break;\\n+      case \\\"remove\\\":\\n+        ret.push();\\n+        break;\\n+      default:\\n+        ret.push(\\\"error: unknown command action!\\\\n\\\" + uneval(commands[i]));\\n+        break;\\n+      }\\n+    }\\n+  },\\n+\\n   // 1) Fetch server deltas\\n   // 1.1) Construct current server status from snapshot + server deltas\\n   // 1.2) Generate single delta from snapshot -> current server status\\n@@ -602,7 +694,7 @@ BookmarksSyncService.prototype = {\\n     var handlers = this._handlersForGenerator(generator);\\n \\n     this._os.notifyObservers(null, \\\"bookmarks-sync:start\\\", \\\"\\\");\\n-    LOG(\\\"Beginning sync\\\");\\n+    this.notice(\\\"Beginning sync\\\");\\n \\n     try {\\n       //this._dav.lock(handlers);\\n@@ -611,7 +703,7 @@ BookmarksSyncService.prototype = {\\n \\n       var localBookmarks = this._getBookmarks();\\n       var localJson = this._wrapNode(localBookmarks);\\n-      LOG(\\\"local json: \\\" + uneval(localJson));\\n+      this.notice(\\\"local json:\\\\n\\\" + this._mungeJSON(uneval(localJson)));\\n \\n       // 1) Fetch server deltas\\n       let gsd_gen = this._getServerData(handlers['complete'], localJson);\\n@@ -619,34 +711,34 @@ BookmarksSyncService.prototype = {\\n       gsd_gen.send(gsd_gen);\\n       let server = yield;\\n \\n-      LOG(\\\"server: \\\" + uneval(server));\\n+      this.notice(\\\"server: \\\" + uneval(server));\\n       if (server['status'] == 2) {\\n         this._os.notifyObservers(null, \\\"bookmarks-sync:end\\\", \\\"\\\");\\n-        LOG(\\\"Sync complete\\\");\\n+        this.notice(\\\"Sync complete\\\");\\n         return;\\n       } else if (server['status'] != 0 && server['status'] != 1) {\\n         this._os.notifyObservers(null, \\\"bookmarks-sync:end\\\", \\\"\\\");\\n-        LOG(\\\"Sync error\\\");\\n+        this.notice(\\\"Sync error\\\");\\n         return;\\n       }\\n \\n-      LOG(\\\"Local snapshot version: \\\" + this._snapshotVersion);\\n-      LOG(\\\"Latest server version: \\\" + server['version']);\\n+      this.notice(\\\"Local snapshot version: \\\" + this._snapshotVersion);\\n+      this.notice(\\\"Latest server version: \\\" + server['version']);\\n \\n       // 2) Generate local deltas from snapshot -> current client status\\n \\n-      LOG(\\\"Generating local updates\\\");\\n+      this.notice(\\\"Generating local updates\\\");\\n       var localUpdates = this._detectUpdates(this._snapshot, localJson);\\n-      LOG(\\\"updates: \\\" + uneval(localUpdates));\\n+      this.notice(\\\"updates: \\\" + uneval(localUpdates));\\n       if (!(server['status'] == 1 || localUpdates.length > 0)) {\\n         this._os.notifyObservers(null, \\\"bookmarks-sync:end\\\", \\\"\\\");\\n-        LOG(\\\"Sync complete (1): no changes needed on client or server\\\");\\n+        this.notice(\\\"Sync complete (1): no changes needed on client or server\\\");\\n         return;\\n       }\\n \\t  \\n       // 3) Reconcile client/server deltas and generate new deltas for them.\\n \\n-      LOG(\\\"Reconciling updates\\\");\\n+      this.notice(\\\"Reconciling updates\\\");\\n       let callback = function(retval) { continueGenerator(generator, retval); };\\n       let rec_gen = this._reconcile(callback, [localUpdates, server.updates]);\\n       rec_gen.next(); // must initialize before sending\\n@@ -670,15 +762,15 @@ BookmarksSyncService.prototype = {\\n       if (ret.conflicts && ret.conflicts[1])\\n         serverConflicts = ret.conflicts[1];\\n \\n-      LOG(\\\"Changes for client: \\\" + uneval(clientChanges));\\n-      LOG(\\\"Changes for server: \\\" + uneval(serverChanges));\\n-      LOG(\\\"Client conflicts: \\\" + uneval(clientConflicts));\\n-      LOG(\\\"Server conflicts: \\\" + uneval(serverConflicts));\\n+      this.notice(\\\"Changes for client: \\\" + uneval(clientChanges));\\n+      this.notice(\\\"Changes for server: \\\" + uneval(serverChanges));\\n+      this.notice(\\\"Client conflicts: \\\" + uneval(clientConflicts));\\n+      this.notice(\\\"Server conflicts: \\\" + uneval(serverConflicts));\\n \\n       if (!(clientChanges.length || serverChanges.length ||\\n             clientConflicts.length || serverConflicts.length)) {\\n         this._os.notifyObservers(null, \\\"bookmarks-sync:end\\\", \\\"\\\");\\n-        LOG(\\\"Sync complete (2): no changes needed on client or server\\\");\\n+        this.notice(\\\"Sync complete (2): no changes needed on client or server\\\");\\n         this._snapshot = this._wrapNode(localBookmarks);\\n         this._snapshotVersion = server['version'];\\n         this._saveSnapshot();\\n@@ -686,12 +778,12 @@ BookmarksSyncService.prototype = {\\n       }\\n \\n       if (clientConflicts.length || serverConflicts.length) {\\n-        LOG(\\\"\\\\nWARNING: Conflicts found, but we don't resolve conflicts yet!\\\\n\\\");\\n+        this.notice(\\\"\\\\nWARNING: Conflicts found, but we don't resolve conflicts yet!\\\\n\\\");\\n       }\\n \\n       // 3.1) Apply server changes to local store\\n       if (clientChanges.length) {\\n-        LOG(\\\"Applying changes locally\\\");\\n+        this.notice(\\\"Applying changes locally\\\");\\n         // Note that we need to need to apply client changes to the\\n         // current tree, not the saved snapshot\\n         this._snapshot = this._applyCommandsToObj(clientChanges,\\n@@ -706,7 +798,7 @@ BookmarksSyncService.prototype = {\\n \\n       // 3.2) Append server delta to the delta file and upload\\n       if (serverChanges.length) {\\n-        LOG(\\\"Uploading changes to server\\\");\\n+        this.notice(\\\"Uploading changes to server\\\");\\n         this._snapshot = this._wrapNode(localBookmarks);\\n         this._snapshotVersion = server['version'] + 1;\\n         server['deltas'][this._snapshotVersion] = serverChanges;\\n@@ -714,15 +806,15 @@ BookmarksSyncService.prototype = {\\n         data = yield;\\n \\n         if (data.target.status >= 200 || data.target.status < 300) {\\n-          LOG(\\\"Successfully updated deltas on server\\\");\\n+          this.notice(\\\"Successfully updated deltas on server\\\");\\n           this._saveSnapshot();\\n         } else {\\n           // FIXME: revert snapshot here?\\n-          LOG(\\\"Error: could not update deltas on server\\\");\\n+          this.notice(\\\"Error: could not update deltas on server\\\");\\n         }\\n       }\\n       this._os.notifyObservers(null, \\\"bookmarks-sync:end\\\", \\\"\\\");\\n-      LOG(\\\"Sync complete\\\");\\n+      this.notice(\\\"Sync complete\\\");\\n     } finally {\\n       //this._dav.unlock(handlers);\\n       //data = yield;\\n@@ -752,27 +844,27 @@ BookmarksSyncService.prototype = {\\n \\n     var ret = {status: -1, version: -1, deltas: null, updates: null};\\n \\n-    LOG(\\\"Getting bookmarks delta from server\\\");\\n+    this.notice(\\\"Getting bookmarks delta from server\\\");\\n     this._dav.GET(\\\"bookmarks.delta\\\", handlers);\\n     var data = yield;\\n \\n     switch (data.target.status) {\\n     case 200:\\n-      LOG(\\\"Got bookmarks delta from server\\\");\\n+      this.notice(\\\"Got bookmarks delta from server\\\");\\n \\n       ret.deltas = eval(data.target.responseText);\\n       var tmp = eval(uneval(this._snapshot)); // fixme hack hack hack\\n \\n       // FIXME: debug here for conditional below...\\n-      LOG(\\\"[sync bowels] local version: \\\" + this._snapshotVersion);\\n+      this.notice(\\\"[sync bowels] local version: \\\" + this._snapshotVersion);\\n       for (var z in ret.deltas) {\\n-        LOG(\\\"[sync bowels] remote version: \\\" + z);\\n+        this.notice(\\\"[sync bowels] remote version: \\\" + z);\\n       }\\n-      LOG(\\\"foo: \\\" + uneval(ret.deltas[this._snapshotVersion + 1]));\\n+      this.notice(\\\"foo: \\\" + uneval(ret.deltas[this._snapshotVersion + 1]));\\n       if (ret.deltas[this._snapshotVersion + 1])\\n-        LOG(\\\"-> is true\\\");\\n+        this.notice(\\\"-> is true\\\");\\n       else\\n-        LOG(\\\"-> is false\\\");\\n+        this.notice(\\\"-> is false\\\");\\n \\n       if (ret.deltas[this._snapshotVersion + 1]) {\\n         // Merge the matching deltas into one, find highest version\\n@@ -784,22 +876,22 @@ BookmarksSyncService.prototype = {\\n             ret.version = v;\\n         }\\n         keys = keys.sort();\\n-        LOG(\\\"TMP: \\\" + uneval(tmp));\\n+        this.notice(\\\"TMP: \\\" + uneval(tmp));\\n         for (var i = 0; i < keys.length; i++) {\\n           tmp = this._applyCommandsToObj(ret.deltas[keys[i]], tmp);\\n-          LOG(\\\"TMP: \\\" + uneval(tmp));\\n+          this.notice(\\\"TMP: \\\" + uneval(tmp));\\n         }\\n         ret.status = 1;\\n         ret[\\\"updates\\\"] = this._detectUpdates(this._snapshot, tmp);\\n \\n       } else if (ret.deltas[this._snapshotVersion]) {\\n-        LOG(\\\"No changes from server\\\");\\n+        this.notice(\\\"No changes from server\\\");\\n         ret.status = 0;\\n         ret.version = this._snapshotVersion;\\n         ret.updates = [];\\n \\n       } else {\\n-        LOG(\\\"Server delta can't update from our snapshot version, getting full file\\\");\\n+        this.notice(\\\"Server delta can't update from our snapshot version, getting full file\\\");\\n         // generate updates from full local->remote snapshot diff\\n         let gsdf_gen = this._getServerUpdatesFull(handlers['complete'],\\n                                                   localJson);\\n@@ -809,7 +901,7 @@ BookmarksSyncService.prototype = {\\n         if (data.status == 2) {\\n           // we have a delta file but no snapshot on the server.  bad.\\n           // fixme?\\n-          LOG(\\\"Error: Delta file on server, but snapshot file missing.  \\\" +\\n+          this.notice(\\\"Error: Delta file on server, but snapshot file missing.  \\\" +\\n               \\\"New snapshot uploaded, may be inconsistent with deltas!\\\");\\n         }\\n \\n@@ -840,7 +932,7 @@ BookmarksSyncService.prototype = {\\n       }\\n       break;\\n     case 404:\\n-      LOG(\\\"Server has no delta file.  Getting full bookmarks file from server\\\");\\n+      this.notice(\\\"Server has no delta file.  Getting full bookmarks file from server\\\");\\n       // generate updates from full local->remote snapshot diff\\n       let gsdf_gen = this._getServerUpdatesFull(handlers['complete'], localJson);\\n       gsdf_gen.next(); // must initialize before sending\\n@@ -849,7 +941,7 @@ BookmarksSyncService.prototype = {\\n       ret.deltas = {};\\n       break;\\n     default:\\n-      LOG(\\\"Could not get bookmarks.delta: unknown HTTP status code \\\" + data.target.status);\\n+      this.notice(\\\"Could not get bookmarks.delta: unknown HTTP status code \\\" + data.target.status);\\n       break;\\n     }\\n     this._generatorDone(onComplete, ret)\\n@@ -866,14 +958,14 @@ BookmarksSyncService.prototype = {\\n \\n     switch (data.target.status) {\\n     case 200:\\n-      LOG(\\\"Got full bookmarks file from server\\\");\\n+      this.notice(\\\"Got full bookmarks file from server\\\");\\n       var tmp = eval(data.target.responseText);\\n       ret.status = 1;\\n       ret.updates = this._detectUpdates(this._snapshot, tmp.snapshot);\\n       ret.version = tmp.version;\\n       break;\\n     case 404:\\n-      LOG(\\\"No bookmarks on server.  Starting initial sync to server\\\");\\n+      this.notice(\\\"No bookmarks on server.  Starting initial sync to server\\\");\\n \\n       this._snapshot = localJson;\\n       this._snapshotVersion = 1;\\n@@ -881,14 +973,14 @@ BookmarksSyncService.prototype = {\\n       data = yield;\\n \\n       if (data.target.status >= 200 || data.target.status < 300) {\\n-        LOG(\\\"Initial sync to server successful\\\");\\n+        this.notice(\\\"Initial sync to server successful\\\");\\n         ret.status = 2;\\n       } else {\\n-        LOG(\\\"Initial sync to server failed\\\");\\n+        this.notice(\\\"Initial sync to server failed\\\");\\n       }\\n       break;\\n     default:\\n-      LOG(\\\"Could not get bookmarks.json: unknown HTTP status code \\\" + data.target.status);\\n+      this.notice(\\\"Could not get bookmarks.json: unknown HTTP status code \\\" + data.target.status);\\n       break;\\n     }\\n     this._generatorDone(onComplete, ret);\\n@@ -896,7 +988,7 @@ BookmarksSyncService.prototype = {\\n \\n   _handlersForGenerator: function BSS__handlersForGenerator(generator) {\\n     var h = {load: bind2(this, function(data) { continueGenerator(generator, data); }),\\n-             error: bind2(this, function(data) { LOG(\\\"Request failed: \\\" + uneval(data)); })};\\n+             error: bind2(this, function(data) { this.notice(\\\"Request failed: \\\" + uneval(data)); })};\\n     h['complete'] = h['load'];\\n     return h;\\n   },\\n@@ -922,7 +1014,7 @@ BookmarksSyncService.prototype = {\\n   },\\n \\n   _onLogin: function BSS__onLogin(event) {\\n-    LOG(\\\"Bookmarks sync server: \\\" + this._dav.baseURL);\\n+    this.notice(\\\"Bookmarks sync server: \\\" + this._dav.baseURL);\\n     this._os.notifyObservers(null, \\\"bookmarks-sync:login\\\", \\\"\\\");\\n   },\\n \\n@@ -957,6 +1049,20 @@ BookmarksSyncService.prototype = {\\n   logout: function BSS_logout() {\\n     this._dav.logout();\\n     this._os.notifyObservers(null, \\\"bookmarks-sync:logout\\\", \\\"\\\");\\n+  },\\n+\\n+  log: function BSS_log(line) {\\n+  },\\n+\\n+  notice: function BSS_notice(line) {\\n+    let fullLine = line + \\\"\\\\n\\\";\\n+    dump(fullLine);\\n+    this._console.logStringMessage(line);\\n+    this._log.write(fullLine, fullLine.length);\\n+    this._log.flush();\\n+  },\\n+\\n+  error: function BSS_error(line) {\\n   }\\n };\\n \\n@@ -972,23 +1078,14 @@ function makeURI(uriString) {\\n   return ioservice.newURI(uriString, null, null);\\n }\\n \\n-function LOG(aText) {\\n-  dump(aText + \\\"\\\\n\\\");\\n-  var consoleService = Cc[\\\"@mozilla.org/consoleservice;1\\\"].\\n-                       getService(Ci.nsIConsoleService);\\n-  consoleService.logStringMessage(aText);\\n-}\\n-\\n function bind2(object, method) {\\n   return function innerBind() { return method.apply(object, arguments); }\\n }\\n \\n-\\n-\\n function continueGenerator(generator, data) {\\n   try { generator.send(data); }\\n   catch (e) {\\n-    LOG(\\\"continueGenerator exception! - \\\" + e);\\n+    //notice(\\\"continueGenerator exception! - \\\" + e);\\n     if (e instanceof StopIteration)\\n       generator = null;\\n     else\\n@@ -1118,7 +1215,7 @@ DAVCollection.prototype = {\\n       let lm = Cc[\\\"@mozilla.org/login-manager;1\\\"].getService(Ci.nsILoginManager);\\n       let logins = lm.findLogins({}, uri.hostPort, null,\\n                                  'Use your ldap username/password - dotmoz');\\n-      LOG(\\\"Found \\\" + logins.length + \\\" logins\\\");\\n+      //notice(\\\"Found \\\" + logins.length + \\\" logins\\\");\\n \\n       for (let i = 0; i < logins.length; i++) {\\n         if (logins[i].username == username) {\\n@@ -1145,7 +1242,7 @@ DAVCollection.prototype = {\\n   },\\n \\n   _onLogin: function DC__onLogin(event) {\\n-    //LOG(\\\"logged in (\\\" + event.target.status + \\\"):\\\\n\\\" +\\n+    //notice(\\\"logged in (\\\" + event.target.status + \\\"):\\\\n\\\" +\\n     //    event.target.responseText + \\\"\\\\n\\\");\\n \\n     if (this._authProvider._authFailed || event.target.status >= 400) {\\n@@ -1168,8 +1265,8 @@ DAVCollection.prototype = {\\n       this._loginHandlers.load(event);\\n   },\\n   _onLoginError: function DC__onLoginError(event) {\\n-    LOG(\\\"login failed (\\\" + event.target.status + \\\"):\\\\n\\\" +\\n-        event.target.responseText + \\\"\\\\n\\\");\\n+    //notice(\\\"login failed (\\\" + event.target.status + \\\"):\\\\n\\\" +\\n+    //    event.target.responseText + \\\"\\\\n\\\");\\n \\n     this._loggedIn = false;\\n \\n@@ -1204,25 +1301,25 @@ DAVCollection.prototype = {\\n   },\\n \\n   _onLock: function DC__onLock(event) {\\n-    LOG(\\\"acquired lock (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n+    //notice(\\\"acquired lock (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n     this._token = \\\"woo\\\";\\n     if (this._lockHandlers && this._lockHandlers.load)\\n       this._lockHandlers.load(event);\\n   },\\n   _onLockError: function DC__onLockError(event) {\\n-    LOG(\\\"lock failed (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n+    //notice(\\\"lock failed (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n     if (this._lockHandlers && this._lockHandlers.error)\\n       this._lockHandlers.error(event);\\n   },\\n \\n   _onUnlock: function DC__onUnlock(event) {\\n-    LOG(\\\"removed lock (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n+    //notice(\\\"removed lock (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n     this._token = null;\\n     if (this._lockHandlers && this._lockHandlers.load)\\n       this._lockHandlers.load(event);\\n   },\\n   _onUnlockError: function DC__onUnlockError(event) {\\n-    LOG(\\\"unlock failed (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n+    //notice(\\\"unlock failed (\\\" + event.target.status + \\\"):\\\\n\\\" + event.target.responseText + \\\"\\\\n\\\");\\n     if (this._lockHandlers && this._lockHandlers.error)\\n       this._lockHandlers.error(event);\\n   }\\ndiff --git a/services/sync/nsIBookmarksSyncService.idl b/services/sync/nsIBookmarksSyncService.idl\\nindex 395ca8c..0629126 100644\\n--- a/services/sync/nsIBookmarksSyncService.idl\\n+++ b/services/sync/nsIBookmarksSyncService.idl\\n@@ -38,7 +38,7 @@\\n \\n #include \\\"nsISupports.idl\\\"\\n \\n-[scriptable, uuid(b3e52c09-5c33-4d07-a3e6-7c453d0c4be8)]\\n+[scriptable, uuid(0a1eed46-f832-495c-bce7-cb308ccfd599)]\\n interface nsIBookmarksSyncService : nsISupports\\n {\\n   /**\\n@@ -60,4 +60,12 @@ interface nsIBookmarksSyncService : nsISupports\\n    * Initiate a sync operation.\\n    */\\n   void sync();\\n+\\n+  /**\\n+   * Write a notice to the logfile\\n+   *\\n+   *  @param line\\n+   *         The line of text to print to the logfile\\n+   */\\n+  void notice(in AString line);\\n };\\ndiff --git a/services/sync/nsIBookmarksSyncService.xpt b/services/sync/nsIBookmarksSyncService.xpt\\nindex 47791d8..29a8d49 100644\\nBinary files a/services/sync/nsIBookmarksSyncService.xpt and b/services/sync/nsIBookmarksSyncService.xpt differ\\n\""}