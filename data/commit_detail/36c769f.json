{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas36c769f\""},"diff":"\"36c769f Bug 374862 Port xpfe/components/search/src to frozen linkage. Original patch by Mook, one minor fixup by me,r=Neil,sr=biesi\\ndiff --git a/xpfe/components/search/public/nsISearchService.idl b/xpfe/components/search/public/nsISearchService.idl\\nindex 5060143..d33495b 100755\\n--- a/xpfe/components/search/public/nsISearchService.idl\\n+++ b/xpfe/components/search/public/nsISearchService.idl\\n@@ -52,14 +52,14 @@ interface nsILocalSearchService : nsISupports\\n {\\n };\\n \\n-[scriptable, uuid(6bd1d803-1c67-11d3-9820-ed1b357eb3c4)]\\n+[scriptable, uuid(a0d28a88-702e-49bd-bee2-929562688ae1)]\\n interface nsIInternetSearchService : nsISupports\\n {\\n   // constants set in the whichButtons out param of GetInternetSearchURL() \\n   const unsigned short kHaveNext = 1;\\n   const unsigned short kHavePrev = 2;\\n \\n-  string      GetInternetSearchURL(in string searchEngineURI, in wstring searchStr, in short direction, in unsigned short pageNumber, out unsigned short whichButtons);\\n+  wstring   GetInternetSearchURL(in string searchEngineURI, in wstring searchStr, in short direction, in unsigned short pageNumber, out unsigned short whichButtons);\\n   void      RememberLastSearchText(in wstring escapedSearchStr);\\n   boolean      FindInternetSearchResults(in string url);\\n   void      Stop();\\ndiff --git a/xpfe/components/search/src/Makefile.in b/xpfe/components/search/src/Makefile.in\\nindex 09b037f..518dbf8 100755\\n--- a/xpfe/components/search/src/Makefile.in\\n+++ b/xpfe/components/search/src/Makefile.in\\n@@ -46,9 +46,8 @@ MODULE\\t\\t= appcomps\\n LIBRARY_NAME\\t= searchservice\\n SHORT_LIBNAME   = srchsvc\\n IS_COMPONENT\\t= 1\\n-EXPORT_LIBRARY\\t= 1\\n MODULE_NAME\\t= SearchServiceModule\\n-MOZILLA_INTERNAL_API = 1\\n+FORCE_SHARED_LIB = 1\\n \\n REQUIRES\\t= xpcom \\\\\\n \\t\\t  string \\\\\\n@@ -73,6 +72,7 @@ endif\\n include $(topsrcdir)/config/rules.mk\\n \\n EXTRA_DSO_LDOPTS += \\\\\\n-\\t$(MOZ_UNICHARUTIL_LIBS) \\\\\\n+\\t$(call EXPAND_LIBNAME_PATH,unicharutil_external_s,$(LIBXUL_DIST)/lib) \\\\\\n+\\t$(XPCOM_GLUE_LDOPTS) \\\\\\n \\t$(MOZ_COMPONENT_LIBS) \\\\\\n \\t$(NULL)\\ndiff --git a/xpfe/components/search/src/nsInternetSearchService.cpp b/xpfe/components/search/src/nsInternetSearchService.cpp\\nindex 7f9c265..2caff6d 100755\\n--- a/xpfe/components/search/src/nsInternetSearchService.cpp\\n+++ b/xpfe/components/search/src/nsInternetSearchService.cpp\\n@@ -49,40 +49,38 @@\\n #include \\\"nsIRDFContainerUtils.h\\\"\\n #include \\\"nsIServiceManager.h\\\"\\n #include \\\"nsVoidArray.h\\\"  // XXX introduces dependency on raptorbase\\n-#include \\\"nsXPIDLString.h\\\"\\n #include \\\"plhash.h\\\"\\n #include \\\"plstr.h\\\"\\n #include \\\"prmem.h\\\"\\n #include \\\"prprf.h\\\"\\n #include \\\"prio.h\\\"\\n #include \\\"prlog.h\\\"\\n+#include \\\"prdtoa.h\\\"\\n #include \\\"rdf.h\\\"\\n #include \\\"nsIDirectoryService.h\\\"\\n #include \\\"nsDirectoryServiceDefs.h\\\"\\n+#include \\\"nsDirectoryServiceUtils.h\\\"\\n #include \\\"nsAppDirectoryServiceDefs.h\\\"\\n #include \\\"nsCOMArray.h\\\"\\n-#include \\\"nsCRT.h\\\"\\n+#include \\\"nsCRTGlue.h\\\"\\n #include \\\"nsEnumeratorUtils.h\\\"\\n #include \\\"nsIRDFRemoteDataSource.h\\\"\\n #include \\\"nsICharsetConverterManager.h\\\"\\n #include \\\"nsICharsetAlias.h\\\"\\n #include \\\"nsITextToSubURI.h\\\"\\n-#include \\\"nsEscape.h\\\"\\n #include \\\"nsNetUtil.h\\\"\\n+#include \\\"nsINetUtil.h\\\"\\n #include \\\"nsIChannel.h\\\"\\n #include \\\"nsIFileChannel.h\\\"\\n #include \\\"nsIHttpChannel.h\\\"\\n #include \\\"nsIUploadChannel.h\\\"\\n #include \\\"nsIInputStream.h\\\"\\n-#ifndef MOZ_PLACES_BOOKMARKS\\n #include \\\"nsIBookmarksService.h\\\"\\n-#endif\\n #include \\\"nsIStringBundle.h\\\"\\n #include \\\"nsIObserverService.h\\\"\\n #include \\\"nsIURL.h\\\"\\n #include \\\"nsILocalFile.h\\\"\\n #include \\\"nsUnicharUtils.h\\\"\\n-#include \\\"nsReadableUtils.h\\\"\\n #include \\\"nsIPrefLocalizedString.h\\\"\\n \\n #ifdef  XP_WIN\\n@@ -124,39 +122,68 @@ static const char kSearchCommand[]                    = \\\"http://home.netscape.co\\n \\n int PR_CALLBACK searchModePrefCallback(const char *pref, void *aClosure);\\n \\n-// helper routine because we need to rewrite this to use string\\n-// iterators.. this replaces the old nsString::Find\\n+// helper routines to ease the transition to frozen linkage strings (nsStringAPI.h)\\n \\n-static PRInt32 nsString_Find(const nsAString& aPattern,\\n-                             const nsAString& aSource,\\n-                             PRBool aIgnoreCase = PR_FALSE,\\n-                             PRInt32 aOffset = 0, PRInt32 aCount = -1)\\n+/// @see nsReadableUtils.h\\n+PRBool RFindInReadable(const nsAString& aPattern,\\n+                       const PRUnichar **start,\\n+                       const PRUnichar **end,\\n+                       nsAString::ComparatorFunc c = nsAString::DefaultComparator)\\n {\\n-    nsAString::const_iterator start, end;\\n-    aSource.BeginReading(start);\\n-    aSource.EndReading(end);\\n-\\n-    // now adjust for the parameters\\n-    start.advance(aOffset);\\n-    if (aCount>0) {\\n-  end = start;    // note that start may have been advanced!\\n-  end.advance(aCount);\\n+  NS_PRECONDITION(start, \\\"invalid pointer\\\");\\n+  NS_PRECONDITION(end, \\\"invalid pointer\\\");\\n+  NS_PRECONDITION(end >= start, \\\"searching in negative length string\\\");\\n+  if (!start || !end || !(end >= start))\\n+  {\\n+    // bad input\\n+    return PR_FALSE;\\n+  }\\n+  \\n+  if (aPattern.IsEmpty())\\n+  {\\n+    NS_WARNING(\\\"searching for empty pattern\\\");\\n+    *start = *end;\\n+    return PR_TRUE;\\n+  }\\n+\\n+  // dumb algorithm - just check from back to front.\\n+  const PRUnichar *current;\\n+  PRUint32 len = aPattern.Length();\\n+  for (current = *end - len; current >= *start; --current)\\n+  {\\n+    if (!c(current, aPattern.BeginReading(), len))\\n+    {\\n+      *start = current;\\n+      *end = current + len;\\n+      return PR_TRUE;\\n     }\\n-    PRBool found;\\n-    if (aIgnoreCase)\\n-  found = FindInReadable(aPattern, start, end,\\n-             nsCaseInsensitiveStringComparator());\\n-    else\\n-  found = FindInReadable(aPattern, start, end);\\n+  }\\n+  // nothing found\\n+  return PR_FALSE;\\n+}\\n+\\n \\n-    if (!found)\\n-  return kNotFound;\\n \\n-    nsAString::const_iterator originalStart;\\n-    aSource.BeginReading(originalStart);\\n-    return Distance(originalStart, start);\\n+/// @see nsString::FindCharInSet\\n+PRInt32 nsString_FindCharInSet(const nsAString& aString, const char *aPattern, PRInt32 aOffset = 0)\\n+{\\n+  const PRUnichar *begin, *end;\\n+  aString.BeginReading(&begin, &end);\\n+  for (const PRUnichar *current = begin + aOffset; current < end; ++current)\\n+  {\\n+    for (const char *pattern = aPattern; *pattern; ++pattern)\\n+    {\\n+      if (NS_UNLIKELY(*current == PRUnichar(*pattern)))\\n+      {\\n+        return current - begin;\\n+      }\\n+    }\\n+  }\\n+  return -1;\\n }\\n \\n+\\n+\\n class InternetSearchContext : public nsIInternetSearchContext\\n {\\n public:\\n@@ -677,42 +704,6 @@ InternetSearchDataSource::isSearchCategoryEngineURI(nsIRDFResource *r)\\n \\n \\n PRBool\\n-InternetSearchDataSource::isSearchCategoryEngineBasenameURI(nsIRDFNode *r)\\n-{\\n-  PRBool    isSearchCategoryEngineBasenameURIFlag = PR_FALSE;\\n-\\n-  nsCOMPtr<nsIRDFResource> aRes (do_QueryInterface(r));\\n-  if (aRes)\\n-  {\\n-    const char  *uri = nsnull;\\n-    aRes->GetValueConst(&uri);\\n-    if ((uri) && (!nsCRT::strncmp(uri, kURINC_SearchCategoryEngineBasenamePrefix,\\n-      (int)sizeof(kURINC_SearchCategoryEngineBasenamePrefix) - 1)))\\n-    {\\n-      isSearchCategoryEngineBasenameURIFlag = PR_TRUE;\\n-    }\\n-  }\\n-  else\\n-  {\\n-    nsCOMPtr<nsIRDFLiteral> aLit (do_QueryInterface(r));\\n-    if (aLit)\\n-    {\\n-      const PRUnichar *uriUni = nsnull;\\n-      aLit->GetValueConst(&uriUni);\\n-      if ((uriUni) && (!nsCRT::strncmp(uriUni,\\n-               NS_ConvertASCIItoUTF16(kURINC_SearchCategoryEngineBasenamePrefix).get(),\\n-        (int)sizeof(kURINC_SearchCategoryEngineBasenamePrefix) - 1)))\\n-      {\\n-        isSearchCategoryEngineBasenameURIFlag = PR_TRUE;\\n-      }\\n-    }\\n-  }\\n-  return(isSearchCategoryEngineBasenameURIFlag);\\n-}\\n-\\n-\\n-\\n-PRBool\\n InternetSearchDataSource::isSearchCommand(nsIRDFResource *r)\\n {\\n   PRBool    isSearchCommandFlag = PR_FALSE;\\n@@ -903,7 +894,7 @@ InternetSearchDataSource::GetURI(char **uri)\\n   if (! uri)\\n     return NS_ERROR_NULL_POINTER;\\n \\n-  if ((*uri = nsCRT::strdup(\\\"rdf:internetsearch\\\")) == nsnull)\\n+  if ((*uri = ToNewCString(NS_LITERAL_CSTRING(\\\"rdf:internetsearch\\\"))) == nsnull)\\n     return NS_ERROR_OUT_OF_MEMORY;\\n \\n   return NS_OK;\\n@@ -1019,7 +1010,7 @@ InternetSearchDataSource::GetTarget(nsIRDFResource *source,\\n       rv = stringService->CreateBundle(SEARCH_PROPERTIES, getter_AddRefs(bundle));\\n       if (NS_SUCCEEDED(rv) && bundle) {\\n \\n-        nsXPIDLString valUni;\\n+        nsString valUni;\\n         nsAutoString name;\\n \\n         if (source == mNC_SearchCommand_AddToBookmarks)\\n@@ -1034,10 +1025,10 @@ InternetSearchDataSource::GetTarget(nsIRDFResource *source,\\n           name.AssignLiteral(\\\"clearfilters\\\");\\n \\n         rv = bundle->GetStringFromName(name.get(), getter_Copies(valUni));\\n-        if (NS_SUCCEEDED(rv) && valUni && *valUni) {\\n+        if (NS_SUCCEEDED(rv) && !valUni.IsEmpty()) {\\n           *target = nsnull;\\n           nsCOMPtr<nsIRDFLiteral> literal;\\n-          if (NS_FAILED(rv = mRDFService->GetLiteral(valUni, getter_AddRefs(literal))))\\n+          if (NS_FAILED(rv = mRDFService->GetLiteral(valUni.get(), getter_AddRefs(literal))))\\n             return rv;\\n           *target = literal;\\n           NS_IF_ADDREF(*target);\\n@@ -1106,7 +1097,7 @@ InternetSearchDataSource::ReorderEngineList()\\n                                 getter_AddRefs(engineName));\\n     if (NS_FAILED(rv)) break;\\n \\n-    nsXPIDLString data;\\n+    nsString data;\\n     engineName->GetData(getter_Copies(data));\\n \\n     nsCOMPtr<nsIRDFLiteral> engineNameLiteral;\\n@@ -1879,7 +1870,7 @@ InternetSearchDataSource::addQueryToBookmarks(nsIRDFResource *src)\\n     getter_AddRefs(textNode))))\\n     return(rv);\\n   nsCOMPtr<nsIRDFLiteral> textLiteral = do_QueryInterface(textNode);\\n-  nsXPIDLString value;\\n+  nsString value;\\n   if (textLiteral)\\n   {\\n     const PRUnichar *textUni = nsnull;\\n@@ -1887,7 +1878,11 @@ InternetSearchDataSource::addQueryToBookmarks(nsIRDFResource *src)\\n     nsAutoString name;\\n     name.Assign(textUni);\\n     // replace pluses with spaces\\n-    name.ReplaceChar(PRUnichar('+'), PRUnichar(' '));\\n+    PRInt32 offset = name.FindChar(PRUnichar('+'));\\n+    while (offset != -1) {\\n+      name.Replace(offset, 1, PRUnichar(' '));\\n+      offset = name.FindChar(PRUnichar('+'), offset + 1);\\n+    }\\n \\n     nsCOMPtr<nsIStringBundleService>\\n     stringService(do_GetService(NS_STRINGBUNDLE_CONTRACTID, &rv));\\n@@ -2106,7 +2101,7 @@ InternetSearchDataSource::filterSite(nsIRDFResource *aResource)\\n         if (slashOffset2 <= slashOffset1) return(NS_ERROR_UNEXPECTED);\\n         site.SetLength(slashOffset2 + 1);\\n \\n-        if (site.Equals(host, nsCaseInsensitiveStringComparator()))\\n+        if (site.Equals(host, CaseInsensitiveCompare))\\n         {\\n           mInner->Unassert(aSearchRoot, mNC_Child, aRes);\\n         }\\n@@ -2398,12 +2393,10 @@ InternetSearchDataSource::saveContents(nsIChannel* channel, nsIInternetSearchCon\\n   if (baseName.IsEmpty()) return(NS_ERROR_UNEXPECTED);\\n \\n   // make sure that search engines are .src files\\n-  PRInt32 extensionOffset;\\n   if (contextType == nsIInternetSearchContext::ENGINE_DOWNLOAD_NEW_CONTEXT ||\\n     contextType == nsIInternetSearchContext::ENGINE_DOWNLOAD_UPDATE_CONTEXT)\\n   {\\n-    extensionOffset = baseName.RFind(\\\".src\\\", PR_TRUE);\\n-    if ((extensionOffset < 0) || (extensionOffset != (PRInt32)(baseName.Length()-4)))\\n+    if (!StringEndsWith(baseName, NS_LITERAL_CSTRING(\\\".src\\\"), CaseInsensitiveCompare))\\n     {\\n       return(NS_ERROR_UNEXPECTED);\\n     }\\n@@ -2514,7 +2507,7 @@ InternetSearchDataSource::saveContents(nsIChannel* channel, nsIInternetSearchCon\\n NS_IMETHODIMP\\n InternetSearchDataSource::GetInternetSearchURL(const char *searchEngineURI,\\n   const PRUnichar *searchStr, PRInt16 direction, PRUint16 pageNumber, \\n-  PRUint16 *whichButtons, char **resultURL)\\n+  PRUint16 *whichButtons, PRUnichar **resultURL)\\n {\\n   if (!resultURL) return(NS_ERROR_NULL_POINTER);\\n   *resultURL = nsnull;\\n@@ -2620,7 +2613,9 @@ InternetSearchDataSource::GetInternetSearchURL(const char *searchEngineURI,\\n   action += input;\\n \\n   // return a copy of the resulting search URL\\n-  *resultURL = ToNewCString(action);\\n+  *resultURL = ToNewUnicode(action);\\n+  if (!resultURL)\\n+      return NS_ERROR_OUT_OF_MEMORY;\\n   return(NS_OK);\\n }\\n \\n@@ -2721,7 +2716,7 @@ InternetSearchDataSource::FindInternetSearchResults(const char *url, PRBool *sea\\n \\n       nsAutoString    action;\\n       if (NS_FAILED(rv = GetData(dataUni, \\\"search\\\", 0, \\\"action\\\", action)))  continue;\\n-      if (shortURL.Equals(action, nsCaseInsensitiveStringComparator()))\\n+      if (shortURL.Equals(action, CaseInsensitiveCompare))\\n       {\\n         foundEngine = PR_TRUE;\\n         break;\\n@@ -2729,7 +2724,7 @@ InternetSearchDataSource::FindInternetSearchResults(const char *url, PRBool *sea\\n \\n       // extension for engines which can have multiple \\\"actions\\\"\\n       if (NS_FAILED(rv = GetData(dataUni, \\\"browser\\\", 0, \\\"alsomatch\\\", action)))  continue;\\n-      if (nsString_Find(shortURL, action, PR_TRUE) >= 0)\\n+      if (action.Find(shortURL, CaseInsensitiveCompare) >= 0)\\n       {\\n         foundEngine = PR_TRUE;\\n         break;\\n@@ -2753,18 +2748,18 @@ InternetSearchDataSource::FindInternetSearchResults(const char *url, PRBool *sea\\n     queryStr.Append(userVar);\\n     queryStr.Append(PRUnichar('='));\\n \\n-    PRInt32   queryOffset;\\n-    if ((queryOffset = nsString_Find(queryStr, searchURL, PR_TRUE )) < 0)\\n+    PRInt32   queryOffset = searchURL.Find(queryStr, CaseInsensitiveCompare);\\n+    if (queryOffset < 0)\\n     {\\n       queryStr.Replace(0, 1, PRUnichar('&'));\\n-      queryOffset = nsString_Find(queryStr, searchURL, PR_TRUE);\\n+      queryOffset = searchURL.Find(queryStr, CaseInsensitiveCompare);\\n     }\\n \\n     nsAutoString  searchText;\\n     if (queryOffset >= 0)\\n     {\\n       PRInt32   andOffset;\\n-      searchURL.Right(searchText, searchURL.Length() - queryOffset - queryStr.Length());\\n+      searchText = Substring(searchURL, queryOffset + queryStr.Length());\\n \\n       if ((andOffset = searchText.FindChar(PRUnichar('&'))) >= 0)\\n       {\\n@@ -2783,8 +2778,16 @@ InternetSearchDataSource::FindInternetSearchResults(const char *url, PRBool *sea\\n           LossyCopyUTF16toASCII(searchText, escapedSearchText);\\n \\n           // encoding +'s so as to preserve distinction between + and %2B\\n-          escapedSearchText.ReplaceSubstring(\\\"%25\\\", \\\"%2B25\\\");\\n-          escapedSearchText.ReplaceSubstring(\\\"+\\\", \\\"%25\\\");\\n+          PRInt32 offset = escapedSearchText.Find(NS_LITERAL_CSTRING(\\\"%25\\\"));\\n+          while (offset != -1) {\\n+            escapedSearchText.Replace(offset, 3, \\\"%2B25\\\");\\n+            offset = escapedSearchText.Find(NS_LITERAL_CSTRING(\\\"%25\\\"), offset);\\n+          }\\n+          offset = escapedSearchText.FindChar('+');\\n+          while (offset != -1) {\\n+            escapedSearchText.Replace(offset, 1, \\\"%25\\\");\\n+            offset = escapedSearchText.FindChar('+', offset);\\n+          }\\n \\n           PRUnichar *uni = nsnull;\\n           rv = textToSubURI->UnEscapeAndConvert(NS_LossyConvertUTF16toASCII(mQueryEncodingStr).get(),\\n@@ -2797,8 +2800,16 @@ InternetSearchDataSource::FindInternetSearchResults(const char *url, PRBool *sea\\n \\n               // decoding +'s thereby preserving distinction between + and %2B\\n               nsCAutoString unescapedSearchText(convertedSearchText);\\n-              unescapedSearchText.ReplaceSubstring(\\\"%25\\\", \\\"+\\\");\\n-              unescapedSearchText.ReplaceSubstring(\\\"%2B25\\\", \\\"%25\\\");\\n+              offset = escapedSearchText.Find(NS_LITERAL_CSTRING(\\\"%25\\\"));\\n+              while (offset != -1) {\\n+                escapedSearchText.Replace(offset, 3, \\\"+\\\");\\n+                offset = escapedSearchText.Find(NS_LITERAL_CSTRING(\\\"%25\\\"), offset);\\n+              }\\n+              offset = escapedSearchText.Find(NS_LITERAL_CSTRING(\\\"%2B25\\\"));\\n+              while (offset != -1) {\\n+                escapedSearchText.Replace(offset, 5, \\\"%25\\\");\\n+                offset = escapedSearchText.Find(NS_LITERAL_CSTRING(\\\"%2B25\\\"), offset);\\n+              }\\n \\n               CopyUTF8toUTF16(unescapedSearchText, searchText);\\n \\n@@ -2812,18 +2823,13 @@ InternetSearchDataSource::FindInternetSearchResults(const char *url, PRBool *sea\\n       RememberLastSearchText(searchText.get());\\n \\n       // construct the search query uri\\n-      engineURI.Assign(NS_LITERAL_STRING(\\\"internetsearch:engine=\\\") + engineURI +\\n-                       NS_LITERAL_STRING(\\\"&text=\\\") + searchText);\\n+      engineURI.Insert(NS_LITERAL_STRING(\\\"internetsearch:engine=\\\"), 0);\\n+      engineURI.Append(NS_LITERAL_STRING(\\\"&text=\\\"));\\n+      engineURI.Append(searchText);\\n \\n #ifdef  DEBUG_SEARCH_OUTPUT\\n-      char  *engineMatch = ToNewCString(searchText);\\n-      if (engineMatch)\\n-      {\\n-        printf(\\\"FindInternetSearchResults: search for: '%s'\\\\n\\\\n\\\",\\n-          engineMatch);\\n-        NS_Free(engineMatch);\\n-        engineMatch = nsnull;\\n-      }\\n+      printf(\\\"FindInternetSearchResults: search for: '%s'\\\\n\\\\n\\\",\\n+        NS_ConvertUTF16toUTF8(searchText).get());\\n #endif\\n     }\\n     else\\n@@ -3114,7 +3120,7 @@ InternetSearchDataSource::BeginSearchRequest(nsIRDFResource *source, PRBool doNe\\n     PRInt32 andOffset = uri.Find(\\\"&\\\");\\n     if (andOffset >= 0)\\n     {\\n-      uri.Left(item, andOffset);\\n+      item = StringHead(uri, andOffset);\\n       uri.Cut(0, andOffset + 1);\\n     }\\n     else\\n@@ -3126,9 +3132,7 @@ InternetSearchDataSource::BeginSearchRequest(nsIRDFResource *source, PRBool doNe\\n     PRInt32 equalOffset = item.Find(\\\"=\\\");\\n     if (equalOffset < 0)  break;\\n     \\n-    nsAutoString  attrib, value;\\n-    item.Left(attrib, equalOffset);\\n-    value = item;\\n+    nsAutoString  attrib(StringHead(item, equalOffset)), value(item);\\n     value.Cut(0, equalOffset + 1);\\n     \\n     if (!attrib.IsEmpty() && !value.IsEmpty())\\n@@ -3138,7 +3142,7 @@ InternetSearchDataSource::BeginSearchRequest(nsIRDFResource *source, PRBool doNe\\n         if ((value.Find(kEngineProtocol) == 0) ||\\n           (value.Find(kURINC_SearchCategoryEnginePrefix) == 0))\\n         {\\n-          char  *val = ToNewCString(value);\\n+          char  *val = ToNewCString(NS_LossyConvertUTF16toASCII(value));\\n           if (val)\\n           {\\n             engineArray->AppendElement(val);\\n@@ -3169,7 +3173,7 @@ InternetSearchDataSource::BeginSearchRequest(nsIRDFResource *source, PRBool doNe\\n \\n     nsCOMPtr<nsIRDFResource>  engine;\\n     mRDFService->GetResource(nsDependentCString(baseFilename), getter_AddRefs(engine));\\n-    nsCRT::free(baseFilename);\\n+    NS_Free(baseFilename);\\n     baseFilename = nsnull;\\n     if (!engine)  continue;\\n \\n@@ -3284,7 +3288,12 @@ InternetSearchDataSource::EngineFileFromResource(nsIRDFResource *aResource,\\n   nativePath.Cut(0, sizeof(kEngineProtocol) - 1);\\n \\n   // unescape it\\n-  NS_UnescapeURL(nativePath);\\n+  nsCOMPtr<nsINetUtil> netUtil = do_GetService(NS_NETUTIL_CONTRACTID, &rv);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  nsCString nativePathSrc = nativePath;\\n+  rv = netUtil->UnescapeString(nativePathSrc, 0, nativePath);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n \\n #ifdef DEBUG_SEARCH_OUTPUT\\n   printf(\\\"InternetSearchDataSource::EngineFileFromResource\\\\n\\\"\\n@@ -3348,14 +3357,13 @@ InternetSearchDataSource::updateDataHintsInGraph(nsIRDFResource *engine, const P\\n   // save/update name of search engine (as specified in file)\\n   nsAutoString scriptCodeValue;\\n   const char * charsetName = MapScriptCodeToCharsetName(0);\\n-  nsXPIDLString decodedValue;\\n+  nsString decodedValue;\\n \\n   if (NS_SUCCEEDED(rv = GetData(dataUni, \\\"search\\\", 0, \\\"sourceTextEncoding\\\", scriptCodeValue)) && \\n     !scriptCodeValue.IsEmpty())\\n   {\\n-    PRInt32 err;\\n-    PRInt32 scriptCode = scriptCodeValue.ToInteger(&err);\\n-    if (NS_SUCCEEDED(err))\\n+    PRInt32 scriptCode = scriptCodeValue.ToInteger(&rv);\\n+    if (NS_SUCCEEDED(rv))\\n       charsetName = MapScriptCodeToCharsetName(scriptCode);\\n   }\\n \\n@@ -3460,16 +3468,13 @@ InternetSearchDataSource::updateDataHintsInGraph(nsIRDFResource *engine, const P\\n       GetData(dataUni, \\\"search\\\", 0, \\\"update\\\", updateStr);\\n \\n       // if we have a \\\".hqx\\\" extension, strip it off\\n-      nsAutoString  extension;\\n-      updateStr.Right(extension, 4);\\n-      if (extension.LowerCaseEqualsLiteral(\\\".hqx\\\"))\\n+      if (StringEndsWith(updateStr, NS_LITERAL_STRING(\\\".hqx\\\"), CaseInsensitiveCompare))\\n       {\\n         updateStr.SetLength(updateStr.Length() - 4);\\n       }\\n \\n       // now, either way, ensure that we have a \\\".src\\\" file\\n-      updateStr.Right(extension, 4);\\n-      if (!extension.LowerCaseEqualsLiteral(\\\".src\\\"))\\n+      if (!StringEndsWith(updateStr, NS_LITERAL_STRING(\\\".src\\\"), CaseInsensitiveCompare))\\n       {\\n         // and if we don't, toss it\\n         updateStr.Truncate();\\n@@ -3499,9 +3504,8 @@ InternetSearchDataSource::updateDataHintsInGraph(nsIRDFResource *engine, const P\\n         rv = updateAtom(mInner, engine, mNC_Update, updateLiteral, nsnull);\\n       }\\n \\n-      PRInt32 err;\\n-      PRInt32 updateDays = updateCheckDaysStr.ToInteger(&err);\\n-      if ((err) || (updateDays < 1))\\n+      PRInt32 updateDays = updateCheckDaysStr.ToInteger(&rv);\\n+      if (NS_FAILED(rv) || (updateDays < 1))\\n       {\\n         // default to something sane\\n         updateDays = 3;\\n@@ -3620,18 +3624,19 @@ InternetSearchDataSource::MapEncoding(const nsString &numericEncoding,\\n   };\\n \\n   if (!numericEncoding.IsEmpty()) {\\n+    NS_LossyConvertUTF16toASCII numericEncodingASCII(numericEncoding);\\n     for (PRUint32 i = 0; encodingList[i].numericEncoding != nsnull; i++)\\n     {\\n-      if (numericEncoding.EqualsASCII(encodingList[i].numericEncoding)) \\n+      if (numericEncodingASCII.Equals(encodingList[i].numericEncoding))\\n       {\\n-        stringEncoding.AssignASCII(encodingList[i].stringEncoding);\\n+        stringEncoding.Assign(NS_ConvertASCIItoUTF16(encodingList[i].stringEncoding));\\n         return NS_OK;\\n       }\\n     }\\n   }\\n \\n   // Still no encoding, fall back to default charset if possible\\n-  nsXPIDLString defCharset;\\n+  nsString defCharset;\\n   nsCOMPtr<nsIPref> prefs(do_GetService(NS_PREF_CONTRACTID));\\n   if (prefs)\\n     prefs->GetLocalizedUnicharPref(\\\"intl.charset.default\\\", getter_Copies(defCharset));\\n@@ -3751,10 +3756,8 @@ InternetSearchDataSource::validateEngine(nsIRDFResource *engine)\\n     if (!lastCheckUni)\\n       return NS_ERROR_UNEXPECTED;\\n \\n-    PRInt32 lastCheckInt = 0, err = 0;\\n-    lastCheckInt = nsDependentString(lastCheckUni).ToInteger(&err);\\n-    // signed int32 -> unsigned int32\\n-    rv = (nsresult) err;\\n+    PRInt32 lastCheckInt = 0;\\n+    lastCheckInt = nsDependentString(lastCheckUni).ToInteger(&rv);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n \\n     // get the current date/time [from microseconds (PRTime) to seconds]\\n@@ -4040,11 +4043,18 @@ InternetSearchDataSource::SaveEngineInfoIntoGraph(nsIFile *file, nsIFile *icon,\\n   if (NS_FAILED(rv)) return rv;\\n   \\n   nsAutoString  searchURL;\\n-  searchURL.AssignASCII(kEngineProtocol);\\n-  char    *uriCescaped = nsEscape(filePath.get(), url_Path);\\n-  if (!uriCescaped) return(NS_ERROR_NULL_POINTER);\\n-  searchURL.AppendASCII(uriCescaped);\\n-  nsCRT::free(uriCescaped);\\n+  searchURL.AssignLiteral(kEngineProtocol);\\n+\\n+  nsCOMPtr<nsINetUtil> netUtil = do_GetService(NS_NETUTIL_CONTRACTID, &rv);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  nsCString uriCescaped;\\n+  rv = netUtil->EscapeString(filePath,\\n+                             nsINetUtil::ESCAPE_URL_PATH,\\n+                             uriCescaped);\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+\\n+  searchURL.Append(NS_ConvertASCIItoUTF16(uriCescaped));\\n \\n   if ((extensionOffset = searchURL.RFindChar(PRUnichar('.'))) > 0)\\n   {\\n@@ -4083,7 +4093,7 @@ InternetSearchDataSource::SaveEngineInfoIntoGraph(nsIFile *file, nsIFile *icon,\\n     nsCAutoString iconFileURL;\\n     if (NS_FAILED(rv = NS_GetURLSpecFromFile(icon, iconFileURL)))\\n       return(rv);\\n-    AppendUTF8toUTF16(iconFileURL, iconURL);\\n+    CopyUTF8toUTF16(iconFileURL, iconURL);\\n   }\\n \\n   // save icon url (if we have one)\\n@@ -4240,8 +4250,7 @@ InternetSearchDataSource::GetSearchEngineList(nsIFile *searchDir,\\n     }\\n \\n     // check the extension (must be \\\".src\\\")\\n-    nsAutoString  extension;\\n-    if ((uri.Right(extension, 4) != 4) || (!extension.LowerCaseEqualsLiteral(\\\".src\\\")))\\n+    if (!StringEndsWith(uri, NS_LITERAL_STRING(\\\".src\\\"), CaseInsensitiveCompare))\\n     {\\n       continue;\\n     }\\n@@ -4345,20 +4354,16 @@ InternetSearchDataSource::GetNumInterpretSections(const PRUnichar *dataUni, PRUi\\n \\n   while(!buffer.IsEmpty())\\n   {\\n-    PRInt32 eol = buffer.FindCharInSet(\\\"\\\\r\\\\n\\\", 0);\\n+    PRInt32 eol = nsString_FindCharInSet(buffer, \\\"\\\\r\\\\n\\\", 0);\\n     if (eol < 0)  break;\\n-    nsAutoString  line;\\n-    if (eol > 0)\\n-    {\\n-      buffer.Left(line, eol);\\n-    }\\n+    nsAutoString  line(StringHead(buffer, eol));\\n     buffer.Cut(0, eol+1);\\n     if (line.IsEmpty()) continue;   // skip empty lines\\n     if (line[0] == PRUnichar('#'))  continue; // skip comments\\n     line.Trim(\\\" \\\\t\\\");\\n     if (!inSection)\\n     {\\n-      PRInt32 sectionOffset = nsString_Find(section, line, PR_TRUE);\\n+      PRInt32 sectionOffset = line.Find(section, CaseInsensitiveCompare);\\n       if (sectionOffset < 0)  continue;\\n       line.Cut(0, sectionOffset + section.Length() + 1);\\n       inSection = PR_TRUE;\\n@@ -4394,20 +4399,16 @@ InternetSearchDataSource::GetData(const PRUnichar *dataUni, const char *sectionT\\n \\n   while(!buffer.IsEmpty())\\n   {\\n-    PRInt32 eol = buffer.FindCharInSet(\\\"\\\\r\\\\n\\\", 0);\\n+    PRInt32 eol = nsString_FindCharInSet(buffer, \\\"\\\\r\\\\n\\\", 0);\\n     if (eol < 0)  break;\\n-    nsAutoString  line;\\n-    if (eol > 0)\\n-    {\\n-      buffer.Left(line, eol);\\n-    }\\n+    nsAutoString  line(StringHead(buffer, eol));\\n     buffer.Cut(0, eol+1);\\n     if (line.IsEmpty()) continue;   // skip empty lines\\n     if (line[0] == PRUnichar('#'))  continue; // skip comments\\n     line.Trim(\\\" \\\\t\\\");\\n     if (!inSection)\\n     {\\n-      PRInt32 sectionOffset = nsString_Find(section, line, PR_TRUE);\\n+      PRInt32 sectionOffset = line.Find(section, CaseInsensitiveCompare);\\n       if (sectionOffset < 0)  continue;\\n       if (sectionNum > 0)\\n       {\\n@@ -4430,13 +4431,9 @@ InternetSearchDataSource::GetData(const PRUnichar *dataUni, const char *sectionT\\n     PRInt32 equal = line.FindChar(PRUnichar('='));\\n     if (equal < 0)  continue;     // skip lines with no equality\\n     \\n-    nsAutoString  attrib;\\n-    if (equal > 0)\\n-    {\\n-      line.Left(attrib, equal /* - 1 */);\\n-    }\\n+    nsAutoString  attrib(StringHead(line, equal /* - 1 */));\\n     attrib.Trim(\\\" \\\\t\\\");\\n-    if (attrib.EqualsIgnoreCase(attribToFind))\\n+    if (attrib.Equals(NS_ConvertASCIItoUTF16(attribToFind), CaseInsensitiveCompare))\\n     {\\n       line.Cut(0, equal+1);\\n       line.Trim(\\\" \\\\t\\\");\\n@@ -4458,7 +4455,7 @@ InternetSearchDataSource::GetData(const PRUnichar *dataUni, const char *sectionT\\n       }\\n       else\\n       {\\n-        PRInt32 commentOffset = value.FindCharInSet(\\\"# \\\\t\\\", 0);\\n+        PRInt32 commentOffset = nsString_FindCharInSet(value, \\\"# \\\\t\\\", 0);\\n         if (commentOffset >= 0)\\n         {\\n           value.SetLength(commentOffset);\\n@@ -4487,13 +4484,9 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n \\n   while(!buffer.IsEmpty())\\n   {\\n-    PRInt32 eol = buffer.FindCharInSet(\\\"\\\\r\\\\n\\\", 0);\\n+    PRInt32 eol = nsString_FindCharInSet(buffer, \\\"\\\\r\\\\n\\\", 0);\\n     if (eol < 0)  break;\\n-    nsAutoString  line;\\n-    if (eol > 0)\\n-    {\\n-      buffer.Left(line, eol);\\n-    }\\n+    nsAutoString  line(StringHead(buffer, eol));\\n     buffer.Cut(0, eol+1);\\n     if (line.IsEmpty()) continue;   // skip empty lines\\n     if (line[0] == PRUnichar('#'))  continue; // skip comments\\n@@ -4558,7 +4551,9 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n             PRInt32 endQuote = line.FindChar(PRUnichar('\\\\\\\"'), startQuote + 1);\\n             if (endQuote > 0)\\n             {\\n-              line.Mid(nameAttrib, startQuote+1, endQuote-startQuote-1);\\n+              nameAttrib = Substring(line,\\n+                                     startQuote + 1,\\n+                                     endQuote - startQuote - 1);\\n               line.Cut(0, endQuote + 1);\\n             }\\n           }\\n@@ -4567,7 +4562,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n             nameAttrib = line;\\n             nameAttrib.Cut(0, equal+1);\\n             nameAttrib.Trim(\\\" \\\\t\\\");\\n-            PRInt32 space = nameAttrib.FindCharInSet(\\\" \\\\t\\\", 0);\\n+            PRInt32 space = nsString_FindCharInSet(nameAttrib, \\\" \\\\t\\\", 0);\\n             if (space > 0)\\n             {\\n               nameAttrib.SetLength(space);\\n@@ -4602,7 +4597,9 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n             PRInt32 endQuote = line.FindChar(PRUnichar('\\\\\\\"'), startQuote + 1);\\n             if (endQuote >= 0)\\n             {\\n-              line.Mid(valueAttrib, startQuote+1, endQuote-startQuote-1);\\n+              valueAttrib = Substring(line,\\n+                                      startQuote + 1,\\n+                                      endQuote - startQuote - 1);\\n             }\\n           }\\n           else\\n@@ -4611,7 +4608,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n             valueAttrib = line;\\n             valueAttrib.Cut(0, equal+1);\\n             valueAttrib.Trim(\\\" \\\\t\\\");\\n-            PRInt32 space = valueAttrib.FindCharInSet(\\\" \\\\t>\\\", 0);\\n+            PRInt32 space = nsString_FindCharInSet(valueAttrib, \\\" \\\\t>\\\", 0);\\n             if (space > 0)\\n             {\\n               valueAttrib.SetLength(space);\\n@@ -4627,7 +4624,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n       \\n       // XXX should ignore if  mode=browser  is specified\\n       // XXX need to do this better\\n-      if (line.RFind(\\\"mode=browser\\\", PR_TRUE) >= 0)\\n+      if (line.Find(\\\"mode=browser\\\", PR_TRUE) >= 0)\\n         continue;\\n \\n       if (!valueAttrib.IsEmpty())\\n@@ -4680,7 +4677,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n \\n     if (defaultBranch) \\n     {\\n-      nsXPIDLString defaultEngineNameStr;\\n+      nsString defaultEngineNameStr;\\n       nsCOMPtr<nsIPrefLocalizedString> defaultEngineName;\\n       rv = defaultBranch->GetComplexValue(\\\"browser.search.defaultenginename\\\", \\n                                           NS_GET_IID(nsIPrefLocalizedString),\\n@@ -4688,7 +4685,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n       if (NS_SUCCEEDED(rv)) {\\n         defaultEngineName->GetData(getter_Copies(defaultEngineNameStr));\\n \\n-        nsXPIDLString selectedEngineNameStr;\\n+        nsString selectedEngineNameStr;\\n         nsCOMPtr<nsIPrefLocalizedString> selectedEngineName;\\n         rv = rootBranch->GetComplexValue(\\\"browser.search.selectedEngine\\\", \\n                                          NS_GET_IID(nsIPrefLocalizedString),\\n@@ -4720,7 +4717,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n         break;\\n \\n       nsCOMPtr<nsIPrefLocalizedString> parameter;\\n-      nsXPIDLString parameterStr;\\n+      nsString parameterStr;\\n       rv = pb->GetComplexValue(engineIsNotDefault ? \\\"custom\\\" : \\\"default\\\", \\n                                NS_GET_IID(nsIPrefLocalizedString), \\n                                getter_AddRefs(parameter));\\n@@ -4745,7 +4742,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n     nsCOMPtr<nsIStringBundle> intlBundle;\\n     rv = stringService->CreateBundle(INTL_PROPERTIES, getter_AddRefs(intlBundle));\\n \\n-    nsXPIDLString langName;\\n+    nsString langName;\\n     intlBundle->GetStringFromName(NS_LITERAL_STRING(\\\"general.useragent.locale\\\").get(), \\n                                   getter_Copies(langName));\\n \\n@@ -4753,7 +4750,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n     keyTemplate += engineName;\\n     keyTemplate.Append(NS_LITERAL_STRING(\\\".release\\\"));\\n \\n-    nsXPIDLString releaseValue;\\n+    nsString releaseValue;\\n     NS_NAMED_LITERAL_STRING(distributionID, MOZ_DISTRIBUTION_ID);\\n     const PRUnichar* strings[] = { distributionID.get(), langName.get() };\\n     bundle->FormatStringFromName(keyTemplate.get(), strings, 2, getter_Copies(releaseValue));\\n@@ -4782,7 +4779,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n       if (NS_FAILED(rv)) \\n         break;\\n \\n-      nsXPIDLString orderEngineNameStr;\\n+      nsString orderEngineNameStr;\\n       orderEngineName->GetData(getter_Copies(orderEngineNameStr));\\n       if (orderEngineNameStr.Equals(engineName))\\n         break;\\n@@ -4809,7 +4806,7 @@ InternetSearchDataSource::GetInputs(const PRUnichar *dataUni, nsString &engineNa\\n     \\n       if (NS_SUCCEEDED(rv)) \\n       {\\n-        nsXPIDLString orderParamStr;\\n+        nsString orderParamStr;\\n         orderParam->GetData(getter_Copies(orderParamStr));\\n \\n         if (!orderParamStr.IsEmpty())\\n@@ -4832,10 +4829,11 @@ InternetSearchDataSource::computeIndex(nsAutoString &factor,\\n                                        PRUint16 page, PRInt16 direction)\\n {\\n   // XXX get page\\n-  PRInt32 errorCode, index = 0;\\n-  PRInt32 factorInt = factor.ToInteger(&errorCode);\\n+  nsresult rv;\\n+  PRInt32 index = 0;\\n+  PRInt32 factorInt = factor.ToInteger(&rv);\\n   \\n-  if (NS_SUCCEEDED(errorCode))\\n+  if (NS_SUCCEEDED(rv))\\n   {\\n     // if factor is garbled assume 10\\n     if (factorInt <= 0)\\n@@ -5091,9 +5089,8 @@ InternetSearchDataSource::OnStopRequest(nsIRequest *request, nsISupports *ctxt,\\n #ifdef  DEBUG_SEARCH_UPDATES\\n             printf(\\\"    Search engine='%s' data length='%d'\\\\n\\\", engineURI, dataLen);\\n #endif\\n-            PRInt32 contentLen=0, err=0;\\n-            contentLen = contentLengthValue.ToInteger(&err);\\n-            if ((!err) && (dataLen != contentLen))\\n+            PRInt32 contentLen = contentLengthValue.ToInteger(&rv);\\n+            if (NS_SUCCEEDED(rv) && (dataLen != contentLen))\\n             {\\n #ifdef  DEBUG_SEARCH_UPDATES\\n               printf(\\\"    Search engine '%s' data length != remote content length, so update\\\\n\\\",\\n@@ -5309,8 +5306,8 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n   aURL->GetPath(serverPath);\\n   if (!serverPath.IsEmpty())\\n   {\\n-        AppendUTF8toUTF16(serverPath, serverPathStr);\\n-        serverPath.Truncate();\\n+    CopyUTF8toUTF16(serverPath, serverPathStr);\\n+    serverPath.Truncate();\\n \\n     PRInt32 serverOptionsOffset = serverPathStr.FindChar(PRUnichar('?'));\\n     if (serverOptionsOffset >= 0) serverPathStr.SetLength(serverOptionsOffset);\\n@@ -5396,18 +5393,18 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n     nsCOMPtr<nsIRDFLiteral> bannerLiteral;\\n     if ((!bannerStartStr.IsEmpty()) && (!bannerEndStr.IsEmpty()))\\n     {\\n-      PRInt32 bannerStart = nsString_Find(bannerStartStr, htmlResults, PR_TRUE);\\n+      PRInt32 bannerStart = htmlResults.Find(bannerStartStr, CaseInsensitiveCompare);\\n       if (bannerStart >= 0)\\n       {\\n         startIndex = bannerStart;\\n \\n-        PRInt32 bannerEnd = nsString_Find(bannerEndStr, htmlResults, PR_TRUE, bannerStart + bannerStartStr.Length());\\n+        PRInt32 bannerEnd = htmlResults.Find(bannerEndStr, bannerStart + bannerStartStr.Length(), CaseInsensitiveCompare);\\n         if (bannerEnd > bannerStart)\\n         {\\n           stopIndex = bannerEnd - 1;\\n \\n           nsAutoString  htmlBanner;\\n-          htmlResults.Mid(htmlBanner, bannerStart, bannerEnd - bannerStart - 1);\\n+          htmlBanner = Substring(htmlResults, bannerStart, bannerEnd - bannerStart - 1);\\n           if (!htmlBanner.IsEmpty())\\n           {\\n             const PRUnichar *bannerUni = htmlBanner.get();\\n@@ -5422,7 +5419,7 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n \\n     if (!resultListStartStr.IsEmpty())\\n     {\\n-      PRInt32 resultListStart = nsString_Find(resultListStartStr, htmlResults, PR_TRUE);\\n+      PRInt32 resultListStart = htmlResults.Find(resultListStartStr, CaseInsensitiveCompare);\\n       if (resultListStart >= 0)\\n       {\\n         startIndex = resultListStart + resultListStartStr.Length();\\n@@ -5439,13 +5436,12 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n       // rjc note: use RFind to find the LAST\\n       // occurrence of resultListEndStr\\n \\n-        nsAString::const_iterator originalStart, start, end;\\n-        htmlResults.BeginReading(start);\\n-        htmlResults.EndReading(end);\\n-        originalStart = start;\\n-        \\n-        if (RFindInReadable(resultListEndStr, start, end))\\n-      stopIndex = Distance(originalStart, start);\\n+      const PRUnichar *originalStart, *start, *end;\\n+      htmlResults.BeginReading(&start, &end);\\n+      originalStart = start;\\n+      \\n+      if (RFindInReadable(resultListEndStr, &start, &end))\\n+        stopIndex = start - originalStart;\\n     }\\n \\n     PRBool  trimItemStart = PR_TRUE;\\n@@ -5468,18 +5464,18 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n     while(startIndex < stopIndex)\\n     {\\n       PRInt32 resultItemStart;\\n-      resultItemStart = nsString_Find(resultItemStartStr, htmlResults, PR_TRUE, startIndex);\\n+      resultItemStart = htmlResults.Find(resultItemStartStr, startIndex, CaseInsensitiveCompare);\\n       if (resultItemStart < 0)  break;\\n \\n       PRInt32 resultItemEnd;\\n       if (trimItemStart)\\n       {\\n         resultItemStart += resultItemStartStr.Length();\\n-        resultItemEnd = nsString_Find(resultItemEndStr, htmlResults, PR_TRUE, resultItemStart);\\n+        resultItemEnd = htmlResults.Find(resultItemEndStr, resultItemStart, CaseInsensitiveCompare);\\n       }\\n       else\\n       {\\n-        resultItemEnd = nsString_Find(resultItemEndStr, htmlResults, PR_TRUE, resultItemStart + resultItemStartStr.Length());\\n+        resultItemEnd = htmlResults.Find(resultItemEndStr, resultItemStart + resultItemStartStr.Length(), CaseInsensitiveCompare);\\n       }\\n \\n       if (resultItemEnd < 0)\\n@@ -5503,13 +5499,7 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n       startIndex = resultItemEnd;\\n \\n #ifdef  DEBUG_SEARCH_OUTPUT\\n-      char  *results = ToNewCString(resultItem);\\n-      if (results)\\n-      {\\n-        printf(\\\"\\\\n----- Search result: '%s'\\\\n\\\\n\\\", results);\\n-        nsCRT::free(results);\\n-        results = nsnull;\\n-      }\\n+      printf(\\\"\\\\n----- Search result: '%s'\\\\n\\\\n\\\", NS_ConvertUTF16toUTF8(resultItem).get());\\n #endif\\n \\n       // look for href\\n@@ -5523,7 +5513,7 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n       }\\n \\n       nsAutoString  hrefStr;\\n-      PRInt32   quoteStartOffset = resultItem.FindCharInSet(\\\"\\\\\\\"\\\\'>\\\", hrefOffset);\\n+      PRInt32   quoteStartOffset = nsString_FindCharInSet(resultItem, \\\"\\\\\\\"\\\\'>\\\", hrefOffset);\\n       PRInt32   quoteEndOffset;\\n       if (quoteStartOffset < hrefOffset)\\n       {\\n@@ -5542,11 +5532,11 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n         }\\n         else\\n         {\\n-          quoteEndOffset = resultItem.FindCharInSet(\\\"\\\\\\\"\\\\'\\\", quoteStartOffset + 1);\\n+          quoteEndOffset = nsString_FindCharInSet(resultItem, \\\"\\\\\\\"\\\\'\\\", quoteStartOffset + 1);\\n           if (quoteEndOffset < hrefOffset)  continue;\\n         }\\n       }\\n-      resultItem.Mid(hrefStr, quoteStartOffset + 1, quoteEndOffset - quoteStartOffset - 1);\\n+      hrefStr = Substring(resultItem, quoteStartOffset + 1, quoteEndOffset - quoteStartOffset - 1);\\n \\n       ConvertEntities(hrefStr, PR_FALSE, PR_TRUE, PR_FALSE);\\n \\n@@ -5571,7 +5561,7 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n             PRInt32 pathOptionsOffset = absPathStr.FindChar(PRUnichar('?'));\\n             if (pathOptionsOffset >= 0)\\n               absPathStr.SetLength(pathOptionsOffset);\\n-            PRBool  pathsMatchFlag = serverPathStr.Equals(absPathStr, nsCaseInsensitiveStringComparator());\\n+            PRBool  pathsMatchFlag = serverPathStr.Equals(absPathStr, CaseInsensitiveCompare);\\n             if (pathsMatchFlag)\\n               continue;\\n           }\\n@@ -5582,7 +5572,7 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n             absURI->GetAsciiHost(absHost);\\n             if (!absHost.IsEmpty())\\n             {\\n-              PRBool  hostsMatchFlag = !nsCRT::strcasecmp(hostName.get(), absHost.get());\\n+              PRBool  hostsMatchFlag = hostName.Equals(absHost, CaseInsensitiveCompare);\\n               if (hostsMatchFlag)\\n                 continue;\\n             }\\n@@ -5597,13 +5587,7 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n       nsAutoString  site(hrefStr);\\n \\n #ifdef  DEBUG_SEARCH_OUTPUT\\n-      char *hrefCStr = ToNewCString(hrefStr);\\n-      if (hrefCStr)\\n-      {\\n-        printf(\\\"HREF: '%s'\\\\n\\\", hrefCStr);\\n-        nsCRT::free(hrefCStr);\\n-        hrefCStr = nsnull;\\n-      }\\n+      printf(\\\"HREF: '%s'\\\\n\\\", NS_ConvertUTF16toUTF8(hrefStr).get());\\n #endif\\n \\n       nsCOMPtr<nsIRDFResource>  res;\\n@@ -5686,13 +5670,13 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n       if ((!nameStartStr.IsEmpty()) && (!nameEndStr.IsEmpty()))\\n       {\\n         PRInt32   nameStart;\\n-        if ((nameStart = nsString_Find(nameStartStr, resultItem, PR_TRUE)) >= 0)\\n+        if ((nameStart = resultItem.Find(nameStartStr, CaseInsensitiveCompare)) >= 0)\\n         {\\n           nameStart += nameStartStr.Length();\\n-          PRInt32 nameEnd = nsString_Find(nameEndStr, resultItem, PR_TRUE, nameStart);\\n+          PRInt32 nameEnd = resultItem.Find(nameEndStr, nameStart, CaseInsensitiveCompare);\\n           if (nameEnd > nameStart)\\n           {\\n-            resultItem.Mid(nameStr, nameStart, nameEnd - nameStart);\\n+            nameStr = Substring(resultItem, nameStart, nameEnd - nameStart);\\n           }\\n         }\\n       }\\n@@ -5715,7 +5699,7 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n #endif\\n           continue;\\n         }\\n-        resultItem.Mid(nameStr, anchorEnd + 1, anchorStop - anchorEnd - 1);\\n+        nameStr = Substring(resultItem, anchorEnd + 1, anchorStop - anchorEnd - 1);\\n       }\\n \\n       ConvertEntities(nameStr);\\n@@ -5745,14 +5729,14 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n       if (!dateStartStr.IsEmpty())\\n       {\\n         nsAutoString  dateItem;\\n-        PRInt32   dateStart;\\n-        if ((dateStart = nsString_Find(dateStartStr, resultItem, PR_TRUE)) >= 0)\\n+        PRInt32   dateStart = resultItem.Find(dateStartStr, CaseInsensitiveCompare);\\n+        if (dateStart >= 0)\\n         {\\n           dateStart += dateStartStr.Length();\\n-          PRInt32 dateEnd = nsString_Find(dateEndStr, resultItem, PR_TRUE, dateStart);\\n+          PRInt32 dateEnd = resultItem.Find(dateEndStr, dateStart, CaseInsensitiveCompare);\\n           if (dateEnd > dateStart)\\n           {\\n-            resultItem.Mid(dateItem, dateStart, dateEnd - dateStart);\\n+            dateItem = Substring(resultItem, dateStart, dateEnd - dateStart);\\n           }\\n         }\\n         \\n@@ -5787,14 +5771,14 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n       if (!priceStartStr.IsEmpty())\\n       {\\n         nsAutoString  priceItem;\\n-        PRInt32   priceStart;\\n-        if ((priceStart = nsString_Find(priceStartStr, resultItem, PR_TRUE)) >= 0)\\n+        PRInt32   priceStart = resultItem.Find(priceStartStr, CaseInsensitiveCompare);\\n+        if (priceStart >= 0)\\n         {\\n           priceStart += priceStartStr.Length();\\n-          PRInt32 priceEnd = nsString_Find(priceEndStr, resultItem, PR_TRUE, priceStart);\\n+          PRInt32 priceEnd = resultItem.Find(priceEndStr, priceStart, CaseInsensitiveCompare);\\n           if (priceEnd > priceStart)\\n           {\\n-            resultItem.Mid(priceItem, priceStart, priceEnd - priceStart);\\n+            priceItem = Substring(resultItem, priceStart, priceEnd - priceStart);\\n             ConvertEntities(priceItem);\\n           }\\n         }\\n@@ -5811,12 +5795,12 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n             }\\n           }\\n \\n-          PRInt32 priceCharStartOffset = priceItem.FindCharInSet(\\\"1234567890\\\");\\n+          PRInt32 priceCharStartOffset = nsString_FindCharInSet(priceItem, \\\"1234567890\\\");\\n           if (priceCharStartOffset >= 0)\\n           {\\n             priceItem.Cut(0, priceCharStartOffset);\\n-            PRInt32 priceErr;\\n-            float val = priceItem.ToFloat(&priceErr);\\n+            nsCString priceItemC = NS_LossyConvertUTF16toASCII(priceItem);\\n+            float val = (float)PR_strtod(priceItemC.BeginReading(), nsnull);\\n             if (priceItem.FindChar(PRUnichar('.')) >= 0)  val *= 100;\\n \\n             nsCOMPtr<nsIRDFInt> priceSortLiteral;\\n@@ -5833,14 +5817,14 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n         if (!availStartStr.IsEmpty())\\n         {\\n           nsAutoString  availItem;\\n-          PRInt32   availStart;\\n-          if ((availStart = nsString_Find(availStartStr, resultItem, PR_TRUE)) >= 0)\\n+          PRInt32   availStart = resultItem.Find(availStartStr, CaseInsensitiveCompare);\\n+          if (availStart >= 0)\\n           {\\n             availStart += availStartStr.Length();\\n-            PRInt32 availEnd = nsString_Find(availEndStr, resultItem, PR_TRUE, availStart);\\n+            PRInt32 availEnd = resultItem.Find(availEndStr, availStart, CaseInsensitiveCompare);\\n             if (availEnd > availStart)\\n             {\\n-              resultItem.Mid(availItem, availStart, availEnd - availStart);\\n+              availItem = Substring(resultItem, availStart, availEnd - availStart);\\n               ConvertEntities(availItem);\\n             }\\n           }\\n@@ -5862,14 +5846,14 @@ InternetSearchDataSource::ParseHTML(nsIURI *aURL, nsIRDFResource *mParent,\\n \\n       // look for relevance\\n       nsAutoString  relItem;\\n-      PRInt32   relStart;\\n-      if ((relStart = nsString_Find(relevanceStartStr, resultItem, PR_TRUE)) >= 0)\\n+      PRInt32   relStart = resultItem.Find(relevanceStartStr, CaseInsensitiveCompare);\\n+      if (relStart >= 0)\\n       {\\n         relStart += relevanceStartStr.Length();\\n-        PRInt32 relEnd = nsString_Find(relevanceEndStr, resultItem, PR_TRUE);\\n+        PRInt32 relEnd = resultItem.Find(relevanceEndStr, CaseInsensitiveCompare);\\n         if (relEnd > relStart)\\n         {\\n-          resultItem.Mid(relItem, relStart, relEnd - relStart);\\n+          relItem = Substring(resultItem, relStart, relEnd - relStart);\\n         }\\n       }\\n \\n@@ -6135,8 +6119,7 @@ InternetSearchDataSource::ConvertEntities(nsString &nameStr, PRBool removeHTMLFl\\n     if ((semiOffset = nameStr.FindChar(PRUnichar(';'), ampOffset+1)) <= ampOffset)\\n       break;\\n \\n-    nsAutoString  entityStr;\\n-    nameStr.Mid(entityStr, ampOffset, semiOffset-ampOffset+1);\\n+    nsAutoString  entityStr(Substring(nameStr, ampOffset, semiOffset - ampOffset + 1));\\n     nameStr.Cut(ampOffset, semiOffset-ampOffset+1);\\n \\n     PRUnichar entityChar = 0;\\n@@ -6251,11 +6234,7 @@ InternetSearchDataSource::ConvertEntities(nsString &nameStr, PRBool removeHTMLFl\\n \\n   if (removeCRLFsFlag)\\n   {\\n-    // cut out any CRs or LFs\\n-    while ((offset = nameStr.FindCharInSet(\\\"\\\\n\\\\r\\\", 0)) >= 0)\\n-    {\\n-      nameStr.Cut(offset, 1);\\n-    }\\n+    nameStr.StripChars(\\\"\\\\n\\\\r\\\");\\n   }\\n \\n   if (trimWhiteSpaceFlag)\\n@@ -6272,12 +6251,12 @@ InternetSearchDataSource::Observe(nsISupports *aSubject, const char *aTopic, con\\n {\\n     nsresult rv = NS_OK;\\n \\n-    if (!nsCRT::strcmp(aTopic, \\\"profile-before-change\\\"))\\n+    if (!strcmp(aTopic, \\\"profile-before-change\\\"))\\n     {\\n         // The profile is about to change.\\n         categoryDataSource = nsnull;\\n \\n-        if (!nsCRT::strcmp(someData, NS_LITERAL_STRING(\\\"shutdown-cleanse\\\").get()))\\n+        if (NS_LITERAL_STRING(\\\"shutdown-cleanse\\\").Equals(someData))\\n         {\\n             // Delete search.rdf\\n             nsCOMPtr<nsIFile> searchFile;\\n@@ -6286,7 +6265,7 @@ InternetSearchDataSource::Observe(nsISupports *aSubject, const char *aTopic, con\\n                 rv = searchFile->Remove(PR_FALSE);\\n         }\\n     }\\n-    else if (!nsCRT::strcmp(aTopic, \\\"profile-do-change\\\"))\\n+    else if (!strcmp(aTopic, \\\"profile-do-change\\\"))\\n     {\\n         // The profile has aleady changed.\\n         if (!categoryDataSource)\\ndiff --git a/xpfe/components/search/src/nsInternetSearchService.h b/xpfe/components/search/src/nsInternetSearchService.h\\nindex 1811a35..f6dec6a 100644\\n--- a/xpfe/components/search/src/nsInternetSearchService.h\\n+++ b/xpfe/components/search/src/nsInternetSearchService.h\\n@@ -39,7 +39,7 @@\\n #define nsinternetsearchdatasource__h____\\n \\n #include \\\"nsCOMPtr.h\\\"\\n-#include \\\"nsString.h\\\"\\n+#include \\\"nsStringAPI.h\\\"\\n #include \\\"nsISearchService.h\\\"\\n #include \\\"nsIRDFDataSource.h\\\"\\n #include \\\"nsIStreamListener.h\\\"\\n@@ -143,7 +143,6 @@ protected:\\n   PRBool    isSearchURI(nsIRDFResource* aResource);\\n   PRBool    isSearchCategoryURI(nsIRDFResource* aResource);\\n   PRBool    isSearchCategoryEngineURI(nsIRDFResource* aResource);\\n-  PRBool    isSearchCategoryEngineBasenameURI(nsIRDFNode *aResource);\\n   PRBool    isSearchCommand(nsIRDFResource* aResource);\\n   nsresult  resolveSearchCategoryEngineURI(nsIRDFResource *source, nsIRDFResource **trueEngine);\\n   nsresult  BeginSearchRequest(nsIRDFResource *source, PRBool doNetworkRequest);\\ndiff --git a/xpfe/components/search/src/nsLocalSearchService.cpp b/xpfe/components/search/src/nsLocalSearchService.cpp\\nindex 9e165d1..822693d 100755\\n--- a/xpfe/components/search/src/nsLocalSearchService.cpp\\n+++ b/xpfe/components/search/src/nsLocalSearchService.cpp\\n@@ -44,10 +44,11 @@\\n #include \\\"nsLocalSearchService.h\\\"\\n #include \\\"nscore.h\\\"\\n #include \\\"nsIServiceManager.h\\\"\\n+#include \\\"nsServiceManagerUtils.h\\\"\\n+#include \\\"nsComponentManagerUtils.h\\\"\\n #include \\\"nsIRDFContainerUtils.h\\\"\\n #include \\\"nsEnumeratorUtils.h\\\"\\n-#include \\\"nsXPIDLString.h\\\"\\n-#include \\\"nsReadableUtils.h\\\"\\n+#include \\\"nsArrayEnumerator.h\\\"\\n #include \\\"nsUnicharUtils.h\\\"\\n #include \\\"plhash.h\\\"\\n #include \\\"plstr.h\\\"\\n@@ -59,7 +60,7 @@\\n #include \\\"nsIRDFObserver.h\\\"\\n #include \\\"nsRDFCID.h\\\"\\n #include \\\"rdf.h\\\"\\n-#include \\\"nsCRT.h\\\"\\n+#include \\\"nsCRTGlue.h\\\"\\n \\n static NS_DEFINE_CID(kRDFServiceCID,               NS_RDFSERVICE_CID);\\n static NS_DEFINE_CID(kTextToSubURICID,             NS_TEXTTOSUBURI_CID);\\n@@ -166,7 +167,8 @@ LocalSearchDataSource::GetURI(char **uri)\\n \\tif (! uri)\\n \\t\\treturn NS_ERROR_NULL_POINTER;\\n \\n-\\tif ((*uri = nsCRT::strdup(\\\"rdf:localsearch\\\")) == nsnull)\\n+\\t*uri = ToNewCString(NS_LITERAL_CSTRING(\\\"rdf:localsearch\\\"));\\n+\\tif (! *uri)\\n \\t\\treturn NS_ERROR_OUT_OF_MEMORY;\\n \\n \\treturn NS_OK;\\n@@ -305,7 +307,8 @@ LocalSearchDataSource::parseResourceIntoFindTokens(nsIRDFResource *u, findTokenP\\n \\t\\treturn(NS_ERROR_OUT_OF_MEMORY);\\n \\n \\t/* parse ID, build up token list */\\n-\\tif ((token = nsCRT::strtok(id, \\\"&\\\", &newstr)) != NULL)\\n+\\tnewstr = id;\\n+\\tif ((token = NS_strtok(\\\"&\\\", &newstr)) != NULL)\\n \\t{\\n \\t\\twhile (token != NULL)\\n \\t\\t{\\n@@ -332,12 +335,12 @@ LocalSearchDataSource::parseResourceIntoFindTokens(nsIRDFResource *u, findTokenP\\n \\t\\t\\t\\t    }\\n \\t\\t\\t\\t    else\\n \\t\\t\\t\\t    {\\n-\\t\\t\\t\\t        CopyASCIItoUTF16(value, tokens[loop].value);\\n+\\t\\t\\t\\t        CopyASCIItoUTF16(nsDependentCString(value), tokens[loop].value);\\n     \\t\\t\\t    }\\n \\t\\t\\t\\t\\tbreak;\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t\\ttoken = nsCRT::strtok(newstr, \\\"&\\\", &newstr);\\n+\\t\\t\\ttoken = NS_strtok(\\\"&\\\", &newstr);\\n \\t\\t}\\n \\t}\\n \\tPL_strfree(id);\\n@@ -365,50 +368,32 @@ LocalSearchDataSource::doMatch(nsIRDFLiteral *literal,\\n \\n         if (matchMethod.EqualsLiteral(\\\"contains\\\"))\\n \\t{\\n-            if (FindInReadable(matchText, value,\\n-                               nsCaseInsensitiveStringComparator()))\\n+            if (-1 != value.Find(matchText, CaseInsensitiveCompare))\\n                 found = PR_TRUE;\\n \\t}\\n         else if (matchMethod.EqualsLiteral(\\\"startswith\\\"))\\n \\t{\\n-            nsAString::const_iterator start, realstart, end;\\n-            value.BeginReading(start);\\n-            value.EndReading(end);\\n-            realstart = start;\\n-            \\n-            if (FindInReadable(matchText, start, end,\\n-                               nsCaseInsensitiveStringComparator()) &&\\n-                start == realstart)\\n-                \\n+            if (StringBeginsWith(value, matchText, CaseInsensitiveCompare))\\n                 found = PR_TRUE;\\n \\t}\\n         else if (matchMethod.EqualsLiteral(\\\"endswith\\\"))\\n \\t{\\n-            nsAString::const_iterator start, end, realend;\\n-            value.BeginReading(start);\\n-            value.EndReading(end);\\n-            realend = end;\\n-\\n-            if (RFindInReadable(matchText, start, end,\\n-                                nsCaseInsensitiveStringComparator()) &&\\n-                end == realend)\\n-                \\n+            if (StringEndsWith(value, matchText, CaseInsensitiveCompare))\\n                 found = PR_TRUE;\\n \\t}\\n         else if (matchMethod.EqualsLiteral(\\\"is\\\"))\\n \\t{\\n-            if (value.Equals(matchText, nsCaseInsensitiveStringComparator()))\\n+            if (value.Equals(matchText, CaseInsensitiveCompare))\\n                 found = PR_TRUE;\\n \\t}\\n         else if (matchMethod.EqualsLiteral(\\\"isnot\\\"))\\n \\t{\\n-            if (!value.Equals(matchText, nsCaseInsensitiveStringComparator()))\\n+            if (!value.Equals(matchText, CaseInsensitiveCompare))\\n                 found = PR_TRUE;\\n \\t}\\n         else if (matchMethod.EqualsLiteral(\\\"doesntcontain\\\"))\\n \\t{\\n-            if (!FindInReadable(matchText, value,\\n-                                nsCaseInsensitiveStringComparator()))\\n+            if (-1 == value.Find(matchText, CaseInsensitiveCompare))\\n                 found = PR_TRUE;\\n \\t}\\n         return(found);\\n@@ -445,9 +430,8 @@ LocalSearchDataSource::doIntMatch(nsIRDFInt *aInt,\\n     rv = aInt->GetValue(&val);\\n     if (NS_FAILED(rv)) return PR_FALSE;\\n     \\n-    PRInt32 error=0;\\n-    PRInt32 matchVal = matchText.ToInteger(&error);\\n-    if (error != 0) return PR_FALSE;\\n+    PRInt32 matchVal = matchText.ToInteger(&rv);\\n+    if (NS_FAILED(rv)) return PR_FALSE;\\n     \\n     if (matchMethod.EqualsLiteral(\\\"is\\\"))\\n         found = (val == matchVal);\\n@@ -499,7 +483,7 @@ LocalSearchDataSource::dateMatches(nsIRDFDate *aDate,\\n \\n \\n NS_METHOD\\n-LocalSearchDataSource::parseFindURL(nsIRDFResource *u, nsISupportsArray *array)\\n+LocalSearchDataSource::parseFindURL(nsIRDFResource *u, nsIMutableArray *array)\\n {\\n   findTokenStruct\\t\\ttokens[5];\\n   nsresult rv;\\n@@ -590,7 +574,7 @@ LocalSearchDataSource::parseFindURL(nsIRDFResource *u, nsISupportsArray *array)\\n     found = matchNode(value, tokens[2].value, tokens[3].value);\\n \\n     if (found)\\n-      array->AppendElement(source);\\n+      array->AppendElement(source, PR_FALSE);\\n    }\\n \\n   if (rv == NS_RDF_CURSOR_EMPTY)\\n@@ -626,8 +610,8 @@ NS_METHOD\\n LocalSearchDataSource::getFindResults(nsIRDFResource *source, nsISimpleEnumerator** aResult)\\n {\\n \\tnsresult\\t\\t\\trv;\\n-\\tnsCOMPtr<nsISupportsArray>\\tnameArray;\\n-\\trv = NS_NewISupportsArray( getter_AddRefs(nameArray) );\\n+\\tnsCOMPtr<nsIMutableArray>\\tnameArray;\\n+\\tnameArray = do_CreateInstance(NS_ARRAY_CONTRACTID, &rv);\\n \\tif (NS_FAILED(rv)) return rv;\\n \\n \\trv = parseFindURL(source, nameArray);\\n@@ -854,12 +838,12 @@ LocalSearchDataSource::ArcLabelsOut(nsIRDFResource *source,\\n \\n \\tif (isFindURI(source))\\n \\t{\\n-\\t\\tnsCOMPtr<nsISupportsArray> array;\\n-\\t\\trv = NS_NewISupportsArray( getter_AddRefs(array) );\\n+\\t\\tnsCOMPtr<nsIMutableArray> array;\\n+\\t\\tarray = do_CreateInstance(NS_ARRAY_CONTRACTID, &rv);\\n \\t\\tif (NS_FAILED(rv)) return rv;\\n \\n-\\t\\tarray->AppendElement(kNC_Child);\\n-\\t\\tarray->AppendElement(kNC_pulse);\\n+\\t\\tarray->AppendElement(kNC_Child, PR_FALSE);\\n+\\t\\tarray->AppendElement(kNC_pulse, PR_FALSE);\\n \\n                 return NS_NewArrayEnumerator(labels, array);\\n \\t}\\ndiff --git a/xpfe/components/search/src/nsLocalSearchService.h b/xpfe/components/search/src/nsLocalSearchService.h\\nindex 2fab182..6afaaaf 100644\\n--- a/xpfe/components/search/src/nsLocalSearchService.h\\n+++ b/xpfe/components/search/src/nsLocalSearchService.h\\n@@ -38,10 +38,10 @@\\n #ifndef localsearchdb___h_____\\n #define localsearchdb___h_____\\n \\n-#include \\\"nsISupportsArray.h\\\"\\n+#include \\\"nsIMutableArray.h\\\"\\n #include \\\"nsCOMPtr.h\\\"\\n #include \\\"nsIRDFDataSource.h\\\"\\n-#include \\\"nsString.h\\\"\\n+#include \\\"nsStringAPI.h\\\"\\n #include \\\"nsIRDFNode.h\\\"\\n #include \\\"nsIRDFService.h\\\"\\n #include \\\"nsISearchService.h\\\"\\n@@ -94,7 +94,7 @@ protected:\\n     \\n     NS_METHOD   parseDate(const nsAString& aDate, PRInt64* aResult);\\n     \\n-\\tNS_METHOD\\tparseFindURL(nsIRDFResource *u, nsISupportsArray *array);\\n+\\tNS_METHOD\\tparseFindURL(nsIRDFResource *u, nsIMutableArray *array);\\n \\n public:\\n \\tLocalSearchDataSource(void);\\n\""}