{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas65276cb\""},"diff":"\"65276cb bug 391680, don't hardcode browser/mail in too many places, make compare locales work better for suite and calendar, r=KaiRo\\ndiff --git a/testing/tests/l10n/lib/Mozilla/CompareLocales.py b/testing/tests/l10n/lib/Mozilla/CompareLocales.py\\nindex 0d81e3b..cbc5238 100755\\n--- a/testing/tests/l10n/lib/Mozilla/CompareLocales.py\\n+++ b/testing/tests/l10n/lib/Mozilla/CompareLocales.py\\n@@ -116,16 +116,37 @@ class FileCollector:\\n   def iterateFiles(self, mod, locale):\\n     return FileCollector.Iter(Paths.get_base_path(mod, locale))\\n \\n-def collectFiles(aComparer):\\n-  'returns new files, files to compare, files to remove'\\n+def collectFiles(aComparer, apps = None, locales = None):\\n+  '''\\n+  returns new files, files to compare, files to remove\\n+  apps or locales need to be given, apps is a list, locales is a\\n+  hash mapping applications to languages.\\n+  If apps is given, it will look up all-locales for all apps for the\\n+  languages to test.\\n+  'toolkit' is added to the list of modules, too.\\n+  '''\\n+  if not apps and not locales:\\n+    raise RuntimeError, \\\"collectFiles needs either apps or locales\\\"\\n+  if apps and locales:\\n+    raise RuntimeError, \\\"You don't want to give both apps or locales\\\"\\n+  if locales:\\n+    apps = locales.keys()\\n+    # add toolkit, with all of the languages of all apps\\n+    all = set()\\n+    for locs in locales.values():\\n+      all.update(locs)\\n+    locales['toolkit'] = list(all)\\n+  else:\\n+    locales = Paths.allLocales(apps)\\n+  modules = Paths.Modules(apps)\\n   en = FileCollector()\\n   l10n = FileCollector()\\n-  for cat in Paths.locales.keys():\\n-    logging.debug(\\\" testing \\\" + cat+ \\\" on \\\" + str(Paths.modules))\\n-    aComparer.notifyLocales(cat, Paths.locales[cat])\\n-    for mod in Paths.modules[cat]:\\n+  for cat in modules.keys():\\n+    logging.debug(\\\" testing \\\" + cat+ \\\" on \\\" + str(modules))\\n+    aComparer.notifyLocales(cat, locales[cat])\\n+    for mod in modules[cat]:\\n       en_fls = en.getFiles(mod, 'en-US')\\n-      for loc in Paths.locales[cat]:\\n+      for loc in locales[cat]:\\n         fls = dict(en_fls) # create copy for modification\\n         for l_fl, l_path in l10n.iterateFiles(mod, loc):\\n           if fls.has_key(l_fl):\\n@@ -180,10 +201,10 @@ class CompareCollector:\\n       self.files[aLocale]['obsoleteFiles'].append((aModule, aLeaf))\\n     pass\\n \\n-def compare(testLocales=[]):\\n+def compare(apps=None, testLocales=None):\\n   result = {}\\n   c = CompareCollector()\\n-  collectFiles(c)\\n+  collectFiles(c, apps=apps, locales=testLocales)\\n   key = re.compile('[kK]ey')\\n   for fl, locales in c.cl.iteritems():\\n     (mod,path) = fl\\ndiff --git a/testing/tests/l10n/lib/Mozilla/Paths.py b/testing/tests/l10n/lib/Mozilla/Paths.py\\nindex cc3fd8f..6d644f4 100755\\n--- a/testing/tests/l10n/lib/Mozilla/Paths.py\\n+++ b/testing/tests/l10n/lib/Mozilla/Paths.py\\n@@ -35,28 +35,59 @@\\n #\\n # ***** END LICENSE BLOCK *****\\n \\n-modules = {'toolkit': ['netwerk','dom','toolkit','security/manager'],\\n-           'browser': ['browser','extensions/reporter',\\n-                       'other-licenses/branding/firefox'],\\n-           'mail': ['mail','other-licenses/branding/thunderbird',\\n-                    'editor/ui']}\\n+import os.path\\n+from subprocess import *\\n \\n-components = {}\\n-for mod, lst in modules.iteritems():\\n-  for c in lst:\\n-    components[c] = mod\\n \\n-locales = {}\\n-all = {}\\n-for app in ['browser', 'mail']:\\n-  path = 'mozilla/%s/locales/all-locales' % app\\n-  locales[app] = [l.strip() for l in open(path)]\\n-  for loc in locales[app]: all[loc] = 1\\n-all = sorted(all.keys())\\n-locales['toolkit'] = all\\n-#modules = {'browser': ['browser']} # XXX debug\\n-#locales = {'browser': ['fr', 'pl']} # locales['mail']} # XXX debug\\n-pass\\n+class Modules(dict):\\n+  '''\\n+  Subclass of dict to hold information on which directories belong to a\\n+  particular app.\\n+  It expects to have mozilla/client.mk right there from the working dir,\\n+  and asks that for the LOCALES_foo variables.\\n+  This only works for toolkit applications, as it's assuming that the\\n+  apps include toolkit.\\n+  '''\\n+  def __init__(self, apps):\\n+    super(dict, self).__init__()\\n+    lapps = apps[:]\\n+    lapps.insert(0, 'toolkit')\\n+    of  = os.popen('make -f mozilla/client.mk ' + \\\\\\n+                   ' '.join(['echo-variable-LOCALES_' + app for app in lapps]))\\n+    \\n+    for val in of.readlines():\\n+      self[lapps.pop(0)] = val.strip().split()\\n+    for k,v in self.iteritems():\\n+      if k == 'toolkit':\\n+        continue\\n+      self[k] = [d for d in v if d not in self['toolkit']]\\n+\\n+class Components(dict):\\n+  '''\\n+  Subclass of dict to map module dirs to applications. This reverses the\\n+  mapping you'd get from a Modules class, and it in fact uses one to do\\n+  its job.\\n+  '''\\n+  def __init__(self, apps):\\n+    modules = Modules(apps)\\n+    for mod, lst in modules.iteritems():\\n+      for c in lst:\\n+        self[c] = mod\\n+\\n+def allLocales(apps):\\n+  '''\\n+  Get a locales hash for the given list of applications, mapping\\n+  applications to the list of languages given by all-locales.\\n+  Adds a module 'toolkit' holding all languages for all applications, too.\\n+  '''\\n+  locales = {}\\n+  all = set()\\n+  for app in apps:\\n+    path = 'mozilla/%s/locales/all-locales' % app\\n+    locales[app] = [l.strip() for l in open(path)]\\n+    all.update(locales[app])\\n+  locales['toolkit'] = list(all)\\n+  return locales\\n \\n def get_base_path(mod, loc):\\n   'statics for path patterns and conversion'\\ndiff --git a/testing/tests/l10n/lib/Mozilla/Tests.py b/testing/tests/l10n/lib/Mozilla/Tests.py\\nindex 98f097f..d881e25 100755\\n--- a/testing/tests/l10n/lib/Mozilla/Tests.py\\n+++ b/testing/tests/l10n/lib/Mozilla/Tests.py\\n@@ -65,7 +65,7 @@ class CompareTest(Base):\\n     pass\\n   def run(self):\\n     '''Runs CompareLocales.compare()'''\\n-    return CompareLocales.compare()\\n+    return CompareLocales.compare(apps=['browser','mail'])\\n   def serialize(self, result, saveHandler):\\n     '''Serialize the CompareLocales result by locale into\\n       cmp-details-ab-CD\\n@@ -76,6 +76,7 @@ class CompareTest(Base):\\n     class Separator:\\n       def __init__(self):\\n         self.leafBase = 'cmp-details-'\\n+        self.components = Paths.Components(['browser','mail'])\\n       def getDetails(self, res, locale):\\n         dic = {}\\n         res[locale]['tested'].sort()\\n@@ -89,7 +90,7 @@ class CompareTest(Base):\\n         counts = dict([(mod,0) for mod in res['tested']])\\n         counts['total'] = len(res[name])\\n         for mod, path, key in res[name]:\\n-          counts[Paths.components[mod]] +=1\\n+          counts[self.components[mod]] +=1\\n           if not dic[name].has_key(mod):\\n             dic[name][mod] = {path:[key]}\\n             continue\\n@@ -105,7 +106,7 @@ class CompareTest(Base):\\n         counts = dict([(mod,0) for mod in res['tested']])\\n         counts['total'] = len(res[name])\\n         for mod, path in res[name]:\\n-          counts[Paths.components[mod]] +=1\\n+          counts[self.components[mod]] +=1\\n           if not dic[name].has_key(mod):\\n             dic[name][mod] = [path]\\n           else:\\ndiff --git a/testing/tests/l10n/scripts/compare-locales b/testing/tests/l10n/scripts/compare-locales\\nindex ea110a9..429ddff 100755\\n--- a/testing/tests/l10n/scripts/compare-locales\\n+++ b/testing/tests/l10n/scripts/compare-locales\\n@@ -63,15 +63,16 @@ logging.basicConfig(level=(logging.WARNING - (options.v - options.q)*10))\\n \\n # import Paths loaded all-locales for both browser and mail, we overwrite\\n # that with our settings before calling into CompareLocales\\n-Paths.locales = {options.application: args, 'toolkit': args}\\n+locales = {options.application: args}\\n \\n # actually compare the localizations\\n-res = CompareLocales.compare()\\n+res = CompareLocales.compare(testLocales=locales)\\n \\n # helper class to merge all the lists into more consice\\n # dicts\\n class Separator:\\n-  def __init__(self):\\n+  def __init__(self, apps):\\n+    self.components = Paths.Components(apps)\\n     pass\\n   def getDetails(self, res, locale):\\n     dic = {}\\n@@ -86,7 +87,7 @@ class Separator:\\n     counts = dict([(mod,0) for mod in res['tested']])\\n     counts['total'] = len(res[name])\\n     for mod, path, key in res[name]:\\n-      counts[Paths.components[mod]] +=1\\n+      counts[self.components[mod]] +=1\\n       if mod not in  dic[name]:\\n         dic[name][mod] = {path:[key]}\\n         continue\\n@@ -102,14 +103,14 @@ class Separator:\\n     counts = dict([(mod,0) for mod in res['tested']])\\n     counts['total'] = len(res[name])\\n     for mod, path in res[name]:\\n-      counts[Paths.components[mod]] +=1\\n+      counts[self.components[mod]] +=1\\n       if mod not in dic[name]:\\n         dic[name][mod] = [path]\\n       else:\\n         dic[name][mod].append(path)\\n     res[name] = counts\\n \\n-s = Separator()\\n+s = Separator([options.application])\\n \\n # pretty print results for all localizations\\n for loc in args:\\ndiff --git a/testing/tests/l10n/scripts/test-locales b/testing/tests/l10n/scripts/test-locales\\nindex b03cc99..a439f95 100755\\n--- a/testing/tests/l10n/scripts/test-locales\\n+++ b/testing/tests/l10n/scripts/test-locales\\n@@ -147,7 +147,7 @@ opts, optlist = cp.parse_args(sys.argv[1:])\\n #\\n # Set up Logging\\n #\\n-logging.basicConfig(level=(logging.INFO + 10*(opts.q - opts.v)))\\n+logging.basicConfig(level=(logging.WARNING + 10*(opts.q - opts.v)))\\n # Add a handler to store the output\\n h = LogHandler()\\n logging.getLogger('').addHandler(h)\\n\""}