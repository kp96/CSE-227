{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas22251f3\""},"diff":"\"22251f3 Bug 392055 - NS_ENSURE_SUCCESS should print out the error code. r=benjamin, sr=bzbarsky, a=bzbarsky\\ndiff --git a/xpcom/glue/nsDebug.h b/xpcom/glue/nsDebug.h\\nindex b5b62d7..d892f7d 100644\\n--- a/xpcom/glue/nsDebug.h\\n+++ b/xpcom/glue/nsDebug.h\\n@@ -50,6 +50,7 @@\\n \\n #ifdef DEBUG\\n #define NS_DEBUG\\n+#include \\\"prprf.h\\\"\\n #endif\\n \\n #ifdef DEBUG\\n@@ -203,8 +204,29 @@\\n ** Macros for checking results\\n ******************************************************************************/\\n \\n+#ifdef DEBUG\\n+/* So, if you are wondering why on Earth would anyone need to store res in __rv,\\n+ * please consider the case where res is a function call.  We clearly only want\\n+ * to call this function once, so we store its result in __rv.\\n+ */\\n+#define NS_ENSURE_SUCCESS(res, ret)                                       \\\\\\n+  PR_BEGIN_MACRO                                                          \\\\\\n+  nsresult __rv = res;                                                    \\\\\\n+  if (NS_FAILED(__rv)) {                                                  \\\\\\n+    static const char format[] = \\\"NS_ENSURE_SUCCESS(\\\" #res \\\", \\\" #ret \\\") \\\" \\\\\\n+      \\\"failed with result 0x%X\\\";                                          \\\\\\n+    char *msg = PR_smprintf(format, __rv);                                \\\\\\n+    NS_WARNING(msg);                                                      \\\\\\n+    PR_smprintf_free(msg);                                                \\\\\\n+    return ret;                                                           \\\\\\n+  }                                                                       \\\\\\n+  PR_END_MACRO\\n+#else\\n #define NS_ENSURE_SUCCESS(res, ret) \\\\\\n-  NS_ENSURE_TRUE(NS_SUCCEEDED(res), ret)\\n+  PR_BEGIN_MACRO                    \\\\\\n+  if (NS_FAILED(res)) return ret;   \\\\\\n+  PR_END_MACRO\\n+#endif\\n \\n /******************************************************************************\\n ** Macros for checking state and arguments upon entering interface boundaries\\n\""}