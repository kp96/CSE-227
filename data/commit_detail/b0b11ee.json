{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basb0b11ee\""},"diff":"\"b0b11ee Bug 394688. nsIAccessibleText::SetCaretOffset of by characters, affected by source whitespace. r=davidb, a=dsicore\\ndiff --git a/accessible/public/nsIAccessibleText.idl b/accessible/public/nsIAccessibleText.idl\\nindex a61e54f..89024a1 100644\\n--- a/accessible/public/nsIAccessibleText.idl\\n+++ b/accessible/public/nsIAccessibleText.idl\\n@@ -57,6 +57,10 @@ interface nsIAccessibleText : nsISupports\\n   const nsAccessibleTextBoundary BOUNDARY_LINE_END = 6;\\n   const nsAccessibleTextBoundary BOUNDARY_ATTRIBUTE_RANGE = 7;\\n \\n+  /**\\n+   * The current current caret offset.\\n+   * If set < 0 then caret will be placed  at the end of the text\\n+   */\\n   attribute long caretOffset;\\n \\n   readonly attribute long characterCount;\\n@@ -160,9 +164,13 @@ interface nsIAccessibleText : nsISupports\\n                            out long startOffset,\\n                            out long endOffset);\\n \\n+  /**\\n+   * Set the bounds for the given selection range\\n+   * Offsets < 0 will be treated as the equal to the end of the text\\n+   */\\n   void setSelectionBounds (in long selectionNum,\\n-                              in long startOffset,\\n-                              in long endOffset);\\n+                           in long startOffset,\\n+                           in long endOffset);\\n \\n   void addSelection (in long startOffset, in long endOffset);\\n \\ndiff --git a/accessible/src/html/nsHyperTextAccessible.cpp b/accessible/src/html/nsHyperTextAccessible.cpp\\nindex e9bf51b..fd0200c 100644\\n--- a/accessible/src/html/nsHyperTextAccessible.cpp\\n+++ b/accessible/src/html/nsHyperTextAccessible.cpp\\n@@ -1495,15 +1495,26 @@ NS_IMETHODIMP nsHyperTextAccessible::SetSelectionBounds(PRInt32 aSelectionNum, P\\n   nsIFrame *startFrame = GetPosAndText(aStartOffset, aEndOffset, nsnull, &endFrame);\\n   NS_ENSURE_TRUE(startFrame, NS_ERROR_FAILURE);\\n \\n+  nsCOMPtr<nsIPresShell> shell = GetPresShell();\\n+\\n   nsIContent *startParentContent = startFrame->GetContent();\\n+  PRInt32 startOffset;\\n   if (startFrame->GetType() != nsAccessibilityAtoms::textFrame) {\\n     nsIContent *newParent = startParentContent->GetParent();\\n-    aStartOffset = newParent->IndexOf(startParentContent);\\n+    startOffset = newParent->IndexOf(startParentContent);\\n     startParentContent = newParent;\\n   }\\n+  else {\\n+    // We have a rendered offset into the text frame, and it needs to be\\n+    // a content offset for us to set the caret\\n+    nsIFrame *startPrimaryFrame =\\n+      shell->GetPrimaryFrameFor(startFrame->GetContent());\\n+    rv = RenderedToContentOffset(startPrimaryFrame, aStartOffset, &startOffset);\\n+    NS_ENSURE_SUCCESS(rv, rv);\\n+  }\\n   nsCOMPtr<nsIDOMNode> startParentNode(do_QueryInterface(startParentContent));\\n   NS_ENSURE_TRUE(startParentNode, NS_ERROR_FAILURE);\\n-  rv = range->SetStart(startParentNode, aStartOffset);\\n+  rv = range->SetStart(startParentNode, startOffset);\\n   NS_ENSURE_SUCCESS(rv, rv);\\n \\n   if (isOnlyCaret) { \\n@@ -1512,14 +1523,23 @@ NS_IMETHODIMP nsHyperTextAccessible::SetSelectionBounds(PRInt32 aSelectionNum, P\\n   }\\n   else {\\n     nsIContent *endParentContent = endFrame->GetContent();\\n+    PRInt32 endOffset;\\n     if (endFrame->GetType() != nsAccessibilityAtoms::textFrame) {\\n       nsIContent *newParent = endParentContent->GetParent();\\n-      aEndOffset = newParent->IndexOf(endParentContent);\\n+      endOffset = newParent->IndexOf(endParentContent);\\n       endParentContent = newParent;\\n     }\\n+    else {\\n+      // We have a rendered offset into the text frame, and it needs to be\\n+      // a content offset for us to set the caret\\n+      nsIFrame *endPrimaryFrame =\\n+        shell->GetPrimaryFrameFor(endFrame->GetContent());\\n+      rv = RenderedToContentOffset(endPrimaryFrame, aEndOffset, &endOffset);\\n+      NS_ENSURE_SUCCESS(rv, rv);\\n+    }\\n     nsCOMPtr<nsIDOMNode> endParentNode(do_QueryInterface(endParentContent));\\n     NS_ENSURE_TRUE(endParentNode, NS_ERROR_FAILURE);\\n-    rv = range->SetEnd(endParentNode, aEndOffset);\\n+    rv = range->SetEnd(endParentNode, endOffset);\\n     NS_ENSURE_SUCCESS(rv, rv);\\n   }\\n \\n\""}