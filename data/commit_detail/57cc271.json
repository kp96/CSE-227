{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas57cc271\""},"diff":"\"57cc271 comment and whitespace cleanups only\\ndiff --git a/widget/src/cocoa/nsCursorManager.mm b/widget/src/cocoa/nsCursorManager.mm\\nindex ae1f1ef..af1f966 100644\\n--- a/widget/src/cocoa/nsCursorManager.mm\\n+++ b/widget/src/cocoa/nsCursorManager.mm\\n@@ -65,7 +65,7 @@ static nsCursorManager *gInstance;\\n /*! @method     createNSCursor:\\n     @abstract   Creates the appropriate cursor implementation from the arguments.\\n     @discussion Creates a native Mac cursor, using NSCursor.\\n-    @param      aPantherCursor selector indicating the NSCursor cursor to create\\n+    @param      aCursor selector indicating the NSCursor cursor to create\\n     @result     the Mac native implementation of the cursor\\n */\\n + (nsMacCursor *) createNSCursor: (SEL) aCursor;\\ndiff --git a/widget/src/cocoa/nsMacCursor.h b/widget/src/cocoa/nsMacCursor.h\\nindex 3b6ff46..5f5e807 100644\\n--- a/widget/src/cocoa/nsMacCursor.h\\n+++ b/widget/src/cocoa/nsMacCursor.h\\n@@ -73,7 +73,7 @@\\n     @abstract   Create a cursor by specifying the name of an image resource to use for the cursor and a hotspot.\\n     @discussion Creates a cursor by loading the named image using the <code>+[NSImage imageNamed:]</code> method.\\n                 <p>The image must be compatible with any restrictions laid down by <code>NSCursor</code>. These vary\\n-                by operating system version. eg, Jaguar has a smaller maximum size than Panther.</p>\\n+                by operating system version.</p>\\n                 <p>The hotspot precisely determines the point where the user clicks when using the cursor.</p>\\n     @param      aCursor the name of the image to use for the cursor\\n     @param      aPoint the point within the cursor to use as the hotspot\\ndiff --git a/widget/src/cocoa/nsMacCursor.mm b/widget/src/cocoa/nsMacCursor.mm\\nindex df4f08b..effef0a 100644\\n--- a/widget/src/cocoa/nsMacCursor.mm\\n+++ b/widget/src/cocoa/nsMacCursor.mm\\n@@ -95,6 +95,7 @@\\n     @param      aFrameIndex the index indicating which frame from the animation to display\\n */\\n - (void) setFrame: (int) aFrameIndex;\\n+\\n @end\\n \\n /*! @class      nsThemeCursor\\n@@ -115,6 +116,7 @@\\n     @result     an instance of <code>nsThemeCursor</code> representing the given <code>ThemeCursor</code>\\n */\\n - (id) initWithThemeCursor: (ThemeCursor) aCursor;\\n+\\n @end\\n \\n /*! @class      nsCocoaCursor\\n@@ -151,13 +153,14 @@\\n     @abstract   Create a cursor by specifying the name of an image resource to use for the cursor and a hotspot.\\n     @discussion Creates a cursor by loading the named image using the <code>+[NSImage imageNamed:]</code> method.\\n                 <p>The image must be compatible with any restrictions laid down by <code>NSCursor</code>. These vary\\n-                by operating system version. eg, Jaguar has a smaller maximum size than Panther.</p>\\n+                by operating system version.</p>\\n                 <p>The hotspot precisely determines the point where the user clicks when using the cursor.</p>\\n     @param      aCursor the name of the image to use for the cursor\\n     @param      aPoint the point within the cursor to use as the hotspot\\n     @result     an instance of <code>nsCocoaCursor</code> that uses the given image and hotspot\\n */\\n - (id) initWithImageNamed: (NSString *) aCursorImage hotSpot: (NSPoint) aPoint;\\n+\\n @end\\n \\n /*! @class      nsResourceCursor\\n@@ -185,6 +188,7 @@\\n     @result     an instance of <code>nsResourceCursor</code> that will animate the given cursor resources\\n */\\n - (id) initWithFirstFrame: (int) aFirstFrame lastFrame: (int) aLastFrame;\\n+\\n @end\\n \\n @implementation nsMacCursor\\n@@ -288,6 +292,7 @@\\n @end\\n \\n @implementation nsThemeCursor\\n+\\n - (id) initWithThemeCursor: (ThemeCursor) aCursor\\n {\\n   self = [super init];\\n@@ -328,6 +333,7 @@\\n @end\\n \\n @implementation nsCocoaCursor\\n+\\n - (id) initWithFrames: (NSArray *) aCursorFrames\\n {\\n   self = [super init];\\n@@ -395,8 +401,9 @@ INIT_FAILURE:\\n - (void) dealloc\\n {\\n   [mFrames release];\\n-  [super dealloc];    \\n+  [super dealloc];\\n }\\n+\\n @end\\n \\n @implementation nsResourceCursor\\ndiff --git a/widget/src/cocoa/nsSound.h b/widget/src/cocoa/nsSound.h\\nindex 5b90ca2..e44d948 100644\\n--- a/widget/src/cocoa/nsSound.h\\n+++ b/widget/src/cocoa/nsSound.h\\n@@ -46,7 +46,6 @@\\n \\n class nsSound : public nsISound,\\n                 public nsIStreamLoaderObserver\\n-\\n {\\n public: \\n     nsSound();\\ndiff --git a/widget/src/cocoa/nsToolkit.h b/widget/src/cocoa/nsToolkit.h\\nindex f217d51..ee1bf06 100644\\n--- a/widget/src/cocoa/nsToolkit.h\\n+++ b/widget/src/cocoa/nsToolkit.h\\n@@ -44,29 +44,6 @@\\n #import <Carbon/Carbon.h>\\n #import <IOKit/IOKitLib.h>\\n \\n-/**\\n- * The toolkit abstraction is necessary because the message pump must\\n- * execute within the same thread that created the widget under Win32.\\n- * We don't care about that on Mac: we have only one thread for the UI\\n- * and maybe even for the whole application.\\n- * \\n- * So on the Mac, the nsToolkit used to be a unique object, created once\\n- * at startup along with nsAppShell and passed to all the top-level\\n- * windows and it became a convenient place to throw in everything we\\n- * didn't know where else to put, like the PLEvent queue and\\n- * the handling of global pointers on some special widgets (focused\\n- * widget, widget hit, widget pointed).\\n- *\\n- * All this has changed: the application now usually creates one copy of\\n- * the nsToolkit per window and the special widgets had to be moved\\n- * to the nsMacEventHandler. Also, to avoid creating several repeaters,\\n- * the PLEvent queue has been moved to a global object of its own.\\n- *\\n- * If by any chance we support one day several threads for the UI\\n- * on the Mac, will have to create one instance of the PLEvent queue\\n- * per nsToolkit.\\n- */\\n-\\n #define MAC_OS_X_VERSION_10_4_HEX 0x00001040\\n #define MAC_OS_X_VERSION_10_5_HEX 0x00001050\\n \\n\""}