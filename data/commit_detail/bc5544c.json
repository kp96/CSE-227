{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Basbc5544c\""},"diff":"\"bc5544c Bug 393472  EXPIRE_NEVER annos can be orphaned when moz_places records are deleted (r=sspitzer) Bug 387573  ExpireHistoryParanoid does not cleanup all unused values (for mak77@supereva.it, r=dietrich)\\ndiff --git a/toolkit/components/places/src/nsNavHistoryExpire.cpp b/toolkit/components/places/src/nsNavHistoryExpire.cpp\\nindex 594d4d3..75ce80f 100644\\n--- a/toolkit/components/places/src/nsNavHistoryExpire.cpp\\n+++ b/toolkit/components/places/src/nsNavHistoryExpire.cpp\\n@@ -153,11 +153,13 @@ void\\n nsNavHistoryExpire::OnDeleteURI()\\n {\\n   mozIStorageConnection* connection = mHistory->GetStorageConnection();\\n-  if (! connection) {\\n+  if (!connection) {\\n     NS_NOTREACHED(\\\"No connection\\\");\\n     return;\\n   }\\n-  ExpireAnnotations(connection);\\n+  nsresult rv = ExpireAnnotations(connection);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireAnnotations failed.\\\");\\n }\\n \\n // nsNavHistoryExpire::OnQuit\\n@@ -168,7 +170,7 @@ void\\n nsNavHistoryExpire::OnQuit()\\n {\\n   mozIStorageConnection* connection = mHistory->GetStorageConnection();\\n-  if (! connection) {\\n+  if (!connection) {\\n     NS_NOTREACHED(\\\"No connection\\\");\\n     return;\\n   }\\n@@ -178,12 +180,20 @@ nsNavHistoryExpire::OnQuit()\\n     mTimer->Cancel();\\n \\n   // Handle degenerate runs:\\n-  ExpireForDegenerateRuns();\\n+  nsresult rv = ExpireForDegenerateRuns();\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireForDegenerateRuns failed.\\\");\\n \\n   // vacuum up dangling items\\n-  ExpireHistoryParanoid(connection);\\n-  ExpireFaviconsParanoid(connection);\\n-  ExpireAnnotationsParanoid(connection);\\n+  rv = ExpireHistoryParanoid(connection);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireHistoryParanoid failed.\\\");\\n+  rv = ExpireFaviconsParanoid(connection);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireFaviconsParanoid failed.\\\");\\n+  rv = ExpireAnnotationsParanoid(connection);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireAnnotationsParanoid failed.\\\");\\n }\\n \\n \\n@@ -201,11 +211,21 @@ nsNavHistoryExpire::ClearHistory()\\n   mozIStorageConnection* connection = mHistory->GetStorageConnection();\\n   NS_ENSURE_TRUE(connection, NS_ERROR_OUT_OF_MEMORY);\\n \\n-  ExpireItems(0, &keepGoing);\\n+  nsresult rv = ExpireItems(0, &keepGoing);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireItems failed.\\\");\\n \\n-  ExpireHistoryParanoid(connection);\\n-  ExpireFaviconsParanoid(connection);\\n-  ExpireAnnotationsParanoid(connection);\\n+  rv = ExpireHistoryParanoid(connection);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireHistoryParanoid failed.\\\");\\n+\\n+  rv = ExpireFaviconsParanoid(connection);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireFaviconsParanoid failed.\\\");\\n+\\n+  rv = ExpireAnnotationsParanoid(connection);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireAnnotationsParanoid failed.\\\");\\n \\n   ENUMERATE_WEAKARRAY(mHistory->mObservers, nsINavHistoryObserver,\\n                       OnClearHistory())\\n@@ -236,7 +256,9 @@ nsNavHistoryExpire::DoPartialExpiration()\\n \\n   // expire history items\\n   PRBool keepGoing;\\n-  ExpireItems(EXPIRATION_COUNT_PER_RUN, &keepGoing);\\n+  nsresult rv = ExpireItems(EXPIRATION_COUNT_PER_RUN, &keepGoing);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireItems failed.\\\");\\n \\n   if (keepGoing && mSequentialRuns < MAX_SEQUENTIAL_RUNS)\\n     StartTimer(SUBSEQUENT_EXIPRATION_TIMEOUT);\\n@@ -320,11 +342,18 @@ nsNavHistoryExpire::ExpireItems(PRUint32 aNumToExpire, PRBool* aKeepGoing)\\n   }\\n \\n   // don't worry about errors here, it doesn't affect our ability to continue\\n-  EraseFavicons(connection, expiredVisits);\\n-  EraseAnnotations(connection, expiredVisits);\\n+  rv = EraseFavicons(connection, expiredVisits);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"EraseFavicons failed.\\\");\\n+\\n+  rv = EraseAnnotations(connection, expiredVisits);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"EraseAnnotations failed.\\\");\\n \\n   // expire annotations by policy\\n-  ExpireAnnotations(connection);\\n+  rv = ExpireAnnotations(connection);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireAnnotations failed.\\\");\\n \\n   rv = transaction.Commit();\\n   NS_ENSURE_SUCCESS(rv, rv);\\n@@ -424,7 +453,8 @@ nsNavHistoryExpire::EraseVisits(mozIStorageConnection* aConnection,\\n // nsNavHistoryExpire::EraseHistory\\n //\\n //    This erases records in moz_places when there are no more visits.\\n-//    We need to be careful not to delete bookmarks and place:URIs.\\n+//    We need to be careful not to delete bookmarks, place:URIs and\\n+//    URIs with EXPIRE_NEVER annotations.\\n //\\n //    This will modify the input by setting the erased flag on each of the\\n //    array elements according to whether the history item was erased or not.\\n@@ -455,7 +485,12 @@ nsNavHistoryExpire::EraseHistory(mozIStorageConnection* aConnection,\\n     deletedPlaceIds +\\n     NS_LITERAL_CSTRING(\\\") AND id IN (SELECT h.id FROM moz_places h \\\"\\n       \\\"LEFT OUTER JOIN moz_historyvisits v ON h.id = v.place_id \\\"\\n-      \\\"WHERE v.id IS NULL)\\\"));\\n+      \\\"WHERE v.id IS NULL) \\\"\\n+      \\\"AND id NOT IN (SELECT h.id FROM moz_places h \\\"\\n+      \\\"JOIN moz_annos a ON h.id = a.place_id \\\"\\n+      \\\"WHERE a.expiration = \\\") +\\n+    nsPrintfCString(\\\"%d\\\", nsIAnnotationService::EXPIRE_NEVER) +\\n+    NS_LITERAL_CSTRING(\\\")\\\"));\\n }\\n \\n \\n@@ -614,19 +649,18 @@ nsNavHistoryExpire::ExpireHistoryParanoid(mozIStorageConnection* aConnection)\\n {\\n   // delete history entries with no visits that are not bookmarked\\n   // also never delete any \\\"place:\\\" URIs (see function header comment)\\n-  nsCOMPtr<mozIStorageStatement> deleteStatement;\\n-  nsresult rv = aConnection->CreateStatement(NS_LITERAL_CSTRING(\\n-      \\\"DELETE FROM moz_places WHERE id IN (SELECT h.id FROM moz_places h \\\"\\n+  nsresult rv = aConnection->ExecuteSimpleSQL(\\n+    NS_LITERAL_CSTRING(\\\"DELETE FROM moz_places \\\"\\n+      \\\"WHERE id IN (SELECT h.id FROM moz_places h \\\"\\n       \\\"LEFT OUTER JOIN moz_historyvisits v ON h.id = v.place_id \\\"\\n       \\\"LEFT OUTER JOIN moz_bookmarks b ON h.id = b.fk \\\"\\n+      \\\"LEFT OUTER JOIN moz_annos a ON h.id = a.place_id \\\"\\n       \\\"WHERE v.id IS NULL \\\"\\n-      \\\"AND b.type = ?1 AND b.fk IS NULL \\\"\\n-      \\\"AND SUBSTR(h.url,0,6) <> 'place:')\\\"),\\n-    getter_AddRefs(deleteStatement));\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n-  rv = deleteStatement->BindInt32Parameter(0, nsINavBookmarksService::TYPE_BOOKMARK);\\n-  NS_ENSURE_SUCCESS(rv, rv);\\n-  rv = deleteStatement->Execute();\\n+      \\\"AND b.id IS NULL \\\"\\n+      \\\"AND a.expiration = \\\") +\\n+      nsPrintfCString(\\\"%d\\\", nsIAnnotationService::EXPIRE_NEVER) +\\n+      NS_LITERAL_CSTRING(\\\" AND a.id IS NULL \\\"\\n+      \\\"AND SUBSTR(h.url,0,6) <> 'place:')\\\"));\\n   NS_ENSURE_SUCCESS(rv, rv);\\n   return NS_OK;\\n }\\n@@ -639,11 +673,13 @@ nsNavHistoryExpire::ExpireHistoryParanoid(mozIStorageConnection* aConnection)\\n nsresult\\n nsNavHistoryExpire::ExpireFaviconsParanoid(mozIStorageConnection* aConnection)\\n {\\n-  return aConnection->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\\n+  nsresult rv = aConnection->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\\n     \\\"DELETE FROM moz_favicons WHERE id IN \\\"\\n     \\\"(SELECT f.id FROM moz_favicons f \\\"\\n      \\\"LEFT OUTER JOIN moz_places h ON f.id = h.favicon_id \\\"\\n      \\\"WHERE h.favicon_id IS NULL)\\\"));\\n+  NS_ENSURE_SUCCESS(rv, rv);\\n+  return rv;\\n }\\n \\n \\n@@ -718,7 +754,9 @@ nsNavHistoryExpire::ExpireForDegenerateRuns()\\n   // This run looks suspicious, try to expire up to the number of items\\n   // we may have missed this session.\\n   PRBool keepGoing;\\n-  ExpireItems(mAddCount - mExpiredItems, &keepGoing);\\n+  nsresult rv = ExpireItems(mAddCount - mExpiredItems, &keepGoing);\\n+  if (NS_FAILED(rv))\\n+    NS_WARNING(\\\"ExpireItems failed.\\\");\\n   return PR_TRUE;\\n }\\n \\ndiff --git a/toolkit/components/places/tests/unit/test_expiration.js b/toolkit/components/places/tests/unit/test_expiration.js\\nindex 5f3523c..8fc7a5a 100644\\n--- a/toolkit/components/places/tests/unit/test_expiration.js\\n+++ b/toolkit/components/places/tests/unit/test_expiration.js\\n@@ -97,6 +97,15 @@ var observer = {\\n };\\n histsvc.addObserver(observer, false);\\n \\n+// get direct db connection for date-based anno tests\\n+var dirService = Cc[\\\"@mozilla.org/file/directory_service;1\\\"].getService(Ci.nsIProperties);\\n+var dbFile = dirService.get(\\\"ProfD\\\", Ci.nsIFile);\\n+dbFile.append(\\\"places.sqlite\\\");\\n+\\n+var dbService = Cc[\\\"@mozilla.org/storage/service;1\\\"].getService(Ci.mozIStorageService);\\n+var dbConnection = dbService.openDatabase(dbFile);\\n+  \\n+\\n // main\\n function run_test() {\\n   var testURI = uri(\\\"http://mozilla.com\\\");\\n@@ -125,16 +134,21 @@ function run_test() {\\n   test that nsIBrowserHistory.removeAllPages does remove expirable annotations\\n   but doesn't remove bookmarks or EXPIRE_NEVER annotations.\\n   */\\n-  histsvc.addVisit(testURI, Date.now(), 0, histsvc.TRANSITION_TYPED, false, 0);\\n-  annosvc.setPageAnnotation(testURI, testAnnoName + \\\"Hist\\\", testAnnoVal, 0, annosvc.EXPIRE_WITH_HISTORY);\\n-  annosvc.setPageAnnotation(testURI, testAnnoName + \\\"Never\\\", testAnnoVal, 0, annosvc.EXPIRE_NEVER);\\n+  var removeAllTestURI = uri(\\\"http://removeallpages.com\\\");\\n+  histsvc.addVisit(removeAllTestURI, Date.now(), 0, histsvc.TRANSITION_TYPED, false, 0);\\n+  annosvc.setPageAnnotation(removeAllTestURI, testAnnoName + \\\"Hist\\\", testAnnoVal, 0, annosvc.EXPIRE_WITH_HISTORY);\\n+  annosvc.setPageAnnotation(removeAllTestURI, testAnnoName + \\\"Never\\\", testAnnoVal, 0, annosvc.EXPIRE_NEVER);\\n   bhist.removeAllPages();\\n   try {\\n     annosvc.getPageAnnotation(testAnnoName + \\\"Hist\\\");\\n     do_throw(\\\"nsIBrowserHistory.removePagesFromHost() didn't remove an EXPIRE_WITH_HISTORY annotation\\\");\\n   } catch(ex) {}\\n-  do_check_eq(annosvc.getPageAnnotation(testURI, testAnnoName + \\\"Never\\\"), testAnnoVal);\\n-  annosvc.removePageAnnotation(testURI, testAnnoName + \\\"Never\\\");\\n+  try {\\n+    do_check_eq(annosvc.getPageAnnotation(removeAllTestURI, testAnnoName + \\\"Never\\\"), testAnnoVal);\\n+    annosvc.removePageAnnotation(removeAllTestURI, testAnnoName + \\\"Never\\\");\\n+  } catch(ex) {\\n+    do_throw(\\\"nsIBrowserHistory.removeAllPages deleted EXPIRE_NEVER annos!\\\");\\n+  }\\n \\n   /*\\n   test age-based history and anno expiration via the browser.history_expire_days pref.\\n@@ -154,14 +168,6 @@ function run_test() {\\n   do_check_eq(testURI.spec, observer.expiredURI);\\n   do_check_eq(annosvc.getPageAnnotationNames(testURI, {}).length, 0);\\n \\n-  // get direct db connection for date-based anno tests\\n-  var dirService = Cc[\\\"@mozilla.org/file/directory_service;1\\\"].getService(Ci.nsIProperties);\\n-  var dbFile = dirService.get(\\\"ProfD\\\", Ci.nsIFile);\\n-  dbFile.append(\\\"places.sqlite\\\");\\n-\\n-  var dbService = Cc[\\\"@mozilla.org/storage/service;1\\\"].getService(Ci.mozIStorageService);\\n-  var dbConnection = dbService.openDatabase(dbFile);\\n-  \\n   /*\\n   test anno expiration (expire never)\\n   */\\n\""}