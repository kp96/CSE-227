{"sha":"\"47e7bc67f932866e4467f7ab8a23bb167405bebd\"","commit":{"author":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"committer":{"name":"\"Nicolas Silva\"","email":"\"nsilva@mozilla.com\"","date":"\"2016-09-01T15:51:09+02:00\""},"message":"\"Bug 1298345 - Refactor CanvasRenderingContext2D's texture allocation code. r=Bas8c4e1904\""},"diff":"\"8c4e1904 Bug 377693, notificationbox test, r=mano\\ndiff --git a/toolkit/content/tests/widgets/Makefile.in b/toolkit/content/tests/widgets/Makefile.in\\nindex d2fb516..64f1cd2 100644\\n--- a/toolkit/content/tests/widgets/Makefile.in\\n+++ b/toolkit/content/tests/widgets/Makefile.in\\n@@ -56,6 +56,7 @@ _TEST_FILES = \\ttest_bug360220.xul \\\\\\n \\t\\ttest_menuchecks.xul \\\\\\n \\t\\ttest_popup_attribute.xul \\\\\\n \\t\\ttest_popup_preventdefault.xul \\\\\\n+\\t\\ttest_notificationbox.xul \\\\\\n \\t\\ttest_scale.xul \\\\\\n \\t\\ttest_radio.xul \\\\\\n \\t\\ttest_tooltip.xul \\\\\\ndiff --git a/toolkit/content/tests/widgets/test_notificationbox.xul b/toolkit/content/tests/widgets/test_notificationbox.xul\\nnew file mode 100644\\nindex 0000000..0255ba4\\n--- /dev/null\\n+++ b/toolkit/content/tests/widgets/test_notificationbox.xul\\n@@ -0,0 +1,325 @@\\n+<?xml version=\\\"1.0\\\"?>\\n+<?xml-stylesheet href=\\\"chrome://global/skin\\\" type=\\\"text/css\\\"?>\\n+<?xml-stylesheet href=\\\"/tests/SimpleTest/test.css\\\" type=\\\"text/css\\\"?>\\n+<!--\\n+  XUL Widget Test for notificationbox\\n+  -->\\n+<window title=\\\"Notification Box\\\" width=\\\"500\\\" height=\\\"600\\\"\\n+        xmlns=\\\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\\\">\\n+  <script type=\\\"application/javascript\\\" src=\\\"/MochiKit/packed.js\\\"></script>\\n+  <script type=\\\"application/javascript\\\" src=\\\"/tests/SimpleTest/SimpleTest.js\\\"></script>  \\n+\\n+  <notificationbox id=\\\"nb\\\"/>\\n+\\n+  <!-- test resuls are displayed in the html:body -->\\n+  <body xmlns=\\\"http://www.w3.org/1999/xhtml\\\" style=\\\"height: 300px; overflow: auto;\\\"/>\\n+\\n+  <!-- test code goes here -->\\n+  <script type=\\\"application/javascript\\\"><![CDATA[\\n+// ise - is exact - compares using ===\\n+function ise(left, right, name) { SimpleTest.ok(left === right, name); }\\n+\\n+SimpleTest.waitForExplicitFinish();\\n+\\n+var testtag_notificationbox_buttons = [\\n+  {\\n+    label: \\\"Button 1\\\",\\n+    accesskey: \\\"u\\\",\\n+    callback: testtag_notificationbox_buttonpressed,\\n+    popup: null\\n+  }\\n+];\\n+\\n+function testtag_notificationbox_buttonpressed(event)\\n+{\\n+}\\n+\\n+function testtag_notificationbox(nb)\\n+{\\n+  testtag_notificationbox_State(nb, \\\"initial\\\", null, 0);\\n+\\n+  ise(nb.notificationsHidden, false, \\\"initial notificationsHidden\\\");\\n+  ise(nb.removeAllNotifications(false), undefined, \\\"initial removeAllNotifications\\\");\\n+  testtag_notificationbox_State(nb, \\\"initial removeAllNotifications\\\", null, 0);\\n+  ise(nb.removeAllNotifications(true), undefined, \\\"initial removeAllNotifications immediate\\\");\\n+  testtag_notificationbox_State(nb, \\\"initial removeAllNotifications immediate\\\", null, 0);\\n+\\n+  runTimedTests(tests, -1, nb, null);\\n+}\\n+\\n+var tests =\\n+[\\n+  {\\n+    test: function(nb, ntf) {\\n+      // append a new notification\\n+      var ntf = nb.appendNotification(\\\"Notification\\\", \\\"note\\\", \\\"happy.png\\\",\\n+                                      nb.PRIORITY_INFO_LOW, testtag_notificationbox_buttons);\\n+      ise(ntf && ntf.localName == \\\"notification\\\", true, \\\"append notification\\\");\\n+      return ntf;\\n+    },\\n+    result: function(nb, ntf) {\\n+      testtag_notificationbox_State(nb, \\\"append\\\", ntf, 1);\\n+      testtag_notification_State(nb, ntf, \\\"append\\\", \\\"Notification\\\", \\\"note\\\",\\n+                                 \\\"happy.png\\\", nb.PRIORITY_INFO_LOW);\\n+\\n+      // check the getNotificationWithValue method\\n+      var ntf_found = nb.getNotificationWithValue(\\\"note\\\");\\n+      ise(ntf, ntf_found, \\\"getNotificationWithValue note\\\");\\n+\\n+      var none_found = nb.getNotificationWithValue(\\\"notenone\\\");\\n+      ise(none_found, null, \\\"getNotificationWithValue null\\\");\\n+      return ntf;\\n+    }\\n+  },\\n+  {\\n+    test: function(nb, ntf) {\\n+      // check that notifications can be removed properly\\n+      nb.removeNotification(ntf);\\n+      return ntf;\\n+    },\\n+    result: function(nb, ntf) {\\n+      testtag_notificationbox_State(nb, \\\"removeNotification\\\", null, 0);\\n+\\n+      // try removing the notification again to make sure an exception occurs\\n+      var exh = false;\\n+      try {\\n+        nb.removeNotification(ntf);\\n+      } catch (ex) { exh = true; }\\n+      ise(exh, true, \\\"removeNotification again\\\");\\n+      testtag_notificationbox_State(nb, \\\"removeNotification again\\\", null, 0);\\n+    }\\n+  },\\n+  {\\n+    test: function(nb, ntf) {\\n+      // append another notification\\n+      var ntf = nb.appendNotification(\\\"Notification\\\", \\\"note\\\", \\\"happy.png\\\",\\n+                                      nb.PRIORITY_INFO_MEDIUM, testtag_notificationbox_buttons);\\n+      ise(ntf && ntf.localName == \\\"notification\\\", true, \\\"append notification again\\\");\\n+      return ntf;\\n+    },\\n+    result: function(nb, ntf) {\\n+      // check that appending a second notification after removing the first one works\\n+      testtag_notificationbox_State(nb, \\\"append again\\\", ntf, 1);\\n+      testtag_notification_State(nb, ntf, \\\"append again\\\", \\\"Notification\\\", \\\"note\\\",\\n+                                 \\\"happy.png\\\", nb.PRIORITY_INFO_MEDIUM);\\n+      return ntf;\\n+    }\\n+  },\\n+  {\\n+    test: function(nb, ntf) {\\n+      // check the removeCurrentNotification method\\n+      nb.removeCurrentNotification();\\n+      return ntf;\\n+    },\\n+    result: function(nb, ntf) {\\n+      testtag_notificationbox_State(nb, \\\"removeCurrentNotification\\\", null, 0);\\n+    }\\n+  },\\n+  {\\n+    test: function(nb, ntf) {\\n+      var ntf = nb.appendNotification(\\\"Notification\\\", \\\"note\\\", \\\"happy.png\\\",\\n+                                      nb.PRIORITY_INFO_HIGH, testtag_notificationbox_buttons);\\n+      return ntf;\\n+    },\\n+    result: function(nb, ntf) {\\n+      // test the removeAllNotifications method\\n+      testtag_notificationbox_State(nb, \\\"append info_high\\\", ntf, 1);\\n+      ise(ntf.priority, nb.PRIORITY_INFO_HIGH,\\n+                    \\\"notification.priority \\\" + nb.PRIORITY_INFO_HIGH);\\n+      ise(nb.removeAllNotifications(false), undefined, \\\"removeAllNotifications\\\");\\n+    }\\n+  },\\n+  {\\n+    test: function(nb, unused) {\\n+      // add a number of notifications and check that they are added in order\\n+      nb.appendNotification(\\\"Four\\\", \\\"4\\\", null, nb.PRIORITY_INFO_HIGH, testtag_notificationbox_buttons);\\n+      nb.appendNotification(\\\"Seven\\\", \\\"7\\\", null, nb.PRIORITY_WARNING_HIGH, testtag_notificationbox_buttons);\\n+      nb.appendNotification(\\\"Two\\\", \\\"2\\\", null, nb.PRIORITY_INFO_LOW, null);\\n+      nb.appendNotification(\\\"Eight\\\", \\\"8\\\", null, nb.PRIORITY_CRITICAL_LOW, null);\\n+      nb.appendNotification(\\\"Five\\\", \\\"5\\\", null, nb.PRIORITY_WARNING_LOW, null);\\n+      nb.appendNotification(\\\"Six\\\", \\\"6\\\", null, nb.PRIORITY_WARNING_HIGH, null);\\n+      nb.appendNotification(\\\"One\\\", \\\"1\\\", null, nb.PRIORITY_INFO_LOW, null);\\n+      nb.appendNotification(\\\"Nine\\\", \\\"9\\\", null, nb.PRIORITY_CRITICAL_MEDIUM, null);\\n+      var ntf = nb.appendNotification(\\\"Ten\\\", \\\"10\\\", null, nb.PRIORITY_CRITICAL_HIGH, null);\\n+      nb.appendNotification(\\\"Three\\\", \\\"3\\\", null, nb.PRIORITY_INFO_MEDIUM, null);\\n+      return ntf;\\n+    },\\n+    result: function(nb, ntf) {\\n+      ise(nb.currentNotification == ntf ?\\n+                    nb.currentNotification.value : null, \\\"10\\\", \\\"appendNotification order\\\");\\n+      return 1;\\n+    }\\n+  },\\n+  {\\n+    // test closing notifications to make sure that the current notification is still set properly\\n+    repeat: true,\\n+    test: function(nb, testidx) {\\n+      switch (testidx) {\\n+        case 1:\\n+          nb.getNotificationWithValue(\\\"10\\\").close();\\n+          return [1, 9];\\n+        case 2:\\n+          nb.removeNotification(nb.getNotificationWithValue(\\\"9\\\"));\\n+          return [2, 8];\\n+        case 3:\\n+          nb.removeCurrentNotification();\\n+          return [3, 7];\\n+        case 4:\\n+          nb.getNotificationWithValue(\\\"6\\\").close();\\n+          return [4, 7];\\n+        case 5:\\n+          nb.removeNotification(nb.getNotificationWithValue(\\\"5\\\"));\\n+          return [5, 7];\\n+        case 6:\\n+          nb.removeCurrentNotification();\\n+          return [6, 4];\\n+      }\\n+    },\\n+    result: function(nb, arr) {\\n+      // arr is [testindex, expectedvalue]\\n+      ise(nb.currentNotification.value, \\\"\\\" + arr[1], \\\"close order \\\" + arr[0]);\\n+      ise(nb.allNotifications.length, 10 - arr[0], \\\"close order \\\" + arr[0] + \\\" count\\\");\\n+      if (arr[0] == 6)\\n+        this.repeat = false;\\n+      return ++arr[0];\\n+    }\\n+  },\\n+  {\\n+    test: function(nb, ntf) {\\n+      var exh = false;\\n+      try {\\n+        nb.appendNotification(\\\"no\\\", \\\"no\\\", \\\"no\\\", 0, null);\\n+      } catch (ex) { exh = true; }\\n+      ise(exh, true, \\\"appendNotification priority too low\\\");\\n+\\n+      exh = false;\\n+      try {\\n+        nb.appendNotification(\\\"no\\\", \\\"no\\\", \\\"no\\\", 11, null);\\n+      } catch (ex) { exh = true; }\\n+      ise(exh, true, \\\"appendNotification priority too high\\\");\\n+\\n+      // check that the other priority types work properly\\n+      runTimedTests(appendPriorityTests, -1, nb, nb.PRIORITY_WARNING_LOW);\\n+    }\\n+  },\\n+];\\n+\\n+var appendPriorityTests = [\\n+  {\\n+    test: function(nb, priority) {\\n+      var ntf = nb.appendNotification(\\\"Notification\\\", \\\"note\\\", \\\"happy.png\\\",\\n+                                      priority, testtag_notificationbox_buttons);\\n+      ise(ntf && ntf.localName == \\\"notification\\\", true, \\\"append notification \\\" + priority);\\n+      return [ntf, priority];\\n+    },\\n+    result: function(nb, obj) {\\n+      ise(obj[0].priority, obj[1], \\\"notification.priority \\\" + obj[1]);\\n+      return obj[1];\\n+    }\\n+  },\\n+  {\\n+    test: function(nb, priority) {\\n+      nb.removeCurrentNotification();\\n+      return priority;\\n+    },\\n+    result: function(nb, priority) {\\n+      if (priority == nb.PRIORITY_CRITICAL_BLOCK)\\n+        SimpleTest.finish();\\n+      else\\n+        runTimedTests(appendPriorityTests, -1, nb, ++priority);\\n+    }\\n+  }\\n+];\\n+\\n+function testtag_notificationbox_State(nb, testid, expecteditem, expectedcount)\\n+{\\n+  ise(nb.currentNotification, expecteditem, testid + \\\" currentNotification\\\");\\n+  ise(nb.allNotifications ? nb.allNotifications.length : \\\"no value\\\",\\n+                expectedcount, testid + \\\" allNotifications\\\");\\n+}\\n+\\n+function testtag_notification_State(nb, ntf, testid, label, value, image, priority)\\n+{\\n+  ise(ntf.control, nb, testid + \\\" notification.control\\\");\\n+  ise(ntf.label, label, testid + \\\" notification.label\\\");\\n+  ise(ntf.value, value, testid + \\\" notification.value\\\");\\n+  ise(ntf.image, image, testid + \\\" notification.image\\\");\\n+  ise(ntf.priority, priority, testid + \\\" notification.priority\\\");\\n+\\n+  var type;\\n+  switch (priority) {\\n+    case nb.PRIORITY_INFO_LOW:\\n+    case nb.PRIORITY_INFO_MEDIUM:\\n+    case nb.PRIORITY_INFO_HIGH:\\n+      type = \\\"info\\\";\\n+      break;\\n+    case nb.PRIORITY_WARNING_LOW:\\n+    case nb.PRIORITY_WARNING_MEDIUM:\\n+    case nb.PRIORITY_WARNING_HIGH:\\n+      type = \\\"warning\\\";\\n+      break;\\n+    case nb.PRIORITY_CRITICAL_LOW:\\n+    case nb.PRIORITY_CRITICAL_MEDIUM:\\n+    case nb.PRIORITY_CRITICAL_HIGH:\\n+    case nb.PRIORITY_CRITICAL_BLOCK:\\n+      type = \\\"critical\\\";\\n+      break;\\n+  }\\n+\\n+  ise(ntf.type, type, testid + \\\" notification.type\\\");\\n+}\\n+\\n+/**\\n+ * run one or more tests which perform a test operation, wait for a delay,\\n+ * then perform a result operation.\\n+ *\\n+ * tests - array of objects where each object is :\\n+ *           {\\n+ *             test: test function,\\n+ *             result: result function\\n+ *             repeat: true to repeat the test\\n+ *           }\\n+ * idx - starting index in tests\\n+ * element - element to run tests on\\n+ * arg - argument to pass between test functions\\n+ *\\n+ * If, after executing the result part, the repeat property of the test is\\n+ * true, then the test is repeated. If the repeat property is not true,\\n+ * continue on to the next test.\\n+ *\\n+ * The test and result functions take two arguments, the element and the arg.\\n+ * The test function may return a value which will passed to the result\\n+ * function as its arg. The result function may also return a value which\\n+ * will be passed to the next repetition or the next test in the array.\\n+ */\\n+function runTimedTests(tests, idx, element, arg)\\n+{\\n+  if (idx >= 0 && \\\"result\\\" in tests[idx])\\n+    arg = tests[idx].result(element, arg);\\n+\\n+  // if not repeating, move on to the next test\\n+  if (idx == -1 || !tests[idx].repeat)\\n+    idx++;\\n+\\n+  if (idx < tests.length) {\\n+    var result = tests[idx].test(element, arg);\\n+    setTimeout(runTimedTestsWait, 50, tests, idx, element, result);\\n+  }\\n+}\\n+\\n+function runTimedTestsWait(tests, idx, element, arg)\\n+{\\n+  // use this secret property to check if the timer is still running. If it\\n+  // is, then the notification hasn't opened or closed yet\\n+  if (element._timer)\\n+    setTimeout(runTimedTestsWait, 50, tests, idx, element, arg);\\n+  else\\n+    runTimedTests(tests, idx, element, arg);\\n+}\\n+\\n+setTimeout(testtag_notificationbox, 0, document.getElementById('nb'));\\n+]]>\\n+</script>\\n+\\n+</window>\\n+\\n\""}